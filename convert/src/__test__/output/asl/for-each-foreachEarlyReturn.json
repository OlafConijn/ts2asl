{
  "StartAt": "Initialize",
  "States": {
    "Initialize": {
      "Type": "Pass",
      "ResultPath": "$",
      "Parameters": {
        "vars.$": "$$.Execution.Input"
      },
      "Next": "Assign arr"
    },
    "Assign arr": {
      "Type": "Pass",
      "ResultPath": "$.vars.arr",
      "Result": [
        1,
        2,
        3
      ],
      "Comment": "source: arr = [1, 2, 3]",
      "Next": "Foreach Initialize"
    },
    "Foreach Initialize": {
      "Type": "Pass",
      "ResultPath": "$.foreach",
      "Parameters": {
        "items.$": "$.vars.arr",
        "currentItem.$": "$.vars.arr[0]"
      },
      "Next": "Foreach CheckDone"
    },
    "Foreach CheckDone": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.foreach.items[0]",
          "IsPresent": true,
          "Next": "If (item === 2)"
        }
      ],
      "Default": "Foreach Exit"
    },
    "If (item === 2)": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.foreach.currentItem",
          "NumericEquals": 2,
          "Next": "Evaluate States.Format('f ..."
        }
      ],
      "Comment": "source: if (item === 2) { return `found ${item}!`; //r ...",
      "Default": "Foreach Next"
    },
    "Evaluate States.Format('f ...": {
      "Type": "Pass",
      "ResultPath": "$.tmp.eval",
      "Parameters": {
        "value.$": "States.Format('found {}!', $.foreach.currentItem)"
      },
      "Comment": "source: result of an expression cannot be placed in In ...",
      "Next": "Assign Return_var"
    },
    "Assign Return_var": {
      "Type": "Pass",
      "ResultPath": "$.tmp.return_var",
      "InputPath": "$.tmp.eval.value",
      "Next": "Return result"
    },
    "Return result": {
      "End": true,
      "Type": "Pass",
      "InputPath": "$.tmp.return_var"
    },
    "Foreach Exit": {
      "Type": "Pass",
      "ResultPath": "$.foreach",
      "Result": {},
      "Next": "Throw Error"
    },
    "Foreach Next": {
      "Type": "Pass",
      "ResultPath": "$.foreach",
      "Parameters": {
        "items.$": "$.foreach.items[1:]",
        "currentItem.$": "$.foreach.items[1]"
      },
      "Next": "Foreach CheckDone"
    },
    "Throw Error": {
      "Type": "Fail",
      "Error": "Error",
      "Cause": "should not get here",
      "Comment": "source: throw new Error(\"should not get here\");"
    }
  },
  "Comment": "ASL Generated using ts2asl version 0.1.29."
}