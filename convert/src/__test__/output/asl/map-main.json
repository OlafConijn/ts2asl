{
  "StartAt": "Initialize",
  "States": {
    "Initialize": {
      "Type": "Pass",
      "ResultPath": "$",
      "Parameters": {
        "vars.$": "$$.Execution.Input"
      },
      "Next": "getEntries()"
    },
    "getEntries()": {
      "Type": "Task",
      "ResultPath": "$.vars.entries",
      "Resource": "[!lambda[getEntries]arn]",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Comment": "source: getEntries()",
      "Next": "Map"
    },
    "Map": {
      "Type": "Map",
      "ResultPath": "$.tmp.lastResult",
      "Iterator": {
        "StartAt": "PutItem",
        "States": {
          "PutItem": {
            "Type": "Task",
            "ResultPath": "$.tmp.lastResult",
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:putItem",
            "Parameters": {
              "Item": {
                "pk": {
                  "S": "pk"
                },
                "sk": {
                  "S.$": "States.Format('sk#{}', $.vars.entry)"
                },
                "status": {
                  "S": "available"
                }
              },
              "ConditionExpression": "attribute_not_exists(:sk)",
              "TableName": "[!parameter[tableName]]"
            },
            "Catch": [
              {
                "Next": "Empty",
                "ErrorEquals": [
                  "DynamoDb.ConditionalCheckFailedException"
                ]
              }
            ],
            "End": true
          },
          "Empty": {
            "Type": "Succeed"
          }
        }
      },
      "ItemsPath": "$.vars.entries",
      "Parameters": {
        "vars": {
          "entry.$": "$$.Map.Item.Value"
        }
      },
      "End": true
    }
  }
}