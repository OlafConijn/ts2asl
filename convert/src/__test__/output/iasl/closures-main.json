{
  "inputArgumentName": {
    "identifier": "_input",
    "_syntaxKind": "identifier"
  },
  "contextArgumentName": {
    "identifier": "_context",
    "_syntaxKind": "identifier"
  },
  "statements": [
    {
      "name": {
        "identifier": "numbers",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "Assign numbers",
        "parameters": {
          "elements": [
            {
              "value": 0,
              "type": "numeric",
              "_syntaxKind": "literal"
            },
            {
              "value": 1,
              "type": "numeric",
              "_syntaxKind": "literal"
            },
            {
              "value": 2,
              "type": "numeric",
              "_syntaxKind": "literal"
            },
            {
              "value": 3,
              "type": "numeric",
              "_syntaxKind": "literal"
            }
          ],
          "_syntaxKind": "literal-array"
        },
        "source": "numbers = [0, 1, 2, 3]",
        "_syntaxKind": "asl-pass-state"
      },
      "stateName": "Assign numbers",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "letters",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "Assign letters",
        "parameters": {
          "elements": [
            {
              "value": "a",
              "type": "string",
              "_syntaxKind": "literal"
            },
            {
              "value": "b",
              "type": "string",
              "_syntaxKind": "literal"
            },
            {
              "value": "c",
              "type": "string",
              "_syntaxKind": "literal"
            },
            {
              "value": "d",
              "type": "string",
              "_syntaxKind": "literal"
            }
          ],
          "_syntaxKind": "literal-array"
        },
        "source": "letters = [\"a\", \"b\", \"c\", \"d\"]",
        "_syntaxKind": "asl-pass-state"
      },
      "stateName": "Assign letters",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "global",
        "_syntaxKind": "identifier",
        "type": "unknown"
      },
      "expression": {
        "stateName": "Assign global",
        "parameters": {
          "value": "prefix",
          "type": "string",
          "_syntaxKind": "literal"
        },
        "source": "global = \"prefix\"",
        "_syntaxKind": "asl-pass-state"
      },
      "stateName": "Assign global",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "outer",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "Assign outer",
        "parameters": {
          "properties": {
            "middle": {
              "properties": {
                "inner": {
                  "value": 3,
                  "type": "numeric",
                  "_syntaxKind": "literal"
                }
              },
              "_syntaxKind": "literal-object"
            }
          },
          "_syntaxKind": "literal-object"
        },
        "source": "outer = { middle: { inner: 3 } }",
        "_syntaxKind": "asl-pass-state"
      },
      "stateName": "Assign outer",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "For number Of numbers",
      "items": {
        "identifier": "numbers",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "iterator": {
        "inputArgumentName": {
          "identifier": "number",
          "_syntaxKind": "identifier"
        },
        "statements": [
          {
            "stateName": "For letter Of letters",
            "items": {
              "identifier": "letters",
              "_syntaxKind": "identifier",
              "type": "object"
            },
            "iterator": {
              "inputArgumentName": {
                "identifier": "letter",
                "_syntaxKind": "identifier"
              },
              "statements": [
                {
                  "name": {
                    "identifier": "combined",
                    "_syntaxKind": "identifier",
                    "type": "object"
                  },
                  "expression": {
                    "stateName": "Assign combined",
                    "parameters": {
                      "properties": {
                        "number": {
                          "identifier": "number",
                          "_syntaxKind": "identifier",
                          "type": "numeric"
                        },
                        "letter": {
                          "identifier": "letter",
                          "_syntaxKind": "identifier",
                          "type": "string"
                        },
                        "global": {
                          "identifier": "global",
                          "_syntaxKind": "identifier",
                          "type": "string"
                        },
                        "inner": {
                          "identifier": "outer.middle.inner",
                          "type": "numeric",
                          "_syntaxKind": "identifier"
                        }
                      },
                      "_syntaxKind": "literal-object"
                    },
                    "source": "combined = { number, letter, global, inner: outer.middle.inner }",
                    "_syntaxKind": "asl-pass-state"
                  },
                  "stateName": "Assign combined",
                  "_syntaxKind": "variable-assignment"
                },
                {
                  "stateName": "doSomething(combined)",
                  "resource": "lambda:doSomething",
                  "retry": [
                    {
                      "errorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "intervalSeconds": 2,
                      "maxAttempts": 6,
                      "backoffRate": 2
                    }
                  ],
                  "parameters": {
                    "identifier": "combined",
                    "_syntaxKind": "identifier",
                    "type": "object"
                  },
                  "source": "doSomething(combined)",
                  "_syntaxKind": "asl-task-state"
                }
              ],
              "_syntaxKind": "function"
            },
            "_syntaxKind": "asl-map-state"
          }
        ],
        "_syntaxKind": "function"
      },
      "_syntaxKind": "asl-map-state"
    }
  ],
  "_syntaxKind": "statemachine"
}