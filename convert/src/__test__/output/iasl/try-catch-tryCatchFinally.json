{
  "statements": [
    {
      "stateName": "Try Catch Finally",
      "try": {
        "statements": [
          {
            "stateName": "lambda()",
            "resource": "[!lambda[lambda]arn]",
            "retry": [
              {
                "errorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "intervalSeconds": 2,
                "maxAttempts": 6,
                "backoffRate": 2
              }
            ],
            "source": "lambda()",
            "_syntaxKind": "asl-task-state"
          }
        ],
        "_syntaxKind": "function"
      },
      "finally": {
        "statements": [
          {
            "expression": {
              "value": "finally",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "_syntaxKind": "return",
            "stateName": "Return \"finally\""
          }
        ],
        "_syntaxKind": "function"
      },
      "catch": [
        {
          "errorEquals": [
            "States.All"
          ],
          "block": {
            "statements": [
              {
                "stateName": "Log (\"failed\")",
                "parameters": {
                  "value": "failed",
                  "type": "string",
                  "_syntaxKind": "literal"
                },
                "source": "console.log(\"failed\")",
                "_syntaxKind": "asl-pass-state"
              }
            ],
            "_syntaxKind": "function"
          }
        }
      ],
      "source": "try {\n    lambda();\n  } catch {\n    console.log(\"failed\")\n  } finally {\n    return \"finally\";\n  }",
      "_syntaxKind": "try"
    }
  ],
  "_syntaxKind": "statemachine"
}