// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when converting test-resources 1`] = `
"import * as asl from \\"@ts2asl/asl-lib\\";
import { handler as ReplayPrefixerHandler } from \\"../../functions/replay/prefixer\\";

const replayPrefixer = asl.deploy.asLambda((input: StateMachineInput) => { return [\\"\\"] });

//option 1: native typescript
// export const main = asl.deploy.asStateMachine(async (input: StateMachineInput) => {
//   const result = await replayPrefixer(input);
//   for (const prefix of result) {
//     await asl.nativeSfnStartExecution({
//       parameters: {
//         input: asl.states.format(\\"{}\\", prefix),
//         stateMachineArn: asl.deploy.getParameter(\\"stateMachineArn\\"),
//       },
//     });
//   }
// });

//option 2: asl lib typescript
export const main = asl.deploy.asStateMachine(async (input: StateMachineInput) =>{
    const result = asl.typescriptInvoke({
        name: \\"replayPrefixer(input)\\",
        resource: replayPrefixer,
        parameters: () => input,
        comment: \\"replayPrefixer(input)\\"
    });
    asl.map({
        maxConcurrency: 5,
        items: result,
        iterator: (prefix) => asl.nativeSfnStartExecution({
            parameters: {
                input: asl.states.format(\\"{}\\", prefix),
                stateMachineArn: asl.deploy.getParameter(\\"stateMachineArn\\"),
            },
        }),
    });
});

interface StateMachineInput {
  startDate: string;
  endDate?: string;
}


export const replayWorker = asl.deploy.asStateMachine(async (input: ReplayWorkerInput) => {
  const objects = await asl.nativeS3ListObjectsV2({ parameters: { Prefix: input.prefix, Bucket: \\"preprod-metrics-bucket-us-east-1\\" } });
  const itemsWithKeys = objects.Contents!.filter((item) => item.Key);
  const keys = itemsWithKeys.map(x => x.Key);

  await asl.map({
    items: keys,
    maxConcurrency: 5,
    iterator: key => {
      asl.nativeSNSPublish({
        parameters: {
          TopicArn: \\"arn:aws:sns:us-east-1:400780617693:CentralizedMetricsStream-preprod-CentralizedMetricsStreamTopic48052E47-1X7SNV6Y357H6\\",
          Subject: \\"Ingestion Replay S3\\",
          Message: asl.states.jsonToString({
            Records: [
              {
                replay: true,
                eventSource: \\"aws:s3\\",
                awsRegion: \\"us-east-1\\",
                eventName: \\"ObjectCreated:Put\\",
                s3: {
                  s3SchemaVersion: \\"1.0\\",
                  bucket: {
                    name: \\"preprod-metrics-bucket-us-east-1\\",
                    arn: \\"arn:aws:s3:::preprod-metrics-bucket-us-east-1\\"
                  },
                  object: {
                    key: key
                  }
                }
              }
            ]
          })
        }
      })
    }
  });
});

interface ReplayWorkerInput {
  prefix: string;
}
"
`;

exports[`when converting test-resources 2`] = `
Object {
  "_syntaxKind": "statemachine",
  "contextArgumentName": undefined,
  "inputArgumentName": Object {
    "_syntaxKind": "identifier",
    "identifier": "input",
  },
  "statements": Array [
    Object {
      "_syntaxKind": "variable-assignment",
      "expression": Object {
        "_syntaxKind": "asl-task-state",
        "catch": undefined,
        "parameters": Object {
          "_syntaxKind": "identifier",
          "identifier": "input",
          "type": "object",
        },
        "resource": "typescript:replayPrefixer",
        "retry": Array [
          Object {
            "BackoffRate": 2,
            "ErrorEquals": Array [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
          },
        ],
        "source": "replayPrefixer(input)",
        "stateName": "replayPrefixer(input)",
      },
      "name": Object {
        "_syntaxKind": "identifier",
        "identifier": "result",
        "type": "object",
      },
      "stateName": "Assign result",
    },
    Object {
      "_syntaxKind": "asl-map-state",
      "items": Object {
        "_syntaxKind": "identifier",
        "identifier": "result",
        "type": "object",
      },
      "iterator": Object {
        "_syntaxKind": "block",
        "statements": Array [
          Object {
            "_syntaxKind": "variable-assignment",
            "expression": Object {
              "_syntaxKind": "asl-task-state",
              "parameters": Object {
                "_syntaxKind": "literal-object",
                "properties": Object {
                  "Input": Object {
                    "_syntaxKind": "asl-intrinsic-function",
                    "arguments": Array [
                      Object {
                        "_syntaxKind": "literal",
                        "type": "string",
                        "value": "{}",
                      },
                      Object {
                        "_syntaxKind": "identifier",
                        "identifier": "prefix",
                        "type": "string",
                      },
                    ],
                    "function": "asl.states.format",
                  },
                  "StateMachineArn": Object {
                    "_syntaxKind": "literal",
                    "type": "string",
                    "value": "unresolved parameter: stateMachineArn",
                  },
                },
              },
              "resource": "arn:aws:states:::aws-sdk:sfn:startExecution",
              "source": undefined,
              "stateName": "StartExecution",
            },
            "name": Object {
              "_syntaxKind": "identifier",
              "identifier": "_var",
              "type": "unknown",
            },
          },
          Object {
            "_syntaxKind": "return",
            "expression": Object {
              "_syntaxKind": "identifier",
              "identifier": "_var",
              "type": "unknown",
            },
          },
        ],
      },
      "maxConcurrency": 5,
    },
  ],
}
`;

exports[`when converting test-resources 3`] = `
Object {
  "StartAt": "Initialize",
  "States": Object {
    "Initialize": Object {
      "Next": "replayPrefixer(input)",
      "Parameters": Object {
        "vars.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Map": Object {
      "Comment": undefined,
      "End": true,
      "ItemsPath": "$.vars.result",
      "Iterator": Object {
        "StartAt": "StartExecution",
        "States": Object {
          "Pass": Object {
            "End": true,
            "InputPath": "$.vars._var",
            "Type": "Pass",
          },
          "StartExecution": Object {
            "Catch": undefined,
            "Comment": undefined,
            "HeartbeatSeconds": undefined,
            "Next": "Pass",
            "Parameters": Object {
              "Input.$": "States.Format('{}', $.vars.prefix)",
              "StateMachineArn": "unresolved parameter: stateMachineArn",
            },
            "Resource": "arn:aws:states:::aws-sdk:sfn:startExecution",
            "ResultPath": "$.vars._var",
            "Retry": undefined,
            "TimeoutSeconds": undefined,
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 5,
      "ResultPath": "$.lastResult",
      "Type": "Map",
    },
    "replayPrefixer(input)": Object {
      "Catch": undefined,
      "Comment": "source: replayPrefixer(input)",
      "HeartbeatSeconds": undefined,
      "InputPath": "$.vars",
      "Next": "Map",
      "Resource": "typescript:replayPrefixer",
      "ResultPath": "$.vars.result",
      "Retry": Array [
        Object {
          "BackoffRate": 2,
          "ErrorEquals": Array [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
        },
      ],
      "TimeoutSeconds": undefined,
      "Type": "Task",
    },
  },
}
`;
