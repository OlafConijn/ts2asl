{
  "inputArgumentName": {
    "identifier": "input",
    "_syntaxKind": "identifier"
  },
  "contextArgumentName": {
    "identifier": "_context",
    "_syntaxKind": "identifier"
  },
  "statements": [
    {
      "name": {
        "identifier": "billJob",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "13: createBillJob(input)",
        "resource": "typescript:createBillJob",
        "retry": [],
        "catch": [],
        "parameters": {
          "identifier": "input",
          "_syntaxKind": "identifier",
          "type": "object"
        },
        "source": "createBillJob(input)",
        "_syntaxKind": "asl-task-state"
      },
      "stateName": "12: Assign billJob",
      "_syntaxKind": "variable-assignment"
    },
    {
      "seconds": {
        "value": 120,
        "type": "numeric",
        "_syntaxKind": "literal"
      },
      "_syntaxKind": "asl-wait-state"
    },
    {
      "name": {
        "identifier": "jobResult",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "16: createNonEmptyBills(billJob)",
        "resource": "typescript:createNonEmptyBills",
        "retry": [],
        "catch": [],
        "parameters": {
          "identifier": "billJob",
          "_syntaxKind": "identifier",
          "type": "object"
        },
        "source": "createNonEmptyBills(billJob)",
        "_syntaxKind": "asl-task-state"
      },
      "stateName": "14: Assign jobResult",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "billPromises",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "18: For bill Of jobResult.bil ...",
        "items": {
          "identifier": "jobResult.bills",
          "type": "object",
          "_syntaxKind": "identifier"
        },
        "catch": [],
        "retry": [],
        "iterator": {
          "inputArgumentName": {
            "identifier": "bill",
            "_syntaxKind": "identifier"
          },
          "statements": [
            {
              "name": {
                "identifier": "approveNonEmptyBillRequest",
                "_syntaxKind": "identifier",
                "type": "object"
              },
              "expression": {
                "stateName": "19: Assign approveNonEmptyBil ...",
                "parameters": {
                  "properties": {
                    "lastDateInBillingPeriod": {
                      "identifier": "jobResult.lastDateInBillingPeriod",
                      "type": "string",
                      "_syntaxKind": "identifier"
                    },
                    "bill": {
                      "identifier": "bill",
                      "_syntaxKind": "identifier",
                      "type": "object"
                    }
                  },
                  "_syntaxKind": "literal-object"
                },
                "source": "approveNonEmptyBillRequest = { lastDateInBillingPeriod: jobResult.lastDateInBillingPeriod, bill }",
                "_syntaxKind": "asl-pass-state"
              },
              "stateName": "18: Assign approveNonEmptyBil ...",
              "_syntaxKind": "variable-assignment"
            },
            {
              "name": {
                "identifier": "approvalResult",
                "_syntaxKind": "identifier",
                "type": "object"
              },
              "expression": {
                "stateName": "20: approveNonEmptyBill(appro ...",
                "resource": "typescript:approveNonEmptyBill",
                "retry": [],
                "catch": [],
                "parameters": {
                  "identifier": "approveNonEmptyBillRequest",
                  "_syntaxKind": "identifier",
                  "type": "object"
                },
                "source": "approveNonEmptyBill(approveNonEmptyBillRequest)",
                "_syntaxKind": "asl-task-state"
              },
              "stateName": "19: Assign approvalResult",
              "_syntaxKind": "variable-assignment"
            },
            {
              "stateName": "20: If (approvalResult.valid)",
              "condition": {
                "operator": "is-present",
                "rhs": {
                  "identifier": "approvalResult.valid",
                  "type": "boolean",
                  "_syntaxKind": "identifier"
                },
                "_syntaxKind": "binary-expression"
              },
              "then": {
                "statements": [
                  {
                    "expression": {
                      "properties": {
                        "valid": {
                          "identifier": "approvalResult.valid",
                          "type": "unknown",
                          "_syntaxKind": "identifier"
                        },
                        "billable": {
                          "identifier": "approvalResult.billable",
                          "type": "boolean",
                          "_syntaxKind": "identifier"
                        },
                        "billId": {
                          "identifier": "approvalResult.billId",
                          "type": "string",
                          "_syntaxKind": "identifier"
                        },
                        "accountId": {
                          "identifier": "approvalResult.accountId",
                          "type": "string",
                          "_syntaxKind": "identifier"
                        },
                        "accountCode": {
                          "identifier": "approvalResult.accountCode",
                          "type": "string",
                          "_syntaxKind": "identifier"
                        },
                        "accountType": {
                          "identifier": "approvalResult.accountType",
                          "type": "string",
                          "_syntaxKind": "identifier"
                        }
                      },
                      "_syntaxKind": "literal-object"
                    },
                    "_syntaxKind": "return",
                    "stateName": "21: Return { valid: ..."
                  }
                ],
                "_syntaxKind": "function"
              },
              "else": {
                "statements": [
                  {
                    "name": {
                      "identifier": "result",
                      "_syntaxKind": "identifier",
                      "type": "unknown"
                    },
                    "expression": {
                      "stateName": "Invoke",
                      "resource": "arn:aws:states:::aws-sdk:apigateway:invoke",
                      "parameters": {
                        "properties": {
                          "ApiEndpoint": {
                            "value": "yyyyyyyy",
                            "type": "string",
                            "_syntaxKind": "literal"
                          },
                          "Method": {
                            "value": "POST",
                            "type": "string",
                            "_syntaxKind": "literal"
                          },
                          "Path": {
                            "value": "/xxxxxxxx",
                            "type": "string",
                            "_syntaxKind": "literal"
                          },
                          "RequestBody": {
                            "properties": {
                              "accountName": {
                                "identifier": "bill.accountName",
                                "type": "unknown",
                                "_syntaxKind": "identifier"
                              },
                              "accountId": {
                                "identifier": "bill.accountId",
                                "type": "string",
                                "_syntaxKind": "identifier"
                              },
                              "billId": {
                                "identifier": "bill.billId",
                                "type": "unknown",
                                "_syntaxKind": "identifier"
                              },
                              "errors": {
                                "identifier": "bill.errors",
                                "type": "unknown",
                                "_syntaxKind": "identifier"
                              },
                              "stage": {
                                "identifier": "bill.stage",
                                "type": "unknown",
                                "_syntaxKind": "identifier"
                              }
                            },
                            "_syntaxKind": "literal-object"
                          }
                        },
                        "_syntaxKind": "literal-object"
                      },
                      "_syntaxKind": "asl-task-state"
                    },
                    "stateName": "30: Assign result",
                    "_syntaxKind": "variable-assignment"
                  },
                  {
                    "expression": {
                      "identifier": "result",
                      "_syntaxKind": "identifier",
                      "type": "unknown"
                    },
                    "_syntaxKind": "return",
                    "stateName": "44: Return result"
                  }
                ],
                "_syntaxKind": "function"
              },
              "_syntaxKind": "if"
            }
          ],
          "_syntaxKind": "function"
        },
        "_syntaxKind": "asl-map-state"
      },
      "stateName": "16: Assign billPromises",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "bills",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "49: Assign bills",
        "parameters": {
          "identifier": "billPromises",
          "_syntaxKind": "identifier",
          "type": "object"
        },
        "_syntaxKind": "asl-pass-state"
      },
      "stateName": "47: Assign bills",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "validBills",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "identifier": "bills",
        "_syntaxKind": "identifier",
        "type": "object",
        "filterExpression": {
          "argument": {
            "identifier": "x",
            "_syntaxKind": "identifier",
            "type": "object"
          },
          "expression": {
            "operator": "not",
            "rhs": {
              "operator": "is-present",
              "rhs": {
                "identifier": "x.valid",
                "type": "boolean",
                "_syntaxKind": "identifier"
              },
              "_syntaxKind": "binary-expression"
            },
            "_syntaxKind": "binary-expression"
          }
        }
      },
      "stateName": "49: Assign validBills",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "invoices",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "52: For x Of validBills.map",
        "items": {
          "identifier": "validBills",
          "_syntaxKind": "identifier",
          "type": "object"
        },
        "catch": [],
        "retry": [],
        "iterator": {
          "inputArgumentName": {
            "identifier": "x",
            "_syntaxKind": "identifier"
          },
          "statements": [
            {
              "stateName": "52: createInvoice(x)",
              "resource": "typescript:createInvoice",
              "retry": [],
              "catch": [],
              "parameters": {
                "identifier": "x",
                "_syntaxKind": "identifier",
                "type": "object"
              },
              "source": "createInvoice(x)",
              "_syntaxKind": "asl-task-state"
            }
          ],
          "_syntaxKind": "function"
        },
        "source": "validBills.map(async x => createInvoice(x))",
        "_syntaxKind": "asl-map-state"
      },
      "stateName": "50: Assign invoices",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "validatedInvoices",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "53: For x Of invoices.map",
        "items": {
          "identifier": "invoices",
          "_syntaxKind": "identifier",
          "type": "object"
        },
        "catch": [],
        "retry": [],
        "iterator": {
          "inputArgumentName": {
            "identifier": "x",
            "_syntaxKind": "identifier"
          },
          "statements": [
            {
              "stateName": "53: validateInvoice(x)",
              "resource": "typescript:validateInvoice",
              "retry": [],
              "catch": [],
              "parameters": {
                "identifier": "x",
                "_syntaxKind": "identifier",
                "type": "object"
              },
              "source": "validateInvoice(x)",
              "_syntaxKind": "asl-task-state"
            }
          ],
          "_syntaxKind": "function"
        },
        "source": "invoices.map(async x => validateInvoice(x))",
        "_syntaxKind": "asl-map-state"
      },
      "stateName": "52: Assign validatedInvoices",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "invalidInvoices",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "identifier": "validatedInvoices",
        "_syntaxKind": "identifier",
        "type": "object",
        "filterExpression": {
          "argument": {
            "identifier": "x",
            "_syntaxKind": "identifier",
            "type": "object"
          },
          "expression": {
            "operator": "not",
            "rhs": {
              "operator": "is-present",
              "rhs": {
                "identifier": "x.valid",
                "type": "boolean",
                "_syntaxKind": "identifier"
              },
              "_syntaxKind": "binary-expression"
            },
            "_syntaxKind": "binary-expression"
          }
        }
      },
      "stateName": "53: Assign invalidInvoices",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "55: If (invalidInvoices.lengt ...",
      "condition": {
        "lhs": {
          "identifier": "invalidInvoices",
          "_syntaxKind": "identifier",
          "type": "object",
          "jsonPathExpression": ".length()"
        },
        "operator": "gt",
        "rhs": {
          "value": 0,
          "type": "numeric",
          "_syntaxKind": "literal"
        },
        "_syntaxKind": "binary-expression"
      },
      "then": {
        "statements": [
          {
            "stateName": "57: createGithubIssue({ bills ...",
            "resource": "typescript:createGithubIssue",
            "retry": [],
            "catch": [],
            "parameters": {
              "properties": {
                "bills": {
                  "properties": {
                    "invalid": {
                      "identifier": "invalidInvoices",
                      "_syntaxKind": "identifier",
                      "type": "object"
                    }
                  },
                  "_syntaxKind": "literal-object"
                }
              },
              "_syntaxKind": "literal-object"
            },
            "_syntaxKind": "asl-task-state"
          }
        ],
        "_syntaxKind": "function"
      },
      "_syntaxKind": "if"
    },
    {
      "name": {
        "identifier": "validInvoices",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "identifier": "validatedInvoices",
        "_syntaxKind": "identifier",
        "type": "object",
        "filterExpression": {
          "argument": {
            "identifier": "x",
            "_syntaxKind": "identifier",
            "type": "object"
          },
          "expression": {
            "lhs": {
              "identifier": "x.valid",
              "type": "boolean",
              "_syntaxKind": "identifier"
            },
            "operator": "eq",
            "rhs": {
              "value": true,
              "type": "boolean",
              "_syntaxKind": "literal"
            },
            "_syntaxKind": "binary-expression"
          }
        }
      },
      "stateName": "58: Assign validInvoices",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "60: If (!input.shouldFinalize)",
      "condition": {
        "operator": "not",
        "rhs": {
          "operator": "is-present",
          "rhs": {
            "identifier": "input.shouldFinalize",
            "type": "boolean",
            "_syntaxKind": "identifier"
          },
          "_syntaxKind": "binary-expression"
        },
        "_syntaxKind": "binary-expression"
      },
      "then": {
        "statements": [
          {
            "_syntaxKind": "return",
            "stateName": "62: Return undefined"
          }
        ],
        "_syntaxKind": "function"
      },
      "source": "if (!input.shouldFinalize) {\n      return;\n    }",
      "_syntaxKind": "if"
    },
    {
      "stateName": "64: For invoice Of validInvoices",
      "items": {
        "identifier": "validInvoices",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "catch": [],
      "retry": [],
      "iterator": {
        "inputArgumentName": {
          "identifier": "invoice",
          "_syntaxKind": "identifier"
        },
        "statements": [
          {
            "stateName": "66: If (invoice.billable)",
            "condition": {
              "operator": "is-present",
              "rhs": {
                "identifier": "invoice.billable",
                "type": "boolean",
                "_syntaxKind": "identifier"
              },
              "_syntaxKind": "binary-expression"
            },
            "then": {
              "statements": [
                {
                  "stateName": "68: finallizeInvoice(invoice ...",
                  "resource": "typescript:finallizeInvoice",
                  "retry": [],
                  "catch": [],
                  "parameters": {
                    "identifier": "invoice",
                    "_syntaxKind": "identifier",
                    "type": "object"
                  },
                  "_syntaxKind": "asl-task-state"
                }
              ],
              "_syntaxKind": "function"
            },
            "else": {
              "statements": [
                {
                  "resource": "arn::states:::sns:publish.waitForTaskToken",
                  "parameters": {
                    "properties": {
                      "TopicArn": {
                        "value": "BillingManualApproval16216020",
                        "type": "string",
                        "_syntaxKind": "literal"
                      },
                      "Message": {
                        "properties": {
                          "TaskToken": {
                            "value": "$$.Task.Token",
                            "type": "string",
                            "_syntaxKind": "literal"
                          },
                          "billId": {
                            "identifier": "invoice.billId",
                            "type": "string",
                            "_syntaxKind": "identifier"
                          },
                          "invoiceId": {
                            "identifier": "invoice.invoiceId",
                            "type": "string",
                            "_syntaxKind": "identifier"
                          },
                          "stage": {
                            "value": "olaf",
                            "type": "string",
                            "_syntaxKind": "literal"
                          }
                        },
                        "_syntaxKind": "literal-object"
                      },
                      "Subject": {
                        "value": "olaf - Billing Approval",
                        "type": "string",
                        "_syntaxKind": "literal"
                      }
                    },
                    "_syntaxKind": "literal-object"
                  },
                  "catch": [],
                  "retry": [],
                  "_syntaxKind": "asl-task-state"
                }
              ],
              "_syntaxKind": "function"
            },
            "_syntaxKind": "if"
          }
        ],
        "_syntaxKind": "function"
      },
      "_syntaxKind": "asl-map-state"
    }
  ],
  "_syntaxKind": "statemachine"
}