{
  "StartAt": "Initialize",
  "States": {
    "Initialize": {
      "Type": "Pass",
      "ResultPath": "$",
      "Parameters": {
        "vars.$": "$$.Execution.Input"
      },
      "Next": "13: createBillJob(input)"
    },
    "13: createBillJob(input)": {
      "Type": "Task",
      "ResultPath": "$.vars.billJob",
      "Resource": "typescript:createBillJob",
      "InputPath": "$.vars",
      "Catch": [],
      "Retry": [],
      "Comment": "source: createBillJob(input)",
      "Next": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 120,
      "Next": "16: createNonEmptyBills(billJob)"
    },
    "16: createNonEmptyBills(billJob)": {
      "Type": "Task",
      "ResultPath": "$.vars.jobResult",
      "Resource": "typescript:createNonEmptyBills",
      "InputPath": "$.vars.billJob",
      "Catch": [],
      "Retry": [],
      "Comment": "source: createNonEmptyBills(billJob)",
      "Next": "16: Assign billPromises"
    },
    "16: Assign billPromises": {
      "Type": "Map",
      "ResultPath": "$.vars.billPromises",
      "Iterator": {
        "StartAt": "18: Assign approveNonEmptyBil ...",
        "States": {
          "18: Assign approveNonEmptyBil ...": {
            "Type": "Pass",
            "ResultPath": "$.vars.approveNonEmptyBillRequest",
            "Parameters": {
              "lastDateInBillingPeriod.$": "$.vars.jobResult.lastDateInBillingPeriod",
              "bill.$": "$.vars.bill"
            },
            "Comment": "source: approveNonEmptyBillRequest = { lastDateInBilli ...",
            "Next": "20: approveNonEmptyBill(appro ..."
          },
          "20: approveNonEmptyBill(appro ...": {
            "Type": "Task",
            "ResultPath": "$.vars.approvalResult",
            "Resource": "typescript:approveNonEmptyBill",
            "InputPath": "$.vars.approveNonEmptyBillRequest",
            "Catch": [],
            "Retry": [],
            "Comment": "source: approveNonEmptyBill(approveNonEmptyBillRequest)",
            "Next": "20: If (approvalResult.valid)"
          },
          "20: If (approvalResult.valid)": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.vars.approvalResult.valid",
                "IsPresent": true,
                "Next": "Pass"
              }
            ],
            "Default": "Pass"
          },
          "Pass": {
            "Type": "Pass",
            "Parameters": {
              "valid.$": "$.vars.approvalResult.valid",
              "billable.$": "$.vars.approvalResult.billable",
              "billId.$": "$.vars.approvalResult.billId",
              "accountId.$": "$.vars.approvalResult.accountId",
              "accountCode.$": "$.vars.approvalResult.accountCode",
              "accountType.$": "$.vars.approvalResult.accountType"
            },
            "End": true
          }
        }
      },
      "ItemsPath": "$.vars.jobResult.bills",
      "Parameters": {
        "vars": {
          "bill.$": "$$.Map.Item.Value",
          "jobResult.$": "$.vars.jobResult"
        }
      },
      "Next": "47: Assign bills"
    },
    "47: Assign bills": {
      "Type": "Pass",
      "ResultPath": "$.vars.bills",
      "InputPath": "$.vars.billPromises",
      "Next": "49: Assign validBills"
    },
    "49: Assign validBills": {
      "Type": "Pass",
      "ResultPath": "$.vars.validBills",
      "InputPath": "$.vars.bills[?(!(@.valid))]",
      "Next": "50: Assign invoices"
    },
    "50: Assign invoices": {
      "Type": "Map",
      "ResultPath": "$.vars.invoices",
      "Iterator": {
        "StartAt": "52: createInvoice(x)",
        "States": {
          "52: createInvoice(x)": {
            "Type": "Task",
            "Resource": "typescript:createInvoice",
            "InputPath": "$.vars.x",
            "Catch": [],
            "Retry": [],
            "Comment": "source: createInvoice(x)",
            "End": true
          }
        }
      },
      "ItemsPath": "$.vars.validBills",
      "Comment": "source: validBills.map(async x => createInvoice(x))",
      "Parameters": {
        "vars": {
          "x.$": "$.vars.x"
        }
      },
      "Next": "52: Assign validatedInvoices"
    },
    "52: Assign validatedInvoices": {
      "Type": "Map",
      "ResultPath": "$.vars.validatedInvoices",
      "Iterator": {
        "StartAt": "53: validateInvoice(x)",
        "States": {
          "53: validateInvoice(x)": {
            "Type": "Task",
            "Resource": "typescript:validateInvoice",
            "InputPath": "$.vars.x",
            "Catch": [],
            "Retry": [],
            "Comment": "source: validateInvoice(x)",
            "End": true
          }
        }
      },
      "ItemsPath": "$.vars.invoices",
      "Comment": "source: invoices.map(async x => validateInvoice(x))",
      "Parameters": {
        "vars": {
          "x.$": "$.vars.x"
        }
      },
      "Next": "53: Assign invalidInvoices"
    },
    "53: Assign invalidInvoices": {
      "Type": "Pass",
      "ResultPath": "$.vars.invalidInvoices",
      "InputPath": "$.vars.validatedInvoices[?(!(@.valid))]",
      "Next": "55: If (invalidInvoices.lengt ..."
    },
    "55: If (invalidInvoices.lengt ...": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.vars.invalidInvoices.length()",
          "StringGreaterThan": 0,
          "Next": "57: createGithubIssue({ bills ..."
        }
      ],
      "Default": "58: Assign validInvoices"
    },
    "57: createGithubIssue({ bills ...": {
      "Type": "Task",
      "Resource": "typescript:createGithubIssue",
      "Parameters": {
        "bills": {
          "invalid.$": "$.vars.invalidInvoices"
        }
      },
      "Catch": [],
      "Retry": [],
      "Next": "58: Assign validInvoices"
    },
    "58: Assign validInvoices": {
      "Type": "Pass",
      "ResultPath": "$.vars.validInvoices",
      "InputPath": "$.vars.validatedInvoices[?(@.valid == true)]",
      "Next": "60: If (!input.shouldFinalize)"
    },
    "60: If (!input.shouldFinalize)": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.vars.shouldFinalize",
          "IsPresent": false,
          "Next": "Empty"
        }
      ],
      "Comment": "source: if (!input.shouldFinalize) { return; }",
      "Default": "64: For invoice Of validInvoices"
    },
    "Empty": {
      "Type": "Succeed"
    },
    "64: For invoice Of validInvoices": {
      "Type": "Map",
      "ResultPath": "$.lastResult",
      "Iterator": {
        "StartAt": "66: If (invoice.billable)",
        "States": {
          "66: If (invoice.billable)": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.vars.invoice.billable",
                "IsPresent": true,
                "Next": "68: finallizeInvoice(invoice ..."
              }
            ],
            "Default": "68: finallizeInvoice(invoice ..."
          },
          "68: finallizeInvoice(invoice ...": {
            "Type": "Task",
            "Resource": "typescript:finallizeInvoice",
            "InputPath": "$.vars.invoice",
            "Catch": [],
            "Retry": [],
            "End": true
          }
        }
      },
      "ItemsPath": "$.vars.validInvoices",
      "Parameters": {
        "vars": {
          "invoice.$": "$$.Map.Item.Value"
        }
      },
      "End": true
    }
  }
}