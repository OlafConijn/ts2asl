{
  "StartAt": "Initialize",
  "States": {
    "Initialize": {
      "Type": "Pass",
      "ResultPath": "$",
      "Parameters": {
        "vars.$": "$$.Execution.Input"
      },
      "Next": "Assign thresholds"
    },
    "Assign thresholds": {
      "Type": "Pass",
      "ResultPath": "$.vars.thresholds",
      "Result": [
        {
          "metric": "mappings.requests",
          "ceiling": 100
        },
        {
          "metric": "mappings.requests",
          "ceiling": 1000
        }
      ],
      "Comment": "source: thresholds = [ { \"metric\": \"mappings.requests\" ...",
      "Next": "Assign lastEvaluatedKey"
    },
    "Assign lastEvaluatedKey": {
      "Type": "Pass",
      "ResultPath": "$.vars.lastEvaluatedKey",
      "Result": null,
      "Comment": "source: lastEvaluatedKey: any | undefined = undefined",
      "Next": "Do While (lastEvaluatedKey)"
    },
    "Do While (lastEvaluatedKey)": {
      "Type": "Parallel",
      "Parameters": {
        "vars": {
          "thresholds.$": "$.vars.thresholds",
          "lastEvaluatedKey.$": "$.vars.lastEvaluatedKey"
        }
      },
      "Branches": [
        {
          "StartAt": "Scan",
          "States": {
            "Scan": {
              "Type": "Task",
              "ResultPath": "$.vars.scan",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
              "Parameters": {
                "TableName": "MyStorage",
                "Limit": 1,
                "ExclusiveStartKey.$": "$.vars.lastEvaluatedKey"
              },
              "Next": "For item Of scan.Items"
            },
            "For item Of scan.Items": {
              "Type": "Map",
              "ResultPath": "$.tmp.lastResult",
              "Iterator": {
                "StartAt": "For threshold Of thresholds",
                "States": {
                  "For threshold Of thresholds": {
                    "Type": "Map",
                    "ResultPath": "$.tmp.lastResult",
                    "Iterator": {
                      "StartAt": "Assign numericLastSentOnValue",
                      "States": {
                        "Assign numericLastSentOnValue": {
                          "Type": "Pass",
                          "ResultPath": "$.vars.numericLastSentOnValue",
                          "InputPath": "States.StringToJson($.vars.item.lastSentOnValue.N)",
                          "Next": "Assign numericTotal"
                        },
                        "Assign numericTotal": {
                          "Type": "Pass",
                          "ResultPath": "$.vars.numericTotal",
                          "InputPath": "States.StringToJson($.vars.item.total.N)",
                          "Next": "If ((item.sk.S === thresh ..."
                        },
                        "If ((item.sk.S === thresh ...": {
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Or": [
                                {
                                  "And": [
                                    {
                                      "And": [
                                        {
                                          "And": [
                                            {
                                              "Variable": "$.vars.item.sk.S",
                                              "StringEqualsPath": "$.vars.threshold.metric"
                                            },
                                            {
                                              "Variable": "$.vars.threshold.ceiling",
                                              "NumericLessThanEqualsPath": "$.vars.numericTotal"
                                            }
                                          ]
                                        },
                                        {
                                          "Variable": "$.vars.threshold.ceiling",
                                          "NumericGreaterThanPath": "$.vars.numericLastSentOnValue"
                                        }
                                      ]
                                    },
                                    {
                                      "Or": [
                                        {
                                          "Variable": "$.vars.item.lastBeginDateValue.S",
                                          "IsPresent": false
                                        },
                                        {
                                          "Variable": "$.vars.item.beginDate.S",
                                          "StringEqualsPath": "$.vars.item.lastBeginDateValue.S"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "And": [
                                    {
                                      "And": [
                                        {
                                          "Variable": "$.vars.item.sk.S",
                                          "StringEqualsPath": "$.vars.threshold.metric"
                                        },
                                        {
                                          "Variable": "$.vars.threshold.ceiling",
                                          "NumericLessThanEqualsPath": "$.vars.numericTotal"
                                        }
                                      ]
                                    },
                                    {
                                      "Or": [
                                        {
                                          "Variable": "$.vars.item.lastBeginDateValue.S",
                                          "IsPresent": false
                                        },
                                        {
                                          "Variable": "$.vars.item.beginDate.S",
                                          "StringEqualsPath": "$.vars.item.lastBeginDateValue.S"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "Next": "Assign detail"
                            }
                          ],
                          "Default": "Empty Default Choice"
                        },
                        "Assign detail": {
                          "Type": "Pass",
                          "ResultPath": "$.vars.detail",
                          "Parameters": {
                            "account_id.$": "$.vars.item.pk",
                            "threshold.$": "$.vars.threshold"
                          },
                          "Comment": "source: detail = { account_id: item.pk, threshold: thr ...",
                          "Next": "PutEvents"
                        },
                        "PutEvents": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::aws-sdk:eventbridge:putEvents",
                          "Parameters": {
                            "Entries": [
                              {
                                "Detail.$": "States.JsonToString($.vars.detail)",
                                "DetailType": "xxx.detail.type",
                                "EventBusName": "default",
                                "Source": "zzz.my.source"
                              }
                            ]
                          },
                          "Next": "UpdateItem"
                        },
                        "UpdateItem": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::aws-sdk:dynamodb:updateItem",
                          "Parameters": {
                            "TableName": "MyStorage",
                            "Key": {
                              "pk.$": "$.vars.item.pk",
                              "sk.$": "$.vars.item.sk"
                            },
                            "ConditionExpression": "lastSentOnValue < :newLastSentOnValue OR lastBeginDateValue <> :newLastBeginDateValue",
                            "UpdateExpression": "SET lastSentOnValue = :newLastSentOnValue, lastBeginDateValue = :newLastBeginDateValue",
                            "ExpressionAttributeValues": {
                              ":newLastSentOnValue": {
                                "N.$": "$.vars.item.total.N"
                              },
                              ":newLastBeginDateValue": {
                                "S.$": "$.vars.item.beginDate.S"
                              }
                            }
                          },
                          "End": true
                        },
                        "Empty Default Choice": {
                          "Type": "Pass",
                          "End": true
                        }
                      }
                    },
                    "ItemsPath": "$.vars.thresholds",
                    "Parameters": {
                      "vars": {
                        "threshold.$": "$$.Map.Item.Value",
                        "item.$": "$.vars.item"
                      }
                    },
                    "End": true
                  }
                }
              },
              "ItemsPath": "$.vars.scan.Items",
              "Parameters": {
                "vars": {
                  "item.$": "$$.Map.Item.Value",
                  "thresholds.$": "$.vars.thresholds"
                }
              },
              "Next": "Assign lastEvaluatedKey_1"
            },
            "Assign lastEvaluatedKey_1": {
              "Type": "Pass",
              "ResultPath": "$.vars.lastEvaluatedKey",
              "InputPath": "$.vars.scan.LastEvaluatedKey",
              "Next": "_WhileCondition"
            },
            "_WhileCondition": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.vars.lastEvaluatedKey",
                  "IsPresent": true,
                  "Next": "Scan"
                }
              ],
              "Default": "_WhileExit"
            },
            "_WhileExit": {
              "Type": "Succeed"
            }
          }
        }
      ],
      "End": true
    }
  }
}