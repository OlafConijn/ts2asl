// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   stream

declare module '@aws-sdk/client-lookoutvision' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateDatasetCommandInput, CreateDatasetCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateDatasetCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateModelCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateProjectCommand";
    import { DeleteDatasetCommandInput, DeleteDatasetCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteDatasetCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteModelCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteProjectCommand";
    import { DescribeDatasetCommandInput, DescribeDatasetCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeDatasetCommand";
    import { DescribeModelCommandInput, DescribeModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeModelCommand";
    import { DescribeModelPackagingJobCommandInput, DescribeModelPackagingJobCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeModelPackagingJobCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeProjectCommand";
    import { DetectAnomaliesCommandInput, DetectAnomaliesCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DetectAnomaliesCommand";
    import { ListDatasetEntriesCommandInput, ListDatasetEntriesCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListDatasetEntriesCommand";
    import { ListModelPackagingJobsCommandInput, ListModelPackagingJobsCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListModelPackagingJobsCommand";
    import { ListModelsCommandInput, ListModelsCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListModelsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListProjectsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListTagsForResourceCommand";
    import { StartModelCommandInput, StartModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StartModelCommand";
    import { StartModelPackagingJobCommandInput, StartModelPackagingJobCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StartModelPackagingJobCommand";
    import { StopModelCommandInput, StopModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StopModelCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/UntagResourceCommand";
    import { UpdateDatasetEntriesCommandInput, UpdateDatasetEntriesCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/UpdateDatasetEntriesCommand";
    import { LookoutVisionClient } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    /**
        * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions,
        *       data types, common parameters, and common errors.</p>
        *          <p>Amazon Lookout for Vision enables you to find visual defects in industrial products,
        *          accurately and at scale. It uses computer vision to identify missing components in an industrial product,
        *          damage to vehicles or structures, irregularities in production lines, and even minuscule defects in
        *          silicon wafers â€” or any other physical item where quality is important such as a missing capacitor
        *          on printed circuit boards.</p>
        */
    export class LookoutVision extends LookoutVisionClient {
            /**
                * <p>Creates a new dataset  in an Amazon Lookout for Vision project. <code>CreateDataset</code> can create a
                *       training or a test dataset from a valid dataset source (<code>DatasetSource</code>).</p>
                *          <p>If you want a single dataset project, specify <code>train</code> for the value of
                *          <code>DatasetType</code>.</p>
                *         <p>To have a project with separate training and test datasets, call <code>CreateDataset</code> twice.
                *            On the first call, specify <code>train</code> for the value of
                *            <code>DatasetType</code>. On the second call, specify <code>test</code> for the value of
                *            <code>DatasetType</code>. </p>
                *         <p>This operation requires permissions to perform the
                *            <code>lookoutvision:CreateDataset</code> operation.</p>
                */
            createDataset(args: CreateDatasetCommandInput, options?: __HttpHandlerOptions): Promise<CreateDatasetCommandOutput>;
            createDataset(args: CreateDatasetCommandInput, cb: (err: any, data?: CreateDatasetCommandOutput) => void): void;
            createDataset(args: CreateDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDatasetCommandOutput) => void): void;
            /**
                * <p>Creates a new version of a model within an an Amazon Lookout for Vision project.
                *       <code>CreateModel</code> is an asynchronous operation in which Amazon Lookout for Vision trains, tests,
                *        and evaluates a new version of a model. </p>
                *          <p>To get the current status, check the <code>Status</code> field returned
                *       in the response from <a>DescribeModel</a>.</p>
                *          <p>If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset
                *        to create a training and a test dataset.
                *        If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test
                *        the model. </p>
                *          <p>After training completes, the evaluation metrics are stored at the location specified in
                *         <code>OutputConfig</code>.  </p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:CreateModel</code> operation. If you want to tag your model, you also require
                *          permission to the <code>lookoutvision:TagResource</code> operation.</p>
                */
            createModel(args: CreateModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelCommandOutput>;
            createModel(args: CreateModelCommandInput, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            createModel(args: CreateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            /**
                * <p>Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling
                *          <a>CreateDataset</a>.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:CreateProject</code> operation.</p>
                */
            createProject(args: CreateProjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateProjectCommandOutput>;
            createProject(args: CreateProjectCommandInput, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            createProject(args: CreateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            /**
                * <p>Deletes an existing Amazon Lookout for Vision <code>dataset</code>. </p>
                *          <p>If your the project has a single
                *       dataset, you must create a new dataset before you can create a model.</p>
                *          <p>If you project has a training dataset and a test dataset consider the following. </p>
                *          <ul>
                *             <li>
                *                <p>If you delete the test dataset, your project reverts to a single dataset project. If you then
                *       train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.</p>
                *             </li>
                *             <li>
                *                <p>If you delete the training dataset, you must create a training dataset before you can create a model.</p>
                *             </li>
                *          </ul>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DeleteDataset</code> operation.</p>
                */
            deleteDataset(args: DeleteDatasetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDatasetCommandOutput>;
            deleteDataset(args: DeleteDatasetCommandInput, cb: (err: any, data?: DeleteDatasetCommandOutput) => void): void;
            deleteDataset(args: DeleteDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDatasetCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon Lookout for Vision model. You can't delete a running model. To stop a running model,
                *       use the <a>StopModel</a> operation.</p>
                *          <p>It might take a few seconds to delete a model. To determine if a model has been deleted, call
                *          <a>ListModels</a> and check if the version of the model (<code>ModelVersion</code>) is in the
                *          <code>Models</code> array. </p>
                *          <p></p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DeleteModel</code> operation.</p>
                */
            deleteModel(args: DeleteModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelCommandOutput>;
            deleteModel(args: DeleteModelCommandInput, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            deleteModel(args: DeleteModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon Lookout for Vision project.</p>
                *          <p>To delete a project, you must first delete each version of the model associated with
                *          the project. To delete a model use the <a>DeleteModel</a> operation.</p>
                *          <p>You also have to delete the dataset(s) associated with the model. For more information, see
                *          <a>DeleteDataset</a>.  The images referenced by the training and test datasets aren't deleted.
                *       </p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DeleteProject</code> operation.</p>
                */
            deleteProject(args: DeleteProjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProjectCommandOutput>;
            deleteProject(args: DeleteProjectCommandInput, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            deleteProject(args: DeleteProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            /**
                * <p>Describe an Amazon Lookout for Vision dataset.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DescribeDataset</code> operation.</p>
                */
            describeDataset(args: DescribeDatasetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDatasetCommandOutput>;
            describeDataset(args: DescribeDatasetCommandInput, cb: (err: any, data?: DescribeDatasetCommandOutput) => void): void;
            describeDataset(args: DescribeDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDatasetCommandOutput) => void): void;
            /**
                * <p>Describes a version of an Amazon Lookout for Vision model.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DescribeModel</code> operation.</p>
                */
            describeModel(args: DescribeModelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelCommandOutput>;
            describeModel(args: DescribeModelCommandInput, cb: (err: any, data?: DescribeModelCommandOutput) => void): void;
            describeModel(args: DescribeModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelCommandOutput) => void): void;
            /**
                * <p>Describes an Amazon Lookout for Vision model packaging job.
                * </p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DescribeModelPackagingJob</code> operation.</p>
                *
                *          <p>For more information, see
                *          <i>Using your Amazon Lookout for Vision model on an edge device</i> in the  Amazon Lookout for Vision Developer Guide. </p>
                */
            describeModelPackagingJob(args: DescribeModelPackagingJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelPackagingJobCommandOutput>;
            describeModelPackagingJob(args: DescribeModelPackagingJobCommandInput, cb: (err: any, data?: DescribeModelPackagingJobCommandOutput) => void): void;
            describeModelPackagingJob(args: DescribeModelPackagingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelPackagingJobCommandOutput) => void): void;
            /**
                * <p>Describes an Amazon Lookout for Vision project.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DescribeProject</code> operation.</p>
                */
            describeProject(args: DescribeProjectCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProjectCommandOutput>;
            describeProject(args: DescribeProjectCommandInput, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            describeProject(args: DescribeProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            /**
                * <p>Detects anomalies in an image that you supply. </p>
                *          <p>The response from <code>DetectAnomalies</code> includes a boolean prediction
                *          that the image contains one or more anomalies and a confidence value for the prediction.</p>
                *          <note>
                *             <p>Before calling <code>DetectAnomalies</code>, you must first start your model with the <a>StartModel</a> operation.
                *          You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your
                *          model uses. If you are not using a model, use the <a>StopModel</a> operation to stop your model. </p>
                *          </note>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:DetectAnomalies</code> operation.</p>
                */
            detectAnomalies(args: DetectAnomaliesCommandInput, options?: __HttpHandlerOptions): Promise<DetectAnomaliesCommandOutput>;
            detectAnomalies(args: DetectAnomaliesCommandInput, cb: (err: any, data?: DetectAnomaliesCommandOutput) => void): void;
            detectAnomalies(args: DetectAnomaliesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectAnomaliesCommandOutput) => void): void;
            /**
                * <p>Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly
                *       information for a single image, including the image location and the assigned label.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:ListDatasetEntries</code> operation.</p>
                */
            listDatasetEntries(args: ListDatasetEntriesCommandInput, options?: __HttpHandlerOptions): Promise<ListDatasetEntriesCommandOutput>;
            listDatasetEntries(args: ListDatasetEntriesCommandInput, cb: (err: any, data?: ListDatasetEntriesCommandOutput) => void): void;
            listDatasetEntries(args: ListDatasetEntriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatasetEntriesCommandOutput) => void): void;
            /**
                * <p>
                * Lists the model packaging jobs created for an Amazon Lookout for Vision project.
                * </p>
                *          <p>This operation requires permissions to perform the
                *     <code>lookoutvision:ListModelPackagingJobs</code> operation.
                * </p>
                *
                *          <p>For more information, see
                *       <i>Using your Amazon Lookout for Vision model on an edge device</i> in the  Amazon Lookout for Vision Developer Guide. </p>
                */
            listModelPackagingJobs(args: ListModelPackagingJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListModelPackagingJobsCommandOutput>;
            listModelPackagingJobs(args: ListModelPackagingJobsCommandInput, cb: (err: any, data?: ListModelPackagingJobsCommandOutput) => void): void;
            listModelPackagingJobs(args: ListModelPackagingJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelPackagingJobsCommandOutput) => void): void;
            /**
                * <p>Lists the versions of a model in an Amazon Lookout for Vision project.</p>
                *          <p>The <code>ListModels</code> operation is eventually consistent.
                *          Recent calls to <code>CreateModel</code> might
                *          take a while to appear in the response from <code>ListProjects</code>.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:ListModels</code> operation.</p>
                */
            listModels(args: ListModelsCommandInput, options?: __HttpHandlerOptions): Promise<ListModelsCommandOutput>;
            listModels(args: ListModelsCommandInput, cb: (err: any, data?: ListModelsCommandOutput) => void): void;
            listModels(args: ListModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelsCommandOutput) => void): void;
            /**
                * <p>Lists the Amazon Lookout for Vision projects in your AWS account.</p>
                *          <p>The <code>ListProjects</code> operation is eventually consistent.
                *          Recent calls to <code>CreateProject</code> and <code>DeleteProject</code> might
                *          take a while to appear in the response from <code>ListProjects</code>.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:ListProjects</code> operation.</p>
                */
            listProjects(args: ListProjectsCommandInput, options?: __HttpHandlerOptions): Promise<ListProjectsCommandOutput>;
            listProjects(args: ListProjectsCommandInput, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            listProjects(args: ListProjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            /**
                * <p>Returns a list of tags attached to the specified Amazon Lookout for Vision model.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:ListTagsForResource</code> operation.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while
                *          to complete. To check the current state of the model, use <a>DescribeModel</a>.</p>
                *          <p>A model is ready to use when its status is <code>HOSTED</code>.</p>
                *          <p>Once the model is running, you can detect custom labels in new images by calling
                *          <a>DetectAnomalies</a>.</p>
                *          <note>
                *             <p>You are charged for the amount of time that the model is running. To stop a running
                *          model, call <a>StopModel</a>.</p>
                *          </note>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:StartModel</code> operation.</p>
                */
            startModel(args: StartModelCommandInput, options?: __HttpHandlerOptions): Promise<StartModelCommandOutput>;
            startModel(args: StartModelCommandInput, cb: (err: any, data?: StartModelCommandOutput) => void): void;
            startModel(args: StartModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartModelCommandOutput) => void): void;
            /**
                * <p>Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for
                *    a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass.
                * </p>
                *
                *          <p>Use the <a>DescribeModelPackagingJob</a> API to determine the current status of the job.
                *
                *   The model packaging job is complete if the value of <code>Status</code> is <code>SUCCEEDED</code>.</p>
                *          <p>To deploy the component
                *       to the target device, use the component name and component version
                *       with the AWS IoT Greengrass <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html">CreateDeployment</a> API.</p>
                *
                *          <p>This operation requires the following permissions:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>lookoutvision:StartModelPackagingJob</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:PutObject</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:GetBucketLocation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>greengrass:CreateComponentVersion</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>greengrass:DescribeComponent</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>(Optional) <code>greengrass:TagResource</code>. Only required if you want to tag the component.</p>
                *             </li>
                *          </ul>
                *
                *
                *          <p>For more information, see
                *       <i>Using your Amazon Lookout for Vision model on an edge device</i> in the  Amazon Lookout for Vision Developer Guide. </p>
                */
            startModelPackagingJob(args: StartModelPackagingJobCommandInput, options?: __HttpHandlerOptions): Promise<StartModelPackagingJobCommandOutput>;
            startModelPackagingJob(args: StartModelPackagingJobCommandInput, cb: (err: any, data?: StartModelPackagingJobCommandOutput) => void): void;
            startModelPackagingJob(args: StartModelPackagingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartModelPackagingJobCommandOutput) => void): void;
            /**
                * <p>Stops the hosting of a running model. The operation might take a while to complete. To
                *          check the current status, call <a>DescribeModel</a>. </p>
                *          <p>After the model hosting stops, the <code>Status</code> of the model is <code>TRAINED</code>.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:StopModel</code> operation.</p>
                */
            stopModel(args: StopModelCommandInput, options?: __HttpHandlerOptions): Promise<StopModelCommandOutput>;
            stopModel(args: StopModelCommandInput, cb: (err: any, data?: StopModelCommandOutput) => void): void;
            stopModel(args: StopModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopModelCommandOutput) => void): void;
            /**
                * <p>Adds one or more key-value tags to an Amazon Lookout for Vision model.
                *          For more information, see <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:TagResource</code> operation.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from an Amazon Lookout for Vision model. For more information, see
                *          <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:UntagResource</code> operation.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Adds or updates one or more JSON Line entries in a dataset. A JSON Line includes information about an image
                *          used for training or testing an Amazon Lookout for Vision model.</p>
                *          <p>To update an existing JSON Line, use the <code>source-ref</code> field to identify the JSON Line. The JSON line
                *          that you supply replaces the existing JSON line. Any existing annotations that are not in the new JSON line are removed from the dataset.
                *       </p>
                *
                *
                *          <p>For more information, see
                *          <i>Defining JSON lines for anomaly classification</i> in the  Amazon Lookout for Vision Developer Guide. </p>
                *
                *          <note>
                *             <p>The images you reference in the <code>source-ref</code> field of a JSON line, must be
                *       in the same S3 bucket as the existing images in the dataset. </p>
                *          </note>
                *
                *          <p>Updating a dataset might take a while to complete. To check the current status, call <a>DescribeDataset</a> and
                *          check the <code>Status</code> field in the response.</p>
                *          <p>This operation requires permissions to perform the
                *          <code>lookoutvision:UpdateDatasetEntries</code> operation.</p>
                */
            updateDatasetEntries(args: UpdateDatasetEntriesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDatasetEntriesCommandOutput>;
            updateDatasetEntries(args: UpdateDatasetEntriesCommandInput, cb: (err: any, data?: UpdateDatasetEntriesCommandOutput) => void): void;
            updateDatasetEntries(args: UpdateDatasetEntriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDatasetEntriesCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { CreateDatasetRequest, CreateDatasetResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface CreateDatasetCommandInput extends CreateDatasetRequest {
    }
    export interface CreateDatasetCommandOutput extends CreateDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new dataset  in an Amazon Lookout for Vision project. <code>CreateDataset</code> can create a
        *       training or a test dataset from a valid dataset source (<code>DatasetSource</code>).</p>
        *          <p>If you want a single dataset project, specify <code>train</code> for the value of
        *          <code>DatasetType</code>.</p>
        *         <p>To have a project with separate training and test datasets, call <code>CreateDataset</code> twice.
        *            On the first call, specify <code>train</code> for the value of
        *            <code>DatasetType</code>. On the second call, specify <code>test</code> for the value of
        *            <code>DatasetType</code>. </p>
        *         <p>This operation requires permissions to perform the
        *            <code>lookoutvision:CreateDataset</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, CreateDatasetCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, CreateDatasetCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new CreateDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDatasetCommandInput} for command's `input` shape.
        * @see {@link CreateDatasetCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class CreateDatasetCommand extends $Command<CreateDatasetCommandInput, CreateDatasetCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: CreateDatasetCommandInput;
            constructor(input: CreateDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDatasetCommandInput, CreateDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { CreateModelRequest, CreateModelResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface CreateModelCommandInput extends CreateModelRequest {
    }
    export interface CreateModelCommandOutput extends CreateModelResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new version of a model within an an Amazon Lookout for Vision project.
        *       <code>CreateModel</code> is an asynchronous operation in which Amazon Lookout for Vision trains, tests,
        *        and evaluates a new version of a model. </p>
        *          <p>To get the current status, check the <code>Status</code> field returned
        *       in the response from <a>DescribeModel</a>.</p>
        *          <p>If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset
        *        to create a training and a test dataset.
        *        If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test
        *        the model. </p>
        *          <p>After training completes, the evaluation metrics are stored at the location specified in
        *         <code>OutputConfig</code>.  </p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:CreateModel</code> operation. If you want to tag your model, you also require
        *          permission to the <code>lookoutvision:TagResource</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, CreateModelCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, CreateModelCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new CreateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelCommandInput} for command's `input` shape.
        * @see {@link CreateModelCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class CreateModelCommand extends $Command<CreateModelCommandInput, CreateModelCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: CreateModelCommandInput;
            constructor(input: CreateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelCommandInput, CreateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { CreateProjectRequest, CreateProjectResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface CreateProjectCommandInput extends CreateProjectRequest {
    }
    export interface CreateProjectCommandOutput extends CreateProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling
        *          <a>CreateDataset</a>.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:CreateProject</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, CreateProjectCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, CreateProjectCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new CreateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProjectCommandInput} for command's `input` shape.
        * @see {@link CreateProjectCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class CreateProjectCommand extends $Command<CreateProjectCommandInput, CreateProjectCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: CreateProjectCommandInput;
            constructor(input: CreateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProjectCommandInput, CreateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DeleteDatasetRequest, DeleteDatasetResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface DeleteDatasetCommandInput extends DeleteDatasetRequest {
    }
    export interface DeleteDatasetCommandOutput extends DeleteDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing Amazon Lookout for Vision <code>dataset</code>. </p>
        *          <p>If your the project has a single
        *       dataset, you must create a new dataset before you can create a model.</p>
        *          <p>If you project has a training dataset and a test dataset consider the following. </p>
        *          <ul>
        *             <li>
        *                <p>If you delete the test dataset, your project reverts to a single dataset project. If you then
        *       train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.</p>
        *             </li>
        *             <li>
        *                <p>If you delete the training dataset, you must create a training dataset before you can create a model.</p>
        *             </li>
        *          </ul>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DeleteDataset</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DeleteDatasetCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DeleteDatasetCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DeleteDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDatasetCommandInput} for command's `input` shape.
        * @see {@link DeleteDatasetCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DeleteDatasetCommand extends $Command<DeleteDatasetCommandInput, DeleteDatasetCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DeleteDatasetCommandInput;
            constructor(input: DeleteDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDatasetCommandInput, DeleteDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DeleteModelRequest, DeleteModelResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface DeleteModelCommandInput extends DeleteModelRequest {
    }
    export interface DeleteModelCommandOutput extends DeleteModelResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon Lookout for Vision model. You can't delete a running model. To stop a running model,
        *       use the <a>StopModel</a> operation.</p>
        *          <p>It might take a few seconds to delete a model. To determine if a model has been deleted, call
        *          <a>ListModels</a> and check if the version of the model (<code>ModelVersion</code>) is in the
        *          <code>Models</code> array. </p>
        *          <p></p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DeleteModel</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DeleteModelCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DeleteModelCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DeleteModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelCommandInput} for command's `input` shape.
        * @see {@link DeleteModelCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DeleteModelCommand extends $Command<DeleteModelCommandInput, DeleteModelCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DeleteModelCommandInput;
            constructor(input: DeleteModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelCommandInput, DeleteModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DeleteProjectRequest, DeleteProjectResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface DeleteProjectCommandInput extends DeleteProjectRequest {
    }
    export interface DeleteProjectCommandOutput extends DeleteProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon Lookout for Vision project.</p>
        *          <p>To delete a project, you must first delete each version of the model associated with
        *          the project. To delete a model use the <a>DeleteModel</a> operation.</p>
        *          <p>You also have to delete the dataset(s) associated with the model. For more information, see
        *          <a>DeleteDataset</a>.  The images referenced by the training and test datasets aren't deleted.
        *       </p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DeleteProject</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DeleteProjectCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DeleteProjectCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DeleteProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProjectCommandInput} for command's `input` shape.
        * @see {@link DeleteProjectCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DeleteProjectCommand extends $Command<DeleteProjectCommandInput, DeleteProjectCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DeleteProjectCommandInput;
            constructor(input: DeleteProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProjectCommandInput, DeleteProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DescribeDatasetRequest, DescribeDatasetResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface DescribeDatasetCommandInput extends DescribeDatasetRequest {
    }
    export interface DescribeDatasetCommandOutput extends DescribeDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Describe an Amazon Lookout for Vision dataset.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DescribeDataset</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DescribeDatasetCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DescribeDatasetCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DescribeDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDatasetCommandInput} for command's `input` shape.
        * @see {@link DescribeDatasetCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DescribeDatasetCommand extends $Command<DescribeDatasetCommandInput, DescribeDatasetCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DescribeDatasetCommandInput;
            constructor(input: DescribeDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDatasetCommandInput, DescribeDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DescribeModelRequest, DescribeModelResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface DescribeModelCommandInput extends DescribeModelRequest {
    }
    export interface DescribeModelCommandOutput extends DescribeModelResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a version of an Amazon Lookout for Vision model.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DescribeModel</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DescribeModelCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DescribeModelCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DescribeModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelCommandInput} for command's `input` shape.
        * @see {@link DescribeModelCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DescribeModelCommand extends $Command<DescribeModelCommandInput, DescribeModelCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DescribeModelCommandInput;
            constructor(input: DescribeModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelCommandInput, DescribeModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeModelPackagingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DescribeModelPackagingJobRequest, DescribeModelPackagingJobResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface DescribeModelPackagingJobCommandInput extends DescribeModelPackagingJobRequest {
    }
    export interface DescribeModelPackagingJobCommandOutput extends DescribeModelPackagingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an Amazon Lookout for Vision model packaging job.
        * </p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DescribeModelPackagingJob</code> operation.</p>
        *
        *          <p>For more information, see
        *          <i>Using your Amazon Lookout for Vision model on an edge device</i> in the  Amazon Lookout for Vision Developer Guide. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DescribeModelPackagingJobCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DescribeModelPackagingJobCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DescribeModelPackagingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelPackagingJobCommandInput} for command's `input` shape.
        * @see {@link DescribeModelPackagingJobCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DescribeModelPackagingJobCommand extends $Command<DescribeModelPackagingJobCommandInput, DescribeModelPackagingJobCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DescribeModelPackagingJobCommandInput;
            constructor(input: DescribeModelPackagingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelPackagingJobCommandInput, DescribeModelPackagingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DescribeProjectRequest, DescribeProjectResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface DescribeProjectCommandInput extends DescribeProjectRequest {
    }
    export interface DescribeProjectCommandOutput extends DescribeProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an Amazon Lookout for Vision project.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DescribeProject</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DescribeProjectCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DescribeProjectCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DescribeProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProjectCommandInput} for command's `input` shape.
        * @see {@link DescribeProjectCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DescribeProjectCommand extends $Command<DescribeProjectCommandInput, DescribeProjectCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DescribeProjectCommandInput;
            constructor(input: DescribeProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProjectCommandInput, DescribeProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DetectAnomaliesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { DetectAnomaliesRequest, DetectAnomaliesResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    type DetectAnomaliesCommandInputType = Omit<DetectAnomaliesRequest, "Body"> & {
            /**
                * For *`DetectAnomaliesRequest["Body"]`*, see {@link DetectAnomaliesRequest.Body}.
                */
            Body: DetectAnomaliesRequest["Body"] | string | Uint8Array | Buffer;
    };
    /**
        * This interface extends from `DetectAnomaliesRequest` interface. There are more parameters than `Body` defined in {@link DetectAnomaliesRequest}
        */
    export interface DetectAnomaliesCommandInput extends DetectAnomaliesCommandInputType {
    }
    export interface DetectAnomaliesCommandOutput extends DetectAnomaliesResponse, __MetadataBearer {
    }
    /**
        * <p>Detects anomalies in an image that you supply. </p>
        *          <p>The response from <code>DetectAnomalies</code> includes a boolean prediction
        *          that the image contains one or more anomalies and a confidence value for the prediction.</p>
        *          <note>
        *             <p>Before calling <code>DetectAnomalies</code>, you must first start your model with the <a>StartModel</a> operation.
        *          You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your
        *          model uses. If you are not using a model, use the <a>StopModel</a> operation to stop your model. </p>
        *          </note>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:DetectAnomalies</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, DetectAnomaliesCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, DetectAnomaliesCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new DetectAnomaliesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectAnomaliesCommandInput} for command's `input` shape.
        * @see {@link DetectAnomaliesCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class DetectAnomaliesCommand extends $Command<DetectAnomaliesCommandInput, DetectAnomaliesCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: DetectAnomaliesCommandInput;
            constructor(input: DetectAnomaliesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectAnomaliesCommandInput, DetectAnomaliesCommandOutput>;
    }
    export {};
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListDatasetEntriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { ListDatasetEntriesRequest, ListDatasetEntriesResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface ListDatasetEntriesCommandInput extends ListDatasetEntriesRequest {
    }
    export interface ListDatasetEntriesCommandOutput extends ListDatasetEntriesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly
        *       information for a single image, including the image location and the assigned label.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:ListDatasetEntries</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, ListDatasetEntriesCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, ListDatasetEntriesCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new ListDatasetEntriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDatasetEntriesCommandInput} for command's `input` shape.
        * @see {@link ListDatasetEntriesCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class ListDatasetEntriesCommand extends $Command<ListDatasetEntriesCommandInput, ListDatasetEntriesCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: ListDatasetEntriesCommandInput;
            constructor(input: ListDatasetEntriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDatasetEntriesCommandInput, ListDatasetEntriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListModelPackagingJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { ListModelPackagingJobsRequest, ListModelPackagingJobsResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface ListModelPackagingJobsCommandInput extends ListModelPackagingJobsRequest {
    }
    export interface ListModelPackagingJobsCommandOutput extends ListModelPackagingJobsResponse, __MetadataBearer {
    }
    /**
        * <p>
        * Lists the model packaging jobs created for an Amazon Lookout for Vision project.
        * </p>
        *          <p>This operation requires permissions to perform the
        *     <code>lookoutvision:ListModelPackagingJobs</code> operation.
        * </p>
        *
        *          <p>For more information, see
        *       <i>Using your Amazon Lookout for Vision model on an edge device</i> in the  Amazon Lookout for Vision Developer Guide. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, ListModelPackagingJobsCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, ListModelPackagingJobsCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new ListModelPackagingJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelPackagingJobsCommandInput} for command's `input` shape.
        * @see {@link ListModelPackagingJobsCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class ListModelPackagingJobsCommand extends $Command<ListModelPackagingJobsCommandInput, ListModelPackagingJobsCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: ListModelPackagingJobsCommandInput;
            constructor(input: ListModelPackagingJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelPackagingJobsCommandInput, ListModelPackagingJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListModelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { ListModelsRequest, ListModelsResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface ListModelsCommandInput extends ListModelsRequest {
    }
    export interface ListModelsCommandOutput extends ListModelsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the versions of a model in an Amazon Lookout for Vision project.</p>
        *          <p>The <code>ListModels</code> operation is eventually consistent.
        *          Recent calls to <code>CreateModel</code> might
        *          take a while to appear in the response from <code>ListProjects</code>.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:ListModels</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, ListModelsCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, ListModelsCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new ListModelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelsCommandInput} for command's `input` shape.
        * @see {@link ListModelsCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class ListModelsCommand extends $Command<ListModelsCommandInput, ListModelsCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: ListModelsCommandInput;
            constructor(input: ListModelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelsCommandInput, ListModelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListProjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { ListProjectsRequest, ListProjectsResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface ListProjectsCommandInput extends ListProjectsRequest {
    }
    export interface ListProjectsCommandOutput extends ListProjectsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the Amazon Lookout for Vision projects in your AWS account.</p>
        *          <p>The <code>ListProjects</code> operation is eventually consistent.
        *          Recent calls to <code>CreateProject</code> and <code>DeleteProject</code> might
        *          take a while to appear in the response from <code>ListProjects</code>.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:ListProjects</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, ListProjectsCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, ListProjectsCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new ListProjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProjectsCommandInput} for command's `input` shape.
        * @see {@link ListProjectsCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class ListProjectsCommand extends $Command<ListProjectsCommandInput, ListProjectsCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: ListProjectsCommandInput;
            constructor(input: ListProjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProjectsCommandInput, ListProjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of tags attached to the specified Amazon Lookout for Vision model.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:ListTagsForResource</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, ListTagsForResourceCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, ListTagsForResourceCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StartModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { StartModelRequest, StartModelResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface StartModelCommandInput extends StartModelRequest {
    }
    export interface StartModelCommandOutput extends StartModelResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while
        *          to complete. To check the current state of the model, use <a>DescribeModel</a>.</p>
        *          <p>A model is ready to use when its status is <code>HOSTED</code>.</p>
        *          <p>Once the model is running, you can detect custom labels in new images by calling
        *          <a>DetectAnomalies</a>.</p>
        *          <note>
        *             <p>You are charged for the amount of time that the model is running. To stop a running
        *          model, call <a>StopModel</a>.</p>
        *          </note>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:StartModel</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, StartModelCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, StartModelCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new StartModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartModelCommandInput} for command's `input` shape.
        * @see {@link StartModelCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class StartModelCommand extends $Command<StartModelCommandInput, StartModelCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: StartModelCommandInput;
            constructor(input: StartModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartModelCommandInput, StartModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StartModelPackagingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { StartModelPackagingJobRequest, StartModelPackagingJobResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface StartModelPackagingJobCommandInput extends StartModelPackagingJobRequest {
    }
    export interface StartModelPackagingJobCommandOutput extends StartModelPackagingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for
        *    a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass.
        * </p>
        *
        *          <p>Use the <a>DescribeModelPackagingJob</a> API to determine the current status of the job.
        *
        *   The model packaging job is complete if the value of <code>Status</code> is <code>SUCCEEDED</code>.</p>
        *          <p>To deploy the component
        *       to the target device, use the component name and component version
        *       with the AWS IoT Greengrass <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html">CreateDeployment</a> API.</p>
        *
        *          <p>This operation requires the following permissions:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>lookoutvision:StartModelPackagingJob</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>s3:PutObject</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>s3:GetBucketLocation</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>greengrass:CreateComponentVersion</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>greengrass:DescribeComponent</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>(Optional) <code>greengrass:TagResource</code>. Only required if you want to tag the component.</p>
        *             </li>
        *          </ul>
        *
        *
        *          <p>For more information, see
        *       <i>Using your Amazon Lookout for Vision model on an edge device</i> in the  Amazon Lookout for Vision Developer Guide. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, StartModelPackagingJobCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, StartModelPackagingJobCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new StartModelPackagingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartModelPackagingJobCommandInput} for command's `input` shape.
        * @see {@link StartModelPackagingJobCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class StartModelPackagingJobCommand extends $Command<StartModelPackagingJobCommandInput, StartModelPackagingJobCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: StartModelPackagingJobCommandInput;
            constructor(input: StartModelPackagingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartModelPackagingJobCommandInput, StartModelPackagingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StopModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { StopModelRequest, StopModelResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface StopModelCommandInput extends StopModelRequest {
    }
    export interface StopModelCommandOutput extends StopModelResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the hosting of a running model. The operation might take a while to complete. To
        *          check the current status, call <a>DescribeModel</a>. </p>
        *          <p>After the model hosting stops, the <code>Status</code> of the model is <code>TRAINED</code>.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:StopModel</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, StopModelCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, StopModelCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new StopModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopModelCommandInput} for command's `input` shape.
        * @see {@link StopModelCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class StopModelCommand extends $Command<StopModelCommandInput, StopModelCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: StopModelCommandInput;
            constructor(input: StopModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopModelCommandInput, StopModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more key-value tags to an Amazon Lookout for Vision model.
        *          For more information, see <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:TagResource</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, TagResourceCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, TagResourceCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from an Amazon Lookout for Vision model. For more information, see
        *          <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:UntagResource</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, UntagResourceCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, UntagResourceCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/UpdateDatasetEntriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutVisionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient";
    import { UpdateDatasetEntriesRequest, UpdateDatasetEntriesResponse } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0";
    export interface UpdateDatasetEntriesCommandInput extends UpdateDatasetEntriesRequest {
    }
    export interface UpdateDatasetEntriesCommandOutput extends UpdateDatasetEntriesResponse, __MetadataBearer {
    }
    /**
        * <p>Adds or updates one or more JSON Line entries in a dataset. A JSON Line includes information about an image
        *          used for training or testing an Amazon Lookout for Vision model.</p>
        *          <p>To update an existing JSON Line, use the <code>source-ref</code> field to identify the JSON Line. The JSON line
        *          that you supply replaces the existing JSON line. Any existing annotations that are not in the new JSON line are removed from the dataset.
        *       </p>
        *
        *
        *          <p>For more information, see
        *          <i>Defining JSON lines for anomaly classification</i> in the  Amazon Lookout for Vision Developer Guide. </p>
        *
        *          <note>
        *             <p>The images you reference in the <code>source-ref</code> field of a JSON line, must be
        *       in the same S3 bucket as the existing images in the dataset. </p>
        *          </note>
        *
        *          <p>Updating a dataset might take a while to complete. To check the current status, call <a>DescribeDataset</a> and
        *          check the <code>Status</code> field in the response.</p>
        *          <p>This operation requires permissions to perform the
        *          <code>lookoutvision:UpdateDatasetEntries</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutVisionClient, UpdateDatasetEntriesCommand } from "@aws-sdk/client-lookoutvision"; // ES Modules import
        * // const { LookoutVisionClient, UpdateDatasetEntriesCommand } = require("@aws-sdk/client-lookoutvision"); // CommonJS import
        * const client = new LookoutVisionClient(config);
        * const command = new UpdateDatasetEntriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDatasetEntriesCommandInput} for command's `input` shape.
        * @see {@link UpdateDatasetEntriesCommandOutput} for command's `response` shape.
        * @see {@link LookoutVisionClientResolvedConfig | config} for LookoutVisionClient's `config` shape.
        *
        */
    export class UpdateDatasetEntriesCommand extends $Command<UpdateDatasetEntriesCommandInput, UpdateDatasetEntriesCommandOutput, LookoutVisionClientResolvedConfig> {
            readonly input: UpdateDatasetEntriesCommandInput;
            constructor(input: UpdateDatasetEntriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutVisionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDatasetEntriesCommandInput, UpdateDatasetEntriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/LookoutVisionClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateDatasetCommandInput, CreateDatasetCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateDatasetCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateModelCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/CreateProjectCommand";
    import { DeleteDatasetCommandInput, DeleteDatasetCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteDatasetCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteModelCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DeleteProjectCommand";
    import { DescribeDatasetCommandInput, DescribeDatasetCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeDatasetCommand";
    import { DescribeModelCommandInput, DescribeModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeModelCommand";
    import { DescribeModelPackagingJobCommandInput, DescribeModelPackagingJobCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeModelPackagingJobCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DescribeProjectCommand";
    import { DetectAnomaliesCommandInput, DetectAnomaliesCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/DetectAnomaliesCommand";
    import { ListDatasetEntriesCommandInput, ListDatasetEntriesCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListDatasetEntriesCommand";
    import { ListModelPackagingJobsCommandInput, ListModelPackagingJobsCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListModelPackagingJobsCommand";
    import { ListModelsCommandInput, ListModelsCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListModelsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListProjectsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/ListTagsForResourceCommand";
    import { StartModelCommandInput, StartModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StartModelCommand";
    import { StartModelPackagingJobCommandInput, StartModelPackagingJobCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StartModelPackagingJobCommand";
    import { StopModelCommandInput, StopModelCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/StopModelCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/UntagResourceCommand";
    import { UpdateDatasetEntriesCommandInput, UpdateDatasetEntriesCommandOutput } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/commands/UpdateDatasetEntriesCommand";
    export type ServiceInputTypes = CreateDatasetCommandInput | CreateModelCommandInput | CreateProjectCommandInput | DeleteDatasetCommandInput | DeleteModelCommandInput | DeleteProjectCommandInput | DescribeDatasetCommandInput | DescribeModelCommandInput | DescribeModelPackagingJobCommandInput | DescribeProjectCommandInput | DetectAnomaliesCommandInput | ListDatasetEntriesCommandInput | ListModelPackagingJobsCommandInput | ListModelsCommandInput | ListProjectsCommandInput | ListTagsForResourceCommandInput | StartModelCommandInput | StartModelPackagingJobCommandInput | StopModelCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateDatasetEntriesCommandInput;
    export type ServiceOutputTypes = CreateDatasetCommandOutput | CreateModelCommandOutput | CreateProjectCommandOutput | DeleteDatasetCommandOutput | DeleteModelCommandOutput | DeleteProjectCommandOutput | DescribeDatasetCommandOutput | DescribeModelCommandOutput | DescribeModelPackagingJobCommandOutput | DescribeProjectCommandOutput | DetectAnomaliesCommandOutput | ListDatasetEntriesCommandOutput | ListModelPackagingJobsCommandOutput | ListModelsCommandOutput | ListProjectsCommandOutput | ListTagsForResourceCommandOutput | StartModelCommandOutput | StartModelPackagingJobCommandOutput | StopModelCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateDatasetEntriesCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type LookoutVisionClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of LookoutVisionClient class constructor that set the region, credentials and other options.
        */
    export interface LookoutVisionClientConfig extends LookoutVisionClientConfigType {
    }
    type LookoutVisionClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of LookoutVisionClient class. This is resolved and normalized from the {@link LookoutVisionClientConfig | constructor configuration interface}.
        */
    export interface LookoutVisionClientResolvedConfig extends LookoutVisionClientResolvedConfigType {
    }
    /**
        * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions,
        *       data types, common parameters, and common errors.</p>
        *          <p>Amazon Lookout for Vision enables you to find visual defects in industrial products,
        *          accurately and at scale. It uses computer vision to identify missing components in an industrial product,
        *          damage to vehicles or structures, irregularities in production lines, and even minuscule defects in
        *          silicon wafers â€” or any other physical item where quality is important such as a missing capacitor
        *          on printed circuit boards.</p>
        */
    export class LookoutVisionClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, LookoutVisionClientResolvedConfig> {
            /**
                * The resolved configuration of LookoutVisionClient class. This is resolved and normalized from the {@link LookoutVisionClientConfig | constructor configuration interface}.
                */
            readonly config: LookoutVisionClientResolvedConfig;
            constructor(configuration: LookoutVisionClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Readable } from "stream";
    import { LookoutVisionServiceException as __BaseException } from "@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/LookoutVisionServiceException";
    /**
        * <p>You are not authorized to perform the action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum ResourceType {
            DATASET = "DATASET",
            MODEL = "MODEL",
            MODEL_PACKAGE_JOB = "MODEL_PACKAGE_JOB",
            PROJECT = "PROJECT",
            TRIAL = "TRIAL"
    }
    /**
        * <p>The update or deletion of a resource caused an inconsistent state.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType: ResourceType | string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>Amazon S3 Location information for an input manifest file. </p>
        */
    export interface InputS3Object {
            /**
                * <p>The Amazon S3 bucket that contains the manifest.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The name and location of the manifest file withiin the bucket.</p>
                */
            Key: string | undefined;
            /**
                * <p>The version ID of the bucket.</p>
                */
            VersionId?: string;
    }
    export namespace InputS3Object {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputS3Object) => any;
    }
    /**
        * <p>Location information about a manifest file. You can use a manifest file to
        *       create a dataset.</p>
        */
    export interface DatasetGroundTruthManifest {
            /**
                * <p>The S3 bucket location for the manifest file.</p>
                */
            S3Object?: InputS3Object;
    }
    export namespace DatasetGroundTruthManifest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetGroundTruthManifest) => any;
    }
    /**
        * <p>Information about the location of a manifest file that Amazon Lookout for Vision uses to to create a dataset.</p>
        */
    export interface DatasetSource {
            /**
                * <p>Location information for the manifest file.</p>
                */
            GroundTruthManifest?: DatasetGroundTruthManifest;
    }
    export namespace DatasetSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetSource) => any;
    }
    export interface CreateDatasetRequest {
            /**
                * <p>The name of the project in which you want to create a dataset.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The type of the dataset. Specify <code>train</code> for a training dataset.
                *       Specify <code>test</code> for a test dataset.</p>
                */
            DatasetType: string | undefined;
            /**
                * <p>The location of the manifest file that Amazon Lookout for Vision uses to create the dataset.</p>
                *          <p>If you don't specify <code>DatasetSource</code>, an empty dataset is created and the operation
                *       synchronously returns. Later, you can add JSON Lines by calling <a>UpdateDatasetEntries</a>.
                *      </p>
                *          <p>If you specify a value for <code>DataSource</code>, the manifest at the S3 location
                *      is validated and used to create the dataset. The call to <code>CreateDataset</code> is asynchronous
                *      and might take a while to complete. To find out the current status, Check the value of <code>Status</code>
                *      returned in a call to <a>DescribeDataset</a>.</p>
                */
            DatasetSource?: DatasetSource;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>CreateDataset</code>
                *       completes only once.  You choose the value to pass. For example, An issue might prevent you
                *       from getting a response from <code>CreateDataset</code>.
                *       In this case, safely retry your call
                *        to <code>CreateDataset</code> by using the same <code>ClientToken</code> parameter value.</p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *          This prevents retries after a network error from making multiple dataset creation requests. You'll need to
                *          provide your own value for other use cases. </p>
                *          <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *        value for <code>ClientToken</code> is considered a new call to <code>CreateDataset</code>. An idempotency
                *        token is active for 8 hours.
                *     </p>
                */
            ClientToken?: string;
    }
    export namespace CreateDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetRequest) => any;
    }
    export enum DatasetStatus {
            CREATE_COMPLETE = "CREATE_COMPLETE",
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETE_COMPLETE = "DELETE_COMPLETE",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            UPDATE_COMPLETE = "UPDATE_COMPLETE",
            UPDATE_FAILED_ROLLBACK_COMPLETE = "UPDATE_FAILED_ROLLBACK_COMPLETE",
            UPDATE_FAILED_ROLLBACK_IN_PROGRESS = "UPDATE_FAILED_ROLLBACK_IN_PROGRESS",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS"
    }
    /**
        * <p>Summary information for an Amazon Lookout for Vision dataset. For more information,
        *       see <a>DescribeDataset</a> and <a>ProjectDescription</a>.</p>
        */
    export interface DatasetMetadata {
            /**
                * <p>The type of the dataset.</p>
                */
            DatasetType?: string;
            /**
                * <p>The Unix timestamp for the date and time that the dataset was created. </p>
                */
            CreationTimestamp?: Date;
            /**
                * <p>The status for the dataset.</p>
                */
            Status?: DatasetStatus | string;
            /**
                * <p>The status message for the dataset.</p>
                */
            StatusMessage?: string;
    }
    export namespace DatasetMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetMetadata) => any;
    }
    export interface CreateDatasetResponse {
            /**
                * <p>Information about the dataset.</p>
                */
            DatasetMetadata?: DatasetMetadata;
    }
    export namespace CreateDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetResponse) => any;
    }
    /**
        * <p>Amazon Lookout for Vision experienced a service issue. Try your call again.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message: string | undefined;
            /**
                * <p>The period of time, in seconds, before the operation can be retried.</p>
                */
            RetryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType: ResourceType | string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>A service quota was exceeded the allowed limit. For more information, see
        *         Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide. </p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType?: ResourceType | string;
            /**
                * <p>The quota code. </p>
                */
            QuotaCode: string | undefined;
            /**
                * <p>The service code. </p>
                */
            ServiceCode: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The quota code. </p>
                */
            QuotaCode?: string;
            /**
                * <p>The service code. </p>
                */
            ServiceCode?: string;
            /**
                * <p>The period of time, in seconds, before the operation can be retried. </p>
                */
            RetryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>An input validation error occured. For example, invalid characters in a project name,
        *       or if a pagination token is invalid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>Information about the location of training output or the output of a model packaging job.</p>
        */
    export interface S3Location {
            /**
                * <p>The S3 bucket that contains the training or model packaging job output. If you are training a model,
                *          the bucket must in your AWS account. If you use an S3 bucket for a model packaging job,
                *       the S3 bucket must be in the same AWS Region and AWS account in which you use AWS IoT Greengrass.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The path of the folder, within the S3 bucket, that contains the output.</p>
                */
            Prefix?: string;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    /**
        * <p>The S3 location where Amazon Lookout for Vision saves model training files.</p>
        */
    export interface OutputConfig {
            /**
                * <p>The S3 location for the output.</p>
                */
            S3Location: S3Location | undefined;
    }
    export namespace OutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputConfig) => any;
    }
    /**
        * <p>A key and value pair that is attached to the specified Amazon Lookout for Vision model.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag that is attached to the specified model.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value of the tag that is attached to the specified model.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateModelRequest {
            /**
                * <p>The name of the project in which you want to create a model version.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>A description for the version of the model.</p>
                */
            Description?: string;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>CreateModel</code>
                *       completes only once.  You choose the value to pass. For example, An issue
                *       might prevent you from getting a response from <code>CreateModel</code>.
                *       In this case, safely retry your call
                *        to <code>CreateModel</code> by using the same <code>ClientToken</code> parameter value. </p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *             This prevents retries after a network error from starting multiple training jobs. You'll need to
                *             provide your own value for other use cases. </p>
                *         <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *        value for <code>ClientToken</code> is considered a new call to <code>CreateModel</code>. An idempotency
                *        token is active for 8 hours.</p>
                */
            ClientToken?: string;
            /**
                * <p>The location where Amazon Lookout for Vision saves the training results.</p>
                */
            OutputConfig: OutputConfig | undefined;
            /**
                * <p>The identifier for your AWS KMS key.
                *          The key is used to encrypt training and test images copied into the service for model training. Your
                *          source images are unaffected.
                *          If this parameter is not specified, the copied images are encrypted by a key that AWS owns and manages.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A set of tags (key-value pairs) that you want to attach to the model.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelRequest) => any;
    }
    /**
        * <p>Information about the evaluation performance of a trained model. </p>
        */
    export interface ModelPerformance {
            /**
                * <p>The overall F1 score metric for the trained model.</p>
                */
            F1Score?: number;
            /**
                * <p>The overall recall metric value for the trained model. </p>
                */
            Recall?: number;
            /**
                * <p>The overall precision metric value for the trained model.</p>
                */
            Precision?: number;
    }
    export namespace ModelPerformance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPerformance) => any;
    }
    export enum ModelStatus {
            DELETING = "DELETING",
            HOSTED = "HOSTED",
            HOSTING_FAILED = "HOSTING_FAILED",
            STARTING_HOSTING = "STARTING_HOSTING",
            STOPPING_HOSTING = "STOPPING_HOSTING",
            SYSTEM_UPDATING = "SYSTEM_UPDATING",
            TRAINED = "TRAINED",
            TRAINING = "TRAINING",
            TRAINING_FAILED = "TRAINING_FAILED"
    }
    /**
        * <p>Describes an Amazon Lookout for Vision model.</p>
        */
    export interface ModelMetadata {
            /**
                * <p>The unix timestamp for the date and time that the model was created. </p>
                */
            CreationTimestamp?: Date;
            /**
                * <p>The version of the model.</p>
                */
            ModelVersion?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the model.</p>
                */
            ModelArn?: string;
            /**
                * <p>The description for the model.</p>
                */
            Description?: string;
            /**
                * <p>The status of the model.</p>
                */
            Status?: ModelStatus | string;
            /**
                * <p>The status message for the model.</p>
                */
            StatusMessage?: string;
            /**
                * <p>Performance metrics for the model. Not available until training has successfully completed.</p>
                */
            Performance?: ModelPerformance;
    }
    export namespace ModelMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelMetadata) => any;
    }
    export interface CreateModelResponse {
            /**
                * <p>The response from a call to <code>CreateModel</code>.</p>
                */
            ModelMetadata?: ModelMetadata;
    }
    export namespace CreateModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelResponse) => any;
    }
    export interface CreateProjectRequest {
            /**
                * <p>The name for the project.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>CreateProject</code>
                *       completes only once.  You choose the value to pass. For example, An issue might prevent you from
                *       getting a response from <code>CreateProject</code>.
                *       In this case, safely retry your call
                *        to <code>CreateProject</code> by using the same <code>ClientToken</code> parameter value. </p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *           This prevents retries after a network error from making multiple project creation requests. You'll need to
                *            provide your own value for other use cases. </p>
                *          <p>An error occurs
                *        if the other input parameters are not the same as in the first request. Using a different
                *        value for <code>ClientToken</code> is considered a new call to <code>CreateProject</code>. An idempotency
                *        token is active for 8 hours.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectRequest) => any;
    }
    /**
        * <p>Metadata about an Amazon Lookout for Vision project.</p>
        */
    export interface ProjectMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ProjectArn?: string;
            /**
                * <p>The name of the project.</p>
                */
            ProjectName?: string;
            /**
                * <p>The unix timestamp for the date and time that the project was created. </p>
                */
            CreationTimestamp?: Date;
    }
    export namespace ProjectMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectMetadata) => any;
    }
    export interface CreateProjectResponse {
            /**
                * <p>Information about the project.</p>
                */
            ProjectMetadata?: ProjectMetadata;
    }
    export namespace CreateProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectResponse) => any;
    }
    /**
        * <p>Statistics about the images in a dataset.</p>
        */
    export interface DatasetImageStats {
            /**
                * <p>The total number of images in the dataset.</p>
                */
            Total?: number;
            /**
                * <p>The total number of labeled images.</p>
                */
            Labeled?: number;
            /**
                * <p>The total number of images labeled as normal.</p>
                */
            Normal?: number;
            /**
                * <p>the total number of images labeled as an anomaly.</p>
                */
            Anomaly?: number;
    }
    export namespace DatasetImageStats {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetImageStats) => any;
    }
    /**
        * <p>The description for a dataset. For more information, see <a>DescribeDataset</a>.</p>
        */
    export interface DatasetDescription {
            /**
                * <p>The name of the project that contains the dataset.</p>
                */
            ProjectName?: string;
            /**
                * <p>The type of the dataset. The value <code>train</code> represents a training dataset or single dataset project.
                *       The value <code>test</code> represents a test dataset.</p>
                */
            DatasetType?: string;
            /**
                * <p>The Unix timestamp for the time and date that the dataset was created.</p>
                */
            CreationTimestamp?: Date;
            /**
                * <p>The Unix timestamp for the date and time that the dataset was last updated.</p>
                */
            LastUpdatedTimestamp?: Date;
            /**
                * <p>The status of the dataset.</p>
                */
            Status?: DatasetStatus | string;
            /**
                * <p>The status message for the dataset. </p>
                */
            StatusMessage?: string;
            /**
                * <p>Statistics about the images in a dataset.</p>
                */
            ImageStats?: DatasetImageStats;
    }
    export namespace DatasetDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetDescription) => any;
    }
    export interface DeleteDatasetRequest {
            /**
                * <p>The name of the project that contains the dataset that you want to delete.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The type of the dataset to delete. Specify <code>train</code> to delete the training dataset.
                *       Specify <code>test</code> to delete the test dataset. To delete the dataset in a single dataset project,
                *          specify <code>train</code>.</p>
                */
            DatasetType: string | undefined;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>DeleteDataset</code>
                *       completes only once.  You choose the value to pass. For example, An issue might prevent you from getting a response from <code>DeleteDataset</code>.
                *       In this case, safely retry your call
                *        to <code>DeleteDataset</code> by using the same <code>ClientToken</code> parameter value. </p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *                  This prevents retries after a network error from making multiple deletetion requests. You'll need to
                *                  provide your own value for other use cases. </p>
                *          <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *        value for <code>ClientToken</code> is considered a new call to <code>DeleteDataset</code>. An idempotency
                *        token is active for 8 hours.</p>
                */
            ClientToken?: string;
    }
    export namespace DeleteDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatasetRequest) => any;
    }
    export interface DeleteDatasetResponse {
    }
    export namespace DeleteDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatasetResponse) => any;
    }
    export interface DeleteModelRequest {
            /**
                * <p>The name of the project that contains the model that you want to delete.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The version of the model that you want to delete.</p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>DeleteModel</code>
                *       completes only once.  You choose the value to pass. For example, an issue might prevent
                *       you from getting a response from <code>DeleteModel</code>.
                *       In this case, safely retry your call
                *        to <code>DeleteModel</code> by using the same <code>ClientToken</code> parameter value.</p>
                *          <p>If you don't supply a value for ClientToken, the AWS SDK you are using inserts a value for you.
                *          This prevents retries after a network error from making multiple model deletion requests. You'll need to
                *          provide your own value for other use cases. </p>
                *
                *          <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *        value for <code>ClientToken</code> is considered a new call to <code>DeleteModel</code>. An idempotency
                *        token is active for 8 hours.</p>
                */
            ClientToken?: string;
    }
    export namespace DeleteModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelRequest) => any;
    }
    export interface DeleteModelResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the model that was deleted.</p>
                */
            ModelArn?: string;
    }
    export namespace DeleteModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelResponse) => any;
    }
    export interface DeleteProjectRequest {
            /**
                * <p>The name of the project to delete.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>DeleteProject</code>
                *          completes only once.  You choose the value to pass. For example, An issue
                *          might prevent you from getting a response from <code>DeleteProject</code>.
                *          In this case, safely retry your call
                *          to <code>DeleteProject</code> by using the same <code>ClientToken</code> parameter value. </p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *          This prevents retries after a network error from making multiple project deletion requests. You'll need to
                *          provide your own value for other use cases. </p>
                *          <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *          value for <code>ClientToken</code> is considered a new call to <code>DeleteProject</code>. An idempotency
                *          token is active for 8 hours.</p>
                */
            ClientToken?: string;
    }
    export namespace DeleteProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectRequest) => any;
    }
    export interface DeleteProjectResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the project that was deleted.</p>
                */
            ProjectArn?: string;
    }
    export namespace DeleteProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectResponse) => any;
    }
    export interface DescribeDatasetRequest {
            /**
                * <p>The name of the project that contains the dataset that you want to describe.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The type of the dataset to describe. Specify <code>train</code> to describe the
                *       training dataset. Specify <code>test</code> to describe the test dataset.
                *       If you have a single dataset project, specify <code>train</code>
                *          </p>
                */
            DatasetType: string | undefined;
    }
    export namespace DescribeDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatasetRequest) => any;
    }
    export interface DescribeDatasetResponse {
            /**
                * <p>The description of the requested dataset. </p>
                */
            DatasetDescription?: DatasetDescription;
    }
    export namespace DescribeDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatasetResponse) => any;
    }
    export interface DescribeModelRequest {
            /**
                * <p>The project that contains the version of a model that you want to describe.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The version of the model that you want to describe.</p>
                */
            ModelVersion: string | undefined;
    }
    export namespace DescribeModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelRequest) => any;
    }
    /**
        * <p>The S3 location where Amazon Lookout for Vision saves training output.</p>
        */
    export interface OutputS3Object {
            /**
                * <p>The bucket that contains the training output.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The location of the training output in the bucket.</p>
                */
            Key: string | undefined;
    }
    export namespace OutputS3Object {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputS3Object) => any;
    }
    /**
        * <p>Describes an Amazon Lookout for Vision model.</p>
        */
    export interface ModelDescription {
            /**
                * <p>The version of the model</p>
                */
            ModelVersion?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the model.</p>
                */
            ModelArn?: string;
            /**
                * <p>The unix timestamp for the date and time that the model was created. </p>
                */
            CreationTimestamp?: Date;
            /**
                * <p>The description for the model.</p>
                */
            Description?: string;
            /**
                * <p>The status of the model.</p>
                */
            Status?: ModelStatus | string;
            /**
                * <p>The status message for the model.</p>
                */
            StatusMessage?: string;
            /**
                * <p>Performance metrics for the model. Created during training.</p>
                */
            Performance?: ModelPerformance;
            /**
                * <p>The S3 location where Amazon Lookout for Vision saves model training files.</p>
                */
            OutputConfig?: OutputConfig;
            /**
                * <p>The S3 location where Amazon Lookout for Vision saves the manifest file
                *          that was used to test the trained model and generate the performance scores.</p>
                */
            EvaluationManifest?: OutputS3Object;
            /**
                * <p>The S3 location where Amazon Lookout for Vision saves the performance metrics.</p>
                */
            EvaluationResult?: OutputS3Object;
            /**
                * <p>The unix timestamp for the date and time that the evaluation ended. </p>
                */
            EvaluationEndTimestamp?: Date;
            /**
                * <p>The identifer for the AWS Key Management Service (AWS KMS) key that was used to encrypt the model
                *          during training.</p>
                */
            KmsKeyId?: string;
    }
    export namespace ModelDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelDescription) => any;
    }
    export interface DescribeModelResponse {
            /**
                * <p>Contains the description of the model.</p>
                */
            ModelDescription?: ModelDescription;
    }
    export namespace DescribeModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelResponse) => any;
    }
    export interface DescribeModelPackagingJobRequest {
            /**
                * <p>The name of the project that contains the model packaging job that you want to describe.
                * </p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The job name for the model packaging job.
                *
                * </p>
                */
            JobName: string | undefined;
    }
    export namespace DescribeModelPackagingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelPackagingJobRequest) => any;
    }
    export enum TargetDevice {
            JETSON_XAVIER = "jetson_xavier"
    }
    export enum TargetPlatformAccelerator {
            NVIDIA = "NVIDIA"
    }
    export enum TargetPlatformArch {
            ARM64 = "ARM64",
            X86_64 = "X86_64"
    }
    export enum TargetPlatformOs {
            LINUX = "LINUX"
    }
    /**
        * <p>The platform on which a model runs on an AWS IoT Greengrass core device.</p>
        */
    export interface TargetPlatform {
            /**
                * <p>The target operating system for the model. Linux is the only operating system
                *          that is currently supported.
                *       </p>
                */
            Os: TargetPlatformOs | string | undefined;
            /**
                * <p>The target architecture for the model. The currently supported architectures are
                *          X86_64 (64-bit version of the x86 instruction set) and ARM_64 (ARMv8 64-bit CPU).
                *       </p>
                */
            Arch: TargetPlatformArch | string | undefined;
            /**
                * <p>The target accelerator for the model. NVIDIA (Nvidia graphics processing unit)
                *          is the only accelerator that is currently supported. You must also specify the <code>gpu-code</code>, <code>trt-ver</code>,
                *          and <code>cuda-ver</code> compiler options.
                *
                *       </p>
                */
            Accelerator: TargetPlatformAccelerator | string | undefined;
    }
    export namespace TargetPlatform {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetPlatform) => any;
    }
    /**
        * <p>Configuration information for the AWS IoT Greengrass component created in a model packaging job.
        *    For more information, see <a>StartModelPackagingJob</a>.
        * </p>
        *          <note>
        *             <p>You can't specify a component with the same <code>ComponentName</code> and <code>Componentversion</code> as
        *       an existing component with the same component name and component version.</p>
        *          </note>
        */
    export interface GreengrassConfiguration {
            /**
                * <p>Additional compiler options for the Greengrass component. Currently,
                *    only NVIDIA Graphics Processing Units (GPU) are supported. If you specify <code>TargetPlatform</code>, you must specify
                * <code>CompilerOptions</code>. If you specify <code>TargetDevice</code>, don't specify <code>CompilerOptions</code>.</p>
                *
                *
                *          <p>For more information, see
                *       <i>Compiler options</i> in the  Amazon Lookout for Vision Developer Guide. </p>
                */
            CompilerOptions?: string;
            /**
                * <p>The target device for the model. Currently the only supported value is <code>jetson_xavier</code>.
                *       If you specify <code>TargetDevice</code>, you can't specify
                *       <code>TargetPlatform</code>.
                *
                * </p>
                */
            TargetDevice?: TargetDevice | string;
            /**
                * <p>The target platform for the model. If you specify <code>TargetPlatform</code>, you can't specify
                *          <code>TargetDevice</code>.
                *       </p>
                */
            TargetPlatform?: TargetPlatform;
            /**
                * <p>
                *          An S3 location in which Lookout for Vision stores the component artifacts.
                *       </p>
                */
            S3OutputLocation: S3Location | undefined;
            /**
                * <p>
                *    A name for the AWS IoT Greengrass component.
                * </p>
                */
            ComponentName: string | undefined;
            /**
                * <p>A Version for the AWS IoT Greengrass component. If you don't provide a
                *       value, a default value of <code>
                *                <i>Model Version</i>.0.0</code> is used.
                * </p>
                */
            ComponentVersion?: string;
            /**
                * <p>
                *    A description for the AWS IoT Greengrass component.
                * </p>
                */
            ComponentDescription?: string;
            /**
                * <p>
                *    A set of tags (key-value pairs) that you want to attach to the AWS IoT Greengrass component.
                * </p>
                */
            Tags?: Tag[];
    }
    export namespace GreengrassConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GreengrassConfiguration) => any;
    }
    /**
        * <p>
        * Configuration information for a Amazon Lookout for Vision model packaging job. For more information,
        * see <a>StartModelPackagingJob</a>.
        * </p>
        */
    export interface ModelPackagingConfiguration {
            /**
                * <p>
                * Configuration information for the AWS IoT Greengrass component in a model packaging job.
                * </p>
                */
            Greengrass: GreengrassConfiguration | undefined;
    }
    export namespace ModelPackagingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackagingConfiguration) => any;
    }
    /**
        * <p>Information about the AWS IoT Greengrass component created by a model packaging job.
        *
        * </p>
        */
    export interface GreengrassOutputDetails {
            /**
                * <p>
                * The Amazon Resource Name (ARN) of the component.
                * </p>
                */
            ComponentVersionArn?: string;
            /**
                * <p>
                * The name of the component.
                * </p>
                */
            ComponentName?: string;
            /**
                * <p>
                * The version of the component.
                * </p>
                */
            ComponentVersion?: string;
    }
    export namespace GreengrassOutputDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GreengrassOutputDetails) => any;
    }
    /**
        * <p>
        * Information about the output from a model packaging job.
        * </p>
        */
    export interface ModelPackagingOutputDetails {
            /**
                * <p>
                * Information about the AWS IoT Greengrass component in a model packaging job.
                * </p>
                */
            Greengrass?: GreengrassOutputDetails;
    }
    export namespace ModelPackagingOutputDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackagingOutputDetails) => any;
    }
    export enum ModelPackagingJobStatus {
            CREATED = "CREATED",
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>
        * Information about a model packaging job. For more information, see
        * <a>DescribeModelPackagingJob</a>.
        * </p>
        */
    export interface ModelPackagingDescription {
            /**
                * <p>
                * The name of the model packaging job.
                * </p>
                */
            JobName?: string;
            /**
                * <p>The name of the project that's associated with a model that's in the model package.
                *
                * </p>
                */
            ProjectName?: string;
            /**
                * <p>The version of the model used in the model packaging job.
                *
                * </p>
                */
            ModelVersion?: string;
            /**
                * <p>
                * The configuration information used in the model packaging job.
                * </p>
                */
            ModelPackagingConfiguration?: ModelPackagingConfiguration;
            /**
                * <p>The description for the model packaging job.
                *
                * </p>
                */
            ModelPackagingJobDescription?: string;
            /**
                * <p>The AWS service used to package the job. Currently Lookout for Vision can package
                * jobs with AWS IoT Greengrass.
                * </p>
                */
            ModelPackagingMethod?: string;
            /**
                * <p>Information about the output of the model packaging job. For more information,
                *    see <a>DescribeModelPackagingJob</a>.
                * </p>
                */
            ModelPackagingOutputDetails?: ModelPackagingOutputDetails;
            /**
                * <p>
                * The status of the model packaging job.
                * </p>
                */
            Status?: ModelPackagingJobStatus | string;
            /**
                * <p>
                * The status message for the model packaging job.
                * </p>
                */
            StatusMessage?: string;
            /**
                * <p>
                *    The Unix timestamp for the time and date that the model packaging job was created.
                * </p>
                */
            CreationTimestamp?: Date;
            /**
                * <p>
                *    The Unix timestamp for the time and date that the model packaging job was last updated.
                * </p>
                */
            LastUpdatedTimestamp?: Date;
    }
    export namespace ModelPackagingDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackagingDescription) => any;
    }
    export interface DescribeModelPackagingJobResponse {
            /**
                * <p>The description of the model packaging job.
                * </p>
                */
            ModelPackagingDescription?: ModelPackagingDescription;
    }
    export namespace DescribeModelPackagingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelPackagingJobResponse) => any;
    }
    export interface DescribeProjectRequest {
            /**
                * <p>The name of the project that you want to describe.</p>
                */
            ProjectName: string | undefined;
    }
    export namespace DescribeProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectRequest) => any;
    }
    /**
        * <p>Describe an Amazon Lookout for Vision project. For more information, see <a>DescribeProject</a>.</p>
        */
    export interface ProjectDescription {
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ProjectArn?: string;
            /**
                * <p>The name of the project.</p>
                */
            ProjectName?: string;
            /**
                * <p>The unix timestamp for the date and time that the project was created. </p>
                */
            CreationTimestamp?: Date;
            /**
                * <p>A list of datasets in the project.</p>
                */
            Datasets?: DatasetMetadata[];
    }
    export namespace ProjectDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectDescription) => any;
    }
    export interface DescribeProjectResponse {
            /**
                * <p>The description of the project.</p>
                */
            ProjectDescription?: ProjectDescription;
    }
    export namespace DescribeProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectResponse) => any;
    }
    export interface DetectAnomaliesRequest {
            /**
                * <p>The name of the project that contains the model version that you want to use.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The version of the model that you want to use.</p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>The unencrypted image bytes that you want to analyze. </p>
                */
            Body: Readable | ReadableStream | Blob | undefined;
            /**
                * <p>The type of the image passed in <code>Body</code>.
                *          Valid values are <code>image/png</code> (PNG format images) and <code>image/jpeg</code> (JPG format images). </p>
                */
            ContentType: string | undefined;
    }
    export namespace DetectAnomaliesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectAnomaliesRequest) => any;
    }
    /**
        * <p>The source for an image.</p>
        */
    export interface ImageSource {
            /**
                * <p>The type of the image.</p>
                */
            Type?: string;
    }
    export namespace ImageSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageSource) => any;
    }
    /**
        * <p>The prediction results from a call to <a>DetectAnomalies</a>.</p>
        */
    export interface DetectAnomalyResult {
            /**
                * <p>The source of the image that was analyzed. <code>direct</code> means that the
                *       images was supplied from the local computer. No other values are supported.</p>
                */
            Source?: ImageSource;
            /**
                * <p>True if the image contains an anomaly, otherwise false.</p>
                */
            IsAnomalous?: boolean;
            /**
                * <p>The confidence that Amazon Lookout for Vision has in the accuracy of the prediction.</p>
                */
            Confidence?: number;
    }
    export namespace DetectAnomalyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectAnomalyResult) => any;
    }
    export interface DetectAnomaliesResponse {
            /**
                * <p>The results of the <code>DetectAnomalies</code> operation.</p>
                */
            DetectAnomalyResult?: DetectAnomalyResult;
    }
    export namespace DetectAnomaliesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectAnomaliesResponse) => any;
    }
    export interface ListDatasetEntriesRequest {
            /**
                * <p>The name of the project that contains the dataset that you want to list.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The type of the dataset that you want to list.  Specify <code>train</code> to list
                *          the training dataset. Specify <code>test</code> to list the test dataset. If you have a single dataset
                *       project, specify <code>train</code>.</p>
                */
            DatasetType: string | undefined;
            /**
                * <p>Specify <code>true</code> to include labeled entries, otherwise specify <code>false</code>. If you
                *       don't specify a value, Lookout for Vision returns all entries.</p>
                */
            Labeled?: boolean;
            /**
                * <p>Specify <code>normal</code> to include only normal images. Specify <code>anomaly</code> to only include
                *          anomalous entries. If you don't specify a value, Amazon Lookout for Vision returns normal and anomalous images.</p>
                */
            AnomalyClass?: string;
            /**
                * <p>Only includes entries before the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
                */
            BeforeCreationDate?: Date;
            /**
                * <p>Only includes entries after the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
                */
            AfterCreationDate?: Date;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *          Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to
                *          retrieve the next set of dataset entries.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return per paginated call. The largest value you can specify is 100.
                *          If you specify a value greater than 100, a ValidationException
                *          error occurs. The default value is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Perform a "contains" search on the  values of the <code>source-ref</code> key within the dataset.
                *          For example a value of "IMG_17"  returns all JSON Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.</p>
                */
            SourceRefContains?: string;
    }
    export namespace ListDatasetEntriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetEntriesRequest) => any;
    }
    export interface ListDatasetEntriesResponse {
            /**
                * <p>A list of the entries (JSON Lines) within the dataset.</p>
                */
            DatasetEntries?: string[];
            /**
                * <p>If the response is truncated, Amazon Lookout for Vision returns this token
                *          that you can use in the subsequent request to retrieve the next set ofdataset entries.</p>
                */
            NextToken?: string;
    }
    export namespace ListDatasetEntriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetEntriesResponse) => any;
    }
    export interface ListModelPackagingJobsRequest {
            /**
                * <p>
                * The name of the project for which you want to list the model packaging jobs.
                * </p>
                */
            ProjectName: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more
                *       results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination
                *       token to retrieve the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return per paginated call. The largest value you can specify is 100.
                *       If you specify a value greater than 100, a ValidationException
                *       error occurs. The default value is 100. </p>
                */
            MaxResults?: number;
    }
    export namespace ListModelPackagingJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelPackagingJobsRequest) => any;
    }
    /**
        * <p>
        *    Metadata for a model packaging job. For more information, see <a>ListModelPackagingJobs</a>.
        * </p>
        */
    export interface ModelPackagingJobMetadata {
            /**
                * <p>
                * The name of the model packaging job.
                * </p>
                */
            JobName?: string;
            /**
                * <p>
                * The project that contains the model that is in the model package.
                * </p>
                */
            ProjectName?: string;
            /**
                * <p>
                * The version of the model that is in the model package.
                * </p>
                */
            ModelVersion?: string;
            /**
                * <p>
                * The description for the model packaging job.
                * </p>
                */
            ModelPackagingJobDescription?: string;
            /**
                * <p>
                * The AWS service used to package the job. Currently Lookout for Vision can package
                *       jobs with AWS IoT Greengrass.
                * </p>
                */
            ModelPackagingMethod?: string;
            /**
                * <p>The status of the model packaging job.
                * </p>
                */
            Status?: ModelPackagingJobStatus | string;
            /**
                * <p>The status message for the model packaging job.
                * </p>
                */
            StatusMessage?: string;
            /**
                * <p>The Unix timestamp for the time and date that the model packaging job was created.</p>
                */
            CreationTimestamp?: Date;
            /**
                * <p>The Unix timestamp for the time and date that the model packaging job was last updated.</p>
                */
            LastUpdatedTimestamp?: Date;
    }
    export namespace ModelPackagingJobMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackagingJobMetadata) => any;
    }
    export interface ListModelPackagingJobsResponse {
            /**
                * <p>
                * A list of the model packaging jobs created for the specified Amazon Lookout for Vision project.
                * </p>
                */
            ModelPackagingJobs?: ModelPackagingJobMetadata[];
            /**
                * <p>If the previous response was incomplete (because there is more
                *    results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination
                *    token to retrieve the next set of results.
                * </p>
                */
            NextToken?: string;
    }
    export namespace ListModelPackagingJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelPackagingJobsResponse) => any;
    }
    export interface ListModelsRequest {
            /**
                * <p>The name of the project that contains the model versions that you want to list.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *          Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to
                *          retrieve the next set of models.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return per paginated call. The largest value you can specify is 100.
                *          If you specify a value greater than 100, a ValidationException
                *          error occurs. The default value is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListModelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelsRequest) => any;
    }
    export interface ListModelsResponse {
            /**
                * <p>A list of model versions in the specified project. </p>
                */
            Models?: ModelMetadata[];
            /**
                * <p>If the response is truncated, Amazon Lookout for Vision returns this token
                *          that you can use in the subsequent request to retrieve the next set of models. </p>
                */
            NextToken?: string;
    }
    export namespace ListModelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelsResponse) => any;
    }
    export interface ListProjectsRequest {
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *          Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to
                *          retrieve the next set of projects.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return per paginated call. The largest value you can specify is 100.
                *          If you specify a value greater than 100, a ValidationException
                *          error occurs. The default value is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListProjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsRequest) => any;
    }
    export interface ListProjectsResponse {
            /**
                * <p>A list of projects in your AWS account.</p>
                */
            Projects?: ProjectMetadata[];
            /**
                * <p>If the response is truncated, Amazon Lookout for Vision returns this token
                *          that you can use in the subsequent request to retrieve the next set of projects.</p>
                */
            NextToken?: string;
    }
    export namespace ListProjectsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the model for which you want to list tags. </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A map of tag keys and values attached to the specified model.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface StartModelRequest {
            /**
                * <p>The name of the project that contains the model that you want to start.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The version of the model that you want to start.</p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>The minimum number of inference units to use. A single
                *          inference unit represents 1 hour of processing.
                *          Use a higher number to increase the TPS throughput of your model. You are charged for the number
                *          of inference units that you use.
                *       </p>
                */
            MinInferenceUnits: number | undefined;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>StartModel</code>
                *          completes only once.  You choose the value to pass. For example, An issue might prevent
                *          you from getting a response from <code>StartModel</code>.
                *          In this case, safely retry your call
                *          to <code>StartModel</code> by using the same <code>ClientToken</code> parameter value. </p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *          This prevents retries after a network error from making multiple start requests. You'll need to
                *          provide your own value for other use cases. </p>
                *
                *          <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *          value for <code>ClientToken</code> is considered a new call to <code>StartModel</code>. An idempotency
                *          token is active for 8 hours.
                *       </p>
                */
            ClientToken?: string;
    }
    export namespace StartModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartModelRequest) => any;
    }
    export enum ModelHostingStatus {
            HOSTED = "HOSTED",
            HOSTING_FAILED = "HOSTING_FAILED",
            STARTING_HOSTING = "STARTING_HOSTING",
            STOPPING_HOSTING = "STOPPING_HOSTING",
            SYSTEM_UPDATING = "SYSTEM_UPDATING"
    }
    export interface StartModelResponse {
            /**
                * <p>The current running status of the model.</p>
                */
            Status?: ModelHostingStatus | string;
    }
    export namespace StartModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartModelResponse) => any;
    }
    export interface StartModelPackagingJobRequest {
            /**
                * <p>
                * The name of the project which contains the version of the model that you want to package.
                * </p>
                */
            ProjectName: string | undefined;
            /**
                * <p>
                * The version of the model within the project that you want to package.
                * </p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>A name for the model packaging job. If you don't supply a value, the service creates
                *    a job name for you.
                * </p>
                */
            JobName?: string;
            /**
                * <p>The configuration for the model packaging job.
                * </p>
                */
            Configuration: ModelPackagingConfiguration | undefined;
            /**
                * <p>A description for the model packaging job.
                * </p>
                */
            Description?: string;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>StartModelPackagingJob</code>
                *       completes only once.  You choose the value to pass. For example, An issue might prevent you
                *       from getting a response from <code>StartModelPackagingJob</code>.
                *       In this case, safely retry your call
                *       to <code>StartModelPackagingJob</code> by using the same <code>ClientToken</code> parameter value.</p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *       This prevents retries after a network error from making multiple dataset creation requests. You'll need to
                *       provide your own value for other use cases. </p>
                *          <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *       value for <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>. An idempotency
                *       token is active for 8 hours.
                *    </p>
                */
            ClientToken?: string;
    }
    export namespace StartModelPackagingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartModelPackagingJobRequest) => any;
    }
    export interface StartModelPackagingJobResponse {
            /**
                * <p>The job name for the model packaging job. If you don't supply a job name in the <code>JobName</code> input parameter,
                *    the service creates a job name for you.
                *
                * </p>
                */
            JobName?: string;
    }
    export namespace StartModelPackagingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartModelPackagingJobResponse) => any;
    }
    export interface StopModelRequest {
            /**
                * <p>The name of the project that contains the model that you want to stop.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The version of the model that you want to stop.</p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>StopModel</code>
                *          completes only once.  You choose the value to pass. For example, An issue
                *          might prevent you from getting a response from <code>StopModel</code>.
                *          In this case, safely retry your call
                *          to <code>StopModel</code> by using the same <code>ClientToken</code> parameter value.</p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *          This prevents retries after a network error from making multiple stop requests. You'll need to
                *          provide your own value for other use cases. </p>
                *          <p>An error occurs if the other input parameters are not the same as in the first request. Using a different
                *          value for <code>ClientToken</code> is considered a new call to <code>StopModel</code>. An idempotency
                *          token is active for 8 hours.
                *
                *
                *       </p>
                */
            ClientToken?: string;
    }
    export namespace StopModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopModelRequest) => any;
    }
    export interface StopModelResponse {
            /**
                * <p>The status of the model.</p>
                */
            Status?: ModelHostingStatus | string;
    }
    export namespace StopModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopModelResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the model to assign the tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The key-value tags to assign to the model.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the model from which you want to remove tags. </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A list of the keys of the tags that you want to remove.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateDatasetEntriesRequest {
            /**
                * <p>The name of the project that contains the dataset that you want to update.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The type of the dataset that you want to update. Specify <code>train</code> to update
                *       the training dataset. Specify <code>test</code> to update the test dataset. If you
                *        have a single dataset project, specify <code>train</code>.</p>
                */
            DatasetType: string | undefined;
            /**
                * <p>The entries to add to the dataset.</p>
                */
            Changes: Uint8Array | undefined;
            /**
                * <p>ClientToken is an idempotency token that ensures a call to <code>UpdateDatasetEntries</code>
                *          completes only once.  You choose the value to pass. For example, An issue
                *          might prevent you from getting a response from <code>UpdateDatasetEntries</code>.
                *          In this case, safely retry your call
                *          to <code>UpdateDatasetEntries</code> by using the same <code>ClientToken</code> parameter value.</p>
                *          <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you.
                *          This prevents retries after a network error from making multiple updates with the same dataset entries. You'll need to
                *          provide your own value for other use cases. </p>
                *          <p>An error occurs
                *          if the other input parameters are not the same as in the first request. Using a different
                *          value for <code>ClientToken</code> is considered a new call to <code>UpdateDatasetEntries</code>. An idempotency
                *          token is active for 8 hours.
                *       </p>
                */
            ClientToken?: string;
    }
    export namespace UpdateDatasetEntriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatasetEntriesRequest) => any;
    }
    export interface UpdateDatasetEntriesResponse {
            /**
                * <p>The status of the dataset update.</p>
                */
            Status?: DatasetStatus | string;
    }
    export namespace UpdateDatasetEntriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatasetEntriesResponse) => any;
    }
}

declare module '@aws-sdk/client-lookoutvision/node_modules/@aws-sdk/client-lookoutvision/dist-types/models/LookoutVisionServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from LookoutVision service.
        */
    export class LookoutVisionServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

