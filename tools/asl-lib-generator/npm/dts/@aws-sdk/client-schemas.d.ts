// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-schemas' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateDiscovererCommandInput, CreateDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateDiscovererCommand";
    import { CreateRegistryCommandInput, CreateRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateRegistryCommand";
    import { CreateSchemaCommandInput, CreateSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateSchemaCommand";
    import { DeleteDiscovererCommandInput, DeleteDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteDiscovererCommand";
    import { DeleteRegistryCommandInput, DeleteRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteRegistryCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSchemaCommandInput, DeleteSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteSchemaCommand";
    import { DeleteSchemaVersionCommandInput, DeleteSchemaVersionCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteSchemaVersionCommand";
    import { DescribeCodeBindingCommandInput, DescribeCodeBindingCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeCodeBindingCommand";
    import { DescribeDiscovererCommandInput, DescribeDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeDiscovererCommand";
    import { DescribeRegistryCommandInput, DescribeRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeRegistryCommand";
    import { DescribeSchemaCommandInput, DescribeSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeSchemaCommand";
    import { ExportSchemaCommandInput, ExportSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ExportSchemaCommand";
    import { GetCodeBindingSourceCommandInput, GetCodeBindingSourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetCodeBindingSourceCommand";
    import { GetDiscoveredSchemaCommandInput, GetDiscoveredSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetDiscoveredSchemaCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetResourcePolicyCommand";
    import { ListDiscoverersCommandInput, ListDiscoverersCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListDiscoverersCommand";
    import { ListRegistriesCommandInput, ListRegistriesCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListRegistriesCommand";
    import { ListSchemasCommandInput, ListSchemasCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListSchemasCommand";
    import { ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListSchemaVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListTagsForResourceCommand";
    import { PutCodeBindingCommandInput, PutCodeBindingCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/PutCodeBindingCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/PutResourcePolicyCommand";
    import { SearchSchemasCommandInput, SearchSchemasCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/SearchSchemasCommand";
    import { StartDiscovererCommandInput, StartDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/StartDiscovererCommand";
    import { StopDiscovererCommandInput, StopDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/StopDiscovererCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UntagResourceCommand";
    import { UpdateDiscovererCommandInput, UpdateDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateDiscovererCommand";
    import { UpdateRegistryCommandInput, UpdateRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateRegistryCommand";
    import { UpdateSchemaCommandInput, UpdateSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateSchemaCommand";
    import { SchemasClient } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    /**
        * <p>Amazon EventBridge Schema Registry</p>
        */
    export class Schemas extends SchemasClient {
            /**
                * <p>Creates a discoverer.</p>
                */
            createDiscoverer(args: CreateDiscovererCommandInput, options?: __HttpHandlerOptions): Promise<CreateDiscovererCommandOutput>;
            createDiscoverer(args: CreateDiscovererCommandInput, cb: (err: any, data?: CreateDiscovererCommandOutput) => void): void;
            createDiscoverer(args: CreateDiscovererCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDiscovererCommandOutput) => void): void;
            /**
                * <p>Creates a registry.</p>
                */
            createRegistry(args: CreateRegistryCommandInput, options?: __HttpHandlerOptions): Promise<CreateRegistryCommandOutput>;
            createRegistry(args: CreateRegistryCommandInput, cb: (err: any, data?: CreateRegistryCommandOutput) => void): void;
            createRegistry(args: CreateRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRegistryCommandOutput) => void): void;
            /**
                * <p>Creates a schema definition.</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
                */
            createSchema(args: CreateSchemaCommandInput, options?: __HttpHandlerOptions): Promise<CreateSchemaCommandOutput>;
            createSchema(args: CreateSchemaCommandInput, cb: (err: any, data?: CreateSchemaCommandOutput) => void): void;
            createSchema(args: CreateSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSchemaCommandOutput) => void): void;
            /**
                * <p>Deletes a discoverer.</p>
                */
            deleteDiscoverer(args: DeleteDiscovererCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDiscovererCommandOutput>;
            deleteDiscoverer(args: DeleteDiscovererCommandInput, cb: (err: any, data?: DeleteDiscovererCommandOutput) => void): void;
            deleteDiscoverer(args: DeleteDiscovererCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDiscovererCommandOutput) => void): void;
            /**
                * <p>Deletes a Registry.</p>
                */
            deleteRegistry(args: DeleteRegistryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRegistryCommandOutput>;
            deleteRegistry(args: DeleteRegistryCommandInput, cb: (err: any, data?: DeleteRegistryCommandOutput) => void): void;
            deleteRegistry(args: DeleteRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRegistryCommandOutput) => void): void;
            /**
                * <p>Delete the resource-based policy attached to the specified registry.</p>
                */
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourcePolicyCommandOutput>;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Delete a schema definition.</p>
                */
            deleteSchema(args: DeleteSchemaCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSchemaCommandOutput>;
            deleteSchema(args: DeleteSchemaCommandInput, cb: (err: any, data?: DeleteSchemaCommandOutput) => void): void;
            deleteSchema(args: DeleteSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSchemaCommandOutput) => void): void;
            /**
                * <p>Delete the schema version definition</p>
                */
            deleteSchemaVersion(args: DeleteSchemaVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSchemaVersionCommandOutput>;
            deleteSchemaVersion(args: DeleteSchemaVersionCommandInput, cb: (err: any, data?: DeleteSchemaVersionCommandOutput) => void): void;
            deleteSchemaVersion(args: DeleteSchemaVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSchemaVersionCommandOutput) => void): void;
            /**
                * <p>Describe the code binding URI.</p>
                */
            describeCodeBinding(args: DescribeCodeBindingCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCodeBindingCommandOutput>;
            describeCodeBinding(args: DescribeCodeBindingCommandInput, cb: (err: any, data?: DescribeCodeBindingCommandOutput) => void): void;
            describeCodeBinding(args: DescribeCodeBindingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCodeBindingCommandOutput) => void): void;
            /**
                * <p>Describes the discoverer.</p>
                */
            describeDiscoverer(args: DescribeDiscovererCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDiscovererCommandOutput>;
            describeDiscoverer(args: DescribeDiscovererCommandInput, cb: (err: any, data?: DescribeDiscovererCommandOutput) => void): void;
            describeDiscoverer(args: DescribeDiscovererCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDiscovererCommandOutput) => void): void;
            /**
                * <p>Describes the registry.</p>
                */
            describeRegistry(args: DescribeRegistryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRegistryCommandOutput>;
            describeRegistry(args: DescribeRegistryCommandInput, cb: (err: any, data?: DescribeRegistryCommandOutput) => void): void;
            describeRegistry(args: DescribeRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRegistryCommandOutput) => void): void;
            /**
                * <p>Retrieve the schema definition.</p>
                */
            describeSchema(args: DescribeSchemaCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSchemaCommandOutput>;
            describeSchema(args: DescribeSchemaCommandInput, cb: (err: any, data?: DescribeSchemaCommandOutput) => void): void;
            describeSchema(args: DescribeSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSchemaCommandOutput) => void): void;
            exportSchema(args: ExportSchemaCommandInput, options?: __HttpHandlerOptions): Promise<ExportSchemaCommandOutput>;
            exportSchema(args: ExportSchemaCommandInput, cb: (err: any, data?: ExportSchemaCommandOutput) => void): void;
            exportSchema(args: ExportSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExportSchemaCommandOutput) => void): void;
            /**
                * <p>Get the code binding source URI.</p>
                */
            getCodeBindingSource(args: GetCodeBindingSourceCommandInput, options?: __HttpHandlerOptions): Promise<GetCodeBindingSourceCommandOutput>;
            getCodeBindingSource(args: GetCodeBindingSourceCommandInput, cb: (err: any, data?: GetCodeBindingSourceCommandOutput) => void): void;
            getCodeBindingSource(args: GetCodeBindingSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCodeBindingSourceCommandOutput) => void): void;
            /**
                * <p>Get the discovered schema that was generated based on sampled events.</p>
                */
            getDiscoveredSchema(args: GetDiscoveredSchemaCommandInput, options?: __HttpHandlerOptions): Promise<GetDiscoveredSchemaCommandOutput>;
            getDiscoveredSchema(args: GetDiscoveredSchemaCommandInput, cb: (err: any, data?: GetDiscoveredSchemaCommandOutput) => void): void;
            getDiscoveredSchema(args: GetDiscoveredSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDiscoveredSchemaCommandOutput) => void): void;
            /**
                * <p>Retrieves the resource-based policy attached to a given registry.</p>
                */
            getResourcePolicy(args: GetResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcePolicyCommandOutput>;
            getResourcePolicy(args: GetResourcePolicyCommandInput, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            getResourcePolicy(args: GetResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            /**
                * <p>List the discoverers.</p>
                */
            listDiscoverers(args: ListDiscoverersCommandInput, options?: __HttpHandlerOptions): Promise<ListDiscoverersCommandOutput>;
            listDiscoverers(args: ListDiscoverersCommandInput, cb: (err: any, data?: ListDiscoverersCommandOutput) => void): void;
            listDiscoverers(args: ListDiscoverersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDiscoverersCommandOutput) => void): void;
            /**
                * <p>List the registries.</p>
                */
            listRegistries(args: ListRegistriesCommandInput, options?: __HttpHandlerOptions): Promise<ListRegistriesCommandOutput>;
            listRegistries(args: ListRegistriesCommandInput, cb: (err: any, data?: ListRegistriesCommandOutput) => void): void;
            listRegistries(args: ListRegistriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRegistriesCommandOutput) => void): void;
            /**
                * <p>List the schemas.</p>
                */
            listSchemas(args: ListSchemasCommandInput, options?: __HttpHandlerOptions): Promise<ListSchemasCommandOutput>;
            listSchemas(args: ListSchemasCommandInput, cb: (err: any, data?: ListSchemasCommandOutput) => void): void;
            listSchemas(args: ListSchemasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSchemasCommandOutput) => void): void;
            /**
                * <p>Provides a list of the schema versions and related information.</p>
                */
            listSchemaVersions(args: ListSchemaVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListSchemaVersionsCommandOutput>;
            listSchemaVersions(args: ListSchemaVersionsCommandInput, cb: (err: any, data?: ListSchemaVersionsCommandOutput) => void): void;
            listSchemaVersions(args: ListSchemaVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSchemaVersionsCommandOutput) => void): void;
            /**
                * <p>Get tags for resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Put code binding URI</p>
                */
            putCodeBinding(args: PutCodeBindingCommandInput, options?: __HttpHandlerOptions): Promise<PutCodeBindingCommandOutput>;
            putCodeBinding(args: PutCodeBindingCommandInput, cb: (err: any, data?: PutCodeBindingCommandOutput) => void): void;
            putCodeBinding(args: PutCodeBindingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutCodeBindingCommandOutput) => void): void;
            /**
                * <p>The name of the policy.</p>
                */
            putResourcePolicy(args: PutResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutResourcePolicyCommandOutput>;
            putResourcePolicy(args: PutResourcePolicyCommandInput, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            putResourcePolicy(args: PutResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Search the schemas</p>
                */
            searchSchemas(args: SearchSchemasCommandInput, options?: __HttpHandlerOptions): Promise<SearchSchemasCommandOutput>;
            searchSchemas(args: SearchSchemasCommandInput, cb: (err: any, data?: SearchSchemasCommandOutput) => void): void;
            searchSchemas(args: SearchSchemasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchSchemasCommandOutput) => void): void;
            /**
                * <p>Starts the discoverer</p>
                */
            startDiscoverer(args: StartDiscovererCommandInput, options?: __HttpHandlerOptions): Promise<StartDiscovererCommandOutput>;
            startDiscoverer(args: StartDiscovererCommandInput, cb: (err: any, data?: StartDiscovererCommandOutput) => void): void;
            startDiscoverer(args: StartDiscovererCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDiscovererCommandOutput) => void): void;
            /**
                * <p>Stops the discoverer</p>
                */
            stopDiscoverer(args: StopDiscovererCommandInput, options?: __HttpHandlerOptions): Promise<StopDiscovererCommandOutput>;
            stopDiscoverer(args: StopDiscovererCommandInput, cb: (err: any, data?: StopDiscovererCommandOutput) => void): void;
            stopDiscoverer(args: StopDiscovererCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDiscovererCommandOutput) => void): void;
            /**
                * <p>Add tags to a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the discoverer</p>
                */
            updateDiscoverer(args: UpdateDiscovererCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDiscovererCommandOutput>;
            updateDiscoverer(args: UpdateDiscovererCommandInput, cb: (err: any, data?: UpdateDiscovererCommandOutput) => void): void;
            updateDiscoverer(args: UpdateDiscovererCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDiscovererCommandOutput) => void): void;
            /**
                * <p>Updates a registry.</p>
                */
            updateRegistry(args: UpdateRegistryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRegistryCommandOutput>;
            updateRegistry(args: UpdateRegistryCommandInput, cb: (err: any, data?: UpdateRegistryCommandOutput) => void): void;
            updateRegistry(args: UpdateRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRegistryCommandOutput) => void): void;
            /**
                * <p>Updates the schema definition</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
                */
            updateSchema(args: UpdateSchemaCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSchemaCommandOutput>;
            updateSchema(args: UpdateSchemaCommandInput, cb: (err: any, data?: UpdateSchemaCommandOutput) => void): void;
            updateSchema(args: UpdateSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSchemaCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateDiscovererCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDiscovererRequest, CreateDiscovererResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface CreateDiscovererCommandInput extends CreateDiscovererRequest {
    }
    export interface CreateDiscovererCommandOutput extends CreateDiscovererResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a discoverer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, CreateDiscovererCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, CreateDiscovererCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new CreateDiscovererCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDiscovererCommandInput} for command's `input` shape.
        * @see {@link CreateDiscovererCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class CreateDiscovererCommand extends $Command<CreateDiscovererCommandInput, CreateDiscovererCommandOutput, SchemasClientResolvedConfig> {
            readonly input: CreateDiscovererCommandInput;
            constructor(input: CreateDiscovererCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDiscovererCommandInput, CreateDiscovererCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateRegistryRequest, CreateRegistryResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface CreateRegistryCommandInput extends CreateRegistryRequest {
    }
    export interface CreateRegistryCommandOutput extends CreateRegistryResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a registry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, CreateRegistryCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, CreateRegistryCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new CreateRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRegistryCommandInput} for command's `input` shape.
        * @see {@link CreateRegistryCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class CreateRegistryCommand extends $Command<CreateRegistryCommandInput, CreateRegistryCommandOutput, SchemasClientResolvedConfig> {
            readonly input: CreateRegistryCommandInput;
            constructor(input: CreateRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRegistryCommandInput, CreateRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSchemaRequest, CreateSchemaResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface CreateSchemaCommandInput extends CreateSchemaRequest {
    }
    export interface CreateSchemaCommandOutput extends CreateSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a schema definition.</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, CreateSchemaCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, CreateSchemaCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new CreateSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSchemaCommandInput} for command's `input` shape.
        * @see {@link CreateSchemaCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class CreateSchemaCommand extends $Command<CreateSchemaCommandInput, CreateSchemaCommandOutput, SchemasClientResolvedConfig> {
            readonly input: CreateSchemaCommandInput;
            constructor(input: CreateSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSchemaCommandInput, CreateSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteDiscovererCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDiscovererRequest } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DeleteDiscovererCommandInput extends DeleteDiscovererRequest {
    }
    export interface DeleteDiscovererCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a discoverer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DeleteDiscovererCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DeleteDiscovererCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DeleteDiscovererCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDiscovererCommandInput} for command's `input` shape.
        * @see {@link DeleteDiscovererCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DeleteDiscovererCommand extends $Command<DeleteDiscovererCommandInput, DeleteDiscovererCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DeleteDiscovererCommandInput;
            constructor(input: DeleteDiscovererCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDiscovererCommandInput, DeleteDiscovererCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteRegistryRequest } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DeleteRegistryCommandInput extends DeleteRegistryRequest {
    }
    export interface DeleteRegistryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Registry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DeleteRegistryCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DeleteRegistryCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DeleteRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRegistryCommandInput} for command's `input` shape.
        * @see {@link DeleteRegistryCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DeleteRegistryCommand extends $Command<DeleteRegistryCommandInput, DeleteRegistryCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DeleteRegistryCommandInput;
            constructor(input: DeleteRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRegistryCommandInput, DeleteRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteResourcePolicyRequest } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DeleteResourcePolicyCommandInput extends DeleteResourcePolicyRequest {
    }
    export interface DeleteResourcePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete the resource-based policy attached to the specified registry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DeleteResourcePolicyCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DeleteResourcePolicyCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DeleteResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DeleteResourcePolicyCommand extends $Command<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DeleteResourcePolicyCommandInput;
            constructor(input: DeleteResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteSchemaRequest } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DeleteSchemaCommandInput extends DeleteSchemaRequest {
    }
    export interface DeleteSchemaCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete a schema definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DeleteSchemaCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DeleteSchemaCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DeleteSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSchemaCommandInput} for command's `input` shape.
        * @see {@link DeleteSchemaCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DeleteSchemaCommand extends $Command<DeleteSchemaCommandInput, DeleteSchemaCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DeleteSchemaCommandInput;
            constructor(input: DeleteSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSchemaCommandInput, DeleteSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteSchemaVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteSchemaVersionRequest } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DeleteSchemaVersionCommandInput extends DeleteSchemaVersionRequest {
    }
    export interface DeleteSchemaVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete the schema version definition</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DeleteSchemaVersionCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DeleteSchemaVersionCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DeleteSchemaVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSchemaVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteSchemaVersionCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DeleteSchemaVersionCommand extends $Command<DeleteSchemaVersionCommandInput, DeleteSchemaVersionCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DeleteSchemaVersionCommandInput;
            constructor(input: DeleteSchemaVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSchemaVersionCommandInput, DeleteSchemaVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeCodeBindingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeCodeBindingRequest, DescribeCodeBindingResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DescribeCodeBindingCommandInput extends DescribeCodeBindingRequest {
    }
    export interface DescribeCodeBindingCommandOutput extends DescribeCodeBindingResponse, __MetadataBearer {
    }
    /**
        * <p>Describe the code binding URI.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DescribeCodeBindingCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DescribeCodeBindingCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DescribeCodeBindingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCodeBindingCommandInput} for command's `input` shape.
        * @see {@link DescribeCodeBindingCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DescribeCodeBindingCommand extends $Command<DescribeCodeBindingCommandInput, DescribeCodeBindingCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DescribeCodeBindingCommandInput;
            constructor(input: DescribeCodeBindingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCodeBindingCommandInput, DescribeCodeBindingCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeDiscovererCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDiscovererRequest, DescribeDiscovererResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DescribeDiscovererCommandInput extends DescribeDiscovererRequest {
    }
    export interface DescribeDiscovererCommandOutput extends DescribeDiscovererResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the discoverer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DescribeDiscovererCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DescribeDiscovererCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DescribeDiscovererCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDiscovererCommandInput} for command's `input` shape.
        * @see {@link DescribeDiscovererCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DescribeDiscovererCommand extends $Command<DescribeDiscovererCommandInput, DescribeDiscovererCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DescribeDiscovererCommandInput;
            constructor(input: DescribeDiscovererCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDiscovererCommandInput, DescribeDiscovererCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeRegistryRequest, DescribeRegistryResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DescribeRegistryCommandInput extends DescribeRegistryRequest {
    }
    export interface DescribeRegistryCommandOutput extends DescribeRegistryResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the registry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DescribeRegistryCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DescribeRegistryCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DescribeRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRegistryCommandInput} for command's `input` shape.
        * @see {@link DescribeRegistryCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DescribeRegistryCommand extends $Command<DescribeRegistryCommandInput, DescribeRegistryCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DescribeRegistryCommandInput;
            constructor(input: DescribeRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRegistryCommandInput, DescribeRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSchemaRequest, DescribeSchemaResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface DescribeSchemaCommandInput extends DescribeSchemaRequest {
    }
    export interface DescribeSchemaCommandOutput extends DescribeSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve the schema definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, DescribeSchemaCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, DescribeSchemaCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new DescribeSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSchemaCommandInput} for command's `input` shape.
        * @see {@link DescribeSchemaCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class DescribeSchemaCommand extends $Command<DescribeSchemaCommandInput, DescribeSchemaCommandOutput, SchemasClientResolvedConfig> {
            readonly input: DescribeSchemaCommandInput;
            constructor(input: DescribeSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSchemaCommandInput, DescribeSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ExportSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ExportSchemaRequest, ExportSchemaResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface ExportSchemaCommandInput extends ExportSchemaRequest {
    }
    export interface ExportSchemaCommandOutput extends ExportSchemaResponse, __MetadataBearer {
    }
    export class ExportSchemaCommand extends $Command<ExportSchemaCommandInput, ExportSchemaCommandOutput, SchemasClientResolvedConfig> {
        readonly input: ExportSchemaCommandInput;
        constructor(input: ExportSchemaCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExportSchemaCommandInput, ExportSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetCodeBindingSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCodeBindingSourceRequest, GetCodeBindingSourceResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface GetCodeBindingSourceCommandInput extends GetCodeBindingSourceRequest {
    }
    export interface GetCodeBindingSourceCommandOutput extends GetCodeBindingSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Get the code binding source URI.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, GetCodeBindingSourceCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, GetCodeBindingSourceCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new GetCodeBindingSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCodeBindingSourceCommandInput} for command's `input` shape.
        * @see {@link GetCodeBindingSourceCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class GetCodeBindingSourceCommand extends $Command<GetCodeBindingSourceCommandInput, GetCodeBindingSourceCommandOutput, SchemasClientResolvedConfig> {
            readonly input: GetCodeBindingSourceCommandInput;
            constructor(input: GetCodeBindingSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCodeBindingSourceCommandInput, GetCodeBindingSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetDiscoveredSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDiscoveredSchemaRequest, GetDiscoveredSchemaResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface GetDiscoveredSchemaCommandInput extends GetDiscoveredSchemaRequest {
    }
    export interface GetDiscoveredSchemaCommandOutput extends GetDiscoveredSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Get the discovered schema that was generated based on sampled events.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, GetDiscoveredSchemaCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, GetDiscoveredSchemaCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new GetDiscoveredSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDiscoveredSchemaCommandInput} for command's `input` shape.
        * @see {@link GetDiscoveredSchemaCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class GetDiscoveredSchemaCommand extends $Command<GetDiscoveredSchemaCommandInput, GetDiscoveredSchemaCommandOutput, SchemasClientResolvedConfig> {
            readonly input: GetDiscoveredSchemaCommandInput;
            constructor(input: GetDiscoveredSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDiscoveredSchemaCommandInput, GetDiscoveredSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetResourcePolicyRequest, GetResourcePolicyResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface GetResourcePolicyCommandInput extends GetResourcePolicyRequest {
    }
    export interface GetResourcePolicyCommandOutput extends GetResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the resource-based policy attached to a given registry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, GetResourcePolicyCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, GetResourcePolicyCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new GetResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link GetResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class GetResourcePolicyCommand extends $Command<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput, SchemasClientResolvedConfig> {
            readonly input: GetResourcePolicyCommandInput;
            constructor(input: GetResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListDiscoverersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDiscoverersRequest, ListDiscoverersResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface ListDiscoverersCommandInput extends ListDiscoverersRequest {
    }
    export interface ListDiscoverersCommandOutput extends ListDiscoverersResponse, __MetadataBearer {
    }
    /**
        * <p>List the discoverers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, ListDiscoverersCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, ListDiscoverersCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new ListDiscoverersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDiscoverersCommandInput} for command's `input` shape.
        * @see {@link ListDiscoverersCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class ListDiscoverersCommand extends $Command<ListDiscoverersCommandInput, ListDiscoverersCommandOutput, SchemasClientResolvedConfig> {
            readonly input: ListDiscoverersCommandInput;
            constructor(input: ListDiscoverersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDiscoverersCommandInput, ListDiscoverersCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListRegistriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListRegistriesRequest, ListRegistriesResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface ListRegistriesCommandInput extends ListRegistriesRequest {
    }
    export interface ListRegistriesCommandOutput extends ListRegistriesResponse, __MetadataBearer {
    }
    /**
        * <p>List the registries.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, ListRegistriesCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, ListRegistriesCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new ListRegistriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRegistriesCommandInput} for command's `input` shape.
        * @see {@link ListRegistriesCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class ListRegistriesCommand extends $Command<ListRegistriesCommandInput, ListRegistriesCommandOutput, SchemasClientResolvedConfig> {
            readonly input: ListRegistriesCommandInput;
            constructor(input: ListRegistriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRegistriesCommandInput, ListRegistriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListSchemasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSchemasRequest, ListSchemasResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface ListSchemasCommandInput extends ListSchemasRequest {
    }
    export interface ListSchemasCommandOutput extends ListSchemasResponse, __MetadataBearer {
    }
    /**
        * <p>List the schemas.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, ListSchemasCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, ListSchemasCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new ListSchemasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSchemasCommandInput} for command's `input` shape.
        * @see {@link ListSchemasCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class ListSchemasCommand extends $Command<ListSchemasCommandInput, ListSchemasCommandOutput, SchemasClientResolvedConfig> {
            readonly input: ListSchemasCommandInput;
            constructor(input: ListSchemasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSchemasCommandInput, ListSchemasCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListSchemaVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSchemaVersionsRequest, ListSchemaVersionsResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface ListSchemaVersionsCommandInput extends ListSchemaVersionsRequest {
    }
    export interface ListSchemaVersionsCommandOutput extends ListSchemaVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of the schema versions and related information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, ListSchemaVersionsCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, ListSchemaVersionsCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new ListSchemaVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSchemaVersionsCommandInput} for command's `input` shape.
        * @see {@link ListSchemaVersionsCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class ListSchemaVersionsCommand extends $Command<ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput, SchemasClientResolvedConfig> {
            readonly input: ListSchemaVersionsCommandInput;
            constructor(input: ListSchemaVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Get tags for resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, ListTagsForResourceCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, ListTagsForResourceCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, SchemasClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/PutCodeBindingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutCodeBindingRequest, PutCodeBindingResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface PutCodeBindingCommandInput extends PutCodeBindingRequest {
    }
    export interface PutCodeBindingCommandOutput extends PutCodeBindingResponse, __MetadataBearer {
    }
    /**
        * <p>Put code binding URI</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, PutCodeBindingCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, PutCodeBindingCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new PutCodeBindingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutCodeBindingCommandInput} for command's `input` shape.
        * @see {@link PutCodeBindingCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class PutCodeBindingCommand extends $Command<PutCodeBindingCommandInput, PutCodeBindingCommandOutput, SchemasClientResolvedConfig> {
            readonly input: PutCodeBindingCommandInput;
            constructor(input: PutCodeBindingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutCodeBindingCommandInput, PutCodeBindingCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/PutResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutResourcePolicyRequest, PutResourcePolicyResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface PutResourcePolicyCommandInput extends PutResourcePolicyRequest {
    }
    export interface PutResourcePolicyCommandOutput extends PutResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>The name of the policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, PutResourcePolicyCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, PutResourcePolicyCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new PutResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link PutResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class PutResourcePolicyCommand extends $Command<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput, SchemasClientResolvedConfig> {
            readonly input: PutResourcePolicyCommandInput;
            constructor(input: PutResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/SearchSchemasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchSchemasRequest, SearchSchemasResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface SearchSchemasCommandInput extends SearchSchemasRequest {
    }
    export interface SearchSchemasCommandOutput extends SearchSchemasResponse, __MetadataBearer {
    }
    /**
        * <p>Search the schemas</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, SearchSchemasCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, SearchSchemasCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new SearchSchemasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchSchemasCommandInput} for command's `input` shape.
        * @see {@link SearchSchemasCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class SearchSchemasCommand extends $Command<SearchSchemasCommandInput, SearchSchemasCommandOutput, SchemasClientResolvedConfig> {
            readonly input: SearchSchemasCommandInput;
            constructor(input: SearchSchemasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchSchemasCommandInput, SearchSchemasCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/StartDiscovererCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartDiscovererRequest, StartDiscovererResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface StartDiscovererCommandInput extends StartDiscovererRequest {
    }
    export interface StartDiscovererCommandOutput extends StartDiscovererResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the discoverer</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, StartDiscovererCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, StartDiscovererCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new StartDiscovererCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDiscovererCommandInput} for command's `input` shape.
        * @see {@link StartDiscovererCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class StartDiscovererCommand extends $Command<StartDiscovererCommandInput, StartDiscovererCommandOutput, SchemasClientResolvedConfig> {
            readonly input: StartDiscovererCommandInput;
            constructor(input: StartDiscovererCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDiscovererCommandInput, StartDiscovererCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/StopDiscovererCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopDiscovererRequest, StopDiscovererResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface StopDiscovererCommandInput extends StopDiscovererRequest {
    }
    export interface StopDiscovererCommandOutput extends StopDiscovererResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the discoverer</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, StopDiscovererCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, StopDiscovererCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new StopDiscovererCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDiscovererCommandInput} for command's `input` shape.
        * @see {@link StopDiscovererCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class StopDiscovererCommand extends $Command<StopDiscovererCommandInput, StopDiscovererCommandOutput, SchemasClientResolvedConfig> {
            readonly input: StopDiscovererCommandInput;
            constructor(input: StopDiscovererCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDiscovererCommandInput, StopDiscovererCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Add tags to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, TagResourceCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, TagResourceCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, SchemasClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, UntagResourceCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, UntagResourceCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, SchemasClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateDiscovererCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDiscovererRequest, UpdateDiscovererResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface UpdateDiscovererCommandInput extends UpdateDiscovererRequest {
    }
    export interface UpdateDiscovererCommandOutput extends UpdateDiscovererResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the discoverer</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, UpdateDiscovererCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, UpdateDiscovererCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new UpdateDiscovererCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDiscovererCommandInput} for command's `input` shape.
        * @see {@link UpdateDiscovererCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class UpdateDiscovererCommand extends $Command<UpdateDiscovererCommandInput, UpdateDiscovererCommandOutput, SchemasClientResolvedConfig> {
            readonly input: UpdateDiscovererCommandInput;
            constructor(input: UpdateDiscovererCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDiscovererCommandInput, UpdateDiscovererCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateRegistryRequest, UpdateRegistryResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface UpdateRegistryCommandInput extends UpdateRegistryRequest {
    }
    export interface UpdateRegistryCommandOutput extends UpdateRegistryResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a registry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, UpdateRegistryCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, UpdateRegistryCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new UpdateRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRegistryCommandInput} for command's `input` shape.
        * @see {@link UpdateRegistryCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class UpdateRegistryCommand extends $Command<UpdateRegistryCommandInput, UpdateRegistryCommandOutput, SchemasClientResolvedConfig> {
            readonly input: UpdateRegistryCommandInput;
            constructor(input: UpdateRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRegistryCommandInput, UpdateRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSchemaRequest, UpdateSchemaResponse } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0";
    import { SchemasClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient";
    export interface UpdateSchemaCommandInput extends UpdateSchemaRequest {
    }
    export interface UpdateSchemaCommandOutput extends UpdateSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the schema definition</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SchemasClient, UpdateSchemaCommand } from "@aws-sdk/client-schemas"; // ES Modules import
        * // const { SchemasClient, UpdateSchemaCommand } = require("@aws-sdk/client-schemas"); // CommonJS import
        * const client = new SchemasClient(config);
        * const command = new UpdateSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSchemaCommandInput} for command's `input` shape.
        * @see {@link UpdateSchemaCommandOutput} for command's `response` shape.
        * @see {@link SchemasClientResolvedConfig | config} for SchemasClient's `config` shape.
        *
        */
    export class UpdateSchemaCommand extends $Command<UpdateSchemaCommandInput, UpdateSchemaCommandOutput, SchemasClientResolvedConfig> {
            readonly input: UpdateSchemaCommandInput;
            constructor(input: UpdateSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SchemasClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSchemaCommandInput, UpdateSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/SchemasClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateDiscovererCommandInput, CreateDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateDiscovererCommand";
    import { CreateRegistryCommandInput, CreateRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateRegistryCommand";
    import { CreateSchemaCommandInput, CreateSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/CreateSchemaCommand";
    import { DeleteDiscovererCommandInput, DeleteDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteDiscovererCommand";
    import { DeleteRegistryCommandInput, DeleteRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteRegistryCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSchemaCommandInput, DeleteSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteSchemaCommand";
    import { DeleteSchemaVersionCommandInput, DeleteSchemaVersionCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DeleteSchemaVersionCommand";
    import { DescribeCodeBindingCommandInput, DescribeCodeBindingCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeCodeBindingCommand";
    import { DescribeDiscovererCommandInput, DescribeDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeDiscovererCommand";
    import { DescribeRegistryCommandInput, DescribeRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeRegistryCommand";
    import { DescribeSchemaCommandInput, DescribeSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/DescribeSchemaCommand";
    import { ExportSchemaCommandInput, ExportSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ExportSchemaCommand";
    import { GetCodeBindingSourceCommandInput, GetCodeBindingSourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetCodeBindingSourceCommand";
    import { GetDiscoveredSchemaCommandInput, GetDiscoveredSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetDiscoveredSchemaCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/GetResourcePolicyCommand";
    import { ListDiscoverersCommandInput, ListDiscoverersCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListDiscoverersCommand";
    import { ListRegistriesCommandInput, ListRegistriesCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListRegistriesCommand";
    import { ListSchemasCommandInput, ListSchemasCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListSchemasCommand";
    import { ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListSchemaVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/ListTagsForResourceCommand";
    import { PutCodeBindingCommandInput, PutCodeBindingCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/PutCodeBindingCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/PutResourcePolicyCommand";
    import { SearchSchemasCommandInput, SearchSchemasCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/SearchSchemasCommand";
    import { StartDiscovererCommandInput, StartDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/StartDiscovererCommand";
    import { StopDiscovererCommandInput, StopDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/StopDiscovererCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UntagResourceCommand";
    import { UpdateDiscovererCommandInput, UpdateDiscovererCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateDiscovererCommand";
    import { UpdateRegistryCommandInput, UpdateRegistryCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateRegistryCommand";
    import { UpdateSchemaCommandInput, UpdateSchemaCommandOutput } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/commands/UpdateSchemaCommand";
    export type ServiceInputTypes = CreateDiscovererCommandInput | CreateRegistryCommandInput | CreateSchemaCommandInput | DeleteDiscovererCommandInput | DeleteRegistryCommandInput | DeleteResourcePolicyCommandInput | DeleteSchemaCommandInput | DeleteSchemaVersionCommandInput | DescribeCodeBindingCommandInput | DescribeDiscovererCommandInput | DescribeRegistryCommandInput | DescribeSchemaCommandInput | ExportSchemaCommandInput | GetCodeBindingSourceCommandInput | GetDiscoveredSchemaCommandInput | GetResourcePolicyCommandInput | ListDiscoverersCommandInput | ListRegistriesCommandInput | ListSchemaVersionsCommandInput | ListSchemasCommandInput | ListTagsForResourceCommandInput | PutCodeBindingCommandInput | PutResourcePolicyCommandInput | SearchSchemasCommandInput | StartDiscovererCommandInput | StopDiscovererCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateDiscovererCommandInput | UpdateRegistryCommandInput | UpdateSchemaCommandInput;
    export type ServiceOutputTypes = CreateDiscovererCommandOutput | CreateRegistryCommandOutput | CreateSchemaCommandOutput | DeleteDiscovererCommandOutput | DeleteRegistryCommandOutput | DeleteResourcePolicyCommandOutput | DeleteSchemaCommandOutput | DeleteSchemaVersionCommandOutput | DescribeCodeBindingCommandOutput | DescribeDiscovererCommandOutput | DescribeRegistryCommandOutput | DescribeSchemaCommandOutput | ExportSchemaCommandOutput | GetCodeBindingSourceCommandOutput | GetDiscoveredSchemaCommandOutput | GetResourcePolicyCommandOutput | ListDiscoverersCommandOutput | ListRegistriesCommandOutput | ListSchemaVersionsCommandOutput | ListSchemasCommandOutput | ListTagsForResourceCommandOutput | PutCodeBindingCommandOutput | PutResourcePolicyCommandOutput | SearchSchemasCommandOutput | StartDiscovererCommandOutput | StopDiscovererCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateDiscovererCommandOutput | UpdateRegistryCommandOutput | UpdateSchemaCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SchemasClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SchemasClient class constructor that set the region, credentials and other options.
        */
    export interface SchemasClientConfig extends SchemasClientConfigType {
    }
    type SchemasClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SchemasClient class. This is resolved and normalized from the {@link SchemasClientConfig | constructor configuration interface}.
        */
    export interface SchemasClientResolvedConfig extends SchemasClientResolvedConfigType {
    }
    /**
        * <p>Amazon EventBridge Schema Registry</p>
        */
    export class SchemasClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SchemasClientResolvedConfig> {
            /**
                * The resolved configuration of SchemasClient class. This is resolved and normalized from the {@link SchemasClientConfig | constructor configuration interface}.
                */
            readonly config: SchemasClientResolvedConfig;
            constructor(configuration: SchemasClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType, LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
    import { SchemasServiceException as __BaseException } from "@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/SchemasServiceException";
    export enum DiscovererState {
            STARTED = "STARTED",
            STOPPED = "STOPPED"
    }
    export interface DiscovererSummary {
            /**
                * <p>The ARN of the discoverer.</p>
                */
            DiscovererArn?: string;
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId?: string;
            /**
                * <p>The ARN of the event bus.</p>
                */
            SourceArn?: string;
            /**
                * <p>The state of the discoverer.</p>
                */
            State?: DiscovererState | string;
            /**
                * <p>The Status if the discoverer will discover schemas from events sent from another account.</p>
                */
            CrossAccount?: boolean;
            /**
                * <p>Tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DiscovererSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DiscovererSummary) => any;
    }
    export interface RegistrySummary {
            /**
                * <p>The ARN of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>Tags associated with the registry.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace RegistrySummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegistrySummary) => any;
    }
    /**
        * <p>A summary of schema details.</p>
        */
    export interface SchemaSummary {
            /**
                * <p>The date and time that schema was modified.</p>
                */
            LastModified?: Date;
            /**
                * <p>The ARN of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>Tags associated with the schema.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The number of versions available for the schema.</p>
                */
            VersionCount?: number;
    }
    export namespace SchemaSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaSummary) => any;
    }
    export enum Type {
            JSONSchemaDraft4 = "JSONSchemaDraft4",
            OpenApi3 = "OpenApi3"
    }
    export interface SchemaVersionSummary {
            /**
                * <p>The ARN of the schema version.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersion?: string;
            /**
                * <p>The type of schema.</p>
                */
            Type?: Type | string;
    }
    export namespace SchemaVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaVersionSummary) => any;
    }
    export interface SearchSchemaVersionSummary {
            /**
                * <p>The date the schema version was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The version number of the schema</p>
                */
            SchemaVersion?: string;
            /**
                * <p>The type of schema.</p>
                */
            Type?: Type | string;
    }
    export namespace SearchSchemaVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchSchemaVersionSummary) => any;
    }
    export interface SearchSchemaSummary {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The ARN of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>An array of schema version summaries.</p>
                */
            SchemaVersions?: SearchSchemaVersionSummary[];
    }
    export namespace SearchSchemaSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchSchemaSummary) => any;
    }
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    export enum CodeGenerationStatus {
            CREATE_COMPLETE = "CREATE_COMPLETE",
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS"
    }
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface CreateDiscovererRequest {
            /**
                * <p>A description for the discoverer.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the event bus.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>Support discovery of schemas in events sent to the bus from another account. (default: true).</p>
                */
            CrossAccount?: boolean;
            /**
                * <p>Tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateDiscovererRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiscovererRequest) => any;
    }
    export interface CreateDiscovererResponse {
            /**
                * <p>The description of the discoverer.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the discoverer.</p>
                */
            DiscovererArn?: string;
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId?: string;
            /**
                * <p>The ARN of the event bus.</p>
                */
            SourceArn?: string;
            /**
                * <p>The state of the discoverer.</p>
                */
            State?: DiscovererState | string;
            /**
                * <p>The Status if the discoverer will discover schemas from events sent from another account.</p>
                */
            CrossAccount?: boolean;
            /**
                * <p>Tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateDiscovererResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiscovererResponse) => any;
    }
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    export interface CreateRegistryRequest {
            /**
                * <p>A description of the registry to be created.</p>
                */
            Description?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>Tags to associate with the registry.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateRegistryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRegistryRequest) => any;
    }
    export interface CreateRegistryResponse {
            /**
                * <p>The description of the registry.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>Tags associated with the registry.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateRegistryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRegistryResponse) => any;
    }
    export interface CreateSchemaRequest {
            /**
                * <p>The source of the schema definition.</p>
                */
            Content: string | undefined;
            /**
                * <p>A description of the schema.</p>
                */
            Description?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>Tags associated with the schema.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The type of schema.</p>
                */
            Type: Type | string | undefined;
    }
    export namespace CreateSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSchemaRequest) => any;
    }
    export interface CreateSchemaResponse {
            /**
                * <p>The description of the schema.</p>
                */
            Description?: string;
            /**
                * <p>The date and time that schema was modified.</p>
                */
            LastModified?: Date;
            /**
                * <p>The ARN of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The version number of the schema</p>
                */
            SchemaVersion?: string;
            /**
                * <p>Key-value pairs associated with a resource.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The type of the schema.</p>
                */
            Type?: string;
            /**
                * <p>The date the schema version was created.</p>
                */
            VersionCreatedDate?: Date;
    }
    export namespace CreateSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSchemaResponse) => any;
    }
    export interface DeleteDiscovererRequest {
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId: string | undefined;
    }
    export namespace DeleteDiscovererRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDiscovererRequest) => any;
    }
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    export interface DeleteRegistryRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
    }
    export namespace DeleteRegistryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRegistryRequest) => any;
    }
    export interface DeleteResourcePolicyRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
    }
    export namespace DeleteResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyRequest) => any;
    }
    export interface DeleteSchemaRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
    }
    export namespace DeleteSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaRequest) => any;
    }
    export interface DeleteSchemaVersionRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * The version number of the schema
                */
            SchemaVersion: string | undefined;
    }
    export namespace DeleteSchemaVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaVersionRequest) => any;
    }
    export interface DescribeCodeBindingRequest {
            /**
                * <p>The language of the code binding.</p>
                */
            Language: string | undefined;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>Specifying this limits the results to only this schema version.</p>
                */
            SchemaVersion?: string;
    }
    export namespace DescribeCodeBindingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCodeBindingRequest) => any;
    }
    export interface DescribeCodeBindingResponse {
            /**
                * <p>The time and date that the code binding was created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The date and time that code bindings were modified.</p>
                */
            LastModified?: Date;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersion?: string;
            /**
                * <p>The current status of code binding generation.</p>
                */
            Status?: CodeGenerationStatus | string;
    }
    export namespace DescribeCodeBindingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCodeBindingResponse) => any;
    }
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    export interface DescribeDiscovererRequest {
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId: string | undefined;
    }
    export namespace DescribeDiscovererRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDiscovererRequest) => any;
    }
    export interface DescribeDiscovererResponse {
            /**
                * <p>The description of the discoverer.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the discoverer.</p>
                */
            DiscovererArn?: string;
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId?: string;
            /**
                * <p>The ARN of the event bus.</p>
                */
            SourceArn?: string;
            /**
                * <p>The state of the discoverer.</p>
                */
            State?: DiscovererState | string;
            /**
                * <p>The Status if the discoverer will discover schemas from events sent from another account.</p>
                */
            CrossAccount?: boolean;
            /**
                * <p>Tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeDiscovererResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDiscovererResponse) => any;
    }
    export interface DescribeRegistryRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
    }
    export namespace DescribeRegistryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRegistryRequest) => any;
    }
    export interface DescribeRegistryResponse {
            /**
                * <p>The description of the registry.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>Tags associated with the registry.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeRegistryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRegistryResponse) => any;
    }
    export interface DescribeSchemaRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>Specifying this limits the results to only this schema version.</p>
                */
            SchemaVersion?: string;
    }
    export namespace DescribeSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSchemaRequest) => any;
    }
    export interface DescribeSchemaResponse {
            /**
                * <p>The source of the schema definition.</p>
                */
            Content?: string;
            /**
                * <p>The description of the schema.</p>
                */
            Description?: string;
            /**
                * <p>The date and time that schema was modified.</p>
                */
            LastModified?: Date;
            /**
                * <p>The ARN of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The version number of the schema</p>
                */
            SchemaVersion?: string;
            /**
                * <p>Tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The type of the schema.</p>
                */
            Type?: string;
            /**
                * <p>The date the schema version was created.</p>
                */
            VersionCreatedDate?: Date;
    }
    export namespace DescribeSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSchemaResponse) => any;
    }
    export interface ExportSchemaRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>Specifying this limits the results to only this schema version.</p>
                */
            SchemaVersion?: string;
            Type: string | undefined;
    }
    export namespace ExportSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportSchemaRequest) => any;
    }
    export interface ExportSchemaResponse {
            Content?: string;
            SchemaArn?: string;
            SchemaName?: string;
            SchemaVersion?: string;
            Type?: string;
    }
    export namespace ExportSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportSchemaResponse) => any;
    }
    export interface GetCodeBindingSourceRequest {
            /**
                * <p>The language of the code binding.</p>
                */
            Language: string | undefined;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>Specifying this limits the results to only this schema version.</p>
                */
            SchemaVersion?: string;
    }
    export namespace GetCodeBindingSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCodeBindingSourceRequest) => any;
    }
    export interface GetCodeBindingSourceResponse {
            Body?: Uint8Array;
    }
    export namespace GetCodeBindingSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCodeBindingSourceResponse) => any;
    }
    export interface GetDiscoveredSchemaRequest {
            /**
                * <p>An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.</p>
                */
            Events: string[] | undefined;
            /**
                * <p>The type of event.</p>
                */
            Type: Type | string | undefined;
    }
    export namespace GetDiscoveredSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiscoveredSchemaRequest) => any;
    }
    export interface GetDiscoveredSchemaResponse {
            /**
                * <p>The source of the schema definition.</p>
                */
            Content?: string;
    }
    export namespace GetDiscoveredSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiscoveredSchemaResponse) => any;
    }
    export interface GetResourcePolicyRequest {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
    }
    export namespace GetResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyRequest) => any;
    }
    export interface GetResourcePolicyResponse {
            /**
                * <p>The resource-based policy.</p>
                */
            Policy?: __LazyJsonString | string;
            /**
                * <p>The revision ID.</p>
                */
            RevisionId?: string;
    }
    export namespace GetResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyResponse) => any;
    }
    export class GoneException extends __BaseException {
            readonly name: "GoneException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GoneException, __BaseException>);
    }
    export interface ListDiscoverersRequest {
            /**
                * <p>Specifying this limits the results to only those discoverer IDs that start with the specified prefix.</p>
                */
            DiscovererIdPrefix?: string;
            Limit?: number;
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifying this limits the results to only those ARNs that start with the specified prefix.</p>
                */
            SourceArnPrefix?: string;
    }
    export namespace ListDiscoverersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDiscoverersRequest) => any;
    }
    export interface ListDiscoverersResponse {
            /**
                * <p>An array of DiscovererSummary information.</p>
                */
            Discoverers?: DiscovererSummary[];
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
    }
    export namespace ListDiscoverersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDiscoverersResponse) => any;
    }
    export interface ListRegistriesRequest {
            Limit?: number;
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifying this limits the results to only those registry names that start with the specified prefix.</p>
                */
            RegistryNamePrefix?: string;
            /**
                * <p>Can be set to Local or AWS to limit responses to your custom registries, or the ones provided by AWS.</p>
                */
            Scope?: string;
    }
    export namespace ListRegistriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRegistriesRequest) => any;
    }
    export interface ListRegistriesResponse {
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>An array of registry summaries.</p>
                */
            Registries?: RegistrySummary[];
    }
    export namespace ListRegistriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRegistriesResponse) => any;
    }
    export interface ListSchemasRequest {
            Limit?: number;
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>Specifying this limits the results to only those schema names that start with the specified prefix.</p>
                */
            SchemaNamePrefix?: string;
    }
    export namespace ListSchemasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemasRequest) => any;
    }
    export interface ListSchemasResponse {
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>An array of schema summaries.</p>
                */
            Schemas?: SchemaSummary[];
    }
    export namespace ListSchemasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemasResponse) => any;
    }
    export interface ListSchemaVersionsRequest {
            Limit?: number;
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
    }
    export namespace ListSchemaVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemaVersionsRequest) => any;
    }
    export interface ListSchemaVersionsResponse {
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>An array of schema version summaries.</p>
                */
            SchemaVersions?: SchemaVersionSummary[];
    }
    export namespace ListSchemaVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemaVersionsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>Key-value pairs associated with a resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export class PreconditionFailedException extends __BaseException {
            readonly name: "PreconditionFailedException";
            readonly $fault: "client";
            /**
                * <p>The error code.</p>
                */
            Code: string | undefined;
            /**
                * <p>The message string of the error output.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PreconditionFailedException, __BaseException>);
    }
    export interface PutCodeBindingRequest {
            /**
                * <p>The language of the code binding.</p>
                */
            Language: string | undefined;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>Specifying this limits the results to only this schema version.</p>
                */
            SchemaVersion?: string;
    }
    export namespace PutCodeBindingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCodeBindingRequest) => any;
    }
    export interface PutCodeBindingResponse {
            /**
                * <p>The time and date that the code binding was created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The date and time that code bindings were modified.</p>
                */
            LastModified?: Date;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersion?: string;
            /**
                * <p>The current status of code binding generation.</p>
                */
            Status?: CodeGenerationStatus | string;
    }
    export namespace PutCodeBindingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCodeBindingResponse) => any;
    }
    /**
        * <p>The name of the policy.</p>
        */
    export interface PutResourcePolicyRequest {
            /**
                * <p>The resource-based policy.</p>
                */
            Policy: __LazyJsonString | string | undefined;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The revision ID of the policy.</p>
                */
            RevisionId?: string;
    }
    export namespace PutResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyRequest) => any;
    }
    export interface PutResourcePolicyResponse {
            /**
                * <p>The resource-based policy.</p>
                */
            Policy?: __LazyJsonString | string;
            /**
                * <p>The revision ID of the policy.</p>
                */
            RevisionId?: string;
    }
    export namespace PutResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyResponse) => any;
    }
    export interface SearchSchemasRequest {
            /**
                * <p>Specifying this limits the results to only schemas that include the provided keywords.</p>
                */
            Keywords: string | undefined;
            Limit?: number;
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
    }
    export namespace SearchSchemasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchSchemasRequest) => any;
    }
    export interface SearchSchemasResponse {
            /**
                * <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
                */
            NextToken?: string;
            /**
                * <p>An array of SearchSchemaSummary information.</p>
                */
            Schemas?: SearchSchemaSummary[];
    }
    export namespace SearchSchemasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchSchemasResponse) => any;
    }
    export interface StartDiscovererRequest {
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId: string | undefined;
    }
    export namespace StartDiscovererRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDiscovererRequest) => any;
    }
    export interface StartDiscovererResponse {
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId?: string;
            /**
                * <p>The state of the discoverer.</p>
                */
            State?: DiscovererState | string;
    }
    export namespace StartDiscovererResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDiscovererResponse) => any;
    }
    export interface StopDiscovererRequest {
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId: string | undefined;
    }
    export namespace StopDiscovererRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDiscovererRequest) => any;
    }
    export interface StopDiscovererResponse {
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId?: string;
            /**
                * <p>The state of the discoverer.</p>
                */
            State?: DiscovererState | string;
    }
    export namespace StopDiscovererResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDiscovererResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tags associated with the resource.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Keys of key-value pairs.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UpdateDiscovererRequest {
            /**
                * <p>The description of the discoverer to update.</p>
                */
            Description?: string;
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId: string | undefined;
            /**
                * <p>Support discovery of schemas in events sent to the bus from another account. (default: true)</p>
                */
            CrossAccount?: boolean;
    }
    export namespace UpdateDiscovererRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDiscovererRequest) => any;
    }
    export interface UpdateDiscovererResponse {
            /**
                * <p>The description of the discoverer.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the discoverer.</p>
                */
            DiscovererArn?: string;
            /**
                * <p>The ID of the discoverer.</p>
                */
            DiscovererId?: string;
            /**
                * <p>The ARN of the event bus.</p>
                */
            SourceArn?: string;
            /**
                * <p>The state of the discoverer.</p>
                */
            State?: DiscovererState | string;
            /**
                * <p>The Status if the discoverer will discover schemas from events sent from another account.</p>
                */
            CrossAccount?: boolean;
            /**
                * <p>Tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdateDiscovererResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDiscovererResponse) => any;
    }
    /**
        * <p>Updates the registry.</p>
        */
    export interface UpdateRegistryRequest {
            /**
                * <p>The description of the registry to update.</p>
                */
            Description?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
    }
    export namespace UpdateRegistryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRegistryRequest) => any;
    }
    export interface UpdateRegistryResponse {
            /**
                * <p>The description of the registry.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>Tags associated with the registry.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdateRegistryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRegistryResponse) => any;
    }
    export interface UpdateSchemaRequest {
            /**
                * <p>The ID of the client token.</p>
                */
            ClientTokenId?: string;
            /**
                * <p>The source of the schema definition.</p>
                */
            Content?: string;
            /**
                * <p>The description of the schema.</p>
                */
            Description?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>The schema type for the events schema.</p>
                */
            Type?: Type | string;
    }
    export namespace UpdateSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSchemaRequest) => any;
    }
    export interface UpdateSchemaResponse {
            /**
                * <p>The description of the schema.</p>
                */
            Description?: string;
            /**
                * <p>The date and time that schema was modified.</p>
                */
            LastModified?: Date;
            /**
                * <p>The ARN of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The version number of the schema</p>
                */
            SchemaVersion?: string;
            /**
                * <p>Key-value pairs associated with a resource.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The type of the schema.</p>
                */
            Type?: string;
            /**
                * <p>The date the schema version was created.</p>
                */
            VersionCreatedDate?: Date;
    }
    export namespace UpdateSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSchemaResponse) => any;
    }
}

declare module '@aws-sdk/client-schemas/node_modules/@aws-sdk/client-schemas/dist-types/models/SchemasServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Schemas service.
        */
    export class SchemasServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

