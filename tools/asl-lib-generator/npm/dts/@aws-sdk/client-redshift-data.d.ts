// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-redshift-data' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchExecuteStatementCommandInput, BatchExecuteStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/BatchExecuteStatementCommand";
    import { CancelStatementCommandInput, CancelStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/CancelStatementCommand";
    import { DescribeStatementCommandInput, DescribeStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/DescribeStatementCommand";
    import { DescribeTableCommandInput, DescribeTableCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/DescribeTableCommand";
    import { ExecuteStatementCommandInput, ExecuteStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ExecuteStatementCommand";
    import { GetStatementResultCommandInput, GetStatementResultCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/GetStatementResultCommand";
    import { ListDatabasesCommandInput, ListDatabasesCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListDatabasesCommand";
    import { ListSchemasCommandInput, ListSchemasCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListSchemasCommand";
    import { ListStatementsCommandInput, ListStatementsCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListStatementsCommand";
    import { ListTablesCommandInput, ListTablesCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListTablesCommand";
    import { RedshiftDataClient } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    /**
        * <p>You can use the Amazon Redshift Data API to run queries on Amazon Redshift tables. You
        *       can run SQL statements, which are committed if the statement succeeds. </p>
        *          <p>For more information about the Amazon Redshift Data API and CLI usage examples, see
        *        <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html">Using the Amazon Redshift Data API</a> in the
        *        <i>Amazon Redshift Cluster Management Guide</i>. </p>
        */
    export class RedshiftData extends RedshiftDataClient {
            /**
                * <p>Runs one or more SQL statements, which can be data manipulation language (DML) or data definition
                *       language (DDL).
                *       Depending on the authorization
                *       method, use one of the following combinations of request parameters: </p>
                *          <ul>
                *             <li>
                *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
                * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
                *             </li>
                *             <li>
                *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
                * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
                * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
                *             </li>
                *          </ul>
                */
            batchExecuteStatement(args: BatchExecuteStatementCommandInput, options?: __HttpHandlerOptions): Promise<BatchExecuteStatementCommandOutput>;
            batchExecuteStatement(args: BatchExecuteStatementCommandInput, cb: (err: any, data?: BatchExecuteStatementCommandOutput) => void): void;
            batchExecuteStatement(args: BatchExecuteStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchExecuteStatementCommandOutput) => void): void;
            /**
                * <p>Cancels a running query. To be canceled, a query must be running. </p>
                */
            cancelStatement(args: CancelStatementCommandInput, options?: __HttpHandlerOptions): Promise<CancelStatementCommandOutput>;
            cancelStatement(args: CancelStatementCommandInput, cb: (err: any, data?: CancelStatementCommandOutput) => void): void;
            cancelStatement(args: CancelStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelStatementCommandOutput) => void): void;
            /**
                * <p>Describes the details about a specific instance when a query was run by the Amazon Redshift Data API. The information
                *       includes when the query started, when it finished, the query status, the number of rows returned, and the SQL
                *       statement. </p>
                */
            describeStatement(args: DescribeStatementCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStatementCommandOutput>;
            describeStatement(args: DescribeStatementCommandInput, cb: (err: any, data?: DescribeStatementCommandOutput) => void): void;
            describeStatement(args: DescribeStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStatementCommandOutput) => void): void;
            /**
                * <p>Describes the detailed information about a table from metadata in the cluster. The
                *       information includes its columns.
                *       A token is returned to page through the column list.
                *       Depending on the authorization method, use one of the
                *       following combinations of request parameters: </p>
                *          <ul>
                *             <li>
                *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
                * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
                *             </li>
                *             <li>
                *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
                * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
                * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
                *             </li>
                *          </ul>
                */
            describeTable(args: DescribeTableCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTableCommandOutput>;
            describeTable(args: DescribeTableCommandInput, cb: (err: any, data?: DescribeTableCommandOutput) => void): void;
            describeTable(args: DescribeTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTableCommandOutput) => void): void;
            /**
                * <p>Runs an SQL statement, which can be data manipulation language (DML) or data definition
                *       language (DDL). This statement must be a single SQL statement.
                *       Depending on the authorization
                *       method, use one of the following combinations of request parameters: </p>
                *          <ul>
                *             <li>
                *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
                * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
                *             </li>
                *             <li>
                *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
                * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
                * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
                *             </li>
                *          </ul>
                */
            executeStatement(args: ExecuteStatementCommandInput, options?: __HttpHandlerOptions): Promise<ExecuteStatementCommandOutput>;
            executeStatement(args: ExecuteStatementCommandInput, cb: (err: any, data?: ExecuteStatementCommandOutput) => void): void;
            executeStatement(args: ExecuteStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExecuteStatementCommandOutput) => void): void;
            /**
                * <p>Fetches the temporarily cached result of an SQL statement.
                *        A token is returned to page through the statement results. </p>
                */
            getStatementResult(args: GetStatementResultCommandInput, options?: __HttpHandlerOptions): Promise<GetStatementResultCommandOutput>;
            getStatementResult(args: GetStatementResultCommandInput, cb: (err: any, data?: GetStatementResultCommandOutput) => void): void;
            getStatementResult(args: GetStatementResultCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStatementResultCommandOutput) => void): void;
            /**
                * <p>List the databases in a cluster.
                *       A token is returned to page through the database list.
                *       Depending on the authorization method, use one of the
                *       following combinations of request parameters: </p>
                *          <ul>
                *             <li>
                *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
                * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
                *             </li>
                *             <li>
                *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
                * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
                * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
                *             </li>
                *          </ul>
                */
            listDatabases(args: ListDatabasesCommandInput, options?: __HttpHandlerOptions): Promise<ListDatabasesCommandOutput>;
            listDatabases(args: ListDatabasesCommandInput, cb: (err: any, data?: ListDatabasesCommandOutput) => void): void;
            listDatabases(args: ListDatabasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatabasesCommandOutput) => void): void;
            /**
                * <p>Lists the schemas in a database.
                *       A token is returned to page through the schema list.
                *       Depending on the authorization method, use one of the
                *       following combinations of request parameters: </p>
                *          <ul>
                *             <li>
                *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
                * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
                *             </li>
                *             <li>
                *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
                * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
                * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
                *             </li>
                *          </ul>
                */
            listSchemas(args: ListSchemasCommandInput, options?: __HttpHandlerOptions): Promise<ListSchemasCommandOutput>;
            listSchemas(args: ListSchemasCommandInput, cb: (err: any, data?: ListSchemasCommandOutput) => void): void;
            listSchemas(args: ListSchemasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSchemasCommandOutput) => void): void;
            /**
                * <p>List of SQL statements. By default, only finished statements are shown.
                *         A token is returned to page through the statement list. </p>
                */
            listStatements(args: ListStatementsCommandInput, options?: __HttpHandlerOptions): Promise<ListStatementsCommandOutput>;
            listStatements(args: ListStatementsCommandInput, cb: (err: any, data?: ListStatementsCommandOutput) => void): void;
            listStatements(args: ListStatementsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStatementsCommandOutput) => void): void;
            /**
                * <p>List the tables in a database. If neither <code>SchemaPattern</code> nor <code>TablePattern</code> are specified, then
                *        all tables in the database are returned.
                *       A token is returned to page through the table list.
                *       Depending on the authorization method, use one of the
                *       following combinations of request parameters: </p>
                *          <ul>
                *             <li>
                *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
                * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
                *             </li>
                *             <li>
                *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
                * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
                * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
                *             </li>
                *          </ul>
                */
            listTables(args: ListTablesCommandInput, options?: __HttpHandlerOptions): Promise<ListTablesCommandOutput>;
            listTables(args: ListTablesCommandInput, cb: (err: any, data?: ListTablesCommandOutput) => void): void;
            listTables(args: ListTablesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTablesCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/BatchExecuteStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchExecuteStatementInput, BatchExecuteStatementOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface BatchExecuteStatementCommandInput extends BatchExecuteStatementInput {
    }
    export interface BatchExecuteStatementCommandOutput extends BatchExecuteStatementOutput, __MetadataBearer {
    }
    /**
        * <p>Runs one or more SQL statements, which can be data manipulation language (DML) or data definition
        *       language (DDL).
        *       Depending on the authorization
        *       method, use one of the following combinations of request parameters: </p>
        *          <ul>
        *             <li>
        *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
        * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
        *             </li>
        *             <li>
        *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
        * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
        * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, BatchExecuteStatementCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, BatchExecuteStatementCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new BatchExecuteStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchExecuteStatementCommandInput} for command's `input` shape.
        * @see {@link BatchExecuteStatementCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class BatchExecuteStatementCommand extends $Command<BatchExecuteStatementCommandInput, BatchExecuteStatementCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: BatchExecuteStatementCommandInput;
            constructor(input: BatchExecuteStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchExecuteStatementCommandInput, BatchExecuteStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/CancelStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelStatementRequest, CancelStatementResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface CancelStatementCommandInput extends CancelStatementRequest {
    }
    export interface CancelStatementCommandOutput extends CancelStatementResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels a running query. To be canceled, a query must be running. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, CancelStatementCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, CancelStatementCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new CancelStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelStatementCommandInput} for command's `input` shape.
        * @see {@link CancelStatementCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class CancelStatementCommand extends $Command<CancelStatementCommandInput, CancelStatementCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: CancelStatementCommandInput;
            constructor(input: CancelStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelStatementCommandInput, CancelStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/DescribeStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeStatementRequest, DescribeStatementResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface DescribeStatementCommandInput extends DescribeStatementRequest {
    }
    export interface DescribeStatementCommandOutput extends DescribeStatementResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the details about a specific instance when a query was run by the Amazon Redshift Data API. The information
        *       includes when the query started, when it finished, the query status, the number of rows returned, and the SQL
        *       statement. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, DescribeStatementCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, DescribeStatementCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new DescribeStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeStatementCommandInput} for command's `input` shape.
        * @see {@link DescribeStatementCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class DescribeStatementCommand extends $Command<DescribeStatementCommandInput, DescribeStatementCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: DescribeStatementCommandInput;
            constructor(input: DescribeStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeStatementCommandInput, DescribeStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/DescribeTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTableRequest, DescribeTableResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface DescribeTableCommandInput extends DescribeTableRequest {
    }
    export interface DescribeTableCommandOutput extends DescribeTableResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the detailed information about a table from metadata in the cluster. The
        *       information includes its columns.
        *       A token is returned to page through the column list.
        *       Depending on the authorization method, use one of the
        *       following combinations of request parameters: </p>
        *          <ul>
        *             <li>
        *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
        * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
        *             </li>
        *             <li>
        *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
        * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
        * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, DescribeTableCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, DescribeTableCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new DescribeTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTableCommandInput} for command's `input` shape.
        * @see {@link DescribeTableCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class DescribeTableCommand extends $Command<DescribeTableCommandInput, DescribeTableCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: DescribeTableCommandInput;
            constructor(input: DescribeTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTableCommandInput, DescribeTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ExecuteStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ExecuteStatementInput, ExecuteStatementOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface ExecuteStatementCommandInput extends ExecuteStatementInput {
    }
    export interface ExecuteStatementCommandOutput extends ExecuteStatementOutput, __MetadataBearer {
    }
    /**
        * <p>Runs an SQL statement, which can be data manipulation language (DML) or data definition
        *       language (DDL). This statement must be a single SQL statement.
        *       Depending on the authorization
        *       method, use one of the following combinations of request parameters: </p>
        *          <ul>
        *             <li>
        *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
        * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
        *             </li>
        *             <li>
        *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
        * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
        * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, ExecuteStatementCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, ExecuteStatementCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new ExecuteStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExecuteStatementCommandInput} for command's `input` shape.
        * @see {@link ExecuteStatementCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class ExecuteStatementCommand extends $Command<ExecuteStatementCommandInput, ExecuteStatementCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: ExecuteStatementCommandInput;
            constructor(input: ExecuteStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExecuteStatementCommandInput, ExecuteStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/GetStatementResultCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetStatementResultRequest, GetStatementResultResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface GetStatementResultCommandInput extends GetStatementResultRequest {
    }
    export interface GetStatementResultCommandOutput extends GetStatementResultResponse, __MetadataBearer {
    }
    /**
        * <p>Fetches the temporarily cached result of an SQL statement.
        *        A token is returned to page through the statement results. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, GetStatementResultCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, GetStatementResultCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new GetStatementResultCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStatementResultCommandInput} for command's `input` shape.
        * @see {@link GetStatementResultCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class GetStatementResultCommand extends $Command<GetStatementResultCommandInput, GetStatementResultCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: GetStatementResultCommandInput;
            constructor(input: GetStatementResultCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStatementResultCommandInput, GetStatementResultCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListDatabasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDatabasesRequest, ListDatabasesResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface ListDatabasesCommandInput extends ListDatabasesRequest {
    }
    export interface ListDatabasesCommandOutput extends ListDatabasesResponse, __MetadataBearer {
    }
    /**
        * <p>List the databases in a cluster.
        *       A token is returned to page through the database list.
        *       Depending on the authorization method, use one of the
        *       following combinations of request parameters: </p>
        *          <ul>
        *             <li>
        *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
        * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
        *             </li>
        *             <li>
        *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
        * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
        * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, ListDatabasesCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, ListDatabasesCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new ListDatabasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDatabasesCommandInput} for command's `input` shape.
        * @see {@link ListDatabasesCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class ListDatabasesCommand extends $Command<ListDatabasesCommandInput, ListDatabasesCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: ListDatabasesCommandInput;
            constructor(input: ListDatabasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDatabasesCommandInput, ListDatabasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListSchemasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSchemasRequest, ListSchemasResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface ListSchemasCommandInput extends ListSchemasRequest {
    }
    export interface ListSchemasCommandOutput extends ListSchemasResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the schemas in a database.
        *       A token is returned to page through the schema list.
        *       Depending on the authorization method, use one of the
        *       following combinations of request parameters: </p>
        *          <ul>
        *             <li>
        *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
        * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
        *             </li>
        *             <li>
        *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
        * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
        * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, ListSchemasCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, ListSchemasCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new ListSchemasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSchemasCommandInput} for command's `input` shape.
        * @see {@link ListSchemasCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class ListSchemasCommand extends $Command<ListSchemasCommandInput, ListSchemasCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: ListSchemasCommandInput;
            constructor(input: ListSchemasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSchemasCommandInput, ListSchemasCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListStatementsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStatementsRequest, ListStatementsResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface ListStatementsCommandInput extends ListStatementsRequest {
    }
    export interface ListStatementsCommandOutput extends ListStatementsResponse, __MetadataBearer {
    }
    /**
        * <p>List of SQL statements. By default, only finished statements are shown.
        *         A token is returned to page through the statement list. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, ListStatementsCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, ListStatementsCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new ListStatementsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStatementsCommandInput} for command's `input` shape.
        * @see {@link ListStatementsCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class ListStatementsCommand extends $Command<ListStatementsCommandInput, ListStatementsCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: ListStatementsCommandInput;
            constructor(input: ListStatementsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStatementsCommandInput, ListStatementsCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListTablesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTablesRequest, ListTablesResponse } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0";
    import { RedshiftDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient";
    export interface ListTablesCommandInput extends ListTablesRequest {
    }
    export interface ListTablesCommandOutput extends ListTablesResponse, __MetadataBearer {
    }
    /**
        * <p>List the tables in a database. If neither <code>SchemaPattern</code> nor <code>TablePattern</code> are specified, then
        *        all tables in the database are returned.
        *       A token is returned to page through the table list.
        *       Depending on the authorization method, use one of the
        *       following combinations of request parameters: </p>
        *          <ul>
        *             <li>
        *                <p>Secrets Manager - when connecting to a cluster, specify the Amazon Resource Name (ARN) of the secret, the database name, and the cluster identifier that matches the cluster in the secret.
        * When connecting to a serverless workgroup, specify the Amazon Resource Name (ARN) of the secret and the database name. </p>
        *             </li>
        *             <li>
        *                <p>Temporary credentials - when connecting to a cluster, specify the cluster identifier, the database name, and the database user name.
        * Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.
        * When connecting to a serverless workgroup, specify the workgroup name and database name. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RedshiftDataClient, ListTablesCommand } from "@aws-sdk/client-redshift-data"; // ES Modules import
        * // const { RedshiftDataClient, ListTablesCommand } = require("@aws-sdk/client-redshift-data"); // CommonJS import
        * const client = new RedshiftDataClient(config);
        * const command = new ListTablesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTablesCommandInput} for command's `input` shape.
        * @see {@link ListTablesCommandOutput} for command's `response` shape.
        * @see {@link RedshiftDataClientResolvedConfig | config} for RedshiftDataClient's `config` shape.
        *
        */
    export class ListTablesCommand extends $Command<ListTablesCommandInput, ListTablesCommandOutput, RedshiftDataClientResolvedConfig> {
            readonly input: ListTablesCommandInput;
            constructor(input: ListTablesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTablesCommandInput, ListTablesCommandOutput>;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/RedshiftDataClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchExecuteStatementCommandInput, BatchExecuteStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/BatchExecuteStatementCommand";
    import { CancelStatementCommandInput, CancelStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/CancelStatementCommand";
    import { DescribeStatementCommandInput, DescribeStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/DescribeStatementCommand";
    import { DescribeTableCommandInput, DescribeTableCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/DescribeTableCommand";
    import { ExecuteStatementCommandInput, ExecuteStatementCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ExecuteStatementCommand";
    import { GetStatementResultCommandInput, GetStatementResultCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/GetStatementResultCommand";
    import { ListDatabasesCommandInput, ListDatabasesCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListDatabasesCommand";
    import { ListSchemasCommandInput, ListSchemasCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListSchemasCommand";
    import { ListStatementsCommandInput, ListStatementsCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListStatementsCommand";
    import { ListTablesCommandInput, ListTablesCommandOutput } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/commands/ListTablesCommand";
    export type ServiceInputTypes = BatchExecuteStatementCommandInput | CancelStatementCommandInput | DescribeStatementCommandInput | DescribeTableCommandInput | ExecuteStatementCommandInput | GetStatementResultCommandInput | ListDatabasesCommandInput | ListSchemasCommandInput | ListStatementsCommandInput | ListTablesCommandInput;
    export type ServiceOutputTypes = BatchExecuteStatementCommandOutput | CancelStatementCommandOutput | DescribeStatementCommandOutput | DescribeTableCommandOutput | ExecuteStatementCommandOutput | GetStatementResultCommandOutput | ListDatabasesCommandOutput | ListSchemasCommandOutput | ListStatementsCommandOutput | ListTablesCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type RedshiftDataClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of RedshiftDataClient class constructor that set the region, credentials and other options.
        */
    export interface RedshiftDataClientConfig extends RedshiftDataClientConfigType {
    }
    type RedshiftDataClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of RedshiftDataClient class. This is resolved and normalized from the {@link RedshiftDataClientConfig | constructor configuration interface}.
        */
    export interface RedshiftDataClientResolvedConfig extends RedshiftDataClientResolvedConfigType {
    }
    /**
        * <p>You can use the Amazon Redshift Data API to run queries on Amazon Redshift tables. You
        *       can run SQL statements, which are committed if the statement succeeds. </p>
        *          <p>For more information about the Amazon Redshift Data API and CLI usage examples, see
        *        <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html">Using the Amazon Redshift Data API</a> in the
        *        <i>Amazon Redshift Cluster Management Guide</i>. </p>
        */
    export class RedshiftDataClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, RedshiftDataClientResolvedConfig> {
            /**
                * The resolved configuration of RedshiftDataClient class. This is resolved and normalized from the {@link RedshiftDataClientConfig | constructor configuration interface}.
                */
            readonly config: RedshiftDataClientResolvedConfig;
            constructor(configuration: RedshiftDataClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { RedshiftDataServiceException as __BaseException } from "@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/RedshiftDataServiceException";
    /**
        * <p>The number of active statements exceeds the limit.</p>
        */
    export class ActiveStatementsExceededException extends __BaseException {
            readonly name: "ActiveStatementsExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ActiveStatementsExceededException, __BaseException>);
    }
    /**
        * <p>An SQL statement encountered an environmental error while running.</p>
        */
    export class BatchExecuteStatementException extends __BaseException {
            readonly name: "BatchExecuteStatementException";
            readonly $fault: "server";
            Message: string | undefined;
            /**
                * <p>Statement identifier of the exception.</p>
                */
            StatementId: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BatchExecuteStatementException, __BaseException>);
    }
    export interface BatchExecuteStatementInput {
            /**
                * <p>One or more SQL statements to run. </p>
                */
            Sqls: string[] | undefined;
            /**
                * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
                */
            SecretArn?: string;
            /**
                * <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
                */
            Database: string | undefined;
            /**
                * <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statements run. </p>
                */
            WithEvent?: boolean;
            /**
                * <p>The name of the SQL statements. You can name the SQL statements when you create them to identify the query. </p>
                */
            StatementName?: string;
            /**
                * <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
                */
            WorkgroupName?: string;
    }
    export namespace BatchExecuteStatementInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchExecuteStatementInput) => any;
    }
    export interface BatchExecuteStatementOutput {
            /**
                * <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
                *       This identifier is returned by <code>BatchExecuteStatment</code>. </p>
                */
            Id?: string;
            /**
                * <p>The date and time (UTC) the statement was created. </p>
                */
            CreatedAt?: Date;
            /**
                * <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The database user name.</p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database.</p>
                */
            Database?: string;
            /**
                * <p>The name or ARN of the secret that enables access to the database. </p>
                */
            SecretArn?: string;
            /**
                * <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
                */
            WorkgroupName?: string;
    }
    export namespace BatchExecuteStatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchExecuteStatementOutput) => any;
    }
    /**
        * <p>The Amazon Redshift Data API operation failed due to invalid input. </p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>The exception message.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface CancelStatementRequest {
            /**
                * <p>The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
                *         This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
                */
            Id: string | undefined;
    }
    export namespace CancelStatementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelStatementRequest) => any;
    }
    export interface CancelStatementResponse {
            /**
                * <p>A value that indicates whether the cancel statement succeeded (true). </p>
                */
            Status?: boolean;
    }
    export namespace CancelStatementResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelStatementResponse) => any;
    }
    /**
        * <p>Connection to a database failed.</p>
        */
    export class DatabaseConnectionException extends __BaseException {
            readonly name: "DatabaseConnectionException";
            readonly $fault: "server";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DatabaseConnectionException, __BaseException>);
    }
    /**
        * <p>The Amazon Redshift Data API operation failed due to invalid input. </p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * <p>The exception message.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The Amazon Redshift Data API operation failed due to a missing resource. </p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The exception message.</p>
                */
            Message: string | undefined;
            /**
                * <p>Resource identifier associated with the exception.</p>
                */
            ResourceId: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The properties (metadata) of a column. </p>
        */
    export interface ColumnMetadata {
            /**
                * <p>A value that indicates whether the column is case-sensitive. </p>
                */
            isCaseSensitive?: boolean;
            /**
                * <p>A value that indicates whether the column contains currency values.</p>
                */
            isCurrency?: boolean;
            /**
                * <p>A value that indicates whether an integer column is signed.</p>
                */
            isSigned?: boolean;
            /**
                * <p>The label for the column. </p>
                */
            label?: string;
            /**
                * <p>The name of the column. </p>
                */
            name?: string;
            /**
                * <p>A value that indicates whether the column is nullable. </p>
                */
            nullable?: number;
            /**
                * <p>The precision value of a decimal number column. </p>
                */
            precision?: number;
            /**
                * <p>The scale value of a decimal number column. </p>
                */
            scale?: number;
            /**
                * <p>The name of the schema that contains the table that includes the column.</p>
                */
            schemaName?: string;
            /**
                * <p>The name of the table that includes the column. </p>
                */
            tableName?: string;
            /**
                * <p>The database-specific data type of the column. </p>
                */
            typeName?: string;
            /**
                * <p>The length of the column.</p>
                */
            length?: number;
            /**
                * <p>The default value of the column. </p>
                */
            columnDefault?: string;
    }
    export namespace ColumnMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnMetadata) => any;
    }
    export interface DescribeStatementRequest {
            /**
                * <p>The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
                *        A suffix indicates the number of the SQL statement.
                *        For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.
                *        This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatement</code>, and <code>ListStatements</code>. </p>
                */
            Id: string | undefined;
    }
    export namespace DescribeStatementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStatementRequest) => any;
    }
    /**
        * <p>A parameter used in a SQL statement.</p>
        */
    export interface SqlParameter {
            /**
                * <p>The name of the parameter.</p>
                */
            name: string | undefined;
            /**
                * <p>The value of the parameter.
                *     Amazon Redshift implicitly converts to the proper data type. For more inforation, see
                *       <a href="https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html">Data types</a> in the
                *       <i>Amazon Redshift Database Developer Guide</i>. </p>
                */
            value: string | undefined;
    }
    export namespace SqlParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SqlParameter) => any;
    }
    export enum StatusString {
            ABORTED = "ABORTED",
            ALL = "ALL",
            FAILED = "FAILED",
            FINISHED = "FINISHED",
            PICKED = "PICKED",
            STARTED = "STARTED",
            SUBMITTED = "SUBMITTED"
    }
    export enum StatementStatusString {
            ABORTED = "ABORTED",
            FAILED = "FAILED",
            FINISHED = "FINISHED",
            PICKED = "PICKED",
            STARTED = "STARTED",
            SUBMITTED = "SUBMITTED"
    }
    /**
        * <p>Information about an SQL statement.</p>
        */
    export interface SubStatementData {
            /**
                * <p>The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
                *       A suffix indicates the number of the SQL statement.
                *       For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.</p>
                */
            Id: string | undefined;
            /**
                * <p>The amount of time in nanoseconds that the statement ran.</p>
                */
            Duration?: number;
            /**
                * <p>The error message from the cluster if the SQL statement encountered an error while running.</p>
                */
            Error?: string;
            /**
                * <p>The status of the SQL statement. An
                *       example is the that the SQL statement finished.
                *       </p>
                */
            Status?: StatementStatusString | string;
            /**
                * <p>The date and time (UTC) the statement was created. </p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date and time (UTC) that the statement metadata was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The SQL statement text.</p>
                */
            QueryString?: string;
            /**
                * <p>Either the number of rows returned from the SQL statement or the number of rows affected.
                *       If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others.
                *       A <code>-1</code> indicates the value is null.</p>
                */
            ResultRows?: number;
            /**
                * <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
                */
            ResultSize?: number;
            /**
                * <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
                */
            RedshiftQueryId?: number;
            /**
                * <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.</p>
                */
            HasResultSet?: boolean;
    }
    export namespace SubStatementData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubStatementData) => any;
    }
    export interface DescribeStatementResponse {
            /**
                * <p>The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
                */
            Id: string | undefined;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
                */
            SecretArn?: string;
            /**
                * <p>The database user name. </p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database. </p>
                */
            Database?: string;
            /**
                * <p>The cluster identifier. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The amount of time in nanoseconds that the statement ran. </p>
                */
            Duration?: number;
            /**
                * <p>The error message from the cluster if the SQL statement encountered an error while running. </p>
                */
            Error?: string;
            /**
                * <p>The status of the SQL statement being described. Status values are defined as follows: </p>
                *          <ul>
                *             <li>
                *                <p>ABORTED - The query run was stopped by the user. </p>
                *             </li>
                *             <li>
                *                <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
                *             </li>
                *             <li>
                *                <p>FAILED - The query run failed. </p>
                *             </li>
                *             <li>
                *                <p>FINISHED - The query has finished running. </p>
                *             </li>
                *             <li>
                *                <p>PICKED - The query has been chosen to be run. </p>
                *             </li>
                *             <li>
                *                <p>STARTED - The query run has started. </p>
                *             </li>
                *             <li>
                *                <p>SUBMITTED - The query was submitted, but not yet processed. </p>
                *             </li>
                *          </ul>
                */
            Status?: StatusString | string;
            /**
                * <p>The date and time (UTC) when the SQL statement was submitted to run. </p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date and time (UTC) that the metadata for the SQL statement was last updated. An
                *       example is the time the status last changed. </p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The process identifier from Amazon Redshift. </p>
                */
            RedshiftPid?: number;
            /**
                * <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.
                *       The value is true if any substatement returns a result set.</p>
                */
            HasResultSet?: boolean;
            /**
                * <p>The SQL statement text. </p>
                */
            QueryString?: string;
            /**
                * <p>Either the number of rows returned from the SQL statement or the number of rows affected.
                *         If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others.
                *         A <code>-1</code> indicates the value is null.</p>
                */
            ResultRows?: number;
            /**
                * <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
                */
            ResultSize?: number;
            /**
                * <p>The identifier of the query generated by Amazon Redshift.
                *       These identifiers are also available in the <code>query</code> column of the <code>STL_QUERY</code> system view. </p>
                */
            RedshiftQueryId?: number;
            /**
                * <p>The parameters for the SQL statement.</p>
                */
            QueryParameters?: SqlParameter[];
            /**
                * <p>The SQL statements from a multiple statement run.</p>
                */
            SubStatements?: SubStatementData[];
            /**
                * <p>The serverless workgroup name.</p>
                */
            WorkgroupName?: string;
    }
    export namespace DescribeStatementResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStatementResponse) => any;
    }
    export interface DescribeTableRequest {
            /**
                * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
                */
            SecretArn?: string;
            /**
                * <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database that contains the tables to be described.
                *       If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
                */
            Database: string | undefined;
            /**
                * <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
                */
            ConnectedDatabase?: string;
            /**
                * <p>The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. </p>
                */
            Schema?: string;
            /**
                * <p>The table name. If no table is specified, then all tables for all matching schemas are returned.
                *        If no table and no schema is specified, then all tables for all schemas in the database are returned</p>
                */
            Table?: string;
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of tables to return in the response.
                *       If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
                */
            MaxResults?: number;
            /**
                * <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
                */
            WorkgroupName?: string;
    }
    export namespace DescribeTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTableRequest) => any;
    }
    export interface DescribeTableResponse {
            /**
                * <p>The table name. </p>
                */
            TableName?: string;
            /**
                * <p>A list of columns in the table. </p>
                */
            ColumnList?: ColumnMetadata[];
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTableResponse) => any;
    }
    /**
        * <p>The SQL statement encountered an environmental error while running.</p>
        */
    export class ExecuteStatementException extends __BaseException {
            readonly name: "ExecuteStatementException";
            readonly $fault: "server";
            /**
                * <p>The exception message.</p>
                */
            Message: string | undefined;
            /**
                * <p>Statement identifier of the exception.</p>
                */
            StatementId: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExecuteStatementException, __BaseException>);
    }
    export interface ExecuteStatementInput {
            /**
                * <p>The SQL statement text to run. </p>
                */
            Sql: string | undefined;
            /**
                * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
                */
            SecretArn?: string;
            /**
                * <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
                */
            Database: string | undefined;
            /**
                * <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. </p>
                */
            WithEvent?: boolean;
            /**
                * <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query. </p>
                */
            StatementName?: string;
            /**
                * <p>The parameters for the SQL statement.</p>
                */
            Parameters?: SqlParameter[];
            /**
                * <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
                */
            WorkgroupName?: string;
    }
    export namespace ExecuteStatementInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteStatementInput) => any;
    }
    export interface ExecuteStatementOutput {
            /**
                * <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
                */
            Id?: string;
            /**
                * <p>The date and time (UTC) the statement was created. </p>
                */
            CreatedAt?: Date;
            /**
                * <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The database user name.</p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database.</p>
                */
            Database?: string;
            /**
                * <p>The name or ARN of the secret that enables access to the database. </p>
                */
            SecretArn?: string;
            /**
                * <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
                */
            WorkgroupName?: string;
    }
    export namespace ExecuteStatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteStatementOutput) => any;
    }
    /**
        * <p>A data value in a column. </p>
        */
    export type Field = Field.BlobValueMember | Field.BooleanValueMember | Field.DoubleValueMember | Field.IsNullMember | Field.LongValueMember | Field.StringValueMember | Field.$UnknownMember;
    export namespace Field {
            /**
                * <p>A value that indicates whether the data is NULL. </p>
                */
            interface IsNullMember {
                    isNull: boolean;
                    booleanValue?: never;
                    longValue?: never;
                    doubleValue?: never;
                    stringValue?: never;
                    blobValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A value of the Boolean data type. </p>
                */
            interface BooleanValueMember {
                    isNull?: never;
                    booleanValue: boolean;
                    longValue?: never;
                    doubleValue?: never;
                    stringValue?: never;
                    blobValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A value of the long data type. </p>
                */
            interface LongValueMember {
                    isNull?: never;
                    booleanValue?: never;
                    longValue: number;
                    doubleValue?: never;
                    stringValue?: never;
                    blobValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A value of the double data type. </p>
                */
            interface DoubleValueMember {
                    isNull?: never;
                    booleanValue?: never;
                    longValue?: never;
                    doubleValue: number;
                    stringValue?: never;
                    blobValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A value of the string data type. </p>
                */
            interface StringValueMember {
                    isNull?: never;
                    booleanValue?: never;
                    longValue?: never;
                    doubleValue?: never;
                    stringValue: string;
                    blobValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A value of the BLOB data type. </p>
                */
            interface BlobValueMember {
                    isNull?: never;
                    booleanValue?: never;
                    longValue?: never;
                    doubleValue?: never;
                    stringValue?: never;
                    blobValue: Uint8Array;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    isNull?: never;
                    booleanValue?: never;
                    longValue?: never;
                    doubleValue?: never;
                    stringValue?: never;
                    blobValue?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    isNull: (value: boolean) => T;
                    booleanValue: (value: boolean) => T;
                    longValue: (value: number) => T;
                    doubleValue: (value: number) => T;
                    stringValue: (value: string) => T;
                    blobValue: (value: Uint8Array) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: Field, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Field) => any;
    }
    export interface GetStatementResultRequest {
            /**
                * <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
                *        A suffix indicates then number of the SQL statement.
                *        For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.
                *        This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
                */
            Id: string | undefined;
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
    }
    export namespace GetStatementResultRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStatementResultRequest) => any;
    }
    export interface GetStatementResultResponse {
            /**
                * <p>The results of the SQL statement.</p>
                */
            Records: Field[][] | undefined;
            /**
                * <p>The properties (metadata) of a column. </p>
                */
            ColumnMetadata?: ColumnMetadata[];
            /**
                * <p>The total number of rows in the result set returned from a query.
                *        You can use this number to estimate the number of calls to the <code>GetStatementResult</code> operation needed to page through the results. </p>
                */
            TotalNumRows?: number;
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
    }
    export namespace GetStatementResultResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStatementResultResponse) => any;
    }
    export interface ListDatabasesRequest {
            /**
                * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
                */
            Database: string | undefined;
            /**
                * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
                */
            SecretArn?: string;
            /**
                * <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
                */
            DbUser?: string;
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of databases to return in the response.
                *        If more databases exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
                */
            MaxResults?: number;
            /**
                * <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
                */
            WorkgroupName?: string;
    }
    export namespace ListDatabasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatabasesRequest) => any;
    }
    export interface ListDatabasesResponse {
            /**
                * <p>The names of databases. </p>
                */
            Databases?: string[];
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
    }
    export namespace ListDatabasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatabasesResponse) => any;
    }
    export interface ListSchemasRequest {
            /**
                * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
                */
            SecretArn?: string;
            /**
                * <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database that contains the schemas to list.
                *      If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
                */
            Database: string | undefined;
            /**
                * <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
                */
            ConnectedDatabase?: string;
            /**
                * <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
                *       substring of 0 or more characters and "_" means match any one character. Only schema name
                *       entries matching the search pattern are returned. </p>
                */
            SchemaPattern?: string;
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of schemas to return in the response.
                *        If more schemas exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
                */
            MaxResults?: number;
            /**
                * <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
                */
            WorkgroupName?: string;
    }
    export namespace ListSchemasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemasRequest) => any;
    }
    export interface ListSchemasResponse {
            /**
                * <p>The schemas that match the request pattern. </p>
                */
            Schemas?: string[];
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
    }
    export namespace ListSchemasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemasResponse) => any;
    }
    export interface ListStatementsRequest {
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of SQL statements to return in the response.
                *        If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
                */
            MaxResults?: number;
            /**
                * <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query.
                *       You can list multiple statements by providing a prefix that matches the beginning of the statement name.
                *       For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>.
                *       Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>
                */
            StatementName?: string;
            /**
                * <p>The status of the SQL statement to list. Status values are defined as follows: </p>
                *          <ul>
                *             <li>
                *                <p>ABORTED - The query run was stopped by the user. </p>
                *             </li>
                *             <li>
                *                <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
                *             </li>
                *             <li>
                *                <p>FAILED - The query run failed. </p>
                *             </li>
                *             <li>
                *                <p>FINISHED - The query has finished running. </p>
                *             </li>
                *             <li>
                *                <p>PICKED - The query has been chosen to be run. </p>
                *             </li>
                *             <li>
                *                <p>STARTED - The query run has started. </p>
                *             </li>
                *             <li>
                *                <p>SUBMITTED - The query was submitted, but not yet processed. </p>
                *             </li>
                *          </ul>
                */
            Status?: StatusString | string;
            /**
                * <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned.
                *       If false, only statements run by the caller's IAM role in the current IAM session are returned.  The default is true. </p>
                */
            RoleLevel?: boolean;
    }
    export namespace ListStatementsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStatementsRequest) => any;
    }
    /**
        * <p>The SQL statement to run.</p>
        */
    export interface StatementData {
            /**
                * <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
                */
            Id: string | undefined;
            /**
                * <p>The SQL statement.</p>
                */
            QueryString?: string;
            /**
                * <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
                */
            QueryStrings?: string[];
            /**
                * <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
                */
            SecretArn?: string;
            /**
                * <p>The status of the SQL statement. An
                *        example is the that the SQL statement finished.
                *       </p>
                */
            Status?: StatusString | string;
            /**
                * <p>The name of the SQL statement. </p>
                */
            StatementName?: string;
            /**
                * <p>The date and time (UTC) the statement was created. </p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date and time (UTC) that the statement metadata was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The parameters used in a SQL statement.</p>
                */
            QueryParameters?: SqlParameter[];
            /**
                * <p>A value that indicates whether the statement is a batch query request.</p>
                */
            IsBatchStatement?: boolean;
    }
    export namespace StatementData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatementData) => any;
    }
    export interface ListStatementsResponse {
            /**
                * <p>The SQL statements. </p>
                */
            Statements: StatementData[] | undefined;
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
    }
    export namespace ListStatementsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStatementsResponse) => any;
    }
    export interface ListTablesRequest {
            /**
                * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
                */
            SecretArn?: string;
            /**
                * <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
                */
            DbUser?: string;
            /**
                * <p>The name of the database that contains the tables to list.
                *       If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
                */
            Database: string | undefined;
            /**
                * <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
                */
            ConnectedDatabase?: string;
            /**
                * <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
                *       substring of 0 or more characters and "_" means match any one character. Only schema name
                *       entries matching the search pattern are returned. If <code>SchemaPattern</code> is not specified, then all tables that match
                *        <code>TablePattern</code> are returned.
                *        If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
                */
            SchemaPattern?: string;
            /**
                * <p>A pattern to filter results by table name. Within a table pattern, "%" means match any
                *       substring of 0 or more characters and "_" means match any one character. Only table name
                *       entries matching the search pattern are returned. If <code>TablePattern</code> is not specified, then all tables that match
                *        <code>SchemaPattern</code>are returned.
                *        If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
                */
            TablePattern?: string;
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of tables to return in the response.
                *        If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
                */
            MaxResults?: number;
            /**
                * <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
                */
            WorkgroupName?: string;
    }
    export namespace ListTablesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTablesRequest) => any;
    }
    /**
        * <p>The properties of a table. </p>
        */
    export interface TableMember {
            /**
                * <p>The name of the table. </p>
                */
            name?: string;
            /**
                * <p>The type of the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL
                *       TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. </p>
                */
            type?: string;
            /**
                * <p>The schema containing the table. </p>
                */
            schema?: string;
    }
    export namespace TableMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableMember) => any;
    }
    export interface ListTablesResponse {
            /**
                * <p>The tables that match the request pattern. </p>
                */
            Tables?: TableMember[];
            /**
                * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
                */
            NextToken?: string;
    }
    export namespace ListTablesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTablesResponse) => any;
    }
}

declare module '@aws-sdk/client-redshift-data/node_modules/@aws-sdk/client-redshift-data/dist-types/models/RedshiftDataServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from RedshiftData service.
        */
    export class RedshiftDataServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

