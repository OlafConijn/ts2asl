// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-quicksight' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CancelIngestionCommandInput, CancelIngestionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CancelIngestionCommand";
    import { CreateAccountCustomizationCommandInput, CreateAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAccountCustomizationCommand";
    import { CreateAccountSubscriptionCommandInput, CreateAccountSubscriptionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAccountSubscriptionCommand";
    import { CreateAnalysisCommandInput, CreateAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAnalysisCommand";
    import { CreateDashboardCommandInput, CreateDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDashboardCommand";
    import { CreateDataSetCommandInput, CreateDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDataSetCommand";
    import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDataSourceCommand";
    import { CreateFolderCommandInput, CreateFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateFolderCommand";
    import { CreateFolderMembershipCommandInput, CreateFolderMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateFolderMembershipCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateGroupCommand";
    import { CreateGroupMembershipCommandInput, CreateGroupMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateGroupMembershipCommand";
    import { CreateIAMPolicyAssignmentCommandInput, CreateIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateIAMPolicyAssignmentCommand";
    import { CreateIngestionCommandInput, CreateIngestionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateIngestionCommand";
    import { CreateNamespaceCommandInput, CreateNamespaceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateNamespaceCommand";
    import { CreateTemplateAliasCommandInput, CreateTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateTemplateAliasCommand";
    import { CreateTemplateCommandInput, CreateTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateTemplateCommand";
    import { CreateThemeAliasCommandInput, CreateThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateThemeAliasCommand";
    import { CreateThemeCommandInput, CreateThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateThemeCommand";
    import { DeleteAccountCustomizationCommandInput, DeleteAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteAccountCustomizationCommand";
    import { DeleteAnalysisCommandInput, DeleteAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteAnalysisCommand";
    import { DeleteDashboardCommandInput, DeleteDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDashboardCommand";
    import { DeleteDataSetCommandInput, DeleteDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDataSetCommand";
    import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDataSourceCommand";
    import { DeleteFolderCommandInput, DeleteFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteFolderCommand";
    import { DeleteFolderMembershipCommandInput, DeleteFolderMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteFolderMembershipCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteGroupCommand";
    import { DeleteGroupMembershipCommandInput, DeleteGroupMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteGroupMembershipCommand";
    import { DeleteIAMPolicyAssignmentCommandInput, DeleteIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteIAMPolicyAssignmentCommand";
    import { DeleteNamespaceCommandInput, DeleteNamespaceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteNamespaceCommand";
    import { DeleteTemplateAliasCommandInput, DeleteTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteTemplateAliasCommand";
    import { DeleteTemplateCommandInput, DeleteTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteTemplateCommand";
    import { DeleteThemeAliasCommandInput, DeleteThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteThemeAliasCommand";
    import { DeleteThemeCommandInput, DeleteThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteThemeCommand";
    import { DeleteUserByPrincipalIdCommandInput, DeleteUserByPrincipalIdCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteUserByPrincipalIdCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteUserCommand";
    import { DescribeAccountCustomizationCommandInput, DescribeAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountCustomizationCommand";
    import { DescribeAccountSettingsCommandInput, DescribeAccountSettingsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountSettingsCommand";
    import { DescribeAccountSubscriptionCommandInput, DescribeAccountSubscriptionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountSubscriptionCommand";
    import { DescribeAnalysisCommandInput, DescribeAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAnalysisCommand";
    import { DescribeAnalysisPermissionsCommandInput, DescribeAnalysisPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAnalysisPermissionsCommand";
    import { DescribeDashboardCommandInput, DescribeDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDashboardCommand";
    import { DescribeDashboardPermissionsCommandInput, DescribeDashboardPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDashboardPermissionsCommand";
    import { DescribeDataSetCommandInput, DescribeDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSetCommand";
    import { DescribeDataSetPermissionsCommandInput, DescribeDataSetPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSetPermissionsCommand";
    import { DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSourceCommand";
    import { DescribeDataSourcePermissionsCommandInput, DescribeDataSourcePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSourcePermissionsCommand";
    import { DescribeFolderCommandInput, DescribeFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderCommand";
    import { DescribeFolderPermissionsCommandInput, DescribeFolderPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderPermissionsCommand";
    import { DescribeFolderResolvedPermissionsCommandInput, DescribeFolderResolvedPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderResolvedPermissionsCommand";
    import { DescribeGroupCommandInput, DescribeGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeGroupCommand";
    import { DescribeGroupMembershipCommandInput, DescribeGroupMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeGroupMembershipCommand";
    import { DescribeIAMPolicyAssignmentCommandInput, DescribeIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIAMPolicyAssignmentCommand";
    import { DescribeIngestionCommandInput, DescribeIngestionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIngestionCommand";
    import { DescribeIpRestrictionCommandInput, DescribeIpRestrictionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIpRestrictionCommand";
    import { DescribeNamespaceCommandInput, DescribeNamespaceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeNamespaceCommand";
    import { DescribeTemplateAliasCommandInput, DescribeTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplateAliasCommand";
    import { DescribeTemplateCommandInput, DescribeTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplateCommand";
    import { DescribeTemplatePermissionsCommandInput, DescribeTemplatePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplatePermissionsCommand";
    import { DescribeThemeAliasCommandInput, DescribeThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemeAliasCommand";
    import { DescribeThemeCommandInput, DescribeThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemeCommand";
    import { DescribeThemePermissionsCommandInput, DescribeThemePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemePermissionsCommand";
    import { DescribeUserCommandInput, DescribeUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeUserCommand";
    import { GenerateEmbedUrlForAnonymousUserCommandInput, GenerateEmbedUrlForAnonymousUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GenerateEmbedUrlForAnonymousUserCommand";
    import { GenerateEmbedUrlForRegisteredUserCommandInput, GenerateEmbedUrlForRegisteredUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GenerateEmbedUrlForRegisteredUserCommand";
    import { GetDashboardEmbedUrlCommandInput, GetDashboardEmbedUrlCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GetDashboardEmbedUrlCommand";
    import { GetSessionEmbedUrlCommandInput, GetSessionEmbedUrlCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GetSessionEmbedUrlCommand";
    import { ListAnalysesCommandInput, ListAnalysesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListAnalysesCommand";
    import { ListDashboardsCommandInput, ListDashboardsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDashboardsCommand";
    import { ListDashboardVersionsCommandInput, ListDashboardVersionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDashboardVersionsCommand";
    import { ListDataSetsCommandInput, ListDataSetsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDataSetsCommand";
    import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDataSourcesCommand";
    import { ListFolderMembersCommandInput, ListFolderMembersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListFolderMembersCommand";
    import { ListFoldersCommandInput, ListFoldersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListFoldersCommand";
    import { ListGroupMembershipsCommandInput, ListGroupMembershipsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListGroupMembershipsCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListGroupsCommand";
    import { ListIAMPolicyAssignmentsCommandInput, ListIAMPolicyAssignmentsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIAMPolicyAssignmentsCommand";
    import { ListIAMPolicyAssignmentsForUserCommandInput, ListIAMPolicyAssignmentsForUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIAMPolicyAssignmentsForUserCommand";
    import { ListIngestionsCommandInput, ListIngestionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIngestionsCommand";
    import { ListNamespacesCommandInput, ListNamespacesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListNamespacesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTagsForResourceCommand";
    import { ListTemplateAliasesCommandInput, ListTemplateAliasesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplateAliasesCommand";
    import { ListTemplatesCommandInput, ListTemplatesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplatesCommand";
    import { ListTemplateVersionsCommandInput, ListTemplateVersionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplateVersionsCommand";
    import { ListThemeAliasesCommandInput, ListThemeAliasesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemeAliasesCommand";
    import { ListThemesCommandInput, ListThemesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemesCommand";
    import { ListThemeVersionsCommandInput, ListThemeVersionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemeVersionsCommand";
    import { ListUserGroupsCommandInput, ListUserGroupsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListUserGroupsCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListUsersCommand";
    import { RegisterUserCommandInput, RegisterUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/RegisterUserCommand";
    import { RestoreAnalysisCommandInput, RestoreAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/RestoreAnalysisCommand";
    import { SearchAnalysesCommandInput, SearchAnalysesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchAnalysesCommand";
    import { SearchDashboardsCommandInput, SearchDashboardsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchDashboardsCommand";
    import { SearchFoldersCommandInput, SearchFoldersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchFoldersCommand";
    import { SearchGroupsCommandInput, SearchGroupsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchGroupsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UntagResourceCommand";
    import { UpdateAccountCustomizationCommandInput, UpdateAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAccountCustomizationCommand";
    import { UpdateAccountSettingsCommandInput, UpdateAccountSettingsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAccountSettingsCommand";
    import { UpdateAnalysisCommandInput, UpdateAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAnalysisCommand";
    import { UpdateAnalysisPermissionsCommandInput, UpdateAnalysisPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAnalysisPermissionsCommand";
    import { UpdateDashboardCommandInput, UpdateDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardCommand";
    import { UpdateDashboardPermissionsCommandInput, UpdateDashboardPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardPermissionsCommand";
    import { UpdateDashboardPublishedVersionCommandInput, UpdateDashboardPublishedVersionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardPublishedVersionCommand";
    import { UpdateDataSetCommandInput, UpdateDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSetCommand";
    import { UpdateDataSetPermissionsCommandInput, UpdateDataSetPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSetPermissionsCommand";
    import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSourceCommand";
    import { UpdateDataSourcePermissionsCommandInput, UpdateDataSourcePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSourcePermissionsCommand";
    import { UpdateFolderCommandInput, UpdateFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateFolderCommand";
    import { UpdateFolderPermissionsCommandInput, UpdateFolderPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateFolderPermissionsCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateGroupCommand";
    import { UpdateIAMPolicyAssignmentCommandInput, UpdateIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateIAMPolicyAssignmentCommand";
    import { UpdateIpRestrictionCommandInput, UpdateIpRestrictionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateIpRestrictionCommand";
    import { UpdatePublicSharingSettingsCommandInput, UpdatePublicSharingSettingsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdatePublicSharingSettingsCommand";
    import { UpdateTemplateAliasCommandInput, UpdateTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplateAliasCommand";
    import { UpdateTemplateCommandInput, UpdateTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplateCommand";
    import { UpdateTemplatePermissionsCommandInput, UpdateTemplatePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplatePermissionsCommand";
    import { UpdateThemeAliasCommandInput, UpdateThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemeAliasCommand";
    import { UpdateThemeCommandInput, UpdateThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemeCommand";
    import { UpdateThemePermissionsCommandInput, UpdateThemePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemePermissionsCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateUserCommand";
    import { QuickSightClient } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    /**
        * <fullname>Amazon QuickSight API Reference</fullname>
        *         <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the
        *             Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your
        *             organization. This API reference contains documentation for a programming interface that
        *             you can use to manage Amazon QuickSight. </p>
        */
    export class QuickSight extends QuickSightClient {
            /**
                * <p>Cancels an ongoing ingestion of data into SPICE.</p>
                */
            cancelIngestion(args: CancelIngestionCommandInput, options?: __HttpHandlerOptions): Promise<CancelIngestionCommandOutput>;
            cancelIngestion(args: CancelIngestionCommandInput, cb: (err: any, data?: CancelIngestionCommandOutput) => void): void;
            cancelIngestion(args: CancelIngestionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelIngestionCommandOutput) => void): void;
            /**
                * <p>Creates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, you can add a custom default theme by using the
                *                 <code>CreateAccountCustomization</code> or <code>UpdateAccountCustomization</code>
                *             API operation. To further customize Amazon QuickSight by removing Amazon QuickSight
                *             sample assets and videos for all new users, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html">Customizing Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i>
                *          </p>
                *         <p>You can create customizations for your Amazon Web Services account or, if you specify a namespace, for
                *             a QuickSight namespace instead. Customizations that apply to a namespace always override
                *             customizations that apply to an Amazon Web Services account. To find out which customizations apply, use
                *             the <code>DescribeAccountCustomization</code> API operation.</p>
                *         <p>Before you use the <code>CreateAccountCustomization</code> API operation to add a theme
                *             as the namespace default, make sure that you first share the theme with the namespace.
                *             If you don't share it with the namespace, the theme isn't visible to your users
                *             even if you make it the default theme.
                *             To check if the theme is shared, view the current permissions by using the
                *             <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeThemePermissions.html">DescribeThemePermissions</a>
                *             </code>
                *             API operation.
                *             To share the theme, grant permissions by using the
                *             <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateThemePermissions.html">UpdateThemePermissions</a>
                *             </code>
                *             API operation. </p>
                */
            createAccountCustomization(args: CreateAccountCustomizationCommandInput, options?: __HttpHandlerOptions): Promise<CreateAccountCustomizationCommandOutput>;
            createAccountCustomization(args: CreateAccountCustomizationCommandInput, cb: (err: any, data?: CreateAccountCustomizationCommandOutput) => void): void;
            createAccountCustomization(args: CreateAccountCustomizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAccountCustomizationCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon QuickSight account, or subscribes to Amazon QuickSight Q.</p>
                *
                *          <p>The Amazon Web Services Region for the account is derived from what is configured in the
                *           CLI or SDK. This operation isn't supported in the US East (Ohio) Region, South America (Sao Paulo) Region, or Asia
                *             Pacific (Singapore) Region.  </p>
                *
                *          <p>Before you use this operation, make sure that you can connect to an existing Amazon Web Services account. If you don't have an Amazon Web Services account, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/setting-up-aws-sign-up.html">Sign
                *                 up for Amazon Web Services</a> in the <i>Amazon QuickSight User
                *                 Guide</i>. The person who signs up for Amazon QuickSight needs to have the
                *             correct Identity and Access Management (IAM) permissions. For more information,
                *             see <a href="https://docs.aws.amazon.com/quicksight/latest/user/iam-policy-examples.html">IAM Policy Examples for Amazon QuickSight</a> in the
                *                     <i>Amazon QuickSight User Guide</i>.</p>
                *
                *          <p>If your IAM policy includes both the <code>Subscribe</code> and
                *                 <code>CreateAccountSubscription</code> actions, make sure that both actions are set
                *             to <code>Allow</code>. If either action is set to <code>Deny</code>, the
                *                 <code>Deny</code> action prevails and your API call fails.</p>
                *
                *          <p>You can't pass an existing IAM role to access other Amazon Web Services services using this API operation. To pass your existing IAM role to
                *                 Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html#security-create-iam-role">Passing IAM roles to Amazon QuickSight</a> in the
                *                     <i>Amazon QuickSight User Guide</i>.</p>
                *
                *          <p>You can't set default resource access on the new account from the Amazon QuickSight
                *             API. Instead, add default resource access from the Amazon QuickSight console. For more
                *             information about setting default resource access to Amazon Web Services services, see
                *                 <a href="https://docs.aws.amazon.com/quicksight/latest/user/scoping-policies-defaults.html">Setting default resource
                *                 access to Amazon Web Services services</a> in the <i>Amazon QuickSight
                *                 User Guide</i>.</p>
                */
            createAccountSubscription(args: CreateAccountSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<CreateAccountSubscriptionCommandOutput>;
            createAccountSubscription(args: CreateAccountSubscriptionCommandInput, cb: (err: any, data?: CreateAccountSubscriptionCommandOutput) => void): void;
            createAccountSubscription(args: CreateAccountSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAccountSubscriptionCommandOutput) => void): void;
            /**
                * <p>Creates an analysis in Amazon QuickSight.</p>
                */
            createAnalysis(args: CreateAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<CreateAnalysisCommandOutput>;
            createAnalysis(args: CreateAnalysisCommandInput, cb: (err: any, data?: CreateAnalysisCommandOutput) => void): void;
            createAnalysis(args: CreateAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAnalysisCommandOutput) => void): void;
            /**
                * <p>Creates a dashboard from a template. To first create a template, see the
                *         <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>
                *             </code>
                *             API operation.</p>
                *         <p>A dashboard is an entity in Amazon QuickSight that identifies Amazon QuickSight reports, created
                *             from analyses. You can share Amazon QuickSight dashboards. With the right permissions, you can
                *             create scheduled email reports from them. If you have the correct permissions, you can
                *             create a dashboard from a template that exists in a different Amazon Web Services account.</p>
                */
            createDashboard(args: CreateDashboardCommandInput, options?: __HttpHandlerOptions): Promise<CreateDashboardCommandOutput>;
            createDashboard(args: CreateDashboardCommandInput, cb: (err: any, data?: CreateDashboardCommandOutput) => void): void;
            createDashboard(args: CreateDashboardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDashboardCommandOutput) => void): void;
            /**
                * <p>Creates a dataset. This operation doesn't support datasets that include uploaded files as a source.</p>
                */
            createDataSet(args: CreateDataSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataSetCommandOutput>;
            createDataSet(args: CreateDataSetCommandInput, cb: (err: any, data?: CreateDataSetCommandOutput) => void): void;
            createDataSet(args: CreateDataSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataSetCommandOutput) => void): void;
            /**
                * <p>Creates a data source.</p>
                */
            createDataSource(args: CreateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataSourceCommandOutput>;
            createDataSource(args: CreateDataSourceCommandInput, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
            createDataSource(args: CreateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
            /**
                * <p>Creates an empty shared folder.</p>
                */
            createFolder(args: CreateFolderCommandInput, options?: __HttpHandlerOptions): Promise<CreateFolderCommandOutput>;
            createFolder(args: CreateFolderCommandInput, cb: (err: any, data?: CreateFolderCommandOutput) => void): void;
            createFolder(args: CreateFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFolderCommandOutput) => void): void;
            /**
                * <p>Adds an asset, such as a dashboard, analysis, or dataset into a folder.</p>
                */
            createFolderMembership(args: CreateFolderMembershipCommandInput, options?: __HttpHandlerOptions): Promise<CreateFolderMembershipCommandOutput>;
            createFolderMembership(args: CreateFolderMembershipCommandInput, cb: (err: any, data?: CreateFolderMembershipCommandOutput) => void): void;
            createFolderMembership(args: CreateFolderMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFolderMembershipCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon QuickSight group.</p>
                * 		       <p>The permissions resource is
                * 					<code>arn:aws:quicksight:<your-region>:<i><relevant-aws-account-id></i>:group/default/<i><group-name></i>
                *             </code>.</p>
                * 		       <p>The response is a group object.</p>
                */
            createGroup(args: CreateGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupCommandOutput>;
            createGroup(args: CreateGroupCommandInput, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            createGroup(args: CreateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            /**
                * <p>Adds an Amazon QuickSight user to an Amazon QuickSight group. </p>
                */
            createGroupMembership(args: CreateGroupMembershipCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupMembershipCommandOutput>;
            createGroupMembership(args: CreateGroupMembershipCommandInput, cb: (err: any, data?: CreateGroupMembershipCommandOutput) => void): void;
            createGroupMembership(args: CreateGroupMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupMembershipCommandOutput) => void): void;
            /**
                * <p>Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name
                * 			(ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight.
                * 			Assignment names are unique per Amazon Web Services account. To avoid overwriting rules in other namespaces,
                * 			use assignment names that are unique.</p>
                */
            createIAMPolicyAssignment(args: CreateIAMPolicyAssignmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateIAMPolicyAssignmentCommandOutput>;
            createIAMPolicyAssignment(args: CreateIAMPolicyAssignmentCommandInput, cb: (err: any, data?: CreateIAMPolicyAssignmentCommandOutput) => void): void;
            createIAMPolicyAssignment(args: CreateIAMPolicyAssignmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIAMPolicyAssignmentCommandOutput) => void): void;
            /**
                * <p>Creates and starts a new SPICE ingestion for a dataset. You can manually refresh datasets in
                * 			an Enterprise edition account 32 times in a 24-hour period. You can manually refresh
                * 			datasets in a Standard edition account 8 times in a 24-hour period. Each 24-hour period
                * 			is measured starting 24 hours before the current date and time.</p>
                *
                * 		       <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in
                * 			access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using
                * 				tags?</a> in the Amazon Web Services Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>
                */
            createIngestion(args: CreateIngestionCommandInput, options?: __HttpHandlerOptions): Promise<CreateIngestionCommandOutput>;
            createIngestion(args: CreateIngestionCommandInput, cb: (err: any, data?: CreateIngestionCommandOutput) => void): void;
            createIngestion(args: CreateIngestionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIngestionCommandOutput) => void): void;
            /**
                * <p>(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.</p>
                *         <p>A namespace allows you to isolate the Amazon QuickSight users and groups that are registered
                *             for that namespace. Users that access the namespace can share assets only with other
                *             users or groups in the same namespace. They can't see users and groups in other
                *             namespaces. You can create a namespace after your Amazon Web Services account is subscribed to
                *             Amazon QuickSight. The namespace must be unique within the Amazon Web Services account. By default, there is a
                *             limit of 100 namespaces per Amazon Web Services account. To increase your limit, create a ticket with
                *             Amazon Web Services Support. </p>
                */
            createNamespace(args: CreateNamespaceCommandInput, options?: __HttpHandlerOptions): Promise<CreateNamespaceCommandOutput>;
            createNamespace(args: CreateNamespaceCommandInput, cb: (err: any, data?: CreateNamespaceCommandOutput) => void): void;
            createNamespace(args: CreateNamespaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNamespaceCommandOutput) => void): void;
            /**
                * <p>Creates a template from an existing Amazon QuickSight analysis or template. You can use the resulting
                * 			template to create a dashboard.</p>
                * 		       <p>A <i>template</i> is an entity in Amazon QuickSight that encapsulates the metadata
                * 			required to create an analysis and that you can use to create s dashboard. A template adds
                * 			a layer of abstraction by using placeholders to replace the dataset associated with the
                * 			analysis. You can use templates to create dashboards by replacing dataset placeholders
                * 			with datasets that follow the same schema that was used to create the source analysis
                * 			and template.</p>
                */
            createTemplate(args: CreateTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateTemplateCommandOutput>;
            createTemplate(args: CreateTemplateCommandInput, cb: (err: any, data?: CreateTemplateCommandOutput) => void): void;
            createTemplate(args: CreateTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTemplateCommandOutput) => void): void;
            /**
                * <p>Creates a template alias for a template.</p>
                */
            createTemplateAlias(args: CreateTemplateAliasCommandInput, options?: __HttpHandlerOptions): Promise<CreateTemplateAliasCommandOutput>;
            createTemplateAlias(args: CreateTemplateAliasCommandInput, cb: (err: any, data?: CreateTemplateAliasCommandOutput) => void): void;
            createTemplateAlias(args: CreateTemplateAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTemplateAliasCommandOutput) => void): void;
            /**
                * <p>Creates a theme.</p>
                * 		       <p>A <i>theme</i> is set of configuration options for color and layout.
                * 			Themes apply to analyses and dashboards. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using
                * 			Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
                */
            createTheme(args: CreateThemeCommandInput, options?: __HttpHandlerOptions): Promise<CreateThemeCommandOutput>;
            createTheme(args: CreateThemeCommandInput, cb: (err: any, data?: CreateThemeCommandOutput) => void): void;
            createTheme(args: CreateThemeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateThemeCommandOutput) => void): void;
            /**
                * <p>Creates a theme alias for a theme.</p>
                */
            createThemeAlias(args: CreateThemeAliasCommandInput, options?: __HttpHandlerOptions): Promise<CreateThemeAliasCommandOutput>;
            createThemeAlias(args: CreateThemeAliasCommandInput, cb: (err: any, data?: CreateThemeAliasCommandOutput) => void): void;
            createThemeAlias(args: CreateThemeAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateThemeAliasCommandOutput) => void): void;
            /**
                * <p>Deletes all Amazon QuickSight customizations in this Amazon Web Services Region for the specified
                *             Amazon Web Services account and Amazon QuickSight namespace.</p>
                */
            deleteAccountCustomization(args: DeleteAccountCustomizationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAccountCustomizationCommandOutput>;
            deleteAccountCustomization(args: DeleteAccountCustomizationCommandInput, cb: (err: any, data?: DeleteAccountCustomizationCommandOutput) => void): void;
            deleteAccountCustomization(args: DeleteAccountCustomizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAccountCustomizationCommandOutput) => void): void;
            /**
                * <p>Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during
                *             which you can restore the analysis. If you don't specify a recovery window value, the
                *             operation defaults to 30 days. Amazon QuickSight attaches a <code>DeletionTime</code> stamp to
                *             the response that specifies the end of the recovery window. At the end of the recovery
                *             window, Amazon QuickSight deletes the analysis permanently.</p>
                *         <p>At any time before recovery window ends, you can use the <code>RestoreAnalysis</code>
                *             API operation to remove the <code>DeletionTime</code> stamp and cancel the deletion of
                *             the analysis. The analysis remains visible in the API until it's deleted, so you can
                *             describe it but you can't make a template from it.</p>
                *         <p>An analysis that's scheduled for deletion isn't accessible in the Amazon QuickSight console.
                *             To access it in the console, restore it. Deleting an analysis doesn't delete the
                *             dashboards that you publish from it.</p>
                */
            deleteAnalysis(args: DeleteAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAnalysisCommandOutput>;
            deleteAnalysis(args: DeleteAnalysisCommandInput, cb: (err: any, data?: DeleteAnalysisCommandOutput) => void): void;
            deleteAnalysis(args: DeleteAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAnalysisCommandOutput) => void): void;
            /**
                * <p>Deletes a dashboard.</p>
                */
            deleteDashboard(args: DeleteDashboardCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDashboardCommandOutput>;
            deleteDashboard(args: DeleteDashboardCommandInput, cb: (err: any, data?: DeleteDashboardCommandOutput) => void): void;
            deleteDashboard(args: DeleteDashboardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDashboardCommandOutput) => void): void;
            /**
                * <p>Deletes a dataset.</p>
                */
            deleteDataSet(args: DeleteDataSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataSetCommandOutput>;
            deleteDataSet(args: DeleteDataSetCommandInput, cb: (err: any, data?: DeleteDataSetCommandOutput) => void): void;
            deleteDataSet(args: DeleteDataSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataSetCommandOutput) => void): void;
            /**
                * <p>Deletes the data source permanently. This operation breaks
                * 			all the datasets that reference the deleted data source.</p>
                */
            deleteDataSource(args: DeleteDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataSourceCommandOutput>;
            deleteDataSource(args: DeleteDataSourceCommandInput, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
            deleteDataSource(args: DeleteDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
            /**
                * <p>Deletes an empty folder.</p>
                */
            deleteFolder(args: DeleteFolderCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFolderCommandOutput>;
            deleteFolder(args: DeleteFolderCommandInput, cb: (err: any, data?: DeleteFolderCommandOutput) => void): void;
            deleteFolder(args: DeleteFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFolderCommandOutput) => void): void;
            /**
                * <p>Removes an asset, such as a dashboard, analysis, or dataset, from a folder.</p>
                */
            deleteFolderMembership(args: DeleteFolderMembershipCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFolderMembershipCommandOutput>;
            deleteFolderMembership(args: DeleteFolderMembershipCommandInput, cb: (err: any, data?: DeleteFolderMembershipCommandOutput) => void): void;
            deleteFolderMembership(args: DeleteFolderMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFolderMembershipCommandOutput) => void): void;
            /**
                * <p>Removes a user group from Amazon QuickSight. </p>
                */
            deleteGroup(args: DeleteGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupCommandOutput>;
            deleteGroup(args: DeleteGroupCommandInput, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            deleteGroup(args: DeleteGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            /**
                * <p>Removes a user from a group so that the user is no longer a member of the group.</p>
                */
            deleteGroupMembership(args: DeleteGroupMembershipCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupMembershipCommandOutput>;
            deleteGroupMembership(args: DeleteGroupMembershipCommandInput, cb: (err: any, data?: DeleteGroupMembershipCommandOutput) => void): void;
            deleteGroupMembership(args: DeleteGroupMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupMembershipCommandOutput) => void): void;
            /**
                * <p>Deletes an existing IAM policy assignment.</p>
                */
            deleteIAMPolicyAssignment(args: DeleteIAMPolicyAssignmentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIAMPolicyAssignmentCommandOutput>;
            deleteIAMPolicyAssignment(args: DeleteIAMPolicyAssignmentCommandInput, cb: (err: any, data?: DeleteIAMPolicyAssignmentCommandOutput) => void): void;
            deleteIAMPolicyAssignment(args: DeleteIAMPolicyAssignmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIAMPolicyAssignmentCommandOutput) => void): void;
            /**
                * <p>Deletes a namespace and the users and groups that are associated with the namespace.
                *         This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not
                *         deleted. To delete these assets, you use the API operations for the relevant asset. </p>
                */
            deleteNamespace(args: DeleteNamespaceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNamespaceCommandOutput>;
            deleteNamespace(args: DeleteNamespaceCommandInput, cb: (err: any, data?: DeleteNamespaceCommandOutput) => void): void;
            deleteNamespace(args: DeleteNamespaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNamespaceCommandOutput) => void): void;
            /**
                * <p>Deletes a template.</p>
                */
            deleteTemplate(args: DeleteTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTemplateCommandOutput>;
            deleteTemplate(args: DeleteTemplateCommandInput, cb: (err: any, data?: DeleteTemplateCommandOutput) => void): void;
            deleteTemplate(args: DeleteTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes the item that the specified template alias points to. If you provide a specific
                * 			alias, you delete the version of the template that the alias points to.</p>
                */
            deleteTemplateAlias(args: DeleteTemplateAliasCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTemplateAliasCommandOutput>;
            deleteTemplateAlias(args: DeleteTemplateAliasCommandInput, cb: (err: any, data?: DeleteTemplateAliasCommandOutput) => void): void;
            deleteTemplateAlias(args: DeleteTemplateAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTemplateAliasCommandOutput) => void): void;
            /**
                * <p>Deletes a theme.</p>
                */
            deleteTheme(args: DeleteThemeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteThemeCommandOutput>;
            deleteTheme(args: DeleteThemeCommandInput, cb: (err: any, data?: DeleteThemeCommandOutput) => void): void;
            deleteTheme(args: DeleteThemeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteThemeCommandOutput) => void): void;
            /**
                * <p>Deletes the version of the theme that the specified theme alias points to.
                * 			If you provide a specific alias, you delete the version of the theme
                * 			that the alias points to.</p>
                */
            deleteThemeAlias(args: DeleteThemeAliasCommandInput, options?: __HttpHandlerOptions): Promise<DeleteThemeAliasCommandOutput>;
            deleteThemeAlias(args: DeleteThemeAliasCommandInput, cb: (err: any, data?: DeleteThemeAliasCommandOutput) => void): void;
            deleteThemeAlias(args: DeleteThemeAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteThemeAliasCommandOutput) => void): void;
            /**
                * <p>Deletes the Amazon QuickSight user that is associated with the identity of the
                * 			Identity and Access Management (IAM) user or role that's making the call. The IAM user
                * 			isn't deleted as a result of this call. </p>
                */
            deleteUser(args: DeleteUserCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserCommandOutput>;
            deleteUser(args: DeleteUserCommandInput, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            deleteUser(args: DeleteUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            /**
                * <p>Deletes a user identified by its principal ID. </p>
                */
            deleteUserByPrincipalId(args: DeleteUserByPrincipalIdCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserByPrincipalIdCommandOutput>;
            deleteUserByPrincipalId(args: DeleteUserByPrincipalIdCommandInput, cb: (err: any, data?: DeleteUserByPrincipalIdCommandOutput) => void): void;
            deleteUserByPrincipalId(args: DeleteUserByPrincipalIdCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserByPrincipalIdCommandOutput) => void): void;
            /**
                * <p>Describes the customizations associated with the provided Amazon Web Services account and Amazon
                *             Amazon QuickSight namespace in an Amazon Web Services Region. The Amazon QuickSight console evaluates which
                *             customizations to apply by running this API operation with the <code>Resolved</code> flag
                *             included. </p>
                *         <p>To determine what customizations display when you run this command, it can help to
                *             visualize the relationship of the entities involved. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Amazon Web Services account</code> - The Amazon Web Services account exists at the top of the hierarchy.
                *                     It has the potential to use all of the Amazon Web Services Regions and Amazon Web Services Services. When you
                *                     subscribe to Amazon QuickSight, you choose one Amazon Web Services Region to use as your home Region.
                *                     That's where your free SPICE capacity is located. You can use Amazon QuickSight in any
                *                     supported Amazon Web Services Region. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Amazon Web Services Region</code> - In each Amazon Web Services Region where you sign in to Amazon QuickSight
                *                     at least once, Amazon QuickSight acts as a separate instance of the same service. If
                *                     you have a user directory, it resides in us-east-1, which is the US East (N.
                *                     Virginia). Generally speaking, these users have access to Amazon QuickSight in any
                *                     Amazon Web Services Region, unless they are constrained to a namespace. </p>
                *                 <p>To run the command in a different Amazon Web Services Region, you change your Region settings.
                *                     If you're using the CLI, you can use one of the following options:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html">command line options</a>. </p>
                *                     </li>
                *                   <li>
                *                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">named profiles</a>. </p>
                *                     </li>
                *                   <li>
                *                         <p>Run <code>aws configure</code> to change your default Amazon Web Services Region. Use
                *                             Enter to key the same settings for your keys. For more information, see
                *                             <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">Configuring the CLI</a>.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Namespace</code> - A QuickSight namespace is a partition that contains
                *                     users and assets (data sources, datasets, dashboards, and so on). To access
                *                     assets that are in a specific namespace, users and groups must also be part of
                *                     the same namespace. People who share a namespace are completely isolated from
                *                     users and assets in other namespaces, even if they are in the same Amazon Web Services account
                *                     and Amazon Web Services Region.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Applied customizations</code> -  Within an Amazon Web Services Region, a set of
                *                     Amazon QuickSight customizations can apply to an Amazon Web Services account or to a namespace.
                *                     Settings that you apply to a namespace override settings that you apply to an
                *                     Amazon Web Services account. All settings are isolated to a single Amazon Web Services Region. To apply them in
                *                     other Amazon Web Services Regions, run the <code>CreateAccountCustomization</code> command in
                *                     each Amazon Web Services Region where you want to apply the same customizations. </p>
                *             </li>
                *          </ul>
                */
            describeAccountCustomization(args: DescribeAccountCustomizationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountCustomizationCommandOutput>;
            describeAccountCustomization(args: DescribeAccountCustomizationCommandInput, cb: (err: any, data?: DescribeAccountCustomizationCommandOutput) => void): void;
            describeAccountCustomization(args: DescribeAccountCustomizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountCustomizationCommandOutput) => void): void;
            /**
                * <p>Describes the settings that were used when your Amazon QuickSight subscription was first
                *             created in this Amazon Web Services account.</p>
                */
            describeAccountSettings(args: DescribeAccountSettingsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountSettingsCommandOutput>;
            describeAccountSettings(args: DescribeAccountSettingsCommandInput, cb: (err: any, data?: DescribeAccountSettingsCommandOutput) => void): void;
            describeAccountSettings(args: DescribeAccountSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountSettingsCommandOutput) => void): void;
            /**
                * <p>Use the DescribeAccountSubscription operation to receive a description of a Amazon QuickSight account's subscription. A successful API call returns an <code>AccountInfo</code> object that includes an account's name, subscription status, authentication type, edition, and notification email address.</p>
                */
            describeAccountSubscription(args: DescribeAccountSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountSubscriptionCommandOutput>;
            describeAccountSubscription(args: DescribeAccountSubscriptionCommandInput, cb: (err: any, data?: DescribeAccountSubscriptionCommandOutput) => void): void;
            describeAccountSubscription(args: DescribeAccountSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountSubscriptionCommandOutput) => void): void;
            /**
                * <p>Provides a summary of the metadata for an analysis.</p>
                */
            describeAnalysis(args: DescribeAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAnalysisCommandOutput>;
            describeAnalysis(args: DescribeAnalysisCommandInput, cb: (err: any, data?: DescribeAnalysisCommandOutput) => void): void;
            describeAnalysis(args: DescribeAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAnalysisCommandOutput) => void): void;
            /**
                * <p>Provides the read and write permissions for an analysis.</p>
                */
            describeAnalysisPermissions(args: DescribeAnalysisPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAnalysisPermissionsCommandOutput>;
            describeAnalysisPermissions(args: DescribeAnalysisPermissionsCommandInput, cb: (err: any, data?: DescribeAnalysisPermissionsCommandOutput) => void): void;
            describeAnalysisPermissions(args: DescribeAnalysisPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAnalysisPermissionsCommandOutput) => void): void;
            /**
                * <p>Provides a summary for a dashboard.</p>
                */
            describeDashboard(args: DescribeDashboardCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDashboardCommandOutput>;
            describeDashboard(args: DescribeDashboardCommandInput, cb: (err: any, data?: DescribeDashboardCommandOutput) => void): void;
            describeDashboard(args: DescribeDashboardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDashboardCommandOutput) => void): void;
            /**
                * <p>Describes read and write permissions for a dashboard.</p>
                */
            describeDashboardPermissions(args: DescribeDashboardPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDashboardPermissionsCommandOutput>;
            describeDashboardPermissions(args: DescribeDashboardPermissionsCommandInput, cb: (err: any, data?: DescribeDashboardPermissionsCommandOutput) => void): void;
            describeDashboardPermissions(args: DescribeDashboardPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDashboardPermissionsCommandOutput) => void): void;
            /**
                * <p>Describes a dataset. This operation doesn't support datasets that include uploaded files as a source.</p>
                */
            describeDataSet(args: DescribeDataSetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDataSetCommandOutput>;
            describeDataSet(args: DescribeDataSetCommandInput, cb: (err: any, data?: DescribeDataSetCommandOutput) => void): void;
            describeDataSet(args: DescribeDataSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDataSetCommandOutput) => void): void;
            /**
                * <p>Describes the permissions on a dataset.</p>
                * 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
                */
            describeDataSetPermissions(args: DescribeDataSetPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDataSetPermissionsCommandOutput>;
            describeDataSetPermissions(args: DescribeDataSetPermissionsCommandInput, cb: (err: any, data?: DescribeDataSetPermissionsCommandOutput) => void): void;
            describeDataSetPermissions(args: DescribeDataSetPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDataSetPermissionsCommandOutput) => void): void;
            /**
                * <p>Describes a data source.</p>
                */
            describeDataSource(args: DescribeDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDataSourceCommandOutput>;
            describeDataSource(args: DescribeDataSourceCommandInput, cb: (err: any, data?: DescribeDataSourceCommandOutput) => void): void;
            describeDataSource(args: DescribeDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDataSourceCommandOutput) => void): void;
            /**
                * <p>Describes the resource permissions for a data source.</p>
                */
            describeDataSourcePermissions(args: DescribeDataSourcePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDataSourcePermissionsCommandOutput>;
            describeDataSourcePermissions(args: DescribeDataSourcePermissionsCommandInput, cb: (err: any, data?: DescribeDataSourcePermissionsCommandOutput) => void): void;
            describeDataSourcePermissions(args: DescribeDataSourcePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDataSourcePermissionsCommandOutput) => void): void;
            /**
                * <p>Describes a folder.</p>
                */
            describeFolder(args: DescribeFolderCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFolderCommandOutput>;
            describeFolder(args: DescribeFolderCommandInput, cb: (err: any, data?: DescribeFolderCommandOutput) => void): void;
            describeFolder(args: DescribeFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFolderCommandOutput) => void): void;
            /**
                * <p>Describes permissions for a folder.</p>
                */
            describeFolderPermissions(args: DescribeFolderPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFolderPermissionsCommandOutput>;
            describeFolderPermissions(args: DescribeFolderPermissionsCommandInput, cb: (err: any, data?: DescribeFolderPermissionsCommandOutput) => void): void;
            describeFolderPermissions(args: DescribeFolderPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFolderPermissionsCommandOutput) => void): void;
            /**
                * <p>Describes the folder resolved permissions. Permissions consists of both folder direct permissions and the inherited permissions from the ancestor folders.</p>
                */
            describeFolderResolvedPermissions(args: DescribeFolderResolvedPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFolderResolvedPermissionsCommandOutput>;
            describeFolderResolvedPermissions(args: DescribeFolderResolvedPermissionsCommandInput, cb: (err: any, data?: DescribeFolderResolvedPermissionsCommandOutput) => void): void;
            describeFolderResolvedPermissions(args: DescribeFolderResolvedPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFolderResolvedPermissionsCommandOutput) => void): void;
            /**
                * <p>Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN). </p>
                */
            describeGroup(args: DescribeGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGroupCommandOutput>;
            describeGroup(args: DescribeGroupCommandInput, cb: (err: any, data?: DescribeGroupCommandOutput) => void): void;
            describeGroup(args: DescribeGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGroupCommandOutput) => void): void;
            /**
                * <p>Use the <code>DescribeGroupMembership</code> operation to determine if a user is a
                * 			member of the specified group. If the user exists and is a member of the specified
                * 			group, an associated <code>GroupMember</code> object is returned.</p>
                */
            describeGroupMembership(args: DescribeGroupMembershipCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGroupMembershipCommandOutput>;
            describeGroupMembership(args: DescribeGroupMembershipCommandInput, cb: (err: any, data?: DescribeGroupMembershipCommandOutput) => void): void;
            describeGroupMembership(args: DescribeGroupMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGroupMembershipCommandOutput) => void): void;
            /**
                * <p>Describes an existing IAM policy assignment, as specified by the assignment name.</p>
                */
            describeIAMPolicyAssignment(args: DescribeIAMPolicyAssignmentCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIAMPolicyAssignmentCommandOutput>;
            describeIAMPolicyAssignment(args: DescribeIAMPolicyAssignmentCommandInput, cb: (err: any, data?: DescribeIAMPolicyAssignmentCommandOutput) => void): void;
            describeIAMPolicyAssignment(args: DescribeIAMPolicyAssignmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIAMPolicyAssignmentCommandOutput) => void): void;
            /**
                * <p>Describes a SPICE ingestion.</p>
                */
            describeIngestion(args: DescribeIngestionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIngestionCommandOutput>;
            describeIngestion(args: DescribeIngestionCommandInput, cb: (err: any, data?: DescribeIngestionCommandOutput) => void): void;
            describeIngestion(args: DescribeIngestionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIngestionCommandOutput) => void): void;
            /**
                * <p>Provides a summary and status of IP rules.</p>
                */
            describeIpRestriction(args: DescribeIpRestrictionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIpRestrictionCommandOutput>;
            describeIpRestriction(args: DescribeIpRestrictionCommandInput, cb: (err: any, data?: DescribeIpRestrictionCommandOutput) => void): void;
            describeIpRestriction(args: DescribeIpRestrictionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIpRestrictionCommandOutput) => void): void;
            /**
                * <p>Describes the current namespace.</p>
                */
            describeNamespace(args: DescribeNamespaceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNamespaceCommandOutput>;
            describeNamespace(args: DescribeNamespaceCommandInput, cb: (err: any, data?: DescribeNamespaceCommandOutput) => void): void;
            describeNamespace(args: DescribeNamespaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNamespaceCommandOutput) => void): void;
            /**
                * <p>Describes a template's metadata.</p>
                */
            describeTemplate(args: DescribeTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTemplateCommandOutput>;
            describeTemplate(args: DescribeTemplateCommandInput, cb: (err: any, data?: DescribeTemplateCommandOutput) => void): void;
            describeTemplate(args: DescribeTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTemplateCommandOutput) => void): void;
            /**
                * <p>Describes the template alias for a template.</p>
                */
            describeTemplateAlias(args: DescribeTemplateAliasCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTemplateAliasCommandOutput>;
            describeTemplateAlias(args: DescribeTemplateAliasCommandInput, cb: (err: any, data?: DescribeTemplateAliasCommandOutput) => void): void;
            describeTemplateAlias(args: DescribeTemplateAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTemplateAliasCommandOutput) => void): void;
            /**
                * <p>Describes read and write permissions on a template.</p>
                */
            describeTemplatePermissions(args: DescribeTemplatePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTemplatePermissionsCommandOutput>;
            describeTemplatePermissions(args: DescribeTemplatePermissionsCommandInput, cb: (err: any, data?: DescribeTemplatePermissionsCommandOutput) => void): void;
            describeTemplatePermissions(args: DescribeTemplatePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTemplatePermissionsCommandOutput) => void): void;
            /**
                * <p>Describes a theme.</p>
                */
            describeTheme(args: DescribeThemeCommandInput, options?: __HttpHandlerOptions): Promise<DescribeThemeCommandOutput>;
            describeTheme(args: DescribeThemeCommandInput, cb: (err: any, data?: DescribeThemeCommandOutput) => void): void;
            describeTheme(args: DescribeThemeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeThemeCommandOutput) => void): void;
            /**
                * <p>Describes the alias for a theme.</p>
                */
            describeThemeAlias(args: DescribeThemeAliasCommandInput, options?: __HttpHandlerOptions): Promise<DescribeThemeAliasCommandOutput>;
            describeThemeAlias(args: DescribeThemeAliasCommandInput, cb: (err: any, data?: DescribeThemeAliasCommandOutput) => void): void;
            describeThemeAlias(args: DescribeThemeAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeThemeAliasCommandOutput) => void): void;
            /**
                * <p>Describes the read and write permissions for a theme.</p>
                */
            describeThemePermissions(args: DescribeThemePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeThemePermissionsCommandOutput>;
            describeThemePermissions(args: DescribeThemePermissionsCommandInput, cb: (err: any, data?: DescribeThemePermissionsCommandOutput) => void): void;
            describeThemePermissions(args: DescribeThemePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeThemePermissionsCommandOutput) => void): void;
            /**
                * <p>Returns information about a user, given the user name. </p>
                */
            describeUser(args: DescribeUserCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserCommandOutput>;
            describeUser(args: DescribeUserCommandInput, cb: (err: any, data?: DescribeUserCommandOutput) => void): void;
            describeUser(args: DescribeUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserCommandOutput) => void): void;
            /**
                * <p>Generates an embed URL that you can use to embed an Amazon QuickSight dashboard in your website, without having to register any reader users. Before you use this action, make sure that you have configured the dashboards and permissions.</p>
                *         <p>The following rules apply to the generated URL:</p>
                *         <ul>
                *             <li>
                *                 <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p>
                *             </li>
                *             <li>
                *                 <p>The URL validity period should not be confused with the actual session lifetime that can be customized using the <code>
                *                      <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForAnonymousUser.html#QS-GenerateEmbedUrlForAnonymousUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a>
                *                   </code> parameter. The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p>
                *             </li>
                *             <li>
                *                 <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p>
                *             </li>
                *          </ul>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User
                *             Guide</i>.</p>
                *         <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
                */
            generateEmbedUrlForAnonymousUser(args: GenerateEmbedUrlForAnonymousUserCommandInput, options?: __HttpHandlerOptions): Promise<GenerateEmbedUrlForAnonymousUserCommandOutput>;
            generateEmbedUrlForAnonymousUser(args: GenerateEmbedUrlForAnonymousUserCommandInput, cb: (err: any, data?: GenerateEmbedUrlForAnonymousUserCommandOutput) => void): void;
            generateEmbedUrlForAnonymousUser(args: GenerateEmbedUrlForAnonymousUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateEmbedUrlForAnonymousUserCommandOutput) => void): void;
            /**
                * <p>Generates an embed URL that you can use to embed an Amazon QuickSight experience in your website. This action can be used for any type of user registered in an Amazon QuickSight account.
                *             Before you use this action, make sure that you have configured the relevant Amazon QuickSight resource and permissions.</p>
                *         <p>The following rules apply to the generated URL:</p>
                *         <ul>
                *             <li>
                *                 <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p>
                *             </li>
                *             <li>
                *                 <p>The URL validity period should not be confused with the actual session lifetime
                *         that can be customized using the <code>
                *                      <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForRegisteredUser.html#QS-GenerateEmbedUrlForRegisteredUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a>
                *                   </code> parameter.</p>
                *                 <p>The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p>
                *             </li>
                *             <li>
                *                 <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p>
                *             </li>
                *          </ul>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User
                *             Guide</i>.</p>
                *             <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
                */
            generateEmbedUrlForRegisteredUser(args: GenerateEmbedUrlForRegisteredUserCommandInput, options?: __HttpHandlerOptions): Promise<GenerateEmbedUrlForRegisteredUserCommandOutput>;
            generateEmbedUrlForRegisteredUser(args: GenerateEmbedUrlForRegisteredUserCommandInput, cb: (err: any, data?: GenerateEmbedUrlForRegisteredUserCommandOutput) => void): void;
            generateEmbedUrlForRegisteredUser(args: GenerateEmbedUrlForRegisteredUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateEmbedUrlForRegisteredUserCommandOutput) => void): void;
            /**
                * <p>Generates a temporary session URL and authorization code that you can use to embed an Amazon QuickSight read-only dashboard in your website or application. Before you use this command, make sure that you have configured the dashboards and permissions. </p>
                *         <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not from the user's browser. The following rules apply to the generated URL:</p>
                *         <ul>
                *             <li>
                *                 <p>They must be used together.</p>
                *             </li>
                *             <li>
                *                 <p>They can be used one time only.</p>
                *             </li>
                *             <li>
                *                 <p>They are valid for 5 minutes after you run this command.</p>
                *             </li>
                *             <li>
                *                 <p>The resulting user session is valid for 15 minutes (default) up to 10 hours (maximum). You can use the optional <code>SessionLifetimeInMinutes</code> parameter to customi session duration.</p>
                *             </li>
                *          </ul>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics-deprecated.html">Embedding Analytics Using GetDashboardEmbedUrl</a> in the <i>Amazon QuickSight User
                *             Guide</i>.</p>
                *             <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
                */
            getDashboardEmbedUrl(args: GetDashboardEmbedUrlCommandInput, options?: __HttpHandlerOptions): Promise<GetDashboardEmbedUrlCommandOutput>;
            getDashboardEmbedUrl(args: GetDashboardEmbedUrlCommandInput, cb: (err: any, data?: GetDashboardEmbedUrlCommandOutput) => void): void;
            getDashboardEmbedUrl(args: GetDashboardEmbedUrlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDashboardEmbedUrlCommandOutput) => void): void;
            /**
                * <p>Generates a session URL and authorization code that you can use to embed the Amazon
                *             Amazon QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where
                *             you want to provide an authoring portal that allows users to create data sources,
                *             datasets, analyses, and dashboards. The users who access an embedded Amazon QuickSight console
                *             need belong to the author or admin security cohort. If you want to restrict permissions
                *             to some of these features, add a custom permissions profile to the user with the
                *             <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a>
                *             </code> API operation. Use <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RegisterUser.html">RegisterUser</a>
                *             </code>
                *             API operation to add a new user with a custom permission profile attached. For more
                *             information, see the following sections in the <i>Amazon QuickSight User
                *             Guide</i>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedding Analytics</a>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            getSessionEmbedUrl(args: GetSessionEmbedUrlCommandInput, options?: __HttpHandlerOptions): Promise<GetSessionEmbedUrlCommandOutput>;
            getSessionEmbedUrl(args: GetSessionEmbedUrlCommandInput, cb: (err: any, data?: GetSessionEmbedUrlCommandOutput) => void): void;
            getSessionEmbedUrl(args: GetSessionEmbedUrlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSessionEmbedUrlCommandOutput) => void): void;
            /**
                * <p>Lists Amazon QuickSight analyses that exist in the specified Amazon Web Services account.</p>
                */
            listAnalyses(args: ListAnalysesCommandInput, options?: __HttpHandlerOptions): Promise<ListAnalysesCommandOutput>;
            listAnalyses(args: ListAnalysesCommandInput, cb: (err: any, data?: ListAnalysesCommandOutput) => void): void;
            listAnalyses(args: ListAnalysesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAnalysesCommandOutput) => void): void;
            /**
                * <p>Lists dashboards in an Amazon Web Services account.</p>
                */
            listDashboards(args: ListDashboardsCommandInput, options?: __HttpHandlerOptions): Promise<ListDashboardsCommandOutput>;
            listDashboards(args: ListDashboardsCommandInput, cb: (err: any, data?: ListDashboardsCommandOutput) => void): void;
            listDashboards(args: ListDashboardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDashboardsCommandOutput) => void): void;
            /**
                * <p>Lists all the versions of the dashboards in the Amazon QuickSight subscription.</p>
                */
            listDashboardVersions(args: ListDashboardVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListDashboardVersionsCommandOutput>;
            listDashboardVersions(args: ListDashboardVersionsCommandInput, cb: (err: any, data?: ListDashboardVersionsCommandOutput) => void): void;
            listDashboardVersions(args: ListDashboardVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDashboardVersionsCommandOutput) => void): void;
            /**
                * <p>Lists all of the datasets belonging to the current Amazon Web Services account in an Amazon Web Services Region.</p>
                * 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p>
                */
            listDataSets(args: ListDataSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListDataSetsCommandOutput>;
            listDataSets(args: ListDataSetsCommandInput, cb: (err: any, data?: ListDataSetsCommandOutput) => void): void;
            listDataSets(args: ListDataSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataSetsCommandOutput) => void): void;
            /**
                * <p>Lists data sources in current Amazon Web Services Region that belong to this Amazon Web Services account.</p>
                */
            listDataSources(args: ListDataSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListDataSourcesCommandOutput>;
            listDataSources(args: ListDataSourcesCommandInput, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
            listDataSources(args: ListDataSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
            /**
                * <p>List all assets (<code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code>) in a folder. </p>
                */
            listFolderMembers(args: ListFolderMembersCommandInput, options?: __HttpHandlerOptions): Promise<ListFolderMembersCommandOutput>;
            listFolderMembers(args: ListFolderMembersCommandInput, cb: (err: any, data?: ListFolderMembersCommandOutput) => void): void;
            listFolderMembers(args: ListFolderMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFolderMembersCommandOutput) => void): void;
            /**
                * <p>Lists all folders in an account.</p>
                */
            listFolders(args: ListFoldersCommandInput, options?: __HttpHandlerOptions): Promise<ListFoldersCommandOutput>;
            listFolders(args: ListFoldersCommandInput, cb: (err: any, data?: ListFoldersCommandOutput) => void): void;
            listFolders(args: ListFoldersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFoldersCommandOutput) => void): void;
            /**
                * <p>Lists member users in a group.</p>
                */
            listGroupMemberships(args: ListGroupMembershipsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupMembershipsCommandOutput>;
            listGroupMemberships(args: ListGroupMembershipsCommandInput, cb: (err: any, data?: ListGroupMembershipsCommandOutput) => void): void;
            listGroupMemberships(args: ListGroupMembershipsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupMembershipsCommandOutput) => void): void;
            /**
                * <p>Lists all user groups in Amazon QuickSight. </p>
                */
            listGroups(args: ListGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsCommandOutput>;
            listGroups(args: ListGroupsCommandInput, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            listGroups(args: ListGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            /**
                * <p>Lists IAM policy assignments in the current Amazon QuickSight account.</p>
                */
            listIAMPolicyAssignments(args: ListIAMPolicyAssignmentsCommandInput, options?: __HttpHandlerOptions): Promise<ListIAMPolicyAssignmentsCommandOutput>;
            listIAMPolicyAssignments(args: ListIAMPolicyAssignmentsCommandInput, cb: (err: any, data?: ListIAMPolicyAssignmentsCommandOutput) => void): void;
            listIAMPolicyAssignments(args: ListIAMPolicyAssignmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIAMPolicyAssignmentsCommandOutput) => void): void;
            /**
                * <p>Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM
                * 			policies assigned to the specified user and group or groups that the user belongs
                * 			to.</p>
                */
            listIAMPolicyAssignmentsForUser(args: ListIAMPolicyAssignmentsForUserCommandInput, options?: __HttpHandlerOptions): Promise<ListIAMPolicyAssignmentsForUserCommandOutput>;
            listIAMPolicyAssignmentsForUser(args: ListIAMPolicyAssignmentsForUserCommandInput, cb: (err: any, data?: ListIAMPolicyAssignmentsForUserCommandOutput) => void): void;
            listIAMPolicyAssignmentsForUser(args: ListIAMPolicyAssignmentsForUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIAMPolicyAssignmentsForUserCommandOutput) => void): void;
            /**
                * <p>Lists the history of SPICE ingestions for a dataset.</p>
                */
            listIngestions(args: ListIngestionsCommandInput, options?: __HttpHandlerOptions): Promise<ListIngestionsCommandOutput>;
            listIngestions(args: ListIngestionsCommandInput, cb: (err: any, data?: ListIngestionsCommandOutput) => void): void;
            listIngestions(args: ListIngestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIngestionsCommandOutput) => void): void;
            /**
                * <p>Lists the namespaces for the specified Amazon Web Services account.</p>
                */
            listNamespaces(args: ListNamespacesCommandInput, options?: __HttpHandlerOptions): Promise<ListNamespacesCommandOutput>;
            listNamespaces(args: ListNamespacesCommandInput, cb: (err: any, data?: ListNamespacesCommandOutput) => void): void;
            listNamespaces(args: ListNamespacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNamespacesCommandOutput) => void): void;
            /**
                * <p>Lists the tags assigned to a resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists all the aliases of a template.</p>
                */
            listTemplateAliases(args: ListTemplateAliasesCommandInput, options?: __HttpHandlerOptions): Promise<ListTemplateAliasesCommandOutput>;
            listTemplateAliases(args: ListTemplateAliasesCommandInput, cb: (err: any, data?: ListTemplateAliasesCommandOutput) => void): void;
            listTemplateAliases(args: ListTemplateAliasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTemplateAliasesCommandOutput) => void): void;
            /**
                * <p>Lists all the templates in the current Amazon QuickSight account.</p>
                */
            listTemplates(args: ListTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListTemplatesCommandOutput>;
            listTemplates(args: ListTemplatesCommandInput, cb: (err: any, data?: ListTemplatesCommandOutput) => void): void;
            listTemplates(args: ListTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTemplatesCommandOutput) => void): void;
            /**
                * <p>Lists all the versions of the templates in the current Amazon QuickSight account.</p>
                */
            listTemplateVersions(args: ListTemplateVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListTemplateVersionsCommandOutput>;
            listTemplateVersions(args: ListTemplateVersionsCommandInput, cb: (err: any, data?: ListTemplateVersionsCommandOutput) => void): void;
            listTemplateVersions(args: ListTemplateVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTemplateVersionsCommandOutput) => void): void;
            /**
                * <p>Lists all the aliases of a theme.</p>
                */
            listThemeAliases(args: ListThemeAliasesCommandInput, options?: __HttpHandlerOptions): Promise<ListThemeAliasesCommandOutput>;
            listThemeAliases(args: ListThemeAliasesCommandInput, cb: (err: any, data?: ListThemeAliasesCommandOutput) => void): void;
            listThemeAliases(args: ListThemeAliasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListThemeAliasesCommandOutput) => void): void;
            /**
                * <p>Lists all the themes in the current Amazon Web Services account.</p>
                */
            listThemes(args: ListThemesCommandInput, options?: __HttpHandlerOptions): Promise<ListThemesCommandOutput>;
            listThemes(args: ListThemesCommandInput, cb: (err: any, data?: ListThemesCommandOutput) => void): void;
            listThemes(args: ListThemesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListThemesCommandOutput) => void): void;
            /**
                * <p>Lists all the versions of the themes in the current Amazon Web Services account.</p>
                */
            listThemeVersions(args: ListThemeVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListThemeVersionsCommandOutput>;
            listThemeVersions(args: ListThemeVersionsCommandInput, cb: (err: any, data?: ListThemeVersionsCommandOutput) => void): void;
            listThemeVersions(args: ListThemeVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListThemeVersionsCommandOutput) => void): void;
            /**
                * <p>Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.</p>
                */
            listUserGroups(args: ListUserGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListUserGroupsCommandOutput>;
            listUserGroups(args: ListUserGroupsCommandInput, cb: (err: any, data?: ListUserGroupsCommandOutput) => void): void;
            listUserGroups(args: ListUserGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserGroupsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all of the Amazon QuickSight users belonging to this account. </p>
                */
            listUsers(args: ListUsersCommandInput, options?: __HttpHandlerOptions): Promise<ListUsersCommandOutput>;
            listUsers(args: ListUsersCommandInput, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            listUsers(args: ListUsersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon QuickSight user, whose identity is associated with the Identity and Access Management (IAM) identity or role specified in the request. </p>
                */
            registerUser(args: RegisterUserCommandInput, options?: __HttpHandlerOptions): Promise<RegisterUserCommandOutput>;
            registerUser(args: RegisterUserCommandInput, cb: (err: any, data?: RegisterUserCommandOutput) => void): void;
            registerUser(args: RegisterUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterUserCommandOutput) => void): void;
            /**
                * <p>Restores an analysis.</p>
                */
            restoreAnalysis(args: RestoreAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<RestoreAnalysisCommandOutput>;
            restoreAnalysis(args: RestoreAnalysisCommandInput, cb: (err: any, data?: RestoreAnalysisCommandOutput) => void): void;
            restoreAnalysis(args: RestoreAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreAnalysisCommandOutput) => void): void;
            /**
                * <p>Searches for analyses that belong to the user specified in the filter.</p>
                *         <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *         </note>
                */
            searchAnalyses(args: SearchAnalysesCommandInput, options?: __HttpHandlerOptions): Promise<SearchAnalysesCommandOutput>;
            searchAnalyses(args: SearchAnalysesCommandInput, cb: (err: any, data?: SearchAnalysesCommandOutput) => void): void;
            searchAnalyses(args: SearchAnalysesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchAnalysesCommandOutput) => void): void;
            /**
                * <p>Searches for dashboards that belong to a user. </p>
                *         <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *         </note>
                */
            searchDashboards(args: SearchDashboardsCommandInput, options?: __HttpHandlerOptions): Promise<SearchDashboardsCommandOutput>;
            searchDashboards(args: SearchDashboardsCommandInput, cb: (err: any, data?: SearchDashboardsCommandOutput) => void): void;
            searchDashboards(args: SearchDashboardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchDashboardsCommandOutput) => void): void;
            /**
                * <p>Searches the subfolders in a folder.</p>
                */
            searchFolders(args: SearchFoldersCommandInput, options?: __HttpHandlerOptions): Promise<SearchFoldersCommandOutput>;
            searchFolders(args: SearchFoldersCommandInput, cb: (err: any, data?: SearchFoldersCommandOutput) => void): void;
            searchFolders(args: SearchFoldersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchFoldersCommandOutput) => void): void;
            /**
                * <p>Use the <code>SearchGroups</code> operation to search groups in a specified Amazon QuickSight namespace using the supplied filters.</p>
                */
            searchGroups(args: SearchGroupsCommandInput, options?: __HttpHandlerOptions): Promise<SearchGroupsCommandOutput>;
            searchGroups(args: SearchGroupsCommandInput, cb: (err: any, data?: SearchGroupsCommandOutput) => void): void;
            searchGroups(args: SearchGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchGroupsCommandOutput) => void): void;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the specified Amazon QuickSight resource. </p>
                * 		       <p>Tags can help you organize and categorize your resources. You can also use them to
                * 			scope user permissions, by granting a user permission to access or change only resources
                * 			with certain tag values. You can use the <code>TagResource</code> operation with a
                * 			resource that already has tags. If you specify a new tag key for the resource, this tag
                * 			is appended to the list of tags associated with the resource. If you specify a tag key
                * 			that is already associated with the resource, the new tag value that you specify
                * 			replaces the previous value for that tag.</p>
                * 		       <p>You can associate as many as 50 tags with a resource. Amazon QuickSight supports tagging on data
                * 			set, data source, dashboard, and template. </p>
                * 		       <p>Tagging for Amazon QuickSight works in a similar way to tagging for other Amazon Web Services services, except for
                * 			the following:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>You can't use tags to track costs for Amazon QuickSight. This isn't
                * 				possible because you can't tag the resources that Amazon QuickSight costs are based
                * 				on, for example Amazon QuickSight storage capacity (SPICE), number of users, type
                * 				of users, and usage metrics.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Amazon QuickSight doesn't currently support the tag editor for Resource Groups.</p>
                * 				        </li>
                *          </ul>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes a tag or tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, the only customization that you can use is a theme.</p>
                *         <p>You can use customizations for your Amazon Web Services account or, if you specify a namespace, for a
                *             Amazon QuickSight namespace instead. Customizations that apply to a namespace override
                *             customizations that apply to an Amazon Web Services account. To find out which customizations apply, use
                *             the <code>DescribeAccountCustomization</code> API operation. </p>
                */
            updateAccountCustomization(args: UpdateAccountCustomizationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccountCustomizationCommandOutput>;
            updateAccountCustomization(args: UpdateAccountCustomizationCommandInput, cb: (err: any, data?: UpdateAccountCustomizationCommandOutput) => void): void;
            updateAccountCustomization(args: UpdateAccountCustomizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccountCustomizationCommandOutput) => void): void;
            /**
                * <p>Updates the Amazon QuickSight settings in your Amazon Web Services account.</p>
                */
            updateAccountSettings(args: UpdateAccountSettingsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccountSettingsCommandOutput>;
            updateAccountSettings(args: UpdateAccountSettingsCommandInput, cb: (err: any, data?: UpdateAccountSettingsCommandOutput) => void): void;
            updateAccountSettings(args: UpdateAccountSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccountSettingsCommandOutput) => void): void;
            /**
                * <p>Updates an analysis in Amazon QuickSight</p>
                */
            updateAnalysis(args: UpdateAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAnalysisCommandOutput>;
            updateAnalysis(args: UpdateAnalysisCommandInput, cb: (err: any, data?: UpdateAnalysisCommandOutput) => void): void;
            updateAnalysis(args: UpdateAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAnalysisCommandOutput) => void): void;
            /**
                * <p>Updates the read and write permissions for an analysis.</p>
                */
            updateAnalysisPermissions(args: UpdateAnalysisPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAnalysisPermissionsCommandOutput>;
            updateAnalysisPermissions(args: UpdateAnalysisPermissionsCommandInput, cb: (err: any, data?: UpdateAnalysisPermissionsCommandOutput) => void): void;
            updateAnalysisPermissions(args: UpdateAnalysisPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAnalysisPermissionsCommandOutput) => void): void;
            /**
                * <p>Updates a dashboard in an Amazon Web Services account.</p>
                *         <note>
                *             <p>Updating a Dashboard creates a new dashboard version but does not immediately publish
                *                 the new version.  You can update the published version of a dashboard by
                *                 using the <code>
                *                   <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateDashboardPublishedVersion.html">UpdateDashboardPublishedVersion</a>
                *                </code> API operation.</p>
                *         </note>
                */
            updateDashboard(args: UpdateDashboardCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDashboardCommandOutput>;
            updateDashboard(args: UpdateDashboardCommandInput, cb: (err: any, data?: UpdateDashboardCommandOutput) => void): void;
            updateDashboard(args: UpdateDashboardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDashboardCommandOutput) => void): void;
            /**
                * <p>Updates read and write permissions on a dashboard.</p>
                */
            updateDashboardPermissions(args: UpdateDashboardPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDashboardPermissionsCommandOutput>;
            updateDashboardPermissions(args: UpdateDashboardPermissionsCommandInput, cb: (err: any, data?: UpdateDashboardPermissionsCommandOutput) => void): void;
            updateDashboardPermissions(args: UpdateDashboardPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDashboardPermissionsCommandOutput) => void): void;
            /**
                * <p>Updates the published version of a dashboard.</p>
                */
            updateDashboardPublishedVersion(args: UpdateDashboardPublishedVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDashboardPublishedVersionCommandOutput>;
            updateDashboardPublishedVersion(args: UpdateDashboardPublishedVersionCommandInput, cb: (err: any, data?: UpdateDashboardPublishedVersionCommandOutput) => void): void;
            updateDashboardPublishedVersion(args: UpdateDashboardPublishedVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDashboardPublishedVersionCommandOutput) => void): void;
            /**
                * <p>Updates a dataset. This operation doesn't support datasets that include uploaded files as a source.</p>
                */
            updateDataSet(args: UpdateDataSetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataSetCommandOutput>;
            updateDataSet(args: UpdateDataSetCommandInput, cb: (err: any, data?: UpdateDataSetCommandOutput) => void): void;
            updateDataSet(args: UpdateDataSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataSetCommandOutput) => void): void;
            /**
                * <p>Updates the permissions on a dataset.</p>
                * 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
                */
            updateDataSetPermissions(args: UpdateDataSetPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataSetPermissionsCommandOutput>;
            updateDataSetPermissions(args: UpdateDataSetPermissionsCommandInput, cb: (err: any, data?: UpdateDataSetPermissionsCommandOutput) => void): void;
            updateDataSetPermissions(args: UpdateDataSetPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataSetPermissionsCommandOutput) => void): void;
            /**
                * <p>Updates a data source.</p>
                */
            updateDataSource(args: UpdateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataSourceCommandOutput>;
            updateDataSource(args: UpdateDataSourceCommandInput, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
            updateDataSource(args: UpdateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
            /**
                * <p>Updates the permissions to a data source.</p>
                */
            updateDataSourcePermissions(args: UpdateDataSourcePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataSourcePermissionsCommandOutput>;
            updateDataSourcePermissions(args: UpdateDataSourcePermissionsCommandInput, cb: (err: any, data?: UpdateDataSourcePermissionsCommandOutput) => void): void;
            updateDataSourcePermissions(args: UpdateDataSourcePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataSourcePermissionsCommandOutput) => void): void;
            /**
                * <p>Updates the name of a folder.</p>
                */
            updateFolder(args: UpdateFolderCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFolderCommandOutput>;
            updateFolder(args: UpdateFolderCommandInput, cb: (err: any, data?: UpdateFolderCommandOutput) => void): void;
            updateFolder(args: UpdateFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFolderCommandOutput) => void): void;
            /**
                * <p>Updates permissions of a folder.</p>
                */
            updateFolderPermissions(args: UpdateFolderPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFolderPermissionsCommandOutput>;
            updateFolderPermissions(args: UpdateFolderPermissionsCommandInput, cb: (err: any, data?: UpdateFolderPermissionsCommandOutput) => void): void;
            updateFolderPermissions(args: UpdateFolderPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFolderPermissionsCommandOutput) => void): void;
            /**
                * <p>Changes a group description. </p>
                */
            updateGroup(args: UpdateGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGroupCommandOutput>;
            updateGroup(args: UpdateGroupCommandInput, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            updateGroup(args: UpdateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            /**
                * <p>Updates an existing IAM policy assignment. This operation updates only the optional
                * 			parameter or parameters that are specified in the request.
                * 		    This overwrites all of the users included in <code>Identities</code>.
                * 		</p>
                */
            updateIAMPolicyAssignment(args: UpdateIAMPolicyAssignmentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIAMPolicyAssignmentCommandOutput>;
            updateIAMPolicyAssignment(args: UpdateIAMPolicyAssignmentCommandInput, cb: (err: any, data?: UpdateIAMPolicyAssignmentCommandOutput) => void): void;
            updateIAMPolicyAssignment(args: UpdateIAMPolicyAssignmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIAMPolicyAssignmentCommandOutput) => void): void;
            /**
                * <p>Updates the content and status of IP rules. To use this operation, you need to provide the entire map of rules. You can use the <code>DescribeIpRestriction</code> operation to get the current rule map.</p>
                */
            updateIpRestriction(args: UpdateIpRestrictionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIpRestrictionCommandOutput>;
            updateIpRestriction(args: UpdateIpRestrictionCommandInput, cb: (err: any, data?: UpdateIpRestrictionCommandOutput) => void): void;
            updateIpRestriction(args: UpdateIpRestrictionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIpRestrictionCommandOutput) => void): void;
            /**
                * <p>Use the <code>UpdatePublicSharingSettings</code> operation to turn on or turn off the
                *             public sharing settings of an Amazon QuickSight dashboard.</p>
                *          <p>To use this operation, turn on session capacity pricing for your Amazon QuickSight
                *             account.</p>
                *          <p>Before you can turn on public sharing on your account, make sure to give public sharing
                *             permissions to an administrative user in the Identity and Access Management (IAM)
                *             console. For more information on using IAM with Amazon QuickSight, see
                *                 <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html">Using Amazon QuickSight with IAM</a> in the <i>Amazon QuickSight
                *                 User Guide</i>.</p>
                */
            updatePublicSharingSettings(args: UpdatePublicSharingSettingsCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePublicSharingSettingsCommandOutput>;
            updatePublicSharingSettings(args: UpdatePublicSharingSettingsCommandInput, cb: (err: any, data?: UpdatePublicSharingSettingsCommandOutput) => void): void;
            updatePublicSharingSettings(args: UpdatePublicSharingSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePublicSharingSettingsCommandOutput) => void): void;
            /**
                * <p>Updates a template from an existing Amazon QuickSight analysis or another template.</p>
                */
            updateTemplate(args: UpdateTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTemplateCommandOutput>;
            updateTemplate(args: UpdateTemplateCommandInput, cb: (err: any, data?: UpdateTemplateCommandOutput) => void): void;
            updateTemplate(args: UpdateTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTemplateCommandOutput) => void): void;
            /**
                * <p>Updates the template alias of a template.</p>
                */
            updateTemplateAlias(args: UpdateTemplateAliasCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTemplateAliasCommandOutput>;
            updateTemplateAlias(args: UpdateTemplateAliasCommandInput, cb: (err: any, data?: UpdateTemplateAliasCommandOutput) => void): void;
            updateTemplateAlias(args: UpdateTemplateAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTemplateAliasCommandOutput) => void): void;
            /**
                * <p>Updates the resource permissions for a template.</p>
                */
            updateTemplatePermissions(args: UpdateTemplatePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTemplatePermissionsCommandOutput>;
            updateTemplatePermissions(args: UpdateTemplatePermissionsCommandInput, cb: (err: any, data?: UpdateTemplatePermissionsCommandOutput) => void): void;
            updateTemplatePermissions(args: UpdateTemplatePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTemplatePermissionsCommandOutput) => void): void;
            /**
                * <p>Updates a theme.</p>
                */
            updateTheme(args: UpdateThemeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateThemeCommandOutput>;
            updateTheme(args: UpdateThemeCommandInput, cb: (err: any, data?: UpdateThemeCommandOutput) => void): void;
            updateTheme(args: UpdateThemeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateThemeCommandOutput) => void): void;
            /**
                * <p>Updates an alias of a theme.</p>
                */
            updateThemeAlias(args: UpdateThemeAliasCommandInput, options?: __HttpHandlerOptions): Promise<UpdateThemeAliasCommandOutput>;
            updateThemeAlias(args: UpdateThemeAliasCommandInput, cb: (err: any, data?: UpdateThemeAliasCommandOutput) => void): void;
            updateThemeAlias(args: UpdateThemeAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateThemeAliasCommandOutput) => void): void;
            /**
                * <p>Updates the resource permissions for a theme. Permissions apply to the action to grant or
                * 			revoke permissions on, for example <code>"quicksight:DescribeTheme"</code>.</p>
                * 		       <p>Theme permissions apply in groupings. Valid groupings include the following for the three
                * 			levels of permissions, which are user, owner, or no permissions: </p>
                * 			      <ul>
                *             <li>
                *                <p>User</p>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:DescribeTheme"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:DescribeThemeAlias"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:ListThemeAliases"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:ListThemeVersions"</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 				        </li>
                *             <li>
                *                <p>Owner</p>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:DescribeTheme"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:DescribeThemeAlias"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:ListThemeAliases"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:ListThemeVersions"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:DeleteTheme"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:UpdateTheme"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:CreateThemeAlias"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:DeleteThemeAlias"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:UpdateThemeAlias"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:UpdateThemePermissions"</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"quicksight:DescribeThemePermissions"</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 				        </li>
                *             <li>
                *                <p>To specify no permissions, omit the permissions list.</p>
                *             </li>
                *          </ul>
                */
            updateThemePermissions(args: UpdateThemePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateThemePermissionsCommandOutput>;
            updateThemePermissions(args: UpdateThemePermissionsCommandInput, cb: (err: any, data?: UpdateThemePermissionsCommandOutput) => void): void;
            updateThemePermissions(args: UpdateThemePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateThemePermissionsCommandOutput) => void): void;
            /**
                * <p>Updates an Amazon QuickSight user.</p>
                */
            updateUser(args: UpdateUserCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserCommandOutput>;
            updateUser(args: UpdateUserCommandInput, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
            updateUser(args: UpdateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CancelIngestionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelIngestionRequest, CancelIngestionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CancelIngestionCommandInput extends CancelIngestionRequest {
    }
    export interface CancelIngestionCommandOutput extends CancelIngestionResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels an ongoing ingestion of data into SPICE.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CancelIngestionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CancelIngestionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CancelIngestionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelIngestionCommandInput} for command's `input` shape.
        * @see {@link CancelIngestionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CancelIngestionCommand extends $Command<CancelIngestionCommandInput, CancelIngestionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CancelIngestionCommandInput;
            constructor(input: CancelIngestionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelIngestionCommandInput, CancelIngestionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAccountCustomizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAccountCustomizationRequest, CreateAccountCustomizationResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateAccountCustomizationCommandInput extends CreateAccountCustomizationRequest {
    }
    export interface CreateAccountCustomizationCommandOutput extends CreateAccountCustomizationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, you can add a custom default theme by using the
        *                 <code>CreateAccountCustomization</code> or <code>UpdateAccountCustomization</code>
        *             API operation. To further customize Amazon QuickSight by removing Amazon QuickSight
        *             sample assets and videos for all new users, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html">Customizing Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i>
        *          </p>
        *         <p>You can create customizations for your Amazon Web Services account or, if you specify a namespace, for
        *             a QuickSight namespace instead. Customizations that apply to a namespace always override
        *             customizations that apply to an Amazon Web Services account. To find out which customizations apply, use
        *             the <code>DescribeAccountCustomization</code> API operation.</p>
        *         <p>Before you use the <code>CreateAccountCustomization</code> API operation to add a theme
        *             as the namespace default, make sure that you first share the theme with the namespace.
        *             If you don't share it with the namespace, the theme isn't visible to your users
        *             even if you make it the default theme.
        *             To check if the theme is shared, view the current permissions by using the
        *             <code>
        *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeThemePermissions.html">DescribeThemePermissions</a>
        *             </code>
        *             API operation.
        *             To share the theme, grant permissions by using the
        *             <code>
        *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateThemePermissions.html">UpdateThemePermissions</a>
        *             </code>
        *             API operation. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateAccountCustomizationCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateAccountCustomizationCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateAccountCustomizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAccountCustomizationCommandInput} for command's `input` shape.
        * @see {@link CreateAccountCustomizationCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateAccountCustomizationCommand extends $Command<CreateAccountCustomizationCommandInput, CreateAccountCustomizationCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateAccountCustomizationCommandInput;
            constructor(input: CreateAccountCustomizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAccountCustomizationCommandInput, CreateAccountCustomizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAccountSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAccountSubscriptionRequest, CreateAccountSubscriptionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateAccountSubscriptionCommandInput extends CreateAccountSubscriptionRequest {
    }
    export interface CreateAccountSubscriptionCommandOutput extends CreateAccountSubscriptionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon QuickSight account, or subscribes to Amazon QuickSight Q.</p>
        *
        *          <p>The Amazon Web Services Region for the account is derived from what is configured in the
        *           CLI or SDK. This operation isn't supported in the US East (Ohio) Region, South America (Sao Paulo) Region, or Asia
        *             Pacific (Singapore) Region.  </p>
        *
        *          <p>Before you use this operation, make sure that you can connect to an existing Amazon Web Services account. If you don't have an Amazon Web Services account, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/setting-up-aws-sign-up.html">Sign
        *                 up for Amazon Web Services</a> in the <i>Amazon QuickSight User
        *                 Guide</i>. The person who signs up for Amazon QuickSight needs to have the
        *             correct Identity and Access Management (IAM) permissions. For more information,
        *             see <a href="https://docs.aws.amazon.com/quicksight/latest/user/iam-policy-examples.html">IAM Policy Examples for Amazon QuickSight</a> in the
        *                     <i>Amazon QuickSight User Guide</i>.</p>
        *
        *          <p>If your IAM policy includes both the <code>Subscribe</code> and
        *                 <code>CreateAccountSubscription</code> actions, make sure that both actions are set
        *             to <code>Allow</code>. If either action is set to <code>Deny</code>, the
        *                 <code>Deny</code> action prevails and your API call fails.</p>
        *
        *          <p>You can't pass an existing IAM role to access other Amazon Web Services services using this API operation. To pass your existing IAM role to
        *                 Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html#security-create-iam-role">Passing IAM roles to Amazon QuickSight</a> in the
        *                     <i>Amazon QuickSight User Guide</i>.</p>
        *
        *          <p>You can't set default resource access on the new account from the Amazon QuickSight
        *             API. Instead, add default resource access from the Amazon QuickSight console. For more
        *             information about setting default resource access to Amazon Web Services services, see
        *                 <a href="https://docs.aws.amazon.com/quicksight/latest/user/scoping-policies-defaults.html">Setting default resource
        *                 access to Amazon Web Services services</a> in the <i>Amazon QuickSight
        *                 User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateAccountSubscriptionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateAccountSubscriptionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateAccountSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAccountSubscriptionCommandInput} for command's `input` shape.
        * @see {@link CreateAccountSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateAccountSubscriptionCommand extends $Command<CreateAccountSubscriptionCommandInput, CreateAccountSubscriptionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateAccountSubscriptionCommandInput;
            constructor(input: CreateAccountSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAccountSubscriptionCommandInput, CreateAccountSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAnalysisRequest, CreateAnalysisResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateAnalysisCommandInput extends CreateAnalysisRequest {
    }
    export interface CreateAnalysisCommandOutput extends CreateAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an analysis in Amazon QuickSight.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateAnalysisCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateAnalysisCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAnalysisCommandInput} for command's `input` shape.
        * @see {@link CreateAnalysisCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateAnalysisCommand extends $Command<CreateAnalysisCommandInput, CreateAnalysisCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateAnalysisCommandInput;
            constructor(input: CreateAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAnalysisCommandInput, CreateAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDashboardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDashboardRequest, CreateDashboardResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateDashboardCommandInput extends CreateDashboardRequest {
    }
    export interface CreateDashboardCommandOutput extends CreateDashboardResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a dashboard from a template. To first create a template, see the
        *         <code>
        *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>
        *             </code>
        *             API operation.</p>
        *         <p>A dashboard is an entity in Amazon QuickSight that identifies Amazon QuickSight reports, created
        *             from analyses. You can share Amazon QuickSight dashboards. With the right permissions, you can
        *             create scheduled email reports from them. If you have the correct permissions, you can
        *             create a dashboard from a template that exists in a different Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateDashboardCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateDashboardCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateDashboardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDashboardCommandInput} for command's `input` shape.
        * @see {@link CreateDashboardCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateDashboardCommand extends $Command<CreateDashboardCommandInput, CreateDashboardCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateDashboardCommandInput;
            constructor(input: CreateDashboardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDashboardCommandInput, CreateDashboardCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDataSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDataSetRequest, CreateDataSetResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateDataSetCommandInput extends CreateDataSetRequest {
    }
    export interface CreateDataSetCommandOutput extends CreateDataSetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a dataset. This operation doesn't support datasets that include uploaded files as a source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateDataSetCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateDataSetCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateDataSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataSetCommandInput} for command's `input` shape.
        * @see {@link CreateDataSetCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateDataSetCommand extends $Command<CreateDataSetCommandInput, CreateDataSetCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateDataSetCommandInput;
            constructor(input: CreateDataSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataSetCommandInput, CreateDataSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDataSourceRequest, CreateDataSourceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateDataSourceCommandInput extends CreateDataSourceRequest {
    }
    export interface CreateDataSourceCommandOutput extends CreateDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateDataSourceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateDataSourceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataSourceCommandInput} for command's `input` shape.
        * @see {@link CreateDataSourceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateDataSourceCommand extends $Command<CreateDataSourceCommandInput, CreateDataSourceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateDataSourceCommandInput;
            constructor(input: CreateDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataSourceCommandInput, CreateDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFolderRequest, CreateFolderResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateFolderCommandInput extends CreateFolderRequest {
    }
    export interface CreateFolderCommandOutput extends CreateFolderResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an empty shared folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateFolderCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateFolderCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFolderCommandInput} for command's `input` shape.
        * @see {@link CreateFolderCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateFolderCommand extends $Command<CreateFolderCommandInput, CreateFolderCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateFolderCommandInput;
            constructor(input: CreateFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFolderCommandInput, CreateFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateFolderMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFolderMembershipRequest, CreateFolderMembershipResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateFolderMembershipCommandInput extends CreateFolderMembershipRequest {
    }
    export interface CreateFolderMembershipCommandOutput extends CreateFolderMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Adds an asset, such as a dashboard, analysis, or dataset into a folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateFolderMembershipCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateFolderMembershipCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateFolderMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFolderMembershipCommandInput} for command's `input` shape.
        * @see {@link CreateFolderMembershipCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateFolderMembershipCommand extends $Command<CreateFolderMembershipCommandInput, CreateFolderMembershipCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateFolderMembershipCommandInput;
            constructor(input: CreateFolderMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFolderMembershipCommandInput, CreateFolderMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateGroupRequest, CreateGroupResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateGroupCommandInput extends CreateGroupRequest {
    }
    export interface CreateGroupCommandOutput extends CreateGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon QuickSight group.</p>
        * 		       <p>The permissions resource is
        * 					<code>arn:aws:quicksight:<your-region>:<i><relevant-aws-account-id></i>:group/default/<i><group-name></i>
        *             </code>.</p>
        * 		       <p>The response is a group object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateGroupCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateGroupCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupCommandInput} for command's `input` shape.
        * @see {@link CreateGroupCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateGroupCommand extends $Command<CreateGroupCommandInput, CreateGroupCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateGroupCommandInput;
            constructor(input: CreateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupCommandInput, CreateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateGroupMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateGroupMembershipRequest, CreateGroupMembershipResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateGroupMembershipCommandInput extends CreateGroupMembershipRequest {
    }
    export interface CreateGroupMembershipCommandOutput extends CreateGroupMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Adds an Amazon QuickSight user to an Amazon QuickSight group. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateGroupMembershipCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateGroupMembershipCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateGroupMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupMembershipCommandInput} for command's `input` shape.
        * @see {@link CreateGroupMembershipCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateGroupMembershipCommand extends $Command<CreateGroupMembershipCommandInput, CreateGroupMembershipCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateGroupMembershipCommandInput;
            constructor(input: CreateGroupMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupMembershipCommandInput, CreateGroupMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateIAMPolicyAssignmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateIAMPolicyAssignmentRequest, CreateIAMPolicyAssignmentResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateIAMPolicyAssignmentCommandInput extends CreateIAMPolicyAssignmentRequest {
    }
    export interface CreateIAMPolicyAssignmentCommandOutput extends CreateIAMPolicyAssignmentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name
        * 			(ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight.
        * 			Assignment names are unique per Amazon Web Services account. To avoid overwriting rules in other namespaces,
        * 			use assignment names that are unique.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateIAMPolicyAssignmentCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateIAMPolicyAssignmentCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateIAMPolicyAssignmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIAMPolicyAssignmentCommandInput} for command's `input` shape.
        * @see {@link CreateIAMPolicyAssignmentCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateIAMPolicyAssignmentCommand extends $Command<CreateIAMPolicyAssignmentCommandInput, CreateIAMPolicyAssignmentCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateIAMPolicyAssignmentCommandInput;
            constructor(input: CreateIAMPolicyAssignmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIAMPolicyAssignmentCommandInput, CreateIAMPolicyAssignmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateIngestionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateIngestionRequest, CreateIngestionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateIngestionCommandInput extends CreateIngestionRequest {
    }
    export interface CreateIngestionCommandOutput extends CreateIngestionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates and starts a new SPICE ingestion for a dataset. You can manually refresh datasets in
        * 			an Enterprise edition account 32 times in a 24-hour period. You can manually refresh
        * 			datasets in a Standard edition account 8 times in a 24-hour period. Each 24-hour period
        * 			is measured starting 24 hours before the current date and time.</p>
        *
        * 		       <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in
        * 			access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using
        * 				tags?</a> in the Amazon Web Services Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateIngestionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateIngestionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateIngestionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIngestionCommandInput} for command's `input` shape.
        * @see {@link CreateIngestionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateIngestionCommand extends $Command<CreateIngestionCommandInput, CreateIngestionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateIngestionCommandInput;
            constructor(input: CreateIngestionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIngestionCommandInput, CreateIngestionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateNamespaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateNamespaceRequest, CreateNamespaceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateNamespaceCommandInput extends CreateNamespaceRequest {
    }
    export interface CreateNamespaceCommandOutput extends CreateNamespaceResponse, __MetadataBearer {
    }
    /**
        * <p>(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.</p>
        *         <p>A namespace allows you to isolate the Amazon QuickSight users and groups that are registered
        *             for that namespace. Users that access the namespace can share assets only with other
        *             users or groups in the same namespace. They can't see users and groups in other
        *             namespaces. You can create a namespace after your Amazon Web Services account is subscribed to
        *             Amazon QuickSight. The namespace must be unique within the Amazon Web Services account. By default, there is a
        *             limit of 100 namespaces per Amazon Web Services account. To increase your limit, create a ticket with
        *             Amazon Web Services Support. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateNamespaceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateNamespaceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateNamespaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNamespaceCommandInput} for command's `input` shape.
        * @see {@link CreateNamespaceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateNamespaceCommand extends $Command<CreateNamespaceCommandInput, CreateNamespaceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateNamespaceCommandInput;
            constructor(input: CreateNamespaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNamespaceCommandInput, CreateNamespaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateTemplateAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTemplateAliasRequest, CreateTemplateAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateTemplateAliasCommandInput extends CreateTemplateAliasRequest {
    }
    export interface CreateTemplateAliasCommandOutput extends CreateTemplateAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a template alias for a template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateTemplateAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateTemplateAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateTemplateAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTemplateAliasCommandInput} for command's `input` shape.
        * @see {@link CreateTemplateAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateTemplateAliasCommand extends $Command<CreateTemplateAliasCommandInput, CreateTemplateAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateTemplateAliasCommandInput;
            constructor(input: CreateTemplateAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTemplateAliasCommandInput, CreateTemplateAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTemplateRequest, CreateTemplateResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateTemplateCommandInput extends CreateTemplateRequest {
    }
    export interface CreateTemplateCommandOutput extends CreateTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a template from an existing Amazon QuickSight analysis or template. You can use the resulting
        * 			template to create a dashboard.</p>
        * 		       <p>A <i>template</i> is an entity in Amazon QuickSight that encapsulates the metadata
        * 			required to create an analysis and that you can use to create s dashboard. A template adds
        * 			a layer of abstraction by using placeholders to replace the dataset associated with the
        * 			analysis. You can use templates to create dashboards by replacing dataset placeholders
        * 			with datasets that follow the same schema that was used to create the source analysis
        * 			and template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateTemplateCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateTemplateCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateTemplateCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateTemplateCommand extends $Command<CreateTemplateCommandInput, CreateTemplateCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateTemplateCommandInput;
            constructor(input: CreateTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTemplateCommandInput, CreateTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateThemeAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateThemeAliasRequest, CreateThemeAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateThemeAliasCommandInput extends CreateThemeAliasRequest {
    }
    export interface CreateThemeAliasCommandOutput extends CreateThemeAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a theme alias for a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateThemeAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateThemeAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateThemeAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateThemeAliasCommandInput} for command's `input` shape.
        * @see {@link CreateThemeAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateThemeAliasCommand extends $Command<CreateThemeAliasCommandInput, CreateThemeAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateThemeAliasCommandInput;
            constructor(input: CreateThemeAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateThemeAliasCommandInput, CreateThemeAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateThemeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateThemeRequest, CreateThemeResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface CreateThemeCommandInput extends CreateThemeRequest {
    }
    export interface CreateThemeCommandOutput extends CreateThemeResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a theme.</p>
        * 		       <p>A <i>theme</i> is set of configuration options for color and layout.
        * 			Themes apply to analyses and dashboards. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using
        * 			Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, CreateThemeCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, CreateThemeCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new CreateThemeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateThemeCommandInput} for command's `input` shape.
        * @see {@link CreateThemeCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class CreateThemeCommand extends $Command<CreateThemeCommandInput, CreateThemeCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: CreateThemeCommandInput;
            constructor(input: CreateThemeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateThemeCommandInput, CreateThemeCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteAccountCustomizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAccountCustomizationRequest, DeleteAccountCustomizationResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteAccountCustomizationCommandInput extends DeleteAccountCustomizationRequest {
    }
    export interface DeleteAccountCustomizationCommandOutput extends DeleteAccountCustomizationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes all Amazon QuickSight customizations in this Amazon Web Services Region for the specified
        *             Amazon Web Services account and Amazon QuickSight namespace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteAccountCustomizationCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteAccountCustomizationCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteAccountCustomizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAccountCustomizationCommandInput} for command's `input` shape.
        * @see {@link DeleteAccountCustomizationCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteAccountCustomizationCommand extends $Command<DeleteAccountCustomizationCommandInput, DeleteAccountCustomizationCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteAccountCustomizationCommandInput;
            constructor(input: DeleteAccountCustomizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAccountCustomizationCommandInput, DeleteAccountCustomizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAnalysisRequest, DeleteAnalysisResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteAnalysisCommandInput extends DeleteAnalysisRequest {
    }
    export interface DeleteAnalysisCommandOutput extends DeleteAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during
        *             which you can restore the analysis. If you don't specify a recovery window value, the
        *             operation defaults to 30 days. Amazon QuickSight attaches a <code>DeletionTime</code> stamp to
        *             the response that specifies the end of the recovery window. At the end of the recovery
        *             window, Amazon QuickSight deletes the analysis permanently.</p>
        *         <p>At any time before recovery window ends, you can use the <code>RestoreAnalysis</code>
        *             API operation to remove the <code>DeletionTime</code> stamp and cancel the deletion of
        *             the analysis. The analysis remains visible in the API until it's deleted, so you can
        *             describe it but you can't make a template from it.</p>
        *         <p>An analysis that's scheduled for deletion isn't accessible in the Amazon QuickSight console.
        *             To access it in the console, restore it. Deleting an analysis doesn't delete the
        *             dashboards that you publish from it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteAnalysisCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteAnalysisCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAnalysisCommandInput} for command's `input` shape.
        * @see {@link DeleteAnalysisCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteAnalysisCommand extends $Command<DeleteAnalysisCommandInput, DeleteAnalysisCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteAnalysisCommandInput;
            constructor(input: DeleteAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAnalysisCommandInput, DeleteAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDashboardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDashboardRequest, DeleteDashboardResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteDashboardCommandInput extends DeleteDashboardRequest {
    }
    export interface DeleteDashboardCommandOutput extends DeleteDashboardResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a dashboard.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteDashboardCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteDashboardCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteDashboardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDashboardCommandInput} for command's `input` shape.
        * @see {@link DeleteDashboardCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteDashboardCommand extends $Command<DeleteDashboardCommandInput, DeleteDashboardCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteDashboardCommandInput;
            constructor(input: DeleteDashboardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDashboardCommandInput, DeleteDashboardCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDataSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDataSetRequest, DeleteDataSetResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteDataSetCommandInput extends DeleteDataSetRequest {
    }
    export interface DeleteDataSetCommandOutput extends DeleteDataSetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteDataSetCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteDataSetCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteDataSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataSetCommandInput} for command's `input` shape.
        * @see {@link DeleteDataSetCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteDataSetCommand extends $Command<DeleteDataSetCommandInput, DeleteDataSetCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteDataSetCommandInput;
            constructor(input: DeleteDataSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataSetCommandInput, DeleteDataSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDataSourceRequest, DeleteDataSourceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteDataSourceCommandInput extends DeleteDataSourceRequest {
    }
    export interface DeleteDataSourceCommandOutput extends DeleteDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the data source permanently. This operation breaks
        * 			all the datasets that reference the deleted data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteDataSourceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteDataSourceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataSourceCommandInput} for command's `input` shape.
        * @see {@link DeleteDataSourceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteDataSourceCommand extends $Command<DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteDataSourceCommandInput;
            constructor(input: DeleteDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFolderRequest, DeleteFolderResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteFolderCommandInput extends DeleteFolderRequest {
    }
    export interface DeleteFolderCommandOutput extends DeleteFolderResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an empty folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteFolderCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteFolderCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFolderCommandInput} for command's `input` shape.
        * @see {@link DeleteFolderCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteFolderCommand extends $Command<DeleteFolderCommandInput, DeleteFolderCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteFolderCommandInput;
            constructor(input: DeleteFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFolderCommandInput, DeleteFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteFolderMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFolderMembershipRequest, DeleteFolderMembershipResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteFolderMembershipCommandInput extends DeleteFolderMembershipRequest {
    }
    export interface DeleteFolderMembershipCommandOutput extends DeleteFolderMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Removes an asset, such as a dashboard, analysis, or dataset, from a folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteFolderMembershipCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteFolderMembershipCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteFolderMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFolderMembershipCommandInput} for command's `input` shape.
        * @see {@link DeleteFolderMembershipCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteFolderMembershipCommand extends $Command<DeleteFolderMembershipCommandInput, DeleteFolderMembershipCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteFolderMembershipCommandInput;
            constructor(input: DeleteFolderMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFolderMembershipCommandInput, DeleteFolderMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteGroupRequest, DeleteGroupResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteGroupCommandInput extends DeleteGroupRequest {
    }
    export interface DeleteGroupCommandOutput extends DeleteGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a user group from Amazon QuickSight. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteGroupCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteGroupCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteGroupCommand extends $Command<DeleteGroupCommandInput, DeleteGroupCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteGroupCommandInput;
            constructor(input: DeleteGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupCommandInput, DeleteGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteGroupMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteGroupMembershipRequest, DeleteGroupMembershipResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteGroupMembershipCommandInput extends DeleteGroupMembershipRequest {
    }
    export interface DeleteGroupMembershipCommandOutput extends DeleteGroupMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a user from a group so that the user is no longer a member of the group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteGroupMembershipCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteGroupMembershipCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteGroupMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupMembershipCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupMembershipCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteGroupMembershipCommand extends $Command<DeleteGroupMembershipCommandInput, DeleteGroupMembershipCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteGroupMembershipCommandInput;
            constructor(input: DeleteGroupMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupMembershipCommandInput, DeleteGroupMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteIAMPolicyAssignmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteIAMPolicyAssignmentRequest, DeleteIAMPolicyAssignmentResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteIAMPolicyAssignmentCommandInput extends DeleteIAMPolicyAssignmentRequest {
    }
    export interface DeleteIAMPolicyAssignmentCommandOutput extends DeleteIAMPolicyAssignmentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing IAM policy assignment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteIAMPolicyAssignmentCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteIAMPolicyAssignmentCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteIAMPolicyAssignmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIAMPolicyAssignmentCommandInput} for command's `input` shape.
        * @see {@link DeleteIAMPolicyAssignmentCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteIAMPolicyAssignmentCommand extends $Command<DeleteIAMPolicyAssignmentCommandInput, DeleteIAMPolicyAssignmentCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteIAMPolicyAssignmentCommandInput;
            constructor(input: DeleteIAMPolicyAssignmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIAMPolicyAssignmentCommandInput, DeleteIAMPolicyAssignmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteNamespaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteNamespaceRequest, DeleteNamespaceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteNamespaceCommandInput extends DeleteNamespaceRequest {
    }
    export interface DeleteNamespaceCommandOutput extends DeleteNamespaceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a namespace and the users and groups that are associated with the namespace.
        *         This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not
        *         deleted. To delete these assets, you use the API operations for the relevant asset. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteNamespaceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteNamespaceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteNamespaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNamespaceCommandInput} for command's `input` shape.
        * @see {@link DeleteNamespaceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteNamespaceCommand extends $Command<DeleteNamespaceCommandInput, DeleteNamespaceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteNamespaceCommandInput;
            constructor(input: DeleteNamespaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNamespaceCommandInput, DeleteNamespaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteTemplateAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTemplateAliasRequest, DeleteTemplateAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteTemplateAliasCommandInput extends DeleteTemplateAliasRequest {
    }
    export interface DeleteTemplateAliasCommandOutput extends DeleteTemplateAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the item that the specified template alias points to. If you provide a specific
        * 			alias, you delete the version of the template that the alias points to.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteTemplateAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteTemplateAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteTemplateAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTemplateAliasCommandInput} for command's `input` shape.
        * @see {@link DeleteTemplateAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteTemplateAliasCommand extends $Command<DeleteTemplateAliasCommandInput, DeleteTemplateAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteTemplateAliasCommandInput;
            constructor(input: DeleteTemplateAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTemplateAliasCommandInput, DeleteTemplateAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTemplateRequest, DeleteTemplateResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteTemplateCommandInput extends DeleteTemplateRequest {
    }
    export interface DeleteTemplateCommandOutput extends DeleteTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteTemplateCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteTemplateCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteTemplateCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteTemplateCommand extends $Command<DeleteTemplateCommandInput, DeleteTemplateCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteTemplateCommandInput;
            constructor(input: DeleteTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTemplateCommandInput, DeleteTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteThemeAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteThemeAliasRequest, DeleteThemeAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteThemeAliasCommandInput extends DeleteThemeAliasRequest {
    }
    export interface DeleteThemeAliasCommandOutput extends DeleteThemeAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the version of the theme that the specified theme alias points to.
        * 			If you provide a specific alias, you delete the version of the theme
        * 			that the alias points to.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteThemeAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteThemeAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteThemeAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteThemeAliasCommandInput} for command's `input` shape.
        * @see {@link DeleteThemeAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteThemeAliasCommand extends $Command<DeleteThemeAliasCommandInput, DeleteThemeAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteThemeAliasCommandInput;
            constructor(input: DeleteThemeAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteThemeAliasCommandInput, DeleteThemeAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteThemeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteThemeRequest, DeleteThemeResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteThemeCommandInput extends DeleteThemeRequest {
    }
    export interface DeleteThemeCommandOutput extends DeleteThemeResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteThemeCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteThemeCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteThemeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteThemeCommandInput} for command's `input` shape.
        * @see {@link DeleteThemeCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteThemeCommand extends $Command<DeleteThemeCommandInput, DeleteThemeCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteThemeCommandInput;
            constructor(input: DeleteThemeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteThemeCommandInput, DeleteThemeCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteUserByPrincipalIdCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteUserByPrincipalIdRequest, DeleteUserByPrincipalIdResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteUserByPrincipalIdCommandInput extends DeleteUserByPrincipalIdRequest {
    }
    export interface DeleteUserByPrincipalIdCommandOutput extends DeleteUserByPrincipalIdResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a user identified by its principal ID. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteUserByPrincipalIdCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteUserByPrincipalIdCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteUserByPrincipalIdCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserByPrincipalIdCommandInput} for command's `input` shape.
        * @see {@link DeleteUserByPrincipalIdCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteUserByPrincipalIdCommand extends $Command<DeleteUserByPrincipalIdCommandInput, DeleteUserByPrincipalIdCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteUserByPrincipalIdCommandInput;
            constructor(input: DeleteUserByPrincipalIdCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserByPrincipalIdCommandInput, DeleteUserByPrincipalIdCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteUserRequest, DeleteUserResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DeleteUserCommandInput extends DeleteUserRequest {
    }
    export interface DeleteUserCommandOutput extends DeleteUserResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the Amazon QuickSight user that is associated with the identity of the
        * 			Identity and Access Management (IAM) user or role that's making the call. The IAM user
        * 			isn't deleted as a result of this call. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DeleteUserCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DeleteUserCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DeleteUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserCommandInput} for command's `input` shape.
        * @see {@link DeleteUserCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DeleteUserCommand extends $Command<DeleteUserCommandInput, DeleteUserCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DeleteUserCommandInput;
            constructor(input: DeleteUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserCommandInput, DeleteUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountCustomizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAccountCustomizationRequest, DescribeAccountCustomizationResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeAccountCustomizationCommandInput extends DescribeAccountCustomizationRequest {
    }
    export interface DescribeAccountCustomizationCommandOutput extends DescribeAccountCustomizationResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the customizations associated with the provided Amazon Web Services account and Amazon
        *             Amazon QuickSight namespace in an Amazon Web Services Region. The Amazon QuickSight console evaluates which
        *             customizations to apply by running this API operation with the <code>Resolved</code> flag
        *             included. </p>
        *         <p>To determine what customizations display when you run this command, it can help to
        *             visualize the relationship of the entities involved. </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>Amazon Web Services account</code> - The Amazon Web Services account exists at the top of the hierarchy.
        *                     It has the potential to use all of the Amazon Web Services Regions and Amazon Web Services Services. When you
        *                     subscribe to Amazon QuickSight, you choose one Amazon Web Services Region to use as your home Region.
        *                     That's where your free SPICE capacity is located. You can use Amazon QuickSight in any
        *                     supported Amazon Web Services Region. </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Amazon Web Services Region</code> - In each Amazon Web Services Region where you sign in to Amazon QuickSight
        *                     at least once, Amazon QuickSight acts as a separate instance of the same service. If
        *                     you have a user directory, it resides in us-east-1, which is the US East (N.
        *                     Virginia). Generally speaking, these users have access to Amazon QuickSight in any
        *                     Amazon Web Services Region, unless they are constrained to a namespace. </p>
        *                 <p>To run the command in a different Amazon Web Services Region, you change your Region settings.
        *                     If you're using the CLI, you can use one of the following options:</p>
        *                 <ul>
        *                   <li>
        *                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html">command line options</a>. </p>
        *                     </li>
        *                   <li>
        *                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">named profiles</a>. </p>
        *                     </li>
        *                   <li>
        *                         <p>Run <code>aws configure</code> to change your default Amazon Web Services Region. Use
        *                             Enter to key the same settings for your keys. For more information, see
        *                             <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">Configuring the CLI</a>.</p>
        *                     </li>
        *                </ul>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Namespace</code> - A QuickSight namespace is a partition that contains
        *                     users and assets (data sources, datasets, dashboards, and so on). To access
        *                     assets that are in a specific namespace, users and groups must also be part of
        *                     the same namespace. People who share a namespace are completely isolated from
        *                     users and assets in other namespaces, even if they are in the same Amazon Web Services account
        *                     and Amazon Web Services Region.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Applied customizations</code> -  Within an Amazon Web Services Region, a set of
        *                     Amazon QuickSight customizations can apply to an Amazon Web Services account or to a namespace.
        *                     Settings that you apply to a namespace override settings that you apply to an
        *                     Amazon Web Services account. All settings are isolated to a single Amazon Web Services Region. To apply them in
        *                     other Amazon Web Services Regions, run the <code>CreateAccountCustomization</code> command in
        *                     each Amazon Web Services Region where you want to apply the same customizations. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeAccountCustomizationCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeAccountCustomizationCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeAccountCustomizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountCustomizationCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountCustomizationCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeAccountCustomizationCommand extends $Command<DescribeAccountCustomizationCommandInput, DescribeAccountCustomizationCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeAccountCustomizationCommandInput;
            constructor(input: DescribeAccountCustomizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountCustomizationCommandInput, DescribeAccountCustomizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAccountSettingsRequest, DescribeAccountSettingsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeAccountSettingsCommandInput extends DescribeAccountSettingsRequest {
    }
    export interface DescribeAccountSettingsCommandOutput extends DescribeAccountSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the settings that were used when your Amazon QuickSight subscription was first
        *             created in this Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeAccountSettingsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeAccountSettingsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeAccountSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountSettingsCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountSettingsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeAccountSettingsCommand extends $Command<DescribeAccountSettingsCommandInput, DescribeAccountSettingsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeAccountSettingsCommandInput;
            constructor(input: DescribeAccountSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountSettingsCommandInput, DescribeAccountSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAccountSubscriptionRequest, DescribeAccountSubscriptionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeAccountSubscriptionCommandInput extends DescribeAccountSubscriptionRequest {
    }
    export interface DescribeAccountSubscriptionCommandOutput extends DescribeAccountSubscriptionResponse, __MetadataBearer {
    }
    /**
        * <p>Use the DescribeAccountSubscription operation to receive a description of a Amazon QuickSight account's subscription. A successful API call returns an <code>AccountInfo</code> object that includes an account's name, subscription status, authentication type, edition, and notification email address.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeAccountSubscriptionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeAccountSubscriptionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeAccountSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountSubscriptionCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeAccountSubscriptionCommand extends $Command<DescribeAccountSubscriptionCommandInput, DescribeAccountSubscriptionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeAccountSubscriptionCommandInput;
            constructor(input: DescribeAccountSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountSubscriptionCommandInput, DescribeAccountSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAnalysisRequest, DescribeAnalysisResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeAnalysisCommandInput extends DescribeAnalysisRequest {
    }
    export interface DescribeAnalysisCommandOutput extends DescribeAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a summary of the metadata for an analysis.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeAnalysisCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeAnalysisCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAnalysisCommandInput} for command's `input` shape.
        * @see {@link DescribeAnalysisCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeAnalysisCommand extends $Command<DescribeAnalysisCommandInput, DescribeAnalysisCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeAnalysisCommandInput;
            constructor(input: DescribeAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAnalysisCommandInput, DescribeAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAnalysisPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAnalysisPermissionsRequest, DescribeAnalysisPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeAnalysisPermissionsCommandInput extends DescribeAnalysisPermissionsRequest {
    }
    export interface DescribeAnalysisPermissionsCommandOutput extends DescribeAnalysisPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides the read and write permissions for an analysis.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeAnalysisPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeAnalysisPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeAnalysisPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAnalysisPermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeAnalysisPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeAnalysisPermissionsCommand extends $Command<DescribeAnalysisPermissionsCommandInput, DescribeAnalysisPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeAnalysisPermissionsCommandInput;
            constructor(input: DescribeAnalysisPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAnalysisPermissionsCommandInput, DescribeAnalysisPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDashboardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDashboardRequest, DescribeDashboardResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeDashboardCommandInput extends DescribeDashboardRequest {
    }
    export interface DescribeDashboardCommandOutput extends DescribeDashboardResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a summary for a dashboard.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeDashboardCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeDashboardCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeDashboardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDashboardCommandInput} for command's `input` shape.
        * @see {@link DescribeDashboardCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeDashboardCommand extends $Command<DescribeDashboardCommandInput, DescribeDashboardCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeDashboardCommandInput;
            constructor(input: DescribeDashboardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDashboardCommandInput, DescribeDashboardCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDashboardPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDashboardPermissionsRequest, DescribeDashboardPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeDashboardPermissionsCommandInput extends DescribeDashboardPermissionsRequest {
    }
    export interface DescribeDashboardPermissionsCommandOutput extends DescribeDashboardPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes read and write permissions for a dashboard.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeDashboardPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeDashboardPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeDashboardPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDashboardPermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeDashboardPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeDashboardPermissionsCommand extends $Command<DescribeDashboardPermissionsCommandInput, DescribeDashboardPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeDashboardPermissionsCommandInput;
            constructor(input: DescribeDashboardPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDashboardPermissionsCommandInput, DescribeDashboardPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDataSetRequest, DescribeDataSetResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeDataSetCommandInput extends DescribeDataSetRequest {
    }
    export interface DescribeDataSetCommandOutput extends DescribeDataSetResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a dataset. This operation doesn't support datasets that include uploaded files as a source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeDataSetCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeDataSetCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeDataSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDataSetCommandInput} for command's `input` shape.
        * @see {@link DescribeDataSetCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeDataSetCommand extends $Command<DescribeDataSetCommandInput, DescribeDataSetCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeDataSetCommandInput;
            constructor(input: DescribeDataSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDataSetCommandInput, DescribeDataSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSetPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDataSetPermissionsRequest, DescribeDataSetPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeDataSetPermissionsCommandInput extends DescribeDataSetPermissionsRequest {
    }
    export interface DescribeDataSetPermissionsCommandOutput extends DescribeDataSetPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the permissions on a dataset.</p>
        * 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeDataSetPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeDataSetPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeDataSetPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDataSetPermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeDataSetPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeDataSetPermissionsCommand extends $Command<DescribeDataSetPermissionsCommandInput, DescribeDataSetPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeDataSetPermissionsCommandInput;
            constructor(input: DescribeDataSetPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDataSetPermissionsCommandInput, DescribeDataSetPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDataSourceRequest, DescribeDataSourceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeDataSourceCommandInput extends DescribeDataSourceRequest {
    }
    export interface DescribeDataSourceCommandOutput extends DescribeDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeDataSourceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeDataSourceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDataSourceCommandInput} for command's `input` shape.
        * @see {@link DescribeDataSourceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeDataSourceCommand extends $Command<DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeDataSourceCommandInput;
            constructor(input: DescribeDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSourcePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDataSourcePermissionsRequest, DescribeDataSourcePermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeDataSourcePermissionsCommandInput extends DescribeDataSourcePermissionsRequest {
    }
    export interface DescribeDataSourcePermissionsCommandOutput extends DescribeDataSourcePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the resource permissions for a data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeDataSourcePermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeDataSourcePermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeDataSourcePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDataSourcePermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeDataSourcePermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeDataSourcePermissionsCommand extends $Command<DescribeDataSourcePermissionsCommandInput, DescribeDataSourcePermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeDataSourcePermissionsCommandInput;
            constructor(input: DescribeDataSourcePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDataSourcePermissionsCommandInput, DescribeDataSourcePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFolderRequest, DescribeFolderResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeFolderCommandInput extends DescribeFolderRequest {
    }
    export interface DescribeFolderCommandOutput extends DescribeFolderResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeFolderCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeFolderCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFolderCommandInput} for command's `input` shape.
        * @see {@link DescribeFolderCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeFolderCommand extends $Command<DescribeFolderCommandInput, DescribeFolderCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeFolderCommandInput;
            constructor(input: DescribeFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFolderCommandInput, DescribeFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFolderPermissionsRequest, DescribeFolderPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeFolderPermissionsCommandInput extends DescribeFolderPermissionsRequest {
    }
    export interface DescribeFolderPermissionsCommandOutput extends DescribeFolderPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes permissions for a folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeFolderPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeFolderPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeFolderPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFolderPermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeFolderPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeFolderPermissionsCommand extends $Command<DescribeFolderPermissionsCommandInput, DescribeFolderPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeFolderPermissionsCommandInput;
            constructor(input: DescribeFolderPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFolderPermissionsCommandInput, DescribeFolderPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderResolvedPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFolderResolvedPermissionsRequest, DescribeFolderResolvedPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeFolderResolvedPermissionsCommandInput extends DescribeFolderResolvedPermissionsRequest {
    }
    export interface DescribeFolderResolvedPermissionsCommandOutput extends DescribeFolderResolvedPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the folder resolved permissions. Permissions consists of both folder direct permissions and the inherited permissions from the ancestor folders.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeFolderResolvedPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeFolderResolvedPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeFolderResolvedPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFolderResolvedPermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeFolderResolvedPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeFolderResolvedPermissionsCommand extends $Command<DescribeFolderResolvedPermissionsCommandInput, DescribeFolderResolvedPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeFolderResolvedPermissionsCommandInput;
            constructor(input: DescribeFolderResolvedPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFolderResolvedPermissionsCommandInput, DescribeFolderResolvedPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeGroupRequest, DescribeGroupResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeGroupCommandInput extends DescribeGroupRequest {
    }
    export interface DescribeGroupCommandOutput extends DescribeGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN). </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeGroupCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeGroupCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeGroupCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeGroupCommand extends $Command<DescribeGroupCommandInput, DescribeGroupCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeGroupCommandInput;
            constructor(input: DescribeGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeGroupCommandInput, DescribeGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeGroupMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeGroupMembershipRequest, DescribeGroupMembershipResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeGroupMembershipCommandInput extends DescribeGroupMembershipRequest {
    }
    export interface DescribeGroupMembershipCommandOutput extends DescribeGroupMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Use the <code>DescribeGroupMembership</code> operation to determine if a user is a
        * 			member of the specified group. If the user exists and is a member of the specified
        * 			group, an associated <code>GroupMember</code> object is returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeGroupMembershipCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeGroupMembershipCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeGroupMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeGroupMembershipCommandInput} for command's `input` shape.
        * @see {@link DescribeGroupMembershipCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeGroupMembershipCommand extends $Command<DescribeGroupMembershipCommandInput, DescribeGroupMembershipCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeGroupMembershipCommandInput;
            constructor(input: DescribeGroupMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeGroupMembershipCommandInput, DescribeGroupMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIAMPolicyAssignmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeIAMPolicyAssignmentRequest, DescribeIAMPolicyAssignmentResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeIAMPolicyAssignmentCommandInput extends DescribeIAMPolicyAssignmentRequest {
    }
    export interface DescribeIAMPolicyAssignmentCommandOutput extends DescribeIAMPolicyAssignmentResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an existing IAM policy assignment, as specified by the assignment name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeIAMPolicyAssignmentCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeIAMPolicyAssignmentCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeIAMPolicyAssignmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIAMPolicyAssignmentCommandInput} for command's `input` shape.
        * @see {@link DescribeIAMPolicyAssignmentCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeIAMPolicyAssignmentCommand extends $Command<DescribeIAMPolicyAssignmentCommandInput, DescribeIAMPolicyAssignmentCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeIAMPolicyAssignmentCommandInput;
            constructor(input: DescribeIAMPolicyAssignmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIAMPolicyAssignmentCommandInput, DescribeIAMPolicyAssignmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIngestionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeIngestionRequest, DescribeIngestionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeIngestionCommandInput extends DescribeIngestionRequest {
    }
    export interface DescribeIngestionCommandOutput extends DescribeIngestionResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a SPICE ingestion.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeIngestionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeIngestionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeIngestionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIngestionCommandInput} for command's `input` shape.
        * @see {@link DescribeIngestionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeIngestionCommand extends $Command<DescribeIngestionCommandInput, DescribeIngestionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeIngestionCommandInput;
            constructor(input: DescribeIngestionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIngestionCommandInput, DescribeIngestionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIpRestrictionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeIpRestrictionRequest, DescribeIpRestrictionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeIpRestrictionCommandInput extends DescribeIpRestrictionRequest {
    }
    export interface DescribeIpRestrictionCommandOutput extends DescribeIpRestrictionResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a summary and status of IP rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeIpRestrictionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeIpRestrictionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeIpRestrictionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIpRestrictionCommandInput} for command's `input` shape.
        * @see {@link DescribeIpRestrictionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeIpRestrictionCommand extends $Command<DescribeIpRestrictionCommandInput, DescribeIpRestrictionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeIpRestrictionCommandInput;
            constructor(input: DescribeIpRestrictionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIpRestrictionCommandInput, DescribeIpRestrictionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeNamespaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeNamespaceRequest, DescribeNamespaceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeNamespaceCommandInput extends DescribeNamespaceRequest {
    }
    export interface DescribeNamespaceCommandOutput extends DescribeNamespaceResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the current namespace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeNamespaceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeNamespaceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeNamespaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNamespaceCommandInput} for command's `input` shape.
        * @see {@link DescribeNamespaceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeNamespaceCommand extends $Command<DescribeNamespaceCommandInput, DescribeNamespaceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeNamespaceCommandInput;
            constructor(input: DescribeNamespaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNamespaceCommandInput, DescribeNamespaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplateAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTemplateAliasRequest, DescribeTemplateAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeTemplateAliasCommandInput extends DescribeTemplateAliasRequest {
    }
    export interface DescribeTemplateAliasCommandOutput extends DescribeTemplateAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the template alias for a template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeTemplateAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeTemplateAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeTemplateAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTemplateAliasCommandInput} for command's `input` shape.
        * @see {@link DescribeTemplateAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeTemplateAliasCommand extends $Command<DescribeTemplateAliasCommandInput, DescribeTemplateAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeTemplateAliasCommandInput;
            constructor(input: DescribeTemplateAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTemplateAliasCommandInput, DescribeTemplateAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTemplateRequest, DescribeTemplateResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeTemplateCommandInput extends DescribeTemplateRequest {
    }
    export interface DescribeTemplateCommandOutput extends DescribeTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a template's metadata.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeTemplateCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeTemplateCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTemplateCommandInput} for command's `input` shape.
        * @see {@link DescribeTemplateCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeTemplateCommand extends $Command<DescribeTemplateCommandInput, DescribeTemplateCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeTemplateCommandInput;
            constructor(input: DescribeTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTemplateCommandInput, DescribeTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplatePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTemplatePermissionsRequest, DescribeTemplatePermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeTemplatePermissionsCommandInput extends DescribeTemplatePermissionsRequest {
    }
    export interface DescribeTemplatePermissionsCommandOutput extends DescribeTemplatePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes read and write permissions on a template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeTemplatePermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeTemplatePermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeTemplatePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTemplatePermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeTemplatePermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeTemplatePermissionsCommand extends $Command<DescribeTemplatePermissionsCommandInput, DescribeTemplatePermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeTemplatePermissionsCommandInput;
            constructor(input: DescribeTemplatePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTemplatePermissionsCommandInput, DescribeTemplatePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemeAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeThemeAliasRequest, DescribeThemeAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeThemeAliasCommandInput extends DescribeThemeAliasRequest {
    }
    export interface DescribeThemeAliasCommandOutput extends DescribeThemeAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the alias for a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeThemeAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeThemeAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeThemeAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeThemeAliasCommandInput} for command's `input` shape.
        * @see {@link DescribeThemeAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeThemeAliasCommand extends $Command<DescribeThemeAliasCommandInput, DescribeThemeAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeThemeAliasCommandInput;
            constructor(input: DescribeThemeAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeThemeAliasCommandInput, DescribeThemeAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeThemeRequest } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { DescribeThemeResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeThemeCommandInput extends DescribeThemeRequest {
    }
    export interface DescribeThemeCommandOutput extends DescribeThemeResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeThemeCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeThemeCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeThemeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeThemeCommandInput} for command's `input` shape.
        * @see {@link DescribeThemeCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeThemeCommand extends $Command<DescribeThemeCommandInput, DescribeThemeCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeThemeCommandInput;
            constructor(input: DescribeThemeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeThemeCommandInput, DescribeThemeCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeThemePermissionsRequest, DescribeThemePermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeThemePermissionsCommandInput extends DescribeThemePermissionsRequest {
    }
    export interface DescribeThemePermissionsCommandOutput extends DescribeThemePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the read and write permissions for a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeThemePermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeThemePermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeThemePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeThemePermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeThemePermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeThemePermissionsCommand extends $Command<DescribeThemePermissionsCommandInput, DescribeThemePermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeThemePermissionsCommandInput;
            constructor(input: DescribeThemePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeThemePermissionsCommandInput, DescribeThemePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeUserRequest, DescribeUserResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface DescribeUserCommandInput extends DescribeUserRequest {
    }
    export interface DescribeUserCommandOutput extends DescribeUserResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a user, given the user name. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, DescribeUserCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, DescribeUserCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new DescribeUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserCommandInput} for command's `input` shape.
        * @see {@link DescribeUserCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class DescribeUserCommand extends $Command<DescribeUserCommandInput, DescribeUserCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: DescribeUserCommandInput;
            constructor(input: DescribeUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserCommandInput, DescribeUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GenerateEmbedUrlForAnonymousUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GenerateEmbedUrlForAnonymousUserRequest, GenerateEmbedUrlForAnonymousUserResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface GenerateEmbedUrlForAnonymousUserCommandInput extends GenerateEmbedUrlForAnonymousUserRequest {
    }
    export interface GenerateEmbedUrlForAnonymousUserCommandOutput extends GenerateEmbedUrlForAnonymousUserResponse, __MetadataBearer {
    }
    /**
        * <p>Generates an embed URL that you can use to embed an Amazon QuickSight dashboard in your website, without having to register any reader users. Before you use this action, make sure that you have configured the dashboards and permissions.</p>
        *         <p>The following rules apply to the generated URL:</p>
        *         <ul>
        *             <li>
        *                 <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p>
        *             </li>
        *             <li>
        *                 <p>The URL validity period should not be confused with the actual session lifetime that can be customized using the <code>
        *                      <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForAnonymousUser.html#QS-GenerateEmbedUrlForAnonymousUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a>
        *                   </code> parameter. The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p>
        *             </li>
        *             <li>
        *                 <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p>
        *             </li>
        *          </ul>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User
        *             Guide</i>.</p>
        *         <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, GenerateEmbedUrlForAnonymousUserCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, GenerateEmbedUrlForAnonymousUserCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new GenerateEmbedUrlForAnonymousUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateEmbedUrlForAnonymousUserCommandInput} for command's `input` shape.
        * @see {@link GenerateEmbedUrlForAnonymousUserCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class GenerateEmbedUrlForAnonymousUserCommand extends $Command<GenerateEmbedUrlForAnonymousUserCommandInput, GenerateEmbedUrlForAnonymousUserCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: GenerateEmbedUrlForAnonymousUserCommandInput;
            constructor(input: GenerateEmbedUrlForAnonymousUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateEmbedUrlForAnonymousUserCommandInput, GenerateEmbedUrlForAnonymousUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GenerateEmbedUrlForRegisteredUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GenerateEmbedUrlForRegisteredUserRequest, GenerateEmbedUrlForRegisteredUserResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface GenerateEmbedUrlForRegisteredUserCommandInput extends GenerateEmbedUrlForRegisteredUserRequest {
    }
    export interface GenerateEmbedUrlForRegisteredUserCommandOutput extends GenerateEmbedUrlForRegisteredUserResponse, __MetadataBearer {
    }
    /**
        * <p>Generates an embed URL that you can use to embed an Amazon QuickSight experience in your website. This action can be used for any type of user registered in an Amazon QuickSight account.
        *             Before you use this action, make sure that you have configured the relevant Amazon QuickSight resource and permissions.</p>
        *         <p>The following rules apply to the generated URL:</p>
        *         <ul>
        *             <li>
        *                 <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p>
        *             </li>
        *             <li>
        *                 <p>The URL validity period should not be confused with the actual session lifetime
        *         that can be customized using the <code>
        *                      <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForRegisteredUser.html#QS-GenerateEmbedUrlForRegisteredUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a>
        *                   </code> parameter.</p>
        *                 <p>The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p>
        *             </li>
        *             <li>
        *                 <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p>
        *             </li>
        *          </ul>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User
        *             Guide</i>.</p>
        *             <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, GenerateEmbedUrlForRegisteredUserCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, GenerateEmbedUrlForRegisteredUserCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new GenerateEmbedUrlForRegisteredUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateEmbedUrlForRegisteredUserCommandInput} for command's `input` shape.
        * @see {@link GenerateEmbedUrlForRegisteredUserCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class GenerateEmbedUrlForRegisteredUserCommand extends $Command<GenerateEmbedUrlForRegisteredUserCommandInput, GenerateEmbedUrlForRegisteredUserCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: GenerateEmbedUrlForRegisteredUserCommandInput;
            constructor(input: GenerateEmbedUrlForRegisteredUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateEmbedUrlForRegisteredUserCommandInput, GenerateEmbedUrlForRegisteredUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GetDashboardEmbedUrlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDashboardEmbedUrlRequest, GetDashboardEmbedUrlResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface GetDashboardEmbedUrlCommandInput extends GetDashboardEmbedUrlRequest {
    }
    export interface GetDashboardEmbedUrlCommandOutput extends GetDashboardEmbedUrlResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a temporary session URL and authorization code that you can use to embed an Amazon QuickSight read-only dashboard in your website or application. Before you use this command, make sure that you have configured the dashboards and permissions. </p>
        *         <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not from the user's browser. The following rules apply to the generated URL:</p>
        *         <ul>
        *             <li>
        *                 <p>They must be used together.</p>
        *             </li>
        *             <li>
        *                 <p>They can be used one time only.</p>
        *             </li>
        *             <li>
        *                 <p>They are valid for 5 minutes after you run this command.</p>
        *             </li>
        *             <li>
        *                 <p>The resulting user session is valid for 15 minutes (default) up to 10 hours (maximum). You can use the optional <code>SessionLifetimeInMinutes</code> parameter to customi session duration.</p>
        *             </li>
        *          </ul>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics-deprecated.html">Embedding Analytics Using GetDashboardEmbedUrl</a> in the <i>Amazon QuickSight User
        *             Guide</i>.</p>
        *             <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, GetDashboardEmbedUrlCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, GetDashboardEmbedUrlCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new GetDashboardEmbedUrlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDashboardEmbedUrlCommandInput} for command's `input` shape.
        * @see {@link GetDashboardEmbedUrlCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class GetDashboardEmbedUrlCommand extends $Command<GetDashboardEmbedUrlCommandInput, GetDashboardEmbedUrlCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: GetDashboardEmbedUrlCommandInput;
            constructor(input: GetDashboardEmbedUrlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDashboardEmbedUrlCommandInput, GetDashboardEmbedUrlCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GetSessionEmbedUrlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSessionEmbedUrlRequest, GetSessionEmbedUrlResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface GetSessionEmbedUrlCommandInput extends GetSessionEmbedUrlRequest {
    }
    export interface GetSessionEmbedUrlCommandOutput extends GetSessionEmbedUrlResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a session URL and authorization code that you can use to embed the Amazon
        *             Amazon QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where
        *             you want to provide an authoring portal that allows users to create data sources,
        *             datasets, analyses, and dashboards. The users who access an embedded Amazon QuickSight console
        *             need belong to the author or admin security cohort. If you want to restrict permissions
        *             to some of these features, add a custom permissions profile to the user with the
        *             <code>
        *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a>
        *             </code> API operation. Use <code>
        *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RegisterUser.html">RegisterUser</a>
        *             </code>
        *             API operation to add a new user with a custom permission profile attached. For more
        *             information, see the following sections in the <i>Amazon QuickSight User
        *             Guide</i>:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedding Analytics</a>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, GetSessionEmbedUrlCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, GetSessionEmbedUrlCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new GetSessionEmbedUrlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSessionEmbedUrlCommandInput} for command's `input` shape.
        * @see {@link GetSessionEmbedUrlCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class GetSessionEmbedUrlCommand extends $Command<GetSessionEmbedUrlCommandInput, GetSessionEmbedUrlCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: GetSessionEmbedUrlCommandInput;
            constructor(input: GetSessionEmbedUrlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSessionEmbedUrlCommandInput, GetSessionEmbedUrlCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListAnalysesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAnalysesRequest, ListAnalysesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListAnalysesCommandInput extends ListAnalysesRequest {
    }
    export interface ListAnalysesCommandOutput extends ListAnalysesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists Amazon QuickSight analyses that exist in the specified Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListAnalysesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListAnalysesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListAnalysesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAnalysesCommandInput} for command's `input` shape.
        * @see {@link ListAnalysesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListAnalysesCommand extends $Command<ListAnalysesCommandInput, ListAnalysesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListAnalysesCommandInput;
            constructor(input: ListAnalysesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAnalysesCommandInput, ListAnalysesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDashboardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDashboardsRequest, ListDashboardsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListDashboardsCommandInput extends ListDashboardsRequest {
    }
    export interface ListDashboardsCommandOutput extends ListDashboardsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists dashboards in an Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListDashboardsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListDashboardsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListDashboardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDashboardsCommandInput} for command's `input` shape.
        * @see {@link ListDashboardsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListDashboardsCommand extends $Command<ListDashboardsCommandInput, ListDashboardsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListDashboardsCommandInput;
            constructor(input: ListDashboardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDashboardsCommandInput, ListDashboardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDashboardVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDashboardVersionsRequest, ListDashboardVersionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListDashboardVersionsCommandInput extends ListDashboardVersionsRequest {
    }
    export interface ListDashboardVersionsCommandOutput extends ListDashboardVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the versions of the dashboards in the Amazon QuickSight subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListDashboardVersionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListDashboardVersionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListDashboardVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDashboardVersionsCommandInput} for command's `input` shape.
        * @see {@link ListDashboardVersionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListDashboardVersionsCommand extends $Command<ListDashboardVersionsCommandInput, ListDashboardVersionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListDashboardVersionsCommandInput;
            constructor(input: ListDashboardVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDashboardVersionsCommandInput, ListDashboardVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDataSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDataSetsRequest, ListDataSetsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListDataSetsCommandInput extends ListDataSetsRequest {
    }
    export interface ListDataSetsCommandOutput extends ListDataSetsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the datasets belonging to the current Amazon Web Services account in an Amazon Web Services Region.</p>
        * 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListDataSetsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListDataSetsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListDataSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataSetsCommandInput} for command's `input` shape.
        * @see {@link ListDataSetsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListDataSetsCommand extends $Command<ListDataSetsCommandInput, ListDataSetsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListDataSetsCommandInput;
            constructor(input: ListDataSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataSetsCommandInput, ListDataSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDataSourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDataSourcesRequest, ListDataSourcesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListDataSourcesCommandInput extends ListDataSourcesRequest {
    }
    export interface ListDataSourcesCommandOutput extends ListDataSourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists data sources in current Amazon Web Services Region that belong to this Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListDataSourcesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListDataSourcesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListDataSourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataSourcesCommandInput} for command's `input` shape.
        * @see {@link ListDataSourcesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListDataSourcesCommand extends $Command<ListDataSourcesCommandInput, ListDataSourcesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListDataSourcesCommandInput;
            constructor(input: ListDataSourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataSourcesCommandInput, ListDataSourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListFolderMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFolderMembersRequest, ListFolderMembersResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListFolderMembersCommandInput extends ListFolderMembersRequest {
    }
    export interface ListFolderMembersCommandOutput extends ListFolderMembersResponse, __MetadataBearer {
    }
    /**
        * <p>List all assets (<code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code>) in a folder. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListFolderMembersCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListFolderMembersCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListFolderMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFolderMembersCommandInput} for command's `input` shape.
        * @see {@link ListFolderMembersCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListFolderMembersCommand extends $Command<ListFolderMembersCommandInput, ListFolderMembersCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListFolderMembersCommandInput;
            constructor(input: ListFolderMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFolderMembersCommandInput, ListFolderMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListFoldersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFoldersRequest, ListFoldersResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListFoldersCommandInput extends ListFoldersRequest {
    }
    export interface ListFoldersCommandOutput extends ListFoldersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all folders in an account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListFoldersCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListFoldersCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListFoldersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFoldersCommandInput} for command's `input` shape.
        * @see {@link ListFoldersCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListFoldersCommand extends $Command<ListFoldersCommandInput, ListFoldersCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListFoldersCommandInput;
            constructor(input: ListFoldersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFoldersCommandInput, ListFoldersCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListGroupMembershipsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListGroupMembershipsRequest, ListGroupMembershipsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListGroupMembershipsCommandInput extends ListGroupMembershipsRequest {
    }
    export interface ListGroupMembershipsCommandOutput extends ListGroupMembershipsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists member users in a group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListGroupMembershipsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListGroupMembershipsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListGroupMembershipsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupMembershipsCommandInput} for command's `input` shape.
        * @see {@link ListGroupMembershipsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListGroupMembershipsCommand extends $Command<ListGroupMembershipsCommandInput, ListGroupMembershipsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListGroupMembershipsCommandInput;
            constructor(input: ListGroupMembershipsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupMembershipsCommandInput, ListGroupMembershipsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListGroupsRequest, ListGroupsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListGroupsCommandInput extends ListGroupsRequest {
    }
    export interface ListGroupsCommandOutput extends ListGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all user groups in Amazon QuickSight. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListGroupsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListGroupsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsCommandInput} for command's `input` shape.
        * @see {@link ListGroupsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListGroupsCommand extends $Command<ListGroupsCommandInput, ListGroupsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListGroupsCommandInput;
            constructor(input: ListGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsCommandInput, ListGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIAMPolicyAssignmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListIAMPolicyAssignmentsRequest, ListIAMPolicyAssignmentsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListIAMPolicyAssignmentsCommandInput extends ListIAMPolicyAssignmentsRequest {
    }
    export interface ListIAMPolicyAssignmentsCommandOutput extends ListIAMPolicyAssignmentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists IAM policy assignments in the current Amazon QuickSight account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListIAMPolicyAssignmentsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListIAMPolicyAssignmentsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListIAMPolicyAssignmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIAMPolicyAssignmentsCommandInput} for command's `input` shape.
        * @see {@link ListIAMPolicyAssignmentsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListIAMPolicyAssignmentsCommand extends $Command<ListIAMPolicyAssignmentsCommandInput, ListIAMPolicyAssignmentsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListIAMPolicyAssignmentsCommandInput;
            constructor(input: ListIAMPolicyAssignmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIAMPolicyAssignmentsCommandInput, ListIAMPolicyAssignmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIAMPolicyAssignmentsForUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListIAMPolicyAssignmentsForUserRequest, ListIAMPolicyAssignmentsForUserResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListIAMPolicyAssignmentsForUserCommandInput extends ListIAMPolicyAssignmentsForUserRequest {
    }
    export interface ListIAMPolicyAssignmentsForUserCommandOutput extends ListIAMPolicyAssignmentsForUserResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM
        * 			policies assigned to the specified user and group or groups that the user belongs
        * 			to.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListIAMPolicyAssignmentsForUserCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListIAMPolicyAssignmentsForUserCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListIAMPolicyAssignmentsForUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIAMPolicyAssignmentsForUserCommandInput} for command's `input` shape.
        * @see {@link ListIAMPolicyAssignmentsForUserCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListIAMPolicyAssignmentsForUserCommand extends $Command<ListIAMPolicyAssignmentsForUserCommandInput, ListIAMPolicyAssignmentsForUserCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListIAMPolicyAssignmentsForUserCommandInput;
            constructor(input: ListIAMPolicyAssignmentsForUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIAMPolicyAssignmentsForUserCommandInput, ListIAMPolicyAssignmentsForUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIngestionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListIngestionsRequest, ListIngestionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListIngestionsCommandInput extends ListIngestionsRequest {
    }
    export interface ListIngestionsCommandOutput extends ListIngestionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the history of SPICE ingestions for a dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListIngestionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListIngestionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListIngestionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIngestionsCommandInput} for command's `input` shape.
        * @see {@link ListIngestionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListIngestionsCommand extends $Command<ListIngestionsCommandInput, ListIngestionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListIngestionsCommandInput;
            constructor(input: ListIngestionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIngestionsCommandInput, ListIngestionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListNamespacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListNamespacesRequest, ListNamespacesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListNamespacesCommandInput extends ListNamespacesRequest {
    }
    export interface ListNamespacesCommandOutput extends ListNamespacesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the namespaces for the specified Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListNamespacesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListNamespacesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListNamespacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNamespacesCommandInput} for command's `input` shape.
        * @see {@link ListNamespacesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListNamespacesCommand extends $Command<ListNamespacesCommandInput, ListNamespacesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListNamespacesCommandInput;
            constructor(input: ListNamespacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNamespacesCommandInput, ListNamespacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags assigned to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListTagsForResourceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListTagsForResourceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplateAliasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTemplateAliasesRequest, ListTemplateAliasesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListTemplateAliasesCommandInput extends ListTemplateAliasesRequest {
    }
    export interface ListTemplateAliasesCommandOutput extends ListTemplateAliasesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the aliases of a template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListTemplateAliasesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListTemplateAliasesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListTemplateAliasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTemplateAliasesCommandInput} for command's `input` shape.
        * @see {@link ListTemplateAliasesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListTemplateAliasesCommand extends $Command<ListTemplateAliasesCommandInput, ListTemplateAliasesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListTemplateAliasesCommandInput;
            constructor(input: ListTemplateAliasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTemplateAliasesCommandInput, ListTemplateAliasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTemplatesRequest, ListTemplatesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListTemplatesCommandInput extends ListTemplatesRequest {
    }
    export interface ListTemplatesCommandOutput extends ListTemplatesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the templates in the current Amazon QuickSight account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListTemplatesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListTemplatesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTemplatesCommandInput} for command's `input` shape.
        * @see {@link ListTemplatesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListTemplatesCommand extends $Command<ListTemplatesCommandInput, ListTemplatesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListTemplatesCommandInput;
            constructor(input: ListTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTemplatesCommandInput, ListTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplateVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTemplateVersionsRequest, ListTemplateVersionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListTemplateVersionsCommandInput extends ListTemplateVersionsRequest {
    }
    export interface ListTemplateVersionsCommandOutput extends ListTemplateVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the versions of the templates in the current Amazon QuickSight account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListTemplateVersionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListTemplateVersionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListTemplateVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTemplateVersionsCommandInput} for command's `input` shape.
        * @see {@link ListTemplateVersionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListTemplateVersionsCommand extends $Command<ListTemplateVersionsCommandInput, ListTemplateVersionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListTemplateVersionsCommandInput;
            constructor(input: ListTemplateVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTemplateVersionsCommandInput, ListTemplateVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemeAliasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListThemeAliasesRequest, ListThemeAliasesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListThemeAliasesCommandInput extends ListThemeAliasesRequest {
    }
    export interface ListThemeAliasesCommandOutput extends ListThemeAliasesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the aliases of a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListThemeAliasesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListThemeAliasesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListThemeAliasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListThemeAliasesCommandInput} for command's `input` shape.
        * @see {@link ListThemeAliasesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListThemeAliasesCommand extends $Command<ListThemeAliasesCommandInput, ListThemeAliasesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListThemeAliasesCommandInput;
            constructor(input: ListThemeAliasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListThemeAliasesCommandInput, ListThemeAliasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListThemesRequest, ListThemesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListThemesCommandInput extends ListThemesRequest {
    }
    export interface ListThemesCommandOutput extends ListThemesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the themes in the current Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListThemesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListThemesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListThemesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListThemesCommandInput} for command's `input` shape.
        * @see {@link ListThemesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListThemesCommand extends $Command<ListThemesCommandInput, ListThemesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListThemesCommandInput;
            constructor(input: ListThemesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListThemesCommandInput, ListThemesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemeVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListThemeVersionsRequest, ListThemeVersionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListThemeVersionsCommandInput extends ListThemeVersionsRequest {
    }
    export interface ListThemeVersionsCommandOutput extends ListThemeVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the versions of the themes in the current Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListThemeVersionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListThemeVersionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListThemeVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListThemeVersionsCommandInput} for command's `input` shape.
        * @see {@link ListThemeVersionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListThemeVersionsCommand extends $Command<ListThemeVersionsCommandInput, ListThemeVersionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListThemeVersionsCommandInput;
            constructor(input: ListThemeVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListThemeVersionsCommandInput, ListThemeVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListUserGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListUserGroupsRequest, ListUserGroupsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListUserGroupsCommandInput extends ListUserGroupsRequest {
    }
    export interface ListUserGroupsCommandOutput extends ListUserGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListUserGroupsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListUserGroupsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListUserGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserGroupsCommandInput} for command's `input` shape.
        * @see {@link ListUserGroupsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListUserGroupsCommand extends $Command<ListUserGroupsCommandInput, ListUserGroupsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListUserGroupsCommandInput;
            constructor(input: ListUserGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserGroupsCommandInput, ListUserGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListUsersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListUsersRequest, ListUsersResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface ListUsersCommandInput extends ListUsersRequest {
    }
    export interface ListUsersCommandOutput extends ListUsersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all of the Amazon QuickSight users belonging to this account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, ListUsersCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, ListUsersCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new ListUsersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUsersCommandInput} for command's `input` shape.
        * @see {@link ListUsersCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class ListUsersCommand extends $Command<ListUsersCommandInput, ListUsersCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: ListUsersCommandInput;
            constructor(input: ListUsersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUsersCommandInput, ListUsersCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/RegisterUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterUserRequest, RegisterUserResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface RegisterUserCommandInput extends RegisterUserRequest {
    }
    export interface RegisterUserCommandOutput extends RegisterUserResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon QuickSight user, whose identity is associated with the Identity and Access Management (IAM) identity or role specified in the request. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, RegisterUserCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, RegisterUserCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new RegisterUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterUserCommandInput} for command's `input` shape.
        * @see {@link RegisterUserCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class RegisterUserCommand extends $Command<RegisterUserCommandInput, RegisterUserCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: RegisterUserCommandInput;
            constructor(input: RegisterUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterUserCommandInput, RegisterUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/RestoreAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreAnalysisRequest, RestoreAnalysisResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface RestoreAnalysisCommandInput extends RestoreAnalysisRequest {
    }
    export interface RestoreAnalysisCommandOutput extends RestoreAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Restores an analysis.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, RestoreAnalysisCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, RestoreAnalysisCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new RestoreAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreAnalysisCommandInput} for command's `input` shape.
        * @see {@link RestoreAnalysisCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class RestoreAnalysisCommand extends $Command<RestoreAnalysisCommandInput, RestoreAnalysisCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: RestoreAnalysisCommandInput;
            constructor(input: RestoreAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreAnalysisCommandInput, RestoreAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchAnalysesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchAnalysesRequest, SearchAnalysesResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface SearchAnalysesCommandInput extends SearchAnalysesRequest {
    }
    export interface SearchAnalysesCommandOutput extends SearchAnalysesResponse, __MetadataBearer {
    }
    /**
        * <p>Searches for analyses that belong to the user specified in the filter.</p>
        *         <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, SearchAnalysesCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, SearchAnalysesCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new SearchAnalysesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchAnalysesCommandInput} for command's `input` shape.
        * @see {@link SearchAnalysesCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class SearchAnalysesCommand extends $Command<SearchAnalysesCommandInput, SearchAnalysesCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: SearchAnalysesCommandInput;
            constructor(input: SearchAnalysesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchAnalysesCommandInput, SearchAnalysesCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchDashboardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchDashboardsRequest, SearchDashboardsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface SearchDashboardsCommandInput extends SearchDashboardsRequest {
    }
    export interface SearchDashboardsCommandOutput extends SearchDashboardsResponse, __MetadataBearer {
    }
    /**
        * <p>Searches for dashboards that belong to a user. </p>
        *         <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, SearchDashboardsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, SearchDashboardsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new SearchDashboardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchDashboardsCommandInput} for command's `input` shape.
        * @see {@link SearchDashboardsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class SearchDashboardsCommand extends $Command<SearchDashboardsCommandInput, SearchDashboardsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: SearchDashboardsCommandInput;
            constructor(input: SearchDashboardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchDashboardsCommandInput, SearchDashboardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchFoldersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchFoldersRequest, SearchFoldersResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface SearchFoldersCommandInput extends SearchFoldersRequest {
    }
    export interface SearchFoldersCommandOutput extends SearchFoldersResponse, __MetadataBearer {
    }
    /**
        * <p>Searches the subfolders in a folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, SearchFoldersCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, SearchFoldersCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new SearchFoldersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchFoldersCommandInput} for command's `input` shape.
        * @see {@link SearchFoldersCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class SearchFoldersCommand extends $Command<SearchFoldersCommandInput, SearchFoldersCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: SearchFoldersCommandInput;
            constructor(input: SearchFoldersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchFoldersCommandInput, SearchFoldersCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchGroupsRequest, SearchGroupsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface SearchGroupsCommandInput extends SearchGroupsRequest {
    }
    export interface SearchGroupsCommandOutput extends SearchGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Use the <code>SearchGroups</code> operation to search groups in a specified Amazon QuickSight namespace using the supplied filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, SearchGroupsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, SearchGroupsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new SearchGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchGroupsCommandInput} for command's `input` shape.
        * @see {@link SearchGroupsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class SearchGroupsCommand extends $Command<SearchGroupsCommandInput, SearchGroupsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: SearchGroupsCommandInput;
            constructor(input: SearchGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchGroupsCommandInput, SearchGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns one or more tags (key-value pairs) to the specified Amazon QuickSight resource. </p>
        * 		       <p>Tags can help you organize and categorize your resources. You can also use them to
        * 			scope user permissions, by granting a user permission to access or change only resources
        * 			with certain tag values. You can use the <code>TagResource</code> operation with a
        * 			resource that already has tags. If you specify a new tag key for the resource, this tag
        * 			is appended to the list of tags associated with the resource. If you specify a tag key
        * 			that is already associated with the resource, the new tag value that you specify
        * 			replaces the previous value for that tag.</p>
        * 		       <p>You can associate as many as 50 tags with a resource. Amazon QuickSight supports tagging on data
        * 			set, data source, dashboard, and template. </p>
        * 		       <p>Tagging for Amazon QuickSight works in a similar way to tagging for other Amazon Web Services services, except for
        * 			the following:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>You can't use tags to track costs for Amazon QuickSight. This isn't
        * 				possible because you can't tag the resources that Amazon QuickSight costs are based
        * 				on, for example Amazon QuickSight storage capacity (SPICE), number of users, type
        * 				of users, and usage metrics.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Amazon QuickSight doesn't currently support the tag editor for Resource Groups.</p>
        * 				        </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, TagResourceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, TagResourceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a tag or tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UntagResourceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UntagResourceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAccountCustomizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAccountCustomizationRequest, UpdateAccountCustomizationResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateAccountCustomizationCommandInput extends UpdateAccountCustomizationRequest {
    }
    export interface UpdateAccountCustomizationCommandOutput extends UpdateAccountCustomizationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, the only customization that you can use is a theme.</p>
        *         <p>You can use customizations for your Amazon Web Services account or, if you specify a namespace, for a
        *             Amazon QuickSight namespace instead. Customizations that apply to a namespace override
        *             customizations that apply to an Amazon Web Services account. To find out which customizations apply, use
        *             the <code>DescribeAccountCustomization</code> API operation. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateAccountCustomizationCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateAccountCustomizationCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateAccountCustomizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAccountCustomizationCommandInput} for command's `input` shape.
        * @see {@link UpdateAccountCustomizationCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateAccountCustomizationCommand extends $Command<UpdateAccountCustomizationCommandInput, UpdateAccountCustomizationCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateAccountCustomizationCommandInput;
            constructor(input: UpdateAccountCustomizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAccountCustomizationCommandInput, UpdateAccountCustomizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAccountSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAccountSettingsRequest, UpdateAccountSettingsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateAccountSettingsCommandInput extends UpdateAccountSettingsRequest {
    }
    export interface UpdateAccountSettingsCommandOutput extends UpdateAccountSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the Amazon QuickSight settings in your Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateAccountSettingsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateAccountSettingsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateAccountSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAccountSettingsCommandInput} for command's `input` shape.
        * @see {@link UpdateAccountSettingsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateAccountSettingsCommand extends $Command<UpdateAccountSettingsCommandInput, UpdateAccountSettingsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateAccountSettingsCommandInput;
            constructor(input: UpdateAccountSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAccountSettingsCommandInput, UpdateAccountSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAnalysisRequest, UpdateAnalysisResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateAnalysisCommandInput extends UpdateAnalysisRequest {
    }
    export interface UpdateAnalysisCommandOutput extends UpdateAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an analysis in Amazon QuickSight</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateAnalysisCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateAnalysisCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAnalysisCommandInput} for command's `input` shape.
        * @see {@link UpdateAnalysisCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateAnalysisCommand extends $Command<UpdateAnalysisCommandInput, UpdateAnalysisCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateAnalysisCommandInput;
            constructor(input: UpdateAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAnalysisCommandInput, UpdateAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAnalysisPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAnalysisPermissionsRequest, UpdateAnalysisPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateAnalysisPermissionsCommandInput extends UpdateAnalysisPermissionsRequest {
    }
    export interface UpdateAnalysisPermissionsCommandOutput extends UpdateAnalysisPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the read and write permissions for an analysis.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateAnalysisPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateAnalysisPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateAnalysisPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAnalysisPermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateAnalysisPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateAnalysisPermissionsCommand extends $Command<UpdateAnalysisPermissionsCommandInput, UpdateAnalysisPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateAnalysisPermissionsCommandInput;
            constructor(input: UpdateAnalysisPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAnalysisPermissionsCommandInput, UpdateAnalysisPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDashboardRequest, UpdateDashboardResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateDashboardCommandInput extends UpdateDashboardRequest {
    }
    export interface UpdateDashboardCommandOutput extends UpdateDashboardResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a dashboard in an Amazon Web Services account.</p>
        *         <note>
        *             <p>Updating a Dashboard creates a new dashboard version but does not immediately publish
        *                 the new version.  You can update the published version of a dashboard by
        *                 using the <code>
        *                   <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateDashboardPublishedVersion.html">UpdateDashboardPublishedVersion</a>
        *                </code> API operation.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateDashboardCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateDashboardCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateDashboardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDashboardCommandInput} for command's `input` shape.
        * @see {@link UpdateDashboardCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateDashboardCommand extends $Command<UpdateDashboardCommandInput, UpdateDashboardCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateDashboardCommandInput;
            constructor(input: UpdateDashboardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDashboardCommandInput, UpdateDashboardCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDashboardPermissionsRequest, UpdateDashboardPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateDashboardPermissionsCommandInput extends UpdateDashboardPermissionsRequest {
    }
    export interface UpdateDashboardPermissionsCommandOutput extends UpdateDashboardPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates read and write permissions on a dashboard.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateDashboardPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateDashboardPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateDashboardPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDashboardPermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateDashboardPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateDashboardPermissionsCommand extends $Command<UpdateDashboardPermissionsCommandInput, UpdateDashboardPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateDashboardPermissionsCommandInput;
            constructor(input: UpdateDashboardPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDashboardPermissionsCommandInput, UpdateDashboardPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardPublishedVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDashboardPublishedVersionRequest, UpdateDashboardPublishedVersionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateDashboardPublishedVersionCommandInput extends UpdateDashboardPublishedVersionRequest {
    }
    export interface UpdateDashboardPublishedVersionCommandOutput extends UpdateDashboardPublishedVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the published version of a dashboard.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateDashboardPublishedVersionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateDashboardPublishedVersionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateDashboardPublishedVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDashboardPublishedVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateDashboardPublishedVersionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateDashboardPublishedVersionCommand extends $Command<UpdateDashboardPublishedVersionCommandInput, UpdateDashboardPublishedVersionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateDashboardPublishedVersionCommandInput;
            constructor(input: UpdateDashboardPublishedVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDashboardPublishedVersionCommandInput, UpdateDashboardPublishedVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDataSetRequest, UpdateDataSetResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateDataSetCommandInput extends UpdateDataSetRequest {
    }
    export interface UpdateDataSetCommandOutput extends UpdateDataSetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a dataset. This operation doesn't support datasets that include uploaded files as a source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateDataSetCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateDataSetCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateDataSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDataSetCommandInput} for command's `input` shape.
        * @see {@link UpdateDataSetCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateDataSetCommand extends $Command<UpdateDataSetCommandInput, UpdateDataSetCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateDataSetCommandInput;
            constructor(input: UpdateDataSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDataSetCommandInput, UpdateDataSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSetPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDataSetPermissionsRequest, UpdateDataSetPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateDataSetPermissionsCommandInput extends UpdateDataSetPermissionsRequest {
    }
    export interface UpdateDataSetPermissionsCommandOutput extends UpdateDataSetPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the permissions on a dataset.</p>
        * 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateDataSetPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateDataSetPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateDataSetPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDataSetPermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateDataSetPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateDataSetPermissionsCommand extends $Command<UpdateDataSetPermissionsCommandInput, UpdateDataSetPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateDataSetPermissionsCommandInput;
            constructor(input: UpdateDataSetPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDataSetPermissionsCommandInput, UpdateDataSetPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDataSourceRequest, UpdateDataSourceResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateDataSourceCommandInput extends UpdateDataSourceRequest {
    }
    export interface UpdateDataSourceCommandOutput extends UpdateDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateDataSourceCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateDataSourceCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDataSourceCommandInput} for command's `input` shape.
        * @see {@link UpdateDataSourceCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateDataSourceCommand extends $Command<UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateDataSourceCommandInput;
            constructor(input: UpdateDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSourcePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDataSourcePermissionsRequest, UpdateDataSourcePermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateDataSourcePermissionsCommandInput extends UpdateDataSourcePermissionsRequest {
    }
    export interface UpdateDataSourcePermissionsCommandOutput extends UpdateDataSourcePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the permissions to a data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateDataSourcePermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateDataSourcePermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateDataSourcePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDataSourcePermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateDataSourcePermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateDataSourcePermissionsCommand extends $Command<UpdateDataSourcePermissionsCommandInput, UpdateDataSourcePermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateDataSourcePermissionsCommandInput;
            constructor(input: UpdateDataSourcePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDataSourcePermissionsCommandInput, UpdateDataSourcePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFolderRequest, UpdateFolderResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateFolderCommandInput extends UpdateFolderRequest {
    }
    export interface UpdateFolderCommandOutput extends UpdateFolderResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the name of a folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateFolderCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateFolderCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFolderCommandInput} for command's `input` shape.
        * @see {@link UpdateFolderCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateFolderCommand extends $Command<UpdateFolderCommandInput, UpdateFolderCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateFolderCommandInput;
            constructor(input: UpdateFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFolderCommandInput, UpdateFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateFolderPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFolderPermissionsRequest, UpdateFolderPermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateFolderPermissionsCommandInput extends UpdateFolderPermissionsRequest {
    }
    export interface UpdateFolderPermissionsCommandOutput extends UpdateFolderPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates permissions of a folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateFolderPermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateFolderPermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateFolderPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFolderPermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateFolderPermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateFolderPermissionsCommand extends $Command<UpdateFolderPermissionsCommandInput, UpdateFolderPermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateFolderPermissionsCommandInput;
            constructor(input: UpdateFolderPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFolderPermissionsCommandInput, UpdateFolderPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateGroupRequest, UpdateGroupResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateGroupCommandInput extends UpdateGroupRequest {
    }
    export interface UpdateGroupCommandOutput extends UpdateGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Changes a group description. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateGroupCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateGroupCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateGroupCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateGroupCommand extends $Command<UpdateGroupCommandInput, UpdateGroupCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateGroupCommandInput;
            constructor(input: UpdateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGroupCommandInput, UpdateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateIAMPolicyAssignmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateIAMPolicyAssignmentRequest, UpdateIAMPolicyAssignmentResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateIAMPolicyAssignmentCommandInput extends UpdateIAMPolicyAssignmentRequest {
    }
    export interface UpdateIAMPolicyAssignmentCommandOutput extends UpdateIAMPolicyAssignmentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing IAM policy assignment. This operation updates only the optional
        * 			parameter or parameters that are specified in the request.
        * 		    This overwrites all of the users included in <code>Identities</code>.
        * 		</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateIAMPolicyAssignmentCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateIAMPolicyAssignmentCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateIAMPolicyAssignmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIAMPolicyAssignmentCommandInput} for command's `input` shape.
        * @see {@link UpdateIAMPolicyAssignmentCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateIAMPolicyAssignmentCommand extends $Command<UpdateIAMPolicyAssignmentCommandInput, UpdateIAMPolicyAssignmentCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateIAMPolicyAssignmentCommandInput;
            constructor(input: UpdateIAMPolicyAssignmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIAMPolicyAssignmentCommandInput, UpdateIAMPolicyAssignmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateIpRestrictionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateIpRestrictionRequest, UpdateIpRestrictionResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateIpRestrictionCommandInput extends UpdateIpRestrictionRequest {
    }
    export interface UpdateIpRestrictionCommandOutput extends UpdateIpRestrictionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the content and status of IP rules. To use this operation, you need to provide the entire map of rules. You can use the <code>DescribeIpRestriction</code> operation to get the current rule map.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateIpRestrictionCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateIpRestrictionCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateIpRestrictionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIpRestrictionCommandInput} for command's `input` shape.
        * @see {@link UpdateIpRestrictionCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateIpRestrictionCommand extends $Command<UpdateIpRestrictionCommandInput, UpdateIpRestrictionCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateIpRestrictionCommandInput;
            constructor(input: UpdateIpRestrictionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIpRestrictionCommandInput, UpdateIpRestrictionCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdatePublicSharingSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdatePublicSharingSettingsRequest, UpdatePublicSharingSettingsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdatePublicSharingSettingsCommandInput extends UpdatePublicSharingSettingsRequest {
    }
    export interface UpdatePublicSharingSettingsCommandOutput extends UpdatePublicSharingSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Use the <code>UpdatePublicSharingSettings</code> operation to turn on or turn off the
        *             public sharing settings of an Amazon QuickSight dashboard.</p>
        *          <p>To use this operation, turn on session capacity pricing for your Amazon QuickSight
        *             account.</p>
        *          <p>Before you can turn on public sharing on your account, make sure to give public sharing
        *             permissions to an administrative user in the Identity and Access Management (IAM)
        *             console. For more information on using IAM with Amazon QuickSight, see
        *                 <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html">Using Amazon QuickSight with IAM</a> in the <i>Amazon QuickSight
        *                 User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdatePublicSharingSettingsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdatePublicSharingSettingsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdatePublicSharingSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePublicSharingSettingsCommandInput} for command's `input` shape.
        * @see {@link UpdatePublicSharingSettingsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdatePublicSharingSettingsCommand extends $Command<UpdatePublicSharingSettingsCommandInput, UpdatePublicSharingSettingsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdatePublicSharingSettingsCommandInput;
            constructor(input: UpdatePublicSharingSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePublicSharingSettingsCommandInput, UpdatePublicSharingSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplateAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTemplateAliasRequest, UpdateTemplateAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateTemplateAliasCommandInput extends UpdateTemplateAliasRequest {
    }
    export interface UpdateTemplateAliasCommandOutput extends UpdateTemplateAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the template alias of a template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateTemplateAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateTemplateAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateTemplateAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTemplateAliasCommandInput} for command's `input` shape.
        * @see {@link UpdateTemplateAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateTemplateAliasCommand extends $Command<UpdateTemplateAliasCommandInput, UpdateTemplateAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateTemplateAliasCommandInput;
            constructor(input: UpdateTemplateAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTemplateAliasCommandInput, UpdateTemplateAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTemplateRequest, UpdateTemplateResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateTemplateCommandInput extends UpdateTemplateRequest {
    }
    export interface UpdateTemplateCommandOutput extends UpdateTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a template from an existing Amazon QuickSight analysis or another template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateTemplateCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateTemplateCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateTemplateCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateTemplateCommand extends $Command<UpdateTemplateCommandInput, UpdateTemplateCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateTemplateCommandInput;
            constructor(input: UpdateTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTemplateCommandInput, UpdateTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplatePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTemplatePermissionsRequest, UpdateTemplatePermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateTemplatePermissionsCommandInput extends UpdateTemplatePermissionsRequest {
    }
    export interface UpdateTemplatePermissionsCommandOutput extends UpdateTemplatePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the resource permissions for a template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateTemplatePermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateTemplatePermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateTemplatePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTemplatePermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateTemplatePermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateTemplatePermissionsCommand extends $Command<UpdateTemplatePermissionsCommandInput, UpdateTemplatePermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateTemplatePermissionsCommandInput;
            constructor(input: UpdateTemplatePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTemplatePermissionsCommandInput, UpdateTemplatePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemeAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateThemeAliasRequest, UpdateThemeAliasResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateThemeAliasCommandInput extends UpdateThemeAliasRequest {
    }
    export interface UpdateThemeAliasCommandOutput extends UpdateThemeAliasResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an alias of a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateThemeAliasCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateThemeAliasCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateThemeAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateThemeAliasCommandInput} for command's `input` shape.
        * @see {@link UpdateThemeAliasCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateThemeAliasCommand extends $Command<UpdateThemeAliasCommandInput, UpdateThemeAliasCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateThemeAliasCommandInput;
            constructor(input: UpdateThemeAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateThemeAliasCommandInput, UpdateThemeAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateThemeRequest, UpdateThemeResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateThemeCommandInput extends UpdateThemeRequest {
    }
    export interface UpdateThemeCommandOutput extends UpdateThemeResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a theme.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateThemeCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateThemeCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateThemeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateThemeCommandInput} for command's `input` shape.
        * @see {@link UpdateThemeCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateThemeCommand extends $Command<UpdateThemeCommandInput, UpdateThemeCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateThemeCommandInput;
            constructor(input: UpdateThemeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateThemeCommandInput, UpdateThemeCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateThemePermissionsRequest, UpdateThemePermissionsResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateThemePermissionsCommandInput extends UpdateThemePermissionsRequest {
    }
    export interface UpdateThemePermissionsCommandOutput extends UpdateThemePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the resource permissions for a theme. Permissions apply to the action to grant or
        * 			revoke permissions on, for example <code>"quicksight:DescribeTheme"</code>.</p>
        * 		       <p>Theme permissions apply in groupings. Valid groupings include the following for the three
        * 			levels of permissions, which are user, owner, or no permissions: </p>
        * 			      <ul>
        *             <li>
        *                <p>User</p>
        * 					          <ul>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:DescribeTheme"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:DescribeThemeAlias"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:ListThemeAliases"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:ListThemeVersions"</code>
        *                      </p>
        *                   </li>
        *                </ul>
        * 				        </li>
        *             <li>
        *                <p>Owner</p>
        * 					          <ul>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:DescribeTheme"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:DescribeThemeAlias"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:ListThemeAliases"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:ListThemeVersions"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:DeleteTheme"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:UpdateTheme"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:CreateThemeAlias"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:DeleteThemeAlias"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:UpdateThemeAlias"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:UpdateThemePermissions"</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>"quicksight:DescribeThemePermissions"</code>
        *                      </p>
        *                   </li>
        *                </ul>
        * 				        </li>
        *             <li>
        *                <p>To specify no permissions, omit the permissions list.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateThemePermissionsCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateThemePermissionsCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateThemePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateThemePermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateThemePermissionsCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateThemePermissionsCommand extends $Command<UpdateThemePermissionsCommandInput, UpdateThemePermissionsCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateThemePermissionsCommandInput;
            constructor(input: UpdateThemePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateThemePermissionsCommandInput, UpdateThemePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateUserRequest, UpdateUserResponse } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1";
    import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient";
    export interface UpdateUserCommandInput extends UpdateUserRequest {
    }
    export interface UpdateUserCommandOutput extends UpdateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an Amazon QuickSight user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QuickSightClient, UpdateUserCommand } from "@aws-sdk/client-quicksight"; // ES Modules import
        * // const { QuickSightClient, UpdateUserCommand } = require("@aws-sdk/client-quicksight"); // CommonJS import
        * const client = new QuickSightClient(config);
        * const command = new UpdateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserCommandInput} for command's `input` shape.
        * @see {@link UpdateUserCommandOutput} for command's `response` shape.
        * @see {@link QuickSightClientResolvedConfig | config} for QuickSightClient's `config` shape.
        *
        */
    export class UpdateUserCommand extends $Command<UpdateUserCommandInput, UpdateUserCommandOutput, QuickSightClientResolvedConfig> {
            readonly input: UpdateUserCommandInput;
            constructor(input: UpdateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserCommandInput, UpdateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/QuickSightClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CancelIngestionCommandInput, CancelIngestionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CancelIngestionCommand";
    import { CreateAccountCustomizationCommandInput, CreateAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAccountCustomizationCommand";
    import { CreateAccountSubscriptionCommandInput, CreateAccountSubscriptionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAccountSubscriptionCommand";
    import { CreateAnalysisCommandInput, CreateAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateAnalysisCommand";
    import { CreateDashboardCommandInput, CreateDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDashboardCommand";
    import { CreateDataSetCommandInput, CreateDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDataSetCommand";
    import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateDataSourceCommand";
    import { CreateFolderCommandInput, CreateFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateFolderCommand";
    import { CreateFolderMembershipCommandInput, CreateFolderMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateFolderMembershipCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateGroupCommand";
    import { CreateGroupMembershipCommandInput, CreateGroupMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateGroupMembershipCommand";
    import { CreateIAMPolicyAssignmentCommandInput, CreateIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateIAMPolicyAssignmentCommand";
    import { CreateIngestionCommandInput, CreateIngestionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateIngestionCommand";
    import { CreateNamespaceCommandInput, CreateNamespaceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateNamespaceCommand";
    import { CreateTemplateAliasCommandInput, CreateTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateTemplateAliasCommand";
    import { CreateTemplateCommandInput, CreateTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateTemplateCommand";
    import { CreateThemeAliasCommandInput, CreateThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateThemeAliasCommand";
    import { CreateThemeCommandInput, CreateThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/CreateThemeCommand";
    import { DeleteAccountCustomizationCommandInput, DeleteAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteAccountCustomizationCommand";
    import { DeleteAnalysisCommandInput, DeleteAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteAnalysisCommand";
    import { DeleteDashboardCommandInput, DeleteDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDashboardCommand";
    import { DeleteDataSetCommandInput, DeleteDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDataSetCommand";
    import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteDataSourceCommand";
    import { DeleteFolderCommandInput, DeleteFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteFolderCommand";
    import { DeleteFolderMembershipCommandInput, DeleteFolderMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteFolderMembershipCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteGroupCommand";
    import { DeleteGroupMembershipCommandInput, DeleteGroupMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteGroupMembershipCommand";
    import { DeleteIAMPolicyAssignmentCommandInput, DeleteIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteIAMPolicyAssignmentCommand";
    import { DeleteNamespaceCommandInput, DeleteNamespaceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteNamespaceCommand";
    import { DeleteTemplateAliasCommandInput, DeleteTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteTemplateAliasCommand";
    import { DeleteTemplateCommandInput, DeleteTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteTemplateCommand";
    import { DeleteThemeAliasCommandInput, DeleteThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteThemeAliasCommand";
    import { DeleteThemeCommandInput, DeleteThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteThemeCommand";
    import { DeleteUserByPrincipalIdCommandInput, DeleteUserByPrincipalIdCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteUserByPrincipalIdCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DeleteUserCommand";
    import { DescribeAccountCustomizationCommandInput, DescribeAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountCustomizationCommand";
    import { DescribeAccountSettingsCommandInput, DescribeAccountSettingsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountSettingsCommand";
    import { DescribeAccountSubscriptionCommandInput, DescribeAccountSubscriptionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAccountSubscriptionCommand";
    import { DescribeAnalysisCommandInput, DescribeAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAnalysisCommand";
    import { DescribeAnalysisPermissionsCommandInput, DescribeAnalysisPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeAnalysisPermissionsCommand";
    import { DescribeDashboardCommandInput, DescribeDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDashboardCommand";
    import { DescribeDashboardPermissionsCommandInput, DescribeDashboardPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDashboardPermissionsCommand";
    import { DescribeDataSetCommandInput, DescribeDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSetCommand";
    import { DescribeDataSetPermissionsCommandInput, DescribeDataSetPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSetPermissionsCommand";
    import { DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSourceCommand";
    import { DescribeDataSourcePermissionsCommandInput, DescribeDataSourcePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeDataSourcePermissionsCommand";
    import { DescribeFolderCommandInput, DescribeFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderCommand";
    import { DescribeFolderPermissionsCommandInput, DescribeFolderPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderPermissionsCommand";
    import { DescribeFolderResolvedPermissionsCommandInput, DescribeFolderResolvedPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeFolderResolvedPermissionsCommand";
    import { DescribeGroupCommandInput, DescribeGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeGroupCommand";
    import { DescribeGroupMembershipCommandInput, DescribeGroupMembershipCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeGroupMembershipCommand";
    import { DescribeIAMPolicyAssignmentCommandInput, DescribeIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIAMPolicyAssignmentCommand";
    import { DescribeIngestionCommandInput, DescribeIngestionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIngestionCommand";
    import { DescribeIpRestrictionCommandInput, DescribeIpRestrictionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeIpRestrictionCommand";
    import { DescribeNamespaceCommandInput, DescribeNamespaceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeNamespaceCommand";
    import { DescribeTemplateAliasCommandInput, DescribeTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplateAliasCommand";
    import { DescribeTemplateCommandInput, DescribeTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplateCommand";
    import { DescribeTemplatePermissionsCommandInput, DescribeTemplatePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeTemplatePermissionsCommand";
    import { DescribeThemeAliasCommandInput, DescribeThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemeAliasCommand";
    import { DescribeThemeCommandInput, DescribeThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemeCommand";
    import { DescribeThemePermissionsCommandInput, DescribeThemePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeThemePermissionsCommand";
    import { DescribeUserCommandInput, DescribeUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/DescribeUserCommand";
    import { GenerateEmbedUrlForAnonymousUserCommandInput, GenerateEmbedUrlForAnonymousUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GenerateEmbedUrlForAnonymousUserCommand";
    import { GenerateEmbedUrlForRegisteredUserCommandInput, GenerateEmbedUrlForRegisteredUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GenerateEmbedUrlForRegisteredUserCommand";
    import { GetDashboardEmbedUrlCommandInput, GetDashboardEmbedUrlCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GetDashboardEmbedUrlCommand";
    import { GetSessionEmbedUrlCommandInput, GetSessionEmbedUrlCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/GetSessionEmbedUrlCommand";
    import { ListAnalysesCommandInput, ListAnalysesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListAnalysesCommand";
    import { ListDashboardsCommandInput, ListDashboardsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDashboardsCommand";
    import { ListDashboardVersionsCommandInput, ListDashboardVersionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDashboardVersionsCommand";
    import { ListDataSetsCommandInput, ListDataSetsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDataSetsCommand";
    import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListDataSourcesCommand";
    import { ListFolderMembersCommandInput, ListFolderMembersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListFolderMembersCommand";
    import { ListFoldersCommandInput, ListFoldersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListFoldersCommand";
    import { ListGroupMembershipsCommandInput, ListGroupMembershipsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListGroupMembershipsCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListGroupsCommand";
    import { ListIAMPolicyAssignmentsCommandInput, ListIAMPolicyAssignmentsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIAMPolicyAssignmentsCommand";
    import { ListIAMPolicyAssignmentsForUserCommandInput, ListIAMPolicyAssignmentsForUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIAMPolicyAssignmentsForUserCommand";
    import { ListIngestionsCommandInput, ListIngestionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListIngestionsCommand";
    import { ListNamespacesCommandInput, ListNamespacesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListNamespacesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTagsForResourceCommand";
    import { ListTemplateAliasesCommandInput, ListTemplateAliasesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplateAliasesCommand";
    import { ListTemplatesCommandInput, ListTemplatesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplatesCommand";
    import { ListTemplateVersionsCommandInput, ListTemplateVersionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListTemplateVersionsCommand";
    import { ListThemeAliasesCommandInput, ListThemeAliasesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemeAliasesCommand";
    import { ListThemesCommandInput, ListThemesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemesCommand";
    import { ListThemeVersionsCommandInput, ListThemeVersionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListThemeVersionsCommand";
    import { ListUserGroupsCommandInput, ListUserGroupsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListUserGroupsCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/ListUsersCommand";
    import { RegisterUserCommandInput, RegisterUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/RegisterUserCommand";
    import { RestoreAnalysisCommandInput, RestoreAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/RestoreAnalysisCommand";
    import { SearchAnalysesCommandInput, SearchAnalysesCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchAnalysesCommand";
    import { SearchDashboardsCommandInput, SearchDashboardsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchDashboardsCommand";
    import { SearchFoldersCommandInput, SearchFoldersCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchFoldersCommand";
    import { SearchGroupsCommandInput, SearchGroupsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/SearchGroupsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UntagResourceCommand";
    import { UpdateAccountCustomizationCommandInput, UpdateAccountCustomizationCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAccountCustomizationCommand";
    import { UpdateAccountSettingsCommandInput, UpdateAccountSettingsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAccountSettingsCommand";
    import { UpdateAnalysisCommandInput, UpdateAnalysisCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAnalysisCommand";
    import { UpdateAnalysisPermissionsCommandInput, UpdateAnalysisPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateAnalysisPermissionsCommand";
    import { UpdateDashboardCommandInput, UpdateDashboardCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardCommand";
    import { UpdateDashboardPermissionsCommandInput, UpdateDashboardPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardPermissionsCommand";
    import { UpdateDashboardPublishedVersionCommandInput, UpdateDashboardPublishedVersionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDashboardPublishedVersionCommand";
    import { UpdateDataSetCommandInput, UpdateDataSetCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSetCommand";
    import { UpdateDataSetPermissionsCommandInput, UpdateDataSetPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSetPermissionsCommand";
    import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSourceCommand";
    import { UpdateDataSourcePermissionsCommandInput, UpdateDataSourcePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateDataSourcePermissionsCommand";
    import { UpdateFolderCommandInput, UpdateFolderCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateFolderCommand";
    import { UpdateFolderPermissionsCommandInput, UpdateFolderPermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateFolderPermissionsCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateGroupCommand";
    import { UpdateIAMPolicyAssignmentCommandInput, UpdateIAMPolicyAssignmentCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateIAMPolicyAssignmentCommand";
    import { UpdateIpRestrictionCommandInput, UpdateIpRestrictionCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateIpRestrictionCommand";
    import { UpdatePublicSharingSettingsCommandInput, UpdatePublicSharingSettingsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdatePublicSharingSettingsCommand";
    import { UpdateTemplateAliasCommandInput, UpdateTemplateAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplateAliasCommand";
    import { UpdateTemplateCommandInput, UpdateTemplateCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplateCommand";
    import { UpdateTemplatePermissionsCommandInput, UpdateTemplatePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateTemplatePermissionsCommand";
    import { UpdateThemeAliasCommandInput, UpdateThemeAliasCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemeAliasCommand";
    import { UpdateThemeCommandInput, UpdateThemeCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemeCommand";
    import { UpdateThemePermissionsCommandInput, UpdateThemePermissionsCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateThemePermissionsCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/commands/UpdateUserCommand";
    export type ServiceInputTypes = CancelIngestionCommandInput | CreateAccountCustomizationCommandInput | CreateAccountSubscriptionCommandInput | CreateAnalysisCommandInput | CreateDashboardCommandInput | CreateDataSetCommandInput | CreateDataSourceCommandInput | CreateFolderCommandInput | CreateFolderMembershipCommandInput | CreateGroupCommandInput | CreateGroupMembershipCommandInput | CreateIAMPolicyAssignmentCommandInput | CreateIngestionCommandInput | CreateNamespaceCommandInput | CreateTemplateAliasCommandInput | CreateTemplateCommandInput | CreateThemeAliasCommandInput | CreateThemeCommandInput | DeleteAccountCustomizationCommandInput | DeleteAnalysisCommandInput | DeleteDashboardCommandInput | DeleteDataSetCommandInput | DeleteDataSourceCommandInput | DeleteFolderCommandInput | DeleteFolderMembershipCommandInput | DeleteGroupCommandInput | DeleteGroupMembershipCommandInput | DeleteIAMPolicyAssignmentCommandInput | DeleteNamespaceCommandInput | DeleteTemplateAliasCommandInput | DeleteTemplateCommandInput | DeleteThemeAliasCommandInput | DeleteThemeCommandInput | DeleteUserByPrincipalIdCommandInput | DeleteUserCommandInput | DescribeAccountCustomizationCommandInput | DescribeAccountSettingsCommandInput | DescribeAccountSubscriptionCommandInput | DescribeAnalysisCommandInput | DescribeAnalysisPermissionsCommandInput | DescribeDashboardCommandInput | DescribeDashboardPermissionsCommandInput | DescribeDataSetCommandInput | DescribeDataSetPermissionsCommandInput | DescribeDataSourceCommandInput | DescribeDataSourcePermissionsCommandInput | DescribeFolderCommandInput | DescribeFolderPermissionsCommandInput | DescribeFolderResolvedPermissionsCommandInput | DescribeGroupCommandInput | DescribeGroupMembershipCommandInput | DescribeIAMPolicyAssignmentCommandInput | DescribeIngestionCommandInput | DescribeIpRestrictionCommandInput | DescribeNamespaceCommandInput | DescribeTemplateAliasCommandInput | DescribeTemplateCommandInput | DescribeTemplatePermissionsCommandInput | DescribeThemeAliasCommandInput | DescribeThemeCommandInput | DescribeThemePermissionsCommandInput | DescribeUserCommandInput | GenerateEmbedUrlForAnonymousUserCommandInput | GenerateEmbedUrlForRegisteredUserCommandInput | GetDashboardEmbedUrlCommandInput | GetSessionEmbedUrlCommandInput | ListAnalysesCommandInput | ListDashboardVersionsCommandInput | ListDashboardsCommandInput | ListDataSetsCommandInput | ListDataSourcesCommandInput | ListFolderMembersCommandInput | ListFoldersCommandInput | ListGroupMembershipsCommandInput | ListGroupsCommandInput | ListIAMPolicyAssignmentsCommandInput | ListIAMPolicyAssignmentsForUserCommandInput | ListIngestionsCommandInput | ListNamespacesCommandInput | ListTagsForResourceCommandInput | ListTemplateAliasesCommandInput | ListTemplateVersionsCommandInput | ListTemplatesCommandInput | ListThemeAliasesCommandInput | ListThemeVersionsCommandInput | ListThemesCommandInput | ListUserGroupsCommandInput | ListUsersCommandInput | RegisterUserCommandInput | RestoreAnalysisCommandInput | SearchAnalysesCommandInput | SearchDashboardsCommandInput | SearchFoldersCommandInput | SearchGroupsCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAccountCustomizationCommandInput | UpdateAccountSettingsCommandInput | UpdateAnalysisCommandInput | UpdateAnalysisPermissionsCommandInput | UpdateDashboardCommandInput | UpdateDashboardPermissionsCommandInput | UpdateDashboardPublishedVersionCommandInput | UpdateDataSetCommandInput | UpdateDataSetPermissionsCommandInput | UpdateDataSourceCommandInput | UpdateDataSourcePermissionsCommandInput | UpdateFolderCommandInput | UpdateFolderPermissionsCommandInput | UpdateGroupCommandInput | UpdateIAMPolicyAssignmentCommandInput | UpdateIpRestrictionCommandInput | UpdatePublicSharingSettingsCommandInput | UpdateTemplateAliasCommandInput | UpdateTemplateCommandInput | UpdateTemplatePermissionsCommandInput | UpdateThemeAliasCommandInput | UpdateThemeCommandInput | UpdateThemePermissionsCommandInput | UpdateUserCommandInput;
    export type ServiceOutputTypes = CancelIngestionCommandOutput | CreateAccountCustomizationCommandOutput | CreateAccountSubscriptionCommandOutput | CreateAnalysisCommandOutput | CreateDashboardCommandOutput | CreateDataSetCommandOutput | CreateDataSourceCommandOutput | CreateFolderCommandOutput | CreateFolderMembershipCommandOutput | CreateGroupCommandOutput | CreateGroupMembershipCommandOutput | CreateIAMPolicyAssignmentCommandOutput | CreateIngestionCommandOutput | CreateNamespaceCommandOutput | CreateTemplateAliasCommandOutput | CreateTemplateCommandOutput | CreateThemeAliasCommandOutput | CreateThemeCommandOutput | DeleteAccountCustomizationCommandOutput | DeleteAnalysisCommandOutput | DeleteDashboardCommandOutput | DeleteDataSetCommandOutput | DeleteDataSourceCommandOutput | DeleteFolderCommandOutput | DeleteFolderMembershipCommandOutput | DeleteGroupCommandOutput | DeleteGroupMembershipCommandOutput | DeleteIAMPolicyAssignmentCommandOutput | DeleteNamespaceCommandOutput | DeleteTemplateAliasCommandOutput | DeleteTemplateCommandOutput | DeleteThemeAliasCommandOutput | DeleteThemeCommandOutput | DeleteUserByPrincipalIdCommandOutput | DeleteUserCommandOutput | DescribeAccountCustomizationCommandOutput | DescribeAccountSettingsCommandOutput | DescribeAccountSubscriptionCommandOutput | DescribeAnalysisCommandOutput | DescribeAnalysisPermissionsCommandOutput | DescribeDashboardCommandOutput | DescribeDashboardPermissionsCommandOutput | DescribeDataSetCommandOutput | DescribeDataSetPermissionsCommandOutput | DescribeDataSourceCommandOutput | DescribeDataSourcePermissionsCommandOutput | DescribeFolderCommandOutput | DescribeFolderPermissionsCommandOutput | DescribeFolderResolvedPermissionsCommandOutput | DescribeGroupCommandOutput | DescribeGroupMembershipCommandOutput | DescribeIAMPolicyAssignmentCommandOutput | DescribeIngestionCommandOutput | DescribeIpRestrictionCommandOutput | DescribeNamespaceCommandOutput | DescribeTemplateAliasCommandOutput | DescribeTemplateCommandOutput | DescribeTemplatePermissionsCommandOutput | DescribeThemeAliasCommandOutput | DescribeThemeCommandOutput | DescribeThemePermissionsCommandOutput | DescribeUserCommandOutput | GenerateEmbedUrlForAnonymousUserCommandOutput | GenerateEmbedUrlForRegisteredUserCommandOutput | GetDashboardEmbedUrlCommandOutput | GetSessionEmbedUrlCommandOutput | ListAnalysesCommandOutput | ListDashboardVersionsCommandOutput | ListDashboardsCommandOutput | ListDataSetsCommandOutput | ListDataSourcesCommandOutput | ListFolderMembersCommandOutput | ListFoldersCommandOutput | ListGroupMembershipsCommandOutput | ListGroupsCommandOutput | ListIAMPolicyAssignmentsCommandOutput | ListIAMPolicyAssignmentsForUserCommandOutput | ListIngestionsCommandOutput | ListNamespacesCommandOutput | ListTagsForResourceCommandOutput | ListTemplateAliasesCommandOutput | ListTemplateVersionsCommandOutput | ListTemplatesCommandOutput | ListThemeAliasesCommandOutput | ListThemeVersionsCommandOutput | ListThemesCommandOutput | ListUserGroupsCommandOutput | ListUsersCommandOutput | RegisterUserCommandOutput | RestoreAnalysisCommandOutput | SearchAnalysesCommandOutput | SearchDashboardsCommandOutput | SearchFoldersCommandOutput | SearchGroupsCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAccountCustomizationCommandOutput | UpdateAccountSettingsCommandOutput | UpdateAnalysisCommandOutput | UpdateAnalysisPermissionsCommandOutput | UpdateDashboardCommandOutput | UpdateDashboardPermissionsCommandOutput | UpdateDashboardPublishedVersionCommandOutput | UpdateDataSetCommandOutput | UpdateDataSetPermissionsCommandOutput | UpdateDataSourceCommandOutput | UpdateDataSourcePermissionsCommandOutput | UpdateFolderCommandOutput | UpdateFolderPermissionsCommandOutput | UpdateGroupCommandOutput | UpdateIAMPolicyAssignmentCommandOutput | UpdateIpRestrictionCommandOutput | UpdatePublicSharingSettingsCommandOutput | UpdateTemplateAliasCommandOutput | UpdateTemplateCommandOutput | UpdateTemplatePermissionsCommandOutput | UpdateThemeAliasCommandOutput | UpdateThemeCommandOutput | UpdateThemePermissionsCommandOutput | UpdateUserCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type QuickSightClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of QuickSightClient class constructor that set the region, credentials and other options.
        */
    export interface QuickSightClientConfig extends QuickSightClientConfigType {
    }
    type QuickSightClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of QuickSightClient class. This is resolved and normalized from the {@link QuickSightClientConfig | constructor configuration interface}.
        */
    export interface QuickSightClientResolvedConfig extends QuickSightClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon QuickSight API Reference</fullname>
        *         <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the
        *             Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your
        *             organization. This API reference contains documentation for a programming interface that
        *             you can use to manage Amazon QuickSight. </p>
        */
    export class QuickSightClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, QuickSightClientResolvedConfig> {
            /**
                * The resolved configuration of QuickSightClient class. This is resolved and normalized from the {@link QuickSightClientConfig | constructor configuration interface}.
                */
            readonly config: QuickSightClientResolvedConfig;
            constructor(configuration: QuickSightClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { QuickSightServiceException as __BaseException } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/QuickSightServiceException";
    /**
        * <p>You don't have access to this item. The provided credentials couldn't be
        * 			validated. You might not be authorized to carry out the request. Make sure that your
        * 			account is authorized to use the Amazon QuickSight service, that your policies have the
        * 			correct permissions, and that you are using the correct access keys.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>The Amazon QuickSight customizations associated with your Amazon Web Services account or a QuickSight namespace in a specific Amazon Web Services Region.</p>
        */
    export interface AccountCustomization {
            /**
                * <p>The default theme for this Amazon QuickSight subscription.</p>
                */
            DefaultTheme?: string;
            /**
                * <p>The default email customization template.</p>
                */
            DefaultEmailCustomizationTemplate?: string;
    }
    export namespace AccountCustomization {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountCustomization) => any;
    }
    export enum Edition {
            ENTERPRISE = "ENTERPRISE",
            ENTERPRISE_AND_Q = "ENTERPRISE_AND_Q",
            STANDARD = "STANDARD"
    }
    /**
        * <p>A structure that contains the following account information
        *             elements:</p>
        *          <ul>
        *             <li>
        *                <p>Your Amazon QuickSight account name.</p>
        *             </li>
        *             <li>
        *                <p>The edition of Amazon QuickSight that your account is using.</p>
        *             </li>
        *             <li>
        *                <p>The notification email address that is associated with the Amazon QuickSight account.
        *             </p>
        *             </li>
        *             <li>
        *                <p>The authentication type of the Amazon QuickSight account.</p>
        *             </li>
        *             <li>
        *                <p>The status of the Amazon QuickSight account's subscription.</p>
        *             </li>
        *          </ul>
        */
    export interface AccountInfo {
            /**
                * <p>The account name that you provided for the Amazon QuickSight subscription in your
                *                 Amazon Web Services account. You create this name when you sign up for Amazon QuickSight. It's unique over all of Amazon Web Services, and it appears only when
                *             users sign in.</p>
                */
            AccountName?: string;
            /**
                * <p>The edition of your Amazon QuickSight account.</p>
                */
            Edition?: Edition | string;
            /**
                * <p>The email address that will be used for Amazon QuickSight to send notifications regarding your Amazon Web Services account or Amazon QuickSight subscription.</p>
                */
            NotificationEmail?: string;
            /**
                * <p>The way that your Amazon QuickSight account is authenticated.</p>
                */
            AuthenticationType?: string;
            /**
                * <p>The status of your account subscription.</p>
                */
            AccountSubscriptionStatus?: string;
    }
    export namespace AccountInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountInfo) => any;
    }
    /**
        * <p>The Amazon QuickSight settings associated with your Amazon Web Services account.</p>
        */
    export interface AccountSettings {
            /**
                * <p>The "account name" you provided for the Amazon QuickSight subscription in your Amazon Web Services account.
                *             You create this name when you sign up for Amazon QuickSight. It is unique in all of Amazon Web Services and
                *             it appears only when users sign in.</p>
                */
            AccountName?: string;
            /**
                * <p>The edition of Amazon QuickSight that you're currently subscribed to:
                *         Enterprise edition or Standard edition.</p>
                */
            Edition?: Edition | string;
            /**
                * <p>The default Amazon QuickSight namespace for your Amazon Web Services account. </p>
                */
            DefaultNamespace?: string;
            /**
                * <p>The main notification email for your Amazon QuickSight subscription.</p>
                */
            NotificationEmail?: string;
            /**
                * <p>A Boolean value that indicates whether public sharing is turned on for an Amazon QuickSight account. For more information about turning on public sharing, see <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdatePublicSharingSettings.html">UpdatePublicSharingSettings</a>.</p>
                */
            PublicSharingEnabled?: boolean;
    }
    export namespace AccountSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountSettings) => any;
    }
    /**
        * <p>The active Identity and Access Management (IAM) policy assignment.</p>
        */
    export interface ActiveIAMPolicyAssignment {
            /**
                * <p>A name for the IAM policy assignment.</p>
                */
            AssignmentName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            PolicyArn?: string;
    }
    export namespace ActiveIAMPolicyAssignment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActiveIAMPolicyAssignment) => any;
    }
    export enum DashboardBehavior {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>An ad hoc (one-time) filtering option.</p>
        */
    export interface AdHocFilteringOption {
            /**
                * <p>Availability status.</p>
                */
            AvailabilityStatus?: DashboardBehavior | string;
    }
    export namespace AdHocFilteringOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdHocFilteringOption) => any;
    }
    /**
        * <p>The parameters for OpenSearch.</p>
        */
    export interface AmazonElasticsearchParameters {
            /**
                * <p>The OpenSearch domain.</p>
                */
            Domain: string | undefined;
    }
    export namespace AmazonElasticsearchParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AmazonElasticsearchParameters) => any;
    }
    /**
        * <p>The parameters for OpenSearch.</p>
        */
    export interface AmazonOpenSearchParameters {
            /**
                * <p>The OpenSearch domain.</p>
                */
            Domain: string | undefined;
    }
    export namespace AmazonOpenSearchParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AmazonOpenSearchParameters) => any;
    }
    export enum AnalysisErrorType {
            ACCESS_DENIED = "ACCESS_DENIED",
            COLUMN_GEOGRAPHIC_ROLE_MISMATCH = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
            COLUMN_REPLACEMENT_MISSING = "COLUMN_REPLACEMENT_MISSING",
            COLUMN_TYPE_MISMATCH = "COLUMN_TYPE_MISMATCH",
            DATA_SET_NOT_FOUND = "DATA_SET_NOT_FOUND",
            INTERNAL_FAILURE = "INTERNAL_FAILURE",
            PARAMETER_NOT_FOUND = "PARAMETER_NOT_FOUND",
            PARAMETER_TYPE_INVALID = "PARAMETER_TYPE_INVALID",
            PARAMETER_VALUE_INCOMPATIBLE = "PARAMETER_VALUE_INCOMPATIBLE",
            SOURCE_NOT_FOUND = "SOURCE_NOT_FOUND"
    }
    /**
        * <p>Analysis error.</p>
        */
    export interface AnalysisError {
            /**
                * <p>The type of the analysis error.</p>
                */
            Type?: AnalysisErrorType | string;
            /**
                * <p>The message associated with the analysis error.</p>
                */
            Message?: string;
    }
    export namespace AnalysisError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnalysisError) => any;
    }
    /**
        * <p>A <i>sheet</i>, which is an object that contains a set of visuals that
        *             are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
        *             contains at least one sheet. Each sheet contains at least one visualization widget, for
        *             example a chart, pivot table, or narrative insight. Sheets can be associated with other
        *             components, such as controls, filters, and so on.</p>
        */
    export interface Sheet {
            /**
                * <p>The unique identifier associated with a sheet.</p>
                */
            SheetId?: string;
            /**
                * <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
                *             console.</p>
                */
            Name?: string;
    }
    export namespace Sheet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Sheet) => any;
    }
    export enum ResourceStatus {
            CREATION_FAILED = "CREATION_FAILED",
            CREATION_IN_PROGRESS = "CREATION_IN_PROGRESS",
            CREATION_SUCCESSFUL = "CREATION_SUCCESSFUL",
            DELETED = "DELETED",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
            UPDATE_SUCCESSFUL = "UPDATE_SUCCESSFUL"
    }
    /**
        * <p>Metadata structure for an analysis in Amazon QuickSight</p>
        */
    export interface Analysis {
            /**
                * <p>The ID of the analysis.</p>
                */
            AnalysisId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the analysis.</p>
                */
            Arn?: string;
            /**
                * <p>The descriptive name of the analysis.</p>
                */
            Name?: string;
            /**
                * <p>Status associated with the analysis.</p>
                */
            Status?: ResourceStatus | string;
            /**
                * <p>Errors associated with the analysis.</p>
                */
            Errors?: AnalysisError[];
            /**
                * <p>The ARNs of the datasets of the analysis.</p>
                */
            DataSetArns?: string[];
            /**
                * <p>The ARN of the theme of the analysis.</p>
                */
            ThemeArn?: string;
            /**
                * <p>The time that the analysis was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The time that the analysis was last updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
                */
            Sheets?: Sheet[];
    }
    export namespace Analysis {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Analysis) => any;
    }
    export enum AnalysisFilterAttribute {
            QUICKSIGHT_USER = "QUICKSIGHT_USER"
    }
    export enum FilterOperator {
            StringEquals = "StringEquals"
    }
    /**
        * <p>A filter that you apply when searching for one or more analyses.</p>
        */
    export interface AnalysisSearchFilter {
            /**
                * <p>The comparison operator that you want to use as a filter, for example
                *                 <code>"Operator": "StringEquals"</code>.</p>
                */
            Operator?: FilterOperator | string;
            /**
                * <p>The name of the value that you want to use as a filter, for example <code>"Name":
                *                 "QUICKSIGHT_USER"</code>.</p>
                */
            Name?: AnalysisFilterAttribute | string;
            /**
                * <p>The value of the named item, in this case <code>QUICKSIGHT_USER</code>, that you want
                *             to use as a filter, for example <code>"Value"</code>. An example is
                *                 <code>"arn:aws:quicksight:us-east-1:1:user/default/UserName1"</code>.</p>
                */
            Value?: string;
    }
    export namespace AnalysisSearchFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnalysisSearchFilter) => any;
    }
    /**
        * <p>Dataset reference.</p>
        */
    export interface DataSetReference {
            /**
                * <p>Dataset placeholder.</p>
                */
            DataSetPlaceholder: string | undefined;
            /**
                * <p>Dataset Amazon Resource Name (ARN).</p>
                */
            DataSetArn: string | undefined;
    }
    export namespace DataSetReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSetReference) => any;
    }
    /**
        * <p>The source template of an analysis.</p>
        */
    export interface AnalysisSourceTemplate {
            /**
                * <p>The dataset references of the source template of an analysis.</p>
                */
            DataSetReferences: DataSetReference[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the source template of an analysis.</p>
                */
            Arn: string | undefined;
    }
    export namespace AnalysisSourceTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnalysisSourceTemplate) => any;
    }
    /**
        * <p>The source entity of an analysis.</p>
        */
    export interface AnalysisSourceEntity {
            /**
                * <p>The source template for the source entity of the analysis.</p>
                */
            SourceTemplate?: AnalysisSourceTemplate;
    }
    export namespace AnalysisSourceEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnalysisSourceEntity) => any;
    }
    /**
        * <p>The summary metadata that describes an analysis.</p>
        */
    export interface AnalysisSummary {
            /**
                * <p>The Amazon Resource Name (ARN) for the analysis.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the analysis. This ID displays in the URL.</p>
                */
            AnalysisId?: string;
            /**
                * <p>The name of the analysis. This name is displayed in the Amazon QuickSight console.
                *             </p>
                */
            Name?: string;
            /**
                * <p>The last known status for the analysis.</p>
                */
            Status?: ResourceStatus | string;
            /**
                * <p>The time that the analysis was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The time that the analysis was last updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace AnalysisSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnalysisSummary) => any;
    }
    /**
        * <p>Information about the dashboard that you want to embed.</p>
        */
    export interface AnonymousUserDashboardEmbeddingConfiguration {
            /**
                * <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard.</p>
                *         <p>The Amazon Resource Name (ARN) of this dashboard must be included in the <code>AuthorizedResourceArns</code> parameter. Otherwise, the request will fail with <code>InvalidParameterValueException</code>.</p>
                */
            InitialDashboardId: string | undefined;
    }
    export namespace AnonymousUserDashboardEmbeddingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnonymousUserDashboardEmbeddingConfiguration) => any;
    }
    /**
        * <p>The type of experience you want to embed. For anonymous users, you can embed Amazon QuickSight dashboards.</p>
        */
    export interface AnonymousUserEmbeddingExperienceConfiguration {
            /**
                * <p>The type of embedding experience. In this case, Amazon QuickSight dashboards.</p>
                */
            Dashboard?: AnonymousUserDashboardEmbeddingConfiguration;
    }
    export namespace AnonymousUserEmbeddingExperienceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnonymousUserEmbeddingExperienceConfiguration) => any;
    }
    export enum AssignmentStatus {
            DISABLED = "DISABLED",
            DRAFT = "DRAFT",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Parameters for Amazon Athena.</p>
        */
    export interface AthenaParameters {
            /**
                * <p>The workgroup that Amazon Athena uses.</p>
                */
            WorkGroup?: string;
    }
    export namespace AthenaParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AthenaParameters) => any;
    }
    /**
        * <p>Parameters for Amazon Aurora.</p>
        */
    export interface AuroraParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace AuroraParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuroraParameters) => any;
    }
    /**
        * <p>Parameters for Amazon Aurora PostgreSQL-Compatible Edition.</p>
        */
    export interface AuroraPostgreSqlParameters {
            /**
                * <p>The Amazon Aurora PostgreSQL-Compatible host to connect to.</p>
                */
            Host: string | undefined;
            /**
                * <p>The port that Amazon Aurora PostgreSQL is listening on.</p>
                */
            Port: number | undefined;
            /**
                * <p>The Amazon Aurora PostgreSQL database to connect to.</p>
                */
            Database: string | undefined;
    }
    export namespace AuroraPostgreSqlParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuroraPostgreSqlParameters) => any;
    }
    export enum AuthenticationMethodOption {
            ACTIVE_DIRECTORY = "ACTIVE_DIRECTORY",
            IAM_AND_QUICKSIGHT = "IAM_AND_QUICKSIGHT",
            IAM_ONLY = "IAM_ONLY"
    }
    /**
        * <p>The parameters for IoT Analytics.</p>
        */
    export interface AwsIotAnalyticsParameters {
            /**
                * <p>Dataset name.</p>
                */
            DataSetName: string | undefined;
    }
    export namespace AwsIotAnalyticsParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIotAnalyticsParameters) => any;
    }
    /**
        * <p>The display options for tile borders for visuals.</p>
        */
    export interface BorderStyle {
            /**
                * <p>The option to enable display of borders for visuals.</p>
                */
            Show?: boolean;
    }
    export namespace BorderStyle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BorderStyle) => any;
    }
    /**
        * <p>A calculated column for a dataset.</p>
        */
    export interface CalculatedColumn {
            /**
                * <p>Column name.</p>
                */
            ColumnName: string | undefined;
            /**
                * <p>A unique ID to identify a calculated column. During a dataset update, if the column ID
                *             of a calculated column matches that of an existing calculated column, Amazon QuickSight
                *             preserves the existing calculated column.</p>
                */
            ColumnId: string | undefined;
            /**
                * <p>An expression that defines the calculated column.</p>
                */
            Expression: string | undefined;
    }
    export namespace CalculatedColumn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculatedColumn) => any;
    }
    export interface CancelIngestionRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the dataset used in the ingestion.</p>
                */
            DataSetId: string | undefined;
            /**
                * <p>An ID for the ingestion.</p>
                */
            IngestionId: string | undefined;
    }
    export namespace CancelIngestionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelIngestionRequest) => any;
    }
    export interface CancelIngestionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) for the data ingestion.</p>
                */
            Arn?: string;
            /**
                * <p>An ID for the ingestion.</p>
                */
            IngestionId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CancelIngestionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelIngestionResponse) => any;
    }
    /**
        * <p>An internal failure occurred.</p>
        */
    export class InternalFailureException extends __BaseException {
            readonly name: "InternalFailureException";
            readonly $fault: "server";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalFailureException, __BaseException>);
    }
    /**
        * <p>One or more parameters has a value that isn't valid.</p>
        */
    export class InvalidParameterValueException extends __BaseException {
            readonly name: "InvalidParameterValueException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>);
    }
    export enum ExceptionResourceType {
            ACCOUNT_SETTINGS = "ACCOUNT_SETTINGS",
            DATA_SET = "DATA_SET",
            DATA_SOURCE = "DATA_SOURCE",
            GROUP = "GROUP",
            IAMPOLICY_ASSIGNMENT = "IAMPOLICY_ASSIGNMENT",
            INGESTION = "INGESTION",
            NAMESPACE = "NAMESPACE",
            USER = "USER",
            VPC_CONNECTION = "VPC_CONNECTION"
    }
    /**
        * <p>The resource specified already exists. </p>
        */
    export class ResourceExistsException extends __BaseException {
            readonly name: "ResourceExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The resource type for this request.</p>
                */
            ResourceType?: ExceptionResourceType | string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceExistsException, __BaseException>);
    }
    /**
        * <p>One or more resources can't be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The resource type for this request.</p>
                */
            ResourceType?: ExceptionResourceType | string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Access is throttled.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export enum ColumnDataType {
            DATETIME = "DATETIME",
            DECIMAL = "DECIMAL",
            INTEGER = "INTEGER",
            STRING = "STRING"
    }
    /**
        * <p>A transform operation that casts a column to a different type.</p>
        */
    export interface CastColumnTypeOperation {
            /**
                * <p>Column name.</p>
                */
            ColumnName: string | undefined;
            /**
                * <p>New column data type.</p>
                */
            NewColumnType: ColumnDataType | string | undefined;
            /**
                * <p>When casting a column from string to datetime type, you can supply a string in a
                *             format supported by Amazon QuickSight to denote the source data format.</p>
                */
            Format?: string;
    }
    export namespace CastColumnTypeOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CastColumnTypeOperation) => any;
    }
    /**
        * <p>Metadata that contains a description for a column.</p>
        */
    export interface ColumnDescription {
            /**
                * <p>The text of a description for a column.</p>
                */
            Text?: string;
    }
    export namespace ColumnDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnDescription) => any;
    }
    export enum GeoSpatialCountryCode {
            US = "US"
    }
    /**
        * <p>Geospatial column group that denotes a hierarchy.</p>
        */
    export interface GeoSpatialColumnGroup {
            /**
                * <p>A display name for the hierarchy.</p>
                */
            Name: string | undefined;
            /**
                * <p>Country code.</p>
                */
            CountryCode: GeoSpatialCountryCode | string | undefined;
            /**
                * <p>Columns in this hierarchy.</p>
                */
            Columns: string[] | undefined;
    }
    export namespace GeoSpatialColumnGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GeoSpatialColumnGroup) => any;
    }
    /**
        * <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
        *             a variant type structure. For this structure to be valid, only one of the attributes can
        *             be non-null.</p>
        */
    export interface ColumnGroup {
            /**
                * <p>Geospatial column group that denotes a hierarchy.</p>
                */
            GeoSpatialColumnGroup?: GeoSpatialColumnGroup;
    }
    export namespace ColumnGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnGroup) => any;
    }
    /**
        * <p>A structure describing the name, data type, and geographic role of the columns.</p>
        */
    export interface ColumnGroupColumnSchema {
            /**
                * <p>The name of the column group's column schema.</p>
                */
            Name?: string;
    }
    export namespace ColumnGroupColumnSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnGroupColumnSchema) => any;
    }
    /**
        * <p>The column group schema.</p>
        */
    export interface ColumnGroupSchema {
            /**
                * <p>The name of the column group schema.</p>
                */
            Name?: string;
            /**
                * <p>A structure containing the list of schemas for column group columns.</p>
                */
            ColumnGroupColumnSchemaList?: ColumnGroupColumnSchema[];
    }
    export namespace ColumnGroupSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnGroupSchema) => any;
    }
    /**
        * <p>A rule defined to grant access on one or more restricted columns.
        *             Each dataset can have multiple rules.
        *             To create a restricted column, you add it to one or more rules.
        *             Each rule must contain at least one column and at least one user or group.
        *             To be able to see a restricted column, a user or group needs to be added
        *             to a rule for that column.</p>
        */
    export interface ColumnLevelPermissionRule {
            /**
                * <p>An array of Amazon Resource Names (ARNs) for Amazon QuickSight users or groups.</p>
                */
            Principals?: string[];
            /**
                * <p>An array of column names.</p>
                */
            ColumnNames?: string[];
    }
    export namespace ColumnLevelPermissionRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnLevelPermissionRule) => any;
    }
    /**
        * <p>The column schema.</p>
        */
    export interface ColumnSchema {
            /**
                * <p>The name of the column schema.</p>
                */
            Name?: string;
            /**
                * <p>The data type of the column schema.</p>
                */
            DataType?: string;
            /**
                * <p>The geographic role of the column schema.</p>
                */
            GeographicRole?: string;
    }
    export namespace ColumnSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnSchema) => any;
    }
    export enum GeoSpatialDataRole {
            CITY = "CITY",
            COUNTRY = "COUNTRY",
            COUNTY = "COUNTY",
            LATITUDE = "LATITUDE",
            LONGITUDE = "LONGITUDE",
            POSTCODE = "POSTCODE",
            STATE = "STATE"
    }
    /**
        * <p>A tag for a column in a
        *             <code>
        *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html">TagColumnOperation</a>
        *             </code>
        *             structure. This is a
        *             variant type structure. For this structure to be valid, only one of the attributes can
        *             be non-null.</p>
        */
    export interface ColumnTag {
            /**
                * <p>A geospatial role for a column.</p>
                */
            ColumnGeographicRole?: GeoSpatialDataRole | string;
            /**
                * <p>A description for a column.</p>
                */
            ColumnDescription?: ColumnDescription;
    }
    export namespace ColumnTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnTag) => any;
    }
    export enum ColumnTagName {
            COLUMN_DESCRIPTION = "COLUMN_DESCRIPTION",
            COLUMN_GEOGRAPHIC_ROLE = "COLUMN_GEOGRAPHIC_ROLE"
    }
    /**
        * <p>A resource is already in a state that indicates an operation is happening that must complete
        * 			before a new update can be applied.</p>
        */
    export class ConcurrentUpdatingException extends __BaseException {
            readonly name: "ConcurrentUpdatingException";
            readonly $fault: "server";
            Message?: string;
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentUpdatingException, __BaseException>);
    }
    /**
        * <p>Updating or deleting a resource can cause an inconsistent state.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
        *             resource.</p>
        */
    export interface Tag {
            /**
                * <p>Tag key.</p>
                */
            Key: string | undefined;
            /**
                * <p>Tag value.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateAccountCustomizationRequest {
            /**
                * <p>The ID for the Amazon Web Services account that you want to customize Amazon QuickSight for.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The Amazon QuickSight namespace that you want to add customizations to.</p>
                */
            Namespace?: string;
            /**
                * <p>The Amazon QuickSight customizations you're adding in the current Amazon Web Services Region. You can add
                *             these to an Amazon Web Services account and a QuickSight namespace. </p>
                *         <p>For example, you can add a default theme by setting <code>AccountCustomization</code>
                *             to the midnight theme: <code>"AccountCustomization": { "DefaultTheme":
                *                 "arn:aws:quicksight::aws:theme/MIDNIGHT" }</code>. Or, you can add a custom theme by
                *             specifying <code>"AccountCustomization": { "DefaultTheme":
                *                 "arn:aws:quicksight:us-west-2:111122223333:theme/bdb844d0-0fe9-4d9d-b520-0fe602d93639"
                *                 }</code>. </p>
                */
            AccountCustomization: AccountCustomization | undefined;
            /**
                * <p>A list of the tags that you want to attach to this resource.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateAccountCustomizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccountCustomizationRequest) => any;
    }
    export interface CreateAccountCustomizationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) for the customization that you created for this Amazon Web Services account.</p>
                */
            Arn?: string;
            /**
                * <p>The ID for the Amazon Web Services account that you want to customize Amazon QuickSight for.</p>
                */
            AwsAccountId?: string;
            /**
                * <p>The namespace associated with the customization you're creating. </p>
                */
            Namespace?: string;
            /**
                * <p>The Amazon QuickSight customizations you're adding in the current Amazon Web Services Region. </p>
                */
            AccountCustomization?: AccountCustomization;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateAccountCustomizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccountCustomizationResponse) => any;
    }
    /**
        * <p>This resource is currently unavailable.</p>
        */
    export class ResourceUnavailableException extends __BaseException {
            readonly name: "ResourceUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * <p>The resource type for this request.</p>
                */
            ResourceType?: ExceptionResourceType | string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>);
    }
    export interface CreateAccountSubscriptionRequest {
            /**
                * <p>The edition of Amazon QuickSight that you want your account to have. Currently, you can
                *             choose from <code>ENTERPRISE</code> or
                *                 <code>ENTERPRISE_AND_Q</code>.</p>
                *          <p>If you choose <code>ENTERPRISE_AND_Q</code>, the following parameters are
                *             required:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>FirstName</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LastName</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>EmailAddress</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ContactNumber</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Edition: Edition | string | undefined;
            /**
                * <p>The method that you want to use to authenticate your Amazon QuickSight account. Currently, the valid values for this parameter are <code>IAM_AND_QUICKSIGHT</code>, <code>IAM_ONLY</code>, and <code>ACTIVE_DIRECTORY</code>.</p>
                *          <p>If you choose <code>ACTIVE_DIRECTORY</code>, provide an <code>ActiveDirectoryName</code>
                *             and an <code>AdminGroup</code> associated with your Active Directory.</p>
                */
            AuthenticationMethod: AuthenticationMethodOption | string | undefined;
            /**
                * <p>The Amazon Web Services account ID of the account that you're using to create your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The name of your Amazon QuickSight account. This name is unique over all of Amazon Web Services, and it appears only when users sign in. You can't change
                *                 <code>AccountName</code> value after the Amazon QuickSight account is
                *             created.</p>
                */
            AccountName: string | undefined;
            /**
                * <p>The email address that you want Amazon QuickSight to send notifications to regarding your Amazon QuickSight account or Amazon QuickSight subscription.</p>
                */
            NotificationEmail: string | undefined;
            /**
                * <p>The name of your Active Directory. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account.</p>
                */
            ActiveDirectoryName?: string;
            /**
                * <p>The realm of the Active Directory that is associated with your Amazon QuickSight account. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account.</p>
                */
            Realm?: string;
            /**
                * <p>The ID of the Active Directory that is associated with your Amazon QuickSight account.</p>
                */
            DirectoryId?: string;
            /**
                * <p>The admin group associated with your Active Directory. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account. For more information about using
                *             Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with
                *                     Amazon QuickSight Enterprise Edition</a> in the Amazon QuickSight
                *                 User Guide.</p>
                */
            AdminGroup?: string[];
            /**
                * <p>The author group associated with your Active Directory. For more information about using
                *             Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with
                *                     Amazon QuickSight Enterprise Edition</a> in the Amazon QuickSight
                *                 User Guide.</p>
                */
            AuthorGroup?: string[];
            /**
                * <p>The reader group associated with your Active Direcrtory. For more information about
                *             using Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with
                *                     Amazon QuickSight Enterprise Edition</a> in the <i>Amazon QuickSight
                *                 User Guide</i>.</p>
                */
            ReaderGroup?: string[];
            /**
                * <p>The first name of the author of the Amazon QuickSight account to use for future
                *             communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected
                *             edition of the new Amazon QuickSight account.</p>
                */
            FirstName?: string;
            /**
                * <p>The last name of the author of the Amazon QuickSight account to use for future
                *             communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected
                *             edition of the new Amazon QuickSight account.</p>
                */
            LastName?: string;
            /**
                * <p>The email address of the author of the Amazon QuickSight account to use for future
                *             communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected
                *             edition of the new Amazon QuickSight account.</p>
                */
            EmailAddress?: string;
            /**
                * <p>A 10-digit phone number for the author of the Amazon QuickSight account to use for
                *             future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the
                *             selected edition of the new Amazon QuickSight account.</p>
                */
            ContactNumber?: string;
    }
    export namespace CreateAccountSubscriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccountSubscriptionRequest) => any;
    }
    /**
        * <p>A <code>SignupResponse</code> object that contains a summary of a newly created account.</p>
        */
    export interface SignupResponse {
            /**
                * <p>A Boolean that is <code>TRUE</code> if the Amazon QuickSight uses IAM as an
                *             authentication method.</p>
                */
            IAMUser?: boolean;
            /**
                * <p>The user login name for your Amazon QuickSight account.</p>
                */
            userLoginName?: string;
            /**
                * <p>The name of your Amazon QuickSight account.</p>
                */
            accountName?: string;
            /**
                * <p>The type of Active Directory that is being used to authenticate the Amazon QuickSight
                *             account. Valid values are <code>SIMPLE_AD</code>, <code>AD_CONNECTOR</code>, and
                *                 <code>MICROSOFT_AD</code>.</p>
                */
            directoryType?: string;
    }
    export namespace SignupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SignupResponse) => any;
    }
    export interface CreateAccountSubscriptionResponse {
            /**
                * <p>A <code>SignupResponse</code> object that returns information about a newly created Amazon QuickSight account.</p>
                */
            SignupResponse?: SignupResponse;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateAccountSubscriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccountSubscriptionResponse) => any;
    }
    /**
        * <p>One or more preconditions aren't met.</p>
        */
    export class PreconditionNotMetException extends __BaseException {
            readonly name: "PreconditionNotMetException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PreconditionNotMetException, __BaseException>);
    }
    /**
        * <p>A date-time parameter.</p>
        */
    export interface DateTimeParameter {
            /**
                * <p>A display name for the date-time parameter.</p>
                */
            Name: string | undefined;
            /**
                * <p>The values for the date-time parameter.</p>
                */
            Values: Date[] | undefined;
    }
    export namespace DateTimeParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DateTimeParameter) => any;
    }
    /**
        * <p>A decimal parameter.</p>
        */
    export interface DecimalParameter {
            /**
                * <p>A display name for the decimal parameter.</p>
                */
            Name: string | undefined;
            /**
                * <p>The values for the decimal parameter.</p>
                */
            Values: number[] | undefined;
    }
    export namespace DecimalParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DecimalParameter) => any;
    }
    /**
        * <p>An integer parameter.</p>
        */
    export interface IntegerParameter {
            /**
                * <p>The name of the integer parameter.</p>
                */
            Name: string | undefined;
            /**
                * <p>The values for the integer parameter.</p>
                */
            Values: number[] | undefined;
    }
    export namespace IntegerParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IntegerParameter) => any;
    }
    /**
        * <p>A string parameter.</p>
        */
    export interface StringParameter {
            /**
                * <p>A display name for a string parameter.</p>
                */
            Name: string | undefined;
            /**
                * <p>The values of a string parameter.</p>
                */
            Values: string[] | undefined;
    }
    export namespace StringParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StringParameter) => any;
    }
    /**
        * <p>A list of Amazon QuickSight parameters and the list's override values.</p>
        */
    export interface _Parameters {
            /**
                * <p>The parameters that have a data type of string.</p>
                */
            StringParameters?: StringParameter[];
            /**
                * <p>The parameters that have a data type of integer.</p>
                */
            IntegerParameters?: IntegerParameter[];
            /**
                * <p>The parameters that have a data type of decimal.</p>
                */
            DecimalParameters?: DecimalParameter[];
            /**
                * <p>The parameters that have a data type of date-time.</p>
                */
            DateTimeParameters?: DateTimeParameter[];
    }
    export namespace _Parameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: _Parameters) => any;
    }
    /**
        * <p>Permission for the resource.</p>
        */
    export interface ResourcePermission {
            /**
                * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
                *             following:</p>
                *         <ul>
                *             <li>
                *                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
                *             </li>
                *             <li>
                *                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
                *             </li>
                *             <li>
                *                 <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
                *                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
                *                     (This is less common.) </p>
                *             </li>
                *          </ul>
                */
            Principal: string | undefined;
            /**
                * <p>The IAM action to grant or revoke permissions on.</p>
                */
            Actions: string[] | undefined;
    }
    export namespace ResourcePermission {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourcePermission) => any;
    }
    export interface CreateAnalysisRequest {
            /**
                * <p>The ID of the Amazon Web Services account where you are creating an analysis.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the analysis that you're creating. This ID displays in the URL of the
                *             analysis.</p>
                */
            AnalysisId: string | undefined;
            /**
                * <p>A descriptive name for the analysis that you're creating. This name displays for the
                *             analysis in the Amazon QuickSight console. </p>
                */
            Name: string | undefined;
            /**
                * <p>The parameter names and override values that you want to use. An analysis can have
                *             any parameter type, and some parameters might accept multiple values. </p>
                */
            Parameters?: _Parameters;
            /**
                * <p>A structure that describes the principals and the resource-level permissions on an
                *             analysis. You can use the <code>Permissions</code> structure to grant permissions by
                *             providing a list of Identity and Access Management (IAM) action information for each
                *             principal listed by Amazon Resource Name (ARN). </p>
                *
                *         <p>To specify no permissions, omit <code>Permissions</code>.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>A source entity to use for the analysis that you're creating. This metadata structure
                *             contains details that describe a source template and one or more datasets.</p>
                */
            SourceEntity: AnalysisSourceEntity | undefined;
            /**
                * <p>The ARN for the theme to apply to the analysis that you're creating. To see the theme
                *             in the Amazon QuickSight console, make sure that you have access to it.</p>
                */
            ThemeArn?: string;
            /**
                * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the
                *             analysis.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAnalysisRequest) => any;
    }
    export interface CreateAnalysisResponse {
            /**
                * <p>The ARN for the analysis.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the analysis.</p>
                */
            AnalysisId?: string;
            /**
                * <p>The status of the creation of the analysis. </p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAnalysisResponse) => any;
    }
    /**
        * <p>This error indicates that you are calling an operation on an Amazon QuickSight
        * 			subscription where the edition doesn't include support for that operation. Amazon
        * 			Amazon QuickSight currently has Standard Edition and Enterprise Edition. Not every operation and
        * 			capability is available in every edition.</p>
        */
    export class UnsupportedUserEditionException extends __BaseException {
            readonly name: "UnsupportedUserEditionException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedUserEditionException, __BaseException>);
    }
    /**
        * <p>A transform operation that creates calculated columns. Columns created in one such
        *             operation form a lexical closure.</p>
        */
    export interface CreateColumnsOperation {
            /**
                * <p>Calculated columns to create.</p>
                */
            Columns: CalculatedColumn[] | undefined;
    }
    export namespace CreateColumnsOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateColumnsOperation) => any;
    }
    /**
        * <p>Export to .csv option.</p>
        */
    export interface ExportToCSVOption {
            /**
                * <p>Availability status.</p>
                */
            AvailabilityStatus?: DashboardBehavior | string;
    }
    export namespace ExportToCSVOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportToCSVOption) => any;
    }
    export enum DashboardUIState {
            COLLAPSED = "COLLAPSED",
            EXPANDED = "EXPANDED"
    }
    /**
        * <p>Sheet controls option.</p>
        */
    export interface SheetControlsOption {
            /**
                * <p>Visibility state.</p>
                */
            VisibilityState?: DashboardUIState | string;
    }
    export namespace SheetControlsOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SheetControlsOption) => any;
    }
    /**
        * <p>Dashboard publish options.</p>
        */
    export interface DashboardPublishOptions {
            /**
                * <p>Ad hoc (one-time) filtering option.</p>
                */
            AdHocFilteringOption?: AdHocFilteringOption;
            /**
                * <p>Export to .csv option.</p>
                */
            ExportToCSVOption?: ExportToCSVOption;
            /**
                * <p>Sheet controls option.</p>
                */
            SheetControlsOption?: SheetControlsOption;
    }
    export namespace DashboardPublishOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardPublishOptions) => any;
    }
    /**
        * <p>Dashboard source template.</p>
        */
    export interface DashboardSourceTemplate {
            /**
                * <p>Dataset references.</p>
                */
            DataSetReferences: DataSetReference[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn: string | undefined;
    }
    export namespace DashboardSourceTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardSourceTemplate) => any;
    }
    /**
        * <p>Dashboard source entity.</p>
        */
    export interface DashboardSourceEntity {
            /**
                * <p>Source template.</p>
                */
            SourceTemplate?: DashboardSourceTemplate;
    }
    export namespace DashboardSourceEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardSourceEntity) => any;
    }
    export interface CreateDashboardRequest {
            /**
                * <p>The ID of the Amazon Web Services account where you want to create the dashboard.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard, also added to the IAM policy.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The display name of the dashboard.</p>
                */
            Name: string | undefined;
            /**
                * <p>The parameters for the creation of the dashboard, which you want to use to override
                *             the default settings. A dashboard can have any type of parameters, and some parameters
                *             might accept multiple values. </p>
                */
            Parameters?: _Parameters;
            /**
                * <p>A structure that contains the permissions of the dashboard. You can use this structure
                *             for granting permissions by providing a list of IAM action information for each
                *             principal ARN. </p>
                *
                *         <p>To specify no permissions, omit the permissions list.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The entity that you are using as a source when you create the dashboard. In
                *             <code>SourceEntity</code>, you specify the type of object you're using as source. You
                *             can only create a dashboard from a template, so you use a <code>SourceTemplate</code>
                *             entity. If you need to create a dashboard from an analysis, first convert the analysis
                *             to a template by using the <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>
                *             </code>
                *             API operation. For
                *             <code>SourceTemplate</code>, specify the Amazon Resource Name (ARN) of the source
                *             template. The <code>SourceTemplate</code>ARN can contain any Amazon Web Services account and any
                *             Amazon QuickSight-supported Amazon Web Services Region. </p>
                *         <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> to
                *             list the replacement datasets for the placeholders listed in the original. The schema in
                *             each dataset must match its placeholder. </p>
                */
            SourceEntity: DashboardSourceEntity | undefined;
            /**
                * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the
                *             dashboard.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A description for the first version of the dashboard being created.</p>
                */
            VersionDescription?: string;
            /**
                * <p>Options for publishing the dashboard when you create it:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>AvailabilityStatus</code> for <code>AdHocFilteringOption</code> - This
                *                     status can be either <code>ENABLED</code> or <code>DISABLED</code>. When this is
                *                     set to <code>DISABLED</code>, Amazon QuickSight disables the left filter pane on the
                *                     published dashboard, which can be used for ad hoc (one-time) filtering. This
                *                     option is <code>ENABLED</code> by default. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>AvailabilityStatus</code> for <code>ExportToCSVOption</code> - This
                *                     status can be either <code>ENABLED</code> or <code>DISABLED</code>. The visual
                *                     option to export data to .CSV format isn't enabled when this is set to
                *                     <code>DISABLED</code>. This option is <code>ENABLED</code> by default. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VisibilityState</code> for <code>SheetControlsOption</code> - This
                *                     visibility state can be either <code>COLLAPSED</code> or <code>EXPANDED</code>.
                *                     This option is <code>COLLAPSED</code> by default. </p>
                *             </li>
                *          </ul>
                */
            DashboardPublishOptions?: DashboardPublishOptions;
            /**
                * <p>The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If
                *             you add a value for this field, it overrides the value that is used in the source
                *             entity. The theme ARN must exist in the same Amazon Web Services account where you create the
                *             dashboard.</p>
                */
            ThemeArn?: string;
    }
    export namespace CreateDashboardRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDashboardRequest) => any;
    }
    export interface CreateDashboardResponse {
            /**
                * <p>The ARN of the dashboard.</p>
                */
            Arn?: string;
            /**
                * <p>The ARN of the dashboard, including the version number of the first version that is
                *             created.</p>
                */
            VersionArn?: string;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId?: string;
            /**
                * <p>The status of the dashboard creation request.</p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateDashboardResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDashboardResponse) => any;
    }
    /**
        * <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
        */
    export interface DataSetUsageConfiguration {
            /**
                * <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
                */
            DisableUseAsDirectQuerySource?: boolean;
            /**
                * <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
                */
            DisableUseAsImportedSource?: boolean;
    }
    export namespace DataSetUsageConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSetUsageConfiguration) => any;
    }
    /**
        * <p>A FieldFolder element is a folder that contains fields and nested subfolders.</p>
        */
    export interface FieldFolder {
            /**
                * <p>The description for a field folder.</p>
                */
            description?: string;
            /**
                * <p>A folder has a list of columns. A column can only be in one folder.</p>
                */
            columns?: string[];
    }
    export namespace FieldFolder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FieldFolder) => any;
    }
    export enum DataSetImportMode {
            DIRECT_QUERY = "DIRECT_QUERY",
            SPICE = "SPICE"
    }
    /**
        * <p>A transform operation that filters rows based on a condition.</p>
        */
    export interface FilterOperation {
            /**
                * <p>An expression that must evaluate to a Boolean value. Rows for which the expression
                *             evaluates to true are kept in the dataset.</p>
                */
            ConditionExpression: string | undefined;
    }
    export namespace FilterOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterOperation) => any;
    }
    /**
        * <p>A transform operation that projects columns. Operations that come after a projection
        *             can only refer to projected columns.</p>
        */
    export interface ProjectOperation {
            /**
                * <p>Projected columns.</p>
                */
            ProjectedColumns: string[] | undefined;
    }
    export namespace ProjectOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectOperation) => any;
    }
    /**
        * <p>A transform operation that renames a column.</p>
        */
    export interface RenameColumnOperation {
            /**
                * <p>The name of the column to be renamed.</p>
                */
            ColumnName: string | undefined;
            /**
                * <p>The new name for the column.</p>
                */
            NewColumnName: string | undefined;
    }
    export namespace RenameColumnOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenameColumnOperation) => any;
    }
    /**
        * <p>A transform operation that tags a column with additional information.</p>
        */
    export interface TagColumnOperation {
            /**
                * <p>The column that this operation acts on.</p>
                */
            ColumnName: string | undefined;
            /**
                * <p>The dataset column tag, currently only used for geospatial type tagging.</p>
                *         <note>
                *             <p>This is not tags for the Amazon Web Services tagging feature.</p>
                *         </note>
                */
            Tags: ColumnTag[] | undefined;
    }
    export namespace TagColumnOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagColumnOperation) => any;
    }
    /**
        * <p>A transform operation that removes tags associated with a column.</p>
        */
    export interface UntagColumnOperation {
            /**
                * <p>The column that this operation acts on.</p>
                */
            ColumnName: string | undefined;
            /**
                * <p>The column tags to remove from this column.</p>
                */
            TagNames: (ColumnTagName | string)[] | undefined;
    }
    export namespace UntagColumnOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagColumnOperation) => any;
    }
    /**
        * <p>A data transformation on a logical table. This is a variant type structure. For this
        *             structure to be valid, only one of the attributes can be non-null.</p>
        */
    export type TransformOperation = TransformOperation.CastColumnTypeOperationMember | TransformOperation.CreateColumnsOperationMember | TransformOperation.FilterOperationMember | TransformOperation.ProjectOperationMember | TransformOperation.RenameColumnOperationMember | TransformOperation.TagColumnOperationMember | TransformOperation.UntagColumnOperationMember | TransformOperation.$UnknownMember;
    export namespace TransformOperation {
            /**
                * <p>An operation that projects columns. Operations that come after a projection can only
                *             refer to projected columns.</p>
                */
            interface ProjectOperationMember {
                    ProjectOperation: ProjectOperation;
                    FilterOperation?: never;
                    CreateColumnsOperation?: never;
                    RenameColumnOperation?: never;
                    CastColumnTypeOperation?: never;
                    TagColumnOperation?: never;
                    UntagColumnOperation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An operation that filters rows based on some condition.</p>
                */
            interface FilterOperationMember {
                    ProjectOperation?: never;
                    FilterOperation: FilterOperation;
                    CreateColumnsOperation?: never;
                    RenameColumnOperation?: never;
                    CastColumnTypeOperation?: never;
                    TagColumnOperation?: never;
                    UntagColumnOperation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An operation that creates calculated columns. Columns created in one such operation
                *             form a lexical closure.</p>
                */
            interface CreateColumnsOperationMember {
                    ProjectOperation?: never;
                    FilterOperation?: never;
                    CreateColumnsOperation: CreateColumnsOperation;
                    RenameColumnOperation?: never;
                    CastColumnTypeOperation?: never;
                    TagColumnOperation?: never;
                    UntagColumnOperation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An operation that renames a column.</p>
                */
            interface RenameColumnOperationMember {
                    ProjectOperation?: never;
                    FilterOperation?: never;
                    CreateColumnsOperation?: never;
                    RenameColumnOperation: RenameColumnOperation;
                    CastColumnTypeOperation?: never;
                    TagColumnOperation?: never;
                    UntagColumnOperation?: never;
                    $unknown?: never;
            }
            /**
                * <p>A transform operation that casts a column to a different type.</p>
                */
            interface CastColumnTypeOperationMember {
                    ProjectOperation?: never;
                    FilterOperation?: never;
                    CreateColumnsOperation?: never;
                    RenameColumnOperation?: never;
                    CastColumnTypeOperation: CastColumnTypeOperation;
                    TagColumnOperation?: never;
                    UntagColumnOperation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An operation that tags a column with additional information.</p>
                */
            interface TagColumnOperationMember {
                    ProjectOperation?: never;
                    FilterOperation?: never;
                    CreateColumnsOperation?: never;
                    RenameColumnOperation?: never;
                    CastColumnTypeOperation?: never;
                    TagColumnOperation: TagColumnOperation;
                    UntagColumnOperation?: never;
                    $unknown?: never;
            }
            /**
                * <p>A transform operation that removes tags associated with a column.</p>
                */
            interface UntagColumnOperationMember {
                    ProjectOperation?: never;
                    FilterOperation?: never;
                    CreateColumnsOperation?: never;
                    RenameColumnOperation?: never;
                    CastColumnTypeOperation?: never;
                    TagColumnOperation?: never;
                    UntagColumnOperation: UntagColumnOperation;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    ProjectOperation?: never;
                    FilterOperation?: never;
                    CreateColumnsOperation?: never;
                    RenameColumnOperation?: never;
                    CastColumnTypeOperation?: never;
                    TagColumnOperation?: never;
                    UntagColumnOperation?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    ProjectOperation: (value: ProjectOperation) => T;
                    FilterOperation: (value: FilterOperation) => T;
                    CreateColumnsOperation: (value: CreateColumnsOperation) => T;
                    RenameColumnOperation: (value: RenameColumnOperation) => T;
                    CastColumnTypeOperation: (value: CastColumnTypeOperation) => T;
                    TagColumnOperation: (value: TagColumnOperation) => T;
                    UntagColumnOperation: (value: UntagColumnOperation) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: TransformOperation, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformOperation) => any;
    }
    /**
        * <p>Properties associated with the columns participating in a join.</p>
        */
    export interface JoinKeyProperties {
            /**
                * <p>A value that indicates that a row in a table is uniquely identified by the columns in
                *             a join key. This is used by Amazon QuickSight to optimize query performance.</p>
                */
            UniqueKey?: boolean;
    }
    export namespace JoinKeyProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JoinKeyProperties) => any;
    }
    export enum JoinType {
            INNER = "INNER",
            LEFT = "LEFT",
            OUTER = "OUTER",
            RIGHT = "RIGHT"
    }
    /**
        * <p>The instructions associated with a join. </p>
        */
    export interface JoinInstruction {
            /**
                * <p>The operand on the left side of a join.</p>
                */
            LeftOperand: string | undefined;
            /**
                * <p>The operand on the right side of a join.</p>
                */
            RightOperand: string | undefined;
            /**
                * <p>Join key properties of the left operand.</p>
                */
            LeftJoinKeyProperties?: JoinKeyProperties;
            /**
                * <p>Join key properties of the right operand.</p>
                */
            RightJoinKeyProperties?: JoinKeyProperties;
            /**
                * <p>The type of join that it is.</p>
                */
            Type: JoinType | string | undefined;
            /**
                * <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
                */
            OnClause: string | undefined;
    }
    export namespace JoinInstruction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JoinInstruction) => any;
    }
    /**
        * <p>Information about the source of a logical table. This is a variant type structure. For
        *             this structure to be valid, only one of the attributes can be non-null.</p>
        */
    export interface LogicalTableSource {
            /**
                * <p>Specifies the result of a join of two logical tables.</p>
                */
            JoinInstruction?: JoinInstruction;
            /**
                * <p>Physical table ID.</p>
                */
            PhysicalTableId?: string;
            /**
                * <p>The Amazon Resource Number (ARN) of the parent dataset.</p>
                */
            DataSetArn?: string;
    }
    export namespace LogicalTableSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogicalTableSource) => any;
    }
    /**
        * <p>A <i>logical table</i> is a unit that joins and that data
        *             transformations operate on. A logical table has a source, which can be either a physical
        *             table or result of a join. When a logical table points to a physical table, the logical
        *             table acts as a mutable copy of that physical table through transform operations.</p>
        */
    export interface LogicalTable {
            /**
                * <p>A display name for the logical table.</p>
                */
            Alias: string | undefined;
            /**
                * <p>Transform operations that act on this logical table.</p>
                */
            DataTransforms?: TransformOperation[];
            /**
                * <p>Source of this logical table.</p>
                */
            Source: LogicalTableSource | undefined;
    }
    export namespace LogicalTable {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogicalTable) => any;
    }
    export enum InputColumnDataType {
            BIT = "BIT",
            BOOLEAN = "BOOLEAN",
            DATETIME = "DATETIME",
            DECIMAL = "DECIMAL",
            INTEGER = "INTEGER",
            JSON = "JSON",
            STRING = "STRING"
    }
    /**
        * <p>Metadata for a column that is used as the input of a transform operation.</p>
        */
    export interface InputColumn {
            /**
                * <p>The name of this column in the underlying data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data type of the column.</p>
                */
            Type: InputColumnDataType | string | undefined;
    }
    export namespace InputColumn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputColumn) => any;
    }
    /**
        * <p>A physical table type built from the results of the custom SQL query.</p>
        */
    export interface CustomSql {
            /**
                * <p>The Amazon Resource Name (ARN) of the data source.</p>
                */
            DataSourceArn: string | undefined;
            /**
                * <p>A display name for the SQL query result.</p>
                */
            Name: string | undefined;
            /**
                * <p>The SQL query.</p>
                */
            SqlQuery: string | undefined;
            /**
                * <p>The column schema from the SQL query result set.</p>
                */
            Columns?: InputColumn[];
    }
    export namespace CustomSql {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomSql) => any;
    }
    /**
        * <p>A physical table type for relational data sources.</p>
        */
    export interface RelationalTable {
            /**
                * <p>The Amazon Resource Name (ARN) for the data source.</p>
                */
            DataSourceArn: string | undefined;
            /**
                * <p>The catalog associated with a table.</p>
                */
            Catalog?: string;
            /**
                * <p>The schema name. This name applies to certain relational database engines.</p>
                */
            Schema?: string;
            /**
                * <p>The name of the relational table.</p>
                */
            Name: string | undefined;
            /**
                * <p>The column schema of the table.</p>
                */
            InputColumns: InputColumn[] | undefined;
    }
    export namespace RelationalTable {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalTable) => any;
    }
    export enum FileFormat {
            CLF = "CLF",
            CSV = "CSV",
            ELF = "ELF",
            JSON = "JSON",
            TSV = "TSV",
            XLSX = "XLSX"
    }
    export enum TextQualifier {
            DOUBLE_QUOTE = "DOUBLE_QUOTE",
            SINGLE_QUOTE = "SINGLE_QUOTE"
    }
    /**
        * <p>Information about the format for a source file or files.</p>
        */
    export interface UploadSettings {
            /**
                * <p>File format.</p>
                */
            Format?: FileFormat | string;
            /**
                * <p>A row number to start reading data from.</p>
                */
            StartFromRow?: number;
            /**
                * <p>Whether the file has a header row, or the files each have a header row.</p>
                */
            ContainsHeader?: boolean;
            /**
                * <p>Text qualifier.</p>
                */
            TextQualifier?: TextQualifier | string;
            /**
                * <p>The delimiter between values in the file.</p>
                */
            Delimiter?: string;
    }
    export namespace UploadSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadSettings) => any;
    }
    /**
        * <p>A physical table type for an S3 data source.</p>
        */
    export interface S3Source {
            /**
                * <p>The Amazon Resource Name (ARN) for the data source.</p>
                */
            DataSourceArn: string | undefined;
            /**
                * <p>Information about the format for the S3 source file or files.</p>
                */
            UploadSettings?: UploadSettings;
            /**
                * <p>A physical table type for an S3 data source.</p>
                *         <note>
                *             <p>For files that aren't JSON, only <code>STRING</code> data types are supported in input columns.</p>
                *         </note>
                */
            InputColumns: InputColumn[] | undefined;
    }
    export namespace S3Source {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Source) => any;
    }
    /**
        * <p>A view of a data source that contains information about the shape of the data in the
        *             underlying source. This is a variant type structure. For this structure to be valid,
        *             only one of the attributes can be non-null.</p>
        */
    export type PhysicalTable = PhysicalTable.CustomSqlMember | PhysicalTable.RelationalTableMember | PhysicalTable.S3SourceMember | PhysicalTable.$UnknownMember;
    export namespace PhysicalTable {
            /**
                * <p>A physical table type for relational data sources.</p>
                */
            interface RelationalTableMember {
                    RelationalTable: RelationalTable;
                    CustomSql?: never;
                    S3Source?: never;
                    $unknown?: never;
            }
            /**
                * <p>A physical table type built from the results of the custom SQL query.</p>
                */
            interface CustomSqlMember {
                    RelationalTable?: never;
                    CustomSql: CustomSql;
                    S3Source?: never;
                    $unknown?: never;
            }
            /**
                * <p>A physical table type for as S3 data source.</p>
                */
            interface S3SourceMember {
                    RelationalTable?: never;
                    CustomSql?: never;
                    S3Source: S3Source;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    RelationalTable?: never;
                    CustomSql?: never;
                    S3Source?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    RelationalTable: (value: RelationalTable) => T;
                    CustomSql: (value: CustomSql) => T;
                    S3Source: (value: S3Source) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: PhysicalTable, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PhysicalTable) => any;
    }
    export enum RowLevelPermissionFormatVersion {
            VERSION_1 = "VERSION_1",
            VERSION_2 = "VERSION_2"
    }
    export enum RowLevelPermissionPolicy {
            DENY_ACCESS = "DENY_ACCESS",
            GRANT_ACCESS = "GRANT_ACCESS"
    }
    export enum Status {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Information about a dataset that contains permissions for row-level security (RLS).
        *             The permissions dataset maps fields to users or groups. For more information, see
        *             <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User
        *                 Guide</i>.</p>
        *             <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is
        *             not supported for new RLS datasets.</p>
        */
    export interface RowLevelPermissionDataSet {
            /**
                * <p>The namespace associated with the dataset that contains permissions for RLS.</p>
                */
            Namespace?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The type of permissions to use when interpreting the permissions for RLS. <code>DENY_ACCESS</code>
                *         is included for backward compatibility only.</p>
                */
            PermissionPolicy: RowLevelPermissionPolicy | string | undefined;
            /**
                * <p>The user or group rules associated with the dataset that contains permissions for RLS.</p>
                *          <p>By default, <code>FormatVersion</code> is <code>VERSION_1</code>. When <code>FormatVersion</code> is <code>VERSION_1</code>, <code>UserName</code> and <code>GroupName</code> are required. When <code>FormatVersion</code> is <code>VERSION_2</code>, <code>UserARN</code> and <code>GroupARN</code> are required, and <code>Namespace</code> must not exist.</p>
                */
            FormatVersion?: RowLevelPermissionFormatVersion | string;
            /**
                * <p>The status of the row-level security permission dataset. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>.</p>
                */
            Status?: Status | string;
    }
    export namespace RowLevelPermissionDataSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RowLevelPermissionDataSet) => any;
    }
    /**
        * <p>A set of rules associated with a tag.</p>
        */
    export interface RowLevelPermissionTagRule {
            /**
                * <p>The unique key for a tag.</p>
                */
            TagKey: string | undefined;
            /**
                * <p>The column name that a tag key is assigned to.</p>
                */
            ColumnName: string | undefined;
            /**
                * <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
                */
            TagMultiValueDelimiter?: string;
            /**
                * <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
                */
            MatchAllValue?: string;
    }
    export namespace RowLevelPermissionTagRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RowLevelPermissionTagRule) => any;
    }
    /**
        * <p>The configuration of tags on a dataset to set row-level security. </p>
        */
    export interface RowLevelPermissionTagConfiguration {
            /**
                * <p>The status of row-level security tags. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>.</p>
                */
            Status?: Status | string;
            /**
                * <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
                */
            TagRules: RowLevelPermissionTagRule[] | undefined;
    }
    export namespace RowLevelPermissionTagConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RowLevelPermissionTagConfiguration) => any;
    }
    export interface CreateDataSetRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId: string | undefined;
            /**
                * <p>The display name for the dataset.</p>
                */
            Name: string | undefined;
            /**
                * <p>Declares the physical tables that are available in the underlying data sources.</p>
                */
            PhysicalTableMap: Record<string, PhysicalTable> | undefined;
            /**
                * <p>Configures the combination and transformation of the data from the physical tables.</p>
                */
            LogicalTableMap?: Record<string, LogicalTable>;
            /**
                * <p>Indicates whether you want to import the data into SPICE.</p>
                */
            ImportMode: DataSetImportMode | string | undefined;
            /**
                * <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
                */
            ColumnGroups?: ColumnGroup[];
            /**
                * <p>The folder that contains fields and nested subfolders for your dataset.</p>
                */
            FieldFolders?: Record<string, FieldFolder>;
            /**
                * <p>A list of resource permissions on the dataset.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The row-level security configuration for the data that you want to create.</p>
                */
            RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
            /**
                * <p>The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only.</p>
                */
            RowLevelPermissionTagConfiguration?: RowLevelPermissionTagConfiguration;
            /**
                * <p>A set of one or more definitions of a <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a>
                *             </code>.</p>
                */
            ColumnLevelPermissionRules?: ColumnLevelPermissionRule[];
            /**
                * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
                */
            DataSetUsageConfiguration?: DataSetUsageConfiguration;
    }
    export namespace CreateDataSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSetRequest) => any;
    }
    export interface CreateDataSetResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset.</p>
                */
            Arn?: string;
            /**
                * <p>The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId?: string;
            /**
                * <p>The ARN for the ingestion, which is triggered as a result of dataset creation if the import
                * 			mode is SPICE.</p>
                */
            IngestionArn?: string;
            /**
                * <p>The ID of the ingestion, which is triggered as a result of dataset creation if the import
                * 			mode is SPICE.</p>
                */
            IngestionId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateDataSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSetResponse) => any;
    }
    /**
        * <p>A limit is exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>Limit exceeded.</p>
                */
            ResourceType?: ExceptionResourceType | string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The required parameters for connecting to an Exasol data source.</p>
        */
    export interface ExasolParameters {
            /**
                * <p>The hostname or IP address of the Exasol data source.</p>
                */
            Host: string | undefined;
            /**
                * <p>The port for the Exasol data source.</p>
                */
            Port: number | undefined;
    }
    export namespace ExasolParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExasolParameters) => any;
    }
    /**
        * <p>The parameters for Jira.</p>
        */
    export interface JiraParameters {
            /**
                * <p>The base URL of the Jira site.</p>
                */
            SiteBaseUrl: string | undefined;
    }
    export namespace JiraParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JiraParameters) => any;
    }
    /**
        * <p>The parameters for MariaDB.</p>
        */
    export interface MariaDbParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace MariaDbParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MariaDbParameters) => any;
    }
    /**
        * <p>The parameters for MySQL.</p>
        */
    export interface MySqlParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace MySqlParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MySqlParameters) => any;
    }
    /**
        * <p>The parameters for Oracle.</p>
        */
    export interface OracleParameters {
            /**
                * <p>An Oracle host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace OracleParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OracleParameters) => any;
    }
    /**
        * <p>The parameters for PostgreSQL.</p>
        */
    export interface PostgreSqlParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace PostgreSqlParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostgreSqlParameters) => any;
    }
    /**
        * <p>The parameters for Presto.</p>
        */
    export interface PrestoParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Catalog.</p>
                */
            Catalog: string | undefined;
    }
    export namespace PrestoParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrestoParameters) => any;
    }
    /**
        * <p>The parameters for Amazon RDS.</p>
        */
    export interface RdsParameters {
            /**
                * <p>Instance ID.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace RdsParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RdsParameters) => any;
    }
    /**
        * <p>The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if
        *             <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and
        *             <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
        */
    export interface RedshiftParameters {
            /**
                * <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
                */
            Host?: string;
            /**
                * <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
                */
            Port?: number;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
            /**
                * <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
                *             provided.</p>
                */
            ClusterId?: string;
    }
    export namespace RedshiftParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedshiftParameters) => any;
    }
    /**
        * <p>Amazon S3 manifest file location.</p>
        */
    export interface ManifestFileLocation {
            /**
                * <p>Amazon S3 bucket.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>Amazon S3 key that identifies an object.</p>
                */
            Key: string | undefined;
    }
    export namespace ManifestFileLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManifestFileLocation) => any;
    }
    /**
        * <p>The parameters for S3.</p>
        */
    export interface S3Parameters {
            /**
                * <p>Location of the Amazon S3 manifest file. This is NULL if the manifest file was
                *             uploaded into Amazon QuickSight.</p>
                */
            ManifestFileLocation: ManifestFileLocation | undefined;
    }
    export namespace S3Parameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Parameters) => any;
    }
    /**
        * <p>The parameters for ServiceNow.</p>
        */
    export interface ServiceNowParameters {
            /**
                * <p>URL of the base site.</p>
                */
            SiteBaseUrl: string | undefined;
    }
    export namespace ServiceNowParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceNowParameters) => any;
    }
    /**
        * <p>The parameters for Snowflake.</p>
        */
    export interface SnowflakeParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
            /**
                * <p>Warehouse.</p>
                */
            Warehouse: string | undefined;
    }
    export namespace SnowflakeParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SnowflakeParameters) => any;
    }
    /**
        * <p>The parameters for Spark.</p>
        */
    export interface SparkParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
    }
    export namespace SparkParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SparkParameters) => any;
    }
    /**
        * <p>The parameters for SQL Server.</p>
        */
    export interface SqlServerParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace SqlServerParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SqlServerParameters) => any;
    }
    /**
        * <p>The parameters for Teradata.</p>
        */
    export interface TeradataParameters {
            /**
                * <p>Host.</p>
                */
            Host: string | undefined;
            /**
                * <p>Port.</p>
                */
            Port: number | undefined;
            /**
                * <p>Database.</p>
                */
            Database: string | undefined;
    }
    export namespace TeradataParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TeradataParameters) => any;
    }
    /**
        * <p>The parameters for Twitter.</p>
        */
    export interface TwitterParameters {
            /**
                * <p>Twitter query string.</p>
                */
            Query: string | undefined;
            /**
                * <p>Maximum number of rows to query Twitter.</p>
                */
            MaxRows: number | undefined;
    }
    export namespace TwitterParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TwitterParameters) => any;
    }
    /**
        * <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
        *             This is a variant type structure. For this structure to be valid, only one of the
        *             attributes can be non-null.</p>
        */
    export type DataSourceParameters = DataSourceParameters.AmazonElasticsearchParametersMember | DataSourceParameters.AmazonOpenSearchParametersMember | DataSourceParameters.AthenaParametersMember | DataSourceParameters.AuroraParametersMember | DataSourceParameters.AuroraPostgreSqlParametersMember | DataSourceParameters.AwsIotAnalyticsParametersMember | DataSourceParameters.ExasolParametersMember | DataSourceParameters.JiraParametersMember | DataSourceParameters.MariaDbParametersMember | DataSourceParameters.MySqlParametersMember | DataSourceParameters.OracleParametersMember | DataSourceParameters.PostgreSqlParametersMember | DataSourceParameters.PrestoParametersMember | DataSourceParameters.RdsParametersMember | DataSourceParameters.RedshiftParametersMember | DataSourceParameters.S3ParametersMember | DataSourceParameters.ServiceNowParametersMember | DataSourceParameters.SnowflakeParametersMember | DataSourceParameters.SparkParametersMember | DataSourceParameters.SqlServerParametersMember | DataSourceParameters.TeradataParametersMember | DataSourceParameters.TwitterParametersMember | DataSourceParameters.$UnknownMember;
    export namespace DataSourceParameters {
            /**
                * <p>The parameters for OpenSearch.</p>
                */
            interface AmazonElasticsearchParametersMember {
                    AmazonElasticsearchParameters: AmazonElasticsearchParameters;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Amazon Athena.</p>
                */
            interface AthenaParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters: AthenaParameters;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Amazon Aurora MySQL.</p>
                */
            interface AuroraParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters: AuroraParameters;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Amazon Aurora.</p>
                */
            interface AuroraPostgreSqlParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters: AuroraPostgreSqlParameters;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for IoT Analytics.</p>
                */
            interface AwsIotAnalyticsParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters: AwsIotAnalyticsParameters;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Jira.</p>
                */
            interface JiraParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters: JiraParameters;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for MariaDB.</p>
                */
            interface MariaDbParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters: MariaDbParameters;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for MySQL.</p>
                */
            interface MySqlParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters: MySqlParameters;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Oracle.</p>
                */
            interface OracleParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters: OracleParameters;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for PostgreSQL.</p>
                */
            interface PostgreSqlParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters: PostgreSqlParameters;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Presto.</p>
                */
            interface PrestoParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters: PrestoParameters;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Amazon RDS.</p>
                */
            interface RdsParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters: RdsParameters;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Amazon Redshift.</p>
                */
            interface RedshiftParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters: RedshiftParameters;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for S3.</p>
                */
            interface S3ParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters: S3Parameters;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for ServiceNow.</p>
                */
            interface ServiceNowParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters: ServiceNowParameters;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Snowflake.</p>
                */
            interface SnowflakeParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters: SnowflakeParameters;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Spark.</p>
                */
            interface SparkParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters: SparkParameters;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for SQL Server.</p>
                */
            interface SqlServerParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters: SqlServerParameters;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Teradata.</p>
                */
            interface TeradataParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters: TeradataParameters;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Twitter.</p>
                */
            interface TwitterParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters: TwitterParameters;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for OpenSearch.</p>
                */
            interface AmazonOpenSearchParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters: AmazonOpenSearchParameters;
                    ExasolParameters?: never;
                    $unknown?: never;
            }
            /**
                * <p>The parameters for Exasol.</p>
                */
            interface ExasolParametersMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters: ExasolParameters;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    AmazonElasticsearchParameters?: never;
                    AthenaParameters?: never;
                    AuroraParameters?: never;
                    AuroraPostgreSqlParameters?: never;
                    AwsIotAnalyticsParameters?: never;
                    JiraParameters?: never;
                    MariaDbParameters?: never;
                    MySqlParameters?: never;
                    OracleParameters?: never;
                    PostgreSqlParameters?: never;
                    PrestoParameters?: never;
                    RdsParameters?: never;
                    RedshiftParameters?: never;
                    S3Parameters?: never;
                    ServiceNowParameters?: never;
                    SnowflakeParameters?: never;
                    SparkParameters?: never;
                    SqlServerParameters?: never;
                    TeradataParameters?: never;
                    TwitterParameters?: never;
                    AmazonOpenSearchParameters?: never;
                    ExasolParameters?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    AmazonElasticsearchParameters: (value: AmazonElasticsearchParameters) => T;
                    AthenaParameters: (value: AthenaParameters) => T;
                    AuroraParameters: (value: AuroraParameters) => T;
                    AuroraPostgreSqlParameters: (value: AuroraPostgreSqlParameters) => T;
                    AwsIotAnalyticsParameters: (value: AwsIotAnalyticsParameters) => T;
                    JiraParameters: (value: JiraParameters) => T;
                    MariaDbParameters: (value: MariaDbParameters) => T;
                    MySqlParameters: (value: MySqlParameters) => T;
                    OracleParameters: (value: OracleParameters) => T;
                    PostgreSqlParameters: (value: PostgreSqlParameters) => T;
                    PrestoParameters: (value: PrestoParameters) => T;
                    RdsParameters: (value: RdsParameters) => T;
                    RedshiftParameters: (value: RedshiftParameters) => T;
                    S3Parameters: (value: S3Parameters) => T;
                    ServiceNowParameters: (value: ServiceNowParameters) => T;
                    SnowflakeParameters: (value: SnowflakeParameters) => T;
                    SparkParameters: (value: SparkParameters) => T;
                    SqlServerParameters: (value: SqlServerParameters) => T;
                    TeradataParameters: (value: TeradataParameters) => T;
                    TwitterParameters: (value: TwitterParameters) => T;
                    AmazonOpenSearchParameters: (value: AmazonOpenSearchParameters) => T;
                    ExasolParameters: (value: ExasolParameters) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: DataSourceParameters, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceParameters) => any;
    }
    /**
        * <p>The combination of user name and password that are used as credentials.</p>
        */
    export interface CredentialPair {
            /**
                * <p>User name.</p>
                */
            Username: string | undefined;
            /**
                * <p>Password.</p>
                */
            Password: string | undefined;
            /**
                * <p>A set of alternate data source parameters that you want to share for these
                *             credentials. The credentials are applied in tandem with the data source parameters when
                *             you copy a data source by using a create or update request. The API operation compares
                *             the <code>DataSourceParameters</code> structure that's in the request with the
                *             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
                *             structures are an exact match, the request is allowed to use the new data source with
                *             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
                *             null, the <code>DataSourceParameters</code> originally used with these
                *                 <code>Credentials</code> is automatically allowed.</p>
                */
            AlternateDataSourceParameters?: DataSourceParameters[];
    }
    export namespace CredentialPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CredentialPair) => any;
    }
    /**
        * <p>Data source credentials. This is a variant type structure. For this structure to be
        *             valid, only one of the attributes can be non-null.</p>
        */
    export interface DataSourceCredentials {
            /**
                * <p>Credential pair. For more information, see
                *             <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CredentialPair.html">CredentialPair</a>
                *             </code>.</p>
                */
            CredentialPair?: CredentialPair;
            /**
                * <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
                *             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
                *             data source in the ARN is used as the credentials for the
                *             <code>DataSourceCredentials</code> structure.</p>
                */
            CopySourceArn?: string;
    }
    export namespace DataSourceCredentials {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceCredentials) => any;
    }
    /**
        * <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your
        *             underlying data source.</p>
        */
    export interface SslProperties {
            /**
                * <p>A Boolean option to control whether SSL should be disabled.</p>
                */
            DisableSsl?: boolean;
    }
    export namespace SslProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SslProperties) => any;
    }
    export enum DataSourceType {
            ADOBE_ANALYTICS = "ADOBE_ANALYTICS",
            AMAZON_ELASTICSEARCH = "AMAZON_ELASTICSEARCH",
            AMAZON_OPENSEARCH = "AMAZON_OPENSEARCH",
            ATHENA = "ATHENA",
            AURORA = "AURORA",
            AURORA_POSTGRESQL = "AURORA_POSTGRESQL",
            AWS_IOT_ANALYTICS = "AWS_IOT_ANALYTICS",
            EXASOL = "EXASOL",
            GITHUB = "GITHUB",
            JIRA = "JIRA",
            MARIADB = "MARIADB",
            MYSQL = "MYSQL",
            ORACLE = "ORACLE",
            POSTGRESQL = "POSTGRESQL",
            PRESTO = "PRESTO",
            REDSHIFT = "REDSHIFT",
            S3 = "S3",
            SALESFORCE = "SALESFORCE",
            SERVICENOW = "SERVICENOW",
            SNOWFLAKE = "SNOWFLAKE",
            SPARK = "SPARK",
            SQLSERVER = "SQLSERVER",
            TERADATA = "TERADATA",
            TIMESTREAM = "TIMESTREAM",
            TWITTER = "TWITTER"
    }
    /**
        * <p>VPC connection properties.</p>
        */
    export interface VpcConnectionProperties {
            /**
                * <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
                */
            VpcConnectionArn: string | undefined;
    }
    export namespace VpcConnectionProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConnectionProperties) => any;
    }
    export interface CreateDataSourceRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account. </p>
                */
            DataSourceId: string | undefined;
            /**
                * <p>A display name for the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of the data source. To return a
                * 			list of all data sources, use <code>ListDataSources</code>.</p>
                * 		       <p>Use <code>AMAZON_ELASTICSEARCH</code> for Amazon OpenSearch Service.</p>
                */
            Type: DataSourceType | string | undefined;
            /**
                * <p>The parameters that Amazon QuickSight uses to connect to your underlying source.</p>
                */
            DataSourceParameters?: DataSourceParameters;
            /**
                * <p>The credentials Amazon QuickSight that uses to connect to your underlying source. Currently, only
                * 			credentials based on user name and password are supported.</p>
                */
            Credentials?: DataSourceCredentials;
            /**
                * <p>A list of resource permissions on the data source.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to
                * 			your underlying source.</p>
                */
            VpcConnectionProperties?: VpcConnectionProperties;
            /**
                * <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.</p>
                */
            SslProperties?: SslProperties;
            /**
                * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSourceRequest) => any;
    }
    export interface CreateDataSourceResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the data source.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The status of creating the data source.</p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSourceResponse) => any;
    }
    export enum FolderType {
            SHARED = "SHARED"
    }
    export interface CreateFolderRequest {
            /**
                * <p>The ID for the Amazon Web Services account where you want to create the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The name of the folder.</p>
                */
            Name?: string;
            /**
                * <p>The type of folder. By default, <code>folderType</code> is <code>SHARED</code>.</p>
                */
            FolderType?: FolderType | string;
            /**
                * <p>The Amazon Resource Name (ARN) for the parent folder.</p>
                *         <p>
                *             <code>ParentFolderArn</code> can be null. An empty <code>parentFolderArn</code> creates a root-level folder.</p>
                */
            ParentFolderArn?: string;
            /**
                * <p>A structure that describes the principals and the resource-level permissions of a folder.</p>
                *         <p>To specify no permissions, omit <code>Permissions</code>.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>Tags for the folder.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFolderRequest) => any;
    }
    export interface CreateFolderResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the newly created folder.</p>
                */
            Arn?: string;
            /**
                * <p>The folder ID for the newly created folder.</p>
                */
            FolderId?: string;
            /**
                * <p>The request ID for the newly created folder.</p>
                */
            RequestId?: string;
    }
    export namespace CreateFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFolderResponse) => any;
    }
    export enum MemberType {
            ANALYSIS = "ANALYSIS",
            DASHBOARD = "DASHBOARD",
            DATASET = "DATASET"
    }
    export interface CreateFolderMembershipRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The ID of the asset (the dashboard, analysis, or dataset).</p>
                */
            MemberId: string | undefined;
            /**
                * <p>The type of the member, including <code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code>.</p>
                */
            MemberType: MemberType | string | undefined;
    }
    export namespace CreateFolderMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFolderMembershipRequest) => any;
    }
    /**
        * <p>An asset in a Amazon QuickSight folder, such as a dashboard, analysis, or dataset.</p>
        */
    export interface FolderMember {
            /**
                * <p>The ID of an asset in the folder.</p>
                */
            MemberId?: string;
            /**
                * <p>The type of asset that it is.</p>
                */
            MemberType?: MemberType | string;
    }
    export namespace FolderMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FolderMember) => any;
    }
    export interface CreateFolderMembershipResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>Information about the member in the folder.</p>
                */
            FolderMember?: FolderMember;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateFolderMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFolderMembershipResponse) => any;
    }
    /**
        * <p>The request object for this operation. </p>
        */
    export interface CreateGroupRequest {
            /**
                * <p>A name for the group that you want to create.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>A description for the group that you want to create.</p>
                */
            Description?: string;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace that you want the group to be a part of.</p>
                */
            Namespace: string | undefined;
    }
    export namespace CreateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupRequest) => any;
    }
    /**
        * <p>A <i>group</i> in Amazon QuickSight consists of a set of users. You can
        *             use groups to make it easier to manage access and security. </p>
        */
    export interface Group {
            /**
                * <p>The Amazon Resource Name (ARN) for the group.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the group.</p>
                */
            GroupName?: string;
            /**
                * <p>The group description.</p>
                */
            Description?: string;
            /**
                * <p>The principal ID of the group.</p>
                */
            PrincipalId?: string;
    }
    export namespace Group {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Group) => any;
    }
    /**
        * <p>The response object for this operation.</p>
        */
    export interface CreateGroupResponse {
            /**
                * <p>The name of the group.</p>
                */
            Group?: Group;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupResponse) => any;
    }
    export interface CreateGroupMembershipRequest {
            /**
                * <p>The name of the user that you want to add to the group membership.</p>
                */
            MemberName: string | undefined;
            /**
                * <p>The name of the group that you want to add the user to.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace that you want the user to be a part of.</p>
                */
            Namespace: string | undefined;
    }
    export namespace CreateGroupMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupMembershipRequest) => any;
    }
    /**
        * <p>A member of an Amazon QuickSight group. Currently, group members must be users. Groups
        *             can't be members of another group. .</p>
        */
    export interface GroupMember {
            /**
                * <p>The Amazon Resource Name (ARN) for the group member (user).</p>
                */
            Arn?: string;
            /**
                * <p>The name of the group member (user).</p>
                */
            MemberName?: string;
    }
    export namespace GroupMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupMember) => any;
    }
    export interface CreateGroupMembershipResponse {
            /**
                * <p>The group member.</p>
                */
            GroupMember?: GroupMember;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateGroupMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupMembershipResponse) => any;
    }
    export interface CreateIAMPolicyAssignmentRequest {
            /**
                * <p>The ID of the Amazon Web Services account where you want to assign an IAM policy to Amazon QuickSight users or
                * 			groups.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The name of the assignment, also called a rule. It must be unique within an Amazon Web Services account.</p>
                */
            AssignmentName: string | undefined;
            /**
                * <p>The status of the assignment. Possible values are as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ENABLED</code> - Anything specified in this assignment is used when creating the data
                * 					source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DISABLED</code> - This assignment isn't used when creating the data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the
                * 					data source.</p>
                *             </li>
                *          </ul>
                */
            AssignmentStatus: AssignmentStatus | string | undefined;
            /**
                * <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups
                * 			specified in this assignment.</p>
                */
            PolicyArn?: string;
            /**
                * <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
                */
            Identities?: Record<string, string[]>;
            /**
                * <p>The namespace that contains the assignment.</p>
                */
            Namespace: string | undefined;
    }
    export namespace CreateIAMPolicyAssignmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIAMPolicyAssignmentRequest) => any;
    }
    export interface CreateIAMPolicyAssignmentResponse {
            /**
                * <p>The name of the assignment. This name must be unique within the Amazon Web Services account.</p>
                */
            AssignmentName?: string;
            /**
                * <p>The ID for the assignment.</p>
                */
            AssignmentId?: string;
            /**
                * <p>The status of the assignment. Possible values are as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ENABLED</code> - Anything specified in this assignment is used when creating the data
                * 				source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DISABLED</code> - This assignment isn't used when creating the data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the
                * 				data source.</p>
                *             </li>
                *          </ul>
                */
            AssignmentStatus?: AssignmentStatus | string;
            /**
                * <p>The ARN for the IAM policy that is applied to the Amazon QuickSight users and groups specified in this assignment.</p>
                */
            PolicyArn?: string;
            /**
                * <p>The Amazon QuickSight users, groups, or both that the IAM policy is assigned to.</p>
                */
            Identities?: Record<string, string[]>;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateIAMPolicyAssignmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIAMPolicyAssignmentResponse) => any;
    }
    export enum IngestionType {
            FULL_REFRESH = "FULL_REFRESH",
            INCREMENTAL_REFRESH = "INCREMENTAL_REFRESH"
    }
    export interface CreateIngestionRequest {
            /**
                * <p>The ID of the dataset used in the ingestion.</p>
                */
            DataSetId: string | undefined;
            /**
                * <p>An ID for the ingestion.</p>
                */
            IngestionId: string | undefined;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The type of ingestion that you want to create.</p>
                */
            IngestionType?: IngestionType | string;
    }
    export namespace CreateIngestionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIngestionRequest) => any;
    }
    export enum IngestionStatus {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            INITIALIZED = "INITIALIZED",
            QUEUED = "QUEUED",
            RUNNING = "RUNNING"
    }
    export interface CreateIngestionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) for the data ingestion.</p>
                */
            Arn?: string;
            /**
                * <p>An ID for the ingestion.</p>
                */
            IngestionId?: string;
            /**
                * <p>The ingestion status.</p>
                */
            IngestionStatus?: IngestionStatus | string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateIngestionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIngestionResponse) => any;
    }
    export enum IdentityStore {
            QUICKSIGHT = "QUICKSIGHT"
    }
    export interface CreateNamespaceRequest {
            /**
                * <p>The ID for the Amazon Web Services account that you want to create the Amazon QuickSight namespace in.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The name that you want to use to describe the new namespace.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>Specifies the type of your user identity directory. Currently, this supports users
                *             with an identity type of <code>QUICKSIGHT</code>.</p>
                */
            IdentityStore: IdentityStore | string | undefined;
            /**
                * <p>The tags that you want to associate with the namespace that you're creating.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateNamespaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNamespaceRequest) => any;
    }
    export enum NamespaceStatus {
            CREATED = "CREATED",
            CREATING = "CREATING",
            DELETING = "DELETING",
            NON_RETRYABLE_FAILURE = "NON_RETRYABLE_FAILURE",
            RETRYABLE_FAILURE = "RETRYABLE_FAILURE"
    }
    export interface CreateNamespaceResponse {
            /**
                * <p>The ARN of the Amazon QuickSight namespace you created. </p>
                */
            Arn?: string;
            /**
                * <p>The name of the new namespace that you created.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Web Services Region; that you want to use for the free SPICE capacity for the new namespace.
                *             This is set to the region that you run CreateNamespace in. </p>
                */
            CapacityRegion?: string;
            /**
                * <p>The status of the creation of the namespace. This is an asynchronous process. A status
                *             of <code>CREATED</code> means that your namespace is ready to use. If an error occurs,
                *             it indicates if the process is <code>retryable</code> or <code>non-retryable</code>. In
                *             the case of a non-retryable error, refer to the error message for follow-up
                *             tasks.</p>
                */
            CreationStatus?: NamespaceStatus | string;
            /**
                * <p>Specifies the type of your user identity directory. Currently, this supports users
                *             with an identity type of <code>QUICKSIGHT</code>.</p>
                */
            IdentityStore?: IdentityStore | string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace CreateNamespaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNamespaceResponse) => any;
    }
    /**
        * <p>The source analysis of the template.</p>
        */
    export interface TemplateSourceAnalysis {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn: string | undefined;
            /**
                * <p>A structure containing information about the dataset references used as placeholders
                *             in the template.</p>
                */
            DataSetReferences: DataSetReference[] | undefined;
    }
    export namespace TemplateSourceAnalysis {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateSourceAnalysis) => any;
    }
    /**
        * <p>The source template of the template.</p>
        */
    export interface TemplateSourceTemplate {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn: string | undefined;
    }
    export namespace TemplateSourceTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateSourceTemplate) => any;
    }
    /**
        * <p>The source entity of the template.</p>
        */
    export interface TemplateSourceEntity {
            /**
                * <p>The source analysis, if it is based on an analysis.</p>
                */
            SourceAnalysis?: TemplateSourceAnalysis;
            /**
                * <p>The source template, if it is based on an template.</p>
                */
            SourceTemplate?: TemplateSourceTemplate;
    }
    export namespace TemplateSourceEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateSourceEntity) => any;
    }
    export interface CreateTemplateRequest {
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. You use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the template that you want to create. This template is unique per Amazon Web Services Region; in
                * 			each Amazon Web Services account.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>A display name for the template.</p>
                */
            Name?: string;
            /**
                * <p>A list of resource permissions to be set on the template. </p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The entity that you are using as a source when you create the template. In
                * 			<code>SourceEntity</code>, you specify the type of object you're using as source:
                * 			<code>SourceTemplate</code> for a template or <code>SourceAnalysis</code> for an
                * 			analysis. Both of these require an Amazon Resource Name (ARN). For
                * 			<code>SourceTemplate</code>, specify the ARN of the source template. For
                * 			<code>SourceAnalysis</code>, specify the ARN of the source analysis. The <code>SourceTemplate</code>
                * 			ARN can contain any Amazon Web Services account and any Amazon QuickSight-supported Amazon Web Services Region. </p>
                * 		       <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> or
                * 			<code>SourceAnalysis</code> to list the replacement datasets for the placeholders listed
                * 			in the original. The schema in each dataset must match its placeholder. </p>
                */
            SourceEntity: TemplateSourceEntity | undefined;
            /**
                * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A description of the current template version being created. This API operation creates the
                * 			first version of the template. Every time <code>UpdateTemplate</code> is called, a new
                * 			version is created. Each version of the template maintains a description of the version
                * 			in the <code>VersionDescription</code> field.</p>
                */
            VersionDescription?: string;
    }
    export namespace CreateTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTemplateRequest) => any;
    }
    export interface CreateTemplateResponse {
            /**
                * <p>The ARN for the template.</p>
                */
            Arn?: string;
            /**
                * <p>The ARN for the template, including the version information of
                * 			the first version.</p>
                */
            VersionArn?: string;
            /**
                * <p>The ID of the template.</p>
                */
            TemplateId?: string;
            /**
                * <p>The template creation status.</p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTemplateResponse) => any;
    }
    export interface CreateTemplateAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template that you creating an alias for.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>The name that you want to give to the template alias that you're creating. Don't start the
                * 			alias name with the <code>$</code> character. Alias names that start with <code>$</code>
                * 			are reserved by Amazon QuickSight. </p>
                */
            AliasName: string | undefined;
            /**
                * <p>The version number of the template.</p>
                */
            TemplateVersionNumber: number | undefined;
    }
    export namespace CreateTemplateAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTemplateAliasRequest) => any;
    }
    /**
        * <p>The template alias.</p>
        */
    export interface TemplateAlias {
            /**
                * <p>The display name of the template alias.</p>
                */
            AliasName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the template alias.</p>
                */
            Arn?: string;
            /**
                * <p>The version number of the template alias.</p>
                */
            TemplateVersionNumber?: number;
    }
    export namespace TemplateAlias {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateAlias) => any;
    }
    export interface CreateTemplateAliasResponse {
            /**
                * <p>Information about the template alias.</p>
                */
            TemplateAlias?: TemplateAlias;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateTemplateAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTemplateAliasResponse) => any;
    }
    /**
        * <p>The theme colors that are used for data colors in charts. The colors description is a
        *             hexadecimal color code that consists of six alphanumerical characters, prefixed with
        *                 <code>#</code>, for example #37BFF5. </p>
        */
    export interface DataColorPalette {
            /**
                * <p>The hexadecimal codes for the colors.</p>
                */
            Colors?: string[];
            /**
                * <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
                */
            MinMaxGradient?: string[];
            /**
                * <p>The hexadecimal code of a color that applies to charts where a lack of data is
                *             highlighted.</p>
                */
            EmptyFillColor?: string;
    }
    export namespace DataColorPalette {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataColorPalette) => any;
    }
    /**
        * <p>Display options related to tiles on a sheet.</p>
        */
    export interface TileStyle {
            /**
                * <p>The border around a tile.</p>
                */
            Border?: BorderStyle;
    }
    export namespace TileStyle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TileStyle) => any;
    }
    /**
        * <p>The display options for gutter spacing between tiles on a sheet.</p>
        */
    export interface GutterStyle {
            /**
                * <p>This Boolean value controls whether to display a gutter space between sheet tiles.
                *         </p>
                */
            Show?: boolean;
    }
    export namespace GutterStyle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GutterStyle) => any;
    }
    /**
        * <p>The display options for margins around the outside edge of sheets.</p>
        */
    export interface MarginStyle {
            /**
                * <p>This Boolean value controls whether to display sheet margins.</p>
                */
            Show?: boolean;
    }
    export namespace MarginStyle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MarginStyle) => any;
    }
    /**
        * <p>The display options for the layout of tiles on a sheet.</p>
        */
    export interface TileLayoutStyle {
            /**
                * <p>The gutter settings that apply between tiles. </p>
                */
            Gutter?: GutterStyle;
            /**
                * <p>The margin settings that apply around the outside edge of sheets.</p>
                */
            Margin?: MarginStyle;
    }
    export namespace TileLayoutStyle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TileLayoutStyle) => any;
    }
    /**
        * <p>The theme display options for sheets. </p>
        */
    export interface SheetStyle {
            /**
                * <p>The display options for tiles.</p>
                */
            Tile?: TileStyle;
            /**
                * <p>The layout options for tiles.</p>
                */
            TileLayout?: TileLayoutStyle;
    }
    export namespace SheetStyle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SheetStyle) => any;
    }
    /**
        * <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
        *             description is a hexadecimal color code that consists of six alphanumerical characters,
        *             prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
        *                 Guide.</i>
        *         </p>
        */
    export interface UIColorPalette {
            /**
                * <p>The color of text and other foreground elements that appear over the primary
                *             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
                */
            PrimaryForeground?: string;
            /**
                * <p>The background color that applies to visuals and other high emphasis UI.</p>
                */
            PrimaryBackground?: string;
            /**
                * <p>The foreground color that applies to any sheet title, sheet control text, or UI that
                *             appears over the secondary background.</p>
                */
            SecondaryForeground?: string;
            /**
                * <p>The background color that applies to the sheet background and sheet controls.</p>
                */
            SecondaryBackground?: string;
            /**
                * <p>This color is that applies to selected states and buttons.</p>
                */
            Accent?: string;
            /**
                * <p>The foreground color that applies to any text or other elements that appear over the
                *             accent color.</p>
                */
            AccentForeground?: string;
            /**
                * <p>The color that applies to error messages.</p>
                */
            Danger?: string;
            /**
                * <p>The foreground color that applies to any text or other elements that appear over the
                *             error color.</p>
                */
            DangerForeground?: string;
            /**
                * <p>This color that applies to warning and informational messages.</p>
                */
            Warning?: string;
            /**
                * <p>The foreground color that applies to any text or other elements that appear over the
                *             warning color.</p>
                */
            WarningForeground?: string;
            /**
                * <p>The color that applies to success messages, for example the check mark for a
                *             successful download.</p>
                */
            Success?: string;
            /**
                * <p>The foreground color that applies to any text or other elements that appear over the
                *             success color.</p>
                */
            SuccessForeground?: string;
            /**
                * <p>The color that applies to the names of fields that are identified as
                *             dimensions.</p>
                */
            Dimension?: string;
            /**
                * <p>The foreground color that applies to any text or other elements that appear over the
                *             dimension color.</p>
                */
            DimensionForeground?: string;
            /**
                * <p>The color that applies to the names of fields that are identified as measures.</p>
                */
            Measure?: string;
            /**
                * <p>The foreground color that applies to any text or other elements that appear over the
                *             measure color.</p>
                */
            MeasureForeground?: string;
    }
    export namespace UIColorPalette {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UIColorPalette) => any;
    }
    /**
        * <p>The theme configuration. This configuration contains all of the display properties for
        *             a theme.</p>
        */
    export interface ThemeConfiguration {
            /**
                * <p>Color properties that apply to chart data colors.</p>
                */
            DataColorPalette?: DataColorPalette;
            /**
                * <p>Color properties that apply to the UI and to charts, excluding the colors that apply
                *             to data. </p>
                */
            UIColorPalette?: UIColorPalette;
            /**
                * <p>Display options related to sheets.</p>
                */
            Sheet?: SheetStyle;
    }
    export namespace ThemeConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThemeConfiguration) => any;
    }
    export interface CreateThemeRequest {
            /**
                * <p>The ID of the Amazon Web Services account where you want to store the new theme. </p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the theme that you want to create. The theme ID is unique per Amazon Web Services Region in
                * 			each Amazon Web Services account.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>A display name for the theme.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ID of the theme that a custom theme will inherit from. All themes inherit from one of
                * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
                * 				<code>ListThemes</code> or choose <b>Themes</b> from
                * 			within an analysis. </p>
                */
            BaseThemeId: string | undefined;
            /**
                * <p>A description of the first version of the theme that you're creating. Every time
                * 				<code>UpdateTheme</code> is called, a new version is created. Each version of the
                * 			theme has a description of the version in the <code>VersionDescription</code>
                * 			field.</p>
                */
            VersionDescription?: string;
            /**
                * <p>The theme configuration, which contains the theme display properties.</p>
                */
            Configuration: ThemeConfiguration | undefined;
            /**
                * <p>A valid grouping of resource permissions to apply to the new theme.
                * 			</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>A map of the key-value pairs for the resource tag or tags that you want to add to the
                * 			resource.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateThemeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateThemeRequest) => any;
    }
    export interface CreateThemeResponse {
            /**
                * <p>The Amazon Resource Name (ARN) for the theme.</p>
                */
            Arn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the new theme.</p>
                */
            VersionArn?: string;
            /**
                * <p>The ID of the theme.</p>
                */
            ThemeId?: string;
            /**
                * <p>The theme creation status.</p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateThemeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateThemeResponse) => any;
    }
    export interface CreateThemeAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme for the new theme alias.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the theme alias.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The name that you want to give to the theme alias that you are creating. The
                * 			alias name can't begin with a <code>$</code>. Alias names that start with <code>$</code>
                * 			are reserved by Amazon QuickSight. </p>
                */
            AliasName: string | undefined;
            /**
                * <p>The version number of the theme.</p>
                */
            ThemeVersionNumber: number | undefined;
    }
    export namespace CreateThemeAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateThemeAliasRequest) => any;
    }
    /**
        * <p>An alias for a theme.</p>
        */
    export interface ThemeAlias {
            /**
                * <p>The Amazon Resource Name (ARN) of the theme alias.</p>
                */
            Arn?: string;
            /**
                * <p>The display name of the theme alias.</p>
                */
            AliasName?: string;
            /**
                * <p>The version number of the theme alias.</p>
                */
            ThemeVersionNumber?: number;
    }
    export namespace ThemeAlias {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThemeAlias) => any;
    }
    export interface CreateThemeAliasResponse {
            /**
                * <p>Information about the theme alias.</p>
                */
            ThemeAlias?: ThemeAlias;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace CreateThemeAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateThemeAliasResponse) => any;
    }
    export enum DashboardErrorType {
            ACCESS_DENIED = "ACCESS_DENIED",
            COLUMN_GEOGRAPHIC_ROLE_MISMATCH = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
            COLUMN_REPLACEMENT_MISSING = "COLUMN_REPLACEMENT_MISSING",
            COLUMN_TYPE_MISMATCH = "COLUMN_TYPE_MISMATCH",
            DATA_SET_NOT_FOUND = "DATA_SET_NOT_FOUND",
            INTERNAL_FAILURE = "INTERNAL_FAILURE",
            PARAMETER_NOT_FOUND = "PARAMETER_NOT_FOUND",
            PARAMETER_TYPE_INVALID = "PARAMETER_TYPE_INVALID",
            PARAMETER_VALUE_INCOMPATIBLE = "PARAMETER_VALUE_INCOMPATIBLE",
            SOURCE_NOT_FOUND = "SOURCE_NOT_FOUND"
    }
    /**
        * <p>Dashboard error.</p>
        */
    export interface DashboardError {
            /**
                * <p>Type.</p>
                */
            Type?: DashboardErrorType | string;
            /**
                * <p>Message.</p>
                */
            Message?: string;
    }
    export namespace DashboardError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardError) => any;
    }
    /**
        * <p>Dashboard version.</p>
        */
    export interface DashboardVersion {
            /**
                * <p>The time that this dashboard version was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>Errors associated with this dashboard version.</p>
                */
            Errors?: DashboardError[];
            /**
                * <p>Version number for this version of the dashboard.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: ResourceStatus | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>Source entity ARN.</p>
                */
            SourceEntityArn?: string;
            /**
                * <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
                *             version of the dashboard.</p>
                */
            DataSetArns?: string[];
            /**
                * <p>Description.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the theme associated with a version of the dashboard.</p>
                */
            ThemeArn?: string;
            /**
                * <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
                */
            Sheets?: Sheet[];
    }
    export namespace DashboardVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardVersion) => any;
    }
    /**
        * <p>Dashboard.</p>
        */
    export interface Dashboard {
            /**
                * <p>Dashboard ID.</p>
                */
            DashboardId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>A display name for the dashboard.</p>
                */
            Name?: string;
            /**
                * <p>Version.</p>
                */
            Version?: DashboardVersion;
            /**
                * <p>The time that this dataset was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The last time that this dataset was published.</p>
                */
            LastPublishedTime?: Date;
            /**
                * <p>The last time that this dataset was updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace Dashboard {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Dashboard) => any;
    }
    export enum DashboardFilterAttribute {
            QUICKSIGHT_USER = "QUICKSIGHT_USER"
    }
    /**
        * <p>A filter that you apply when searching for dashboards. </p>
        */
    export interface DashboardSearchFilter {
            /**
                * <p>The comparison operator that you want to use as a filter, for example,
                *             <code>"Operator": "StringEquals"</code>.</p>
                */
            Operator: FilterOperator | string | undefined;
            /**
                * <p>The name of the value that you want to use as a filter, for example, <code>"Name":
                *             "QUICKSIGHT_USER"</code>. </p>
                */
            Name?: DashboardFilterAttribute | string;
            /**
                * <p>The value of the named item, in this case <code>QUICKSIGHT_USER</code>, that you want
                *             to use as a filter, for example, <code>"Value":
                *             "arn:aws:quicksight:us-east-1:1:user/default/UserName1"</code>. </p>
                */
            Value?: string;
    }
    export namespace DashboardSearchFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardSearchFilter) => any;
    }
    /**
        * <p>Dashboard summary.</p>
        */
    export interface DashboardSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>Dashboard ID.</p>
                */
            DashboardId?: string;
            /**
                * <p>A display name for the dashboard.</p>
                */
            Name?: string;
            /**
                * <p>The time that this dashboard was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The last time that this dashboard was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>Published version number.</p>
                */
            PublishedVersionNumber?: number;
            /**
                * <p>The last time that this dashboard was published.</p>
                */
            LastPublishedTime?: Date;
    }
    export namespace DashboardSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardSummary) => any;
    }
    /**
        * <p>Dashboard version summary.</p>
        */
    export interface DashboardVersionSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>The time that this dashboard version was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>Version number.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: ResourceStatus | string;
            /**
                * <p>Source entity ARN.</p>
                */
            SourceEntityArn?: string;
            /**
                * <p>Description.</p>
                */
            Description?: string;
    }
    export namespace DashboardVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardVersionSummary) => any;
    }
    /**
        * <p>Output column.</p>
        */
    export interface OutputColumn {
            /**
                * <p>A display name for the dataset.</p>
                */
            Name?: string;
            /**
                * <p>A description for a column.</p>
                */
            Description?: string;
            /**
                * <p>Type.</p>
                */
            Type?: ColumnDataType | string;
    }
    export namespace OutputColumn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputColumn) => any;
    }
    /**
        * <p>Dataset.</p>
        */
    export interface DataSet {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the dataset.</p>
                */
            DataSetId?: string;
            /**
                * <p>A display name for the dataset.</p>
                */
            Name?: string;
            /**
                * <p>The time that this dataset was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The last time that this dataset was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>Declares the physical tables that are available in the underlying data sources.</p>
                */
            PhysicalTableMap?: Record<string, PhysicalTable>;
            /**
                * <p>Configures the combination and transformation of the data from the physical
                *             tables.</p>
                */
            LogicalTableMap?: Record<string, LogicalTable>;
            /**
                * <p>The list of columns after all transforms. These columns are available in templates,
                *             analyses, and dashboards.</p>
                */
            OutputColumns?: OutputColumn[];
            /**
                * <p>A value that indicates whether you want to import the data into SPICE.</p>
                */
            ImportMode?: DataSetImportMode | string;
            /**
                * <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't
                *             imported into SPICE.</p>
                */
            ConsumedSpiceCapacityInBytes?: number;
            /**
                * <p>Groupings of columns that work together in certain Amazon QuickSight features.
                *             Currently, only geospatial hierarchy is supported.</p>
                */
            ColumnGroups?: ColumnGroup[];
            /**
                * <p>The folder that contains fields and nested subfolders for your dataset.</p>
                */
            FieldFolders?: Record<string, FieldFolder>;
            /**
                * <p>The row-level security configuration for the dataset.</p>
                */
            RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
            /**
                * <p>The element you can use to define tags for row-level security.</p>
                */
            RowLevelPermissionTagConfiguration?: RowLevelPermissionTagConfiguration;
            /**
                * <p>A set of one or more definitions of a <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a>
                *             </code>.</p>
                */
            ColumnLevelPermissionRules?: ColumnLevelPermissionRule[];
            /**
                * <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
                */
            DataSetUsageConfiguration?: DataSetUsageConfiguration;
    }
    export namespace DataSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSet) => any;
    }
    /**
        * <p>Dataset schema.</p>
        */
    export interface DataSetSchema {
            /**
                * <p>A structure containing the list of column schemas.</p>
                */
            ColumnSchemaList?: ColumnSchema[];
    }
    export namespace DataSetSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSetSchema) => any;
    }
    /**
        * <p>Dataset configuration.</p>
        */
    export interface DataSetConfiguration {
            /**
                * <p>Placeholder.</p>
                */
            Placeholder?: string;
            /**
                * <p>Dataset schema.</p>
                */
            DataSetSchema?: DataSetSchema;
            /**
                * <p>A structure containing the list of column group schemas.</p>
                */
            ColumnGroupSchemaList?: ColumnGroupSchema[];
    }
    export namespace DataSetConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSetConfiguration) => any;
    }
    /**
        * <p>Dataset summary.</p>
        */
    export interface DataSetSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the dataset.</p>
                */
            DataSetId?: string;
            /**
                * <p>A display name for the dataset.</p>
                */
            Name?: string;
            /**
                * <p>The time that this dataset was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The last time that this dataset was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>A value that indicates whether you want to import the data into SPICE.</p>
                */
            ImportMode?: DataSetImportMode | string;
            /**
                * <p>The row-level security configuration for the dataset.</p>
                */
            RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
            /**
                * <p>Whether or not the row level permission tags are applied.</p>
                */
            RowLevelPermissionTagConfigurationApplied?: boolean;
            /**
                * <p>A value that indicates if the dataset has column level permission configured.</p>
                */
            ColumnLevelPermissionRulesApplied?: boolean;
    }
    export namespace DataSetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSetSummary) => any;
    }
    export enum DataSourceErrorInfoType {
            ACCESS_DENIED = "ACCESS_DENIED",
            CONFLICT = "CONFLICT",
            COPY_SOURCE_NOT_FOUND = "COPY_SOURCE_NOT_FOUND",
            ENGINE_VERSION_NOT_SUPPORTED = "ENGINE_VERSION_NOT_SUPPORTED",
            GENERIC_SQL_FAILURE = "GENERIC_SQL_FAILURE",
            TIMEOUT = "TIMEOUT",
            UNKNOWN = "UNKNOWN",
            UNKNOWN_HOST = "UNKNOWN_HOST"
    }
    /**
        * <p>Error information for the data source creation or update.</p>
        */
    export interface DataSourceErrorInfo {
            /**
                * <p>Error type.</p>
                */
            Type?: DataSourceErrorInfoType | string;
            /**
                * <p>Error message.</p>
                */
            Message?: string;
    }
    export namespace DataSourceErrorInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceErrorInfo) => any;
    }
    /**
        * <p>The structure of a data source.</p>
        */
    export interface DataSource {
            /**
                * <p>The Amazon Resource Name (ARN) of the data source.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each
                *             Amazon Web Services account.</p>
                */
            DataSourceId?: string;
            /**
                * <p>A display name for the data source.</p>
                */
            Name?: string;
            /**
                * <p>The type of the data source. This type indicates which database engine the data source
                *             connects to.</p>
                */
            Type?: DataSourceType | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: ResourceStatus | string;
            /**
                * <p>The time that this data source was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The last time that this data source was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>The parameters that Amazon QuickSight uses to connect to your underlying source. This
                *             is a variant type structure. For this structure to be valid, only one of the attributes
                *             can be non-null.</p>
                */
            DataSourceParameters?: DataSourceParameters;
            /**
                * <p>A set of alternate data source parameters that you want to share for the credentials
                *             stored with this data source. The credentials are applied in tandem with the data source
                *             parameters when you copy a data source by using a create or update request. The API
                *             operation compares the <code>DataSourceParameters</code> structure that's in the request
                *             with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the
                *             structures are an exact match, the request is allowed to use the credentials from this
                *             existing data source. If the <code>AlternateDataSourceParameters</code> list is null,
                *             the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>
                *             are automatically allowed.</p>
                */
            AlternateDataSourceParameters?: DataSourceParameters[];
            /**
                * <p>The VPC connection information. You need to use this parameter only when you want
                *             Amazon QuickSight to use a VPC connection when connecting to your underlying source.</p>
                */
            VpcConnectionProperties?: VpcConnectionProperties;
            /**
                * <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your
                *             underlying source.</p>
                */
            SslProperties?: SslProperties;
            /**
                * <p>Error information from the last update or the creation of the data source.</p>
                */
            ErrorInfo?: DataSourceErrorInfo;
    }
    export namespace DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSource) => any;
    }
    export interface DeleteAccountCustomizationRequest {
            /**
                * <p>The ID for the Amazon Web Services account that you want to delete Amazon QuickSight customizations from in
                *             this Amazon Web Services Region.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The Amazon QuickSight namespace that you're deleting the customizations from.</p>
                */
            Namespace?: string;
    }
    export namespace DeleteAccountCustomizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccountCustomizationRequest) => any;
    }
    export interface DeleteAccountCustomizationResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteAccountCustomizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccountCustomizationResponse) => any;
    }
    export interface DeleteAnalysisRequest {
            /**
                * <p>The ID of the Amazon Web Services account where you want to delete an analysis.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the analysis that you're deleting.</p>
                */
            AnalysisId: string | undefined;
            /**
                * <p>A value that specifies the number of days that Amazon QuickSight waits before it deletes the
                *             analysis. You can't use this parameter with the <code>ForceDeleteWithoutRecovery</code>
                *             option in the same API call. The default value is 30.</p>
                */
            RecoveryWindowInDays?: number;
            /**
                * <p>This option defaults to the value <code>NoForceDeleteWithoutRecovery</code>. To
                *             immediately delete the analysis, add the <code>ForceDeleteWithoutRecovery</code> option.
                *             You can't restore an analysis after it's deleted. </p>
                */
            ForceDeleteWithoutRecovery?: boolean;
    }
    export namespace DeleteAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAnalysisRequest) => any;
    }
    export interface DeleteAnalysisResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the deleted analysis.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the deleted analysis.</p>
                */
            AnalysisId?: string;
            /**
                * <p>The date and time that the analysis is scheduled to be deleted.</p>
                */
            DeletionTime?: Date;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DeleteAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAnalysisResponse) => any;
    }
    export interface DeleteDashboardRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboard that you're
                *             deleting.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The version number of the dashboard. If the version number property is provided, only
                *             the specified version of the dashboard is deleted.</p>
                */
            VersionNumber?: number;
    }
    export namespace DeleteDashboardRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDashboardRequest) => any;
    }
    export interface DeleteDashboardResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Secure Socket Layer (SSL) properties that apply for the resource.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the dashboard.</p>
                */
            DashboardId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DeleteDashboardResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDashboardResponse) => any;
    }
    export interface DeleteDataSetRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId: string | undefined;
    }
    export namespace DeleteDataSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataSetRequest) => any;
    }
    export interface DeleteDataSetResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset.</p>
                */
            Arn?: string;
            /**
                * <p>The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteDataSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataSetResponse) => any;
    }
    export interface DeleteDataSourceRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId: string | undefined;
    }
    export namespace DeleteDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataSourceRequest) => any;
    }
    export interface DeleteDataSourceResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the data source that you deleted.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataSourceResponse) => any;
    }
    export interface DeleteFolderRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
    }
    export namespace DeleteFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFolderRequest) => any;
    }
    export interface DeleteFolderResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Resource Name of the deleted folder.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DeleteFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFolderResponse) => any;
    }
    export interface DeleteFolderMembershipRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The Folder ID.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The ID of the asset (the dashboard, analysis, or dataset) that you want to delete.</p>
                */
            MemberId: string | undefined;
            /**
                * <p>The type of the member, including <code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code>
                *          </p>
                */
            MemberType: MemberType | string | undefined;
    }
    export namespace DeleteFolderMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFolderMembershipRequest) => any;
    }
    export interface DeleteFolderMembershipResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DeleteFolderMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFolderMembershipResponse) => any;
    }
    export interface DeleteGroupRequest {
            /**
                * <p>The name of the group that you want to delete.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace of the group that you want to delete.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DeleteGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupRequest) => any;
    }
    export interface DeleteGroupResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupResponse) => any;
    }
    export interface DeleteGroupMembershipRequest {
            /**
                * <p>The name of the user that you want to delete from the group membership.</p>
                */
            MemberName: string | undefined;
            /**
                * <p>The name of the group that you want to delete the user from.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace of the group that you want to remove a user from.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DeleteGroupMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupMembershipRequest) => any;
    }
    export interface DeleteGroupMembershipResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteGroupMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupMembershipResponse) => any;
    }
    export interface DeleteIAMPolicyAssignmentRequest {
            /**
                * <p>The Amazon Web Services account ID where you want to delete the IAM policy assignment.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The name of the assignment. </p>
                */
            AssignmentName: string | undefined;
            /**
                * <p>The namespace that contains the assignment.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DeleteIAMPolicyAssignmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIAMPolicyAssignmentRequest) => any;
    }
    export interface DeleteIAMPolicyAssignmentResponse {
            /**
                * <p>The name of the assignment. </p>
                */
            AssignmentName?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteIAMPolicyAssignmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIAMPolicyAssignmentResponse) => any;
    }
    export interface DeleteNamespaceRequest {
            /**
                * <p>The ID for the Amazon Web Services account that you want to delete the Amazon QuickSight namespace from.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace that you want to delete.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DeleteNamespaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNamespaceRequest) => any;
    }
    export interface DeleteNamespaceResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteNamespaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNamespaceResponse) => any;
    }
    export interface DeleteTemplateRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template that you're deleting.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the template you want to delete.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>Specifies the version of the template that you want to delete.
                * 			If you don't provide a version number, <code>DeleteTemplate</code> deletes all versions of the template.
                * 	 </p>
                */
            VersionNumber?: number;
    }
    export namespace DeleteTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTemplateRequest) => any;
    }
    export interface DeleteTemplateResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>An ID for the template.</p>
                */
            TemplateId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTemplateResponse) => any;
    }
    export interface DeleteTemplateAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the item to delete.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template that the specified alias is for.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>The name for the template alias. To delete a specific alias, you delete the version that the
                * 			alias points to. You can specify the alias name, or specify the latest version of the
                * 			template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code>
                * 			parameter. </p>
                */
            AliasName: string | undefined;
    }
    export namespace DeleteTemplateAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTemplateAliasRequest) => any;
    }
    export interface DeleteTemplateAliasResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>An ID for the template associated with the deletion.</p>
                */
            TemplateId?: string;
            /**
                * <p>The name for the template alias.</p>
                */
            AliasName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the template you want to delete.</p>
                */
            Arn?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DeleteTemplateAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTemplateAliasResponse) => any;
    }
    export interface DeleteThemeRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme that you're deleting.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>An ID for the theme that you want to delete.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The version of the theme that you want to delete. </p>
                * 		       <p>
                *             <b>Note:</b> If you don't provide a version number, you're
                * 			using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>
                */
            VersionNumber?: number;
    }
    export namespace DeleteThemeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteThemeRequest) => any;
    }
    export interface DeleteThemeResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>An ID for the theme.</p>
                */
            ThemeId?: string;
    }
    export namespace DeleteThemeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteThemeResponse) => any;
    }
    export interface DeleteThemeAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme alias to delete.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme that the specified alias is for.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The unique name for the theme alias to delete.</p>
                */
            AliasName: string | undefined;
    }
    export namespace DeleteThemeAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteThemeAliasRequest) => any;
    }
    export interface DeleteThemeAliasResponse {
            /**
                * <p>The name for the theme alias.</p>
                */
            AliasName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the theme resource using the deleted alias.</p>
                */
            Arn?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>An ID for the theme associated with the deletion.</p>
                */
            ThemeId?: string;
    }
    export namespace DeleteThemeAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteThemeAliasResponse) => any;
    }
    export interface DeleteUserRequest {
            /**
                * <p>The name of the user that you want to delete.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace. Currently, you should set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DeleteUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserRequest) => any;
    }
    export interface DeleteUserResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteUserByPrincipalIdRequest {
            /**
                * <p>The principal ID of the user.</p>
                */
            PrincipalId: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace. Currently, you should set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DeleteUserByPrincipalIdRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserByPrincipalIdRequest) => any;
    }
    export interface DeleteUserByPrincipalIdResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DeleteUserByPrincipalIdResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserByPrincipalIdResponse) => any;
    }
    export interface DescribeAccountCustomizationRequest {
            /**
                * <p>The ID for the Amazon Web Services account that you want to describe Amazon QuickSight customizations
                *             for.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The Amazon QuickSight namespace that you want to describe Amazon QuickSight customizations
                *             for.</p>
                */
            Namespace?: string;
            /**
                * <p>The <code>Resolved</code> flag works with the other parameters to determine which view
                *             of Amazon QuickSight customizations is returned. You can add this flag to your command to use
                *             the same view that Amazon QuickSight uses to identify which customizations to apply to the
                *             console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations
                *             that are configured at different levels. </p>
                */
            Resolved?: boolean;
    }
    export namespace DescribeAccountCustomizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountCustomizationRequest) => any;
    }
    export interface DescribeAccountCustomizationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the customization that's associated with this Amazon Web Services account.</p>
                */
            Arn?: string;
            /**
                * <p>The ID for the Amazon Web Services account that you're describing.</p>
                */
            AwsAccountId?: string;
            /**
                * <p>The Amazon QuickSight namespace that you're describing. </p>
                */
            Namespace?: string;
            /**
                * <p>The Amazon QuickSight customizations that exist in the current Amazon Web Services Region. </p>
                */
            AccountCustomization?: AccountCustomization;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeAccountCustomizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountCustomizationResponse) => any;
    }
    export interface DescribeAccountSettingsRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the settings that you want to list.</p>
                */
            AwsAccountId: string | undefined;
    }
    export namespace DescribeAccountSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountSettingsRequest) => any;
    }
    export interface DescribeAccountSettingsResponse {
            /**
                * <p>The Amazon QuickSight settings for this Amazon Web Services account. This information
                *             includes the edition of Amazon Amazon QuickSight that you subscribed to (Standard or
                *             Enterprise) and the notification email for the Amazon QuickSight subscription. </p>
                *         <p>In the QuickSight console, the Amazon QuickSight subscription is sometimes referred to
                *             as a QuickSight "account" even though it's technically not an account by
                *             itself. Instead, it's a subscription to the Amazon QuickSight service for your
                *                 Amazon Web Services account. The edition that you subscribe to applies to Amazon QuickSight in every Amazon Web Services Region where you use it.</p>
                */
            AccountSettings?: AccountSettings;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeAccountSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountSettingsResponse) => any;
    }
    export interface DescribeAccountSubscriptionRequest {
            /**
                * <p>The Amazon Web Services account ID associated with your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
    }
    export namespace DescribeAccountSubscriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountSubscriptionRequest) => any;
    }
    export interface DescribeAccountSubscriptionResponse {
            /**
                * <p>A structure that contains the following elements:</p>
                *          <ul>
                *             <li>
                *                <p>Your Amazon QuickSight account name.</p>
                *             </li>
                *             <li>
                *                <p>The edition of Amazon QuickSight that your account is using.</p>
                *             </li>
                *             <li>
                *                <p>The notification email address that is associated with the Amazon QuickSight
                *                     account.
                *             </p>
                *             </li>
                *             <li>
                *                <p>The authentication type of the Amazon QuickSight account.</p>
                *             </li>
                *             <li>
                *                <p>The status of the Amazon QuickSight account's subscription.</p>
                *             </li>
                *          </ul>
                */
            AccountInfo?: AccountInfo;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeAccountSubscriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountSubscriptionResponse) => any;
    }
    export interface DescribeAnalysisRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the analysis. You must be using the
                *             Amazon Web Services account that the analysis is in.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the analysis that you're describing. The ID is part of the URL of the
                *             analysis.</p>
                */
            AnalysisId: string | undefined;
    }
    export namespace DescribeAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnalysisRequest) => any;
    }
    export interface DescribeAnalysisResponse {
            /**
                * <p>A metadata structure that contains summary information for the analysis that you're
                *             describing.</p>
                */
            Analysis?: Analysis;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnalysisResponse) => any;
    }
    export interface DescribeAnalysisPermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the analysis whose permissions you're
                *             describing. You must be using the Amazon Web Services account that the analysis is in.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the analysis whose permissions you're describing. The ID is part of the
                *             analysis URL.</p>
                */
            AnalysisId: string | undefined;
    }
    export namespace DescribeAnalysisPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnalysisPermissionsRequest) => any;
    }
    export interface DescribeAnalysisPermissionsResponse {
            /**
                * <p>The ID of the analysis whose permissions you're describing.</p>
                */
            AnalysisId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the analysis whose permissions you're
                *             describing.</p>
                */
            AnalysisArn?: string;
            /**
                * <p>A structure that describes the principals and the resource-level permissions on an
                *             analysis.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeAnalysisPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnalysisPermissionsResponse) => any;
    }
    export interface DescribeDashboardRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboard that you're
                *             describing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The version number for the dashboard. If a version number isn't passed, the
                *             latest published dashboard version is described. </p>
                */
            VersionNumber?: number;
            /**
                * <p>The alias name.</p>
                */
            AliasName?: string;
    }
    export namespace DescribeDashboardRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDashboardRequest) => any;
    }
    export interface DescribeDashboardResponse {
            /**
                * <p>Information about the dashboard.</p>
                */
            Dashboard?: Dashboard;
            /**
                * <p>The HTTP status of this request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeDashboardResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDashboardResponse) => any;
    }
    export interface DescribeDashboardPermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboard that you're describing
                *             permissions for.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard, also added to the IAM policy.</p>
                */
            DashboardId: string | undefined;
    }
    export namespace DescribeDashboardPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDashboardPermissionsRequest) => any;
    }
    /**
        * <p>A structure that contains the configuration of a shareable link to the dashboard.</p>
        */
    export interface LinkSharingConfiguration {
            /**
                * <p>A structure that contains the permissions of a shareable link.</p>
                */
            Permissions?: ResourcePermission[];
    }
    export namespace LinkSharingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LinkSharingConfiguration) => any;
    }
    export interface DescribeDashboardPermissionsResponse {
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the dashboard.</p>
                */
            DashboardArn?: string;
            /**
                * <p>A structure that contains the permissions for the dashboard.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>A structure that contains the configuration of a shareable link that grants access to
                *             the dashboard. Your users can use the link to view and interact with the dashboard, if
                *             the dashboard has been shared with them. For more information about sharing dashboards,
                *             see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sharing-a-dashboard.html">Sharing Dashboards</a>.</p>
                */
            LinkSharingConfiguration?: LinkSharingConfiguration;
    }
    export namespace DescribeDashboardPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDashboardPermissionsResponse) => any;
    }
    export interface DescribeDataSetRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId: string | undefined;
    }
    export namespace DescribeDataSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSetRequest) => any;
    }
    export interface DescribeDataSetResponse {
            /**
                * <p>Information on the dataset.</p>
                */
            DataSet?: DataSet;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeDataSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSetResponse) => any;
    }
    export interface DescribeDataSetPermissionsRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId: string | undefined;
    }
    export namespace DescribeDataSetPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSetPermissionsRequest) => any;
    }
    export interface DescribeDataSetPermissionsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset.</p>
                */
            DataSetArn?: string;
            /**
                * <p>The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId?: string;
            /**
                * <p>A list of resource permissions on the dataset.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeDataSetPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSetPermissionsResponse) => any;
    }
    export interface DescribeDataSourceRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId: string | undefined;
    }
    export namespace DescribeDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSourceRequest) => any;
    }
    export interface DescribeDataSourceResponse {
            /**
                * <p>The information on the data source.</p>
                */
            DataSource?: DataSource;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSourceResponse) => any;
    }
    export interface DescribeDataSourcePermissionsRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId: string | undefined;
    }
    export namespace DescribeDataSourcePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSourcePermissionsRequest) => any;
    }
    export interface DescribeDataSourcePermissionsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the data source.</p>
                */
            DataSourceArn?: string;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId?: string;
            /**
                * <p>A list of resource permissions on the data source.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeDataSourcePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSourcePermissionsResponse) => any;
    }
    export interface DescribeFolderRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
    }
    export namespace DescribeFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderRequest) => any;
    }
    /**
        * <p>A folder in Amazon QuickSight.</p>
        */
    export interface Folder {
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the folder.</p>
                */
            Arn?: string;
            /**
                * <p>A display name for the folder.</p>
                */
            Name?: string;
            /**
                * <p>The type of folder it is.</p>
                */
            FolderType?: FolderType | string;
            /**
                * <p>An array of ancestor ARN strings for the folder.</p>
                */
            FolderPath?: string[];
            /**
                * <p>The time that the folder was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The time that the folder was last updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace Folder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Folder) => any;
    }
    export interface DescribeFolderResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>Information about the folder.</p>
                */
            Folder?: Folder;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderResponse) => any;
    }
    export interface DescribeFolderPermissionsRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
    }
    export namespace DescribeFolderPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderPermissionsRequest) => any;
    }
    export interface DescribeFolderPermissionsResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the folder.</p>
                */
            Arn?: string;
            /**
                * <p>Information about the permissions on the folder.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeFolderPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderPermissionsResponse) => any;
    }
    export interface DescribeFolderResolvedPermissionsRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
    }
    export namespace DescribeFolderResolvedPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderResolvedPermissionsRequest) => any;
    }
    export interface DescribeFolderResolvedPermissionsResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the folder.</p>
                */
            Arn?: string;
            /**
                * <p>Information about the permissions for the folder.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeFolderResolvedPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderResolvedPermissionsResponse) => any;
    }
    export interface DescribeGroupRequest {
            /**
                * <p>The name of the group that you want to describe.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace of the group that you want described.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DescribeGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGroupRequest) => any;
    }
    export interface DescribeGroupResponse {
            /**
                * <p>The name of the group.</p>
                */
            Group?: Group;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGroupResponse) => any;
    }
    export interface DescribeGroupMembershipRequest {
            /**
                * <p>The user name of the user that you want to search for.</p>
                */
            MemberName: string | undefined;
            /**
                * <p>The name of the group that you want to search.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                *          Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace that includes the group you are searching within.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DescribeGroupMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGroupMembershipRequest) => any;
    }
    export interface DescribeGroupMembershipResponse {
            /**
                * <p>A member of an Amazon QuickSight group. Currently, group members must be users. Groups
                *             can't be members of another group. .</p>
                */
            GroupMember?: GroupMember;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeGroupMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGroupMembershipResponse) => any;
    }
    export interface DescribeIAMPolicyAssignmentRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the assignment that you want to describe.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The name of the assignment, also called a rule.</p>
                */
            AssignmentName: string | undefined;
            /**
                * <p>The namespace that contains the assignment.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DescribeIAMPolicyAssignmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIAMPolicyAssignmentRequest) => any;
    }
    /**
        * <p>An Identity and Access Management (IAM) policy assignment.</p>
        */
    export interface IAMPolicyAssignment {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId?: string;
            /**
                * <p>Assignment ID.</p>
                */
            AssignmentId?: string;
            /**
                * <p>Assignment name.</p>
                */
            AssignmentName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the IAM policy.</p>
                */
            PolicyArn?: string;
            /**
                * <p>Identities.</p>
                */
            Identities?: Record<string, string[]>;
            /**
                * <p>Assignment status.</p>
                */
            AssignmentStatus?: AssignmentStatus | string;
    }
    export namespace IAMPolicyAssignment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IAMPolicyAssignment) => any;
    }
    export interface DescribeIAMPolicyAssignmentResponse {
            /**
                * <p>Information describing the IAM policy assignment.</p>
                */
            IAMPolicyAssignment?: IAMPolicyAssignment;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeIAMPolicyAssignmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIAMPolicyAssignmentResponse) => any;
    }
    /**
        * <p>The <code>NextToken</code> value isn't valid.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface DescribeIngestionRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the dataset used in the ingestion.</p>
                */
            DataSetId: string | undefined;
            /**
                * <p>An ID for the ingestion.</p>
                */
            IngestionId: string | undefined;
    }
    export namespace DescribeIngestionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIngestionRequest) => any;
    }
    export enum IngestionErrorType {
            ACCOUNT_CAPACITY_LIMIT_EXCEEDED = "ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
            CONNECTION_FAILURE = "CONNECTION_FAILURE",
            CURSOR_NOT_ENABLED = "CURSOR_NOT_ENABLED",
            CUSTOMER_ERROR = "CUSTOMER_ERROR",
            DATA_SET_DELETED = "DATA_SET_DELETED",
            DATA_SET_NOT_SPICE = "DATA_SET_NOT_SPICE",
            DATA_SET_SIZE_LIMIT_EXCEEDED = "DATA_SET_SIZE_LIMIT_EXCEEDED",
            DATA_SOURCE_AUTH_FAILED = "DATA_SOURCE_AUTH_FAILED",
            DATA_SOURCE_CONNECTION_FAILED = "DATA_SOURCE_CONNECTION_FAILED",
            DATA_SOURCE_NOT_FOUND = "DATA_SOURCE_NOT_FOUND",
            DATA_TOLERANCE_EXCEPTION = "DATA_TOLERANCE_EXCEPTION",
            ELASTICSEARCH_CURSOR_NOT_ENABLED = "ELASTICSEARCH_CURSOR_NOT_ENABLED",
            FAILURE_TO_ASSUME_ROLE = "FAILURE_TO_ASSUME_ROLE",
            FAILURE_TO_PROCESS_JSON_FILE = "FAILURE_TO_PROCESS_JSON_FILE",
            IAM_ROLE_NOT_AVAILABLE = "IAM_ROLE_NOT_AVAILABLE",
            INGESTION_CANCELED = "INGESTION_CANCELED",
            INGESTION_SUPERSEDED = "INGESTION_SUPERSEDED",
            INTERNAL_SERVICE_ERROR = "INTERNAL_SERVICE_ERROR",
            INVALID_DATAPREP_SYNTAX = "INVALID_DATAPREP_SYNTAX",
            INVALID_DATA_SOURCE_CONFIG = "INVALID_DATA_SOURCE_CONFIG",
            INVALID_DATE_FORMAT = "INVALID_DATE_FORMAT",
            IOT_DATA_SET_FILE_EMPTY = "IOT_DATA_SET_FILE_EMPTY",
            IOT_FILE_NOT_FOUND = "IOT_FILE_NOT_FOUND",
            OAUTH_TOKEN_FAILURE = "OAUTH_TOKEN_FAILURE",
            PASSWORD_AUTHENTICATION_FAILURE = "PASSWORD_AUTHENTICATION_FAILURE",
            PERMISSION_DENIED = "PERMISSION_DENIED",
            PERMISSION_NOT_FOUND = "PERMISSION_NOT_FOUND",
            QUERY_TIMEOUT = "QUERY_TIMEOUT",
            REFRESH_SUPPRESSED_BY_EDIT = "REFRESH_SUPPRESSED_BY_EDIT",
            ROW_SIZE_LIMIT_EXCEEDED = "ROW_SIZE_LIMIT_EXCEEDED",
            S3_FILE_INACCESSIBLE = "S3_FILE_INACCESSIBLE",
            S3_MANIFEST_ERROR = "S3_MANIFEST_ERROR",
            S3_UPLOADED_FILE_DELETED = "S3_UPLOADED_FILE_DELETED",
            SOURCE_API_LIMIT_EXCEEDED_FAILURE = "SOURCE_API_LIMIT_EXCEEDED_FAILURE",
            SOURCE_RESOURCE_LIMIT_EXCEEDED = "SOURCE_RESOURCE_LIMIT_EXCEEDED",
            SPICE_TABLE_NOT_FOUND = "SPICE_TABLE_NOT_FOUND",
            SQL_EXCEPTION = "SQL_EXCEPTION",
            SQL_INVALID_PARAMETER_VALUE = "SQL_INVALID_PARAMETER_VALUE",
            SQL_NUMERIC_OVERFLOW = "SQL_NUMERIC_OVERFLOW",
            SQL_SCHEMA_MISMATCH_ERROR = "SQL_SCHEMA_MISMATCH_ERROR",
            SQL_TABLE_NOT_FOUND = "SQL_TABLE_NOT_FOUND",
            SSL_CERTIFICATE_VALIDATION_FAILURE = "SSL_CERTIFICATE_VALIDATION_FAILURE",
            UNRESOLVABLE_HOST = "UNRESOLVABLE_HOST",
            UNROUTABLE_HOST = "UNROUTABLE_HOST"
    }
    /**
        * <p>Error information for the SPICE ingestion of a dataset.</p>
        */
    export interface ErrorInfo {
            /**
                * <p>Error type.</p>
                */
            Type?: IngestionErrorType | string;
            /**
                * <p>Error message.</p>
                */
            Message?: string;
    }
    export namespace ErrorInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorInfo) => any;
    }
    /**
        * <p>Information about a queued dataset SPICE ingestion.</p>
        */
    export interface QueueInfo {
            /**
                * <p>The ID of the queued ingestion.</p>
                */
            WaitingOnIngestion: string | undefined;
            /**
                * <p>The ID of the ongoing ingestion. The queued ingestion is waiting for the ongoing
                *             ingestion to complete.</p>
                */
            QueuedIngestion: string | undefined;
    }
    export namespace QueueInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueueInfo) => any;
    }
    export enum IngestionRequestSource {
            MANUAL = "MANUAL",
            SCHEDULED = "SCHEDULED"
    }
    export enum IngestionRequestType {
            EDIT = "EDIT",
            FULL_REFRESH = "FULL_REFRESH",
            INCREMENTAL_REFRESH = "INCREMENTAL_REFRESH",
            INITIAL_INGESTION = "INITIAL_INGESTION"
    }
    /**
        * <p>Information about rows for a data set SPICE ingestion.</p>
        */
    export interface RowInfo {
            /**
                * <p>The number of rows that were ingested.</p>
                */
            RowsIngested?: number;
            /**
                * <p>The number of rows that were not ingested.</p>
                */
            RowsDropped?: number;
            /**
                * <p>The total number of rows in the dataset.</p>
                */
            TotalRowsInDataset?: number;
    }
    export namespace RowInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RowInfo) => any;
    }
    /**
        * <p>Information about the SPICE ingestion for a dataset.</p>
        */
    export interface Ingestion {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn: string | undefined;
            /**
                * <p>Ingestion ID.</p>
                */
            IngestionId?: string;
            /**
                * <p>Ingestion status.</p>
                */
            IngestionStatus: IngestionStatus | string | undefined;
            /**
                * <p>Error information for this ingestion.</p>
                */
            ErrorInfo?: ErrorInfo;
            /**
                * <p>Information about rows for a data set SPICE ingestion.</p>
                */
            RowInfo?: RowInfo;
            /**
                * <p>Information about a queued dataset SPICE ingestion.</p>
                */
            QueueInfo?: QueueInfo;
            /**
                * <p>The time that this ingestion started.</p>
                */
            CreatedTime: Date | undefined;
            /**
                * <p>The time that this ingestion took, measured in seconds.</p>
                */
            IngestionTimeInSeconds?: number;
            /**
                * <p>The size of the data ingested, in bytes.</p>
                */
            IngestionSizeInBytes?: number;
            /**
                * <p>Event source for this ingestion.</p>
                */
            RequestSource?: IngestionRequestSource | string;
            /**
                * <p>Type of this ingestion.</p>
                */
            RequestType?: IngestionRequestType | string;
    }
    export namespace Ingestion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Ingestion) => any;
    }
    export interface DescribeIngestionResponse {
            /**
                * <p>Information about the ingestion.</p>
                */
            Ingestion?: Ingestion;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeIngestionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIngestionResponse) => any;
    }
    export interface DescribeIpRestrictionRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the IP rules.</p>
                */
            AwsAccountId: string | undefined;
    }
    export namespace DescribeIpRestrictionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIpRestrictionRequest) => any;
    }
    export interface DescribeIpRestrictionResponse {
            /**
                * <p>The ID of the Amazon Web Services account that contains the IP rules.</p>
                */
            AwsAccountId?: string;
            /**
                * <p>A map that describes the IP rules with CIDR range and description.</p>
                */
            IpRestrictionRuleMap?: Record<string, string>;
            /**
                * <p>A value that specifies whether IP rules are turned on.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request. </p>
                */
            Status?: number;
    }
    export namespace DescribeIpRestrictionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIpRestrictionResponse) => any;
    }
    export interface DescribeNamespaceRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the Amazon QuickSight namespace that you want to describe.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace that you want to describe.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DescribeNamespaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNamespaceRequest) => any;
    }
    export enum NamespaceErrorType {
            INTERNAL_SERVICE_ERROR = "INTERNAL_SERVICE_ERROR",
            PERMISSION_DENIED = "PERMISSION_DENIED"
    }
    /**
        * <p>Errors that occur during namespace creation.</p>
        */
    export interface NamespaceError {
            /**
                * <p>The error type.</p>
                */
            Type?: NamespaceErrorType | string;
            /**
                * <p>The message for the error.</p>
                */
            Message?: string;
    }
    export namespace NamespaceError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NamespaceError) => any;
    }
    /**
        * <p>The error type.</p>
        */
    export interface NamespaceInfoV2 {
            /**
                * <p>The name of the error.</p>
                */
            Name?: string;
            /**
                * <p>The namespace ARN.</p>
                */
            Arn?: string;
            /**
                * <p>The namespace Amazon Web Services Region.</p>
                */
            CapacityRegion?: string;
            /**
                * <p>The creation status of a namespace that is not yet completely created.</p>
                */
            CreationStatus?: NamespaceStatus | string;
            /**
                * <p>The identity store used for the namespace.</p>
                */
            IdentityStore?: IdentityStore | string;
            /**
                * <p>An error that occurred when the namespace was created.</p>
                */
            NamespaceError?: NamespaceError;
    }
    export namespace NamespaceInfoV2 {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NamespaceInfoV2) => any;
    }
    export interface DescribeNamespaceResponse {
            /**
                * <p>The information about the namespace that you're describing. The response includes
                *         the namespace ARN, name, Amazon Web Services Region, creation status, and identity store. <code>DescribeNamespace</code> also
                *         works for namespaces that are in the process of being created. For incomplete namespaces,
                *         this API operation lists the namespace error types and messages associated with the creation process.</p>
                */
            Namespace?: NamespaceInfoV2;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeNamespaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNamespaceResponse) => any;
    }
    export interface DescribeTemplateRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template that you're describing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>(Optional) The number for the version to describe. If a <code>VersionNumber</code> parameter
                * 			value isn't provided, the latest version of the template is described.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The alias of the template that you want to describe. If you name a specific alias, you
                * 			describe the version that the alias points to. You can specify the latest version of the
                * 			template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code>
                * 			parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.</p>
                */
            AliasName?: string;
    }
    export namespace DescribeTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTemplateRequest) => any;
    }
    export enum TemplateErrorType {
            ACCESS_DENIED = "ACCESS_DENIED",
            DATA_SET_NOT_FOUND = "DATA_SET_NOT_FOUND",
            INTERNAL_FAILURE = "INTERNAL_FAILURE",
            SOURCE_NOT_FOUND = "SOURCE_NOT_FOUND"
    }
    /**
        * <p>List of errors that occurred when the template version creation failed.</p>
        */
    export interface TemplateError {
            /**
                * <p>Type of error.</p>
                */
            Type?: TemplateErrorType | string;
            /**
                * <p>Description of the error type.</p>
                */
            Message?: string;
    }
    export namespace TemplateError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateError) => any;
    }
    /**
        * <p>A version of a template.</p>
        */
    export interface TemplateVersion {
            /**
                * <p>The time that this template version was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>Errors associated with this template version.</p>
                */
            Errors?: TemplateError[];
            /**
                * <p>The version number of the template version.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: ResourceStatus | string;
            /**
                * <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
                *             template should be bound to new datasets matching the same schema described through this
                *             API operation.</p>
                */
            DataSetConfigurations?: DataSetConfiguration[];
            /**
                * <p>The description of the template.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
                *             template.</p>
                */
            SourceEntityArn?: string;
            /**
                * <p>The ARN of the theme associated with this version of the template.</p>
                */
            ThemeArn?: string;
            /**
                * <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
                */
            Sheets?: Sheet[];
    }
    export namespace TemplateVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateVersion) => any;
    }
    /**
        * <p>A template object. A <i>template</i> is an entity in Amazon QuickSight that
        *             encapsulates the metadata required to create an analysis and that you can use to create
        *             a dashboard. A template adds a layer of abstraction by using placeholders to replace the
        *             dataset associated with an analysis. You can use templates to create dashboards by
        *             replacing dataset placeholders with datasets that follow the same schema that was used
        *             to create the source analysis and template.</p>
        *         <p>You can share templates across Amazon Web Services accounts by allowing users in other Amazon Web Services accounts to
        *             create a template or a dashboard from an existing template.</p>
        */
    export interface Template {
            /**
                * <p>The Amazon Resource Name (ARN) of the template.</p>
                */
            Arn?: string;
            /**
                * <p>The display name of the template.</p>
                */
            Name?: string;
            /**
                * <p>A structure describing the versions of the template.</p>
                */
            Version?: TemplateVersion;
            /**
                * <p>The ID for the template. This is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            TemplateId?: string;
            /**
                * <p>Time when this was last updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>Time when this was created.</p>
                */
            CreatedTime?: Date;
    }
    export namespace Template {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Template) => any;
    }
    export interface DescribeTemplateResponse {
            /**
                * <p>The template structure for the object you want to describe.</p>
                */
            Template?: Template;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTemplateResponse) => any;
    }
    export interface DescribeTemplateAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template alias that you're
                * 			describing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>The name of the template alias that you want to describe. If you name a specific alias, you
                * 			describe the version that the alias points to. You can specify the latest version of the
                * 			template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code>
                * 			parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.</p>
                */
            AliasName: string | undefined;
    }
    export namespace DescribeTemplateAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTemplateAliasRequest) => any;
    }
    export interface DescribeTemplateAliasResponse {
            /**
                * <p>Information about the template alias.</p>
                */
            TemplateAlias?: TemplateAlias;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeTemplateAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTemplateAliasResponse) => any;
    }
    export interface DescribeTemplatePermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template that you're describing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
    }
    export namespace DescribeTemplatePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTemplatePermissionsRequest) => any;
    }
    export interface DescribeTemplatePermissionsResponse {
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the template.</p>
                */
            TemplateArn?: string;
            /**
                * <p>A list of resource permissions to be set on the template. </p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeTemplatePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTemplatePermissionsResponse) => any;
    }
    export interface DescribeThemeRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme that you're describing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The version number for the version to describe. If a <code>VersionNumber</code> parameter
                * 			value isn't provided, the latest version of the theme is described.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The alias of the theme that you want to describe. If you name a specific alias, you
                * 			describe the version that the alias points to. You can specify the latest version of the
                * 			theme by providing the keyword <code>$LATEST</code> in the <code>AliasName</code>
                * 			parameter. The keyword <code>$PUBLISHED</code> doesn't apply to themes.</p>
                */
            AliasName?: string;
    }
    export namespace DescribeThemeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThemeRequest) => any;
    }
    export enum ThemeType {
            ALL = "ALL",
            CUSTOM = "CUSTOM",
            QUICKSIGHT = "QUICKSIGHT"
    }
    export enum ThemeErrorType {
            INTERNAL_FAILURE = "INTERNAL_FAILURE"
    }
    /**
        * <p>Theme error.</p>
        */
    export interface ThemeError {
            /**
                * <p>The type of error.</p>
                */
            Type?: ThemeErrorType | string;
            /**
                * <p>The error message.</p>
                */
            Message?: string;
    }
    export namespace ThemeError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThemeError) => any;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { _Parameters, AccountCustomization, ActiveIAMPolicyAssignment, AnalysisSearchFilter, AnalysisSourceEntity, AnalysisSummary, AnonymousUserEmbeddingExperienceConfiguration, AssignmentStatus, ColumnGroup, ColumnLevelPermissionRule, DashboardPublishOptions, DashboardSearchFilter, DashboardSourceEntity, DashboardSummary, DashboardVersionSummary, DataSetImportMode, DataSetSummary, DataSetUsageConfiguration, DataSource, DataSourceCredentials, DataSourceParameters, FieldFolder, FilterOperator, FolderType, Group, GroupMember, Ingestion, LinkSharingConfiguration, LogicalTable, NamespaceInfoV2, PhysicalTable, ResourcePermission, ResourceStatus, RowLevelPermissionDataSet, RowLevelPermissionTagConfiguration, SslProperties, Tag, TemplateAlias, TemplateSourceEntity, ThemeAlias, ThemeConfiguration, ThemeError, ThemeType, VpcConnectionProperties } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/models_0";
    import { QuickSightServiceException as __BaseException } from "@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/QuickSightServiceException";
    /**
        * <p>A version of a theme.</p>
        */
    export interface ThemeVersion {
            /**
                * <p>The version number of the theme.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>The description of the theme.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
                *             themes initially inherit from a default Amazon QuickSight theme.</p>
                */
            BaseThemeId?: string;
            /**
                * <p>The date and time that this theme version was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The theme configuration, which contains all the theme display properties.</p>
                */
            Configuration?: ThemeConfiguration;
            /**
                * <p>Errors associated with the theme.</p>
                */
            Errors?: ThemeError[];
            /**
                * <p>The status of the theme version.</p>
                */
            Status?: ResourceStatus | string;
    }
    export namespace ThemeVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThemeVersion) => any;
    }
    /**
        * <p>Summary information about a theme.</p>
        */
    export interface Theme {
            /**
                * <p>The Amazon Resource Name (ARN) of the theme.</p>
                */
            Arn?: string;
            /**
                * <p>The name that the user gives to the theme.</p>
                */
            Name?: string;
            /**
                * <p>The identifier that the user gives to the theme.</p>
                */
            ThemeId?: string;
            /**
                * <p>A version of a theme.</p>
                */
            Version?: ThemeVersion;
            /**
                * <p>The date and time that the theme was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The date and time that the theme was last updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>The type of theme, based on how it was created. Valid values include:
                *             <code>QUICKSIGHT</code> and <code>CUSTOM</code>.</p>
                */
            Type?: ThemeType | string;
    }
    export namespace Theme {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Theme) => any;
    }
    export interface DescribeThemeResponse {
            /**
                * <p>The information about the theme that you are describing.</p>
                */
            Theme?: Theme;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeThemeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThemeResponse) => any;
    }
    export interface DescribeThemeAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme alias that you're
                * 			describing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The name of the theme alias that you want to describe.</p>
                */
            AliasName: string | undefined;
    }
    export namespace DescribeThemeAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThemeAliasRequest) => any;
    }
    export interface DescribeThemeAliasResponse {
            /**
                * <p>Information about the theme alias.</p>
                */
            ThemeAlias?: ThemeAlias;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace DescribeThemeAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThemeAliasResponse) => any;
    }
    export interface DescribeThemePermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme that you're describing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme that you want to describe permissions for.</p>
                */
            ThemeId: string | undefined;
    }
    export namespace DescribeThemePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThemePermissionsRequest) => any;
    }
    export interface DescribeThemePermissionsResponse {
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the theme.</p>
                */
            ThemeArn?: string;
            /**
                * <p>A list of resource permissions set on the theme. </p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeThemePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThemePermissionsResponse) => any;
    }
    export interface DescribeUserRequest {
            /**
                * <p>The name of the user that you want to describe.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace. Currently, you should set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
    }
    export namespace DescribeUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserRequest) => any;
    }
    export enum IdentityType {
            IAM = "IAM",
            QUICKSIGHT = "QUICKSIGHT"
    }
    export enum UserRole {
            ADMIN = "ADMIN",
            AUTHOR = "AUTHOR",
            READER = "READER",
            RESTRICTED_AUTHOR = "RESTRICTED_AUTHOR",
            RESTRICTED_READER = "RESTRICTED_READER"
    }
    /**
        * <p>A registered user of Amazon QuickSight. </p>
        */
    export interface User {
            /**
                * <p>The Amazon Resource Name (ARN) for the user.</p>
                */
            Arn?: string;
            /**
                * <p>The user's user name. In the output, the value for <code>UserName</code> is
                *                 <code>N/A</code> when the value for <code>IdentityType</code> is <code>IAM</code>
                *             and the corresponding IAM user is deleted.</p>
                */
            UserName?: string;
            /**
                * <p>The user's email address.</p>
                */
            Email?: string;
            /**
                * <p>The Amazon QuickSight role for the user. The user role can be one of the
                *             following:.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>READER</code>: A user who has read-only access to dashboards.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>AUTHOR</code>: A user who can create data sources, datasets, analyses,
                *                     and dashboards.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ADMIN</code>: A user who is an author, who can also manage Amazon
                *                     Amazon QuickSight settings.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RESTRICTED_READER</code>: This role isn't currently available for
                *                     use.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for
                *                     use.</p>
                *             </li>
                *          </ul>
                */
            Role?: UserRole | string;
            /**
                * <p>The type of identity authentication used by the user.</p>
                */
            IdentityType?: IdentityType | string;
            /**
                * <p>The active status of user. When you create an Amazon QuickSight user that’s not an IAM
                *             user or an Active Directory user, that user is inactive until they sign in and provide a
                *             password.</p>
                */
            Active?: boolean;
            /**
                * <p>The principal ID of the user.</p>
                */
            PrincipalId?: string;
            /**
                * <p>The custom permissions profile associated with this user.</p>
                */
            CustomPermissionsName?: string;
            /**
                * <p>The type of supported external login provider that provides identity to let the user
                *             federate into Amazon QuickSight with an associated IAM role. The type can be one of the following.</p>
                *         <ul>
                *             <li>
                *                     <p>
                *                   <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com.</p>
                *                 </li>
                *             <li>
                *                     <p>
                *                   <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider.</p>
                *                 </li>
                *          </ul>
                */
            ExternalLoginFederationProviderType?: string;
            /**
                * <p>The URL of the external login provider.</p>
                */
            ExternalLoginFederationProviderUrl?: string;
            /**
                * <p>The identity ID for the user in the external login provider.</p>
                */
            ExternalLoginId?: string;
    }
    export namespace User {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: User) => any;
    }
    export interface DescribeUserResponse {
            /**
                * <p>The user name.</p>
                */
            User?: User;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace DescribeUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserResponse) => any;
    }
    /**
        * <p>The domain specified isn't on the allow list. All domains for embedded dashboards must be
        * 			added to the approved list by an Amazon QuickSight admin.</p>
        */
    export class DomainNotWhitelistedException extends __BaseException {
            readonly name: "DomainNotWhitelistedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DomainNotWhitelistedException, __BaseException>);
    }
    export enum EmbeddingIdentityType {
            ANONYMOUS = "ANONYMOUS",
            IAM = "IAM",
            QUICKSIGHT = "QUICKSIGHT"
    }
    export enum FolderFilterAttribute {
            PARENT_FOLDER_ARN = "PARENT_FOLDER_ARN"
    }
    /**
        * <p>An object that consists of a member Amazon Resource Name (ARN) and a member ID.</p>
        */
    export interface MemberIdArnPair {
            /**
                * <p>The ID of the member.</p>
                */
            MemberId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the member.</p>
                */
            MemberArn?: string;
    }
    export namespace MemberIdArnPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MemberIdArnPair) => any;
    }
    /**
        * <p>A filter to use to search a Amazon QuickSight folder.</p>
        */
    export interface FolderSearchFilter {
            /**
                * <p>The comparison operator that you want to use in the filter. For example, <code>"Operator": "StringEquals"</code>.</p>
                */
            Operator?: FilterOperator | string;
            /**
                * <p>The name of a value that you want to use in the filter. For example, <code>"Name": "PARENT_FOLDER_ARN"</code>.</p>
                */
            Name?: FolderFilterAttribute | string;
            /**
                * <p>The value of the named item (in this example, <code>PARENT_FOLDER_ARN</code>), that you want to use as a filter. For example, <code>"Value": "arn:aws:quicksight:us-east-1:1:folder/folderId"</code>.</p>
                */
            Value?: string;
    }
    export namespace FolderSearchFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FolderSearchFilter) => any;
    }
    /**
        * <p>A summary of information about an existing Amazon QuickSight folder. </p>
        */
    export interface FolderSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the folder.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId?: string;
            /**
                * <p>The display name of the folder.</p>
                */
            Name?: string;
            /**
                * <p>The type of folder.</p>
                */
            FolderType?: FolderType | string;
            /**
                * <p>The time that the folder was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The time that the folder was last updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace FolderSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FolderSummary) => any;
    }
    /**
        * <p>The key-value pair used for the row-level security tags feature.</p>
        */
    export interface SessionTag {
            /**
                * <p>The key for the tag.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value that you want to assign the tag.</p>
                */
            Value: string | undefined;
    }
    export namespace SessionTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SessionTag) => any;
    }
    export interface GenerateEmbedUrlForAnonymousUserRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
                */
            SessionLifetimeInMinutes?: number;
            /**
                * <p>The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p>
                *         <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>
                */
            SessionTags?: SessionTag[];
            /**
                * <p>The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.</p>
                */
            AuthorizedResourceArns: string[] | undefined;
            /**
                * <p>The configuration of the experience that you are embedding.</p>
                */
            ExperienceConfiguration: AnonymousUserEmbeddingExperienceConfiguration | undefined;
            /**
                * <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console and instead allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
                *          <p>To include a subdomain, use <code>*</code> to include all subdomains under a specific domain to the allow list. For example, <code>https://*.sapp.amazon.com,</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
                */
            AllowedDomains?: string[];
    }
    export namespace GenerateEmbedUrlForAnonymousUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateEmbedUrlForAnonymousUserRequest) => any;
    }
    export interface GenerateEmbedUrlForAnonymousUserResponse {
            /**
                * <p>The embed URL for the dashboard.</p>
                */
            EmbedUrl: string | undefined;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status: number | undefined;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId: string | undefined;
    }
    export namespace GenerateEmbedUrlForAnonymousUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateEmbedUrlForAnonymousUserResponse) => any;
    }
    /**
        * <p>The number of minutes specified for the lifetime of a session isn't valid. The session
        * 			lifetime must be 15-600 minutes.</p>
        */
    export class SessionLifetimeInMinutesInvalidException extends __BaseException {
            readonly name: "SessionLifetimeInMinutesInvalidException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SessionLifetimeInMinutesInvalidException, __BaseException>);
    }
    /**
        * <p>This error indicates that you are calling an embedding operation in Amazon QuickSight
        * 			without the required pricing plan on your Amazon Web Services account. Before you can use embedding
        * 			for anonymous users, a QuickSight administrator needs to add capacity pricing to Amazon QuickSight. You
        * 		    can do this on the <b>Manage Amazon QuickSight</b> page. </p>
        *         <p>After capacity pricing is added, you can use the
        *             <code>
        *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GetDashboardEmbedUrl.html">GetDashboardEmbedUrl</a>
        *             </code> API operation with the
        *             <code>--identity-type ANONYMOUS</code> option.</p>
        */
    export class UnsupportedPricingPlanException extends __BaseException {
            readonly name: "UnsupportedPricingPlanException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedPricingPlanException, __BaseException>);
    }
    /**
        * <p>Information about the dashboard you want to embed.</p>
        */
    export interface RegisteredUserDashboardEmbeddingConfiguration {
            /**
                * <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard if the user has permissions to view it.</p>
                *          <p>If the user does not have permission to view this dashboard, they see a permissions error message.</p>
                */
            InitialDashboardId: string | undefined;
    }
    export namespace RegisteredUserDashboardEmbeddingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisteredUserDashboardEmbeddingConfiguration) => any;
    }
    /**
        * <p>Information about the Q search bar embedding experience.</p>
        */
    export interface RegisteredUserQSearchBarEmbeddingConfiguration {
            /**
                * <p>The ID of the Q topic that you want to make the starting topic in the Q search bar.
                *       You can find a topic ID by navigating to the Topics pane in the Amazon QuickSight application and opening
                *       a topic. The ID is in the URL for the topic that you open.</p>
                *          <p>If you don't specify an initial topic, a list of all shared topics is shown in the Q bar
                *       for your readers. When you select an initial topic, you can specify whether or not readers
                *       are allowed to select other topics from the available ones in the list.</p>
                */
            InitialTopicId?: string;
    }
    export namespace RegisteredUserQSearchBarEmbeddingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisteredUserQSearchBarEmbeddingConfiguration) => any;
    }
    /**
        * <p>Information about the Amazon QuickSight console that you want to embed.</p>
        */
    export interface RegisteredUserQuickSightConsoleEmbeddingConfiguration {
            /**
                * <p>The initial URL path for the Amazon QuickSight console. <code>InitialPath</code> is required.</p>
                *          <p>The entry point URL is constrained to the following paths:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>/start</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/start/analyses</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/start/dashboards</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/start/favorites</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/dashboards/DashboardId</code>. <i>DashboardId</i> is the actual ID key from the Amazon QuickSight console URL of the dashboard.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/analyses/AnalysisId</code>. <i>AnalysisId</i> is the actual ID key from the Amazon QuickSight console URL of the analysis.</p>
                *             </li>
                *          </ul>
                */
            InitialPath?: string;
    }
    export namespace RegisteredUserQuickSightConsoleEmbeddingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisteredUserQuickSightConsoleEmbeddingConfiguration) => any;
    }
    /**
        * <p>The type of experience you want to embed. For registered users, you can embed Amazon QuickSight dashboards or the Amazon QuickSight console.</p>
        *          <note>
        *             <p>Exactly one of the experience configurations is required. You can choose
        *                     <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more
        *                 than one experience configuration.</p>
        *          </note>
        */
    export interface RegisteredUserEmbeddingExperienceConfiguration {
            /**
                * <p>The configuration details for providing a dashboard embedding experience.</p>
                */
            Dashboard?: RegisteredUserDashboardEmbeddingConfiguration;
            /**
                * <p>The configuration details for providing each Amazon QuickSight console embedding experience. This can be used along with custom permissions to restrict access to certain features. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a> in the <i>Amazon QuickSight User
                *             Guide</i>.</p>
                *         <p>Use <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForRegisteredUser.html">GenerateEmbedUrlForRegisteredUser</a>
                *             </code>
                *             where
                *             you want to provide an authoring portal that allows users to create data sources,
                *             datasets, analyses, and dashboards. The users who accesses an embedded Amazon QuickSight console
                *             needs to belong to the author or admin security cohort. If you want to restrict permissions
                *             to some of these features, add a custom permissions profile to the user with the
                *             <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a>
                *             </code> API operation. Use the <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RegisterUser.html">RegisterUser</a>
                *             </code> API operation to add a new user with a custom permission profile attached. For more
                *             information, see the following sections in the <i>Amazon QuickSight User
                *             Guide</i>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics-full-console-for-authenticated-users.html">Embedding the Full Functionality of the Amazon QuickSight Console for Authenticated Users</a>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
                */
            QuickSightConsole?: RegisteredUserQuickSightConsoleEmbeddingConfiguration;
            /**
                * <p>The configuration details for embedding the Q search bar.</p>
                *          <p>For more information about embedding the Q search bar, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedding-overview.html">Embedding Overview</a> in
                *             the <i>Amazon QuickSight User Guide</i>.</p>
                */
            QSearchBar?: RegisteredUserQSearchBarEmbeddingConfiguration;
    }
    export namespace RegisteredUserEmbeddingExperienceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisteredUserEmbeddingExperienceConfiguration) => any;
    }
    export interface GenerateEmbedUrlForRegisteredUserRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
                */
            SessionLifetimeInMinutes?: number;
            /**
                * <p>The Amazon Resource Name for the registered user.</p>
                */
            UserArn: string | undefined;
            /**
                * <p>The experience you are embedding. For registered users, you can embed Amazon QuickSight dashboards or the entire Amazon QuickSight console.</p>
                */
            ExperienceConfiguration: RegisteredUserEmbeddingExperienceConfiguration | undefined;
            /**
                * <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console and instead allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
                *          <p>To include a subdomain, use <code>*</code> to include all subdomains under a specific domain to the allow list. For example, <code>https://*.sapp.amazon.com,</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
                */
            AllowedDomains?: string[];
    }
    export namespace GenerateEmbedUrlForRegisteredUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateEmbedUrlForRegisteredUserRequest) => any;
    }
    export interface GenerateEmbedUrlForRegisteredUserResponse {
            /**
                * <p>The embed URL for the Amazon QuickSight dashboard or console.</p>
                */
            EmbedUrl: string | undefined;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status: number | undefined;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId: string | undefined;
    }
    export namespace GenerateEmbedUrlForRegisteredUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateEmbedUrlForRegisteredUserResponse) => any;
    }
    /**
        * <p>The user with the provided name isn't found. This error can happen in any operation
        * 			that requires finding a user based on a provided user name, such as
        * 				<code>DeleteUser</code>, <code>DescribeUser</code>, and so on.</p>
        */
    export class QuickSightUserNotFoundException extends __BaseException {
            readonly name: "QuickSightUserNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<QuickSightUserNotFoundException, __BaseException>);
    }
    export interface GetDashboardEmbedUrlRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard, also added to the Identity and Access Management (IAM)
                *             policy.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The authentication method that the user uses to sign in.</p>
                */
            IdentityType: EmbeddingIdentityType | string | undefined;
            /**
                * <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
                */
            SessionLifetimeInMinutes?: number;
            /**
                * <p>Remove the undo/redo button on the embedded dashboard. The default is FALSE, which enables
                * 			the undo/redo button.</p>
                */
            UndoRedoDisabled?: boolean;
            /**
                * <p>Remove the reset button on the embedded dashboard. The default is FALSE, which enables the
                * 			reset button.</p>
                */
            ResetDisabled?: boolean;
            /**
                * <p>Adds persistence of state for the user session in an embedded dashboard. Persistence
                *             applies to the sheet and the parameter settings. These are control settings that the
                *             dashboard subscriber (Amazon QuickSight reader) chooses while viewing the dashboard. If this is
                *             set to <code>TRUE</code>, the settings are the same when the subscriber reopens the same
                *             dashboard URL. The state is stored in Amazon QuickSight, not in a browser cookie. If this is
                *             set to FALSE, the state of the user session is not persisted. The default is
                *                 <code>FALSE</code>.</p>
                */
            StatePersistenceEnabled?: boolean;
            /**
                * <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type.
                * 			You can use this for any Amazon QuickSight users in your account (readers, authors, or
                * 			admins) authenticated as one of the following:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>Active Directory (AD) users or group members</p>
                * 			         </li>
                *             <li>
                * 				           <p>Invited nonfederated users</p>
                * 			         </li>
                *             <li>
                * 				           <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using
                * 					SAML, OpenID Connect, or IAM federation.</p>
                * 			         </li>
                *          </ul>
                *          <p>Omit this parameter for users in the third group – IAM users and IAM
                *             role-based sessions.</p>
                */
            UserArn?: string;
            /**
                * <p>The Amazon QuickSight namespace that contains the dashboard IDs in this request.
                *     	   If you're not using a custom namespace, set <code>Namespace = default</code>.</p>
                */
            Namespace?: string;
            /**
                * <p>A list of one or more dashboard IDs that you want anonymous users to have tempporary access to. Currently, the <code>IdentityType</code> parameter must be set to <code>ANONYMOUS</code> because other identity types authenticate as Amazon QuickSight or IAM users. For example, if you set "<code>--dashboard-id dash_id1 --dashboard-id dash_id2 dash_id3 identity-type ANONYMOUS</code>", the session can access all three dashboards.</p>
                */
            AdditionalDashboardIds?: string[];
    }
    export namespace GetDashboardEmbedUrlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDashboardEmbedUrlRequest) => any;
    }
    /**
        * <p>Output returned from the <code>GetDashboardEmbedUrl</code> operation.</p>
        */
    export interface GetDashboardEmbedUrlResponse {
            /**
                * <p>A single-use URL that you can put into your server-side webpage to embed your
                * 			dashboard. This URL is valid for 5 minutes. The API operation provides the URL with an
                * 			<code>auth_code</code> value that enables one (and only one) sign-on to a user session
                * 			that is valid for 10 hours. </p>
                */
            EmbedUrl?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace GetDashboardEmbedUrlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDashboardEmbedUrlResponse) => any;
    }
    /**
        * <p>The identity type specified isn't supported. Supported identity types include
        * 				<code>IAM</code> and <code>QUICKSIGHT</code>.</p>
        */
    export class IdentityTypeNotSupportedException extends __BaseException {
            readonly name: "IdentityTypeNotSupportedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The Amazon Web Services request ID for this request.</p>
                */
            RequestId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IdentityTypeNotSupportedException, __BaseException>);
    }
    export interface GetSessionEmbedUrlRequest {
            /**
                * <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The URL you use to access the embedded session. The entry point URL is constrained to
                *           the following paths:</p>
                *          <ul>
                *             <li>
                *                 <p>
                *                   <code>/start</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>/start/analyses</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>/start/dashboards</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>/start/favorites</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>/dashboards/<i>DashboardId</i>
                *                   </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>/analyses/<i>AnalysisId</i>
                *                   </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p>
                *             </li>
                *          </ul>
                */
            EntryPoint?: string;
            /**
                * <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
                */
            SessionLifetimeInMinutes?: number;
            /**
                * <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type.
                * 			You can use this for any type of Amazon QuickSight users in your account (readers, authors, or
                * 			admins). They need to be authenticated as one of the following:</p>
                * 		       <ol>
                *             <li>
                * 				           <p>Active Directory (AD) users or group members</p>
                * 			         </li>
                *             <li>
                * 				           <p>Invited nonfederated users</p>
                * 			         </li>
                *             <li>
                * 				           <p>Identity and Access Management (IAM) users and IAM role-based sessions authenticated
                *                     through Federated Single Sign-On using SAML, OpenID Connect, or IAM
                *                     federation</p>
                * 			         </li>
                *          </ol>
                *          <p>Omit this parameter for users in the third group, IAM users and IAM role-based
                *             sessions.</p>
                */
            UserArn?: string;
    }
    export namespace GetSessionEmbedUrlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSessionEmbedUrlRequest) => any;
    }
    export interface GetSessionEmbedUrlResponse {
            /**
                * <p>A single-use URL that you can put into your server-side web page to embed your
                * 			Amazon QuickSight session. This URL is valid for 5 minutes. The API operation provides the URL with an
                * 			<code>auth_code</code> value that enables one (and only one) sign-on to a user session
                * 			that is valid for 10 hours. </p>
                */
            EmbedUrl?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace GetSessionEmbedUrlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSessionEmbedUrlResponse) => any;
    }
    export enum GroupFilterAttribute {
            GROUP_NAME = "GROUP_NAME"
    }
    export enum GroupFilterOperator {
            StartsWith = "StartsWith"
    }
    /**
        * <p>A <code>GroupSearchFilter</code> object that you want to apply to your search.</p>
        */
    export interface GroupSearchFilter {
            /**
                * <p>The comparison operator that you want to use as a filter, for example <code>"Operator":
                *                 "StartsWith"</code>. Currently, the only supported operator is
                *                 <code>StartsWith</code>.</p>
                */
            Operator: GroupFilterOperator | string | undefined;
            /**
                * <p>The name of the value that you want to use as a filter, for example <code>"Name":
                *                 "GROUP_NAME"</code>. Currently, the only supported name is
                *             <code>GROUP_NAME</code>.</p>
                */
            Name: GroupFilterAttribute | string | undefined;
            /**
                * <p>The value of the named item, in this case <code>GROUP_NAME</code>, that you want to use as a filter.</p>
                */
            Value: string | undefined;
    }
    export namespace GroupSearchFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupSearchFilter) => any;
    }
    /**
        * <p>IAM policy assignment summary.</p>
        */
    export interface IAMPolicyAssignmentSummary {
            /**
                * <p>Assignment name.</p>
                */
            AssignmentName?: string;
            /**
                * <p>Assignment status.</p>
                */
            AssignmentStatus?: AssignmentStatus | string;
    }
    export namespace IAMPolicyAssignmentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IAMPolicyAssignmentSummary) => any;
    }
    export interface ListAnalysesRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the analyses.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListAnalysesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnalysesRequest) => any;
    }
    export interface ListAnalysesResponse {
            /**
                * <p>Metadata describing each of the analyses that are listed.</p>
                */
            AnalysisSummaryList?: AnalysisSummary[];
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListAnalysesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnalysesResponse) => any;
    }
    export interface ListDashboardsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboards that you're
                *             listing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDashboardsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDashboardsRequest) => any;
    }
    export interface ListDashboardsResponse {
            /**
                * <p>A structure that contains all of the dashboards in your Amazon Web Services account. This structure
                *             provides basic information about the dashboards.</p>
                */
            DashboardSummaryList?: DashboardSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListDashboardsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDashboardsResponse) => any;
    }
    export interface ListDashboardVersionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboard that you're listing versions
                *             for.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDashboardVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDashboardVersionsRequest) => any;
    }
    export interface ListDashboardVersionsResponse {
            /**
                * <p>A structure that contains information about each version of the dashboard.</p>
                */
            DashboardVersionSummaryList?: DashboardVersionSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListDashboardVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDashboardVersionsResponse) => any;
    }
    export interface ListDataSetsRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDataSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSetsRequest) => any;
    }
    export interface ListDataSetsResponse {
            /**
                * <p>The list of dataset summaries.</p>
                */
            DataSetSummaries?: DataSetSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListDataSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSetsResponse) => any;
    }
    export interface ListDataSourcesRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDataSourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourcesRequest) => any;
    }
    export interface ListDataSourcesResponse {
            /**
                * <p>A list of data sources.</p>
                */
            DataSources?: DataSource[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListDataSourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourcesResponse) => any;
    }
    export interface ListFolderMembersRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFolderMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFolderMembersRequest) => any;
    }
    export interface ListFolderMembersResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>A structure that contains all of the folder members (dashboards, analyses, and datasets) in the folder.</p>
                */
            FolderMemberList?: MemberIdArnPair[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListFolderMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFolderMembersResponse) => any;
    }
    export interface ListFoldersRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFoldersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFoldersRequest) => any;
    }
    export interface ListFoldersResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>A structure that contains all of the folders in the Amazon Web Services account. This structure provides basic information about the folders.</p>
                */
            FolderSummaryList?: FolderSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListFoldersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFoldersResponse) => any;
    }
    export interface ListGroupMembershipsRequest {
            /**
                * <p>The name of the group that you want to see a membership list of.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return from this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace of the group that you want a list of users from.</p>
                */
            Namespace: string | undefined;
    }
    export namespace ListGroupMembershipsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupMembershipsRequest) => any;
    }
    export interface ListGroupMembershipsResponse {
            /**
                * <p>The list of the members of the group.</p>
                */
            GroupMemberList?: GroupMember[];
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListGroupMembershipsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupMembershipsResponse) => any;
    }
    export interface ListGroupsRequest {
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The namespace that you want a list of groups from.</p>
                */
            Namespace: string | undefined;
    }
    export namespace ListGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsRequest) => any;
    }
    export interface ListGroupsResponse {
            /**
                * <p>The list of the groups.</p>
                */
            GroupList?: Group[];
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsResponse) => any;
    }
    export interface ListIAMPolicyAssignmentsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains these IAM policy assignments.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The status of the assignments.</p>
                */
            AssignmentStatus?: AssignmentStatus | string;
            /**
                * <p>The namespace for the assignments.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListIAMPolicyAssignmentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIAMPolicyAssignmentsRequest) => any;
    }
    export interface ListIAMPolicyAssignmentsResponse {
            /**
                * <p>Information describing the IAM policy assignments.</p>
                */
            IAMPolicyAssignments?: IAMPolicyAssignmentSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListIAMPolicyAssignmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIAMPolicyAssignmentsResponse) => any;
    }
    export interface ListIAMPolicyAssignmentsForUserRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the assignments.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The name of the user.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The namespace of the assignment.</p>
                */
            Namespace: string | undefined;
    }
    export namespace ListIAMPolicyAssignmentsForUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIAMPolicyAssignmentsForUserRequest) => any;
    }
    export interface ListIAMPolicyAssignmentsForUserResponse {
            /**
                * <p>The active assignments for this user.</p>
                */
            ActiveAssignments?: ActiveIAMPolicyAssignment[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListIAMPolicyAssignmentsForUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIAMPolicyAssignmentsForUserResponse) => any;
    }
    export interface ListIngestionsRequest {
            /**
                * <p>The ID of the dataset used in the ingestion.</p>
                */
            DataSetId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListIngestionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIngestionsRequest) => any;
    }
    export interface ListIngestionsResponse {
            /**
                * <p>A list of the ingestions.</p>
                */
            Ingestions?: Ingestion[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListIngestionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIngestionsResponse) => any;
    }
    export interface ListNamespacesRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the Amazon QuickSight namespaces that you want to list.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListNamespacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNamespacesRequest) => any;
    }
    export interface ListNamespacesResponse {
            /**
                * <p>The information about the namespaces in this Amazon Web Services account. The response includes
                *         the namespace ARN, name, Amazon Web Services Region, notification email address, creation status, and
                *         identity store.</p>
                */
            Namespaces?: NamespaceInfoV2[];
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListNamespacesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNamespacesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want a list of tags for.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the
                * 			resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTemplateAliasesRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template aliases that you're listing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTemplateAliasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplateAliasesRequest) => any;
    }
    export interface ListTemplateAliasesResponse {
            /**
                * <p>A structure containing the list of the template's aliases.</p>
                */
            TemplateAliasList?: TemplateAlias[];
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
    }
    export namespace ListTemplateAliasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplateAliasesResponse) => any;
    }
    export interface ListTemplatesRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the templates that you're listing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTemplatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplatesRequest) => any;
    }
    /**
        * <p>The template summary.</p>
        */
    export interface TemplateSummary {
            /**
                * <p>A summary of a template.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the template. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            TemplateId?: string;
            /**
                * <p>A display name for the template.</p>
                */
            Name?: string;
            /**
                * <p>A structure containing a list of version numbers for the template summary.</p>
                */
            LatestVersionNumber?: number;
            /**
                * <p>The last time that this template was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The last time that this template was updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace TemplateSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateSummary) => any;
    }
    export interface ListTemplatesResponse {
            /**
                * <p>A structure containing information about the templates in the list.</p>
                */
            TemplateSummaryList?: TemplateSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListTemplatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplatesResponse) => any;
    }
    export interface ListTemplateVersionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the templates that you're listing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTemplateVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplateVersionsRequest) => any;
    }
    /**
        * <p>The template version.</p>
        */
    export interface TemplateVersionSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the template version.</p>
                */
            Arn?: string;
            /**
                * <p>The version number of the template version.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The time that this template version was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The status of the template version.</p>
                */
            Status?: ResourceStatus | string;
            /**
                * <p>The description of the template version.</p>
                */
            Description?: string;
    }
    export namespace TemplateVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateVersionSummary) => any;
    }
    export interface ListTemplateVersionsResponse {
            /**
                * <p>A structure containing a list of all the versions of the specified template.</p>
                */
            TemplateVersionSummaryList?: TemplateVersionSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListTemplateVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplateVersionsResponse) => any;
    }
    export interface ListThemeAliasesRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme aliases that you're listing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListThemeAliasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThemeAliasesRequest) => any;
    }
    export interface ListThemeAliasesResponse {
            /**
                * <p>A structure containing the list of the theme's aliases.</p>
                */
            ThemeAliasList?: ThemeAlias[];
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
    }
    export namespace ListThemeAliasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThemeAliasesResponse) => any;
    }
    export interface ListThemesRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the themes that you're listing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The type of themes that you want to list. Valid options include the following:</p>
                *     	    <ul>
                *             <li>
                *                <p>
                *                   <code>ALL (default)</code>- Display all existing themes.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CUSTOM</code> - Display only the themes created by people using Amazon QuickSight.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>QUICKSIGHT</code> - Display only the starting themes defined by Amazon QuickSight.</p>
                *             </li>
                *          </ul>
                */
            Type?: ThemeType | string;
    }
    export namespace ListThemesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThemesRequest) => any;
    }
    /**
        * <p>The theme summary.</p>
        */
    export interface ThemeSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>the display name for the theme.</p>
                */
            Name?: string;
            /**
                * <p>The ID of the theme. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            ThemeId?: string;
            /**
                * <p>The latest version number for the theme. </p>
                */
            LatestVersionNumber?: number;
            /**
                * <p>The date and time that this theme was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The last date and time that this theme was updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace ThemeSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThemeSummary) => any;
    }
    export interface ListThemesResponse {
            /**
                * <p>Information about the themes in the list.</p>
                */
            ThemeSummaryList?: ThemeSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListThemesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThemesResponse) => any;
    }
    export interface ListThemeVersionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the themes that you're listing.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListThemeVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThemeVersionsRequest) => any;
    }
    /**
        * <p>The theme version.</p>
        */
    export interface ThemeVersionSummary {
            /**
                * <p>The version number of the theme version.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the theme version.</p>
                */
            Arn?: string;
            /**
                * <p>The description of the theme version.</p>
                */
            Description?: string;
            /**
                * <p>The date and time that this theme version was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The status of the theme version.</p>
                */
            Status?: ResourceStatus | string;
    }
    export namespace ThemeVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThemeVersionSummary) => any;
    }
    export interface ListThemeVersionsResponse {
            /**
                * <p>A structure containing a list of all the versions of the specified theme.</p>
                */
            ThemeVersionSummaryList?: ThemeVersionSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace ListThemeVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThemeVersionsResponse) => any;
    }
    export interface ListUserGroupsRequest {
            /**
                * <p>The Amazon QuickSight user name that you want to list group memberships for.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The Amazon Web Services account ID that the user is in. Currently, you use the ID for the Amazon Web Services account
                * 			that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace. Currently, you should set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return from this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListUserGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserGroupsRequest) => any;
    }
    export interface ListUserGroupsResponse {
            /**
                * <p>The list of groups the user is a member of.</p>
                */
            GroupList?: Group[];
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListUserGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserGroupsResponse) => any;
    }
    export interface ListUsersRequest {
            /**
                * <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return from this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The namespace. Currently, you should set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
    }
    export namespace ListUsersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersRequest) => any;
    }
    export interface ListUsersResponse {
            /**
                * <p>The list of users.</p>
                */
            UserList?: User[];
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace ListUsersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersResponse) => any;
    }
    export interface RegisterUserRequest {
            /**
                * <p>Amazon QuickSight supports several ways of managing the identity of users. This
                * 			parameter accepts two values:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>
                *                   <code>IAM</code>: A user whose identity maps to an existing IAM user or role.
                * 				</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by
                * 					Amazon QuickSight. </p>
                * 			         </li>
                *          </ul>
                */
            IdentityType: IdentityType | string | undefined;
            /**
                * <p>The email address of the user that you want to register.</p>
                */
            Email: string | undefined;
            /**
                * <p>The Amazon QuickSight role for the user. The user role can be one of the
                * 			following:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>
                *                   <code>READER</code>: A user who has read-only access to dashboards.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and
                * 					dashboards.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight
                * 					settings.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>RESTRICTED_READER</code>: This role isn't currently available for
                * 					use.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for
                * 					use.</p>
                * 			         </li>
                *          </ul>
                */
            UserRole: UserRole | string | undefined;
            /**
                * <p>The ARN of the IAM user or role that you are registering with Amazon QuickSight. </p>
                */
            IamArn?: string;
            /**
                * <p>You need to use this parameter only when you register one or more users using an assumed
                * 			IAM role. You don't need to provide the session name for other scenarios, for example when
                * 			you are registering an IAM user or an Amazon QuickSight user. You can register multiple
                * 			users using the same IAM role if each user has a different session name. For more
                * 			information on assuming IAM roles, see <a href="https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html">
                *                <code>assume-role</code>
                *             </a> in the <i>CLI Reference.</i>
                *          </p>
                */
            SessionName?: string;
            /**
                * <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace. Currently, you should set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The Amazon QuickSight user name that you want to create for the user you are
                * 			registering.</p>
                */
            UserName?: string;
            /**
                * <p>(Enterprise edition only) The name of the custom permissions profile that you want to
                *             assign to this user. Customized permissions allows you to control a user's access by
                *             restricting access the following operations:</p>
                *         <ul>
                *             <li>
                *                 <p>Create and update data sources</p>
                *             </li>
                *             <li>
                *                 <p>Create and update datasets</p>
                *             </li>
                *             <li>
                *                 <p>Create and update email reports</p>
                *             </li>
                *             <li>
                *                 <p>Subscribe to email reports</p>
                *             </li>
                *          </ul>
                *         <p>To add custom permissions to an existing user, use <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a>
                *             </code> instead.</p>
                *         <p>A set of custom permissions includes any combination of these restrictions. Currently,
                *             you need to create the profile names for custom permission sets by using the Amazon QuickSight
                *             console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of
                *             permissions to a Amazon QuickSight user. </p>
                *         <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they
                *             override the permissions typically granted by assigning Amazon QuickSight users to one of the
                *             default security cohorts in Amazon QuickSight (admin, author, reader).</p>
                *         <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
                */
            CustomPermissionsName?: string;
            /**
                * <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p>
                *             </li>
                *          </ul>
                */
            ExternalLoginFederationProviderType?: string;
            /**
                * <p>The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate
                *          into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should
                *          only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.</p>
                */
            CustomFederationProviderUrl?: string;
            /**
                * <p>The identity ID for a user in the external login provider.</p>
                */
            ExternalLoginId?: string;
    }
    export namespace RegisterUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterUserRequest) => any;
    }
    export interface RegisterUserResponse {
            /**
                * <p>The user's user name.</p>
                */
            User?: User;
            /**
                * <p>The URL the user visits to complete registration and provide a password. This is
                * 			returned only for users with an identity type of <code>QUICKSIGHT</code>.</p>
                */
            UserInvitationUrl?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace RegisterUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterUserResponse) => any;
    }
    export interface RestoreAnalysisRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the analysis.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the analysis that you're restoring.</p>
                */
            AnalysisId: string | undefined;
    }
    export namespace RestoreAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreAnalysisRequest) => any;
    }
    export interface RestoreAnalysisResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the analysis that you're restoring.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the analysis that you're restoring.
                *         </p>
                */
            AnalysisId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace RestoreAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreAnalysisResponse) => any;
    }
    export interface SearchAnalysesRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the analyses that you're searching
                *             for.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The structure for the search filters that you want to apply to your search. </p>
                */
            Filters: AnalysisSearchFilter[] | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace SearchAnalysesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchAnalysesRequest) => any;
    }
    export interface SearchAnalysesResponse {
            /**
                * <p>Metadata describing the analyses that you searched for.</p>
                */
            AnalysisSummaryList?: AnalysisSummary[];
            /**
                * <p>A pagination token that can be used in a subsequent request.
                *             </p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace SearchAnalysesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchAnalysesResponse) => any;
    }
    export interface SearchDashboardsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the user whose dashboards you're searching
                *             for. </p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The filters to apply to the search. Currently, you can search only by user name, for
                *             example, <code>"Filters": [ { "Name": "QUICKSIGHT_USER", "Operator": "StringEquals",
                *             "Value": "arn:aws:quicksight:us-east-1:1:user/default/UserName1" } ]</code>
                *          </p>
                */
            Filters: DashboardSearchFilter[] | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace SearchDashboardsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchDashboardsRequest) => any;
    }
    export interface SearchDashboardsResponse {
            /**
                * <p>The list of dashboards owned by the user specified in <code>Filters</code> in your
                *             request.</p>
                */
            DashboardSummaryList?: DashboardSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace SearchDashboardsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchDashboardsResponse) => any;
    }
    export interface SearchFoldersRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The filters to apply to the search. Currently, you can search only by the parent folder ARN. For example, <code>"Filters": [ { "Name": "PARENT_FOLDER_ARN", "Operator": "StringEquals", "Value": "arn:aws:quicksight:us-east-1:1:folder/folderId" } ]</code>.</p>
                */
            Filters: FolderSearchFilter[] | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request.</p>
                */
            MaxResults?: number;
    }
    export namespace SearchFoldersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchFoldersRequest) => any;
    }
    export interface SearchFoldersResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>A structure that contains all of the folders in the Amazon Web Services account. This structure provides basic information about the folders.</p>
                */
            FolderSummaryList?: FolderSummary[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace SearchFoldersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchFoldersResponse) => any;
    }
    export interface SearchGroupsRequest {
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                *           Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return from this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The namespace that you want to search.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The structure for the search filters that you want to apply to your search.</p>
                */
            Filters: GroupSearchFilter[] | undefined;
    }
    export namespace SearchGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchGroupsRequest) => any;
    }
    export interface SearchGroupsResponse {
            /**
                * <p>A list of groups in a specified namespace that match the filters you set in your <code>SearchGroups</code> request.</p>
                */
            GroupList?: Group[];
            /**
                * <p>A pagination token that can be used in a subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace SearchGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchGroupsResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to tag.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to untag.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The keys of the key-value pairs for the resource tag or tags assigned to the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateAccountCustomizationRequest {
            /**
                * <p>The ID for the Amazon Web Services account that you want to update Amazon QuickSight customizations
                *             for.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace that you want to update Amazon QuickSight customizations for.</p>
                */
            Namespace?: string;
            /**
                * <p>The Amazon QuickSight customizations you're updating in the current Amazon Web Services Region. </p>
                */
            AccountCustomization: AccountCustomization | undefined;
    }
    export namespace UpdateAccountCustomizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccountCustomizationRequest) => any;
    }
    export interface UpdateAccountCustomizationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) for the updated customization for this Amazon Web Services account.</p>
                */
            Arn?: string;
            /**
                * <p>The ID for the Amazon Web Services account that you want to update Amazon QuickSight customizations
                *             for.</p>
                */
            AwsAccountId?: string;
            /**
                * <p>The namespace associated with the customization that you're updating.</p>
                */
            Namespace?: string;
            /**
                * <p>The Amazon QuickSight customizations you're updating in the current Amazon Web Services Region. </p>
                */
            AccountCustomization?: AccountCustomization;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateAccountCustomizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccountCustomizationResponse) => any;
    }
    export interface UpdateAccountSettingsRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the Amazon QuickSight settings that you want to
                *             list.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The default namespace for this Amazon Web Services account. Currently, the default is
                *                 <code>default</code>. Identity and Access Management (IAM) users that
                *             register for the first time with Amazon QuickSight provide an email address that becomes
                *             associated with the default namespace.
                *         </p>
                */
            DefaultNamespace: string | undefined;
            /**
                * <p>The email address that you want Amazon QuickSight to send notifications to regarding your
                *             Amazon Web Services account or Amazon QuickSight subscription.</p>
                */
            NotificationEmail?: string;
    }
    export namespace UpdateAccountSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccountSettingsRequest) => any;
    }
    export interface UpdateAccountSettingsResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateAccountSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccountSettingsResponse) => any;
    }
    export interface UpdateAnalysisRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the analysis that you're updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the analysis that you're updating. This ID displays in the URL of the
                *             analysis.</p>
                */
            AnalysisId: string | undefined;
            /**
                * <p>A descriptive name for the analysis that you're updating. This name displays for the
                *             analysis in the Amazon QuickSight console.</p>
                */
            Name: string | undefined;
            /**
                * <p>The parameter names and override values that you want to use. An analysis can have
                *             any parameter type, and some parameters might accept multiple values. </p>
                */
            Parameters?: _Parameters;
            /**
                * <p>A source entity to use for the analysis that you're updating. This metadata structure
                *             contains details that describe a source template and one or more datasets.</p>
                */
            SourceEntity: AnalysisSourceEntity | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the theme to apply to the analysis that you're
                *             creating. To see the theme in the Amazon QuickSight console, make sure that you have access to
                *             it.</p>
                */
            ThemeArn?: string;
    }
    export namespace UpdateAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnalysisRequest) => any;
    }
    export interface UpdateAnalysisResponse {
            /**
                * <p>The ARN of the analysis that you're updating.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the analysis.</p>
                */
            AnalysisId?: string;
            /**
                * <p>The update status of the last update that was made to the analysis.</p>
                */
            UpdateStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnalysisResponse) => any;
    }
    export interface UpdateAnalysisPermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the analysis whose permissions you're
                *             updating. You must be using the Amazon Web Services account that the analysis is in.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the analysis whose permissions you're updating. The ID is part of the
                *             analysis URL.</p>
                */
            AnalysisId: string | undefined;
            /**
                * <p>A structure that describes the permissions to add and the principal to add them
                *             to.</p>
                */
            GrantPermissions?: ResourcePermission[];
            /**
                * <p>A structure that describes the permissions to remove and the principal to remove them
                *             from.</p>
                */
            RevokePermissions?: ResourcePermission[];
    }
    export namespace UpdateAnalysisPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnalysisPermissionsRequest) => any;
    }
    export interface UpdateAnalysisPermissionsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the analysis that you updated.</p>
                */
            AnalysisArn?: string;
            /**
                * <p>The ID of the analysis that you updated permissions for.</p>
                */
            AnalysisId?: string;
            /**
                * <p>A structure that describes the principals and the resource-level permissions on an
                *             analysis.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateAnalysisPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnalysisPermissionsResponse) => any;
    }
    export interface UpdateDashboardRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboard that you're
                *             updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The display name of the dashboard.</p>
                */
            Name: string | undefined;
            /**
                * <p>The entity that you are using as a source when you update the dashboard. In
                *             <code>SourceEntity</code>, you specify the type of object you're using as source. You
                *             can only update a dashboard from a template, so you use a <code>SourceTemplate</code>
                *             entity. If you need to update a dashboard from an analysis, first convert the analysis
                *             to a template by using the <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>
                *             </code> API operation. For
                *             <code>SourceTemplate</code>, specify the Amazon Resource Name (ARN) of the source
                *             template. The <code>SourceTemplate</code> ARN can contain any Amazon Web Services account and any
                *             Amazon QuickSight-supported Amazon Web Services Region. </p>
                *         <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> to
                *             list the replacement datasets for the placeholders listed in the original. The schema in
                *             each dataset must match its placeholder. </p>
                */
            SourceEntity: DashboardSourceEntity | undefined;
            /**
                * <p>A structure that contains the parameters of the dashboard. These are parameter
                *             overrides for a dashboard. A dashboard can have any type of parameters, and some
                *             parameters might accept multiple values.</p>
                */
            Parameters?: _Parameters;
            /**
                * <p>A description for the first version of the dashboard being created.</p>
                */
            VersionDescription?: string;
            /**
                * <p>Options for publishing the dashboard when you create it:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>AvailabilityStatus</code> for <code>AdHocFilteringOption</code> - This
                *                     status can be either <code>ENABLED</code> or <code>DISABLED</code>. When this is
                *                     set to <code>DISABLED</code>, Amazon QuickSight disables the left filter pane on the
                *                     published dashboard, which can be used for ad hoc (one-time) filtering. This
                *                     option is <code>ENABLED</code> by default. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>AvailabilityStatus</code> for <code>ExportToCSVOption</code> - This
                *                     status can be either <code>ENABLED</code> or <code>DISABLED</code>. The visual
                *                     option to export data to .CSV format isn't enabled when this is set to
                *                     <code>DISABLED</code>. This option is <code>ENABLED</code> by default. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VisibilityState</code> for <code>SheetControlsOption</code> - This
                *                     visibility state can be either <code>COLLAPSED</code> or <code>EXPANDED</code>.
                *                     This option is <code>COLLAPSED</code> by default. </p>
                *             </li>
                *          </ul>
                */
            DashboardPublishOptions?: DashboardPublishOptions;
            /**
                * <p>The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If
                *             you add a value for this field, it overrides the value that was originally associated
                *             with the entity. The theme ARN must exist in the same Amazon Web Services account where you create the
                *             dashboard.</p>
                */
            ThemeArn?: string;
    }
    export namespace UpdateDashboardRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDashboardRequest) => any;
    }
    export interface UpdateDashboardResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            Arn?: string;
            /**
                * <p>The ARN of the dashboard, including the version number.</p>
                */
            VersionArn?: string;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId?: string;
            /**
                * <p>The creation status of the request.</p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateDashboardResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDashboardResponse) => any;
    }
    export interface UpdateDashboardPermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboard whose permissions you're
                *             updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The permissions that you want to grant on this resource.</p>
                */
            GrantPermissions?: ResourcePermission[];
            /**
                * <p>The permissions that you want to revoke from this resource.</p>
                */
            RevokePermissions?: ResourcePermission[];
            /**
                * <p>Grants link permissions to all users in a defined namespace.</p>
                */
            GrantLinkPermissions?: ResourcePermission[];
            /**
                * <p>Revokes link permissions from all users in a defined namespace.</p>
                */
            RevokeLinkPermissions?: ResourcePermission[];
    }
    export namespace UpdateDashboardPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDashboardPermissionsRequest) => any;
    }
    export interface UpdateDashboardPermissionsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the dashboard.</p>
                */
            DashboardArn?: string;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId?: string;
            /**
                * <p>Information about the permissions on the dashboard.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>Updates the permissions of a shared link to an Amazon QuickSight dashboard.</p>
                */
            LinkSharingConfiguration?: LinkSharingConfiguration;
    }
    export namespace UpdateDashboardPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDashboardPermissionsResponse) => any;
    }
    export interface UpdateDashboardPublishedVersionRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the dashboard that you're
                *             updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId: string | undefined;
            /**
                * <p>The version number of the dashboard.</p>
                */
            VersionNumber: number | undefined;
    }
    export namespace UpdateDashboardPublishedVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDashboardPublishedVersionRequest) => any;
    }
    export interface UpdateDashboardPublishedVersionResponse {
            /**
                * <p>The ID for the dashboard.</p>
                */
            DashboardId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the dashboard.</p>
                */
            DashboardArn?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateDashboardPublishedVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDashboardPublishedVersionResponse) => any;
    }
    export interface UpdateDataSetRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dataset that you want to update. This ID is unique per Amazon Web Services Region for each
                * 			Amazon Web Services account.</p>
                */
            DataSetId: string | undefined;
            /**
                * <p>The display name for the dataset.</p>
                */
            Name: string | undefined;
            /**
                * <p>Declares the physical tables that are available in the underlying data sources.</p>
                */
            PhysicalTableMap: Record<string, PhysicalTable> | undefined;
            /**
                * <p>Configures the combination and transformation of the data from the physical tables.</p>
                */
            LogicalTableMap?: Record<string, LogicalTable>;
            /**
                * <p>Indicates whether you want to import the data into SPICE.</p>
                */
            ImportMode: DataSetImportMode | string | undefined;
            /**
                * <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
                */
            ColumnGroups?: ColumnGroup[];
            /**
                * <p>The folder that contains fields and nested subfolders for your dataset.</p>
                */
            FieldFolders?: Record<string, FieldFolder>;
            /**
                * <p>The row-level security configuration for the data you want to create.</p>
                */
            RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
            /**
                * <p>The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only.</p>
                */
            RowLevelPermissionTagConfiguration?: RowLevelPermissionTagConfiguration;
            /**
                * <p>A set of one or more definitions of a <code>
                *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a>
                *             </code>.</p>
                */
            ColumnLevelPermissionRules?: ColumnLevelPermissionRule[];
            /**
                * <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
                */
            DataSetUsageConfiguration?: DataSetUsageConfiguration;
    }
    export namespace UpdateDataSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSetRequest) => any;
    }
    export interface UpdateDataSetResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset.</p>
                */
            Arn?: string;
            /**
                * <p>The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId?: string;
            /**
                * <p>The ARN for the ingestion, which is triggered as a result of dataset creation if the import
                * 			mode is SPICE.</p>
                */
            IngestionArn?: string;
            /**
                * <p>The ID of the ingestion, which is triggered as a result of dataset creation if the import
                * 			mode is SPICE.</p>
                */
            IngestionId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateDataSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSetResponse) => any;
    }
    export interface UpdateDataSetPermissionsRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the dataset whose permissions you want to update. This ID is unique per
                * 			Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId: string | undefined;
            /**
                * <p>The resource permissions that you want to grant to the dataset.</p>
                */
            GrantPermissions?: ResourcePermission[];
            /**
                * <p>The resource permissions that you want to revoke from the dataset.</p>
                */
            RevokePermissions?: ResourcePermission[];
    }
    export namespace UpdateDataSetPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSetPermissionsRequest) => any;
    }
    export interface UpdateDataSetPermissionsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset.</p>
                */
            DataSetArn?: string;
            /**
                * <p>The ID for the dataset whose permissions you want to update. This ID is unique per
                * 			Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSetId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateDataSetPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSetPermissionsResponse) => any;
    }
    export interface UpdateDataSourceRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account. </p>
                */
            DataSourceId: string | undefined;
            /**
                * <p>A display name for the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The parameters that Amazon QuickSight uses to connect to your underlying source.</p>
                */
            DataSourceParameters?: DataSourceParameters;
            /**
                * <p>The credentials that Amazon QuickSight that uses to connect to your underlying source. Currently,
                * 			only credentials based on user name and password are supported.</p>
                */
            Credentials?: DataSourceCredentials;
            /**
                * <p>Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to
                * 			your underlying source.</p>
                */
            VpcConnectionProperties?: VpcConnectionProperties;
            /**
                * <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying
                * 			source.</p>
                */
            SslProperties?: SslProperties;
    }
    export namespace UpdateDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSourceRequest) => any;
    }
    export interface UpdateDataSourceResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the data source.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The update status of the data source's last update.</p>
                */
            UpdateStatus?: ResourceStatus | string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSourceResponse) => any;
    }
    export interface UpdateDataSourcePermissionsRequest {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account. </p>
                */
            DataSourceId: string | undefined;
            /**
                * <p>A list of resource permissions that you want to grant on the data source.</p>
                */
            GrantPermissions?: ResourcePermission[];
            /**
                * <p>A list of resource permissions that you want to revoke on the data source.</p>
                */
            RevokePermissions?: ResourcePermission[];
    }
    export namespace UpdateDataSourcePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSourcePermissionsRequest) => any;
    }
    export interface UpdateDataSourcePermissionsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the data source.</p>
                */
            DataSourceArn?: string;
            /**
                * <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateDataSourcePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSourcePermissionsResponse) => any;
    }
    export interface UpdateFolderRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder to update.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The name of the folder.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFolderRequest) => any;
    }
    export interface UpdateFolderResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the folder.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFolderResponse) => any;
    }
    export interface UpdateFolderPermissionsRequest {
            /**
                * <p>The ID for the Amazon Web Services account that contains the folder to update.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The permissions that you want to grant on a resource.</p>
                */
            GrantPermissions?: ResourcePermission[];
            /**
                * <p>The permissions that you want to revoke from a resource.</p>
                */
            RevokePermissions?: ResourcePermission[];
    }
    export namespace UpdateFolderPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFolderPermissionsRequest) => any;
    }
    export interface UpdateFolderPermissionsResponse {
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the folder.</p>
                */
            Arn?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId?: string;
            /**
                * <p>Information about the permissions for the folder.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateFolderPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFolderPermissionsResponse) => any;
    }
    export interface UpdateGroupRequest {
            /**
                * <p>The name of the group that you want to update.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The description for the group that you want to update.</p>
                */
            Description?: string;
            /**
                * <p>The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace of the group that you want to update.</p>
                */
            Namespace: string | undefined;
    }
    export namespace UpdateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupRequest) => any;
    }
    export interface UpdateGroupResponse {
            /**
                * <p>The name of the group.</p>
                */
            Group?: Group;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupResponse) => any;
    }
    export interface UpdateIAMPolicyAssignmentRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the IAM policy assignment. </p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The name of the assignment, also called a rule. This name must be unique within an Amazon Web Services account.</p>
                */
            AssignmentName: string | undefined;
            /**
                * <p>The namespace of the assignment.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The status of the assignment. Possible values are as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ENABLED</code> - Anything specified in this assignment is used when creating the data
                * 				source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DISABLED</code> - This assignment isn't used when creating the data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the
                * 				data source.</p>
                *             </li>
                *          </ul>
                */
            AssignmentStatus?: AssignmentStatus | string;
            /**
                * <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups
                * 			specified in this assignment.</p>
                */
            PolicyArn?: string;
            /**
                * <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
                */
            Identities?: Record<string, string[]>;
    }
    export namespace UpdateIAMPolicyAssignmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIAMPolicyAssignmentRequest) => any;
    }
    export interface UpdateIAMPolicyAssignmentResponse {
            /**
                * <p>The name of the assignment or rule.</p>
                */
            AssignmentName?: string;
            /**
                * <p>The ID of the assignment.</p>
                */
            AssignmentId?: string;
            /**
                * <p>The ARN for the IAM policy applied to the Amazon QuickSight users and groups specified in this
                * 			assignment.</p>
                */
            PolicyArn?: string;
            /**
                * <p>The Amazon QuickSight users, groups, or both that the IAM policy is assigned to.</p>
                */
            Identities?: Record<string, string[]>;
            /**
                * <p>The status of the assignment. Possible values are as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ENABLED</code> - Anything specified in this assignment is used when creating the data
                * 				source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DISABLED</code> - This assignment isn't used when creating the data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the
                * 				data source.</p>
                *             </li>
                *          </ul>
                */
            AssignmentStatus?: AssignmentStatus | string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateIAMPolicyAssignmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIAMPolicyAssignmentResponse) => any;
    }
    export interface UpdateIpRestrictionRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the IP rules.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>A map that describes the updated IP rules with CIDR ranges and descriptions.</p>
                */
            IpRestrictionRuleMap?: Record<string, string>;
            /**
                * <p>A value that specifies whether IP rules are turned on.</p>
                */
            Enabled?: boolean;
    }
    export namespace UpdateIpRestrictionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIpRestrictionRequest) => any;
    }
    export interface UpdateIpRestrictionResponse {
            /**
                * <p>The ID of the Amazon Web Services account that contains the IP rules.</p>
                */
            AwsAccountId?: string;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request. </p>
                */
            Status?: number;
    }
    export namespace UpdateIpRestrictionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIpRestrictionResponse) => any;
    }
    export interface UpdatePublicSharingSettingsRequest {
            /**
                * <p>The Amazon Web Services account ID associated with your Amazon QuickSight subscription.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>A Boolean value that indicates whether public sharing is turned on for an Amazon QuickSight account.</p>
                */
            PublicSharingEnabled?: boolean;
    }
    export namespace UpdatePublicSharingSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePublicSharingSettingsRequest) => any;
    }
    export interface UpdatePublicSharingSettingsResponse {
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdatePublicSharingSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePublicSharingSettingsResponse) => any;
    }
    export interface UpdateTemplateRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template that you're updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>The entity that you are using as a source when you update the template. In
                * 			<code>SourceEntity</code>, you specify the type of object you're using as source:
                * 			<code>SourceTemplate</code> for a template or <code>SourceAnalysis</code> for an
                * 			analysis. Both of these require an Amazon Resource Name (ARN). For
                * 			<code>SourceTemplate</code>, specify the ARN of the source template. For
                * 			<code>SourceAnalysis</code>, specify the ARN of the source analysis. The <code>SourceTemplate</code>
                * 			ARN can contain any Amazon Web Services account and any Amazon QuickSight-supported Amazon Web Services Region;. </p>
                * 		       <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> or
                * 			<code>SourceAnalysis</code> to list the replacement datasets for the placeholders listed
                * 			in the original. The schema in each dataset must match its placeholder. </p>
                */
            SourceEntity: TemplateSourceEntity | undefined;
            /**
                * <p>A description of the current template version that is being updated. Every time you call
                * 				<code>UpdateTemplate</code>, you create a new version of the template. Each version
                * 			of the template maintains a description of the version in the
                * 				<code>VersionDescription</code> field.</p>
                */
            VersionDescription?: string;
            /**
                * <p>The name for the template.</p>
                */
            Name?: string;
    }
    export namespace UpdateTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplateRequest) => any;
    }
    export interface UpdateTemplateResponse {
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the template.</p>
                */
            Arn?: string;
            /**
                * <p>The ARN for the template, including the version information of the first version.</p>
                */
            VersionArn?: string;
            /**
                * <p>The creation status of the template.</p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplateResponse) => any;
    }
    export interface UpdateTemplateAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template alias that you're updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>The alias of the template that you want to update. If you name a specific alias, you update
                * 			the version that the alias points to. You can specify the latest version of the template
                * 			by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter.
                * 			The keyword <code>$PUBLISHED</code> doesn't apply to templates.</p>
                */
            AliasName: string | undefined;
            /**
                * <p>The version number of the template.</p>
                */
            TemplateVersionNumber: number | undefined;
    }
    export namespace UpdateTemplateAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplateAliasRequest) => any;
    }
    export interface UpdateTemplateAliasResponse {
            /**
                * <p>The template alias.</p>
                */
            TemplateAlias?: TemplateAlias;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateTemplateAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplateAliasResponse) => any;
    }
    export interface UpdateTemplatePermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the template.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId: string | undefined;
            /**
                * <p>A list of resource permissions to be granted on the template. </p>
                */
            GrantPermissions?: ResourcePermission[];
            /**
                * <p>A list of resource permissions to be revoked from the template. </p>
                */
            RevokePermissions?: ResourcePermission[];
    }
    export namespace UpdateTemplatePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplatePermissionsRequest) => any;
    }
    export interface UpdateTemplatePermissionsResponse {
            /**
                * <p>The ID for the template.</p>
                */
            TemplateId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the template.</p>
                */
            TemplateArn?: string;
            /**
                * <p>A list of resource permissions to be set on the template.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateTemplatePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplatePermissionsResponse) => any;
    }
    export interface UpdateThemeRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme that you're updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The name for the theme.</p>
                */
            Name?: string;
            /**
                * <p>The theme ID, defined by Amazon QuickSight, that a custom theme inherits from.
                * 		All themes initially inherit from a default Amazon QuickSight theme.</p>
                */
            BaseThemeId: string | undefined;
            /**
                * <p>A description of the theme version that you're updating Every time that you call
                * 				<code>UpdateTheme</code>, you create a new version of the theme. Each version of the
                * 			theme maintains a description of the version in <code>VersionDescription</code>.</p>
                */
            VersionDescription?: string;
            /**
                * <p>The theme configuration, which contains the theme display properties.</p>
                */
            Configuration?: ThemeConfiguration;
    }
    export namespace UpdateThemeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThemeRequest) => any;
    }
    export interface UpdateThemeResponse {
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the theme.</p>
                */
            Arn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the new version of the theme.</p>
                */
            VersionArn?: string;
            /**
                * <p>The creation status of the theme.</p>
                */
            CreationStatus?: ResourceStatus | string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateThemeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThemeResponse) => any;
    }
    export interface UpdateThemeAliasRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme alias that you're updating.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>The name of the theme alias that you want to update.</p>
                */
            AliasName: string | undefined;
            /**
                * <p>The version number of the theme that the alias should reference.</p>
                */
            ThemeVersionNumber: number | undefined;
    }
    export namespace UpdateThemeAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThemeAliasRequest) => any;
    }
    export interface UpdateThemeAliasResponse {
            /**
                * <p>Information about the theme alias.</p>
                */
            ThemeAlias?: ThemeAlias;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
    }
    export namespace UpdateThemeAliasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThemeAliasResponse) => any;
    }
    export interface UpdateThemePermissionsRequest {
            /**
                * <p>The ID of the Amazon Web Services account that contains the theme.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId: string | undefined;
            /**
                * <p>A list of resource permissions to be granted for the theme.</p>
                */
            GrantPermissions?: ResourcePermission[];
            /**
                * <p>A list of resource permissions to be revoked from the theme.</p>
                */
            RevokePermissions?: ResourcePermission[];
    }
    export namespace UpdateThemePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThemePermissionsRequest) => any;
    }
    export interface UpdateThemePermissionsResponse {
            /**
                * <p>The ID for the theme.</p>
                */
            ThemeId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the theme.</p>
                */
            ThemeArn?: string;
            /**
                * <p>The resulting list of resource permissions for the theme.</p>
                */
            Permissions?: ResourcePermission[];
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateThemePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThemePermissionsResponse) => any;
    }
    export interface UpdateUserRequest {
            /**
                * <p>The Amazon QuickSight user name that you want to update.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the
                * 			Amazon Web Services account that contains your Amazon QuickSight account.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>The namespace. Currently, you should set this to <code>default</code>.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The email address of the user that you want to update.</p>
                */
            Email: string | undefined;
            /**
                * <p>The Amazon QuickSight role of the user. The role can be one of the
                * 			following default security cohorts:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>
                *                   <code>READER</code>: A user who has read-only access to dashboards.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and
                * 					dashboards.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight
                * 					settings.</p>
                * 			         </li>
                *          </ul>
                * 	        <p>The name of the Amazon QuickSight role is invisible to the user except for the console
                * 	        screens dealing with permissions.</p>
                */
            Role: UserRole | string | undefined;
            /**
                * <p>(Enterprise edition only) The name of the custom permissions profile that you want to
                *             assign to this user. Customized permissions allows you to control a user's access by
                *             restricting access the following operations:</p>
                *         <ul>
                *             <li>
                *                 <p>Create and update data sources</p>
                *             </li>
                *             <li>
                *                 <p>Create and update datasets</p>
                *             </li>
                *             <li>
                *                 <p>Create and update email reports</p>
                *             </li>
                *             <li>
                *                 <p>Subscribe to email reports</p>
                *             </li>
                *          </ul>
                *         <p>A set of custom permissions includes any combination of these restrictions. Currently,
                *             you need to create the profile names for custom permission sets by using the Amazon QuickSight
                *             console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of
                *             permissions to a Amazon QuickSight user. </p>
                *         <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they
                *             override the permissions typically granted by assigning Amazon QuickSight users to one of the
                *             default security cohorts in Amazon QuickSight (admin, author, reader).</p>
                *         <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
                */
            CustomPermissionsName?: string;
            /**
                * <p>A flag that you use to indicate that you want to remove all custom permissions
                *             from this user. Using this parameter resets the user to the state
                *             it was in before a custom permissions profile was applied. This parameter defaults to
                *             NULL and it doesn't accept any other value.</p>
                */
            UnapplyCustomPermissions?: boolean;
            /**
                * <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NONE</code>: This clears all the previously saved external login information for a user. Use the
                *           <code>
                *                      <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeUser.html">DescribeUser</a>
                *                   </code>
                *           API operation to check the external login information.</p>
                *             </li>
                *          </ul>
                */
            ExternalLoginFederationProviderType?: string;
            /**
                * <p>The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate
                *          into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should
                *          only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.</p>
                */
            CustomFederationProviderUrl?: string;
            /**
                * <p>The identity ID for a user in the external login provider.</p>
                */
            ExternalLoginId?: string;
    }
    export namespace UpdateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserRequest) => any;
    }
    export interface UpdateUserResponse {
            /**
                * <p>The Amazon QuickSight user.</p>
                */
            User?: User;
            /**
                * <p>The Amazon Web Services request ID for this operation.</p>
                */
            RequestId?: string;
            /**
                * <p>The HTTP status of the request.</p>
                */
            Status?: number;
    }
    export namespace UpdateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserResponse) => any;
    }
}

declare module '@aws-sdk/client-quicksight/node_modules/@aws-sdk/client-quicksight/dist-types/models/QuickSightServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from QuickSight service.
        */
    export class QuickSightServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

