// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client
//   stream

declare module '@aws-sdk/client-codeartifact' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CodeartifactClient } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { AssociateExternalConnectionCommandInput, AssociateExternalConnectionCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/AssociateExternalConnectionCommand";
    import { CopyPackageVersionsCommandInput, CopyPackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CopyPackageVersionsCommand";
    import { CreateDomainCommandInput, CreateDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CreateDomainCommand";
    import { CreateRepositoryCommandInput, CreateRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CreateRepositoryCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteDomainCommand";
    import { DeleteDomainPermissionsPolicyCommandInput, DeleteDomainPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteDomainPermissionsPolicyCommand";
    import { DeletePackageVersionsCommandInput, DeletePackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeletePackageVersionsCommand";
    import { DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteRepositoryCommand";
    import { DeleteRepositoryPermissionsPolicyCommandInput, DeleteRepositoryPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteRepositoryPermissionsPolicyCommand";
    import { DescribeDomainCommandInput, DescribeDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribeDomainCommand";
    import { DescribePackageCommandInput, DescribePackageCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribePackageCommand";
    import { DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribePackageVersionCommand";
    import { DescribeRepositoryCommandInput, DescribeRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribeRepositoryCommand";
    import { DisassociateExternalConnectionCommandInput, DisassociateExternalConnectionCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DisassociateExternalConnectionCommand";
    import { DisposePackageVersionsCommandInput, DisposePackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DisposePackageVersionsCommand";
    import { GetAuthorizationTokenCommandInput, GetAuthorizationTokenCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetAuthorizationTokenCommand";
    import { GetDomainPermissionsPolicyCommandInput, GetDomainPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetDomainPermissionsPolicyCommand";
    import { GetPackageVersionAssetCommandInput, GetPackageVersionAssetCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetPackageVersionAssetCommand";
    import { GetPackageVersionReadmeCommandInput, GetPackageVersionReadmeCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetPackageVersionReadmeCommand";
    import { GetRepositoryEndpointCommandInput, GetRepositoryEndpointCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetRepositoryEndpointCommand";
    import { GetRepositoryPermissionsPolicyCommandInput, GetRepositoryPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetRepositoryPermissionsPolicyCommand";
    import { ListDomainsCommandInput, ListDomainsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListDomainsCommand";
    import { ListPackagesCommandInput, ListPackagesCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackagesCommand";
    import { ListPackageVersionAssetsCommandInput, ListPackageVersionAssetsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionAssetsCommand";
    import { ListPackageVersionDependenciesCommandInput, ListPackageVersionDependenciesCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionDependenciesCommand";
    import { ListPackageVersionsCommandInput, ListPackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionsCommand";
    import { ListRepositoriesCommandInput, ListRepositoriesCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListRepositoriesCommand";
    import { ListRepositoriesInDomainCommandInput, ListRepositoriesInDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListRepositoriesInDomainCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListTagsForResourceCommand";
    import { PutDomainPermissionsPolicyCommandInput, PutDomainPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutDomainPermissionsPolicyCommand";
    import { PutPackageOriginConfigurationCommandInput, PutPackageOriginConfigurationCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutPackageOriginConfigurationCommand";
    import { PutRepositoryPermissionsPolicyCommandInput, PutRepositoryPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutRepositoryPermissionsPolicyCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UntagResourceCommand";
    import { UpdatePackageVersionsStatusCommandInput, UpdatePackageVersionsStatusCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UpdatePackageVersionsStatusCommand";
    import { UpdateRepositoryCommandInput, UpdateRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UpdateRepositoryCommand";
    /**
        * <p> CodeArtifact is a fully managed artifact repository compatible with language-native
        *       package managers and build tools such as npm, Apache Maven, pip, and dotnet. You can use CodeArtifact to
        *       share packages with development teams and pull packages. Packages can be pulled from both
        *       public and CodeArtifact repositories. You can also create an upstream relationship between a CodeArtifact
        *       repository and another repository, which effectively merges their contents from the point of
        *       view of a package manager client. </p>
        *
        *          <p>
        *             <b>CodeArtifact Components</b>
        *          </p>
        *          <p>Use the information in this guide to help you work with the following CodeArtifact components:</p>
        *
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Repository</b>: A CodeArtifact repository contains a set of <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html#welcome-concepts-package-version">package
        *             versions</a>, each of which maps to a set of assets, or files. Repositories are
        *           polyglot, so a single repository can contain packages of any supported type. Each
        *           repository exposes endpoints for fetching and publishing packages using tools like the
        *             <b>
        *                      <code>npm</code>
        *                   </b> CLI, the Maven CLI (<b>
        *                      <code>mvn</code>
        *                   </b>), Python CLIs (<b>
        *                      <code>pip</code>
        *                   </b> and <code>twine</code>), and NuGet CLIs (<code>nuget</code> and <code>dotnet</code>).</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Domain</b>: Repositories are aggregated into a higher-level entity known as a
        *             <i>domain</i>. All package assets and metadata are stored in the domain,
        *             but are consumed through repositories. A given package asset, such as a Maven JAR file, is
        *             stored once per domain, no matter how many repositories it's present in. All of the assets
        *             and metadata in a domain are encrypted with the same customer master key (CMK) stored in
        *             Key Management Service (KMS).</p>
        *                <p>Each repository is a member of a single domain and can't be moved to a
        *             different domain.</p>
        *                <p>The domain allows organizational policy to be applied across multiple
        *             repositories, such as which accounts can access repositories in the domain, and
        *             which public repositories can be used as sources of packages.</p>
        *                <p>Although an organization can have multiple domains, we recommend a single production
        *             domain that contains all published artifacts so that teams can find and share packages
        *             across their organization.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Package</b>: A <i>package</i> is a bundle of software and the metadata required to
        *           resolve dependencies and install the software. CodeArtifact supports <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-npm.html">npm</a>, <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-python.html">PyPI</a>, <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-maven">Maven</a>, and <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-nuget">NuGet</a> package formats.</p>
        *                <p>In CodeArtifact, a package consists of:</p>
        *                <ul>
        *                   <li>
        *                      <p>A <i>name</i> (for example, <code>webpack</code> is the name of a
        *               popular npm package)</p>
        *                   </li>
        *                   <li>
        *                      <p>An optional namespace (for example, <code>@types</code> in <code>@types/node</code>)</p>
        *                   </li>
        *                   <li>
        *                      <p>A set of versions (for example, <code>1.0.0</code>, <code>1.0.1</code>,
        *                 <code>1.0.2</code>, etc.)</p>
        *                   </li>
        *                   <li>
        *                      <p> Package-level metadata (for example, npm tags)</p>
        *                   </li>
        *                </ul>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Package version</b>: A version of a package, such as <code>@types/node 12.6.9</code>. The version number
        *           format and semantics vary for different package formats. For example, npm package versions
        *           must conform to the <a href="https://semver.org/">Semantic Versioning
        *             specification</a>. In CodeArtifact, a package version consists of the version identifier,
        *           metadata at the package version level, and a set of assets.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Upstream repository</b>: One repository is <i>upstream</i> of another when the package versions in
        *           it can be accessed from the repository endpoint of the downstream repository, effectively
        *           merging the contents of the two repositories from the point of view of a client. CodeArtifact
        *           allows creating an upstream relationship between two repositories.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Asset</b>: An individual file stored in CodeArtifact associated with a package version, such as an npm
        *             <code>.tgz</code> file or Maven POM and JAR files.</p>
        *             </li>
        *          </ul>
        *
        *          <p>CodeArtifact supports these operations:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>AssociateExternalConnection</code>: Adds an existing external
        *           connection to a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CopyPackageVersions</code>: Copies package versions from one
        *           repository to another repository in the same domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CreateDomain</code>: Creates a domain</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CreateRepository</code>: Creates a CodeArtifact repository in a domain. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteDomain</code>: Deletes a domain. You cannot delete a domain that contains
        *           repositories. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteDomainPermissionsPolicy</code>: Deletes the resource policy that is set on a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeletePackageVersions</code>: Deletes versions of a package. After a package has
        *           been deleted, it can be republished, but its assets and metadata cannot be restored
        *           because they have been permanently removed from storage.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteRepository</code>: Deletes a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteRepositoryPermissionsPolicy</code>: Deletes the resource policy that is set on a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeDomain</code>: Returns a <code>DomainDescription</code> object that
        *           contains information about the requested domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribePackage</code>: Returns a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a>
        *           object that contains details about a package. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribePackageVersion</code>: Returns a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
        *           object that contains details about a package version. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeRepository</code>: Returns a <code>RepositoryDescription</code> object
        *           that contains detailed information about the requested repository. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DisposePackageVersions</code>: Disposes versions of a package. A package version
        *           with the status <code>Disposed</code> cannot be restored because they have been
        *           permanently removed from storage.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DisassociateExternalConnection</code>: Removes an existing external connection from a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetAuthorizationToken</code>: Generates a temporary authorization token for accessing repositories in the domain. The token expires the authorization period has passed.
        *           The default authorization period is 12 hours and can be customized to any length with a maximum of 12 hours.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetDomainPermissionsPolicy</code>: Returns the policy of a resource
        *           that is attached to the specified domain. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetPackageVersionAsset</code>: Returns the contents of an asset that is in a package version. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetPackageVersionReadme</code>: Gets the readme file or descriptive text for a package version.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetRepositoryEndpoint</code>: Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each
        *           package format:
        *         </p>
        *                <ul>
        *                   <li>
        *                      <p>
        *                         <code>maven</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>npm</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>nuget</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>pypi</code>
        *                      </p>
        *                   </li>
        *                </ul>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetRepositoryPermissionsPolicy</code>: Returns the resource policy that is set on a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListDomains</code>: Returns a list of <code>DomainSummary</code> objects. Each
        *           returned <code>DomainSummary</code> object contains information about a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackages</code>: Lists the packages in a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackageVersionAssets</code>: Lists the assets for a given package version.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackageVersionDependencies</code>: Returns a list of the direct dependencies for a
        *           package version. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackageVersions</code>: Returns a list of package versions for a specified
        *           package in a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListRepositories</code>: Returns a list of repositories owned by the Amazon Web Services account that called this method.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListRepositoriesInDomain</code>: Returns a list of the repositories in a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>PutDomainPermissionsPolicy</code>: Attaches a resource policy to a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>PutPackageOriginConfiguration</code>: Sets the package origin configuration for a package, which determine
        *         how new versions of the package can be added to a specific repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>PutRepositoryPermissionsPolicy</code>: Sets the resource policy on a repository
        *           that specifies permissions to access it. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdatePackageVersionsStatus</code>: Updates the status of one or more versions of a package.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateRepository</code>: Updates the properties of a repository.</p>
        *             </li>
        *          </ul>
        */
    export class Codeartifact extends CodeartifactClient {
            /**
                * <p>Adds an existing external connection to a repository. One external connection is allowed
                *       per repository.</p>
                *          <note>
                *             <p>A repository can have one or more upstream repositories, or an external connection.</p>
                *          </note>
                */
            associateExternalConnection(args: AssociateExternalConnectionCommandInput, options?: __HttpHandlerOptions): Promise<AssociateExternalConnectionCommandOutput>;
            associateExternalConnection(args: AssociateExternalConnectionCommandInput, cb: (err: any, data?: AssociateExternalConnectionCommandOutput) => void): void;
            associateExternalConnection(args: AssociateExternalConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateExternalConnectionCommandOutput) => void): void;
            /**
                * <p>
                *         Copies package versions from one repository to another repository in the same domain.
                *       </p>
                *          <note>
                *             <p>
                *         You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.
                *       </p>
                *          </note>
                */
            copyPackageVersions(args: CopyPackageVersionsCommandInput, options?: __HttpHandlerOptions): Promise<CopyPackageVersionsCommandOutput>;
            copyPackageVersions(args: CopyPackageVersionsCommandInput, cb: (err: any, data?: CopyPackageVersionsCommandOutput) => void): void;
            copyPackageVersions(args: CopyPackageVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyPackageVersionsCommandOutput) => void): void;
            /**
                * <p>
                *       Creates a domain. CodeArtifact <i>domains</i> make it easier to manage multiple repositories across an
                *         organization. You can use a domain to apply permissions across many
                *         repositories owned by different Amazon Web Services accounts. An asset is stored only once
                *         in a domain, even if it's in multiple repositories.
                *     </p>
                *
                *          <p>Although you can have multiple domains, we recommend a single production domain that contains all
                *         published artifacts so that your development teams can find and share packages. You can use a second
                *         pre-production domain to test changes to the production domain configuration.
                *       </p>
                */
            createDomain(args: CreateDomainCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainCommandOutput>;
            createDomain(args: CreateDomainCommandInput, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
            createDomain(args: CreateDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
            /**
                * <p>
                *         Creates a repository.
                *       </p>
                */
            createRepository(args: CreateRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<CreateRepositoryCommandOutput>;
            createRepository(args: CreateRepositoryCommandInput, cb: (err: any, data?: CreateRepositoryCommandOutput) => void): void;
            createRepository(args: CreateRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRepositoryCommandOutput) => void): void;
            /**
                * <p>
                *          Deletes a domain. You cannot delete a domain that contains repositories. If you want to delete a domain
                *          with repositories, first delete its repositories.
                *       </p>
                */
            deleteDomain(args: DeleteDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainCommandOutput>;
            deleteDomain(args: DeleteDomainCommandInput, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            deleteDomain(args: DeleteDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            /**
                * <p>
                *         Deletes the resource policy set on a domain.
                *       </p>
                */
            deleteDomainPermissionsPolicy(args: DeleteDomainPermissionsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainPermissionsPolicyCommandOutput>;
            deleteDomainPermissionsPolicy(args: DeleteDomainPermissionsPolicyCommandInput, cb: (err: any, data?: DeleteDomainPermissionsPolicyCommandOutput) => void): void;
            deleteDomainPermissionsPolicy(args: DeleteDomainPermissionsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainPermissionsPolicyCommandOutput) => void): void;
            /**
                * <p> Deletes one or more versions of a package. A deleted package version cannot be restored
                *       in your repository. If you want to remove a package version from your repository and be able
                *       to restore it later, set its status to <code>Archived</code>. Archived packages cannot be
                *       downloaded from a repository and don't show up with list package APIs (for example,
                *           <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListackageVersions</a>), but you can restore them using <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageVersionsStatus.html">UpdatePackageVersionsStatus</a>. </p>
                */
            deletePackageVersions(args: DeletePackageVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DeletePackageVersionsCommandOutput>;
            deletePackageVersions(args: DeletePackageVersionsCommandInput, cb: (err: any, data?: DeletePackageVersionsCommandOutput) => void): void;
            deletePackageVersions(args: DeletePackageVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePackageVersionsCommandOutput) => void): void;
            /**
                * <p>
                *          Deletes a repository.
                *        </p>
                */
            deleteRepository(args: DeleteRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRepositoryCommandOutput>;
            deleteRepository(args: DeleteRepositoryCommandInput, cb: (err: any, data?: DeleteRepositoryCommandOutput) => void): void;
            deleteRepository(args: DeleteRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRepositoryCommandOutput) => void): void;
            /**
                * <p>
                *         Deletes the resource policy that is set on a repository. After a resource policy is deleted, the
                *         permissions allowed and denied by the deleted policy are removed. The effect of deleting a resource policy might not be immediate.
                *       </p>
                *          <important>
                *             <p>
                *          Use <code>DeleteRepositoryPermissionsPolicy</code> with caution. After a policy is deleted, Amazon Web Services users, roles, and accounts lose permissions to perform
                *          the repository actions granted by the deleted policy.
                *        </p>
                *          </important>
                */
            deleteRepositoryPermissionsPolicy(args: DeleteRepositoryPermissionsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRepositoryPermissionsPolicyCommandOutput>;
            deleteRepositoryPermissionsPolicy(args: DeleteRepositoryPermissionsPolicyCommandInput, cb: (err: any, data?: DeleteRepositoryPermissionsPolicyCommandOutput) => void): void;
            deleteRepositoryPermissionsPolicy(args: DeleteRepositoryPermissionsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRepositoryPermissionsPolicyCommandOutput) => void): void;
            /**
                * <p>
                *          Returns a
                *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainDescription.html">DomainDescription</a>
                *       object that contains information about the requested domain.
                *      </p>
                */
            describeDomain(args: DescribeDomainCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainCommandOutput>;
            describeDomain(args: DescribeDomainCommandInput, cb: (err: any, data?: DescribeDomainCommandOutput) => void): void;
            describeDomain(args: DescribeDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainCommandOutput) => void): void;
            /**
                * <p> Returns a
                *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a>
                *       object that contains information about the requested package.</p>
                */
            describePackage(args: DescribePackageCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackageCommandOutput>;
            describePackage(args: DescribePackageCommandInput, cb: (err: any, data?: DescribePackageCommandOutput) => void): void;
            describePackage(args: DescribePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackageCommandOutput) => void): void;
            /**
                * <p>
                *        Returns a
                *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
                *        object that contains information about the requested package version.
                *      </p>
                */
            describePackageVersion(args: DescribePackageVersionCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackageVersionCommandOutput>;
            describePackageVersion(args: DescribePackageVersionCommandInput, cb: (err: any, data?: DescribePackageVersionCommandOutput) => void): void;
            describePackageVersion(args: DescribePackageVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackageVersionCommandOutput) => void): void;
            /**
                * <p>
                *          Returns a <code>RepositoryDescription</code> object that contains detailed information
                *         about the requested repository.
                *        </p>
                */
            describeRepository(args: DescribeRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRepositoryCommandOutput>;
            describeRepository(args: DescribeRepositoryCommandInput, cb: (err: any, data?: DescribeRepositoryCommandOutput) => void): void;
            describeRepository(args: DescribeRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRepositoryCommandOutput) => void): void;
            /**
                * <p>
                *       Removes an existing external connection from a repository.
                *     </p>
                */
            disassociateExternalConnection(args: DisassociateExternalConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateExternalConnectionCommandOutput>;
            disassociateExternalConnection(args: DisassociateExternalConnectionCommandInput, cb: (err: any, data?: DisassociateExternalConnectionCommandOutput) => void): void;
            disassociateExternalConnection(args: DisassociateExternalConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateExternalConnectionCommandOutput) => void): void;
            /**
                * <p>
                *       Deletes the assets in package versions and sets the package versions' status to <code>Disposed</code>.
                *       A disposed package version cannot be restored in your repository because its assets are deleted.
                *     </p>
                *
                *          <p>
                *       To view all disposed package versions in a repository, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a> and set the
                *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html#API_ListPackageVersions_RequestSyntax">status</a> parameter
                *       to <code>Disposed</code>.
                *     </p>
                *
                *          <p>
                *       To view information about a disposed package version, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DescribePackageVersion.html">DescribePackageVersion</a>.
                *     </p>
                */
            disposePackageVersions(args: DisposePackageVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DisposePackageVersionsCommandOutput>;
            disposePackageVersions(args: DisposePackageVersionsCommandInput, cb: (err: any, data?: DisposePackageVersionsCommandOutput) => void): void;
            disposePackageVersions(args: DisposePackageVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisposePackageVersionsCommandOutput) => void): void;
            /**
                * <p>
                *         Generates a temporary authorization token for accessing repositories in the domain.
                *         This API requires the <code>codeartifact:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code> permissions.
                *         For more information about authorization tokens, see
                *         <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/tokens-authentication.html">CodeArtifact authentication and tokens</a>.
                *       </p>
                *          <note>
                *             <p>CodeArtifact authorization tokens are valid for a period of 12 hours when created with the <code>login</code> command.
                *          You can call <code>login</code> periodically to refresh the token. When
                *          you create an authorization token with the <code>GetAuthorizationToken</code> API, you can set a custom authorization period,
                *          up to a maximum of 12 hours, with the <code>durationSeconds</code> parameter.</p>
                *             <p>The authorization period begins after <code>login</code>
                *          or <code>GetAuthorizationToken</code> is called. If <code>login</code> or <code>GetAuthorizationToken</code> is called while
                *          assuming a role, the token lifetime is independent of the maximum session duration
                *          of the role. For example, if you call <code>sts assume-role</code> and specify a session duration of 15 minutes, then
                *          generate a CodeArtifact authorization token, the token will be valid for the full authorization period
                *          even though this is longer than the 15-minute session duration.</p>
                *             <p>See
                *          <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a>
                *          for more information on controlling session duration. </p>
                *          </note>
                */
            getAuthorizationToken(args: GetAuthorizationTokenCommandInput, options?: __HttpHandlerOptions): Promise<GetAuthorizationTokenCommandOutput>;
            getAuthorizationToken(args: GetAuthorizationTokenCommandInput, cb: (err: any, data?: GetAuthorizationTokenCommandOutput) => void): void;
            getAuthorizationToken(args: GetAuthorizationTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAuthorizationTokenCommandOutput) => void): void;
            /**
                * <p>
                *         Returns the resource policy attached to the specified domain.
                *       </p>
                *          <note>
                *             <p>
                *          The policy is a resource-based policy, not an identity-based policy. For more information, see
                *          <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies
                *            and resource-based policies </a> in the <i>IAM User Guide</i>.
                *        </p>
                *          </note>
                */
            getDomainPermissionsPolicy(args: GetDomainPermissionsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainPermissionsPolicyCommandOutput>;
            getDomainPermissionsPolicy(args: GetDomainPermissionsPolicyCommandInput, cb: (err: any, data?: GetDomainPermissionsPolicyCommandOutput) => void): void;
            getDomainPermissionsPolicy(args: GetDomainPermissionsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainPermissionsPolicyCommandOutput) => void): void;
            /**
                * <p>
                *       Returns an asset (or file) that is in a package. For example, for a Maven package version, use
                *       <code>GetPackageVersionAsset</code> to download a <code>JAR</code> file, a <code>POM</code> file,
                *       or any other assets in the package version.
                *     </p>
                */
            getPackageVersionAsset(args: GetPackageVersionAssetCommandInput, options?: __HttpHandlerOptions): Promise<GetPackageVersionAssetCommandOutput>;
            getPackageVersionAsset(args: GetPackageVersionAssetCommandInput, cb: (err: any, data?: GetPackageVersionAssetCommandOutput) => void): void;
            getPackageVersionAsset(args: GetPackageVersionAssetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPackageVersionAssetCommandOutput) => void): void;
            /**
                * <p>
                *          Gets the readme file or descriptive text for a package version. For packages that do not contain a readme file, CodeArtifact
                *          extracts a description from a metadata file. For example, from the <code><description></code> element in the
                *         <code>pom.xml</code> file of a Maven package.
                *       </p>
                *          <p>
                *        The returned text might contain formatting. For example, it might contain formatting for Markdown or reStructuredText.
                *      </p>
                */
            getPackageVersionReadme(args: GetPackageVersionReadmeCommandInput, options?: __HttpHandlerOptions): Promise<GetPackageVersionReadmeCommandOutput>;
            getPackageVersionReadme(args: GetPackageVersionReadmeCommandInput, cb: (err: any, data?: GetPackageVersionReadmeCommandOutput) => void): void;
            getPackageVersionReadme(args: GetPackageVersionReadmeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPackageVersionReadmeCommandOutput) => void): void;
            /**
                * <p>
                *       Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each
                *       package format:
                *     </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>maven</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>npm</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>nuget</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>pypi</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            getRepositoryEndpoint(args: GetRepositoryEndpointCommandInput, options?: __HttpHandlerOptions): Promise<GetRepositoryEndpointCommandOutput>;
            getRepositoryEndpoint(args: GetRepositoryEndpointCommandInput, cb: (err: any, data?: GetRepositoryEndpointCommandOutput) => void): void;
            getRepositoryEndpoint(args: GetRepositoryEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRepositoryEndpointCommandOutput) => void): void;
            /**
                * <p>
                *         Returns the resource policy that is set on a repository.
                *       </p>
                */
            getRepositoryPermissionsPolicy(args: GetRepositoryPermissionsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetRepositoryPermissionsPolicyCommandOutput>;
            getRepositoryPermissionsPolicy(args: GetRepositoryPermissionsPolicyCommandInput, cb: (err: any, data?: GetRepositoryPermissionsPolicyCommandOutput) => void): void;
            getRepositoryPermissionsPolicy(args: GetRepositoryPermissionsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRepositoryPermissionsPolicyCommandOutput) => void): void;
            /**
                * <p> Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">DomainSummary</a> objects for all domains owned by the Amazon Web Services account that makes
                *       this call. Each returned <code>DomainSummary</code> object contains information about a
                *       domain. </p>
                */
            listDomains(args: ListDomainsCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainsCommandOutput>;
            listDomains(args: ListDomainsCommandInput, cb: (err: any, data?: ListDomainsCommandOutput) => void): void;
            listDomains(args: ListDomainsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainsCommandOutput) => void): void;
            /**
                * <p>
                *         Returns a list of
                *         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html">PackageSummary</a>
                *         objects for packages in a repository that match the request parameters.
                *       </p>
                */
            listPackages(args: ListPackagesCommandInput, options?: __HttpHandlerOptions): Promise<ListPackagesCommandOutput>;
            listPackages(args: ListPackagesCommandInput, cb: (err: any, data?: ListPackagesCommandOutput) => void): void;
            listPackages(args: ListPackagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackagesCommandOutput) => void): void;
            /**
                * <p>
                *        Returns a list of
                *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html">AssetSummary</a>
                *        objects for assets in a package version.
                *      </p>
                */
            listPackageVersionAssets(args: ListPackageVersionAssetsCommandInput, options?: __HttpHandlerOptions): Promise<ListPackageVersionAssetsCommandOutput>;
            listPackageVersionAssets(args: ListPackageVersionAssetsCommandInput, cb: (err: any, data?: ListPackageVersionAssetsCommandOutput) => void): void;
            listPackageVersionAssets(args: ListPackageVersionAssetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackageVersionAssetsCommandOutput) => void): void;
            /**
                * <p>
                *          Returns the direct dependencies for a package version. The dependencies are returned as
                *         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html">PackageDependency</a>
                *           objects. CodeArtifact extracts the dependencies for a package version from the metadata file for the package
                *           format (for example, the <code>package.json</code> file for npm packages and the <code>pom.xml</code> file
                *         for Maven). Any package version dependencies that are not listed in the configuration file are not returned.
                *       </p>
                */
            listPackageVersionDependencies(args: ListPackageVersionDependenciesCommandInput, options?: __HttpHandlerOptions): Promise<ListPackageVersionDependenciesCommandOutput>;
            listPackageVersionDependencies(args: ListPackageVersionDependenciesCommandInput, cb: (err: any, data?: ListPackageVersionDependenciesCommandOutput) => void): void;
            listPackageVersionDependencies(args: ListPackageVersionDependenciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackageVersionDependenciesCommandOutput) => void): void;
            /**
                * <p>
                *         Returns a list of
                *         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a>
                *         objects for package versions in a repository that match the request parameters.
                *       </p>
                */
            listPackageVersions(args: ListPackageVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListPackageVersionsCommandOutput>;
            listPackageVersions(args: ListPackageVersionsCommandInput, cb: (err: any, data?: ListPackageVersionsCommandOutput) => void): void;
            listPackageVersions(args: ListPackageVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackageVersionsCommandOutput) => void): void;
            /**
                * <p>
                *        Returns a list of
                *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a>
                *        objects. Each <code>RepositorySummary</code> contains information about a repository in the specified Amazon Web Services account and that matches the input
                *        parameters.
                *      </p>
                */
            listRepositories(args: ListRepositoriesCommandInput, options?: __HttpHandlerOptions): Promise<ListRepositoriesCommandOutput>;
            listRepositories(args: ListRepositoriesCommandInput, cb: (err: any, data?: ListRepositoriesCommandOutput) => void): void;
            listRepositories(args: ListRepositoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRepositoriesCommandOutput) => void): void;
            /**
                * <p>
                *        Returns a list of
                *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a>
                *        objects. Each <code>RepositorySummary</code> contains information about a repository in the specified domain and that matches the input
                *        parameters.
                *      </p>
                */
            listRepositoriesInDomain(args: ListRepositoriesInDomainCommandInput, options?: __HttpHandlerOptions): Promise<ListRepositoriesInDomainCommandOutput>;
            listRepositoriesInDomain(args: ListRepositoriesInDomainCommandInput, cb: (err: any, data?: ListRepositoriesInDomainCommandOutput) => void): void;
            listRepositoriesInDomain(args: ListRepositoriesInDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRepositoriesInDomainCommandOutput) => void): void;
            /**
                * <p>Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in CodeArtifact.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>
                *         Sets a resource policy on a domain that specifies permissions to access it.
                *       </p>
                *          <p>
                *        When you call <code>PutDomainPermissionsPolicy</code>, the resource policy on the domain is ignored when evaluting permissions.
                *        This ensures that the owner of a domain cannot lock themselves out of the domain, which would prevent them from being
                *        able to update the resource policy.
                *      </p>
                */
            putDomainPermissionsPolicy(args: PutDomainPermissionsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutDomainPermissionsPolicyCommandOutput>;
            putDomainPermissionsPolicy(args: PutDomainPermissionsPolicyCommandInput, cb: (err: any, data?: PutDomainPermissionsPolicyCommandOutput) => void): void;
            putDomainPermissionsPolicy(args: PutDomainPermissionsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDomainPermissionsPolicyCommandOutput) => void): void;
            /**
                * <p>Sets the package origin configuration for a package.</p>
                *          <p>The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct
                *     publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source.
                *     For more information about package origin controls and configuration, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-origin-controls.html">Editing package origin controls</a> in the <i>CodeArtifact User Guide</i>.</p>
                *          <p>
                *             <code>PutPackageOriginConfiguration</code> can be called on a package that doesn't yet exist in the repository. When called
                *       on a package that does not exist, a package is created in the repository with no versions and the requested restrictions are set on the package.
                *       This can be used to preemptively block ingesting or retaining any versions from external connections or upstream repositories, or to block
                *       publishing any versions of the package into the repository before connecting any package managers or publishers to the repository.</p>
                */
            putPackageOriginConfiguration(args: PutPackageOriginConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutPackageOriginConfigurationCommandOutput>;
            putPackageOriginConfiguration(args: PutPackageOriginConfigurationCommandInput, cb: (err: any, data?: PutPackageOriginConfigurationCommandOutput) => void): void;
            putPackageOriginConfiguration(args: PutPackageOriginConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPackageOriginConfigurationCommandOutput) => void): void;
            /**
                * <p>
                *         Sets the resource policy on a repository that specifies permissions to access it.
                *       </p>
                *          <p>
                *        When you call <code>PutRepositoryPermissionsPolicy</code>, the resource policy on the repository is ignored when evaluting permissions.
                *        This ensures that the owner of a repository cannot lock themselves out of the repository, which would prevent them from being
                *        able to update the resource policy.
                *      </p>
                */
            putRepositoryPermissionsPolicy(args: PutRepositoryPermissionsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutRepositoryPermissionsPolicyCommandOutput>;
            putRepositoryPermissionsPolicy(args: PutRepositoryPermissionsPolicyCommandInput, cb: (err: any, data?: PutRepositoryPermissionsPolicyCommandOutput) => void): void;
            putRepositoryPermissionsPolicy(args: PutRepositoryPermissionsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRepositoryPermissionsPolicyCommandOutput) => void): void;
            /**
                * <p>Adds or updates tags for a resource in CodeArtifact.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a resource in CodeArtifact.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>
                *       Updates the status of one or more versions of a package. Using <code>UpdatePackageVersionsStatus</code>,
                *       you can update the status of package versions to <code>Archived</code>, <code>Published</code>, or <code>Unlisted</code>.
                *       To set the status of a package version to <code>Disposed</code>, use
                *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DisposePackageVersions.html">DisposePackageVersions</a>.
                *     </p>
                */
            updatePackageVersionsStatus(args: UpdatePackageVersionsStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePackageVersionsStatusCommandOutput>;
            updatePackageVersionsStatus(args: UpdatePackageVersionsStatusCommandInput, cb: (err: any, data?: UpdatePackageVersionsStatusCommandOutput) => void): void;
            updatePackageVersionsStatus(args: UpdatePackageVersionsStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePackageVersionsStatusCommandOutput) => void): void;
            /**
                * <p>
                *          Update the properties of a repository.
                *        </p>
                */
            updateRepository(args: UpdateRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRepositoryCommandOutput>;
            updateRepository(args: UpdateRepositoryCommandInput, cb: (err: any, data?: UpdateRepositoryCommandOutput) => void): void;
            updateRepository(args: UpdateRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRepositoryCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateExternalConnectionCommandInput, AssociateExternalConnectionCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/AssociateExternalConnectionCommand";
    import { CopyPackageVersionsCommandInput, CopyPackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CopyPackageVersionsCommand";
    import { CreateDomainCommandInput, CreateDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CreateDomainCommand";
    import { CreateRepositoryCommandInput, CreateRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CreateRepositoryCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteDomainCommand";
    import { DeleteDomainPermissionsPolicyCommandInput, DeleteDomainPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteDomainPermissionsPolicyCommand";
    import { DeletePackageVersionsCommandInput, DeletePackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeletePackageVersionsCommand";
    import { DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteRepositoryCommand";
    import { DeleteRepositoryPermissionsPolicyCommandInput, DeleteRepositoryPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteRepositoryPermissionsPolicyCommand";
    import { DescribeDomainCommandInput, DescribeDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribeDomainCommand";
    import { DescribePackageCommandInput, DescribePackageCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribePackageCommand";
    import { DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribePackageVersionCommand";
    import { DescribeRepositoryCommandInput, DescribeRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribeRepositoryCommand";
    import { DisassociateExternalConnectionCommandInput, DisassociateExternalConnectionCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DisassociateExternalConnectionCommand";
    import { DisposePackageVersionsCommandInput, DisposePackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DisposePackageVersionsCommand";
    import { GetAuthorizationTokenCommandInput, GetAuthorizationTokenCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetAuthorizationTokenCommand";
    import { GetDomainPermissionsPolicyCommandInput, GetDomainPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetDomainPermissionsPolicyCommand";
    import { GetPackageVersionAssetCommandInput, GetPackageVersionAssetCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetPackageVersionAssetCommand";
    import { GetPackageVersionReadmeCommandInput, GetPackageVersionReadmeCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetPackageVersionReadmeCommand";
    import { GetRepositoryEndpointCommandInput, GetRepositoryEndpointCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetRepositoryEndpointCommand";
    import { GetRepositoryPermissionsPolicyCommandInput, GetRepositoryPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetRepositoryPermissionsPolicyCommand";
    import { ListDomainsCommandInput, ListDomainsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListDomainsCommand";
    import { ListPackagesCommandInput, ListPackagesCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackagesCommand";
    import { ListPackageVersionAssetsCommandInput, ListPackageVersionAssetsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionAssetsCommand";
    import { ListPackageVersionDependenciesCommandInput, ListPackageVersionDependenciesCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionDependenciesCommand";
    import { ListPackageVersionsCommandInput, ListPackageVersionsCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionsCommand";
    import { ListRepositoriesCommandInput, ListRepositoriesCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListRepositoriesCommand";
    import { ListRepositoriesInDomainCommandInput, ListRepositoriesInDomainCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListRepositoriesInDomainCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListTagsForResourceCommand";
    import { PutDomainPermissionsPolicyCommandInput, PutDomainPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutDomainPermissionsPolicyCommand";
    import { PutPackageOriginConfigurationCommandInput, PutPackageOriginConfigurationCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutPackageOriginConfigurationCommand";
    import { PutRepositoryPermissionsPolicyCommandInput, PutRepositoryPermissionsPolicyCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutRepositoryPermissionsPolicyCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UntagResourceCommand";
    import { UpdatePackageVersionsStatusCommandInput, UpdatePackageVersionsStatusCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UpdatePackageVersionsStatusCommand";
    import { UpdateRepositoryCommandInput, UpdateRepositoryCommandOutput } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UpdateRepositoryCommand";
    export type ServiceInputTypes = AssociateExternalConnectionCommandInput | CopyPackageVersionsCommandInput | CreateDomainCommandInput | CreateRepositoryCommandInput | DeleteDomainCommandInput | DeleteDomainPermissionsPolicyCommandInput | DeletePackageVersionsCommandInput | DeleteRepositoryCommandInput | DeleteRepositoryPermissionsPolicyCommandInput | DescribeDomainCommandInput | DescribePackageCommandInput | DescribePackageVersionCommandInput | DescribeRepositoryCommandInput | DisassociateExternalConnectionCommandInput | DisposePackageVersionsCommandInput | GetAuthorizationTokenCommandInput | GetDomainPermissionsPolicyCommandInput | GetPackageVersionAssetCommandInput | GetPackageVersionReadmeCommandInput | GetRepositoryEndpointCommandInput | GetRepositoryPermissionsPolicyCommandInput | ListDomainsCommandInput | ListPackageVersionAssetsCommandInput | ListPackageVersionDependenciesCommandInput | ListPackageVersionsCommandInput | ListPackagesCommandInput | ListRepositoriesCommandInput | ListRepositoriesInDomainCommandInput | ListTagsForResourceCommandInput | PutDomainPermissionsPolicyCommandInput | PutPackageOriginConfigurationCommandInput | PutRepositoryPermissionsPolicyCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdatePackageVersionsStatusCommandInput | UpdateRepositoryCommandInput;
    export type ServiceOutputTypes = AssociateExternalConnectionCommandOutput | CopyPackageVersionsCommandOutput | CreateDomainCommandOutput | CreateRepositoryCommandOutput | DeleteDomainCommandOutput | DeleteDomainPermissionsPolicyCommandOutput | DeletePackageVersionsCommandOutput | DeleteRepositoryCommandOutput | DeleteRepositoryPermissionsPolicyCommandOutput | DescribeDomainCommandOutput | DescribePackageCommandOutput | DescribePackageVersionCommandOutput | DescribeRepositoryCommandOutput | DisassociateExternalConnectionCommandOutput | DisposePackageVersionsCommandOutput | GetAuthorizationTokenCommandOutput | GetDomainPermissionsPolicyCommandOutput | GetPackageVersionAssetCommandOutput | GetPackageVersionReadmeCommandOutput | GetRepositoryEndpointCommandOutput | GetRepositoryPermissionsPolicyCommandOutput | ListDomainsCommandOutput | ListPackageVersionAssetsCommandOutput | ListPackageVersionDependenciesCommandOutput | ListPackageVersionsCommandOutput | ListPackagesCommandOutput | ListRepositoriesCommandOutput | ListRepositoriesInDomainCommandOutput | ListTagsForResourceCommandOutput | PutDomainPermissionsPolicyCommandOutput | PutPackageOriginConfigurationCommandOutput | PutRepositoryPermissionsPolicyCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdatePackageVersionsStatusCommandOutput | UpdateRepositoryCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CodeartifactClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CodeartifactClient class constructor that set the region, credentials and other options.
        */
    export interface CodeartifactClientConfig extends CodeartifactClientConfigType {
    }
    type CodeartifactClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CodeartifactClient class. This is resolved and normalized from the {@link CodeartifactClientConfig | constructor configuration interface}.
        */
    export interface CodeartifactClientResolvedConfig extends CodeartifactClientResolvedConfigType {
    }
    /**
        * <p> CodeArtifact is a fully managed artifact repository compatible with language-native
        *       package managers and build tools such as npm, Apache Maven, pip, and dotnet. You can use CodeArtifact to
        *       share packages with development teams and pull packages. Packages can be pulled from both
        *       public and CodeArtifact repositories. You can also create an upstream relationship between a CodeArtifact
        *       repository and another repository, which effectively merges their contents from the point of
        *       view of a package manager client. </p>
        *
        *          <p>
        *             <b>CodeArtifact Components</b>
        *          </p>
        *          <p>Use the information in this guide to help you work with the following CodeArtifact components:</p>
        *
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Repository</b>: A CodeArtifact repository contains a set of <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html#welcome-concepts-package-version">package
        *             versions</a>, each of which maps to a set of assets, or files. Repositories are
        *           polyglot, so a single repository can contain packages of any supported type. Each
        *           repository exposes endpoints for fetching and publishing packages using tools like the
        *             <b>
        *                      <code>npm</code>
        *                   </b> CLI, the Maven CLI (<b>
        *                      <code>mvn</code>
        *                   </b>), Python CLIs (<b>
        *                      <code>pip</code>
        *                   </b> and <code>twine</code>), and NuGet CLIs (<code>nuget</code> and <code>dotnet</code>).</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Domain</b>: Repositories are aggregated into a higher-level entity known as a
        *             <i>domain</i>. All package assets and metadata are stored in the domain,
        *             but are consumed through repositories. A given package asset, such as a Maven JAR file, is
        *             stored once per domain, no matter how many repositories it's present in. All of the assets
        *             and metadata in a domain are encrypted with the same customer master key (CMK) stored in
        *             Key Management Service (KMS).</p>
        *                <p>Each repository is a member of a single domain and can't be moved to a
        *             different domain.</p>
        *                <p>The domain allows organizational policy to be applied across multiple
        *             repositories, such as which accounts can access repositories in the domain, and
        *             which public repositories can be used as sources of packages.</p>
        *                <p>Although an organization can have multiple domains, we recommend a single production
        *             domain that contains all published artifacts so that teams can find and share packages
        *             across their organization.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Package</b>: A <i>package</i> is a bundle of software and the metadata required to
        *           resolve dependencies and install the software. CodeArtifact supports <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-npm.html">npm</a>, <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-python.html">PyPI</a>, <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-maven">Maven</a>, and <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-nuget">NuGet</a> package formats.</p>
        *                <p>In CodeArtifact, a package consists of:</p>
        *                <ul>
        *                   <li>
        *                      <p>A <i>name</i> (for example, <code>webpack</code> is the name of a
        *               popular npm package)</p>
        *                   </li>
        *                   <li>
        *                      <p>An optional namespace (for example, <code>@types</code> in <code>@types/node</code>)</p>
        *                   </li>
        *                   <li>
        *                      <p>A set of versions (for example, <code>1.0.0</code>, <code>1.0.1</code>,
        *                 <code>1.0.2</code>, etc.)</p>
        *                   </li>
        *                   <li>
        *                      <p> Package-level metadata (for example, npm tags)</p>
        *                   </li>
        *                </ul>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Package version</b>: A version of a package, such as <code>@types/node 12.6.9</code>. The version number
        *           format and semantics vary for different package formats. For example, npm package versions
        *           must conform to the <a href="https://semver.org/">Semantic Versioning
        *             specification</a>. In CodeArtifact, a package version consists of the version identifier,
        *           metadata at the package version level, and a set of assets.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Upstream repository</b>: One repository is <i>upstream</i> of another when the package versions in
        *           it can be accessed from the repository endpoint of the downstream repository, effectively
        *           merging the contents of the two repositories from the point of view of a client. CodeArtifact
        *           allows creating an upstream relationship between two repositories.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Asset</b>: An individual file stored in CodeArtifact associated with a package version, such as an npm
        *             <code>.tgz</code> file or Maven POM and JAR files.</p>
        *             </li>
        *          </ul>
        *
        *          <p>CodeArtifact supports these operations:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>AssociateExternalConnection</code>: Adds an existing external
        *           connection to a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CopyPackageVersions</code>: Copies package versions from one
        *           repository to another repository in the same domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CreateDomain</code>: Creates a domain</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CreateRepository</code>: Creates a CodeArtifact repository in a domain. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteDomain</code>: Deletes a domain. You cannot delete a domain that contains
        *           repositories. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteDomainPermissionsPolicy</code>: Deletes the resource policy that is set on a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeletePackageVersions</code>: Deletes versions of a package. After a package has
        *           been deleted, it can be republished, but its assets and metadata cannot be restored
        *           because they have been permanently removed from storage.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteRepository</code>: Deletes a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteRepositoryPermissionsPolicy</code>: Deletes the resource policy that is set on a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeDomain</code>: Returns a <code>DomainDescription</code> object that
        *           contains information about the requested domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribePackage</code>: Returns a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a>
        *           object that contains details about a package. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribePackageVersion</code>: Returns a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
        *           object that contains details about a package version. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeRepository</code>: Returns a <code>RepositoryDescription</code> object
        *           that contains detailed information about the requested repository. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DisposePackageVersions</code>: Disposes versions of a package. A package version
        *           with the status <code>Disposed</code> cannot be restored because they have been
        *           permanently removed from storage.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DisassociateExternalConnection</code>: Removes an existing external connection from a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetAuthorizationToken</code>: Generates a temporary authorization token for accessing repositories in the domain. The token expires the authorization period has passed.
        *           The default authorization period is 12 hours and can be customized to any length with a maximum of 12 hours.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetDomainPermissionsPolicy</code>: Returns the policy of a resource
        *           that is attached to the specified domain. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetPackageVersionAsset</code>: Returns the contents of an asset that is in a package version. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetPackageVersionReadme</code>: Gets the readme file or descriptive text for a package version.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetRepositoryEndpoint</code>: Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each
        *           package format:
        *         </p>
        *                <ul>
        *                   <li>
        *                      <p>
        *                         <code>maven</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>npm</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>nuget</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>pypi</code>
        *                      </p>
        *                   </li>
        *                </ul>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetRepositoryPermissionsPolicy</code>: Returns the resource policy that is set on a repository.
        *         </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListDomains</code>: Returns a list of <code>DomainSummary</code> objects. Each
        *           returned <code>DomainSummary</code> object contains information about a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackages</code>: Lists the packages in a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackageVersionAssets</code>: Lists the assets for a given package version.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackageVersionDependencies</code>: Returns a list of the direct dependencies for a
        *           package version. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListPackageVersions</code>: Returns a list of package versions for a specified
        *           package in a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListRepositories</code>: Returns a list of repositories owned by the Amazon Web Services account that called this method.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListRepositoriesInDomain</code>: Returns a list of the repositories in a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>PutDomainPermissionsPolicy</code>: Attaches a resource policy to a domain.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>PutPackageOriginConfiguration</code>: Sets the package origin configuration for a package, which determine
        *         how new versions of the package can be added to a specific repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>PutRepositoryPermissionsPolicy</code>: Sets the resource policy on a repository
        *           that specifies permissions to access it. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdatePackageVersionsStatus</code>: Updates the status of one or more versions of a package.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateRepository</code>: Updates the properties of a repository.</p>
        *             </li>
        *          </ul>
        */
    export class CodeartifactClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CodeartifactClientResolvedConfig> {
            /**
                * The resolved configuration of CodeartifactClient class. This is resolved and normalized from the {@link CodeartifactClientConfig | constructor configuration interface}.
                */
            readonly config: CodeartifactClientResolvedConfig;
            constructor(configuration: CodeartifactClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/AssociateExternalConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { AssociateExternalConnectionRequest, AssociateExternalConnectionResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface AssociateExternalConnectionCommandInput extends AssociateExternalConnectionRequest {
    }
    export interface AssociateExternalConnectionCommandOutput extends AssociateExternalConnectionResult, __MetadataBearer {
    }
    /**
        * <p>Adds an existing external connection to a repository. One external connection is allowed
        *       per repository.</p>
        *          <note>
        *             <p>A repository can have one or more upstream repositories, or an external connection.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, AssociateExternalConnectionCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, AssociateExternalConnectionCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new AssociateExternalConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateExternalConnectionCommandInput} for command's `input` shape.
        * @see {@link AssociateExternalConnectionCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class AssociateExternalConnectionCommand extends $Command<AssociateExternalConnectionCommandInput, AssociateExternalConnectionCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: AssociateExternalConnectionCommandInput;
            constructor(input: AssociateExternalConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateExternalConnectionCommandInput, AssociateExternalConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CopyPackageVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { CopyPackageVersionsRequest, CopyPackageVersionsResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface CopyPackageVersionsCommandInput extends CopyPackageVersionsRequest {
    }
    export interface CopyPackageVersionsCommandOutput extends CopyPackageVersionsResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Copies package versions from one repository to another repository in the same domain.
        *       </p>
        *          <note>
        *             <p>
        *         You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.
        *       </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, CopyPackageVersionsCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, CopyPackageVersionsCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new CopyPackageVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyPackageVersionsCommandInput} for command's `input` shape.
        * @see {@link CopyPackageVersionsCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class CopyPackageVersionsCommand extends $Command<CopyPackageVersionsCommandInput, CopyPackageVersionsCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: CopyPackageVersionsCommandInput;
            constructor(input: CopyPackageVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyPackageVersionsCommandInput, CopyPackageVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CreateDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { CreateDomainRequest, CreateDomainResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface CreateDomainCommandInput extends CreateDomainRequest {
    }
    export interface CreateDomainCommandOutput extends CreateDomainResult, __MetadataBearer {
    }
    /**
        * <p>
        *       Creates a domain. CodeArtifact <i>domains</i> make it easier to manage multiple repositories across an
        *         organization. You can use a domain to apply permissions across many
        *         repositories owned by different Amazon Web Services accounts. An asset is stored only once
        *         in a domain, even if it's in multiple repositories.
        *     </p>
        *
        *          <p>Although you can have multiple domains, we recommend a single production domain that contains all
        *         published artifacts so that your development teams can find and share packages. You can use a second
        *         pre-production domain to test changes to the production domain configuration.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, CreateDomainCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, CreateDomainCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new CreateDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDomainCommandInput} for command's `input` shape.
        * @see {@link CreateDomainCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class CreateDomainCommand extends $Command<CreateDomainCommandInput, CreateDomainCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: CreateDomainCommandInput;
            constructor(input: CreateDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDomainCommandInput, CreateDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/CreateRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { CreateRepositoryRequest, CreateRepositoryResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface CreateRepositoryCommandInput extends CreateRepositoryRequest {
    }
    export interface CreateRepositoryCommandOutput extends CreateRepositoryResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Creates a repository.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, CreateRepositoryCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, CreateRepositoryCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new CreateRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRepositoryCommandInput} for command's `input` shape.
        * @see {@link CreateRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class CreateRepositoryCommand extends $Command<CreateRepositoryCommandInput, CreateRepositoryCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: CreateRepositoryCommandInput;
            constructor(input: CreateRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRepositoryCommandInput, CreateRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DeleteDomainRequest, DeleteDomainResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DeleteDomainCommandInput extends DeleteDomainRequest {
    }
    export interface DeleteDomainCommandOutput extends DeleteDomainResult, __MetadataBearer {
    }
    /**
        * <p>
        *          Deletes a domain. You cannot delete a domain that contains repositories. If you want to delete a domain
        *          with repositories, first delete its repositories.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DeleteDomainCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DeleteDomainCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DeleteDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DeleteDomainCommand extends $Command<DeleteDomainCommandInput, DeleteDomainCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DeleteDomainCommandInput;
            constructor(input: DeleteDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainCommandInput, DeleteDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteDomainPermissionsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DeleteDomainPermissionsPolicyRequest, DeleteDomainPermissionsPolicyResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DeleteDomainPermissionsPolicyCommandInput extends DeleteDomainPermissionsPolicyRequest {
    }
    export interface DeleteDomainPermissionsPolicyCommandOutput extends DeleteDomainPermissionsPolicyResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Deletes the resource policy set on a domain.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DeleteDomainPermissionsPolicyCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DeleteDomainPermissionsPolicyCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DeleteDomainPermissionsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainPermissionsPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainPermissionsPolicyCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DeleteDomainPermissionsPolicyCommand extends $Command<DeleteDomainPermissionsPolicyCommandInput, DeleteDomainPermissionsPolicyCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DeleteDomainPermissionsPolicyCommandInput;
            constructor(input: DeleteDomainPermissionsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainPermissionsPolicyCommandInput, DeleteDomainPermissionsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeletePackageVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DeletePackageVersionsRequest, DeletePackageVersionsResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DeletePackageVersionsCommandInput extends DeletePackageVersionsRequest {
    }
    export interface DeletePackageVersionsCommandOutput extends DeletePackageVersionsResult, __MetadataBearer {
    }
    /**
        * <p> Deletes one or more versions of a package. A deleted package version cannot be restored
        *       in your repository. If you want to remove a package version from your repository and be able
        *       to restore it later, set its status to <code>Archived</code>. Archived packages cannot be
        *       downloaded from a repository and don't show up with list package APIs (for example,
        *           <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListackageVersions</a>), but you can restore them using <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageVersionsStatus.html">UpdatePackageVersionsStatus</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DeletePackageVersionsCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DeletePackageVersionsCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DeletePackageVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePackageVersionsCommandInput} for command's `input` shape.
        * @see {@link DeletePackageVersionsCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DeletePackageVersionsCommand extends $Command<DeletePackageVersionsCommandInput, DeletePackageVersionsCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DeletePackageVersionsCommandInput;
            constructor(input: DeletePackageVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePackageVersionsCommandInput, DeletePackageVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DeleteRepositoryRequest, DeleteRepositoryResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DeleteRepositoryCommandInput extends DeleteRepositoryRequest {
    }
    export interface DeleteRepositoryCommandOutput extends DeleteRepositoryResult, __MetadataBearer {
    }
    /**
        * <p>
        *          Deletes a repository.
        *        </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DeleteRepositoryCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DeleteRepositoryCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DeleteRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRepositoryCommandInput} for command's `input` shape.
        * @see {@link DeleteRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DeleteRepositoryCommand extends $Command<DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DeleteRepositoryCommandInput;
            constructor(input: DeleteRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DeleteRepositoryPermissionsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DeleteRepositoryPermissionsPolicyRequest, DeleteRepositoryPermissionsPolicyResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DeleteRepositoryPermissionsPolicyCommandInput extends DeleteRepositoryPermissionsPolicyRequest {
    }
    export interface DeleteRepositoryPermissionsPolicyCommandOutput extends DeleteRepositoryPermissionsPolicyResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Deletes the resource policy that is set on a repository. After a resource policy is deleted, the
        *         permissions allowed and denied by the deleted policy are removed. The effect of deleting a resource policy might not be immediate.
        *       </p>
        *          <important>
        *             <p>
        *          Use <code>DeleteRepositoryPermissionsPolicy</code> with caution. After a policy is deleted, Amazon Web Services users, roles, and accounts lose permissions to perform
        *          the repository actions granted by the deleted policy.
        *        </p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DeleteRepositoryPermissionsPolicyCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DeleteRepositoryPermissionsPolicyCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DeleteRepositoryPermissionsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRepositoryPermissionsPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteRepositoryPermissionsPolicyCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DeleteRepositoryPermissionsPolicyCommand extends $Command<DeleteRepositoryPermissionsPolicyCommandInput, DeleteRepositoryPermissionsPolicyCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DeleteRepositoryPermissionsPolicyCommandInput;
            constructor(input: DeleteRepositoryPermissionsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRepositoryPermissionsPolicyCommandInput, DeleteRepositoryPermissionsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribeDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DescribeDomainRequest, DescribeDomainResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DescribeDomainCommandInput extends DescribeDomainRequest {
    }
    export interface DescribeDomainCommandOutput extends DescribeDomainResult, __MetadataBearer {
    }
    /**
        * <p>
        *          Returns a
        *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainDescription.html">DomainDescription</a>
        *       object that contains information about the requested domain.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DescribeDomainCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DescribeDomainCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DescribeDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDomainCommandInput} for command's `input` shape.
        * @see {@link DescribeDomainCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DescribeDomainCommand extends $Command<DescribeDomainCommandInput, DescribeDomainCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DescribeDomainCommandInput;
            constructor(input: DescribeDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDomainCommandInput, DescribeDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DescribePackageRequest, DescribePackageResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DescribePackageCommandInput extends DescribePackageRequest {
    }
    export interface DescribePackageCommandOutput extends DescribePackageResult, __MetadataBearer {
    }
    /**
        * <p> Returns a
        *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a>
        *       object that contains information about the requested package.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DescribePackageCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DescribePackageCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DescribePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackageCommandInput} for command's `input` shape.
        * @see {@link DescribePackageCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DescribePackageCommand extends $Command<DescribePackageCommandInput, DescribePackageCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DescribePackageCommandInput;
            constructor(input: DescribePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackageCommandInput, DescribePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribePackageVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DescribePackageVersionRequest, DescribePackageVersionResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DescribePackageVersionCommandInput extends DescribePackageVersionRequest {
    }
    export interface DescribePackageVersionCommandOutput extends DescribePackageVersionResult, __MetadataBearer {
    }
    /**
        * <p>
        *        Returns a
        *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
        *        object that contains information about the requested package version.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DescribePackageVersionCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DescribePackageVersionCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DescribePackageVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackageVersionCommandInput} for command's `input` shape.
        * @see {@link DescribePackageVersionCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DescribePackageVersionCommand extends $Command<DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DescribePackageVersionCommandInput;
            constructor(input: DescribePackageVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DescribeRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DescribeRepositoryRequest, DescribeRepositoryResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DescribeRepositoryCommandInput extends DescribeRepositoryRequest {
    }
    export interface DescribeRepositoryCommandOutput extends DescribeRepositoryResult, __MetadataBearer {
    }
    /**
        * <p>
        *          Returns a <code>RepositoryDescription</code> object that contains detailed information
        *         about the requested repository.
        *        </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DescribeRepositoryCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DescribeRepositoryCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DescribeRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRepositoryCommandInput} for command's `input` shape.
        * @see {@link DescribeRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DescribeRepositoryCommand extends $Command<DescribeRepositoryCommandInput, DescribeRepositoryCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DescribeRepositoryCommandInput;
            constructor(input: DescribeRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRepositoryCommandInput, DescribeRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DisassociateExternalConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DisassociateExternalConnectionRequest, DisassociateExternalConnectionResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DisassociateExternalConnectionCommandInput extends DisassociateExternalConnectionRequest {
    }
    export interface DisassociateExternalConnectionCommandOutput extends DisassociateExternalConnectionResult, __MetadataBearer {
    }
    /**
        * <p>
        *       Removes an existing external connection from a repository.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DisassociateExternalConnectionCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DisassociateExternalConnectionCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DisassociateExternalConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateExternalConnectionCommandInput} for command's `input` shape.
        * @see {@link DisassociateExternalConnectionCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DisassociateExternalConnectionCommand extends $Command<DisassociateExternalConnectionCommandInput, DisassociateExternalConnectionCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DisassociateExternalConnectionCommandInput;
            constructor(input: DisassociateExternalConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateExternalConnectionCommandInput, DisassociateExternalConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/DisposePackageVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { DisposePackageVersionsRequest, DisposePackageVersionsResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface DisposePackageVersionsCommandInput extends DisposePackageVersionsRequest {
    }
    export interface DisposePackageVersionsCommandOutput extends DisposePackageVersionsResult, __MetadataBearer {
    }
    /**
        * <p>
        *       Deletes the assets in package versions and sets the package versions' status to <code>Disposed</code>.
        *       A disposed package version cannot be restored in your repository because its assets are deleted.
        *     </p>
        *
        *          <p>
        *       To view all disposed package versions in a repository, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a> and set the
        *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html#API_ListPackageVersions_RequestSyntax">status</a> parameter
        *       to <code>Disposed</code>.
        *     </p>
        *
        *          <p>
        *       To view information about a disposed package version, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DescribePackageVersion.html">DescribePackageVersion</a>.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, DisposePackageVersionsCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, DisposePackageVersionsCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new DisposePackageVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisposePackageVersionsCommandInput} for command's `input` shape.
        * @see {@link DisposePackageVersionsCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class DisposePackageVersionsCommand extends $Command<DisposePackageVersionsCommandInput, DisposePackageVersionsCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: DisposePackageVersionsCommandInput;
            constructor(input: DisposePackageVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisposePackageVersionsCommandInput, DisposePackageVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetAuthorizationTokenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { GetAuthorizationTokenRequest, GetAuthorizationTokenResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface GetAuthorizationTokenCommandInput extends GetAuthorizationTokenRequest {
    }
    export interface GetAuthorizationTokenCommandOutput extends GetAuthorizationTokenResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Generates a temporary authorization token for accessing repositories in the domain.
        *         This API requires the <code>codeartifact:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code> permissions.
        *         For more information about authorization tokens, see
        *         <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/tokens-authentication.html">CodeArtifact authentication and tokens</a>.
        *       </p>
        *          <note>
        *             <p>CodeArtifact authorization tokens are valid for a period of 12 hours when created with the <code>login</code> command.
        *          You can call <code>login</code> periodically to refresh the token. When
        *          you create an authorization token with the <code>GetAuthorizationToken</code> API, you can set a custom authorization period,
        *          up to a maximum of 12 hours, with the <code>durationSeconds</code> parameter.</p>
        *             <p>The authorization period begins after <code>login</code>
        *          or <code>GetAuthorizationToken</code> is called. If <code>login</code> or <code>GetAuthorizationToken</code> is called while
        *          assuming a role, the token lifetime is independent of the maximum session duration
        *          of the role. For example, if you call <code>sts assume-role</code> and specify a session duration of 15 minutes, then
        *          generate a CodeArtifact authorization token, the token will be valid for the full authorization period
        *          even though this is longer than the 15-minute session duration.</p>
        *             <p>See
        *          <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a>
        *          for more information on controlling session duration. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, GetAuthorizationTokenCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, GetAuthorizationTokenCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new GetAuthorizationTokenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAuthorizationTokenCommandInput} for command's `input` shape.
        * @see {@link GetAuthorizationTokenCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class GetAuthorizationTokenCommand extends $Command<GetAuthorizationTokenCommandInput, GetAuthorizationTokenCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: GetAuthorizationTokenCommandInput;
            constructor(input: GetAuthorizationTokenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAuthorizationTokenCommandInput, GetAuthorizationTokenCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetDomainPermissionsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { GetDomainPermissionsPolicyRequest, GetDomainPermissionsPolicyResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface GetDomainPermissionsPolicyCommandInput extends GetDomainPermissionsPolicyRequest {
    }
    export interface GetDomainPermissionsPolicyCommandOutput extends GetDomainPermissionsPolicyResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Returns the resource policy attached to the specified domain.
        *       </p>
        *          <note>
        *             <p>
        *          The policy is a resource-based policy, not an identity-based policy. For more information, see
        *          <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies
        *            and resource-based policies </a> in the <i>IAM User Guide</i>.
        *        </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, GetDomainPermissionsPolicyCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, GetDomainPermissionsPolicyCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new GetDomainPermissionsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainPermissionsPolicyCommandInput} for command's `input` shape.
        * @see {@link GetDomainPermissionsPolicyCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class GetDomainPermissionsPolicyCommand extends $Command<GetDomainPermissionsPolicyCommandInput, GetDomainPermissionsPolicyCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: GetDomainPermissionsPolicyCommandInput;
            constructor(input: GetDomainPermissionsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainPermissionsPolicyCommandInput, GetDomainPermissionsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetPackageVersionAssetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { GetPackageVersionAssetRequest, GetPackageVersionAssetResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface GetPackageVersionAssetCommandInput extends GetPackageVersionAssetRequest {
    }
    export interface GetPackageVersionAssetCommandOutput extends GetPackageVersionAssetResult, __MetadataBearer {
    }
    /**
        * <p>
        *       Returns an asset (or file) that is in a package. For example, for a Maven package version, use
        *       <code>GetPackageVersionAsset</code> to download a <code>JAR</code> file, a <code>POM</code> file,
        *       or any other assets in the package version.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, GetPackageVersionAssetCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, GetPackageVersionAssetCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new GetPackageVersionAssetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPackageVersionAssetCommandInput} for command's `input` shape.
        * @see {@link GetPackageVersionAssetCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class GetPackageVersionAssetCommand extends $Command<GetPackageVersionAssetCommandInput, GetPackageVersionAssetCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: GetPackageVersionAssetCommandInput;
            constructor(input: GetPackageVersionAssetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPackageVersionAssetCommandInput, GetPackageVersionAssetCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetPackageVersionReadmeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { GetPackageVersionReadmeRequest, GetPackageVersionReadmeResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface GetPackageVersionReadmeCommandInput extends GetPackageVersionReadmeRequest {
    }
    export interface GetPackageVersionReadmeCommandOutput extends GetPackageVersionReadmeResult, __MetadataBearer {
    }
    /**
        * <p>
        *          Gets the readme file or descriptive text for a package version. For packages that do not contain a readme file, CodeArtifact
        *          extracts a description from a metadata file. For example, from the <code><description></code> element in the
        *         <code>pom.xml</code> file of a Maven package.
        *       </p>
        *          <p>
        *        The returned text might contain formatting. For example, it might contain formatting for Markdown or reStructuredText.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, GetPackageVersionReadmeCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, GetPackageVersionReadmeCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new GetPackageVersionReadmeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPackageVersionReadmeCommandInput} for command's `input` shape.
        * @see {@link GetPackageVersionReadmeCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class GetPackageVersionReadmeCommand extends $Command<GetPackageVersionReadmeCommandInput, GetPackageVersionReadmeCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: GetPackageVersionReadmeCommandInput;
            constructor(input: GetPackageVersionReadmeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPackageVersionReadmeCommandInput, GetPackageVersionReadmeCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetRepositoryEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { GetRepositoryEndpointRequest, GetRepositoryEndpointResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface GetRepositoryEndpointCommandInput extends GetRepositoryEndpointRequest {
    }
    export interface GetRepositoryEndpointCommandOutput extends GetRepositoryEndpointResult, __MetadataBearer {
    }
    /**
        * <p>
        *       Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each
        *       package format:
        *     </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>maven</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>npm</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>nuget</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>pypi</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, GetRepositoryEndpointCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, GetRepositoryEndpointCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new GetRepositoryEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRepositoryEndpointCommandInput} for command's `input` shape.
        * @see {@link GetRepositoryEndpointCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class GetRepositoryEndpointCommand extends $Command<GetRepositoryEndpointCommandInput, GetRepositoryEndpointCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: GetRepositoryEndpointCommandInput;
            constructor(input: GetRepositoryEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRepositoryEndpointCommandInput, GetRepositoryEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/GetRepositoryPermissionsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { GetRepositoryPermissionsPolicyRequest, GetRepositoryPermissionsPolicyResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface GetRepositoryPermissionsPolicyCommandInput extends GetRepositoryPermissionsPolicyRequest {
    }
    export interface GetRepositoryPermissionsPolicyCommandOutput extends GetRepositoryPermissionsPolicyResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Returns the resource policy that is set on a repository.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, GetRepositoryPermissionsPolicyCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, GetRepositoryPermissionsPolicyCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new GetRepositoryPermissionsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRepositoryPermissionsPolicyCommandInput} for command's `input` shape.
        * @see {@link GetRepositoryPermissionsPolicyCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class GetRepositoryPermissionsPolicyCommand extends $Command<GetRepositoryPermissionsPolicyCommandInput, GetRepositoryPermissionsPolicyCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: GetRepositoryPermissionsPolicyCommandInput;
            constructor(input: GetRepositoryPermissionsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRepositoryPermissionsPolicyCommandInput, GetRepositoryPermissionsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListDomainsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListDomainsRequest, ListDomainsResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListDomainsCommandInput extends ListDomainsRequest {
    }
    export interface ListDomainsCommandOutput extends ListDomainsResult, __MetadataBearer {
    }
    /**
        * <p> Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">DomainSummary</a> objects for all domains owned by the Amazon Web Services account that makes
        *       this call. Each returned <code>DomainSummary</code> object contains information about a
        *       domain. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListDomainsCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListDomainsCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListDomainsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDomainsCommandInput} for command's `input` shape.
        * @see {@link ListDomainsCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListDomainsCommand extends $Command<ListDomainsCommandInput, ListDomainsCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListDomainsCommandInput;
            constructor(input: ListDomainsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDomainsCommandInput, ListDomainsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListPackagesRequest, ListPackagesResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListPackagesCommandInput extends ListPackagesRequest {
    }
    export interface ListPackagesCommandOutput extends ListPackagesResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Returns a list of
        *         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html">PackageSummary</a>
        *         objects for packages in a repository that match the request parameters.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListPackagesCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListPackagesCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListPackagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackagesCommandInput} for command's `input` shape.
        * @see {@link ListPackagesCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListPackagesCommand extends $Command<ListPackagesCommandInput, ListPackagesCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListPackagesCommandInput;
            constructor(input: ListPackagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackagesCommandInput, ListPackagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionAssetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListPackageVersionAssetsRequest, ListPackageVersionAssetsResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListPackageVersionAssetsCommandInput extends ListPackageVersionAssetsRequest {
    }
    export interface ListPackageVersionAssetsCommandOutput extends ListPackageVersionAssetsResult, __MetadataBearer {
    }
    /**
        * <p>
        *        Returns a list of
        *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html">AssetSummary</a>
        *        objects for assets in a package version.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListPackageVersionAssetsCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListPackageVersionAssetsCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListPackageVersionAssetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackageVersionAssetsCommandInput} for command's `input` shape.
        * @see {@link ListPackageVersionAssetsCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListPackageVersionAssetsCommand extends $Command<ListPackageVersionAssetsCommandInput, ListPackageVersionAssetsCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListPackageVersionAssetsCommandInput;
            constructor(input: ListPackageVersionAssetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackageVersionAssetsCommandInput, ListPackageVersionAssetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionDependenciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListPackageVersionDependenciesRequest, ListPackageVersionDependenciesResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListPackageVersionDependenciesCommandInput extends ListPackageVersionDependenciesRequest {
    }
    export interface ListPackageVersionDependenciesCommandOutput extends ListPackageVersionDependenciesResult, __MetadataBearer {
    }
    /**
        * <p>
        *          Returns the direct dependencies for a package version. The dependencies are returned as
        *         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html">PackageDependency</a>
        *           objects. CodeArtifact extracts the dependencies for a package version from the metadata file for the package
        *           format (for example, the <code>package.json</code> file for npm packages and the <code>pom.xml</code> file
        *         for Maven). Any package version dependencies that are not listed in the configuration file are not returned.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListPackageVersionDependenciesCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListPackageVersionDependenciesCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListPackageVersionDependenciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackageVersionDependenciesCommandInput} for command's `input` shape.
        * @see {@link ListPackageVersionDependenciesCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListPackageVersionDependenciesCommand extends $Command<ListPackageVersionDependenciesCommandInput, ListPackageVersionDependenciesCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListPackageVersionDependenciesCommandInput;
            constructor(input: ListPackageVersionDependenciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackageVersionDependenciesCommandInput, ListPackageVersionDependenciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListPackageVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListPackageVersionsRequest, ListPackageVersionsResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListPackageVersionsCommandInput extends ListPackageVersionsRequest {
    }
    export interface ListPackageVersionsCommandOutput extends ListPackageVersionsResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Returns a list of
        *         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a>
        *         objects for package versions in a repository that match the request parameters.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListPackageVersionsCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListPackageVersionsCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListPackageVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackageVersionsCommandInput} for command's `input` shape.
        * @see {@link ListPackageVersionsCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListPackageVersionsCommand extends $Command<ListPackageVersionsCommandInput, ListPackageVersionsCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListPackageVersionsCommandInput;
            constructor(input: ListPackageVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackageVersionsCommandInput, ListPackageVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListRepositoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListRepositoriesRequest, ListRepositoriesResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListRepositoriesCommandInput extends ListRepositoriesRequest {
    }
    export interface ListRepositoriesCommandOutput extends ListRepositoriesResult, __MetadataBearer {
    }
    /**
        * <p>
        *        Returns a list of
        *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a>
        *        objects. Each <code>RepositorySummary</code> contains information about a repository in the specified Amazon Web Services account and that matches the input
        *        parameters.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListRepositoriesCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListRepositoriesCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListRepositoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRepositoriesCommandInput} for command's `input` shape.
        * @see {@link ListRepositoriesCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListRepositoriesCommand extends $Command<ListRepositoriesCommandInput, ListRepositoriesCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListRepositoriesCommandInput;
            constructor(input: ListRepositoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRepositoriesCommandInput, ListRepositoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListRepositoriesInDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListRepositoriesInDomainRequest, ListRepositoriesInDomainResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListRepositoriesInDomainCommandInput extends ListRepositoriesInDomainRequest {
    }
    export interface ListRepositoriesInDomainCommandOutput extends ListRepositoriesInDomainResult, __MetadataBearer {
    }
    /**
        * <p>
        *        Returns a list of
        *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a>
        *        objects. Each <code>RepositorySummary</code> contains information about a repository in the specified domain and that matches the input
        *        parameters.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListRepositoriesInDomainCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListRepositoriesInDomainCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListRepositoriesInDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRepositoriesInDomainCommandInput} for command's `input` shape.
        * @see {@link ListRepositoriesInDomainCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListRepositoriesInDomainCommand extends $Command<ListRepositoriesInDomainCommandInput, ListRepositoriesInDomainCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListRepositoriesInDomainCommandInput;
            constructor(input: ListRepositoriesInDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRepositoriesInDomainCommandInput, ListRepositoriesInDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in CodeArtifact.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, ListTagsForResourceCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, ListTagsForResourceCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutDomainPermissionsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { PutDomainPermissionsPolicyRequest, PutDomainPermissionsPolicyResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface PutDomainPermissionsPolicyCommandInput extends PutDomainPermissionsPolicyRequest {
    }
    export interface PutDomainPermissionsPolicyCommandOutput extends PutDomainPermissionsPolicyResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Sets a resource policy on a domain that specifies permissions to access it.
        *       </p>
        *          <p>
        *        When you call <code>PutDomainPermissionsPolicy</code>, the resource policy on the domain is ignored when evaluting permissions.
        *        This ensures that the owner of a domain cannot lock themselves out of the domain, which would prevent them from being
        *        able to update the resource policy.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, PutDomainPermissionsPolicyCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, PutDomainPermissionsPolicyCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new PutDomainPermissionsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDomainPermissionsPolicyCommandInput} for command's `input` shape.
        * @see {@link PutDomainPermissionsPolicyCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class PutDomainPermissionsPolicyCommand extends $Command<PutDomainPermissionsPolicyCommandInput, PutDomainPermissionsPolicyCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: PutDomainPermissionsPolicyCommandInput;
            constructor(input: PutDomainPermissionsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDomainPermissionsPolicyCommandInput, PutDomainPermissionsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutPackageOriginConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { PutPackageOriginConfigurationRequest, PutPackageOriginConfigurationResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface PutPackageOriginConfigurationCommandInput extends PutPackageOriginConfigurationRequest {
    }
    export interface PutPackageOriginConfigurationCommandOutput extends PutPackageOriginConfigurationResult, __MetadataBearer {
    }
    /**
        * <p>Sets the package origin configuration for a package.</p>
        *          <p>The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct
        *     publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source.
        *     For more information about package origin controls and configuration, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-origin-controls.html">Editing package origin controls</a> in the <i>CodeArtifact User Guide</i>.</p>
        *          <p>
        *             <code>PutPackageOriginConfiguration</code> can be called on a package that doesn't yet exist in the repository. When called
        *       on a package that does not exist, a package is created in the repository with no versions and the requested restrictions are set on the package.
        *       This can be used to preemptively block ingesting or retaining any versions from external connections or upstream repositories, or to block
        *       publishing any versions of the package into the repository before connecting any package managers or publishers to the repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, PutPackageOriginConfigurationCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, PutPackageOriginConfigurationCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new PutPackageOriginConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPackageOriginConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutPackageOriginConfigurationCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class PutPackageOriginConfigurationCommand extends $Command<PutPackageOriginConfigurationCommandInput, PutPackageOriginConfigurationCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: PutPackageOriginConfigurationCommandInput;
            constructor(input: PutPackageOriginConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPackageOriginConfigurationCommandInput, PutPackageOriginConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/PutRepositoryPermissionsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { PutRepositoryPermissionsPolicyRequest, PutRepositoryPermissionsPolicyResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface PutRepositoryPermissionsPolicyCommandInput extends PutRepositoryPermissionsPolicyRequest {
    }
    export interface PutRepositoryPermissionsPolicyCommandOutput extends PutRepositoryPermissionsPolicyResult, __MetadataBearer {
    }
    /**
        * <p>
        *         Sets the resource policy on a repository that specifies permissions to access it.
        *       </p>
        *          <p>
        *        When you call <code>PutRepositoryPermissionsPolicy</code>, the resource policy on the repository is ignored when evaluting permissions.
        *        This ensures that the owner of a repository cannot lock themselves out of the repository, which would prevent them from being
        *        able to update the resource policy.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, PutRepositoryPermissionsPolicyCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, PutRepositoryPermissionsPolicyCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new PutRepositoryPermissionsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRepositoryPermissionsPolicyCommandInput} for command's `input` shape.
        * @see {@link PutRepositoryPermissionsPolicyCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class PutRepositoryPermissionsPolicyCommand extends $Command<PutRepositoryPermissionsPolicyCommandInput, PutRepositoryPermissionsPolicyCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: PutRepositoryPermissionsPolicyCommandInput;
            constructor(input: PutRepositoryPermissionsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRepositoryPermissionsPolicyCommandInput, PutRepositoryPermissionsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { TagResourceRequest, TagResourceResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Adds or updates tags for a resource in CodeArtifact.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, TagResourceCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, TagResourceCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { UntagResourceRequest, UntagResourceResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a resource in CodeArtifact.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, UntagResourceCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, UntagResourceCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UpdatePackageVersionsStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { UpdatePackageVersionsStatusRequest, UpdatePackageVersionsStatusResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface UpdatePackageVersionsStatusCommandInput extends UpdatePackageVersionsStatusRequest {
    }
    export interface UpdatePackageVersionsStatusCommandOutput extends UpdatePackageVersionsStatusResult, __MetadataBearer {
    }
    /**
        * <p>
        *       Updates the status of one or more versions of a package. Using <code>UpdatePackageVersionsStatus</code>,
        *       you can update the status of package versions to <code>Archived</code>, <code>Published</code>, or <code>Unlisted</code>.
        *       To set the status of a package version to <code>Disposed</code>, use
        *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DisposePackageVersions.html">DisposePackageVersions</a>.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, UpdatePackageVersionsStatusCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, UpdatePackageVersionsStatusCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new UpdatePackageVersionsStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePackageVersionsStatusCommandInput} for command's `input` shape.
        * @see {@link UpdatePackageVersionsStatusCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class UpdatePackageVersionsStatusCommand extends $Command<UpdatePackageVersionsStatusCommandInput, UpdatePackageVersionsStatusCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: UpdatePackageVersionsStatusCommandInput;
            constructor(input: UpdatePackageVersionsStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePackageVersionsStatusCommandInput, UpdatePackageVersionsStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/commands/UpdateRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeartifactClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/CodeartifactClient";
    import { UpdateRepositoryRequest, UpdateRepositoryResult } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0";
    export interface UpdateRepositoryCommandInput extends UpdateRepositoryRequest {
    }
    export interface UpdateRepositoryCommandOutput extends UpdateRepositoryResult, __MetadataBearer {
    }
    /**
        * <p>
        *          Update the properties of a repository.
        *        </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeartifactClient, UpdateRepositoryCommand } from "@aws-sdk/client-codeartifact"; // ES Modules import
        * // const { CodeartifactClient, UpdateRepositoryCommand } = require("@aws-sdk/client-codeartifact"); // CommonJS import
        * const client = new CodeartifactClient(config);
        * const command = new UpdateRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRepositoryCommandInput} for command's `input` shape.
        * @see {@link UpdateRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeartifactClientResolvedConfig | config} for CodeartifactClient's `config` shape.
        *
        */
    export class UpdateRepositoryCommand extends $Command<UpdateRepositoryCommandInput, UpdateRepositoryCommandOutput, CodeartifactClientResolvedConfig> {
            readonly input: UpdateRepositoryCommandInput;
            constructor(input: UpdateRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeartifactClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRepositoryCommandInput, UpdateRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Readable } from "stream";
    import { CodeartifactServiceException as __BaseException } from "@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/CodeartifactServiceException";
    /**
        * <p>
        *         The operation did not succeed because of an unauthorized access attempt.
        *       </p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum AllowPublish {
            ALLOW = "ALLOW",
            BLOCK = "BLOCK"
    }
    export enum AllowUpstream {
            ALLOW = "ALLOW",
            BLOCK = "BLOCK"
    }
    export enum HashAlgorithm {
            MD5 = "MD5",
            SHA1 = "SHA-1",
            SHA256 = "SHA-256",
            SHA512 = "SHA-512"
    }
    /**
        * <p>
        *         Contains details about a package version asset.
        *        </p>
        */
    export interface AssetSummary {
            /**
                * <p>
                *          The name of the asset.
                *        </p>
                */
            name: string | undefined;
            /**
                * <p>
                *       The size of the asset.
                *     </p>
                */
            size?: number;
            /**
                * <p>
                *       The hashes of the asset.
                *     </p>
                */
            hashes?: Record<string, string>;
    }
    export namespace AssetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssetSummary) => any;
    }
    export interface AssociateExternalConnectionRequest {
            /**
                * <p>The name of the domain that contains the repository.</p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The name of the repository to which the external connection is added.
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       The name of the external connection to add to the repository. The following values are supported:
                *     </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>public:npmjs</code> - for the npm public repository.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>public:pypi</code> - for the Python Package Index.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>public:maven-central</code> - for Maven Central.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>public:maven-googleandroid</code> - for the Google Android repository.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>public:maven-gradleplugins</code> - for the Gradle plugins repository.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>public:maven-commonsware</code> - for the CommonsWare Android repository.
                *         </p>
                *             </li>
                *          </ul>
                */
            externalConnection: string | undefined;
    }
    export namespace AssociateExternalConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateExternalConnectionRequest) => any;
    }
    export enum PackageFormat {
            MAVEN = "maven",
            NPM = "npm",
            NUGET = "nuget",
            PYPI = "pypi"
    }
    export enum ExternalConnectionStatus {
            AVAILABLE = "Available"
    }
    /**
        * <p>
        *         Contains information about the external connection of a repository.
        *       </p>
        */
    export interface RepositoryExternalConnectionInfo {
            /**
                * <p> The name of the external connection associated with a repository. </p>
                */
            externalConnectionName?: string;
            /**
                * <p>
                *         The package format associated with a repository's external connection. The valid package formats are:
                *       </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>npm</code>: A Node Package Manager (npm) package.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>pypi</code>: A Python Package Index (PyPI) package.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>maven</code>: A Maven package that contains compiled code in a distributable format, such as a JAR file.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>nuget</code>: A NuGet package.
                *         </p>
                *             </li>
                *          </ul>
                */
            packageFormat?: PackageFormat | string;
            /**
                * <p>
                *         The status of the external connection of a repository. There is one valid value, <code>Available</code>.
                *       </p>
                */
            status?: ExternalConnectionStatus | string;
    }
    export namespace RepositoryExternalConnectionInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryExternalConnectionInfo) => any;
    }
    /**
        * <p>
        *         Information about an upstream repository.
        *       </p>
        */
    export interface UpstreamRepositoryInfo {
            /**
                * <p> The name of an upstream repository. </p>
                */
            repositoryName?: string;
    }
    export namespace UpstreamRepositoryInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpstreamRepositoryInfo) => any;
    }
    /**
        * <p> The details of a repository stored in CodeArtifact. A CodeArtifact repository contains a set of
        *       package versions, each of which maps to a set of assets. Repositories are polyglot—a single
        *       repository can contain packages of any supported type. Each repository exposes endpoints for
        *       fetching and publishing packages using tools like the <code>npm</code> CLI, the Maven CLI
        *         (<code>mvn</code>), and <code>pip</code>. You can create up to 100 repositories per Amazon Web Services
        *       account. </p>
        */
    export interface RepositoryDescription {
            /**
                * <p>
                *         The name of the repository.
                *        </p>
                */
            name?: string;
            /**
                * <p> The 12-digit account number of the Amazon Web Services account that manages the repository. </p>
                */
            administratorAccount?: string;
            /**
                * <p>
                *         The name of the domain that contains the repository.
                *        </p>
                */
            domainName?: string;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain that contains the repository. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p> The Amazon Resource Name (ARN) of the repository. </p>
                */
            arn?: string;
            /**
                * <p>
                *       A text description of the repository.
                *     </p>
                */
            description?: string;
            /**
                * <p> A list of upstream repositories to associate with the repository. The order of the upstream repositories
                *         in the list determines their priority order when CodeArtifact looks for a requested package version. For more
                *         information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. </p>
                */
            upstreams?: UpstreamRepositoryInfo[];
            /**
                * <p>
                *       An array of external connections associated with the repository.
                *     </p>
                */
            externalConnections?: RepositoryExternalConnectionInfo[];
    }
    export namespace RepositoryDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryDescription) => any;
    }
    export interface AssociateExternalConnectionResult {
            /**
                * <p>
                *         Information about the connected repository after processing the request.
                *        </p>
                */
            repository?: RepositoryDescription;
    }
    export namespace AssociateExternalConnectionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateExternalConnectionResult) => any;
    }
    export enum ResourceType {
            ASSET = "asset",
            DOMAIN = "domain",
            PACKAGE = "package",
            PACKAGE_VERSION = "package-version",
            REPOSITORY = "repository"
    }
    /**
        * <p>
        *         The operation did not succeed because prerequisites are not met.
        *       </p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>
                *       The ID of the resource.
                *     </p>
                */
            resourceId?: string;
            /**
                * <p>
                *       The type of Amazon Web Services resource.
                *     </p>
                */
            resourceType?: ResourceType | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p> The operation did not succeed because of an error that occurred inside CodeArtifact. </p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>
        *       The operation did not succeed because the resource requested is not found in the service.
        *     </p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>
                *       The ID of the resource.
                *     </p>
                */
            resourceId?: string;
            /**
                * <p>
                *       The type of Amazon Web Services resource.
                *     </p>
                */
            resourceType?: ResourceType | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>
        *         The operation did not succeed because it would have exceeded a service limit for your account.
        *       </p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>
                *       The ID of the resource.
                *     </p>
                */
            resourceId?: string;
            /**
                * <p>
                *       The type of Amazon Web Services resource.
                *     </p>
                */
            resourceType?: ResourceType | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>
        *       The operation did not succeed because too many requests are sent to the service.
        *     </p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * <p>
                *       The time period, in seconds, to wait before retrying the request.
                *     </p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CANNOT_PARSE",
            ENCRYPTION_KEY_ERROR = "ENCRYPTION_KEY_ERROR",
            FIELD_VALIDATION_FAILED = "FIELD_VALIDATION_FAILED",
            OTHER = "OTHER",
            UNKNOWN_OPERATION = "UNKNOWN_OPERATION"
    }
    /**
        * <p>
        *       The operation did not succeed because a parameter in the request was sent with an invalid value.
        *     </p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>
                *
                *     </p>
                */
            reason?: ValidationExceptionReason | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface CopyPackageVersionsRequest {
            /**
                * <p>
                *         The name of the domain that contains the source and destination repositories.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *          The name of the repository that contains the package versions to be copied.
                *        </p>
                */
            sourceRepository: string | undefined;
            /**
                * <p>
                *       The name of the repository into which package versions are copied.
                *     </p>
                */
            destinationRepository: string | undefined;
            /**
                * <p>
                *       The format of the package versions to be copied.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package versions to be copied. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when copying Maven package versions.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package that contains the versions to be copied.
                *     </p>
                */
            package: string | undefined;
            /**
                * <p>
                *         The versions of the package to be copied.
                *       </p>
                *          <note>
                *             <p>
                *         You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.
                *       </p>
                *          </note>
                */
            versions?: string[];
            /**
                * <p>
                *        A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation
                *       succeeds if the specified versions in the source repository match the specified package version revision.
                *     </p>
                *          <note>
                *             <p>
                *         You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.
                *       </p>
                *          </note>
                */
            versionRevisions?: Record<string, string>;
            /**
                * <p>
                *        Set to true to overwrite a package version that already exists in the destination repository.
                *        If set to false and the package version already exists in the destination repository,
                *        the package version is returned in the <code>failedVersions</code> field of the response with
                *        an <code>ALREADY_EXISTS</code> error code.
                *      </p>
                */
            allowOverwrite?: boolean;
            /**
                * <p> Set to true to copy packages from repositories that are upstream from the source
                *       repository to the destination repository. The default setting is false. For more information,
                *       see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with
                *         upstream repositories</a>. </p>
                */
            includeFromUpstream?: boolean;
    }
    export namespace CopyPackageVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyPackageVersionsRequest) => any;
    }
    export enum PackageVersionErrorCode {
            ALREADY_EXISTS = "ALREADY_EXISTS",
            MISMATCHED_REVISION = "MISMATCHED_REVISION",
            MISMATCHED_STATUS = "MISMATCHED_STATUS",
            NOT_ALLOWED = "NOT_ALLOWED",
            NOT_FOUND = "NOT_FOUND",
            SKIPPED = "SKIPPED"
    }
    /**
        * <p>l
        *        An error associated with package.
        *    </p>
        */
    export interface PackageVersionError {
            /**
                * <p> The error code associated with the error. Valid error codes are: </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALREADY_EXISTS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_REVISION</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_STATUS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_ALLOWED</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_FOUND</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SKIPPED</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            errorCode?: PackageVersionErrorCode | string;
            /**
                * <p>
                *          The error message associated with the error.
                *      </p>
                */
            errorMessage?: string;
    }
    export namespace PackageVersionError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVersionError) => any;
    }
    export enum PackageVersionStatus {
            ARCHIVED = "Archived",
            DELETED = "Deleted",
            DISPOSED = "Disposed",
            PUBLISHED = "Published",
            UNFINISHED = "Unfinished",
            UNLISTED = "Unlisted"
    }
    /**
        * <p>
        *       Contains the revision and status of a package version.
        *     </p>
        */
    export interface SuccessfulPackageVersionInfo {
            /**
                * <p>
                *       The revision of a package version.
                *     </p>
                */
            revision?: string;
            /**
                * <p>
                *       The status of a package version.
                *     </p>
                */
            status?: PackageVersionStatus | string;
    }
    export namespace SuccessfulPackageVersionInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuccessfulPackageVersionInfo) => any;
    }
    export interface CopyPackageVersionsResult {
            /**
                * <p>
                *       A list of the package versions that were successfully copied to your repository.
                *     </p>
                */
            successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
            /**
                * <p>
                *       A map of package versions that failed to copy and their error codes. The possible error codes are in
                *       the <code>PackageVersionError</code> data type. They are:
                *     </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALREADY_EXISTS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_REVISION</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_STATUS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_ALLOWED</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_FOUND</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SKIPPED</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            failedVersions?: Record<string, PackageVersionError>;
    }
    export namespace CopyPackageVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyPackageVersionsResult) => any;
    }
    /**
        * <p>A tag is a key-value pair that can be used to manage, search for, or filter resources in CodeArtifact.</p>
        */
    export interface Tag {
            /**
                * <p>The tag key.</p>
                */
            key: string | undefined;
            /**
                * <p>The tag value.</p>
                */
            value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateDomainRequest {
            /**
                * <p> The name of the domain to create. All domain names in an Amazon Web Services Region that are in the
                *       same Amazon Web Services account must be unique. The domain name is used as the prefix in DNS hostnames. Do
                *       not use sensitive information in a domain name because it is publicly discoverable. </p>
                */
            domain: string | undefined;
            /**
                * <p> The encryption key for the domain. This is used to encrypt content stored in a domain.
                *       An encryption key can be a key ID, a key Amazon Resource Name (ARN), a key alias, or a key
                *       alias ARN. To specify an <code>encryptionKey</code>, your IAM role must have
                *         <code>kms:DescribeKey</code> and <code>kms:CreateGrant</code> permissions on the encryption
                *       key that is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestSyntax">DescribeKey</a> in the <i>Key Management Service API Reference</i>
                *       and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">Key Management Service API Permissions
                *         Reference</a> in the <i>Key Management Service Developer Guide</i>. </p>
                *          <important>
                *             <p> CodeArtifact supports only symmetric CMKs. Do not associate an asymmetric CMK with your
                *         domain. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and asymmetric
                *           keys</a> in the <i>Key Management Service Developer Guide</i>. </p>
                *          </important>
                */
            encryptionKey?: string;
            /**
                * <p>One or more tag key-value pairs for the domain.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainRequest) => any;
    }
    export enum DomainStatus {
            ACTIVE = "Active",
            DELETED = "Deleted"
    }
    /**
        * <p>
        *        Information about a domain. A domain is a container for repositories. When you create a domain, it is empty until you
        *        add one or more repositories.
        *       </p>
        */
    export interface DomainDescription {
            /**
                * <p>
                *          The name of the domain.
                *        </p>
                */
            name?: string;
            /**
                * <p> The Amazon Web Services account ID that owns the domain. </p>
                */
            owner?: string;
            /**
                * <p> The Amazon Resource Name (ARN) of the domain. </p>
                */
            arn?: string;
            /**
                * <p>
                *         The current status of a domain.
                *       </p>
                */
            status?: DomainStatus | string;
            /**
                * <p>
                *       A timestamp that represents the date and time the domain was created.
                *     </p>
                */
            createdTime?: Date;
            /**
                * <p> The ARN of an Key Management Service (KMS) key associated with a domain. </p>
                */
            encryptionKey?: string;
            /**
                * <p>
                *       The number of repositories in the domain.
                *     </p>
                */
            repositoryCount?: number;
            /**
                * <p>
                *       The total size of all assets in the domain.
                *     </p>
                */
            assetSizeBytes?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket that is used to store package assets in the domain.</p>
                */
            s3BucketArn?: string;
    }
    export namespace DomainDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainDescription) => any;
    }
    export interface CreateDomainResult {
            /**
                * <p>
                *         Contains information about the created domain after processing the request.
                *       </p>
                */
            domain?: DomainDescription;
    }
    export namespace CreateDomainResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainResult) => any;
    }
    /**
        * <p>
        *        Information about an upstream repository. A list of <code>UpstreamRepository</code> objects is an input parameter to
        *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_CreateRepository.html">CreateRepository</a>
        *        and <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdateRepository.html">UpdateRepository</a>.
        *      </p>
        */
    export interface UpstreamRepository {
            /**
                * <p> The name of an upstream repository. </p>
                */
            repositoryName: string | undefined;
    }
    export namespace UpstreamRepository {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpstreamRepository) => any;
    }
    export interface CreateRepositoryRequest {
            /**
                * <p>
                *         The name of the domain that contains the created repository.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p> The name of the repository to create. </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       A description of the created repository.
                *     </p>
                */
            description?: string;
            /**
                * <p> A list of upstream repositories to associate with the repository. The order of the upstream repositories
                *         in the list determines their priority order when CodeArtifact looks for a requested package version. For more
                *         information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. </p>
                */
            upstreams?: UpstreamRepository[];
            /**
                * <p>One or more tag key-value pairs for the repository.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateRepositoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRepositoryRequest) => any;
    }
    export interface CreateRepositoryResult {
            /**
                * <p>
                *         Information about the created repository after processing the request.
                *       </p>
                */
            repository?: RepositoryDescription;
    }
    export namespace CreateRepositoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRepositoryResult) => any;
    }
    export interface DeleteDomainRequest {
            /**
                * <p>
                *          The name of the domain to delete.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
    }
    export namespace DeleteDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainRequest) => any;
    }
    export interface DeleteDomainResult {
            /**
                * <p>
                *         Contains information about the deleted domain after processing the request.
                *        </p>
                */
            domain?: DomainDescription;
    }
    export namespace DeleteDomainResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainResult) => any;
    }
    export interface DeleteDomainPermissionsPolicyRequest {
            /**
                * <p>
                *         The name of the domain associated with the resource policy to be deleted.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *         The current revision of the resource policy to be deleted. This revision is used for optimistic locking, which
                *         prevents others from overwriting your changes to the domain's resource policy.
                *       </p>
                */
            policyRevision?: string;
    }
    export namespace DeleteDomainPermissionsPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainPermissionsPolicyRequest) => any;
    }
    /**
        * <p>
        *         An CodeArtifact resource policy that contains a resource ARN, document details, and a revision.
        *       </p>
        */
    export interface ResourcePolicy {
            /**
                * <p>
                *         The ARN of the resource associated with the resource policy
                *       </p>
                */
            resourceArn?: string;
            /**
                * <p>
                *         The current revision of the resource policy.
                *       </p>
                */
            revision?: string;
            /**
                * <p>
                *       The resource policy formatted in JSON.
                *     </p>
                */
            document?: string;
    }
    export namespace ResourcePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourcePolicy) => any;
    }
    export interface DeleteDomainPermissionsPolicyResult {
            /**
                * <p>
                *         Information about the deleted resource policy after processing the request.
                *       </p>
                */
            policy?: ResourcePolicy;
    }
    export namespace DeleteDomainPermissionsPolicyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainPermissionsPolicyResult) => any;
    }
    export interface DeletePackageVersionsRequest {
            /**
                * <p>
                *         The name of the domain that contains the package to delete.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *         The name of the repository that contains the package versions to delete.
                *       </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *         The format of the package versions to delete.
                *       </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package versions to be deleted. The package version component that specifies its
                *         namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *             The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions.
                *           </p>
                *             </li>
                *             <li>
                *                <p>
                *             The namespace of an npm package version is its <code>scope</code>.
                *           </p>
                *             </li>
                *             <li>
                *                <p>
                *             Python and NuGet package versions do not contain a corresponding component, package versions
                *             of those formats do not have a namespace.
                *           </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *         The name of the package with the versions to delete.
                *       </p>
                */
            package: string | undefined;
            /**
                * <p>
                *         An array of strings that specify the versions of the package to delete.
                *       </p>
                */
            versions: string[] | undefined;
            /**
                * <p>
                *         The expected status of the package version to delete.
                *       </p>
                */
            expectedStatus?: PackageVersionStatus | string;
    }
    export namespace DeletePackageVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackageVersionsRequest) => any;
    }
    export interface DeletePackageVersionsResult {
            /**
                * <p>
                *        A list of the package versions that were successfully deleted. The
                *        status of every successful version will be <code>Deleted</code>.
                *      </p>
                */
            successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
            /**
                * <p>
                *        A <code>PackageVersionError</code> object that contains a map of errors codes for the
                *        deleted package that failed. The possible error codes are:
                *      </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALREADY_EXISTS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_REVISION</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_STATUS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_ALLOWED</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_FOUND</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SKIPPED</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            failedVersions?: Record<string, PackageVersionError>;
    }
    export namespace DeletePackageVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackageVersionsResult) => any;
    }
    export interface DeleteRepositoryRequest {
            /**
                * <p>
                *          The name of the domain that contains the repository to delete.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p> The name of the repository to delete. </p>
                */
            repository: string | undefined;
    }
    export namespace DeleteRepositoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRepositoryRequest) => any;
    }
    export interface DeleteRepositoryResult {
            /**
                * <p>
                *         Information about the deleted repository after processing the request.
                *        </p>
                */
            repository?: RepositoryDescription;
    }
    export namespace DeleteRepositoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRepositoryResult) => any;
    }
    export interface DeleteRepositoryPermissionsPolicyRequest {
            /**
                * <p>
                *         The name of the domain that contains the repository associated with the resource policy to be deleted.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The name of the repository that is associated with the resource policy to be deleted
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       The revision of the repository's resource policy to be deleted. This revision is used for optimistic locking, which
                *       prevents others from accidentally overwriting your changes to the repository's resource policy.
                *     </p>
                */
            policyRevision?: string;
    }
    export namespace DeleteRepositoryPermissionsPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRepositoryPermissionsPolicyRequest) => any;
    }
    export interface DeleteRepositoryPermissionsPolicyResult {
            /**
                * <p>
                *       Information about the deleted policy after processing the request.
                *     </p>
                */
            policy?: ResourcePolicy;
    }
    export namespace DeleteRepositoryPermissionsPolicyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRepositoryPermissionsPolicyResult) => any;
    }
    export interface DescribeDomainRequest {
            /**
                * <p>
                *          A string that specifies the name of the requested domain.
                *      </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
    }
    export namespace DescribeDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainRequest) => any;
    }
    export interface DescribeDomainResult {
            /**
                * <p>
                *        Information about a domain. A domain is a container for repositories. When you create a domain, it is empty until you
                *        add one or more repositories.
                *       </p>
                */
            domain?: DomainDescription;
    }
    export namespace DescribeDomainResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainResult) => any;
    }
    export interface DescribePackageRequest {
            /**
                * <p>The name of the domain that contains the repository that contains the package.</p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>The name of the repository that contains the requested package. </p>
                */
            repository: string | undefined;
            /**
                * <p>A format that specifies the type of the requested package.</p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the requested package. The package component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package is its <code>groupId</code>. The namespace is required when requesting Maven packages.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet packages do not contain a corresponding component, packages
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>The name of the requested package.</p>
                */
            package: string | undefined;
    }
    export namespace DescribePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageRequest) => any;
    }
    /**
        * <p>Details about the origin restrictions set on the package.
        *       The package origin restrictions determine how new versions of a package
        *       can be added to a specific repository.</p>
        */
    export interface PackageOriginRestrictions {
            /**
                * <p>The package origin configuration that determines if new versions of the package can be published directly to the repository.</p>
                */
            publish: AllowPublish | string | undefined;
            /**
                * <p>The package origin configuration that determines if new versions of the package can be added to the repository from an external connection or upstream source.</p>
                */
            upstream: AllowUpstream | string | undefined;
    }
    export namespace PackageOriginRestrictions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageOriginRestrictions) => any;
    }
    /**
        * <p>Details about the package origin configuration of a package.</p>
        */
    export interface PackageOriginConfiguration {
            /**
                * <p>A <code>PackageOriginRestrictions</code> object that contains information
                *     about the upstream and publish package origin configuration for the package.</p>
                */
            restrictions?: PackageOriginRestrictions;
    }
    export namespace PackageOriginConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageOriginConfiguration) => any;
    }
    /**
        * <p>Details about a package.</p>
        */
    export interface PackageDescription {
            /**
                * <p>A format that specifies the type of the package.</p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace of the package. The package component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet packages do not contain a corresponding component, packages
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>The name of the package.</p>
                */
            name?: string;
            /**
                * <p>The package origin configuration for the package.</p>
                */
            originConfiguration?: PackageOriginConfiguration;
    }
    export namespace PackageDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageDescription) => any;
    }
    export interface DescribePackageResult {
            /**
                * <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a>
                *       object that contains information about the requested package.</p>
                */
            package: PackageDescription | undefined;
    }
    export namespace DescribePackageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageResult) => any;
    }
    export interface DescribePackageVersionRequest {
            /**
                * <p>
                *       The name of the domain that contains the repository that contains the package version.
                *     </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p> The name of the repository that contains the package version. </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       A format that specifies the type of the requested package version.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the requested package version. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p> The name of the requested package version. </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       A string that contains the package version (for example, <code>3.5.2</code>).
                *     </p>
                */
            packageVersion: string | undefined;
    }
    export namespace DescribePackageVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageVersionRequest) => any;
    }
    /**
        * <p>
        *         Details of the license data.
        *       </p>
        */
    export interface LicenseInfo {
            /**
                * <p>
                *         Name of the license.
                *       </p>
                */
            name?: string;
            /**
                * <p>
                *         The URL for license data.
                *       </p>
                */
            url?: string;
    }
    export namespace LicenseInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LicenseInfo) => any;
    }
    /**
        * <p>Information about how a package originally entered the CodeArtifact domain. For packages published directly to CodeArtifact, the entry point is the repository it was published to.
        *       For packages ingested from an external repository, the entry point is the external connection that it was ingested from. An external
        *     connection is a CodeArtifact repository that is connected to an external repository such as the npm registry or NuGet gallery.</p>
        */
    export interface DomainEntryPoint {
            /**
                * <p>The name of the repository that a package was originally published to.</p>
                */
            repositoryName?: string;
            /**
                * <p>The name of the external connection that a package was ingested from.</p>
                */
            externalConnectionName?: string;
    }
    export namespace DomainEntryPoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainEntryPoint) => any;
    }
    export enum PackageVersionOriginType {
            EXTERNAL = "EXTERNAL",
            INTERNAL = "INTERNAL",
            UNKNOWN = "UNKNOWN"
    }
    /**
        * <p>Information about how a package version was added to a repository.</p>
        */
    export interface PackageVersionOrigin {
            /**
                * <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainEntryPoint.html">DomainEntryPoint</a> object that contains
                *     information about from which repository or external connection the package version was added to the domain.</p>
                */
            domainEntryPoint?: DomainEntryPoint;
            /**
                * <p>Describes how the package version was originally added to the domain. An <code>INTERNAL</code> origin type means the package version was published
                *     directly to a repository in the domain. An <code>EXTERNAL</code> origin type means the package version was ingested from an external connection.</p>
                */
            originType?: PackageVersionOriginType | string;
    }
    export namespace PackageVersionOrigin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVersionOrigin) => any;
    }
    /**
        * <p>
        *       Details about a package version.
        *     </p>
        */
    export interface PackageVersionDescription {
            /**
                * <p>
                *       The format of the package version.
                *     </p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace of the package version. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the requested package.
                *     </p>
                */
            packageName?: string;
            /**
                * <p>
                *       The name of the package that is displayed. The <code>displayName</code> varies depending
                *       on the package version's format. For example, if an npm package is named <code>ui</code>,
                *       is in the namespace <code>vue</code>, and has the format <code>npm</code>, then
                *       the <code>displayName</code> is <code>@vue/ui</code>.
                *     </p>
                */
            displayName?: string;
            /**
                * <p>
                *       The version of the package.
                *     </p>
                */
            version?: string;
            /**
                * <p>
                *       A summary of the package version. The summary is extracted from the package. The information in and
                *       detail level of the summary depends on the package version's format.
                *     </p>
                */
            summary?: string;
            /**
                * <p>
                *       The homepage associated with the package.
                *     </p>
                */
            homePage?: string;
            /**
                * <p>
                *       The repository for the source code in the package version, or the source code used to build it.
                *     </p>
                */
            sourceCodeRepository?: string;
            /**
                * <p>
                *       A timestamp that contains the date and time the package version was published.
                *     </p>
                */
            publishedTime?: Date;
            /**
                * <p>
                *       Information about licenses associated with the package version.
                *     </p>
                */
            licenses?: LicenseInfo[];
            /**
                * <p>
                *       The revision of the package version.
                *     </p>
                */
            revision?: string;
            /**
                * <p>
                *       A string that contains the status of the package version.
                *     </p>
                */
            status?: PackageVersionStatus | string;
            /**
                * <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionOrigin.html">PackageVersionOrigin</a> object that contains
                *     information about how the package version was added to the repository.</p>
                */
            origin?: PackageVersionOrigin;
    }
    export namespace PackageVersionDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVersionDescription) => any;
    }
    export interface DescribePackageVersionResult {
            /**
                * <p>
                *       A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
                *       object that contains information about the requested package version.
                *     </p>
                */
            packageVersion: PackageVersionDescription | undefined;
    }
    export namespace DescribePackageVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageVersionResult) => any;
    }
    export interface DescribeRepositoryRequest {
            /**
                * <p>
                *          The name of the domain that contains the repository to describe.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *         A string that specifies the name of the requested repository.
                *        </p>
                */
            repository: string | undefined;
    }
    export namespace DescribeRepositoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRepositoryRequest) => any;
    }
    export interface DescribeRepositoryResult {
            /**
                * <p>
                *          A <code>RepositoryDescription</code> object that contains the requested repository information.
                *        </p>
                */
            repository?: RepositoryDescription;
    }
    export namespace DescribeRepositoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRepositoryResult) => any;
    }
    export interface DisassociateExternalConnectionRequest {
            /**
                * <p>The name of the domain that contains the repository from which to remove the external
                *       repository. </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>The name of the repository from which the external connection will be removed. </p>
                */
            repository: string | undefined;
            /**
                * <p>The name of the external connection to be removed from the repository. </p>
                */
            externalConnection: string | undefined;
    }
    export namespace DisassociateExternalConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateExternalConnectionRequest) => any;
    }
    export interface DisassociateExternalConnectionResult {
            /**
                * <p>
                *       The repository associated with the removed external connection.
                *     </p>
                */
            repository?: RepositoryDescription;
    }
    export namespace DisassociateExternalConnectionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateExternalConnectionResult) => any;
    }
    export interface DisposePackageVersionsRequest {
            /**
                * <p>
                *       The name of the domain that contains the repository you want to dispose.
                *     </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The name of the repository that contains the package versions you want to dispose.
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       A format that specifies the type of package versions you want to dispose.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package versions to be disposed. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package with the versions you want to dispose.
                *     </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       The versions of the package you want to dispose.
                *     </p>
                */
            versions: string[] | undefined;
            /**
                * <p>
                *       The revisions of the package versions you want to dispose.
                *     </p>
                */
            versionRevisions?: Record<string, string>;
            /**
                * <p>
                *       The expected status of the package version to dispose.
                *     </p>
                */
            expectedStatus?: PackageVersionStatus | string;
    }
    export namespace DisposePackageVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisposePackageVersionsRequest) => any;
    }
    export interface DisposePackageVersionsResult {
            /**
                * <p>
                *       A list of the package versions that were successfully disposed.
                *     </p>
                */
            successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
            /**
                * <p>
                *       A <code>PackageVersionError</code> object that contains a map of errors codes for the
                *       disposed package versions that failed. The possible error codes are:
                *     </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALREADY_EXISTS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_REVISION</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MISMATCHED_STATUS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_ALLOWED</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_FOUND</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SKIPPED</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            failedVersions?: Record<string, PackageVersionError>;
    }
    export namespace DisposePackageVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisposePackageVersionsResult) => any;
    }
    export interface GetAuthorizationTokenRequest {
            /**
                * <p>
                *         The name of the domain that is in scope for the generated authorization token.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>The time, in seconds, that the generated authorization token is valid. Valid values are
                *     <code>0</code> and any number between <code>900</code> (15 minutes) and <code>43200</code> (12 hours).
                *     A value of <code>0</code> will set the expiration of the authorization token to the same expiration of
                *     the user's role's temporary credentials.</p>
                */
            durationSeconds?: number;
    }
    export namespace GetAuthorizationTokenRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizationTokenRequest) => any;
    }
    export interface GetAuthorizationTokenResult {
            /**
                * <p>
                *         The returned authentication token.
                *        </p>
                */
            authorizationToken?: string;
            /**
                * <p>
                *       A timestamp that specifies the date and time the authorization token expires.
                *     </p>
                */
            expiration?: Date;
    }
    export namespace GetAuthorizationTokenResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizationTokenResult) => any;
    }
    export interface GetDomainPermissionsPolicyRequest {
            /**
                * <p>
                *         The name of the domain to which the resource policy is attached.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
    }
    export namespace GetDomainPermissionsPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainPermissionsPolicyRequest) => any;
    }
    export interface GetDomainPermissionsPolicyResult {
            /**
                * <p>
                *         The returned resource policy.
                *       </p>
                */
            policy?: ResourcePolicy;
    }
    export namespace GetDomainPermissionsPolicyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainPermissionsPolicyResult) => any;
    }
    export interface GetPackageVersionAssetRequest {
            /**
                * <p>
                *       The name of the domain that contains the repository that contains the package version with the requested asset.
                *     </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The repository that contains the package version with the requested asset.
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       A format that specifies the type of the package version with the requested asset file.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package version with the requested asset file. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package that contains the requested asset.
                *     </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       A string that contains the package version (for example, <code>3.5.2</code>).
                *     </p>
                */
            packageVersion: string | undefined;
            /**
                * <p>
                *       The name of the requested asset.
                *     </p>
                */
            asset: string | undefined;
            /**
                * <p>
                *         The name of the package version revision that contains the requested asset.
                *     </p>
                */
            packageVersionRevision?: string;
    }
    export namespace GetPackageVersionAssetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPackageVersionAssetRequest) => any;
    }
    export interface GetPackageVersionAssetResult {
            /**
                * <p> The binary file, or asset, that is downloaded.</p>
                */
            asset?: Readable | ReadableStream | Blob;
            /**
                * <p>
                *       The name of the asset that is downloaded.
                *     </p>
                */
            assetName?: string;
            /**
                * <p>
                *       A string that contains the package version (for example, <code>3.5.2</code>).
                *     </p>
                */
            packageVersion?: string;
            /**
                * <p>
                *       The name of the package version revision that contains the downloaded asset.
                *     </p>
                */
            packageVersionRevision?: string;
    }
    export namespace GetPackageVersionAssetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPackageVersionAssetResult) => any;
    }
    export interface GetPackageVersionReadmeRequest {
            /**
                * <p>
                *       The name of the domain that contains the repository that contains the package version with the requested readme file.
                *     </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The repository that contains the package with the requested readme file.
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       A format that specifies the type of the package version with the requested readme file.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package version with the requested readme file. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package version that contains the requested readme file.
                *     </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       A string that contains the package version (for example, <code>3.5.2</code>).
                *     </p>
                */
            packageVersion: string | undefined;
    }
    export namespace GetPackageVersionReadmeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPackageVersionReadmeRequest) => any;
    }
    export interface GetPackageVersionReadmeResult {
            /**
                * <p>
                *       The format of the package with the requested readme file.
                *     </p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace of the package version with the requested readme file. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package that contains the returned readme file.
                *     </p>
                */
            package?: string;
            /**
                * <p>
                *       The version of the package with the requested readme file.
                *     </p>
                */
            version?: string;
            /**
                * <p>
                *       The current revision associated with the package version.
                *     </p>
                */
            versionRevision?: string;
            /**
                * <p>
                *       The text of the returned readme file.
                *     </p>
                */
            readme?: string;
    }
    export namespace GetPackageVersionReadmeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPackageVersionReadmeResult) => any;
    }
    export interface GetRepositoryEndpointRequest {
            /**
                * <p>
                *          The name of the domain that contains the repository.
                *      </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain that contains the repository. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *          The name of the repository.
                *      </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       Returns which endpoint of a repository to return. A repository has one endpoint for each
                *       package format.
                *     </p>
                */
            format: PackageFormat | string | undefined;
    }
    export namespace GetRepositoryEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryEndpointRequest) => any;
    }
    export interface GetRepositoryEndpointResult {
            /**
                * <p>
                *          A string that specifies the URL of the returned endpoint.
                *      </p>
                */
            repositoryEndpoint?: string;
    }
    export namespace GetRepositoryEndpointResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryEndpointResult) => any;
    }
    export interface GetRepositoryPermissionsPolicyRequest {
            /**
                * <p>
                *         The name of the domain containing the repository whose associated resource policy is to be retrieved.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *         The name of the repository whose associated resource policy is to be retrieved.
                *       </p>
                */
            repository: string | undefined;
    }
    export namespace GetRepositoryPermissionsPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryPermissionsPolicyRequest) => any;
    }
    export interface GetRepositoryPermissionsPolicyResult {
            /**
                * <p>
                *         The returned resource policy.
                *       </p>
                */
            policy?: ResourcePolicy;
    }
    export namespace GetRepositoryPermissionsPolicyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryPermissionsPolicyResult) => any;
    }
    export interface ListDomainsRequest {
            /**
                * <p>
                *         The maximum number of results to return per page.
                *        </p>
                */
            maxResults?: number;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListDomainsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsRequest) => any;
    }
    /**
        * <p> Information about a domain, including its name, Amazon Resource Name (ARN), and status.
        *       The <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListDomains.html">ListDomains</a> operation returns a list of <code>DomainSummary</code>
        *       objects. </p>
        */
    export interface DomainSummary {
            /**
                * <p>
                *       The name of the domain.
                *     </p>
                */
            name?: string;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            owner?: string;
            /**
                * <p>
                *       The ARN of the domain.
                *     </p>
                */
            arn?: string;
            /**
                * <p>
                *       A string that contains the status of the domain.
                *     </p>
                */
            status?: DomainStatus | string;
            /**
                * <p>
                *       A timestamp that contains the date and time the domain was created.
                *     </p>
                */
            createdTime?: Date;
            /**
                * <p>
                *       The key used to encrypt the domain.
                *     </p>
                */
            encryptionKey?: string;
    }
    export namespace DomainSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainSummary) => any;
    }
    export interface ListDomainsResult {
            /**
                * <p>
                *       The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainSummary.html">DomainSummary</a> objects.
                *      </p>
                */
            domains?: DomainSummary[];
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListDomainsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsResult) => any;
    }
    export interface ListPackagesRequest {
            /**
                * <p>
                *         The name of the domain that contains the repository that contains the requested packages.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *          The name of the repository that contains the requested packages.
                *        </p>
                */
            repository: string | undefined;
            /**
                * <p>The format used to filter requested packages. Only packages from the provided format will be returned.</p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace used to filter requested packages. Only packages with the provided namespace will be returned.
                *       The package component that specifies its namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet packages do not contain a corresponding component, packages
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       A prefix used to filter requested packages. Only packages with names that start with
                *       <code>packagePrefix</code> are returned.
                *     </p>
                */
            packagePrefix?: string;
            /**
                * <p>
                *         The maximum number of results to return per page.
                *        </p>
                */
            maxResults?: number;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
            /**
                * <p>The value of the <code>Publish</code> package origin control restriction used to filter requested packages.
                *       Only packages with the provided restriction are returned.
                *       For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>.</p>
                */
            publish?: AllowPublish | string;
            /**
                * <p>The value of the <code>Upstream</code> package origin control restriction used to filter requested packages.
                *       Only packages with the provided restriction are returned. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>.</p>
                */
            upstream?: AllowUpstream | string;
    }
    export namespace ListPackagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagesRequest) => any;
    }
    /**
        * <p>
        *       Details about a package, including its format, namespace, and name. The
        *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackages.html">ListPackages</a>
        *       operation returns a list of <code>PackageSummary</code> objects.
        *     </p>
        */
    export interface PackageSummary {
            /**
                * <p>
                *       The format of the package.
                *     </p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace of the package. The package component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet packages do not contain a corresponding component, packages
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package.
                *     </p>
                */
            package?: string;
            /**
                * <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginConfiguration.html">PackageOriginConfiguration</a>
                *       object that contains a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a> object
                *       that contains information about the upstream and publish package origin restrictions.</p>
                */
            originConfiguration?: PackageOriginConfiguration;
    }
    export namespace PackageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageSummary) => any;
    }
    export interface ListPackagesResult {
            /**
                * <p>
                *         The list of returned <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html">PackageSummary</a>
                *         objects.
                *        </p>
                */
            packages?: PackageSummary[];
            /**
                * <p>
                *         If there are additional results, this is the token for the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListPackagesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagesResult) => any;
    }
    export interface ListPackageVersionAssetsRequest {
            /**
                * <p>
                *          The name of the domain that contains the repository associated with the package version assets.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The name of the repository that contains the package that contains the requested package version assets.
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       The format of the package that contains the requested package version assets.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package version that contains the requested package version assets. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *          The name of the package that contains the requested package version assets.
                *        </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       A string that contains the package version (for example, <code>3.5.2</code>).
                *     </p>
                */
            packageVersion: string | undefined;
            /**
                * <p>
                *         The maximum number of results to return per page.
                *        </p>
                */
            maxResults?: number;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListPackageVersionAssetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageVersionAssetsRequest) => any;
    }
    export interface ListPackageVersionAssetsResult {
            /**
                * <p>
                *       The format of the package that contains the requested package version assets.
                *     </p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace of the package version that contains the requested package version assets. The package version component that specifies its
                *        namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *            The namespace of a Maven package version is its <code>groupId</code>.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *            The namespace of an npm package version is its <code>scope</code>.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *            Python and NuGet package versions do not contain a corresponding component, package versions
                *            of those formats do not have a namespace.
                *          </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package that contains the requested package version assets.
                *     </p>
                */
            package?: string;
            /**
                * <p>
                *       The version of the package associated with the requested assets.
                *     </p>
                */
            version?: string;
            /**
                * <p>
                *       The current revision associated with the package version.
                *     </p>
                */
            versionRevision?: string;
            /**
                * <p>
                *         If there are additional results, this is the token for the next set of results.
                *        </p>
                */
            nextToken?: string;
            /**
                * <p>
                *       The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html">AssetSummary</a> objects.
                *     </p>
                */
            assets?: AssetSummary[];
    }
    export namespace ListPackageVersionAssetsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageVersionAssetsResult) => any;
    }
    export interface ListPackageVersionDependenciesRequest {
            /**
                * <p>
                *       The name of the domain that contains the repository that contains the requested package version dependencies.
                *     </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The name of the repository that contains the requested package version.
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       The format of the package with the requested dependencies.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package version with the requested dependencies. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package versions' package.
                *     </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       A string that contains the package version (for example, <code>3.5.2</code>).
                *     </p>
                */
            packageVersion: string | undefined;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListPackageVersionDependenciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageVersionDependenciesRequest) => any;
    }
    /**
        * <p>
        *         Details about a package dependency.
        *       </p>
        */
    export interface PackageDependency {
            /**
                * <p>The namespace of the package that this package depends on. The package component that specifies its
                *        namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *            The namespace of a Maven package is its <code>groupId</code>.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *            The namespace of an npm package is its <code>scope</code>.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *            Python and NuGet packages do not contain a corresponding component, packages
                *            of those formats do not have a namespace.
                *          </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *         The name of the package that this package depends on.
                *        </p>
                */
            package?: string;
            /**
                * <p> The type of a package dependency. The possible values depend on the package type.
                *       Example types are <code>compile</code>, <code>runtime</code>, and <code>test</code> for Maven
                *       packages, and <code>dev</code>, <code>prod</code>, and <code>optional</code> for npm packages. </p>
                */
            dependencyType?: string;
            /**
                * <p>
                *         The required version, or version range, of the package that this package depends on. The version format
                *         is specific to the package type. For example, the following are possible valid required versions: <code>1.2.3</code>,
                *         <code>^2.3.4</code>, or <code>4.x</code>.
                *       </p>
                */
            versionRequirement?: string;
    }
    export namespace PackageDependency {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageDependency) => any;
    }
    export interface ListPackageVersionDependenciesResult {
            /**
                * <p>
                *       A format that specifies the type of the package that contains the returned dependencies.
                *     </p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace of the package version that contains the returned dependencies. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package that contains the returned package versions dependencies.
                *     </p>
                */
            package?: string;
            /**
                * <p>
                *       The version of the package that is specified in the request.
                *     </p>
                */
            version?: string;
            /**
                * <p>
                *       The current revision associated with the package version.
                *     </p>
                */
            versionRevision?: string;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
            /**
                * <p>
                *       The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html">PackageDependency</a> objects.
                *     </p>
                */
            dependencies?: PackageDependency[];
    }
    export namespace ListPackageVersionDependenciesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageVersionDependenciesResult) => any;
    }
    export enum PackageVersionSortType {
            PUBLISHED_TIME = "PUBLISHED_TIME"
    }
    export interface ListPackageVersionsRequest {
            /**
                * <p>
                *          The name of the domain that contains the repository that contains the requested package versions.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *          The name of the repository that contains the requested package versions.
                *        </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       The format of the returned package versions.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package that contains the requested package versions. The package component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet packages do not contain a corresponding component, packages
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package for which you want to request package versions.
                *     </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       A string that filters the requested package versions by status.
                *     </p>
                */
            status?: PackageVersionStatus | string;
            /**
                * <p>
                *       How to sort the requested list of package versions.
                *     </p>
                */
            sortBy?: PackageVersionSortType | string;
            /**
                * <p>
                *         The maximum number of results to return per page.
                *        </p>
                */
            maxResults?: number;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
            /**
                * <p>The <code>originType</code> used to filter package versions.
                *       Only package versions with the provided <code>originType</code> will be returned.</p>
                */
            originType?: PackageVersionOriginType | string;
    }
    export namespace ListPackageVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageVersionsRequest) => any;
    }
    /**
        * <p>
        *        Details about a package version, including its status, version, and revision. The
        *        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a>
        *        operation returns a list of <code>PackageVersionSummary</code> objects.
        *      </p>
        */
    export interface PackageVersionSummary {
            /**
                * <p>
                *         Information about a package version.
                *        </p>
                */
            version: string | undefined;
            /**
                * <p>
                *       The revision associated with a package version.
                *     </p>
                */
            revision?: string;
            /**
                * <p>
                *       A string that contains the status of the package version. It can be one of the following:
                *     </p>
                */
            status: PackageVersionStatus | string | undefined;
            /**
                * <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionOrigin.html">PackageVersionOrigin</a> object that contains information
                *     about how the package version was added to the repository.</p>
                */
            origin?: PackageVersionOrigin;
    }
    export namespace PackageVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVersionSummary) => any;
    }
    export interface ListPackageVersionsResult {
            /**
                * <p>
                *       The default package version to display. This depends on the package format:
                *     </p>
                *          <ul>
                *             <li>
                *                <p>
                *           For Maven and PyPI packages, it's the most recently published package version.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           For npm packages, it's the version referenced by the
                *           <code>latest</code> tag. If the  <code>latest</code> tag is not set, it's the most recently published package version.
                *         </p>
                *             </li>
                *          </ul>
                */
            defaultDisplayVersion?: string;
            /**
                * <p>
                *       A format of the package.
                *     </p>
                */
            format?: PackageFormat | string;
            /**
                * <p>The namespace of the package that contains the requested package versions. The package component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet packages do not contain a corresponding component, packages
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *          The name of the package.
                *        </p>
                */
            package?: string;
            /**
                * <p>
                *         The returned list of
                *         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a>
                *         objects.
                *        </p>
                */
            versions?: PackageVersionSummary[];
            /**
                * <p>
                *         If there are additional results, this is the token for the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListPackageVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageVersionsResult) => any;
    }
    export interface ListRepositoriesRequest {
            /**
                * <p> A prefix used to filter returned repositories. Only repositories with names that start
                *       with <code>repositoryPrefix</code> are returned.</p>
                */
            repositoryPrefix?: string;
            /**
                * <p>
                *         The maximum number of results to return per page.
                *        </p>
                */
            maxResults?: number;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListRepositoriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesRequest) => any;
    }
    /**
        * <p> Details about a repository, including its Amazon Resource Name (ARN), description, and
        *       domain information. The <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListRepositories.html">ListRepositories</a> operation returns a list of
        *         <code>RepositorySummary</code> objects. </p>
        */
    export interface RepositorySummary {
            /**
                * <p>
                *          The name of the repository.
                *       </p>
                */
            name?: string;
            /**
                * <p>
                *          The Amazon Web Services account ID that manages the repository.
                *       </p>
                */
            administratorAccount?: string;
            /**
                * <p>
                *          The name of the domain that contains the repository.
                *       </p>
                */
            domainName?: string;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p> The ARN of the repository. </p>
                */
            arn?: string;
            /**
                * <p>
                *       The description of the repository.
                *     </p>
                */
            description?: string;
    }
    export namespace RepositorySummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositorySummary) => any;
    }
    export interface ListRepositoriesResult {
            /**
                * <p>
                *         The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a>
                *         objects.
                *        </p>
                */
            repositories?: RepositorySummary[];
            /**
                * <p>
                *         If there are additional results, this is the token for the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListRepositoriesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesResult) => any;
    }
    export interface ListRepositoriesInDomainRequest {
            /**
                * <p>
                *          The name of the domain that contains the returned list of repositories.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *          Filter the list of repositories to only include those that are managed by the Amazon Web Services account ID.
                *        </p>
                */
            administratorAccount?: string;
            /**
                * <p>
                *       A prefix used to filter returned repositories. Only repositories with names that start with
                *       <code>repositoryPrefix</code> are returned.
                *     </p>
                */
            repositoryPrefix?: string;
            /**
                * <p>
                *         The maximum number of results to return per page.
                *        </p>
                */
            maxResults?: number;
            /**
                * <p>
                *         The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListRepositoriesInDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesInDomainRequest) => any;
    }
    export interface ListRepositoriesInDomainResult {
            /**
                * <p>
                *        The returned list of repositories.
                *      </p>
                */
            repositories?: RepositorySummary[];
            /**
                * <p>
                *         If there are additional results, this is the token for the next set of results.
                *        </p>
                */
            nextToken?: string;
    }
    export namespace ListRepositoriesInDomainResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesInDomainResult) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to get tags for.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResult {
            /**
                * <p>A list of tag key and value pairs associated with the specified resource.</p>
                */
            tags?: Tag[];
    }
    export namespace ListTagsForResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResult) => any;
    }
    export interface PutDomainPermissionsPolicyRequest {
            /**
                * <p>
                *         The name of the domain on which to set the resource policy.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *         The current revision of the resource policy to be set. This revision is used for optimistic locking, which
                *         prevents others from overwriting your changes to the domain's resource policy.
                *       </p>
                */
            policyRevision?: string;
            /**
                * <p> A valid displayable JSON Aspen policy string to be set as the access control resource
                *       policy on the provided domain. </p>
                */
            policyDocument: string | undefined;
    }
    export namespace PutDomainPermissionsPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDomainPermissionsPolicyRequest) => any;
    }
    export interface PutDomainPermissionsPolicyResult {
            /**
                * <p> The resource policy that was set after processing the request. </p>
                */
            policy?: ResourcePolicy;
    }
    export namespace PutDomainPermissionsPolicyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDomainPermissionsPolicyResult) => any;
    }
    export interface PutPackageOriginConfigurationRequest {
            /**
                * <p>The name of the domain that contains the repository that contains the package.</p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>The name of the repository that contains the package.</p>
                */
            repository: string | undefined;
            /**
                * <p>A format that specifies the type of the package to be updated.</p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package to be updated. The package component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet packages do not contain a corresponding component, packages
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>The name of the package to be updated.</p>
                */
            package: string | undefined;
            /**
                * <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>
                *       object that contains information about the <code>upstream</code> and <code>publish</code> package origin restrictions.
                *       The <code>upstream</code> restriction determines if new package versions can be ingested or retained from external connections or upstream repositories.
                *     The <code>publish</code> restriction determines if new package versions can be published directly to the repository.</p>
                *
                *          <p>You must include both the desired <code>upstream</code> and <code>publish</code> restrictions.</p>
                */
            restrictions: PackageOriginRestrictions | undefined;
    }
    export namespace PutPackageOriginConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPackageOriginConfigurationRequest) => any;
    }
    export interface PutPackageOriginConfigurationResult {
            /**
                * <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginConfiguration.html">PackageOriginConfiguration</a>
                *       object that describes the origin configuration set for the package. It contains a
                *       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>
                *       object that describes how new versions of the package can be introduced to the repository.</p>
                */
            originConfiguration?: PackageOriginConfiguration;
    }
    export namespace PutPackageOriginConfigurationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPackageOriginConfigurationResult) => any;
    }
    export interface PutRepositoryPermissionsPolicyRequest {
            /**
                * <p>
                *         The name of the domain containing the repository to set the resource policy on.
                *       </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p> The name of the repository to set the resource policy on. </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *         Sets the revision of the resource policy that specifies permissions to access the repository.
                *         This revision is used for optimistic locking, which prevents others from overwriting your
                *         changes to the repository's resource policy.
                *       </p>
                */
            policyRevision?: string;
            /**
                * <p> A valid displayable JSON Aspen policy string to be set as the access control resource
                *       policy on the provided repository. </p>
                */
            policyDocument: string | undefined;
    }
    export namespace PutRepositoryPermissionsPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRepositoryPermissionsPolicyRequest) => any;
    }
    export interface PutRepositoryPermissionsPolicyResult {
            /**
                * <p> The resource policy that was set after processing the request. </p>
                */
            policy?: ResourcePolicy;
    }
    export namespace PutRepositoryPermissionsPolicyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRepositoryPermissionsPolicyResult) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to add or update tags for.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tags you want to modify or add to the resource.</p>
                */
            tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResult {
    }
    export namespace TagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResult) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to remove tags from.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tag key for each tag that you want to remove from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResult {
    }
    export namespace UntagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResult) => any;
    }
    export interface UpdatePackageVersionsStatusRequest {
            /**
                * <p>
                *       The name of the domain that contains the repository that contains the package versions with a status to be updated.
                *     </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *       The repository that contains the package versions with the status you want to update.
                *     </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *       A format that specifies the type of the package with the statuses to update.
                *     </p>
                */
            format: PackageFormat | string | undefined;
            /**
                * <p>The namespace of the package version to be updated. The package version component that specifies its
                *       namespace depends on its type. For example:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *           The namespace of a Maven package version is its <code>groupId</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           The namespace of an npm package version is its <code>scope</code>.
                *         </p>
                *             </li>
                *             <li>
                *                <p>
                *           Python and NuGet package versions do not contain a corresponding component, package versions
                *           of those formats do not have a namespace.
                *         </p>
                *             </li>
                *          </ul>
                */
            namespace?: string;
            /**
                * <p>
                *       The name of the package with the version statuses to update.
                *     </p>
                */
            package: string | undefined;
            /**
                * <p>
                *       An array of strings that specify the versions of the package with the statuses to update.
                *     </p>
                */
            versions: string[] | undefined;
            /**
                * <p> A map of package versions and package version revisions. The map <code>key</code> is the
                *       package version (for example, <code>3.5.2</code>), and the map <code>value</code> is the
                *       package version revision. </p>
                */
            versionRevisions?: Record<string, string>;
            /**
                * <p> The package version’s expected status before it is updated. If
                *         <code>expectedStatus</code> is provided, the package version's status is updated only if its
                *       status at the time <code>UpdatePackageVersionsStatus</code> is called matches
                *         <code>expectedStatus</code>. </p>
                */
            expectedStatus?: PackageVersionStatus | string;
            /**
                * <p>
                *       The status you want to change the package version status to.
                *     </p>
                */
            targetStatus: PackageVersionStatus | string | undefined;
    }
    export namespace UpdatePackageVersionsStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePackageVersionsStatusRequest) => any;
    }
    export interface UpdatePackageVersionsStatusResult {
            /**
                * <p>
                *       A list of <code>PackageVersionError</code> objects, one for each package version with
                *       a status that failed to update.
                *     </p>
                */
            successfulVersions?: Record<string, SuccessfulPackageVersionInfo>;
            /**
                * <p> A list of <code>SuccessfulPackageVersionInfo</code> objects, one for each package version
                *       with a status that successfully updated. </p>
                */
            failedVersions?: Record<string, PackageVersionError>;
    }
    export namespace UpdatePackageVersionsStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePackageVersionsStatusResult) => any;
    }
    export interface UpdateRepositoryRequest {
            /**
                * <p>
                *          The name of the domain associated with the repository to update.
                *        </p>
                */
            domain: string | undefined;
            /**
                * <p>
                *         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include
                *         dashes or spaces.
                *       </p>
                */
            domainOwner?: string;
            /**
                * <p>
                *          The name of the repository to update.
                *        </p>
                */
            repository: string | undefined;
            /**
                * <p>
                *          An updated repository description.
                *        </p>
                */
            description?: string;
            /**
                * <p> A list of upstream repositories to associate with the repository. The order of the upstream repositories
                *         in the list determines their priority order when CodeArtifact looks for a requested package version. For more
                *         information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. </p>
                */
            upstreams?: UpstreamRepository[];
    }
    export namespace UpdateRepositoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRepositoryRequest) => any;
    }
    export interface UpdateRepositoryResult {
            /**
                * <p>
                *          The updated repository.
                *        </p>
                */
            repository?: RepositoryDescription;
    }
    export namespace UpdateRepositoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRepositoryResult) => any;
    }
}

declare module '@aws-sdk/client-codeartifact/node_modules/@aws-sdk/client-codeartifact/dist-types/models/CodeartifactServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Codeartifact service.
        */
    export class CodeartifactServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

