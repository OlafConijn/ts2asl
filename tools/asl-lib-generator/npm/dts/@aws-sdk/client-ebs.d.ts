// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   stream

declare module '@aws-sdk/client-ebs' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CompleteSnapshotCommandInput, CompleteSnapshotCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/CompleteSnapshotCommand";
    import { GetSnapshotBlockCommandInput, GetSnapshotBlockCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/GetSnapshotBlockCommand";
    import { ListChangedBlocksCommandInput, ListChangedBlocksCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/ListChangedBlocksCommand";
    import { ListSnapshotBlocksCommandInput, ListSnapshotBlocksCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/ListSnapshotBlocksCommand";
    import { PutSnapshotBlockCommandInput, PutSnapshotBlockCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/PutSnapshotBlockCommand";
    import { StartSnapshotCommandInput, StartSnapshotCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/StartSnapshotCommand";
    import { EBSClient } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient";
    /**
        * <p>You can use the Amazon Elastic Block Store (Amazon EBS) direct APIs to create Amazon EBS snapshots, write data directly to
        *     		your snapshots, read data on your snapshots, and identify the differences or changes between
        *     		two snapshots. If youâ€™re an independent software vendor (ISV) who offers backup services for
        *     		Amazon EBS, the EBS direct APIs make it more efficient and cost-effective to track incremental changes on
        *     		your Amazon EBS volumes through snapshots. This can be done without having to create new volumes
        *     		from snapshots, and then use Amazon Elastic Compute Cloud (Amazon EC2) instances to compare the differences.</p>
        *
        *     	    <p>You can create incremental snapshots directly from data on-premises into volumes and the
        *     		cloud to use for quick disaster recovery. With the ability to write and read snapshots, you can
        *     		write your on-premises data to an snapshot during a disaster. Then after recovery, you can
        *     		restore it back to Amazon Web Services or on-premises from the snapshot. You no longer need to build and
        *     		maintain complex mechanisms to copy data to and from Amazon EBS.</p>
        *
        *
        *         <p>This API reference provides detailed information about the actions, data types,
        *             parameters, and errors of the EBS direct APIs. For more information about the elements that
        *             make up the EBS direct APIs, and examples of how to use them effectively, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html">Accessing the Contents of an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User
        *                 Guide</i>. For more information about the supported Amazon Web Services Regions, endpoints,
        *             and service quotas for the EBS direct APIs, see <a href="https://docs.aws.amazon.com/general/latest/gr/ebs-service.html">Amazon Elastic Block Store Endpoints and Quotas</a> in
        *             the <i>Amazon Web Services General Reference</i>.</p>
        */
    export class EBS extends EBSClient {
            /**
                * <p>Seals and completes the snapshot after all of the required blocks of data have been
                *             written to it. Completing the snapshot changes the status to <code>completed</code>. You
                *             cannot write new blocks to a snapshot after it has been completed.</p>
                */
            completeSnapshot(args: CompleteSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CompleteSnapshotCommandOutput>;
            completeSnapshot(args: CompleteSnapshotCommandInput, cb: (err: any, data?: CompleteSnapshotCommandOutput) => void): void;
            completeSnapshot(args: CompleteSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CompleteSnapshotCommandOutput) => void): void;
            /**
                * <p>Returns the data in a block in an Amazon Elastic Block Store snapshot.</p>
                */
            getSnapshotBlock(args: GetSnapshotBlockCommandInput, options?: __HttpHandlerOptions): Promise<GetSnapshotBlockCommandOutput>;
            getSnapshotBlock(args: GetSnapshotBlockCommandInput, cb: (err: any, data?: GetSnapshotBlockCommandOutput) => void): void;
            getSnapshotBlock(args: GetSnapshotBlockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSnapshotBlockCommandOutput) => void): void;
            /**
                * <p>Returns information about the blocks that are different between two
                *             Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.</p>
                */
            listChangedBlocks(args: ListChangedBlocksCommandInput, options?: __HttpHandlerOptions): Promise<ListChangedBlocksCommandOutput>;
            listChangedBlocks(args: ListChangedBlocksCommandInput, cb: (err: any, data?: ListChangedBlocksCommandOutput) => void): void;
            listChangedBlocks(args: ListChangedBlocksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChangedBlocksCommandOutput) => void): void;
            /**
                * <p>Returns information about the blocks in an Amazon Elastic Block Store snapshot.</p>
                */
            listSnapshotBlocks(args: ListSnapshotBlocksCommandInput, options?: __HttpHandlerOptions): Promise<ListSnapshotBlocksCommandOutput>;
            listSnapshotBlocks(args: ListSnapshotBlocksCommandInput, cb: (err: any, data?: ListSnapshotBlocksCommandOutput) => void): void;
            listSnapshotBlocks(args: ListSnapshotBlocksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSnapshotBlocksCommandOutput) => void): void;
            /**
                * <p>Writes a block of data to a snapshot. If the specified block contains
                *             data, the existing data is overwritten. The target snapshot must be in the
                *                 <code>pending</code> state.</p>
                *     	    <p>Data written to a snapshot must be aligned with 512-KiB sectors.</p>
                */
            putSnapshotBlock(args: PutSnapshotBlockCommandInput, options?: __HttpHandlerOptions): Promise<PutSnapshotBlockCommandOutput>;
            putSnapshotBlock(args: PutSnapshotBlockCommandInput, cb: (err: any, data?: PutSnapshotBlockCommandOutput) => void): void;
            putSnapshotBlock(args: PutSnapshotBlockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutSnapshotBlockCommandOutput) => void): void;
            /**
                * <p>Creates a new Amazon EBS snapshot. The new snapshot enters the <code>pending</code> state
                *             after the request completes. </p>
                *         <p>After creating the snapshot, use <a href="https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html"> PutSnapshotBlock</a> to
                *             write blocks of data to the snapshot.</p>
                */
            startSnapshot(args: StartSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<StartSnapshotCommandOutput>;
            startSnapshot(args: StartSnapshotCommandInput, cb: (err: any, data?: StartSnapshotCommandOutput) => void): void;
            startSnapshot(args: StartSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSnapshotCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/CompleteSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EBSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient";
    import { CompleteSnapshotRequest, CompleteSnapshotResponse } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/models_0";
    export interface CompleteSnapshotCommandInput extends CompleteSnapshotRequest {
    }
    export interface CompleteSnapshotCommandOutput extends CompleteSnapshotResponse, __MetadataBearer {
    }
    /**
        * <p>Seals and completes the snapshot after all of the required blocks of data have been
        *             written to it. Completing the snapshot changes the status to <code>completed</code>. You
        *             cannot write new blocks to a snapshot after it has been completed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EBSClient, CompleteSnapshotCommand } from "@aws-sdk/client-ebs"; // ES Modules import
        * // const { EBSClient, CompleteSnapshotCommand } = require("@aws-sdk/client-ebs"); // CommonJS import
        * const client = new EBSClient(config);
        * const command = new CompleteSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CompleteSnapshotCommandInput} for command's `input` shape.
        * @see {@link CompleteSnapshotCommandOutput} for command's `response` shape.
        * @see {@link EBSClientResolvedConfig | config} for EBSClient's `config` shape.
        *
        */
    export class CompleteSnapshotCommand extends $Command<CompleteSnapshotCommandInput, CompleteSnapshotCommandOutput, EBSClientResolvedConfig> {
            readonly input: CompleteSnapshotCommandInput;
            constructor(input: CompleteSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EBSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CompleteSnapshotCommandInput, CompleteSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/GetSnapshotBlockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EBSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient";
    import { GetSnapshotBlockRequest, GetSnapshotBlockResponse } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/models_0";
    export interface GetSnapshotBlockCommandInput extends GetSnapshotBlockRequest {
    }
    export interface GetSnapshotBlockCommandOutput extends GetSnapshotBlockResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the data in a block in an Amazon Elastic Block Store snapshot.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EBSClient, GetSnapshotBlockCommand } from "@aws-sdk/client-ebs"; // ES Modules import
        * // const { EBSClient, GetSnapshotBlockCommand } = require("@aws-sdk/client-ebs"); // CommonJS import
        * const client = new EBSClient(config);
        * const command = new GetSnapshotBlockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSnapshotBlockCommandInput} for command's `input` shape.
        * @see {@link GetSnapshotBlockCommandOutput} for command's `response` shape.
        * @see {@link EBSClientResolvedConfig | config} for EBSClient's `config` shape.
        *
        */
    export class GetSnapshotBlockCommand extends $Command<GetSnapshotBlockCommandInput, GetSnapshotBlockCommandOutput, EBSClientResolvedConfig> {
            readonly input: GetSnapshotBlockCommandInput;
            constructor(input: GetSnapshotBlockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EBSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSnapshotBlockCommandInput, GetSnapshotBlockCommandOutput>;
    }
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/ListChangedBlocksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EBSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient";
    import { ListChangedBlocksRequest, ListChangedBlocksResponse } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/models_0";
    export interface ListChangedBlocksCommandInput extends ListChangedBlocksRequest {
    }
    export interface ListChangedBlocksCommandOutput extends ListChangedBlocksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the blocks that are different between two
        *             Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EBSClient, ListChangedBlocksCommand } from "@aws-sdk/client-ebs"; // ES Modules import
        * // const { EBSClient, ListChangedBlocksCommand } = require("@aws-sdk/client-ebs"); // CommonJS import
        * const client = new EBSClient(config);
        * const command = new ListChangedBlocksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChangedBlocksCommandInput} for command's `input` shape.
        * @see {@link ListChangedBlocksCommandOutput} for command's `response` shape.
        * @see {@link EBSClientResolvedConfig | config} for EBSClient's `config` shape.
        *
        */
    export class ListChangedBlocksCommand extends $Command<ListChangedBlocksCommandInput, ListChangedBlocksCommandOutput, EBSClientResolvedConfig> {
            readonly input: ListChangedBlocksCommandInput;
            constructor(input: ListChangedBlocksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EBSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChangedBlocksCommandInput, ListChangedBlocksCommandOutput>;
    }
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/ListSnapshotBlocksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EBSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient";
    import { ListSnapshotBlocksRequest, ListSnapshotBlocksResponse } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/models_0";
    export interface ListSnapshotBlocksCommandInput extends ListSnapshotBlocksRequest {
    }
    export interface ListSnapshotBlocksCommandOutput extends ListSnapshotBlocksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the blocks in an Amazon Elastic Block Store snapshot.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EBSClient, ListSnapshotBlocksCommand } from "@aws-sdk/client-ebs"; // ES Modules import
        * // const { EBSClient, ListSnapshotBlocksCommand } = require("@aws-sdk/client-ebs"); // CommonJS import
        * const client = new EBSClient(config);
        * const command = new ListSnapshotBlocksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSnapshotBlocksCommandInput} for command's `input` shape.
        * @see {@link ListSnapshotBlocksCommandOutput} for command's `response` shape.
        * @see {@link EBSClientResolvedConfig | config} for EBSClient's `config` shape.
        *
        */
    export class ListSnapshotBlocksCommand extends $Command<ListSnapshotBlocksCommandInput, ListSnapshotBlocksCommandOutput, EBSClientResolvedConfig> {
            readonly input: ListSnapshotBlocksCommandInput;
            constructor(input: ListSnapshotBlocksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EBSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSnapshotBlocksCommandInput, ListSnapshotBlocksCommandOutput>;
    }
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/PutSnapshotBlockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EBSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient";
    import { PutSnapshotBlockRequest, PutSnapshotBlockResponse } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/models_0";
    type PutSnapshotBlockCommandInputType = Omit<PutSnapshotBlockRequest, "BlockData"> & {
            /**
                * For *`PutSnapshotBlockRequest["BlockData"]`*, see {@link PutSnapshotBlockRequest.BlockData}.
                */
            BlockData: PutSnapshotBlockRequest["BlockData"] | string | Uint8Array | Buffer;
    };
    /**
        * This interface extends from `PutSnapshotBlockRequest` interface. There are more parameters than `BlockData` defined in {@link PutSnapshotBlockRequest}
        */
    export interface PutSnapshotBlockCommandInput extends PutSnapshotBlockCommandInputType {
    }
    export interface PutSnapshotBlockCommandOutput extends PutSnapshotBlockResponse, __MetadataBearer {
    }
    /**
        * <p>Writes a block of data to a snapshot. If the specified block contains
        *             data, the existing data is overwritten. The target snapshot must be in the
        *                 <code>pending</code> state.</p>
        *     	    <p>Data written to a snapshot must be aligned with 512-KiB sectors.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EBSClient, PutSnapshotBlockCommand } from "@aws-sdk/client-ebs"; // ES Modules import
        * // const { EBSClient, PutSnapshotBlockCommand } = require("@aws-sdk/client-ebs"); // CommonJS import
        * const client = new EBSClient(config);
        * const command = new PutSnapshotBlockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutSnapshotBlockCommandInput} for command's `input` shape.
        * @see {@link PutSnapshotBlockCommandOutput} for command's `response` shape.
        * @see {@link EBSClientResolvedConfig | config} for EBSClient's `config` shape.
        *
        */
    export class PutSnapshotBlockCommand extends $Command<PutSnapshotBlockCommandInput, PutSnapshotBlockCommandOutput, EBSClientResolvedConfig> {
            readonly input: PutSnapshotBlockCommandInput;
            constructor(input: PutSnapshotBlockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EBSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutSnapshotBlockCommandInput, PutSnapshotBlockCommandOutput>;
    }
    export {};
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/StartSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EBSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient";
    import { StartSnapshotRequest, StartSnapshotResponse } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/models_0";
    export interface StartSnapshotCommandInput extends StartSnapshotRequest {
    }
    export interface StartSnapshotCommandOutput extends StartSnapshotResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new Amazon EBS snapshot. The new snapshot enters the <code>pending</code> state
        *             after the request completes. </p>
        *         <p>After creating the snapshot, use <a href="https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html"> PutSnapshotBlock</a> to
        *             write blocks of data to the snapshot.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EBSClient, StartSnapshotCommand } from "@aws-sdk/client-ebs"; // ES Modules import
        * // const { EBSClient, StartSnapshotCommand } = require("@aws-sdk/client-ebs"); // CommonJS import
        * const client = new EBSClient(config);
        * const command = new StartSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSnapshotCommandInput} for command's `input` shape.
        * @see {@link StartSnapshotCommandOutput} for command's `response` shape.
        * @see {@link EBSClientResolvedConfig | config} for EBSClient's `config` shape.
        *
        */
    export class StartSnapshotCommand extends $Command<StartSnapshotCommandInput, StartSnapshotCommandOutput, EBSClientResolvedConfig> {
            readonly input: StartSnapshotCommandInput;
            constructor(input: StartSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EBSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSnapshotCommandInput, StartSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/EBSClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CompleteSnapshotCommandInput, CompleteSnapshotCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/CompleteSnapshotCommand";
    import { GetSnapshotBlockCommandInput, GetSnapshotBlockCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/GetSnapshotBlockCommand";
    import { ListChangedBlocksCommandInput, ListChangedBlocksCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/ListChangedBlocksCommand";
    import { ListSnapshotBlocksCommandInput, ListSnapshotBlocksCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/ListSnapshotBlocksCommand";
    import { PutSnapshotBlockCommandInput, PutSnapshotBlockCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/PutSnapshotBlockCommand";
    import { StartSnapshotCommandInput, StartSnapshotCommandOutput } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/commands/StartSnapshotCommand";
    export type ServiceInputTypes = CompleteSnapshotCommandInput | GetSnapshotBlockCommandInput | ListChangedBlocksCommandInput | ListSnapshotBlocksCommandInput | PutSnapshotBlockCommandInput | StartSnapshotCommandInput;
    export type ServiceOutputTypes = CompleteSnapshotCommandOutput | GetSnapshotBlockCommandOutput | ListChangedBlocksCommandOutput | ListSnapshotBlocksCommandOutput | PutSnapshotBlockCommandOutput | StartSnapshotCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type EBSClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of EBSClient class constructor that set the region, credentials and other options.
        */
    export interface EBSClientConfig extends EBSClientConfigType {
    }
    type EBSClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of EBSClient class. This is resolved and normalized from the {@link EBSClientConfig | constructor configuration interface}.
        */
    export interface EBSClientResolvedConfig extends EBSClientResolvedConfigType {
    }
    /**
        * <p>You can use the Amazon Elastic Block Store (Amazon EBS) direct APIs to create Amazon EBS snapshots, write data directly to
        *     		your snapshots, read data on your snapshots, and identify the differences or changes between
        *     		two snapshots. If youâ€™re an independent software vendor (ISV) who offers backup services for
        *     		Amazon EBS, the EBS direct APIs make it more efficient and cost-effective to track incremental changes on
        *     		your Amazon EBS volumes through snapshots. This can be done without having to create new volumes
        *     		from snapshots, and then use Amazon Elastic Compute Cloud (Amazon EC2) instances to compare the differences.</p>
        *
        *     	    <p>You can create incremental snapshots directly from data on-premises into volumes and the
        *     		cloud to use for quick disaster recovery. With the ability to write and read snapshots, you can
        *     		write your on-premises data to an snapshot during a disaster. Then after recovery, you can
        *     		restore it back to Amazon Web Services or on-premises from the snapshot. You no longer need to build and
        *     		maintain complex mechanisms to copy data to and from Amazon EBS.</p>
        *
        *
        *         <p>This API reference provides detailed information about the actions, data types,
        *             parameters, and errors of the EBS direct APIs. For more information about the elements that
        *             make up the EBS direct APIs, and examples of how to use them effectively, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html">Accessing the Contents of an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User
        *                 Guide</i>. For more information about the supported Amazon Web Services Regions, endpoints,
        *             and service quotas for the EBS direct APIs, see <a href="https://docs.aws.amazon.com/general/latest/gr/ebs-service.html">Amazon Elastic Block Store Endpoints and Quotas</a> in
        *             the <i>Amazon Web Services General Reference</i>.</p>
        */
    export class EBSClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, EBSClientResolvedConfig> {
            /**
                * The resolved configuration of EBSClient class. This is resolved and normalized from the {@link EBSClientConfig | constructor configuration interface}.
                */
            readonly config: EBSClientResolvedConfig;
            constructor(configuration: EBSClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Readable } from "stream";
    import { EBSServiceException as __BaseException } from "@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/EBSServiceException";
    export enum AccessDeniedExceptionReason {
            DEPENDENCY_ACCESS_DENIED = "DEPENDENCY_ACCESS_DENIED",
            UNAUTHORIZED_ACCOUNT = "UNAUTHORIZED_ACCOUNT"
    }
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The reason for the exception.</p>
                */
            Reason: AccessDeniedExceptionReason | string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>A block of data in an Amazon Elastic Block Store snapshot.</p>
        */
    export interface Block {
            /**
                * <p>The block index.</p>
                */
            BlockIndex?: number;
            /**
                * <p>The block token for the block index.</p>
                */
            BlockToken?: string;
    }
    export namespace Block {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Block) => any;
    }
    /**
        * <p>A block of data in an Amazon Elastic Block Store snapshot that is different from another snapshot of
        *             the same volume/snapshot lineage.</p>
        */
    export interface ChangedBlock {
            /**
                * <p>The block index.</p>
                */
            BlockIndex?: number;
            /**
                * <p>The block token for the block index of the <code>FirstSnapshotId</code> specified in
                *             the <code>ListChangedBlocks</code> operation. This value is absent if the first snapshot
                *             does not have the changed block that is on the second snapshot.</p>
                */
            FirstBlockToken?: string;
            /**
                * <p>The block token for the block index of the <code>SecondSnapshotId</code> specified in
                *             the <code>ListChangedBlocks</code> operation.</p>
                */
            SecondBlockToken?: string;
    }
    export namespace ChangedBlock {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangedBlock) => any;
    }
    export enum ChecksumAggregationMethod {
            CHECKSUM_AGGREGATION_LINEAR = "LINEAR"
    }
    export enum ChecksumAlgorithm {
            CHECKSUM_ALGORITHM_SHA256 = "SHA256"
    }
    export interface CompleteSnapshotRequest {
            /**
                * <p>The ID of the snapshot.</p>
                */
            SnapshotId: string | undefined;
            /**
                * <p>The number of blocks that were written to the snapshot.</p>
                */
            ChangedBlocksCount: number | undefined;
            /**
                * <p>An aggregated Base-64 SHA256 checksum based on the checksums of each written
                *             block.</p>
                *         <p>To generate the aggregated checksum using the linear aggregation method, arrange the
                *             checksums for each written block in ascending order of their block index, concatenate
                *             them to form a single string, and then generate the checksum on the entire string using
                *             the SHA256 algorithm.</p>
                */
            Checksum?: string;
            /**
                * <p>The algorithm used to generate the checksum. Currently, the only supported algorithm
                *             is <code>SHA256</code>.</p>
                */
            ChecksumAlgorithm?: ChecksumAlgorithm | string;
            /**
                * <p>The aggregation method used to generate the checksum. Currently, the only supported
                *             aggregation method is <code>LINEAR</code>.</p>
                */
            ChecksumAggregationMethod?: ChecksumAggregationMethod | string;
    }
    export namespace CompleteSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompleteSnapshotRequest) => any;
    }
    export enum Status {
            COMPLETED = "completed",
            ERROR = "error",
            PENDING = "pending"
    }
    export interface CompleteSnapshotResponse {
            /**
                * <p>The status of the snapshot.</p>
                */
            Status?: Status | string;
    }
    export namespace CompleteSnapshotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompleteSnapshotResponse) => any;
    }
    /**
        * <p>An internal error has occurred.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    export enum RequestThrottledExceptionReason {
            ACCOUNT_THROTTLED = "ACCOUNT_THROTTLED",
            DEPENDENCY_REQUEST_THROTTLED = "DEPENDENCY_REQUEST_THROTTLED",
            RESOURCE_LEVEL_THROTTLE = "RESOURCE_LEVEL_THROTTLE"
    }
    /**
        * <p>The number of API requests has exceed the maximum allowed API request throttling
        *             limit.</p>
        */
    export class RequestThrottledException extends __BaseException {
            readonly name: "RequestThrottledException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The reason for the exception.</p>
                */
            Reason?: RequestThrottledExceptionReason | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RequestThrottledException, __BaseException>);
    }
    export enum ResourceNotFoundExceptionReason {
            DEPENDENCY_RESOURCE_NOT_FOUND = "DEPENDENCY_RESOURCE_NOT_FOUND",
            SNAPSHOT_NOT_FOUND = "SNAPSHOT_NOT_FOUND"
    }
    /**
        * <p>The specified resource does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The reason for the exception.</p>
                */
            Reason?: ResourceNotFoundExceptionReason | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum ServiceQuotaExceededExceptionReason {
            DEPENDENCY_SERVICE_QUOTA_EXCEEDED = "DEPENDENCY_SERVICE_QUOTA_EXCEEDED"
    }
    /**
        * <p>Your current service quotas do not allow you to perform this action.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The reason for the exception.</p>
                */
            Reason?: ServiceQuotaExceededExceptionReason | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export enum ValidationExceptionReason {
            CONFLICTING_BLOCK_UPDATE = "CONFLICTING_BLOCK_UPDATE",
            INVALID_BLOCK = "INVALID_BLOCK",
            INVALID_BLOCK_TOKEN = "INVALID_BLOCK_TOKEN",
            INVALID_CONTENT_ENCODING = "INVALID_CONTENT_ENCODING",
            INVALID_CUSTOMER_KEY = "INVALID_CUSTOMER_KEY",
            INVALID_DEPENDENCY_REQUEST = "INVALID_DEPENDENCY_REQUEST",
            INVALID_PAGE_TOKEN = "INVALID_PAGE_TOKEN",
            INVALID_PARAMETER_VALUE = "INVALID_PARAMETER_VALUE",
            INVALID_SNAPSHOT_ID = "INVALID_SNAPSHOT_ID",
            INVALID_TAG = "INVALID_TAG",
            INVALID_VOLUME_SIZE = "INVALID_VOLUME_SIZE",
            UNRELATED_SNAPSHOTS = "UNRELATED_SNAPSHOTS"
    }
    /**
        * <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The reason for the validation exception.</p>
                */
            Reason?: ValidationExceptionReason | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>You have reached the limit for concurrent API requests. For more information, see
        *                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapi-performance">Optimizing performance of the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud
        *                 User Guide</i>.</p>
        */
    export class ConcurrentLimitExceededException extends __BaseException {
            readonly name: "ConcurrentLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentLimitExceededException, __BaseException>);
    }
    /**
        * <p>The request uses the same client token as a previous, but non-identical
        *             request.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface GetSnapshotBlockRequest {
            /**
                * <p>The ID of the snapshot containing the block from which to get data.</p>
                *         <important>
                *             <p>If the specified snapshot is encrypted, you must have permission to use the
                *                 KMS key that was used to encrypt the snapshot. For more information, see
                *                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html">
                *                     Using encryption</a> in the <i>Amazon Elastic Compute Cloud User
                *                         Guide</i>.</p>
                *         </important>
                */
            SnapshotId: string | undefined;
            /**
                * <p>The block index of the block in which to read the data. A block index is a logical
                *             index in units of <code>512</code> KiB blocks. To identify the block index, divide
                *             the logical offset of the data in the logical volume by the block size (logical offset
                *             of data/<code>524288</code>). The logical offset of the data must be <code>512</code>
                *             KiB aligned.</p>
                */
            BlockIndex: number | undefined;
            /**
                * <p>The block token of the block from which to get data. You can obtain the <code>BlockToken</code>
                *             by running the <code>ListChangedBlocks</code> or <code>ListSnapshotBlocks</code> operations.</p>
                */
            BlockToken: string | undefined;
    }
    export namespace GetSnapshotBlockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSnapshotBlockRequest) => any;
    }
    export interface GetSnapshotBlockResponse {
            /**
                * <p>The size of the data in the block.</p>
                */
            DataLength?: number;
            /**
                * <p>The data content of the block.</p>
                */
            BlockData?: Readable | ReadableStream | Blob;
            /**
                * <p>The checksum generated for the block, which is Base64 encoded.</p>
                */
            Checksum?: string;
            /**
                * <p>The algorithm used to generate the checksum for the block, such as SHA256.</p>
                */
            ChecksumAlgorithm?: ChecksumAlgorithm | string;
    }
    export namespace GetSnapshotBlockResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSnapshotBlockResponse) => any;
    }
    export interface ListChangedBlocksRequest {
            /**
                * <p>The ID of the first snapshot to use for the comparison.</p>
                *         <important>
                *             <p>The <code>FirstSnapshotID</code> parameter must be specified with a
                *                     <code>SecondSnapshotId</code> parameter; otherwise, an error occurs.</p>
                *         </important>
                */
            FirstSnapshotId?: string;
            /**
                * <p>The ID of the second snapshot to use for the comparison.</p>
                *         <important>
                *             <p>The <code>SecondSnapshotId</code> parameter must be specified with a
                *                     <code>FirstSnapshotID</code> parameter; otherwise, an error occurs.</p>
                *         </important>
                */
            SecondSnapshotId: string | undefined;
            /**
                * <p>The token to request the next page of results.</p>
                *         <p>If you specify <b>NextToken</b>, then
                *             <b>StartingBlockIndex</b> is ignored.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of blocks to be returned by the request.</p>
                *         <p>Even if additional blocks can be retrieved from the snapshot, the request can
                *             return less blocks than <b>MaxResults</b> or an empty
                *             array of blocks.</p>
                *         <p>To retrieve the next set of blocks from the snapshot, make another request with
                *             the returned <b>NextToken</b> value. The value of
                *             <b>NextToken</b> is <code>null</code> when there are no
                *             more blocks to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The block index from which the comparison should start.</p>
                *         <p>The list in the response will start from this block index or the next valid block
                *             index in the snapshots.</p>
                *         <p>If you specify <b>NextToken</b>, then
                *             <b>StartingBlockIndex</b> is ignored.</p>
                */
            StartingBlockIndex?: number;
    }
    export namespace ListChangedBlocksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChangedBlocksRequest) => any;
    }
    export interface ListChangedBlocksResponse {
            /**
                * <p>An array of objects containing information about the changed blocks.</p>
                */
            ChangedBlocks?: ChangedBlock[];
            /**
                * <p>The time when the <code>BlockToken</code> expires.</p>
                */
            ExpiryTime?: Date;
            /**
                * <p>The size of the volume in GB.</p>
                */
            VolumeSize?: number;
            /**
                * <p>The size of the blocks in the snapshot, in bytes.</p>
                */
            BlockSize?: number;
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there
                *             are no more results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListChangedBlocksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChangedBlocksResponse) => any;
    }
    export interface ListSnapshotBlocksRequest {
            /**
                * <p>The ID of the snapshot from which to get block indexes and block tokens.</p>
                */
            SnapshotId: string | undefined;
            /**
                * <p>The token to request the next page of results.</p>
                *         <p>If you specify <b>NextToken</b>, then
                *             <b>StartingBlockIndex</b> is ignored.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of blocks to be returned by the request.</p>
                *         <p>Even if additional blocks can be retrieved from the snapshot, the request can
                *             return less blocks than <b>MaxResults</b> or an empty
                *             array of blocks.</p>
                *         <p>To retrieve the next set of blocks from the snapshot, make another request with
                *             the returned <b>NextToken</b> value. The value of
                *             <b>NextToken</b> is <code>null</code> when there are no
                *             more blocks to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The block index from which the list should start. The list in the response will start
                *             from this block index or the next valid block index in the snapshot.</p>
                *         <p>If you specify <b>NextToken</b>, then
                *             <b>StartingBlockIndex</b> is ignored.</p>
                */
            StartingBlockIndex?: number;
    }
    export namespace ListSnapshotBlocksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSnapshotBlocksRequest) => any;
    }
    export interface ListSnapshotBlocksResponse {
            /**
                * <p>An array of objects containing information about the blocks.</p>
                */
            Blocks?: Block[];
            /**
                * <p>The time when the <code>BlockToken</code> expires.</p>
                */
            ExpiryTime?: Date;
            /**
                * <p>The size of the volume in GB.</p>
                */
            VolumeSize?: number;
            /**
                * <p>The size of the blocks in the snapshot, in bytes.</p>
                */
            BlockSize?: number;
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there
                *             are no more results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListSnapshotBlocksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSnapshotBlocksResponse) => any;
    }
    export interface PutSnapshotBlockRequest {
            /**
                * <p>The ID of the snapshot.</p>
                *         <important>
                *             <p>If the specified snapshot is encrypted, you must have permission to use
                *                 the KMS key that was used to encrypt the snapshot. For more information,
                *                 see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html">
                *                     Using encryption</a> in the <i>Amazon Elastic Compute Cloud User
                *                         Guide</i>..</p>
                *         </important>
                */
            SnapshotId: string | undefined;
            /**
                * <p>The block index of the block in which to write the data. A block index is a logical
                *     	index in units of <code>512</code> KiB blocks. To identify the block index, divide
                *         	the logical offset of the data in the logical volume by the block size (logical offset of
                *         	data/<code>524288</code>). The logical offset of the data must be <code>512</code>
                *         	KiB aligned.</p>
                */
            BlockIndex: number | undefined;
            /**
                * <p>The data to write to the block.</p>
                *         <p>The block data is not signed as part of the Signature Version 4 signing process. As a
                *             result, you must generate and provide a Base64-encoded SHA256 checksum for the block
                *             data using the <b>x-amz-Checksum</b> header. Also, you
                *         	must specify the checksum algorithm using the <b>x-amz-Checksum-Algorithm</b>
                *         	header. The checksum that you provide is part of the Signature Version 4 signing process.
                *         	It is validated against a checksum generated by Amazon EBS to ensure the validity and authenticity
                *         	of the data. If the checksums do not correspond, the request fails. For more information,
                *         	see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapis-using-checksums">
                *                 Using checksums with the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud User
                *                 Guide</i>.</p>
                */
            BlockData: Readable | ReadableStream | Blob | undefined;
            /**
                * <p>The size of the data to write to the block, in bytes. Currently, the only supported
                *             size is <code>524288</code> bytes.</p>
                *         <p>Valid values: <code>524288</code>
                *          </p>
                */
            DataLength: number | undefined;
            /**
                * <p>The progress of the write process, as a percentage.</p>
                */
            Progress?: number;
            /**
                * <p>A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are
                *             supported.</p>
                */
            Checksum: string | undefined;
            /**
                * <p>The algorithm used to generate the checksum. Currently, the only supported algorithm
                *             is <code>SHA256</code>.</p>
                */
            ChecksumAlgorithm: ChecksumAlgorithm | string | undefined;
    }
    export namespace PutSnapshotBlockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSnapshotBlockRequest) => any;
    }
    export interface PutSnapshotBlockResponse {
            /**
                * <p>The SHA256 checksum generated for the block data by Amazon EBS.</p>
                */
            Checksum?: string;
            /**
                * <p>The algorithm used by Amazon EBS to generate the checksum.</p>
                */
            ChecksumAlgorithm?: ChecksumAlgorithm | string;
    }
    export namespace PutSnapshotBlockResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSnapshotBlockResponse) => any;
    }
    /**
        * <p>Describes a tag.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag.</p>
                */
            Key?: string;
            /**
                * <p>The value of the tag.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface StartSnapshotRequest {
            /**
                * <p>The size of the volume, in GiB. The maximum size is <code>65536</code> GiB (64
                *             TiB).</p>
                */
            VolumeSize: number | undefined;
            /**
                * <p>The ID of the parent snapshot. If there is no parent snapshot, or if you are creating
                *             the first snapshot for an on-premises volume, omit this parameter.</p>
                *         <p>You can't specify <b>ParentSnapshotId</b> and
                *             <b>Encrypted</b> in the same request. If you specify both
                *             parameters, the request fails with <code>ValidationException</code>.</p>
                *
                *
                *
                *         <p>The encryption status of the snapshot depends on the values that you specify for
                *             <b>Encrypted</b>, <b>KmsKeyArn</b>,
                *             and <b>ParentSnapshotId</b>, and whether your Amazon Web Services account
                *             is enabled for <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">
                *                 encryption by default</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html">
                *                     Using encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
                *
                *         <important>
                *             <p>If you specify an encrypted parent snapshot, you must have permission to use the
                *                 KMS key that was used to encrypt the parent snapshot. For more information, see
                *                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapi-permissions.html#ebsapi-kms-permissions">
                *                     Permissions to use Key Management Service keys</a> in the <i>Amazon Elastic Compute Cloud User
                *                         Guide</i>.</p>
                *         </important>
                */
            ParentSnapshotId?: string;
            /**
                * <p>The tags to apply to the snapshot.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A description for the snapshot.</p>
                */
            Description?: string;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. Idempotency ensures that an API request completes only once. With an idempotent
                *             request, if the original request completes successfully. The subsequent retries with the same
                *             client token return the result from the original successful request and they have no additional
                *             effect.</p>
                *         <p>If you do not specify a client token, one is automatically generated by the Amazon Web Services SDK.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-direct-api-idempotency.html">
                *     		Idempotency for StartSnapshot API</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
                */
            ClientToken?: string;
            /**
                * <p>Indicates whether to encrypt the snapshot.</p>
                *
                *         <p>You can't specify <b>Encrypted</b> and <b>
                *             ParentSnapshotId</b> in the same request. If you specify both parameters, the
                *             request fails with <code>ValidationException</code>.</p>
                *
                *         <p>The encryption status of the snapshot depends on the values that you specify for
                *             <b>Encrypted</b>, <b>KmsKeyArn</b>,
                *             and <b>ParentSnapshotId</b>, and whether your Amazon Web Services account
                *             is enabled for <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">
                *                 encryption by default</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html">
                *             Using encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
                *
                *
                *
                *         <important>
                *             <p>To create an encrypted snapshot, you must have permission to use the KMS key. For
                *                 more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapi-permissions.html#ebsapi-kms-permissions">
                *                     Permissions to use Key Management Service keys</a> in the <i>Amazon Elastic Compute Cloud User
                *                         Guide</i>.</p>
                *         </important>
                */
            Encrypted?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) key to be used to encrypt the snapshot.</p>
                *
                *         <p>The encryption status of the snapshot depends on the values that you specify for
                *             <b>Encrypted</b>, <b>KmsKeyArn</b>,
                *             and <b>ParentSnapshotId</b>, and whether your Amazon Web Services account
                *             is enabled for <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">
                *                 encryption by default</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html">
                *                     Using encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
                *
                *
                *         <important>
                *             <p>To create an encrypted snapshot, you must have permission to use the KMS key. For
                *                 more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapi-permissions.html#ebsapi-kms-permissions">
                *                     Permissions to use Key Management Service keys</a> in the <i>Amazon Elastic Compute Cloud User
                *                         Guide</i>.</p>
                *         </important>
                */
            KmsKeyArn?: string;
            /**
                * <p>The amount of time (in minutes) after which the snapshot is automatically cancelled
                *             if:</p>
                *         <ul>
                *             <li>
                *                 <p>No blocks are written to the snapshot.</p>
                *             </li>
                *             <li>
                *                 <p>The snapshot is not completed after writing the last block of data.</p>
                *             </li>
                *          </ul>
                *         <p>If no value is specified, the timeout defaults to <code>60</code> minutes.</p>
                */
            Timeout?: number;
    }
    export namespace StartSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSnapshotRequest) => any;
    }
    export interface StartSnapshotResponse {
            /**
                * <p>The description of the snapshot.</p>
                */
            Description?: string;
            /**
                * <p>The ID of the snapshot.</p>
                */
            SnapshotId?: string;
            /**
                * <p>The Amazon Web Services account ID of the snapshot owner.</p>
                */
            OwnerId?: string;
            /**
                * <p>The status of the snapshot.</p>
                */
            Status?: Status | string;
            /**
                * <p>The timestamp when the snapshot was created.</p>
                */
            StartTime?: Date;
            /**
                * <p>The size of the volume, in GiB.</p>
                */
            VolumeSize?: number;
            /**
                * <p>The size of the blocks in the snapshot, in bytes.</p>
                */
            BlockSize?: number;
            /**
                * <p>The tags applied to the snapshot. You can specify up to 50 tags per snapshot. For more
                *             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html"> Tagging your Amazon EC2
                *                 resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The ID of the parent snapshot.</p>
                */
            ParentSnapshotId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) key used to encrypt the snapshot.</p>
                */
            KmsKeyArn?: string;
    }
    export namespace StartSnapshotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSnapshotResponse) => any;
    }
}

declare module '@aws-sdk/client-ebs/node_modules/@aws-sdk/client-ebs/dist-types/models/EBSServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from EBS service.
        */
    export class EBSServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

