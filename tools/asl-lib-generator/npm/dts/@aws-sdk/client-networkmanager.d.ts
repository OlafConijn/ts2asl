// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-networkmanager' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AcceptAttachmentCommandInput, AcceptAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AcceptAttachmentCommand";
    import { AssociateConnectPeerCommandInput, AssociateConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateConnectPeerCommand";
    import { AssociateCustomerGatewayCommandInput, AssociateCustomerGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateCustomerGatewayCommand";
    import { AssociateLinkCommandInput, AssociateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateLinkCommand";
    import { AssociateTransitGatewayConnectPeerCommandInput, AssociateTransitGatewayConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateTransitGatewayConnectPeerCommand";
    import { CreateConnectAttachmentCommandInput, CreateConnectAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectAttachmentCommand";
    import { CreateConnectionCommandInput, CreateConnectionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectionCommand";
    import { CreateConnectPeerCommandInput, CreateConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectPeerCommand";
    import { CreateCoreNetworkCommandInput, CreateCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateCoreNetworkCommand";
    import { CreateDeviceCommandInput, CreateDeviceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateDeviceCommand";
    import { CreateGlobalNetworkCommandInput, CreateGlobalNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateGlobalNetworkCommand";
    import { CreateLinkCommandInput, CreateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateLinkCommand";
    import { CreateSiteCommandInput, CreateSiteCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateSiteCommand";
    import { CreateSiteToSiteVpnAttachmentCommandInput, CreateSiteToSiteVpnAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateSiteToSiteVpnAttachmentCommand";
    import { CreateTransitGatewayPeeringCommandInput, CreateTransitGatewayPeeringCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateTransitGatewayPeeringCommand";
    import { CreateTransitGatewayRouteTableAttachmentCommandInput, CreateTransitGatewayRouteTableAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateTransitGatewayRouteTableAttachmentCommand";
    import { CreateVpcAttachmentCommandInput, CreateVpcAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateVpcAttachmentCommand";
    import { DeleteAttachmentCommandInput, DeleteAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteAttachmentCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteConnectionCommand";
    import { DeleteConnectPeerCommandInput, DeleteConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteConnectPeerCommand";
    import { DeleteCoreNetworkCommandInput, DeleteCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteCoreNetworkCommand";
    import { DeleteCoreNetworkPolicyVersionCommandInput, DeleteCoreNetworkPolicyVersionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteCoreNetworkPolicyVersionCommand";
    import { DeleteDeviceCommandInput, DeleteDeviceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteDeviceCommand";
    import { DeleteGlobalNetworkCommandInput, DeleteGlobalNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteGlobalNetworkCommand";
    import { DeleteLinkCommandInput, DeleteLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteLinkCommand";
    import { DeletePeeringCommandInput, DeletePeeringCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeletePeeringCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSiteCommandInput, DeleteSiteCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteSiteCommand";
    import { DeregisterTransitGatewayCommandInput, DeregisterTransitGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeregisterTransitGatewayCommand";
    import { DescribeGlobalNetworksCommandInput, DescribeGlobalNetworksCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DescribeGlobalNetworksCommand";
    import { DisassociateConnectPeerCommandInput, DisassociateConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateConnectPeerCommand";
    import { DisassociateCustomerGatewayCommandInput, DisassociateCustomerGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateCustomerGatewayCommand";
    import { DisassociateLinkCommandInput, DisassociateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateLinkCommand";
    import { DisassociateTransitGatewayConnectPeerCommandInput, DisassociateTransitGatewayConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateTransitGatewayConnectPeerCommand";
    import { ExecuteCoreNetworkChangeSetCommandInput, ExecuteCoreNetworkChangeSetCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ExecuteCoreNetworkChangeSetCommand";
    import { GetConnectAttachmentCommandInput, GetConnectAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectAttachmentCommand";
    import { GetConnectionsCommandInput, GetConnectionsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectionsCommand";
    import { GetConnectPeerAssociationsCommandInput, GetConnectPeerAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectPeerAssociationsCommand";
    import { GetConnectPeerCommandInput, GetConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectPeerCommand";
    import { GetCoreNetworkChangeEventsCommandInput, GetCoreNetworkChangeEventsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkChangeEventsCommand";
    import { GetCoreNetworkChangeSetCommandInput, GetCoreNetworkChangeSetCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkChangeSetCommand";
    import { GetCoreNetworkCommandInput, GetCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkCommand";
    import { GetCoreNetworkPolicyCommandInput, GetCoreNetworkPolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkPolicyCommand";
    import { GetCustomerGatewayAssociationsCommandInput, GetCustomerGatewayAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCustomerGatewayAssociationsCommand";
    import { GetDevicesCommandInput, GetDevicesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetDevicesCommand";
    import { GetLinkAssociationsCommandInput, GetLinkAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetLinkAssociationsCommand";
    import { GetLinksCommandInput, GetLinksCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetLinksCommand";
    import { GetNetworkResourceCountsCommandInput, GetNetworkResourceCountsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourceCountsCommand";
    import { GetNetworkResourceRelationshipsCommandInput, GetNetworkResourceRelationshipsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourceRelationshipsCommand";
    import { GetNetworkResourcesCommandInput, GetNetworkResourcesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourcesCommand";
    import { GetNetworkRoutesCommandInput, GetNetworkRoutesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkRoutesCommand";
    import { GetNetworkTelemetryCommandInput, GetNetworkTelemetryCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkTelemetryCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetResourcePolicyCommand";
    import { GetRouteAnalysisCommandInput, GetRouteAnalysisCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetRouteAnalysisCommand";
    import { GetSitesCommandInput, GetSitesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetSitesCommand";
    import { GetSiteToSiteVpnAttachmentCommandInput, GetSiteToSiteVpnAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetSiteToSiteVpnAttachmentCommand";
    import { GetTransitGatewayConnectPeerAssociationsCommandInput, GetTransitGatewayConnectPeerAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayConnectPeerAssociationsCommand";
    import { GetTransitGatewayPeeringCommandInput, GetTransitGatewayPeeringCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayPeeringCommand";
    import { GetTransitGatewayRegistrationsCommandInput, GetTransitGatewayRegistrationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayRegistrationsCommand";
    import { GetTransitGatewayRouteTableAttachmentCommandInput, GetTransitGatewayRouteTableAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayRouteTableAttachmentCommand";
    import { GetVpcAttachmentCommandInput, GetVpcAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetVpcAttachmentCommand";
    import { ListAttachmentsCommandInput, ListAttachmentsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListAttachmentsCommand";
    import { ListConnectPeersCommandInput, ListConnectPeersCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListConnectPeersCommand";
    import { ListCoreNetworkPolicyVersionsCommandInput, ListCoreNetworkPolicyVersionsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListCoreNetworkPolicyVersionsCommand";
    import { ListCoreNetworksCommandInput, ListCoreNetworksCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListCoreNetworksCommand";
    import { ListOrganizationServiceAccessStatusCommandInput, ListOrganizationServiceAccessStatusCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListOrganizationServiceAccessStatusCommand";
    import { ListPeeringsCommandInput, ListPeeringsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListPeeringsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListTagsForResourceCommand";
    import { PutCoreNetworkPolicyCommandInput, PutCoreNetworkPolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/PutCoreNetworkPolicyCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/PutResourcePolicyCommand";
    import { RegisterTransitGatewayCommandInput, RegisterTransitGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RegisterTransitGatewayCommand";
    import { RejectAttachmentCommandInput, RejectAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RejectAttachmentCommand";
    import { RestoreCoreNetworkPolicyVersionCommandInput, RestoreCoreNetworkPolicyVersionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RestoreCoreNetworkPolicyVersionCommand";
    import { StartOrganizationServiceAccessUpdateCommandInput, StartOrganizationServiceAccessUpdateCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/StartOrganizationServiceAccessUpdateCommand";
    import { StartRouteAnalysisCommandInput, StartRouteAnalysisCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/StartRouteAnalysisCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UntagResourceCommand";
    import { UpdateConnectionCommandInput, UpdateConnectionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateConnectionCommand";
    import { UpdateCoreNetworkCommandInput, UpdateCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateCoreNetworkCommand";
    import { UpdateDeviceCommandInput, UpdateDeviceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateDeviceCommand";
    import { UpdateGlobalNetworkCommandInput, UpdateGlobalNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateGlobalNetworkCommand";
    import { UpdateLinkCommandInput, UpdateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateLinkCommand";
    import { UpdateNetworkResourceMetadataCommandInput, UpdateNetworkResourceMetadataCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateNetworkResourceMetadataCommand";
    import { UpdateSiteCommandInput, UpdateSiteCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateSiteCommand";
    import { UpdateVpcAttachmentCommandInput, UpdateVpcAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateVpcAttachmentCommand";
    import { NetworkManagerClient } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    /**
        * <p>Amazon Web Services enables you to centrally manage your Amazon Web Services Cloud WAN core network and your Transit Gateway network across Amazon Web Services accounts, Regions, and on-premises locations.</p>
        */
    export class NetworkManager extends NetworkManagerClient {
            /**
                * <p>Accepts a core network attachment request. </p>
                *          <p>Once the attachment request is accepted by a core network owner, the attachment is
                *          created and connected to a core network.</p>
                */
            acceptAttachment(args: AcceptAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<AcceptAttachmentCommandOutput>;
            acceptAttachment(args: AcceptAttachmentCommandInput, cb: (err: any, data?: AcceptAttachmentCommandOutput) => void): void;
            acceptAttachment(args: AcceptAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptAttachmentCommandOutput) => void): void;
            /**
                * <p>Associates a core network Connect peer with a device and optionally, with a link. </p>
                *          <p>If you specify a link, it must be associated with the specified device. You can only
                *          associate core network Connect peers that have been created on a core network Connect
                *          attachment on a core network. </p>
                */
            associateConnectPeer(args: AssociateConnectPeerCommandInput, options?: __HttpHandlerOptions): Promise<AssociateConnectPeerCommandOutput>;
            associateConnectPeer(args: AssociateConnectPeerCommandInput, cb: (err: any, data?: AssociateConnectPeerCommandOutput) => void): void;
            associateConnectPeer(args: AssociateConnectPeerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateConnectPeerCommandOutput) => void): void;
            /**
                * <p>Associates a customer gateway with a device and optionally, with a link. If you
                *             specify a link, it must be associated with the specified device. </p>
                *         <p>You can only associate customer gateways that are connected to a VPN attachment on a
                *             transit gateway or core network registered in your global network. When you register a
                *             transit gateway or core network, customer gateways that are connected to the transit
                *             gateway are automatically included in the global network. To list customer gateways
                *             that are connected to a transit gateway, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html">DescribeVpnConnections</a> EC2 API and filter by
                *                 <code>transit-gateway-id</code>.</p>
                *         <p>You cannot associate a customer gateway with more than one device and link. </p>
                */
            associateCustomerGateway(args: AssociateCustomerGatewayCommandInput, options?: __HttpHandlerOptions): Promise<AssociateCustomerGatewayCommandOutput>;
            associateCustomerGateway(args: AssociateCustomerGatewayCommandInput, cb: (err: any, data?: AssociateCustomerGatewayCommandOutput) => void): void;
            associateCustomerGateway(args: AssociateCustomerGatewayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateCustomerGatewayCommandOutput) => void): void;
            /**
                * <p>Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.</p>
                */
            associateLink(args: AssociateLinkCommandInput, options?: __HttpHandlerOptions): Promise<AssociateLinkCommandOutput>;
            associateLink(args: AssociateLinkCommandInput, cb: (err: any, data?: AssociateLinkCommandOutput) => void): void;
            associateLink(args: AssociateLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateLinkCommandOutput) => void): void;
            /**
                * <p>Associates a transit gateway Connect peer with a device, and optionally, with a link. If you
                *             specify a link, it must be associated with the specified device. </p>
                *         <p>You can only associate transit gateway Connect peers that have been created on a
                *             transit gateway that's registered in your global network.</p>
                *         <p>You cannot associate a transit gateway Connect peer with more than one device and link. </p>
                */
            associateTransitGatewayConnectPeer(args: AssociateTransitGatewayConnectPeerCommandInput, options?: __HttpHandlerOptions): Promise<AssociateTransitGatewayConnectPeerCommandOutput>;
            associateTransitGatewayConnectPeer(args: AssociateTransitGatewayConnectPeerCommandInput, cb: (err: any, data?: AssociateTransitGatewayConnectPeerCommandOutput) => void): void;
            associateTransitGatewayConnectPeer(args: AssociateTransitGatewayConnectPeerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateTransitGatewayConnectPeerCommandOutput) => void): void;
            /**
                * <p>Creates a core network Connect attachment from a specified core network attachment. </p>
                *          <p>A core network Connect attachment is a GRE-based tunnel attachment that you can use to
                *          establish a connection between a core network and an appliance. A core network Connect
                *          attachment uses an existing VPC attachment as the underlying transport mechanism.</p>
                */
            createConnectAttachment(args: CreateConnectAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectAttachmentCommandOutput>;
            createConnectAttachment(args: CreateConnectAttachmentCommandInput, cb: (err: any, data?: CreateConnectAttachmentCommandOutput) => void): void;
            createConnectAttachment(args: CreateConnectAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectAttachmentCommandOutput) => void): void;
            /**
                * <p>Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.</p>
                */
            createConnection(args: CreateConnectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectionCommandOutput>;
            createConnection(args: CreateConnectionCommandInput, cb: (err: any, data?: CreateConnectionCommandOutput) => void): void;
            createConnection(args: CreateConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectionCommandOutput) => void): void;
            /**
                * <p>Creates a core network Connect peer for a specified core network connect attachment between a core network and an appliance.
                *          The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).</p>
                */
            createConnectPeer(args: CreateConnectPeerCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectPeerCommandOutput>;
            createConnectPeer(args: CreateConnectPeerCommandInput, cb: (err: any, data?: CreateConnectPeerCommandOutput) => void): void;
            createConnectPeer(args: CreateConnectPeerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectPeerCommandOutput) => void): void;
            /**
                * <p>Creates a core network as part of your global network, and optionally, with a core network policy.</p>
                */
            createCoreNetwork(args: CreateCoreNetworkCommandInput, options?: __HttpHandlerOptions): Promise<CreateCoreNetworkCommandOutput>;
            createCoreNetwork(args: CreateCoreNetworkCommandInput, cb: (err: any, data?: CreateCoreNetworkCommandOutput) => void): void;
            createCoreNetwork(args: CreateCoreNetworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCoreNetworkCommandOutput) => void): void;
            /**
                * <p>Creates a new device in a global network. If you specify both a site ID and a
                *             location, the location of the site is used for visualization in the Network Manager console.</p>
                */
            createDevice(args: CreateDeviceCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeviceCommandOutput>;
            createDevice(args: CreateDeviceCommandInput, cb: (err: any, data?: CreateDeviceCommandOutput) => void): void;
            createDevice(args: CreateDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeviceCommandOutput) => void): void;
            /**
                * <p>Creates a new, empty global network.</p>
                */
            createGlobalNetwork(args: CreateGlobalNetworkCommandInput, options?: __HttpHandlerOptions): Promise<CreateGlobalNetworkCommandOutput>;
            createGlobalNetwork(args: CreateGlobalNetworkCommandInput, cb: (err: any, data?: CreateGlobalNetworkCommandOutput) => void): void;
            createGlobalNetwork(args: CreateGlobalNetworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGlobalNetworkCommandOutput) => void): void;
            /**
                * <p>Creates a new link for a specified site.</p>
                */
            createLink(args: CreateLinkCommandInput, options?: __HttpHandlerOptions): Promise<CreateLinkCommandOutput>;
            createLink(args: CreateLinkCommandInput, cb: (err: any, data?: CreateLinkCommandOutput) => void): void;
            createLink(args: CreateLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLinkCommandOutput) => void): void;
            /**
                * <p>Creates a new site in a global network.</p>
                */
            createSite(args: CreateSiteCommandInput, options?: __HttpHandlerOptions): Promise<CreateSiteCommandOutput>;
            createSite(args: CreateSiteCommandInput, cb: (err: any, data?: CreateSiteCommandOutput) => void): void;
            createSite(args: CreateSiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSiteCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Web Services site-to-site VPN attachment on an edge location of a core network.</p>
                */
            createSiteToSiteVpnAttachment(args: CreateSiteToSiteVpnAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateSiteToSiteVpnAttachmentCommandOutput>;
            createSiteToSiteVpnAttachment(args: CreateSiteToSiteVpnAttachmentCommandInput, cb: (err: any, data?: CreateSiteToSiteVpnAttachmentCommandOutput) => void): void;
            createSiteToSiteVpnAttachment(args: CreateSiteToSiteVpnAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSiteToSiteVpnAttachmentCommandOutput) => void): void;
            /**
                * <p>Creates a transit gateway peering connection.</p>
                */
            createTransitGatewayPeering(args: CreateTransitGatewayPeeringCommandInput, options?: __HttpHandlerOptions): Promise<CreateTransitGatewayPeeringCommandOutput>;
            createTransitGatewayPeering(args: CreateTransitGatewayPeeringCommandInput, cb: (err: any, data?: CreateTransitGatewayPeeringCommandOutput) => void): void;
            createTransitGatewayPeering(args: CreateTransitGatewayPeeringCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTransitGatewayPeeringCommandOutput) => void): void;
            /**
                * <p>Creates a transit gateway route table attachment.</p>
                */
            createTransitGatewayRouteTableAttachment(args: CreateTransitGatewayRouteTableAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateTransitGatewayRouteTableAttachmentCommandOutput>;
            createTransitGatewayRouteTableAttachment(args: CreateTransitGatewayRouteTableAttachmentCommandInput, cb: (err: any, data?: CreateTransitGatewayRouteTableAttachmentCommandOutput) => void): void;
            createTransitGatewayRouteTableAttachment(args: CreateTransitGatewayRouteTableAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTransitGatewayRouteTableAttachmentCommandOutput) => void): void;
            /**
                * <p>Creates a VPC attachment on an edge location of a core network.</p>
                */
            createVpcAttachment(args: CreateVpcAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateVpcAttachmentCommandOutput>;
            createVpcAttachment(args: CreateVpcAttachmentCommandInput, cb: (err: any, data?: CreateVpcAttachmentCommandOutput) => void): void;
            createVpcAttachment(args: CreateVpcAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVpcAttachmentCommandOutput) => void): void;
            /**
                * <p>Deletes an attachment. Supports all attachment types.</p>
                */
            deleteAttachment(args: DeleteAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAttachmentCommandOutput>;
            deleteAttachment(args: DeleteAttachmentCommandInput, cb: (err: any, data?: DeleteAttachmentCommandOutput) => void): void;
            deleteAttachment(args: DeleteAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAttachmentCommandOutput) => void): void;
            /**
                * <p>Deletes the specified connection in your global network.</p>
                */
            deleteConnection(args: DeleteConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectionCommandOutput>;
            deleteConnection(args: DeleteConnectionCommandInput, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            deleteConnection(args: DeleteConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            /**
                * <p>Deletes a Connect peer.</p>
                */
            deleteConnectPeer(args: DeleteConnectPeerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectPeerCommandOutput>;
            deleteConnectPeer(args: DeleteConnectPeerCommandInput, cb: (err: any, data?: DeleteConnectPeerCommandOutput) => void): void;
            deleteConnectPeer(args: DeleteConnectPeerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectPeerCommandOutput) => void): void;
            /**
                * <p>Deletes a core network along with all core network policies. This can only be done if there are no attachments on a core network.</p>
                */
            deleteCoreNetwork(args: DeleteCoreNetworkCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCoreNetworkCommandOutput>;
            deleteCoreNetwork(args: DeleteCoreNetworkCommandInput, cb: (err: any, data?: DeleteCoreNetworkCommandOutput) => void): void;
            deleteCoreNetwork(args: DeleteCoreNetworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCoreNetworkCommandOutput) => void): void;
            /**
                * <p>Deletes a policy version from a core network. You can't delete the current LIVE policy.</p>
                */
            deleteCoreNetworkPolicyVersion(args: DeleteCoreNetworkPolicyVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCoreNetworkPolicyVersionCommandOutput>;
            deleteCoreNetworkPolicyVersion(args: DeleteCoreNetworkPolicyVersionCommandInput, cb: (err: any, data?: DeleteCoreNetworkPolicyVersionCommandOutput) => void): void;
            deleteCoreNetworkPolicyVersion(args: DeleteCoreNetworkPolicyVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCoreNetworkPolicyVersionCommandOutput) => void): void;
            /**
                * <p>Deletes an existing device. You must first disassociate the device from any links and
                *             customer gateways.</p>
                */
            deleteDevice(args: DeleteDeviceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeviceCommandOutput>;
            deleteDevice(args: DeleteDeviceCommandInput, cb: (err: any, data?: DeleteDeviceCommandOutput) => void): void;
            deleteDevice(args: DeleteDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeviceCommandOutput) => void): void;
            /**
                * <p>Deletes an existing global network. You must first delete all global network objects
                *             (devices, links, and sites), deregister all transit gateways, and delete any core networks.</p>
                */
            deleteGlobalNetwork(args: DeleteGlobalNetworkCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGlobalNetworkCommandOutput>;
            deleteGlobalNetwork(args: DeleteGlobalNetworkCommandInput, cb: (err: any, data?: DeleteGlobalNetworkCommandOutput) => void): void;
            deleteGlobalNetwork(args: DeleteGlobalNetworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGlobalNetworkCommandOutput) => void): void;
            /**
                * <p>Deletes an existing link. You must first disassociate the link from any devices and
                *             customer gateways.</p>
                */
            deleteLink(args: DeleteLinkCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLinkCommandOutput>;
            deleteLink(args: DeleteLinkCommandInput, cb: (err: any, data?: DeleteLinkCommandOutput) => void): void;
            deleteLink(args: DeleteLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLinkCommandOutput) => void): void;
            /**
                * <p>Deletes an existing peering connection.</p>
                */
            deletePeering(args: DeletePeeringCommandInput, options?: __HttpHandlerOptions): Promise<DeletePeeringCommandOutput>;
            deletePeering(args: DeletePeeringCommandInput, cb: (err: any, data?: DeletePeeringCommandOutput) => void): void;
            deletePeering(args: DeletePeeringCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePeeringCommandOutput) => void): void;
            /**
                * <p>Deletes a resource policy for the specified resource. This revokes the access of the principals specified in the resource policy.</p>
                */
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourcePolicyCommandOutput>;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes an existing site. The site cannot be associated with any device or link.</p>
                */
            deleteSite(args: DeleteSiteCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSiteCommandOutput>;
            deleteSite(args: DeleteSiteCommandInput, cb: (err: any, data?: DeleteSiteCommandOutput) => void): void;
            deleteSite(args: DeleteSiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSiteCommandOutput) => void): void;
            /**
                * <p>Deregisters a transit gateway from your global network. This action does not delete
                *             your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.</p>
                */
            deregisterTransitGateway(args: DeregisterTransitGatewayCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterTransitGatewayCommandOutput>;
            deregisterTransitGateway(args: DeregisterTransitGatewayCommandInput, cb: (err: any, data?: DeregisterTransitGatewayCommandOutput) => void): void;
            deregisterTransitGateway(args: DeregisterTransitGatewayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterTransitGatewayCommandOutput) => void): void;
            /**
                * <p>Describes one or more global networks. By default, all global networks are
                *             described. To describe the objects in your global network, you must use the appropriate
                *                 <code>Get*</code> action. For example, to list the transit gateways in your global
                *             network, use <a>GetTransitGatewayRegistrations</a>.</p>
                */
            describeGlobalNetworks(args: DescribeGlobalNetworksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGlobalNetworksCommandOutput>;
            describeGlobalNetworks(args: DescribeGlobalNetworksCommandInput, cb: (err: any, data?: DescribeGlobalNetworksCommandOutput) => void): void;
            describeGlobalNetworks(args: DescribeGlobalNetworksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGlobalNetworksCommandOutput) => void): void;
            /**
                * <p>Disassociates a core network Connect peer from a device and a link. </p>
                */
            disassociateConnectPeer(args: DisassociateConnectPeerCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateConnectPeerCommandOutput>;
            disassociateConnectPeer(args: DisassociateConnectPeerCommandInput, cb: (err: any, data?: DisassociateConnectPeerCommandOutput) => void): void;
            disassociateConnectPeer(args: DisassociateConnectPeerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateConnectPeerCommandOutput) => void): void;
            /**
                * <p>Disassociates a customer gateway from a device and a link.</p>
                */
            disassociateCustomerGateway(args: DisassociateCustomerGatewayCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateCustomerGatewayCommandOutput>;
            disassociateCustomerGateway(args: DisassociateCustomerGatewayCommandInput, cb: (err: any, data?: DisassociateCustomerGatewayCommandOutput) => void): void;
            disassociateCustomerGateway(args: DisassociateCustomerGatewayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateCustomerGatewayCommandOutput) => void): void;
            /**
                * <p>Disassociates an existing device from a link. You must first disassociate any customer
                *             gateways that are associated with the link.</p>
                */
            disassociateLink(args: DisassociateLinkCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateLinkCommandOutput>;
            disassociateLink(args: DisassociateLinkCommandInput, cb: (err: any, data?: DisassociateLinkCommandOutput) => void): void;
            disassociateLink(args: DisassociateLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateLinkCommandOutput) => void): void;
            /**
                * <p>Disassociates a transit gateway Connect peer from a device and link.</p>
                */
            disassociateTransitGatewayConnectPeer(args: DisassociateTransitGatewayConnectPeerCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateTransitGatewayConnectPeerCommandOutput>;
            disassociateTransitGatewayConnectPeer(args: DisassociateTransitGatewayConnectPeerCommandInput, cb: (err: any, data?: DisassociateTransitGatewayConnectPeerCommandOutput) => void): void;
            disassociateTransitGatewayConnectPeer(args: DisassociateTransitGatewayConnectPeerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateTransitGatewayConnectPeerCommandOutput) => void): void;
            /**
                * <p>Executes a change set on your core network. Deploys changes globally based on the policy submitted..</p>
                */
            executeCoreNetworkChangeSet(args: ExecuteCoreNetworkChangeSetCommandInput, options?: __HttpHandlerOptions): Promise<ExecuteCoreNetworkChangeSetCommandOutput>;
            executeCoreNetworkChangeSet(args: ExecuteCoreNetworkChangeSetCommandInput, cb: (err: any, data?: ExecuteCoreNetworkChangeSetCommandOutput) => void): void;
            executeCoreNetworkChangeSet(args: ExecuteCoreNetworkChangeSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExecuteCoreNetworkChangeSetCommandOutput) => void): void;
            /**
                * <p>Returns information about a core network Connect attachment.</p>
                */
            getConnectAttachment(args: GetConnectAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectAttachmentCommandOutput>;
            getConnectAttachment(args: GetConnectAttachmentCommandInput, cb: (err: any, data?: GetConnectAttachmentCommandOutput) => void): void;
            getConnectAttachment(args: GetConnectAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectAttachmentCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more of your connections in a global network.</p>
                */
            getConnections(args: GetConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectionsCommandOutput>;
            getConnections(args: GetConnectionsCommandInput, cb: (err: any, data?: GetConnectionsCommandOutput) => void): void;
            getConnections(args: GetConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectionsCommandOutput) => void): void;
            /**
                * <p>Returns information about a core network Connect peer.</p>
                */
            getConnectPeer(args: GetConnectPeerCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectPeerCommandOutput>;
            getConnectPeer(args: GetConnectPeerCommandInput, cb: (err: any, data?: GetConnectPeerCommandOutput) => void): void;
            getConnectPeer(args: GetConnectPeerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectPeerCommandOutput) => void): void;
            /**
                * <p>Returns information about a core network Connect peer associations.</p>
                */
            getConnectPeerAssociations(args: GetConnectPeerAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectPeerAssociationsCommandOutput>;
            getConnectPeerAssociations(args: GetConnectPeerAssociationsCommandInput, cb: (err: any, data?: GetConnectPeerAssociationsCommandOutput) => void): void;
            getConnectPeerAssociations(args: GetConnectPeerAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectPeerAssociationsCommandOutput) => void): void;
            /**
                * <p>Returns information about the LIVE policy for a core network.</p>
                */
            getCoreNetwork(args: GetCoreNetworkCommandInput, options?: __HttpHandlerOptions): Promise<GetCoreNetworkCommandOutput>;
            getCoreNetwork(args: GetCoreNetworkCommandInput, cb: (err: any, data?: GetCoreNetworkCommandOutput) => void): void;
            getCoreNetwork(args: GetCoreNetworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCoreNetworkCommandOutput) => void): void;
            /**
                * <p>Returns information about a core network change event.</p>
                */
            getCoreNetworkChangeEvents(args: GetCoreNetworkChangeEventsCommandInput, options?: __HttpHandlerOptions): Promise<GetCoreNetworkChangeEventsCommandOutput>;
            getCoreNetworkChangeEvents(args: GetCoreNetworkChangeEventsCommandInput, cb: (err: any, data?: GetCoreNetworkChangeEventsCommandOutput) => void): void;
            getCoreNetworkChangeEvents(args: GetCoreNetworkChangeEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCoreNetworkChangeEventsCommandOutput) => void): void;
            /**
                * <p>Returns a change set between the LIVE core network policy and a submitted policy.</p>
                */
            getCoreNetworkChangeSet(args: GetCoreNetworkChangeSetCommandInput, options?: __HttpHandlerOptions): Promise<GetCoreNetworkChangeSetCommandOutput>;
            getCoreNetworkChangeSet(args: GetCoreNetworkChangeSetCommandInput, cb: (err: any, data?: GetCoreNetworkChangeSetCommandOutput) => void): void;
            getCoreNetworkChangeSet(args: GetCoreNetworkChangeSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCoreNetworkChangeSetCommandOutput) => void): void;
            /**
                * <p>Returns details about a core network policy. You can get details about your current live policy or any previous policy version.</p>
                */
            getCoreNetworkPolicy(args: GetCoreNetworkPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetCoreNetworkPolicyCommandOutput>;
            getCoreNetworkPolicy(args: GetCoreNetworkPolicyCommandInput, cb: (err: any, data?: GetCoreNetworkPolicyCommandOutput) => void): void;
            getCoreNetworkPolicy(args: GetCoreNetworkPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCoreNetworkPolicyCommandOutput) => void): void;
            /**
                * <p>Gets the association information for customer gateways that are associated with
                *             devices and links in your global network.</p>
                */
            getCustomerGatewayAssociations(args: GetCustomerGatewayAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<GetCustomerGatewayAssociationsCommandOutput>;
            getCustomerGatewayAssociations(args: GetCustomerGatewayAssociationsCommandInput, cb: (err: any, data?: GetCustomerGatewayAssociationsCommandOutput) => void): void;
            getCustomerGatewayAssociations(args: GetCustomerGatewayAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCustomerGatewayAssociationsCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more of your devices in a global network.</p>
                */
            getDevices(args: GetDevicesCommandInput, options?: __HttpHandlerOptions): Promise<GetDevicesCommandOutput>;
            getDevices(args: GetDevicesCommandInput, cb: (err: any, data?: GetDevicesCommandOutput) => void): void;
            getDevices(args: GetDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevicesCommandOutput) => void): void;
            /**
                * <p>Gets the link associations for a device or a link. Either the device ID or the link ID
                *             must be specified.</p>
                */
            getLinkAssociations(args: GetLinkAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<GetLinkAssociationsCommandOutput>;
            getLinkAssociations(args: GetLinkAssociationsCommandInput, cb: (err: any, data?: GetLinkAssociationsCommandOutput) => void): void;
            getLinkAssociations(args: GetLinkAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLinkAssociationsCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more links in a specified global network.</p>
                *         <p>If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.</p>
                */
            getLinks(args: GetLinksCommandInput, options?: __HttpHandlerOptions): Promise<GetLinksCommandOutput>;
            getLinks(args: GetLinksCommandInput, cb: (err: any, data?: GetLinksCommandOutput) => void): void;
            getLinks(args: GetLinksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLinksCommandOutput) => void): void;
            /**
                * <p>Gets the count of network resources, by resource type, for the specified global network.</p>
                */
            getNetworkResourceCounts(args: GetNetworkResourceCountsCommandInput, options?: __HttpHandlerOptions): Promise<GetNetworkResourceCountsCommandOutput>;
            getNetworkResourceCounts(args: GetNetworkResourceCountsCommandInput, cb: (err: any, data?: GetNetworkResourceCountsCommandOutput) => void): void;
            getNetworkResourceCounts(args: GetNetworkResourceCountsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNetworkResourceCountsCommandOutput) => void): void;
            /**
                * <p>Gets the network resource relationships for the specified global network.</p>
                */
            getNetworkResourceRelationships(args: GetNetworkResourceRelationshipsCommandInput, options?: __HttpHandlerOptions): Promise<GetNetworkResourceRelationshipsCommandOutput>;
            getNetworkResourceRelationships(args: GetNetworkResourceRelationshipsCommandInput, cb: (err: any, data?: GetNetworkResourceRelationshipsCommandOutput) => void): void;
            getNetworkResourceRelationships(args: GetNetworkResourceRelationshipsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNetworkResourceRelationshipsCommandOutput) => void): void;
            /**
                * <p>Describes the network resources for the specified global network.</p>
                *          <p>The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.</p>
                */
            getNetworkResources(args: GetNetworkResourcesCommandInput, options?: __HttpHandlerOptions): Promise<GetNetworkResourcesCommandOutput>;
            getNetworkResources(args: GetNetworkResourcesCommandInput, cb: (err: any, data?: GetNetworkResourcesCommandOutput) => void): void;
            getNetworkResources(args: GetNetworkResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNetworkResourcesCommandOutput) => void): void;
            /**
                * <p>Gets the network routes of the specified global network.</p>
                */
            getNetworkRoutes(args: GetNetworkRoutesCommandInput, options?: __HttpHandlerOptions): Promise<GetNetworkRoutesCommandOutput>;
            getNetworkRoutes(args: GetNetworkRoutesCommandInput, cb: (err: any, data?: GetNetworkRoutesCommandOutput) => void): void;
            getNetworkRoutes(args: GetNetworkRoutesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNetworkRoutesCommandOutput) => void): void;
            /**
                * <p>Gets the network telemetry of the specified global network.</p>
                */
            getNetworkTelemetry(args: GetNetworkTelemetryCommandInput, options?: __HttpHandlerOptions): Promise<GetNetworkTelemetryCommandOutput>;
            getNetworkTelemetry(args: GetNetworkTelemetryCommandInput, cb: (err: any, data?: GetNetworkTelemetryCommandOutput) => void): void;
            getNetworkTelemetry(args: GetNetworkTelemetryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNetworkTelemetryCommandOutput) => void): void;
            /**
                * <p>Returns information about a resource policy.</p>
                */
            getResourcePolicy(args: GetResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcePolicyCommandOutput>;
            getResourcePolicy(args: GetResourcePolicyCommandInput, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            getResourcePolicy(args: GetResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Gets information about the specified route analysis.</p>
                */
            getRouteAnalysis(args: GetRouteAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<GetRouteAnalysisCommandOutput>;
            getRouteAnalysis(args: GetRouteAnalysisCommandInput, cb: (err: any, data?: GetRouteAnalysisCommandOutput) => void): void;
            getRouteAnalysis(args: GetRouteAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRouteAnalysisCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more of your sites in a global network.</p>
                */
            getSites(args: GetSitesCommandInput, options?: __HttpHandlerOptions): Promise<GetSitesCommandOutput>;
            getSites(args: GetSitesCommandInput, cb: (err: any, data?: GetSitesCommandOutput) => void): void;
            getSites(args: GetSitesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSitesCommandOutput) => void): void;
            /**
                * <p>Returns information about a site-to-site VPN attachment.</p>
                */
            getSiteToSiteVpnAttachment(args: GetSiteToSiteVpnAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<GetSiteToSiteVpnAttachmentCommandOutput>;
            getSiteToSiteVpnAttachment(args: GetSiteToSiteVpnAttachmentCommandInput, cb: (err: any, data?: GetSiteToSiteVpnAttachmentCommandOutput) => void): void;
            getSiteToSiteVpnAttachment(args: GetSiteToSiteVpnAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSiteToSiteVpnAttachmentCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more of your transit gateway Connect peer associations in a global network.</p>
                */
            getTransitGatewayConnectPeerAssociations(args: GetTransitGatewayConnectPeerAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<GetTransitGatewayConnectPeerAssociationsCommandOutput>;
            getTransitGatewayConnectPeerAssociations(args: GetTransitGatewayConnectPeerAssociationsCommandInput, cb: (err: any, data?: GetTransitGatewayConnectPeerAssociationsCommandOutput) => void): void;
            getTransitGatewayConnectPeerAssociations(args: GetTransitGatewayConnectPeerAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTransitGatewayConnectPeerAssociationsCommandOutput) => void): void;
            /**
                * <p>Returns information about a transit gateway peer.</p>
                */
            getTransitGatewayPeering(args: GetTransitGatewayPeeringCommandInput, options?: __HttpHandlerOptions): Promise<GetTransitGatewayPeeringCommandOutput>;
            getTransitGatewayPeering(args: GetTransitGatewayPeeringCommandInput, cb: (err: any, data?: GetTransitGatewayPeeringCommandOutput) => void): void;
            getTransitGatewayPeering(args: GetTransitGatewayPeeringCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTransitGatewayPeeringCommandOutput) => void): void;
            /**
                * <p>Gets information about the transit gateway registrations in a specified
                *             global network.</p>
                */
            getTransitGatewayRegistrations(args: GetTransitGatewayRegistrationsCommandInput, options?: __HttpHandlerOptions): Promise<GetTransitGatewayRegistrationsCommandOutput>;
            getTransitGatewayRegistrations(args: GetTransitGatewayRegistrationsCommandInput, cb: (err: any, data?: GetTransitGatewayRegistrationsCommandOutput) => void): void;
            getTransitGatewayRegistrations(args: GetTransitGatewayRegistrationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTransitGatewayRegistrationsCommandOutput) => void): void;
            /**
                * <p>Returns information about a transit gateway route table attachment.</p>
                */
            getTransitGatewayRouteTableAttachment(args: GetTransitGatewayRouteTableAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<GetTransitGatewayRouteTableAttachmentCommandOutput>;
            getTransitGatewayRouteTableAttachment(args: GetTransitGatewayRouteTableAttachmentCommandInput, cb: (err: any, data?: GetTransitGatewayRouteTableAttachmentCommandOutput) => void): void;
            getTransitGatewayRouteTableAttachment(args: GetTransitGatewayRouteTableAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTransitGatewayRouteTableAttachmentCommandOutput) => void): void;
            /**
                * <p>Returns information about a VPC attachment.</p>
                */
            getVpcAttachment(args: GetVpcAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<GetVpcAttachmentCommandOutput>;
            getVpcAttachment(args: GetVpcAttachmentCommandInput, cb: (err: any, data?: GetVpcAttachmentCommandOutput) => void): void;
            getVpcAttachment(args: GetVpcAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVpcAttachmentCommandOutput) => void): void;
            /**
                * <p>Returns a list of core network attachments.</p>
                */
            listAttachments(args: ListAttachmentsCommandInput, options?: __HttpHandlerOptions): Promise<ListAttachmentsCommandOutput>;
            listAttachments(args: ListAttachmentsCommandInput, cb: (err: any, data?: ListAttachmentsCommandOutput) => void): void;
            listAttachments(args: ListAttachmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAttachmentsCommandOutput) => void): void;
            /**
                * <p>Returns a list of core network Connect peers.</p>
                */
            listConnectPeers(args: ListConnectPeersCommandInput, options?: __HttpHandlerOptions): Promise<ListConnectPeersCommandOutput>;
            listConnectPeers(args: ListConnectPeersCommandInput, cb: (err: any, data?: ListConnectPeersCommandOutput) => void): void;
            listConnectPeers(args: ListConnectPeersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConnectPeersCommandOutput) => void): void;
            /**
                * <p>Returns a list of core network policy versions.</p>
                */
            listCoreNetworkPolicyVersions(args: ListCoreNetworkPolicyVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListCoreNetworkPolicyVersionsCommandOutput>;
            listCoreNetworkPolicyVersions(args: ListCoreNetworkPolicyVersionsCommandInput, cb: (err: any, data?: ListCoreNetworkPolicyVersionsCommandOutput) => void): void;
            listCoreNetworkPolicyVersions(args: ListCoreNetworkPolicyVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCoreNetworkPolicyVersionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of owned and shared core networks.</p>
                */
            listCoreNetworks(args: ListCoreNetworksCommandInput, options?: __HttpHandlerOptions): Promise<ListCoreNetworksCommandOutput>;
            listCoreNetworks(args: ListCoreNetworksCommandInput, cb: (err: any, data?: ListCoreNetworksCommandOutput) => void): void;
            listCoreNetworks(args: ListCoreNetworksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCoreNetworksCommandOutput) => void): void;
            /**
                * <p>Gets the status of the Service Linked Role (SLR) deployment for the accounts in a given Amazon Web Services Organization.</p>
                */
            listOrganizationServiceAccessStatus(args: ListOrganizationServiceAccessStatusCommandInput, options?: __HttpHandlerOptions): Promise<ListOrganizationServiceAccessStatusCommandOutput>;
            listOrganizationServiceAccessStatus(args: ListOrganizationServiceAccessStatusCommandInput, cb: (err: any, data?: ListOrganizationServiceAccessStatusCommandOutput) => void): void;
            listOrganizationServiceAccessStatus(args: ListOrganizationServiceAccessStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOrganizationServiceAccessStatusCommandOutput) => void): void;
            /**
                * <p>Lists the peerings for a core network.</p>
                */
            listPeerings(args: ListPeeringsCommandInput, options?: __HttpHandlerOptions): Promise<ListPeeringsCommandOutput>;
            listPeerings(args: ListPeeringsCommandInput, cb: (err: any, data?: ListPeeringsCommandOutput) => void): void;
            listPeerings(args: ListPeeringsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPeeringsCommandOutput) => void): void;
            /**
                * <p>Lists the tags for a specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and the submitted policy.</p>
                */
            putCoreNetworkPolicy(args: PutCoreNetworkPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutCoreNetworkPolicyCommandOutput>;
            putCoreNetworkPolicy(args: PutCoreNetworkPolicyCommandInput, cb: (err: any, data?: PutCoreNetworkPolicyCommandOutput) => void): void;
            putCoreNetworkPolicy(args: PutCoreNetworkPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutCoreNetworkPolicyCommandOutput) => void): void;
            /**
                * <p>Creates or updates a resource policy.</p>
                */
            putResourcePolicy(args: PutResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutResourcePolicyCommandOutput>;
            putResourcePolicy(args: PutResourcePolicyCommandInput, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            putResourcePolicy(args: PutResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Registers a transit gateway in your global network. The transit gateway can be in any
                *             Amazon Web Services Region, but it must be owned by the same Amazon Web Services account that owns
                *             the global network. You cannot register a transit gateway in more than one global network.</p>
                */
            registerTransitGateway(args: RegisterTransitGatewayCommandInput, options?: __HttpHandlerOptions): Promise<RegisterTransitGatewayCommandOutput>;
            registerTransitGateway(args: RegisterTransitGatewayCommandInput, cb: (err: any, data?: RegisterTransitGatewayCommandOutput) => void): void;
            registerTransitGateway(args: RegisterTransitGatewayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterTransitGatewayCommandOutput) => void): void;
            /**
                * <p>Rejects a core network attachment request.</p>
                */
            rejectAttachment(args: RejectAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<RejectAttachmentCommandOutput>;
            rejectAttachment(args: RejectAttachmentCommandInput, cb: (err: any, data?: RejectAttachmentCommandOutput) => void): void;
            rejectAttachment(args: RejectAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RejectAttachmentCommandOutput) => void): void;
            /**
                * <p>Restores a previous policy version as a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and restored policy.</p>
                */
            restoreCoreNetworkPolicyVersion(args: RestoreCoreNetworkPolicyVersionCommandInput, options?: __HttpHandlerOptions): Promise<RestoreCoreNetworkPolicyVersionCommandOutput>;
            restoreCoreNetworkPolicyVersion(args: RestoreCoreNetworkPolicyVersionCommandInput, cb: (err: any, data?: RestoreCoreNetworkPolicyVersionCommandOutput) => void): void;
            restoreCoreNetworkPolicyVersion(args: RestoreCoreNetworkPolicyVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreCoreNetworkPolicyVersionCommandOutput) => void): void;
            /**
                * <p>Enables for the Network Manager service for an Amazon Web Services Organization. This can only be called by a management account within the organization. </p>
                */
            startOrganizationServiceAccessUpdate(args: StartOrganizationServiceAccessUpdateCommandInput, options?: __HttpHandlerOptions): Promise<StartOrganizationServiceAccessUpdateCommandOutput>;
            startOrganizationServiceAccessUpdate(args: StartOrganizationServiceAccessUpdateCommandInput, cb: (err: any, data?: StartOrganizationServiceAccessUpdateCommandOutput) => void): void;
            startOrganizationServiceAccessUpdate(args: StartOrganizationServiceAccessUpdateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartOrganizationServiceAccessUpdateCommandOutput) => void): void;
            /**
                * <p>Starts analyzing the routing path between the specified source and destination. For more information,
                *             see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/route-analyzer.html">Route Analyzer</a>.</p>
                */
            startRouteAnalysis(args: StartRouteAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<StartRouteAnalysisCommandOutput>;
            startRouteAnalysis(args: StartRouteAnalysisCommandInput, cb: (err: any, data?: StartRouteAnalysisCommandOutput) => void): void;
            startRouteAnalysis(args: StartRouteAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartRouteAnalysisCommandOutput) => void): void;
            /**
                * <p>Tags a specified resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the information for an existing connection. To remove information for any of the parameters,
                *             specify an empty string.</p>
                */
            updateConnection(args: UpdateConnectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectionCommandOutput>;
            updateConnection(args: UpdateConnectionCommandInput, cb: (err: any, data?: UpdateConnectionCommandOutput) => void): void;
            updateConnection(args: UpdateConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectionCommandOutput) => void): void;
            /**
                * <p>Updates the description of a core network.</p>
                */
            updateCoreNetwork(args: UpdateCoreNetworkCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCoreNetworkCommandOutput>;
            updateCoreNetwork(args: UpdateCoreNetworkCommandInput, cb: (err: any, data?: UpdateCoreNetworkCommandOutput) => void): void;
            updateCoreNetwork(args: UpdateCoreNetworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCoreNetworkCommandOutput) => void): void;
            /**
                * <p>Updates the details for an existing device. To remove information for any of the
                *             parameters, specify an empty string.</p>
                */
            updateDevice(args: UpdateDeviceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeviceCommandOutput>;
            updateDevice(args: UpdateDeviceCommandInput, cb: (err: any, data?: UpdateDeviceCommandOutput) => void): void;
            updateDevice(args: UpdateDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeviceCommandOutput) => void): void;
            /**
                * <p>Updates an existing global network. To remove information for any of the parameters,
                *             specify an empty string.</p>
                */
            updateGlobalNetwork(args: UpdateGlobalNetworkCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGlobalNetworkCommandOutput>;
            updateGlobalNetwork(args: UpdateGlobalNetworkCommandInput, cb: (err: any, data?: UpdateGlobalNetworkCommandOutput) => void): void;
            updateGlobalNetwork(args: UpdateGlobalNetworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGlobalNetworkCommandOutput) => void): void;
            /**
                * <p>Updates the details for an existing link. To remove information for any of the
                *             parameters, specify an empty string.</p>
                */
            updateLink(args: UpdateLinkCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLinkCommandOutput>;
            updateLink(args: UpdateLinkCommandInput, cb: (err: any, data?: UpdateLinkCommandOutput) => void): void;
            updateLink(args: UpdateLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLinkCommandOutput) => void): void;
            /**
                * <p>Updates the resource metadata for the specified global network.</p>
                */
            updateNetworkResourceMetadata(args: UpdateNetworkResourceMetadataCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNetworkResourceMetadataCommandOutput>;
            updateNetworkResourceMetadata(args: UpdateNetworkResourceMetadataCommandInput, cb: (err: any, data?: UpdateNetworkResourceMetadataCommandOutput) => void): void;
            updateNetworkResourceMetadata(args: UpdateNetworkResourceMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNetworkResourceMetadataCommandOutput) => void): void;
            /**
                * <p>Updates the information for an existing site. To remove information for any of the
                *             parameters, specify an empty string.</p>
                */
            updateSite(args: UpdateSiteCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSiteCommandOutput>;
            updateSite(args: UpdateSiteCommandInput, cb: (err: any, data?: UpdateSiteCommandOutput) => void): void;
            updateSite(args: UpdateSiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSiteCommandOutput) => void): void;
            /**
                * <p>Updates a VPC attachment.</p>
                */
            updateVpcAttachment(args: UpdateVpcAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVpcAttachmentCommandOutput>;
            updateVpcAttachment(args: UpdateVpcAttachmentCommandInput, cb: (err: any, data?: UpdateVpcAttachmentCommandOutput) => void): void;
            updateVpcAttachment(args: UpdateVpcAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVpcAttachmentCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AcceptAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AcceptAttachmentRequest, AcceptAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface AcceptAttachmentCommandInput extends AcceptAttachmentRequest {
    }
    export interface AcceptAttachmentCommandOutput extends AcceptAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts a core network attachment request. </p>
        *          <p>Once the attachment request is accepted by a core network owner, the attachment is
        *          created and connected to a core network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, AcceptAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, AcceptAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new AcceptAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AcceptAttachmentCommandInput} for command's `input` shape.
        * @see {@link AcceptAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class AcceptAttachmentCommand extends $Command<AcceptAttachmentCommandInput, AcceptAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: AcceptAttachmentCommandInput;
            constructor(input: AcceptAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AcceptAttachmentCommandInput, AcceptAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateConnectPeerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateConnectPeerRequest, AssociateConnectPeerResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface AssociateConnectPeerCommandInput extends AssociateConnectPeerRequest {
    }
    export interface AssociateConnectPeerCommandOutput extends AssociateConnectPeerResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a core network Connect peer with a device and optionally, with a link. </p>
        *          <p>If you specify a link, it must be associated with the specified device. You can only
        *          associate core network Connect peers that have been created on a core network Connect
        *          attachment on a core network. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, AssociateConnectPeerCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, AssociateConnectPeerCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new AssociateConnectPeerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateConnectPeerCommandInput} for command's `input` shape.
        * @see {@link AssociateConnectPeerCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class AssociateConnectPeerCommand extends $Command<AssociateConnectPeerCommandInput, AssociateConnectPeerCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: AssociateConnectPeerCommandInput;
            constructor(input: AssociateConnectPeerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateConnectPeerCommandInput, AssociateConnectPeerCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateCustomerGatewayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateCustomerGatewayRequest, AssociateCustomerGatewayResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface AssociateCustomerGatewayCommandInput extends AssociateCustomerGatewayRequest {
    }
    export interface AssociateCustomerGatewayCommandOutput extends AssociateCustomerGatewayResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a customer gateway with a device and optionally, with a link. If you
        *             specify a link, it must be associated with the specified device. </p>
        *         <p>You can only associate customer gateways that are connected to a VPN attachment on a
        *             transit gateway or core network registered in your global network. When you register a
        *             transit gateway or core network, customer gateways that are connected to the transit
        *             gateway are automatically included in the global network. To list customer gateways
        *             that are connected to a transit gateway, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html">DescribeVpnConnections</a> EC2 API and filter by
        *                 <code>transit-gateway-id</code>.</p>
        *         <p>You cannot associate a customer gateway with more than one device and link. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, AssociateCustomerGatewayCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, AssociateCustomerGatewayCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new AssociateCustomerGatewayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateCustomerGatewayCommandInput} for command's `input` shape.
        * @see {@link AssociateCustomerGatewayCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class AssociateCustomerGatewayCommand extends $Command<AssociateCustomerGatewayCommandInput, AssociateCustomerGatewayCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: AssociateCustomerGatewayCommandInput;
            constructor(input: AssociateCustomerGatewayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateCustomerGatewayCommandInput, AssociateCustomerGatewayCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateLinkRequest, AssociateLinkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface AssociateLinkCommandInput extends AssociateLinkRequest {
    }
    export interface AssociateLinkCommandOutput extends AssociateLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, AssociateLinkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, AssociateLinkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new AssociateLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateLinkCommandInput} for command's `input` shape.
        * @see {@link AssociateLinkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class AssociateLinkCommand extends $Command<AssociateLinkCommandInput, AssociateLinkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: AssociateLinkCommandInput;
            constructor(input: AssociateLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateLinkCommandInput, AssociateLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateTransitGatewayConnectPeerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateTransitGatewayConnectPeerRequest, AssociateTransitGatewayConnectPeerResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface AssociateTransitGatewayConnectPeerCommandInput extends AssociateTransitGatewayConnectPeerRequest {
    }
    export interface AssociateTransitGatewayConnectPeerCommandOutput extends AssociateTransitGatewayConnectPeerResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a transit gateway Connect peer with a device, and optionally, with a link. If you
        *             specify a link, it must be associated with the specified device. </p>
        *         <p>You can only associate transit gateway Connect peers that have been created on a
        *             transit gateway that's registered in your global network.</p>
        *         <p>You cannot associate a transit gateway Connect peer with more than one device and link. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, AssociateTransitGatewayConnectPeerCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, AssociateTransitGatewayConnectPeerCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new AssociateTransitGatewayConnectPeerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateTransitGatewayConnectPeerCommandInput} for command's `input` shape.
        * @see {@link AssociateTransitGatewayConnectPeerCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class AssociateTransitGatewayConnectPeerCommand extends $Command<AssociateTransitGatewayConnectPeerCommandInput, AssociateTransitGatewayConnectPeerCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: AssociateTransitGatewayConnectPeerCommandInput;
            constructor(input: AssociateTransitGatewayConnectPeerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateTransitGatewayConnectPeerCommandInput, AssociateTransitGatewayConnectPeerCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConnectAttachmentRequest, CreateConnectAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateConnectAttachmentCommandInput extends CreateConnectAttachmentRequest {
    }
    export interface CreateConnectAttachmentCommandOutput extends CreateConnectAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a core network Connect attachment from a specified core network attachment. </p>
        *          <p>A core network Connect attachment is a GRE-based tunnel attachment that you can use to
        *          establish a connection between a core network and an appliance. A core network Connect
        *          attachment uses an existing VPC attachment as the underlying transport mechanism.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateConnectAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateConnectAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateConnectAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectAttachmentCommandInput} for command's `input` shape.
        * @see {@link CreateConnectAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateConnectAttachmentCommand extends $Command<CreateConnectAttachmentCommandInput, CreateConnectAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateConnectAttachmentCommandInput;
            constructor(input: CreateConnectAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectAttachmentCommandInput, CreateConnectAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConnectionRequest, CreateConnectionResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateConnectionCommandInput extends CreateConnectionRequest {
    }
    export interface CreateConnectionCommandOutput extends CreateConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateConnectionCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateConnectionCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectionCommandInput} for command's `input` shape.
        * @see {@link CreateConnectionCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateConnectionCommand extends $Command<CreateConnectionCommandInput, CreateConnectionCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateConnectionCommandInput;
            constructor(input: CreateConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectionCommandInput, CreateConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectPeerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConnectPeerRequest, CreateConnectPeerResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateConnectPeerCommandInput extends CreateConnectPeerRequest {
    }
    export interface CreateConnectPeerCommandOutput extends CreateConnectPeerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a core network Connect peer for a specified core network connect attachment between a core network and an appliance.
        *          The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateConnectPeerCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateConnectPeerCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateConnectPeerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectPeerCommandInput} for command's `input` shape.
        * @see {@link CreateConnectPeerCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateConnectPeerCommand extends $Command<CreateConnectPeerCommandInput, CreateConnectPeerCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateConnectPeerCommandInput;
            constructor(input: CreateConnectPeerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectPeerCommandInput, CreateConnectPeerCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateCoreNetworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCoreNetworkRequest, CreateCoreNetworkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateCoreNetworkCommandInput extends CreateCoreNetworkRequest {
    }
    export interface CreateCoreNetworkCommandOutput extends CreateCoreNetworkResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a core network as part of your global network, and optionally, with a core network policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateCoreNetworkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateCoreNetworkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateCoreNetworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCoreNetworkCommandInput} for command's `input` shape.
        * @see {@link CreateCoreNetworkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateCoreNetworkCommand extends $Command<CreateCoreNetworkCommandInput, CreateCoreNetworkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateCoreNetworkCommandInput;
            constructor(input: CreateCoreNetworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCoreNetworkCommandInput, CreateCoreNetworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDeviceRequest, CreateDeviceResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateDeviceCommandInput extends CreateDeviceRequest {
    }
    export interface CreateDeviceCommandOutput extends CreateDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new device in a global network. If you specify both a site ID and a
        *             location, the location of the site is used for visualization in the Network Manager console.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateDeviceCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateDeviceCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeviceCommandInput} for command's `input` shape.
        * @see {@link CreateDeviceCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateDeviceCommand extends $Command<CreateDeviceCommandInput, CreateDeviceCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateDeviceCommandInput;
            constructor(input: CreateDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeviceCommandInput, CreateDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateGlobalNetworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateGlobalNetworkRequest, CreateGlobalNetworkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateGlobalNetworkCommandInput extends CreateGlobalNetworkRequest {
    }
    export interface CreateGlobalNetworkCommandOutput extends CreateGlobalNetworkResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new, empty global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateGlobalNetworkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateGlobalNetworkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateGlobalNetworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGlobalNetworkCommandInput} for command's `input` shape.
        * @see {@link CreateGlobalNetworkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateGlobalNetworkCommand extends $Command<CreateGlobalNetworkCommandInput, CreateGlobalNetworkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateGlobalNetworkCommandInput;
            constructor(input: CreateGlobalNetworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGlobalNetworkCommandInput, CreateGlobalNetworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLinkRequest, CreateLinkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateLinkCommandInput extends CreateLinkRequest {
    }
    export interface CreateLinkCommandOutput extends CreateLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new link for a specified site.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateLinkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateLinkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLinkCommandInput} for command's `input` shape.
        * @see {@link CreateLinkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateLinkCommand extends $Command<CreateLinkCommandInput, CreateLinkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateLinkCommandInput;
            constructor(input: CreateLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLinkCommandInput, CreateLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateSiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSiteRequest, CreateSiteResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateSiteCommandInput extends CreateSiteRequest {
    }
    export interface CreateSiteCommandOutput extends CreateSiteResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new site in a global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateSiteCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateSiteCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateSiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSiteCommandInput} for command's `input` shape.
        * @see {@link CreateSiteCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateSiteCommand extends $Command<CreateSiteCommandInput, CreateSiteCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateSiteCommandInput;
            constructor(input: CreateSiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSiteCommandInput, CreateSiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateSiteToSiteVpnAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSiteToSiteVpnAttachmentRequest, CreateSiteToSiteVpnAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateSiteToSiteVpnAttachmentCommandInput extends CreateSiteToSiteVpnAttachmentRequest {
    }
    export interface CreateSiteToSiteVpnAttachmentCommandOutput extends CreateSiteToSiteVpnAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Web Services site-to-site VPN attachment on an edge location of a core network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateSiteToSiteVpnAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateSiteToSiteVpnAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateSiteToSiteVpnAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSiteToSiteVpnAttachmentCommandInput} for command's `input` shape.
        * @see {@link CreateSiteToSiteVpnAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateSiteToSiteVpnAttachmentCommand extends $Command<CreateSiteToSiteVpnAttachmentCommandInput, CreateSiteToSiteVpnAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateSiteToSiteVpnAttachmentCommandInput;
            constructor(input: CreateSiteToSiteVpnAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSiteToSiteVpnAttachmentCommandInput, CreateSiteToSiteVpnAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateTransitGatewayPeeringCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTransitGatewayPeeringRequest, CreateTransitGatewayPeeringResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateTransitGatewayPeeringCommandInput extends CreateTransitGatewayPeeringRequest {
    }
    export interface CreateTransitGatewayPeeringCommandOutput extends CreateTransitGatewayPeeringResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a transit gateway peering connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateTransitGatewayPeeringCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateTransitGatewayPeeringCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateTransitGatewayPeeringCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTransitGatewayPeeringCommandInput} for command's `input` shape.
        * @see {@link CreateTransitGatewayPeeringCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateTransitGatewayPeeringCommand extends $Command<CreateTransitGatewayPeeringCommandInput, CreateTransitGatewayPeeringCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateTransitGatewayPeeringCommandInput;
            constructor(input: CreateTransitGatewayPeeringCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTransitGatewayPeeringCommandInput, CreateTransitGatewayPeeringCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateTransitGatewayRouteTableAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTransitGatewayRouteTableAttachmentRequest, CreateTransitGatewayRouteTableAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateTransitGatewayRouteTableAttachmentCommandInput extends CreateTransitGatewayRouteTableAttachmentRequest {
    }
    export interface CreateTransitGatewayRouteTableAttachmentCommandOutput extends CreateTransitGatewayRouteTableAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a transit gateway route table attachment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateTransitGatewayRouteTableAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateTransitGatewayRouteTableAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateTransitGatewayRouteTableAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTransitGatewayRouteTableAttachmentCommandInput} for command's `input` shape.
        * @see {@link CreateTransitGatewayRouteTableAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateTransitGatewayRouteTableAttachmentCommand extends $Command<CreateTransitGatewayRouteTableAttachmentCommandInput, CreateTransitGatewayRouteTableAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateTransitGatewayRouteTableAttachmentCommandInput;
            constructor(input: CreateTransitGatewayRouteTableAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTransitGatewayRouteTableAttachmentCommandInput, CreateTransitGatewayRouteTableAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateVpcAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateVpcAttachmentRequest, CreateVpcAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface CreateVpcAttachmentCommandInput extends CreateVpcAttachmentRequest {
    }
    export interface CreateVpcAttachmentCommandOutput extends CreateVpcAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a VPC attachment on an edge location of a core network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, CreateVpcAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, CreateVpcAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new CreateVpcAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVpcAttachmentCommandInput} for command's `input` shape.
        * @see {@link CreateVpcAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class CreateVpcAttachmentCommand extends $Command<CreateVpcAttachmentCommandInput, CreateVpcAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: CreateVpcAttachmentCommandInput;
            constructor(input: CreateVpcAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVpcAttachmentCommandInput, CreateVpcAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAttachmentRequest, DeleteAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteAttachmentCommandInput extends DeleteAttachmentRequest {
    }
    export interface DeleteAttachmentCommandOutput extends DeleteAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an attachment. Supports all attachment types.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAttachmentCommandInput} for command's `input` shape.
        * @see {@link DeleteAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteAttachmentCommand extends $Command<DeleteAttachmentCommandInput, DeleteAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteAttachmentCommandInput;
            constructor(input: DeleteAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAttachmentCommandInput, DeleteAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConnectionRequest, DeleteConnectionResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteConnectionCommandInput extends DeleteConnectionRequest {
    }
    export interface DeleteConnectionCommandOutput extends DeleteConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified connection in your global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteConnectionCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteConnectionCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectionCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectionCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteConnectionCommand extends $Command<DeleteConnectionCommandInput, DeleteConnectionCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteConnectionCommandInput;
            constructor(input: DeleteConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectionCommandInput, DeleteConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteConnectPeerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConnectPeerRequest, DeleteConnectPeerResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteConnectPeerCommandInput extends DeleteConnectPeerRequest {
    }
    export interface DeleteConnectPeerCommandOutput extends DeleteConnectPeerResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a Connect peer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteConnectPeerCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteConnectPeerCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteConnectPeerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectPeerCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectPeerCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteConnectPeerCommand extends $Command<DeleteConnectPeerCommandInput, DeleteConnectPeerCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteConnectPeerCommandInput;
            constructor(input: DeleteConnectPeerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectPeerCommandInput, DeleteConnectPeerCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteCoreNetworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCoreNetworkRequest, DeleteCoreNetworkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteCoreNetworkCommandInput extends DeleteCoreNetworkRequest {
    }
    export interface DeleteCoreNetworkCommandOutput extends DeleteCoreNetworkResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a core network along with all core network policies. This can only be done if there are no attachments on a core network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteCoreNetworkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteCoreNetworkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteCoreNetworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCoreNetworkCommandInput} for command's `input` shape.
        * @see {@link DeleteCoreNetworkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteCoreNetworkCommand extends $Command<DeleteCoreNetworkCommandInput, DeleteCoreNetworkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteCoreNetworkCommandInput;
            constructor(input: DeleteCoreNetworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCoreNetworkCommandInput, DeleteCoreNetworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteCoreNetworkPolicyVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCoreNetworkPolicyVersionRequest, DeleteCoreNetworkPolicyVersionResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteCoreNetworkPolicyVersionCommandInput extends DeleteCoreNetworkPolicyVersionRequest {
    }
    export interface DeleteCoreNetworkPolicyVersionCommandOutput extends DeleteCoreNetworkPolicyVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a policy version from a core network. You can't delete the current LIVE policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteCoreNetworkPolicyVersionCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteCoreNetworkPolicyVersionCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteCoreNetworkPolicyVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCoreNetworkPolicyVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteCoreNetworkPolicyVersionCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteCoreNetworkPolicyVersionCommand extends $Command<DeleteCoreNetworkPolicyVersionCommandInput, DeleteCoreNetworkPolicyVersionCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteCoreNetworkPolicyVersionCommandInput;
            constructor(input: DeleteCoreNetworkPolicyVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCoreNetworkPolicyVersionCommandInput, DeleteCoreNetworkPolicyVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDeviceRequest, DeleteDeviceResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteDeviceCommandInput extends DeleteDeviceRequest {
    }
    export interface DeleteDeviceCommandOutput extends DeleteDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing device. You must first disassociate the device from any links and
        *             customer gateways.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteDeviceCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteDeviceCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeviceCommandInput} for command's `input` shape.
        * @see {@link DeleteDeviceCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteDeviceCommand extends $Command<DeleteDeviceCommandInput, DeleteDeviceCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteDeviceCommandInput;
            constructor(input: DeleteDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeviceCommandInput, DeleteDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteGlobalNetworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteGlobalNetworkRequest, DeleteGlobalNetworkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteGlobalNetworkCommandInput extends DeleteGlobalNetworkRequest {
    }
    export interface DeleteGlobalNetworkCommandOutput extends DeleteGlobalNetworkResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing global network. You must first delete all global network objects
        *             (devices, links, and sites), deregister all transit gateways, and delete any core networks.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteGlobalNetworkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteGlobalNetworkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteGlobalNetworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGlobalNetworkCommandInput} for command's `input` shape.
        * @see {@link DeleteGlobalNetworkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteGlobalNetworkCommand extends $Command<DeleteGlobalNetworkCommandInput, DeleteGlobalNetworkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteGlobalNetworkCommandInput;
            constructor(input: DeleteGlobalNetworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGlobalNetworkCommandInput, DeleteGlobalNetworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLinkRequest, DeleteLinkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteLinkCommandInput extends DeleteLinkRequest {
    }
    export interface DeleteLinkCommandOutput extends DeleteLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing link. You must first disassociate the link from any devices and
        *             customer gateways.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteLinkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteLinkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLinkCommandInput} for command's `input` shape.
        * @see {@link DeleteLinkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteLinkCommand extends $Command<DeleteLinkCommandInput, DeleteLinkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteLinkCommandInput;
            constructor(input: DeleteLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLinkCommandInput, DeleteLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeletePeeringCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeletePeeringRequest, DeletePeeringResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeletePeeringCommandInput extends DeletePeeringRequest {
    }
    export interface DeletePeeringCommandOutput extends DeletePeeringResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing peering connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeletePeeringCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeletePeeringCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeletePeeringCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePeeringCommandInput} for command's `input` shape.
        * @see {@link DeletePeeringCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeletePeeringCommand extends $Command<DeletePeeringCommandInput, DeletePeeringCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeletePeeringCommandInput;
            constructor(input: DeletePeeringCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePeeringCommandInput, DeletePeeringCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteResourcePolicyRequest, DeleteResourcePolicyResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteResourcePolicyCommandInput extends DeleteResourcePolicyRequest {
    }
    export interface DeleteResourcePolicyCommandOutput extends DeleteResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a resource policy for the specified resource. This revokes the access of the principals specified in the resource policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteResourcePolicyCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteResourcePolicyCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteResourcePolicyCommand extends $Command<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteResourcePolicyCommandInput;
            constructor(input: DeleteResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteSiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteSiteRequest, DeleteSiteResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeleteSiteCommandInput extends DeleteSiteRequest {
    }
    export interface DeleteSiteCommandOutput extends DeleteSiteResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing site. The site cannot be associated with any device or link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeleteSiteCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeleteSiteCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeleteSiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSiteCommandInput} for command's `input` shape.
        * @see {@link DeleteSiteCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeleteSiteCommand extends $Command<DeleteSiteCommandInput, DeleteSiteCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeleteSiteCommandInput;
            constructor(input: DeleteSiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSiteCommandInput, DeleteSiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeregisterTransitGatewayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterTransitGatewayRequest, DeregisterTransitGatewayResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DeregisterTransitGatewayCommandInput extends DeregisterTransitGatewayRequest {
    }
    export interface DeregisterTransitGatewayCommandOutput extends DeregisterTransitGatewayResponse, __MetadataBearer {
    }
    /**
        * <p>Deregisters a transit gateway from your global network. This action does not delete
        *             your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DeregisterTransitGatewayCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DeregisterTransitGatewayCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DeregisterTransitGatewayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterTransitGatewayCommandInput} for command's `input` shape.
        * @see {@link DeregisterTransitGatewayCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DeregisterTransitGatewayCommand extends $Command<DeregisterTransitGatewayCommandInput, DeregisterTransitGatewayCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DeregisterTransitGatewayCommandInput;
            constructor(input: DeregisterTransitGatewayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterTransitGatewayCommandInput, DeregisterTransitGatewayCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DescribeGlobalNetworksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeGlobalNetworksRequest, DescribeGlobalNetworksResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DescribeGlobalNetworksCommandInput extends DescribeGlobalNetworksRequest {
    }
    export interface DescribeGlobalNetworksCommandOutput extends DescribeGlobalNetworksResponse, __MetadataBearer {
    }
    /**
        * <p>Describes one or more global networks. By default, all global networks are
        *             described. To describe the objects in your global network, you must use the appropriate
        *                 <code>Get*</code> action. For example, to list the transit gateways in your global
        *             network, use <a>GetTransitGatewayRegistrations</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DescribeGlobalNetworksCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DescribeGlobalNetworksCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DescribeGlobalNetworksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeGlobalNetworksCommandInput} for command's `input` shape.
        * @see {@link DescribeGlobalNetworksCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DescribeGlobalNetworksCommand extends $Command<DescribeGlobalNetworksCommandInput, DescribeGlobalNetworksCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DescribeGlobalNetworksCommandInput;
            constructor(input: DescribeGlobalNetworksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeGlobalNetworksCommandInput, DescribeGlobalNetworksCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateConnectPeerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateConnectPeerRequest, DisassociateConnectPeerResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DisassociateConnectPeerCommandInput extends DisassociateConnectPeerRequest {
    }
    export interface DisassociateConnectPeerCommandOutput extends DisassociateConnectPeerResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates a core network Connect peer from a device and a link. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DisassociateConnectPeerCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DisassociateConnectPeerCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DisassociateConnectPeerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateConnectPeerCommandInput} for command's `input` shape.
        * @see {@link DisassociateConnectPeerCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DisassociateConnectPeerCommand extends $Command<DisassociateConnectPeerCommandInput, DisassociateConnectPeerCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DisassociateConnectPeerCommandInput;
            constructor(input: DisassociateConnectPeerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateConnectPeerCommandInput, DisassociateConnectPeerCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateCustomerGatewayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateCustomerGatewayRequest, DisassociateCustomerGatewayResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DisassociateCustomerGatewayCommandInput extends DisassociateCustomerGatewayRequest {
    }
    export interface DisassociateCustomerGatewayCommandOutput extends DisassociateCustomerGatewayResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates a customer gateway from a device and a link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DisassociateCustomerGatewayCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DisassociateCustomerGatewayCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DisassociateCustomerGatewayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateCustomerGatewayCommandInput} for command's `input` shape.
        * @see {@link DisassociateCustomerGatewayCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DisassociateCustomerGatewayCommand extends $Command<DisassociateCustomerGatewayCommandInput, DisassociateCustomerGatewayCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DisassociateCustomerGatewayCommandInput;
            constructor(input: DisassociateCustomerGatewayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateCustomerGatewayCommandInput, DisassociateCustomerGatewayCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateLinkRequest, DisassociateLinkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DisassociateLinkCommandInput extends DisassociateLinkRequest {
    }
    export interface DisassociateLinkCommandOutput extends DisassociateLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates an existing device from a link. You must first disassociate any customer
        *             gateways that are associated with the link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DisassociateLinkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DisassociateLinkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DisassociateLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateLinkCommandInput} for command's `input` shape.
        * @see {@link DisassociateLinkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DisassociateLinkCommand extends $Command<DisassociateLinkCommandInput, DisassociateLinkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DisassociateLinkCommandInput;
            constructor(input: DisassociateLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateLinkCommandInput, DisassociateLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateTransitGatewayConnectPeerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateTransitGatewayConnectPeerRequest, DisassociateTransitGatewayConnectPeerResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface DisassociateTransitGatewayConnectPeerCommandInput extends DisassociateTransitGatewayConnectPeerRequest {
    }
    export interface DisassociateTransitGatewayConnectPeerCommandOutput extends DisassociateTransitGatewayConnectPeerResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates a transit gateway Connect peer from a device and link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, DisassociateTransitGatewayConnectPeerCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, DisassociateTransitGatewayConnectPeerCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new DisassociateTransitGatewayConnectPeerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateTransitGatewayConnectPeerCommandInput} for command's `input` shape.
        * @see {@link DisassociateTransitGatewayConnectPeerCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class DisassociateTransitGatewayConnectPeerCommand extends $Command<DisassociateTransitGatewayConnectPeerCommandInput, DisassociateTransitGatewayConnectPeerCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: DisassociateTransitGatewayConnectPeerCommandInput;
            constructor(input: DisassociateTransitGatewayConnectPeerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateTransitGatewayConnectPeerCommandInput, DisassociateTransitGatewayConnectPeerCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ExecuteCoreNetworkChangeSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ExecuteCoreNetworkChangeSetRequest, ExecuteCoreNetworkChangeSetResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ExecuteCoreNetworkChangeSetCommandInput extends ExecuteCoreNetworkChangeSetRequest {
    }
    export interface ExecuteCoreNetworkChangeSetCommandOutput extends ExecuteCoreNetworkChangeSetResponse, __MetadataBearer {
    }
    /**
        * <p>Executes a change set on your core network. Deploys changes globally based on the policy submitted..</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ExecuteCoreNetworkChangeSetCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ExecuteCoreNetworkChangeSetCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ExecuteCoreNetworkChangeSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExecuteCoreNetworkChangeSetCommandInput} for command's `input` shape.
        * @see {@link ExecuteCoreNetworkChangeSetCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ExecuteCoreNetworkChangeSetCommand extends $Command<ExecuteCoreNetworkChangeSetCommandInput, ExecuteCoreNetworkChangeSetCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ExecuteCoreNetworkChangeSetCommandInput;
            constructor(input: ExecuteCoreNetworkChangeSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExecuteCoreNetworkChangeSetCommandInput, ExecuteCoreNetworkChangeSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConnectAttachmentRequest, GetConnectAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetConnectAttachmentCommandInput extends GetConnectAttachmentRequest {
    }
    export interface GetConnectAttachmentCommandOutput extends GetConnectAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a core network Connect attachment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetConnectAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetConnectAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetConnectAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectAttachmentCommandInput} for command's `input` shape.
        * @see {@link GetConnectAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetConnectAttachmentCommand extends $Command<GetConnectAttachmentCommandInput, GetConnectAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetConnectAttachmentCommandInput;
            constructor(input: GetConnectAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectAttachmentCommandInput, GetConnectAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConnectionsRequest, GetConnectionsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetConnectionsCommandInput extends GetConnectionsRequest {
    }
    export interface GetConnectionsCommandOutput extends GetConnectionsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more of your connections in a global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetConnectionsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetConnectionsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetConnectionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectionsCommandInput} for command's `input` shape.
        * @see {@link GetConnectionsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetConnectionsCommand extends $Command<GetConnectionsCommandInput, GetConnectionsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetConnectionsCommandInput;
            constructor(input: GetConnectionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectionsCommandInput, GetConnectionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectPeerAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConnectPeerAssociationsRequest, GetConnectPeerAssociationsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetConnectPeerAssociationsCommandInput extends GetConnectPeerAssociationsRequest {
    }
    export interface GetConnectPeerAssociationsCommandOutput extends GetConnectPeerAssociationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a core network Connect peer associations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetConnectPeerAssociationsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetConnectPeerAssociationsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetConnectPeerAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectPeerAssociationsCommandInput} for command's `input` shape.
        * @see {@link GetConnectPeerAssociationsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetConnectPeerAssociationsCommand extends $Command<GetConnectPeerAssociationsCommandInput, GetConnectPeerAssociationsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetConnectPeerAssociationsCommandInput;
            constructor(input: GetConnectPeerAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectPeerAssociationsCommandInput, GetConnectPeerAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectPeerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConnectPeerRequest, GetConnectPeerResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetConnectPeerCommandInput extends GetConnectPeerRequest {
    }
    export interface GetConnectPeerCommandOutput extends GetConnectPeerResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a core network Connect peer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetConnectPeerCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetConnectPeerCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetConnectPeerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectPeerCommandInput} for command's `input` shape.
        * @see {@link GetConnectPeerCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetConnectPeerCommand extends $Command<GetConnectPeerCommandInput, GetConnectPeerCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetConnectPeerCommandInput;
            constructor(input: GetConnectPeerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectPeerCommandInput, GetConnectPeerCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkChangeEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCoreNetworkChangeEventsRequest, GetCoreNetworkChangeEventsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetCoreNetworkChangeEventsCommandInput extends GetCoreNetworkChangeEventsRequest {
    }
    export interface GetCoreNetworkChangeEventsCommandOutput extends GetCoreNetworkChangeEventsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a core network change event.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetCoreNetworkChangeEventsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetCoreNetworkChangeEventsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetCoreNetworkChangeEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCoreNetworkChangeEventsCommandInput} for command's `input` shape.
        * @see {@link GetCoreNetworkChangeEventsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetCoreNetworkChangeEventsCommand extends $Command<GetCoreNetworkChangeEventsCommandInput, GetCoreNetworkChangeEventsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetCoreNetworkChangeEventsCommandInput;
            constructor(input: GetCoreNetworkChangeEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCoreNetworkChangeEventsCommandInput, GetCoreNetworkChangeEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkChangeSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCoreNetworkChangeSetRequest, GetCoreNetworkChangeSetResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetCoreNetworkChangeSetCommandInput extends GetCoreNetworkChangeSetRequest {
    }
    export interface GetCoreNetworkChangeSetCommandOutput extends GetCoreNetworkChangeSetResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a change set between the LIVE core network policy and a submitted policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetCoreNetworkChangeSetCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetCoreNetworkChangeSetCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetCoreNetworkChangeSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCoreNetworkChangeSetCommandInput} for command's `input` shape.
        * @see {@link GetCoreNetworkChangeSetCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetCoreNetworkChangeSetCommand extends $Command<GetCoreNetworkChangeSetCommandInput, GetCoreNetworkChangeSetCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetCoreNetworkChangeSetCommandInput;
            constructor(input: GetCoreNetworkChangeSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCoreNetworkChangeSetCommandInput, GetCoreNetworkChangeSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCoreNetworkRequest, GetCoreNetworkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetCoreNetworkCommandInput extends GetCoreNetworkRequest {
    }
    export interface GetCoreNetworkCommandOutput extends GetCoreNetworkResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the LIVE policy for a core network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetCoreNetworkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetCoreNetworkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetCoreNetworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCoreNetworkCommandInput} for command's `input` shape.
        * @see {@link GetCoreNetworkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetCoreNetworkCommand extends $Command<GetCoreNetworkCommandInput, GetCoreNetworkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetCoreNetworkCommandInput;
            constructor(input: GetCoreNetworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCoreNetworkCommandInput, GetCoreNetworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCoreNetworkPolicyRequest, GetCoreNetworkPolicyResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetCoreNetworkPolicyCommandInput extends GetCoreNetworkPolicyRequest {
    }
    export interface GetCoreNetworkPolicyCommandOutput extends GetCoreNetworkPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns details about a core network policy. You can get details about your current live policy or any previous policy version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetCoreNetworkPolicyCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetCoreNetworkPolicyCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetCoreNetworkPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCoreNetworkPolicyCommandInput} for command's `input` shape.
        * @see {@link GetCoreNetworkPolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetCoreNetworkPolicyCommand extends $Command<GetCoreNetworkPolicyCommandInput, GetCoreNetworkPolicyCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetCoreNetworkPolicyCommandInput;
            constructor(input: GetCoreNetworkPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCoreNetworkPolicyCommandInput, GetCoreNetworkPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCustomerGatewayAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCustomerGatewayAssociationsRequest, GetCustomerGatewayAssociationsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetCustomerGatewayAssociationsCommandInput extends GetCustomerGatewayAssociationsRequest {
    }
    export interface GetCustomerGatewayAssociationsCommandOutput extends GetCustomerGatewayAssociationsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the association information for customer gateways that are associated with
        *             devices and links in your global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetCustomerGatewayAssociationsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetCustomerGatewayAssociationsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetCustomerGatewayAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCustomerGatewayAssociationsCommandInput} for command's `input` shape.
        * @see {@link GetCustomerGatewayAssociationsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetCustomerGatewayAssociationsCommand extends $Command<GetCustomerGatewayAssociationsCommandInput, GetCustomerGatewayAssociationsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetCustomerGatewayAssociationsCommandInput;
            constructor(input: GetCustomerGatewayAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCustomerGatewayAssociationsCommandInput, GetCustomerGatewayAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDevicesRequest, GetDevicesResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetDevicesCommandInput extends GetDevicesRequest {
    }
    export interface GetDevicesCommandOutput extends GetDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more of your devices in a global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetDevicesCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetDevicesCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDevicesCommandInput} for command's `input` shape.
        * @see {@link GetDevicesCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetDevicesCommand extends $Command<GetDevicesCommandInput, GetDevicesCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetDevicesCommandInput;
            constructor(input: GetDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDevicesCommandInput, GetDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetLinkAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLinkAssociationsRequest, GetLinkAssociationsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetLinkAssociationsCommandInput extends GetLinkAssociationsRequest {
    }
    export interface GetLinkAssociationsCommandOutput extends GetLinkAssociationsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the link associations for a device or a link. Either the device ID or the link ID
        *             must be specified.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetLinkAssociationsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetLinkAssociationsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetLinkAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLinkAssociationsCommandInput} for command's `input` shape.
        * @see {@link GetLinkAssociationsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetLinkAssociationsCommand extends $Command<GetLinkAssociationsCommandInput, GetLinkAssociationsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetLinkAssociationsCommandInput;
            constructor(input: GetLinkAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLinkAssociationsCommandInput, GetLinkAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetLinksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLinksRequest, GetLinksResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetLinksCommandInput extends GetLinksRequest {
    }
    export interface GetLinksCommandOutput extends GetLinksResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more links in a specified global network.</p>
        *         <p>If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetLinksCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetLinksCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetLinksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLinksCommandInput} for command's `input` shape.
        * @see {@link GetLinksCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetLinksCommand extends $Command<GetLinksCommandInput, GetLinksCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetLinksCommandInput;
            constructor(input: GetLinksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLinksCommandInput, GetLinksCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourceCountsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetNetworkResourceCountsRequest, GetNetworkResourceCountsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetNetworkResourceCountsCommandInput extends GetNetworkResourceCountsRequest {
    }
    export interface GetNetworkResourceCountsCommandOutput extends GetNetworkResourceCountsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the count of network resources, by resource type, for the specified global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetNetworkResourceCountsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetNetworkResourceCountsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetNetworkResourceCountsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNetworkResourceCountsCommandInput} for command's `input` shape.
        * @see {@link GetNetworkResourceCountsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetNetworkResourceCountsCommand extends $Command<GetNetworkResourceCountsCommandInput, GetNetworkResourceCountsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetNetworkResourceCountsCommandInput;
            constructor(input: GetNetworkResourceCountsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNetworkResourceCountsCommandInput, GetNetworkResourceCountsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourceRelationshipsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetNetworkResourceRelationshipsRequest, GetNetworkResourceRelationshipsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetNetworkResourceRelationshipsCommandInput extends GetNetworkResourceRelationshipsRequest {
    }
    export interface GetNetworkResourceRelationshipsCommandOutput extends GetNetworkResourceRelationshipsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the network resource relationships for the specified global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetNetworkResourceRelationshipsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetNetworkResourceRelationshipsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetNetworkResourceRelationshipsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNetworkResourceRelationshipsCommandInput} for command's `input` shape.
        * @see {@link GetNetworkResourceRelationshipsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetNetworkResourceRelationshipsCommand extends $Command<GetNetworkResourceRelationshipsCommandInput, GetNetworkResourceRelationshipsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetNetworkResourceRelationshipsCommandInput;
            constructor(input: GetNetworkResourceRelationshipsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNetworkResourceRelationshipsCommandInput, GetNetworkResourceRelationshipsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetNetworkResourcesRequest, GetNetworkResourcesResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetNetworkResourcesCommandInput extends GetNetworkResourcesRequest {
    }
    export interface GetNetworkResourcesCommandOutput extends GetNetworkResourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the network resources for the specified global network.</p>
        *          <p>The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetNetworkResourcesCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetNetworkResourcesCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetNetworkResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNetworkResourcesCommandInput} for command's `input` shape.
        * @see {@link GetNetworkResourcesCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetNetworkResourcesCommand extends $Command<GetNetworkResourcesCommandInput, GetNetworkResourcesCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetNetworkResourcesCommandInput;
            constructor(input: GetNetworkResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNetworkResourcesCommandInput, GetNetworkResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkRoutesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetNetworkRoutesRequest, GetNetworkRoutesResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetNetworkRoutesCommandInput extends GetNetworkRoutesRequest {
    }
    export interface GetNetworkRoutesCommandOutput extends GetNetworkRoutesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the network routes of the specified global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetNetworkRoutesCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetNetworkRoutesCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetNetworkRoutesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNetworkRoutesCommandInput} for command's `input` shape.
        * @see {@link GetNetworkRoutesCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetNetworkRoutesCommand extends $Command<GetNetworkRoutesCommandInput, GetNetworkRoutesCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetNetworkRoutesCommandInput;
            constructor(input: GetNetworkRoutesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNetworkRoutesCommandInput, GetNetworkRoutesCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkTelemetryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetNetworkTelemetryRequest, GetNetworkTelemetryResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetNetworkTelemetryCommandInput extends GetNetworkTelemetryRequest {
    }
    export interface GetNetworkTelemetryCommandOutput extends GetNetworkTelemetryResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the network telemetry of the specified global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetNetworkTelemetryCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetNetworkTelemetryCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetNetworkTelemetryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNetworkTelemetryCommandInput} for command's `input` shape.
        * @see {@link GetNetworkTelemetryCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetNetworkTelemetryCommand extends $Command<GetNetworkTelemetryCommandInput, GetNetworkTelemetryCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetNetworkTelemetryCommandInput;
            constructor(input: GetNetworkTelemetryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNetworkTelemetryCommandInput, GetNetworkTelemetryCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetResourcePolicyRequest, GetResourcePolicyResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetResourcePolicyCommandInput extends GetResourcePolicyRequest {
    }
    export interface GetResourcePolicyCommandOutput extends GetResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a resource policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetResourcePolicyCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetResourcePolicyCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link GetResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetResourcePolicyCommand extends $Command<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetResourcePolicyCommandInput;
            constructor(input: GetResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetRouteAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRouteAnalysisRequest, GetRouteAnalysisResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetRouteAnalysisCommandInput extends GetRouteAnalysisRequest {
    }
    export interface GetRouteAnalysisCommandOutput extends GetRouteAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about the specified route analysis.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetRouteAnalysisCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetRouteAnalysisCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetRouteAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRouteAnalysisCommandInput} for command's `input` shape.
        * @see {@link GetRouteAnalysisCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetRouteAnalysisCommand extends $Command<GetRouteAnalysisCommandInput, GetRouteAnalysisCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetRouteAnalysisCommandInput;
            constructor(input: GetRouteAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRouteAnalysisCommandInput, GetRouteAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetSitesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSitesRequest, GetSitesResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetSitesCommandInput extends GetSitesRequest {
    }
    export interface GetSitesCommandOutput extends GetSitesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more of your sites in a global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetSitesCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetSitesCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetSitesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSitesCommandInput} for command's `input` shape.
        * @see {@link GetSitesCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetSitesCommand extends $Command<GetSitesCommandInput, GetSitesCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetSitesCommandInput;
            constructor(input: GetSitesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSitesCommandInput, GetSitesCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetSiteToSiteVpnAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSiteToSiteVpnAttachmentRequest, GetSiteToSiteVpnAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetSiteToSiteVpnAttachmentCommandInput extends GetSiteToSiteVpnAttachmentRequest {
    }
    export interface GetSiteToSiteVpnAttachmentCommandOutput extends GetSiteToSiteVpnAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a site-to-site VPN attachment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetSiteToSiteVpnAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetSiteToSiteVpnAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetSiteToSiteVpnAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSiteToSiteVpnAttachmentCommandInput} for command's `input` shape.
        * @see {@link GetSiteToSiteVpnAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetSiteToSiteVpnAttachmentCommand extends $Command<GetSiteToSiteVpnAttachmentCommandInput, GetSiteToSiteVpnAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetSiteToSiteVpnAttachmentCommandInput;
            constructor(input: GetSiteToSiteVpnAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSiteToSiteVpnAttachmentCommandInput, GetSiteToSiteVpnAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayConnectPeerAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTransitGatewayConnectPeerAssociationsRequest, GetTransitGatewayConnectPeerAssociationsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetTransitGatewayConnectPeerAssociationsCommandInput extends GetTransitGatewayConnectPeerAssociationsRequest {
    }
    export interface GetTransitGatewayConnectPeerAssociationsCommandOutput extends GetTransitGatewayConnectPeerAssociationsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more of your transit gateway Connect peer associations in a global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetTransitGatewayConnectPeerAssociationsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetTransitGatewayConnectPeerAssociationsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetTransitGatewayConnectPeerAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTransitGatewayConnectPeerAssociationsCommandInput} for command's `input` shape.
        * @see {@link GetTransitGatewayConnectPeerAssociationsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetTransitGatewayConnectPeerAssociationsCommand extends $Command<GetTransitGatewayConnectPeerAssociationsCommandInput, GetTransitGatewayConnectPeerAssociationsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetTransitGatewayConnectPeerAssociationsCommandInput;
            constructor(input: GetTransitGatewayConnectPeerAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTransitGatewayConnectPeerAssociationsCommandInput, GetTransitGatewayConnectPeerAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayPeeringCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTransitGatewayPeeringRequest, GetTransitGatewayPeeringResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetTransitGatewayPeeringCommandInput extends GetTransitGatewayPeeringRequest {
    }
    export interface GetTransitGatewayPeeringCommandOutput extends GetTransitGatewayPeeringResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a transit gateway peer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetTransitGatewayPeeringCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetTransitGatewayPeeringCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetTransitGatewayPeeringCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTransitGatewayPeeringCommandInput} for command's `input` shape.
        * @see {@link GetTransitGatewayPeeringCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetTransitGatewayPeeringCommand extends $Command<GetTransitGatewayPeeringCommandInput, GetTransitGatewayPeeringCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetTransitGatewayPeeringCommandInput;
            constructor(input: GetTransitGatewayPeeringCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTransitGatewayPeeringCommandInput, GetTransitGatewayPeeringCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayRegistrationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTransitGatewayRegistrationsRequest, GetTransitGatewayRegistrationsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetTransitGatewayRegistrationsCommandInput extends GetTransitGatewayRegistrationsRequest {
    }
    export interface GetTransitGatewayRegistrationsCommandOutput extends GetTransitGatewayRegistrationsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about the transit gateway registrations in a specified
        *             global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetTransitGatewayRegistrationsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetTransitGatewayRegistrationsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetTransitGatewayRegistrationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTransitGatewayRegistrationsCommandInput} for command's `input` shape.
        * @see {@link GetTransitGatewayRegistrationsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetTransitGatewayRegistrationsCommand extends $Command<GetTransitGatewayRegistrationsCommandInput, GetTransitGatewayRegistrationsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetTransitGatewayRegistrationsCommandInput;
            constructor(input: GetTransitGatewayRegistrationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTransitGatewayRegistrationsCommandInput, GetTransitGatewayRegistrationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayRouteTableAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTransitGatewayRouteTableAttachmentRequest, GetTransitGatewayRouteTableAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetTransitGatewayRouteTableAttachmentCommandInput extends GetTransitGatewayRouteTableAttachmentRequest {
    }
    export interface GetTransitGatewayRouteTableAttachmentCommandOutput extends GetTransitGatewayRouteTableAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a transit gateway route table attachment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetTransitGatewayRouteTableAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetTransitGatewayRouteTableAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetTransitGatewayRouteTableAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTransitGatewayRouteTableAttachmentCommandInput} for command's `input` shape.
        * @see {@link GetTransitGatewayRouteTableAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetTransitGatewayRouteTableAttachmentCommand extends $Command<GetTransitGatewayRouteTableAttachmentCommandInput, GetTransitGatewayRouteTableAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetTransitGatewayRouteTableAttachmentCommandInput;
            constructor(input: GetTransitGatewayRouteTableAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTransitGatewayRouteTableAttachmentCommandInput, GetTransitGatewayRouteTableAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetVpcAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetVpcAttachmentRequest, GetVpcAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface GetVpcAttachmentCommandInput extends GetVpcAttachmentRequest {
    }
    export interface GetVpcAttachmentCommandOutput extends GetVpcAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a VPC attachment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, GetVpcAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, GetVpcAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new GetVpcAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVpcAttachmentCommandInput} for command's `input` shape.
        * @see {@link GetVpcAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class GetVpcAttachmentCommand extends $Command<GetVpcAttachmentCommandInput, GetVpcAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: GetVpcAttachmentCommandInput;
            constructor(input: GetVpcAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVpcAttachmentCommandInput, GetVpcAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListAttachmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAttachmentsRequest, ListAttachmentsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ListAttachmentsCommandInput extends ListAttachmentsRequest {
    }
    export interface ListAttachmentsCommandOutput extends ListAttachmentsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of core network attachments.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ListAttachmentsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ListAttachmentsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ListAttachmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAttachmentsCommandInput} for command's `input` shape.
        * @see {@link ListAttachmentsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ListAttachmentsCommand extends $Command<ListAttachmentsCommandInput, ListAttachmentsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ListAttachmentsCommandInput;
            constructor(input: ListAttachmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAttachmentsCommandInput, ListAttachmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListConnectPeersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListConnectPeersRequest, ListConnectPeersResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ListConnectPeersCommandInput extends ListConnectPeersRequest {
    }
    export interface ListConnectPeersCommandOutput extends ListConnectPeersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of core network Connect peers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ListConnectPeersCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ListConnectPeersCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ListConnectPeersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConnectPeersCommandInput} for command's `input` shape.
        * @see {@link ListConnectPeersCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ListConnectPeersCommand extends $Command<ListConnectPeersCommandInput, ListConnectPeersCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ListConnectPeersCommandInput;
            constructor(input: ListConnectPeersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConnectPeersCommandInput, ListConnectPeersCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListCoreNetworkPolicyVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCoreNetworkPolicyVersionsRequest, ListCoreNetworkPolicyVersionsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ListCoreNetworkPolicyVersionsCommandInput extends ListCoreNetworkPolicyVersionsRequest {
    }
    export interface ListCoreNetworkPolicyVersionsCommandOutput extends ListCoreNetworkPolicyVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of core network policy versions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ListCoreNetworkPolicyVersionsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ListCoreNetworkPolicyVersionsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ListCoreNetworkPolicyVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCoreNetworkPolicyVersionsCommandInput} for command's `input` shape.
        * @see {@link ListCoreNetworkPolicyVersionsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ListCoreNetworkPolicyVersionsCommand extends $Command<ListCoreNetworkPolicyVersionsCommandInput, ListCoreNetworkPolicyVersionsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ListCoreNetworkPolicyVersionsCommandInput;
            constructor(input: ListCoreNetworkPolicyVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCoreNetworkPolicyVersionsCommandInput, ListCoreNetworkPolicyVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListCoreNetworksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCoreNetworksRequest, ListCoreNetworksResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ListCoreNetworksCommandInput extends ListCoreNetworksRequest {
    }
    export interface ListCoreNetworksCommandOutput extends ListCoreNetworksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of owned and shared core networks.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ListCoreNetworksCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ListCoreNetworksCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ListCoreNetworksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCoreNetworksCommandInput} for command's `input` shape.
        * @see {@link ListCoreNetworksCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ListCoreNetworksCommand extends $Command<ListCoreNetworksCommandInput, ListCoreNetworksCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ListCoreNetworksCommandInput;
            constructor(input: ListCoreNetworksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCoreNetworksCommandInput, ListCoreNetworksCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListOrganizationServiceAccessStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOrganizationServiceAccessStatusRequest, ListOrganizationServiceAccessStatusResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ListOrganizationServiceAccessStatusCommandInput extends ListOrganizationServiceAccessStatusRequest {
    }
    export interface ListOrganizationServiceAccessStatusCommandOutput extends ListOrganizationServiceAccessStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the status of the Service Linked Role (SLR) deployment for the accounts in a given Amazon Web Services Organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ListOrganizationServiceAccessStatusCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ListOrganizationServiceAccessStatusCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ListOrganizationServiceAccessStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOrganizationServiceAccessStatusCommandInput} for command's `input` shape.
        * @see {@link ListOrganizationServiceAccessStatusCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ListOrganizationServiceAccessStatusCommand extends $Command<ListOrganizationServiceAccessStatusCommandInput, ListOrganizationServiceAccessStatusCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ListOrganizationServiceAccessStatusCommandInput;
            constructor(input: ListOrganizationServiceAccessStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOrganizationServiceAccessStatusCommandInput, ListOrganizationServiceAccessStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListPeeringsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPeeringsRequest, ListPeeringsResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ListPeeringsCommandInput extends ListPeeringsRequest {
    }
    export interface ListPeeringsCommandOutput extends ListPeeringsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the peerings for a core network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ListPeeringsCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ListPeeringsCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ListPeeringsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPeeringsCommandInput} for command's `input` shape.
        * @see {@link ListPeeringsCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ListPeeringsCommand extends $Command<ListPeeringsCommandInput, ListPeeringsCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ListPeeringsCommandInput;
            constructor(input: ListPeeringsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPeeringsCommandInput, ListPeeringsCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for a specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, ListTagsForResourceCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, ListTagsForResourceCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/PutCoreNetworkPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutCoreNetworkPolicyRequest, PutCoreNetworkPolicyResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface PutCoreNetworkPolicyCommandInput extends PutCoreNetworkPolicyRequest {
    }
    export interface PutCoreNetworkPolicyCommandOutput extends PutCoreNetworkPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and the submitted policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, PutCoreNetworkPolicyCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, PutCoreNetworkPolicyCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new PutCoreNetworkPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutCoreNetworkPolicyCommandInput} for command's `input` shape.
        * @see {@link PutCoreNetworkPolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class PutCoreNetworkPolicyCommand extends $Command<PutCoreNetworkPolicyCommandInput, PutCoreNetworkPolicyCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: PutCoreNetworkPolicyCommandInput;
            constructor(input: PutCoreNetworkPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutCoreNetworkPolicyCommandInput, PutCoreNetworkPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/PutResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutResourcePolicyRequest, PutResourcePolicyResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface PutResourcePolicyCommandInput extends PutResourcePolicyRequest {
    }
    export interface PutResourcePolicyCommandOutput extends PutResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates a resource policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, PutResourcePolicyCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, PutResourcePolicyCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new PutResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link PutResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class PutResourcePolicyCommand extends $Command<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: PutResourcePolicyCommandInput;
            constructor(input: PutResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RegisterTransitGatewayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterTransitGatewayRequest, RegisterTransitGatewayResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface RegisterTransitGatewayCommandInput extends RegisterTransitGatewayRequest {
    }
    export interface RegisterTransitGatewayCommandOutput extends RegisterTransitGatewayResponse, __MetadataBearer {
    }
    /**
        * <p>Registers a transit gateway in your global network. The transit gateway can be in any
        *             Amazon Web Services Region, but it must be owned by the same Amazon Web Services account that owns
        *             the global network. You cannot register a transit gateway in more than one global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, RegisterTransitGatewayCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, RegisterTransitGatewayCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new RegisterTransitGatewayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterTransitGatewayCommandInput} for command's `input` shape.
        * @see {@link RegisterTransitGatewayCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class RegisterTransitGatewayCommand extends $Command<RegisterTransitGatewayCommandInput, RegisterTransitGatewayCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: RegisterTransitGatewayCommandInput;
            constructor(input: RegisterTransitGatewayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterTransitGatewayCommandInput, RegisterTransitGatewayCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RejectAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RejectAttachmentRequest, RejectAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface RejectAttachmentCommandInput extends RejectAttachmentRequest {
    }
    export interface RejectAttachmentCommandOutput extends RejectAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Rejects a core network attachment request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, RejectAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, RejectAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new RejectAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RejectAttachmentCommandInput} for command's `input` shape.
        * @see {@link RejectAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class RejectAttachmentCommand extends $Command<RejectAttachmentCommandInput, RejectAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: RejectAttachmentCommandInput;
            constructor(input: RejectAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RejectAttachmentCommandInput, RejectAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RestoreCoreNetworkPolicyVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreCoreNetworkPolicyVersionRequest, RestoreCoreNetworkPolicyVersionResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface RestoreCoreNetworkPolicyVersionCommandInput extends RestoreCoreNetworkPolicyVersionRequest {
    }
    export interface RestoreCoreNetworkPolicyVersionCommandOutput extends RestoreCoreNetworkPolicyVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Restores a previous policy version as a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and restored policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, RestoreCoreNetworkPolicyVersionCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, RestoreCoreNetworkPolicyVersionCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new RestoreCoreNetworkPolicyVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreCoreNetworkPolicyVersionCommandInput} for command's `input` shape.
        * @see {@link RestoreCoreNetworkPolicyVersionCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class RestoreCoreNetworkPolicyVersionCommand extends $Command<RestoreCoreNetworkPolicyVersionCommandInput, RestoreCoreNetworkPolicyVersionCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: RestoreCoreNetworkPolicyVersionCommandInput;
            constructor(input: RestoreCoreNetworkPolicyVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreCoreNetworkPolicyVersionCommandInput, RestoreCoreNetworkPolicyVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/StartOrganizationServiceAccessUpdateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartOrganizationServiceAccessUpdateRequest, StartOrganizationServiceAccessUpdateResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface StartOrganizationServiceAccessUpdateCommandInput extends StartOrganizationServiceAccessUpdateRequest {
    }
    export interface StartOrganizationServiceAccessUpdateCommandOutput extends StartOrganizationServiceAccessUpdateResponse, __MetadataBearer {
    }
    /**
        * <p>Enables for the Network Manager service for an Amazon Web Services Organization. This can only be called by a management account within the organization. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, StartOrganizationServiceAccessUpdateCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, StartOrganizationServiceAccessUpdateCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new StartOrganizationServiceAccessUpdateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartOrganizationServiceAccessUpdateCommandInput} for command's `input` shape.
        * @see {@link StartOrganizationServiceAccessUpdateCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class StartOrganizationServiceAccessUpdateCommand extends $Command<StartOrganizationServiceAccessUpdateCommandInput, StartOrganizationServiceAccessUpdateCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: StartOrganizationServiceAccessUpdateCommandInput;
            constructor(input: StartOrganizationServiceAccessUpdateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartOrganizationServiceAccessUpdateCommandInput, StartOrganizationServiceAccessUpdateCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/StartRouteAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartRouteAnalysisRequest, StartRouteAnalysisResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface StartRouteAnalysisCommandInput extends StartRouteAnalysisRequest {
    }
    export interface StartRouteAnalysisCommandOutput extends StartRouteAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Starts analyzing the routing path between the specified source and destination. For more information,
        *             see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/route-analyzer.html">Route Analyzer</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, StartRouteAnalysisCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, StartRouteAnalysisCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new StartRouteAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartRouteAnalysisCommandInput} for command's `input` shape.
        * @see {@link StartRouteAnalysisCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class StartRouteAnalysisCommand extends $Command<StartRouteAnalysisCommandInput, StartRouteAnalysisCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: StartRouteAnalysisCommandInput;
            constructor(input: StartRouteAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartRouteAnalysisCommandInput, StartRouteAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Tags a specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, TagResourceCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, TagResourceCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UntagResourceCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UntagResourceCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConnectionRequest, UpdateConnectionResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateConnectionCommandInput extends UpdateConnectionRequest {
    }
    export interface UpdateConnectionCommandOutput extends UpdateConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the information for an existing connection. To remove information for any of the parameters,
        *             specify an empty string.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateConnectionCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateConnectionCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectionCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectionCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateConnectionCommand extends $Command<UpdateConnectionCommandInput, UpdateConnectionCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateConnectionCommandInput;
            constructor(input: UpdateConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectionCommandInput, UpdateConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateCoreNetworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateCoreNetworkRequest, UpdateCoreNetworkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateCoreNetworkCommandInput extends UpdateCoreNetworkRequest {
    }
    export interface UpdateCoreNetworkCommandOutput extends UpdateCoreNetworkResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the description of a core network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateCoreNetworkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateCoreNetworkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateCoreNetworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCoreNetworkCommandInput} for command's `input` shape.
        * @see {@link UpdateCoreNetworkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateCoreNetworkCommand extends $Command<UpdateCoreNetworkCommandInput, UpdateCoreNetworkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateCoreNetworkCommandInput;
            constructor(input: UpdateCoreNetworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCoreNetworkCommandInput, UpdateCoreNetworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDeviceRequest, UpdateDeviceResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateDeviceCommandInput extends UpdateDeviceRequest {
    }
    export interface UpdateDeviceCommandOutput extends UpdateDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the details for an existing device. To remove information for any of the
        *             parameters, specify an empty string.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateDeviceCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateDeviceCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeviceCommandInput} for command's `input` shape.
        * @see {@link UpdateDeviceCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateDeviceCommand extends $Command<UpdateDeviceCommandInput, UpdateDeviceCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateDeviceCommandInput;
            constructor(input: UpdateDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeviceCommandInput, UpdateDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateGlobalNetworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateGlobalNetworkRequest, UpdateGlobalNetworkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateGlobalNetworkCommandInput extends UpdateGlobalNetworkRequest {
    }
    export interface UpdateGlobalNetworkCommandOutput extends UpdateGlobalNetworkResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing global network. To remove information for any of the parameters,
        *             specify an empty string.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateGlobalNetworkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateGlobalNetworkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateGlobalNetworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGlobalNetworkCommandInput} for command's `input` shape.
        * @see {@link UpdateGlobalNetworkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateGlobalNetworkCommand extends $Command<UpdateGlobalNetworkCommandInput, UpdateGlobalNetworkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateGlobalNetworkCommandInput;
            constructor(input: UpdateGlobalNetworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGlobalNetworkCommandInput, UpdateGlobalNetworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLinkRequest, UpdateLinkResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateLinkCommandInput extends UpdateLinkRequest {
    }
    export interface UpdateLinkCommandOutput extends UpdateLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the details for an existing link. To remove information for any of the
        *             parameters, specify an empty string.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateLinkCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateLinkCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLinkCommandInput} for command's `input` shape.
        * @see {@link UpdateLinkCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateLinkCommand extends $Command<UpdateLinkCommandInput, UpdateLinkCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateLinkCommandInput;
            constructor(input: UpdateLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLinkCommandInput, UpdateLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateNetworkResourceMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateNetworkResourceMetadataRequest, UpdateNetworkResourceMetadataResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateNetworkResourceMetadataCommandInput extends UpdateNetworkResourceMetadataRequest {
    }
    export interface UpdateNetworkResourceMetadataCommandOutput extends UpdateNetworkResourceMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the resource metadata for the specified global network.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateNetworkResourceMetadataCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateNetworkResourceMetadataCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateNetworkResourceMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNetworkResourceMetadataCommandInput} for command's `input` shape.
        * @see {@link UpdateNetworkResourceMetadataCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateNetworkResourceMetadataCommand extends $Command<UpdateNetworkResourceMetadataCommandInput, UpdateNetworkResourceMetadataCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateNetworkResourceMetadataCommandInput;
            constructor(input: UpdateNetworkResourceMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNetworkResourceMetadataCommandInput, UpdateNetworkResourceMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateSiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSiteRequest, UpdateSiteResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateSiteCommandInput extends UpdateSiteRequest {
    }
    export interface UpdateSiteCommandOutput extends UpdateSiteResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the information for an existing site. To remove information for any of the
        *             parameters, specify an empty string.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateSiteCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateSiteCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateSiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSiteCommandInput} for command's `input` shape.
        * @see {@link UpdateSiteCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateSiteCommand extends $Command<UpdateSiteCommandInput, UpdateSiteCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateSiteCommandInput;
            constructor(input: UpdateSiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSiteCommandInput, UpdateSiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateVpcAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateVpcAttachmentRequest, UpdateVpcAttachmentResponse } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0";
    import { NetworkManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient";
    export interface UpdateVpcAttachmentCommandInput extends UpdateVpcAttachmentRequest {
    }
    export interface UpdateVpcAttachmentCommandOutput extends UpdateVpcAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a VPC attachment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkManagerClient, UpdateVpcAttachmentCommand } from "@aws-sdk/client-networkmanager"; // ES Modules import
        * // const { NetworkManagerClient, UpdateVpcAttachmentCommand } = require("@aws-sdk/client-networkmanager"); // CommonJS import
        * const client = new NetworkManagerClient(config);
        * const command = new UpdateVpcAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVpcAttachmentCommandInput} for command's `input` shape.
        * @see {@link UpdateVpcAttachmentCommandOutput} for command's `response` shape.
        * @see {@link NetworkManagerClientResolvedConfig | config} for NetworkManagerClient's `config` shape.
        *
        */
    export class UpdateVpcAttachmentCommand extends $Command<UpdateVpcAttachmentCommandInput, UpdateVpcAttachmentCommandOutput, NetworkManagerClientResolvedConfig> {
            readonly input: UpdateVpcAttachmentCommandInput;
            constructor(input: UpdateVpcAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVpcAttachmentCommandInput, UpdateVpcAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/NetworkManagerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AcceptAttachmentCommandInput, AcceptAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AcceptAttachmentCommand";
    import { AssociateConnectPeerCommandInput, AssociateConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateConnectPeerCommand";
    import { AssociateCustomerGatewayCommandInput, AssociateCustomerGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateCustomerGatewayCommand";
    import { AssociateLinkCommandInput, AssociateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateLinkCommand";
    import { AssociateTransitGatewayConnectPeerCommandInput, AssociateTransitGatewayConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/AssociateTransitGatewayConnectPeerCommand";
    import { CreateConnectAttachmentCommandInput, CreateConnectAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectAttachmentCommand";
    import { CreateConnectionCommandInput, CreateConnectionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectionCommand";
    import { CreateConnectPeerCommandInput, CreateConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateConnectPeerCommand";
    import { CreateCoreNetworkCommandInput, CreateCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateCoreNetworkCommand";
    import { CreateDeviceCommandInput, CreateDeviceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateDeviceCommand";
    import { CreateGlobalNetworkCommandInput, CreateGlobalNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateGlobalNetworkCommand";
    import { CreateLinkCommandInput, CreateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateLinkCommand";
    import { CreateSiteCommandInput, CreateSiteCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateSiteCommand";
    import { CreateSiteToSiteVpnAttachmentCommandInput, CreateSiteToSiteVpnAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateSiteToSiteVpnAttachmentCommand";
    import { CreateTransitGatewayPeeringCommandInput, CreateTransitGatewayPeeringCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateTransitGatewayPeeringCommand";
    import { CreateTransitGatewayRouteTableAttachmentCommandInput, CreateTransitGatewayRouteTableAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateTransitGatewayRouteTableAttachmentCommand";
    import { CreateVpcAttachmentCommandInput, CreateVpcAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/CreateVpcAttachmentCommand";
    import { DeleteAttachmentCommandInput, DeleteAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteAttachmentCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteConnectionCommand";
    import { DeleteConnectPeerCommandInput, DeleteConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteConnectPeerCommand";
    import { DeleteCoreNetworkCommandInput, DeleteCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteCoreNetworkCommand";
    import { DeleteCoreNetworkPolicyVersionCommandInput, DeleteCoreNetworkPolicyVersionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteCoreNetworkPolicyVersionCommand";
    import { DeleteDeviceCommandInput, DeleteDeviceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteDeviceCommand";
    import { DeleteGlobalNetworkCommandInput, DeleteGlobalNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteGlobalNetworkCommand";
    import { DeleteLinkCommandInput, DeleteLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteLinkCommand";
    import { DeletePeeringCommandInput, DeletePeeringCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeletePeeringCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSiteCommandInput, DeleteSiteCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeleteSiteCommand";
    import { DeregisterTransitGatewayCommandInput, DeregisterTransitGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DeregisterTransitGatewayCommand";
    import { DescribeGlobalNetworksCommandInput, DescribeGlobalNetworksCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DescribeGlobalNetworksCommand";
    import { DisassociateConnectPeerCommandInput, DisassociateConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateConnectPeerCommand";
    import { DisassociateCustomerGatewayCommandInput, DisassociateCustomerGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateCustomerGatewayCommand";
    import { DisassociateLinkCommandInput, DisassociateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateLinkCommand";
    import { DisassociateTransitGatewayConnectPeerCommandInput, DisassociateTransitGatewayConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/DisassociateTransitGatewayConnectPeerCommand";
    import { ExecuteCoreNetworkChangeSetCommandInput, ExecuteCoreNetworkChangeSetCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ExecuteCoreNetworkChangeSetCommand";
    import { GetConnectAttachmentCommandInput, GetConnectAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectAttachmentCommand";
    import { GetConnectionsCommandInput, GetConnectionsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectionsCommand";
    import { GetConnectPeerAssociationsCommandInput, GetConnectPeerAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectPeerAssociationsCommand";
    import { GetConnectPeerCommandInput, GetConnectPeerCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetConnectPeerCommand";
    import { GetCoreNetworkChangeEventsCommandInput, GetCoreNetworkChangeEventsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkChangeEventsCommand";
    import { GetCoreNetworkChangeSetCommandInput, GetCoreNetworkChangeSetCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkChangeSetCommand";
    import { GetCoreNetworkCommandInput, GetCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkCommand";
    import { GetCoreNetworkPolicyCommandInput, GetCoreNetworkPolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCoreNetworkPolicyCommand";
    import { GetCustomerGatewayAssociationsCommandInput, GetCustomerGatewayAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetCustomerGatewayAssociationsCommand";
    import { GetDevicesCommandInput, GetDevicesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetDevicesCommand";
    import { GetLinkAssociationsCommandInput, GetLinkAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetLinkAssociationsCommand";
    import { GetLinksCommandInput, GetLinksCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetLinksCommand";
    import { GetNetworkResourceCountsCommandInput, GetNetworkResourceCountsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourceCountsCommand";
    import { GetNetworkResourceRelationshipsCommandInput, GetNetworkResourceRelationshipsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourceRelationshipsCommand";
    import { GetNetworkResourcesCommandInput, GetNetworkResourcesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkResourcesCommand";
    import { GetNetworkRoutesCommandInput, GetNetworkRoutesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkRoutesCommand";
    import { GetNetworkTelemetryCommandInput, GetNetworkTelemetryCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetNetworkTelemetryCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetResourcePolicyCommand";
    import { GetRouteAnalysisCommandInput, GetRouteAnalysisCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetRouteAnalysisCommand";
    import { GetSitesCommandInput, GetSitesCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetSitesCommand";
    import { GetSiteToSiteVpnAttachmentCommandInput, GetSiteToSiteVpnAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetSiteToSiteVpnAttachmentCommand";
    import { GetTransitGatewayConnectPeerAssociationsCommandInput, GetTransitGatewayConnectPeerAssociationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayConnectPeerAssociationsCommand";
    import { GetTransitGatewayPeeringCommandInput, GetTransitGatewayPeeringCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayPeeringCommand";
    import { GetTransitGatewayRegistrationsCommandInput, GetTransitGatewayRegistrationsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayRegistrationsCommand";
    import { GetTransitGatewayRouteTableAttachmentCommandInput, GetTransitGatewayRouteTableAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetTransitGatewayRouteTableAttachmentCommand";
    import { GetVpcAttachmentCommandInput, GetVpcAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/GetVpcAttachmentCommand";
    import { ListAttachmentsCommandInput, ListAttachmentsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListAttachmentsCommand";
    import { ListConnectPeersCommandInput, ListConnectPeersCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListConnectPeersCommand";
    import { ListCoreNetworkPolicyVersionsCommandInput, ListCoreNetworkPolicyVersionsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListCoreNetworkPolicyVersionsCommand";
    import { ListCoreNetworksCommandInput, ListCoreNetworksCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListCoreNetworksCommand";
    import { ListOrganizationServiceAccessStatusCommandInput, ListOrganizationServiceAccessStatusCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListOrganizationServiceAccessStatusCommand";
    import { ListPeeringsCommandInput, ListPeeringsCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListPeeringsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/ListTagsForResourceCommand";
    import { PutCoreNetworkPolicyCommandInput, PutCoreNetworkPolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/PutCoreNetworkPolicyCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/PutResourcePolicyCommand";
    import { RegisterTransitGatewayCommandInput, RegisterTransitGatewayCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RegisterTransitGatewayCommand";
    import { RejectAttachmentCommandInput, RejectAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RejectAttachmentCommand";
    import { RestoreCoreNetworkPolicyVersionCommandInput, RestoreCoreNetworkPolicyVersionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/RestoreCoreNetworkPolicyVersionCommand";
    import { StartOrganizationServiceAccessUpdateCommandInput, StartOrganizationServiceAccessUpdateCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/StartOrganizationServiceAccessUpdateCommand";
    import { StartRouteAnalysisCommandInput, StartRouteAnalysisCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/StartRouteAnalysisCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UntagResourceCommand";
    import { UpdateConnectionCommandInput, UpdateConnectionCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateConnectionCommand";
    import { UpdateCoreNetworkCommandInput, UpdateCoreNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateCoreNetworkCommand";
    import { UpdateDeviceCommandInput, UpdateDeviceCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateDeviceCommand";
    import { UpdateGlobalNetworkCommandInput, UpdateGlobalNetworkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateGlobalNetworkCommand";
    import { UpdateLinkCommandInput, UpdateLinkCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateLinkCommand";
    import { UpdateNetworkResourceMetadataCommandInput, UpdateNetworkResourceMetadataCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateNetworkResourceMetadataCommand";
    import { UpdateSiteCommandInput, UpdateSiteCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateSiteCommand";
    import { UpdateVpcAttachmentCommandInput, UpdateVpcAttachmentCommandOutput } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/commands/UpdateVpcAttachmentCommand";
    export type ServiceInputTypes = AcceptAttachmentCommandInput | AssociateConnectPeerCommandInput | AssociateCustomerGatewayCommandInput | AssociateLinkCommandInput | AssociateTransitGatewayConnectPeerCommandInput | CreateConnectAttachmentCommandInput | CreateConnectPeerCommandInput | CreateConnectionCommandInput | CreateCoreNetworkCommandInput | CreateDeviceCommandInput | CreateGlobalNetworkCommandInput | CreateLinkCommandInput | CreateSiteCommandInput | CreateSiteToSiteVpnAttachmentCommandInput | CreateTransitGatewayPeeringCommandInput | CreateTransitGatewayRouteTableAttachmentCommandInput | CreateVpcAttachmentCommandInput | DeleteAttachmentCommandInput | DeleteConnectPeerCommandInput | DeleteConnectionCommandInput | DeleteCoreNetworkCommandInput | DeleteCoreNetworkPolicyVersionCommandInput | DeleteDeviceCommandInput | DeleteGlobalNetworkCommandInput | DeleteLinkCommandInput | DeletePeeringCommandInput | DeleteResourcePolicyCommandInput | DeleteSiteCommandInput | DeregisterTransitGatewayCommandInput | DescribeGlobalNetworksCommandInput | DisassociateConnectPeerCommandInput | DisassociateCustomerGatewayCommandInput | DisassociateLinkCommandInput | DisassociateTransitGatewayConnectPeerCommandInput | ExecuteCoreNetworkChangeSetCommandInput | GetConnectAttachmentCommandInput | GetConnectPeerAssociationsCommandInput | GetConnectPeerCommandInput | GetConnectionsCommandInput | GetCoreNetworkChangeEventsCommandInput | GetCoreNetworkChangeSetCommandInput | GetCoreNetworkCommandInput | GetCoreNetworkPolicyCommandInput | GetCustomerGatewayAssociationsCommandInput | GetDevicesCommandInput | GetLinkAssociationsCommandInput | GetLinksCommandInput | GetNetworkResourceCountsCommandInput | GetNetworkResourceRelationshipsCommandInput | GetNetworkResourcesCommandInput | GetNetworkRoutesCommandInput | GetNetworkTelemetryCommandInput | GetResourcePolicyCommandInput | GetRouteAnalysisCommandInput | GetSiteToSiteVpnAttachmentCommandInput | GetSitesCommandInput | GetTransitGatewayConnectPeerAssociationsCommandInput | GetTransitGatewayPeeringCommandInput | GetTransitGatewayRegistrationsCommandInput | GetTransitGatewayRouteTableAttachmentCommandInput | GetVpcAttachmentCommandInput | ListAttachmentsCommandInput | ListConnectPeersCommandInput | ListCoreNetworkPolicyVersionsCommandInput | ListCoreNetworksCommandInput | ListOrganizationServiceAccessStatusCommandInput | ListPeeringsCommandInput | ListTagsForResourceCommandInput | PutCoreNetworkPolicyCommandInput | PutResourcePolicyCommandInput | RegisterTransitGatewayCommandInput | RejectAttachmentCommandInput | RestoreCoreNetworkPolicyVersionCommandInput | StartOrganizationServiceAccessUpdateCommandInput | StartRouteAnalysisCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateConnectionCommandInput | UpdateCoreNetworkCommandInput | UpdateDeviceCommandInput | UpdateGlobalNetworkCommandInput | UpdateLinkCommandInput | UpdateNetworkResourceMetadataCommandInput | UpdateSiteCommandInput | UpdateVpcAttachmentCommandInput;
    export type ServiceOutputTypes = AcceptAttachmentCommandOutput | AssociateConnectPeerCommandOutput | AssociateCustomerGatewayCommandOutput | AssociateLinkCommandOutput | AssociateTransitGatewayConnectPeerCommandOutput | CreateConnectAttachmentCommandOutput | CreateConnectPeerCommandOutput | CreateConnectionCommandOutput | CreateCoreNetworkCommandOutput | CreateDeviceCommandOutput | CreateGlobalNetworkCommandOutput | CreateLinkCommandOutput | CreateSiteCommandOutput | CreateSiteToSiteVpnAttachmentCommandOutput | CreateTransitGatewayPeeringCommandOutput | CreateTransitGatewayRouteTableAttachmentCommandOutput | CreateVpcAttachmentCommandOutput | DeleteAttachmentCommandOutput | DeleteConnectPeerCommandOutput | DeleteConnectionCommandOutput | DeleteCoreNetworkCommandOutput | DeleteCoreNetworkPolicyVersionCommandOutput | DeleteDeviceCommandOutput | DeleteGlobalNetworkCommandOutput | DeleteLinkCommandOutput | DeletePeeringCommandOutput | DeleteResourcePolicyCommandOutput | DeleteSiteCommandOutput | DeregisterTransitGatewayCommandOutput | DescribeGlobalNetworksCommandOutput | DisassociateConnectPeerCommandOutput | DisassociateCustomerGatewayCommandOutput | DisassociateLinkCommandOutput | DisassociateTransitGatewayConnectPeerCommandOutput | ExecuteCoreNetworkChangeSetCommandOutput | GetConnectAttachmentCommandOutput | GetConnectPeerAssociationsCommandOutput | GetConnectPeerCommandOutput | GetConnectionsCommandOutput | GetCoreNetworkChangeEventsCommandOutput | GetCoreNetworkChangeSetCommandOutput | GetCoreNetworkCommandOutput | GetCoreNetworkPolicyCommandOutput | GetCustomerGatewayAssociationsCommandOutput | GetDevicesCommandOutput | GetLinkAssociationsCommandOutput | GetLinksCommandOutput | GetNetworkResourceCountsCommandOutput | GetNetworkResourceRelationshipsCommandOutput | GetNetworkResourcesCommandOutput | GetNetworkRoutesCommandOutput | GetNetworkTelemetryCommandOutput | GetResourcePolicyCommandOutput | GetRouteAnalysisCommandOutput | GetSiteToSiteVpnAttachmentCommandOutput | GetSitesCommandOutput | GetTransitGatewayConnectPeerAssociationsCommandOutput | GetTransitGatewayPeeringCommandOutput | GetTransitGatewayRegistrationsCommandOutput | GetTransitGatewayRouteTableAttachmentCommandOutput | GetVpcAttachmentCommandOutput | ListAttachmentsCommandOutput | ListConnectPeersCommandOutput | ListCoreNetworkPolicyVersionsCommandOutput | ListCoreNetworksCommandOutput | ListOrganizationServiceAccessStatusCommandOutput | ListPeeringsCommandOutput | ListTagsForResourceCommandOutput | PutCoreNetworkPolicyCommandOutput | PutResourcePolicyCommandOutput | RegisterTransitGatewayCommandOutput | RejectAttachmentCommandOutput | RestoreCoreNetworkPolicyVersionCommandOutput | StartOrganizationServiceAccessUpdateCommandOutput | StartRouteAnalysisCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateConnectionCommandOutput | UpdateCoreNetworkCommandOutput | UpdateDeviceCommandOutput | UpdateGlobalNetworkCommandOutput | UpdateLinkCommandOutput | UpdateNetworkResourceMetadataCommandOutput | UpdateSiteCommandOutput | UpdateVpcAttachmentCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type NetworkManagerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of NetworkManagerClient class constructor that set the region, credentials and other options.
        */
    export interface NetworkManagerClientConfig extends NetworkManagerClientConfigType {
    }
    type NetworkManagerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of NetworkManagerClient class. This is resolved and normalized from the {@link NetworkManagerClientConfig | constructor configuration interface}.
        */
    export interface NetworkManagerClientResolvedConfig extends NetworkManagerClientResolvedConfigType {
    }
    /**
        * <p>Amazon Web Services enables you to centrally manage your Amazon Web Services Cloud WAN core network and your Transit Gateway network across Amazon Web Services accounts, Regions, and on-premises locations.</p>
        */
    export class NetworkManagerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, NetworkManagerClientResolvedConfig> {
            /**
                * The resolved configuration of NetworkManagerClient class. This is resolved and normalized from the {@link NetworkManagerClientConfig | constructor configuration interface}.
                */
            readonly config: NetworkManagerClientResolvedConfig;
            constructor(configuration: NetworkManagerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType, LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
    import { NetworkManagerServiceException as __BaseException } from "@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/NetworkManagerServiceException";
    export interface AcceptAttachmentRequest {
            /**
                * <p>The ID of the attachment. </p>
                */
            AttachmentId: string | undefined;
    }
    export namespace AcceptAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptAttachmentRequest) => any;
    }
    export enum AttachmentType {
            CONNECT = "CONNECT",
            SITE_TO_SITE_VPN = "SITE_TO_SITE_VPN",
            TRANSIT_GATEWAY_ROUTE_TABLE = "TRANSIT_GATEWAY_ROUTE_TABLE",
            VPC = "VPC"
    }
    /**
        * <p>Describes a tag.</p>
        */
    export interface Tag {
            /**
                * <p>The tag key.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            Key?: string;
            /**
                * <p>The tag value.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Describes a proposed segment change. In some cases, the segment change must first be evaluated and accepted. </p>
        */
    export interface ProposedSegmentChange {
            /**
                * <p>The list of key-value tags that changed for the segment.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The rule number in the policy document that applies to this change.</p>
                */
            AttachmentPolicyRuleNumber?: number;
            /**
                * <p>The name of the segment to change.</p>
                */
            SegmentName?: string;
    }
    export namespace ProposedSegmentChange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProposedSegmentChange) => any;
    }
    export enum AttachmentState {
            AVAILABLE = "AVAILABLE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            PENDING_ATTACHMENT_ACCEPTANCE = "PENDING_ATTACHMENT_ACCEPTANCE",
            PENDING_NETWORK_UPDATE = "PENDING_NETWORK_UPDATE",
            PENDING_TAG_ACCEPTANCE = "PENDING_TAG_ACCEPTANCE",
            REJECTED = "REJECTED",
            UPDATING = "UPDATING"
    }
    /**
        * <p>Describes a core network attachment.</p>
        */
    export interface Attachment {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ARN of a core network.</p>
                */
            CoreNetworkArn?: string;
            /**
                * <p>The ID of the attachment.</p>
                */
            AttachmentId?: string;
            /**
                * <p>The ID of the attachment account owner.</p>
                */
            OwnerAccountId?: string;
            /**
                * <p>The type of attachment.</p>
                */
            AttachmentType?: AttachmentType | string;
            /**
                * <p>The state of the attachment.</p>
                */
            State?: AttachmentState | string;
            /**
                * <p>The Region where the edge is located.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The attachment resource ARN.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The policy rule number associated with the attachment.</p>
                */
            AttachmentPolicyRuleNumber?: number;
            /**
                * <p>The name of the segment attachment.</p>
                */
            SegmentName?: string;
            /**
                * <p>The tags associated with the attachment.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The attachment to move from one segment to another.</p>
                */
            ProposedSegmentChange?: ProposedSegmentChange;
            /**
                * <p>The timestamp when the attachment was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The timestamp when the attachment was last updated.</p>
                */
            UpdatedAt?: Date;
    }
    export namespace Attachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Attachment) => any;
    }
    export interface AcceptAttachmentResponse {
            /**
                * <p>The response to the attachment request. </p>
                */
            Attachment?: Attachment;
    }
    export namespace AcceptAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptAttachmentResponse) => any;
    }
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>There was a conflict processing the request. Updating or deleting the resource can
        *             cause an inconsistent state.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The resource type.</p>
                */
            ResourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The request has failed due to an internal error.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message: string | undefined;
            /**
                * <p>Indicates when to retry the request.</p>
                */
            RetryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The specified resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The resource type.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>The specified resource could not be found.</p>
                */
            Context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The request was denied due to request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>Indicates when to retry the request.</p>
                */
            RetryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>Describes a validation exception for a field.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The name of the field.</p>
                */
            Name: string | undefined;
            /**
                * <p>The message for the field.</p>
                */
            Message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CannotParse",
            FIELD_VALIDATION_FAILED = "FieldValidationFailed",
            OTHER = "Other",
            UNKNOWN_OPERATION = "UnknownOperation"
    }
    /**
        * <p>The input fails to satisfy the constraints.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The reason for the error.</p>
                */
            Reason?: ValidationExceptionReason | string;
            /**
                * <p>The fields that caused the error, if applicable.</p>
                */
            Fields?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>Describes the current status of an account within an Amazon Web Services Organization, including service-linked roles (SLRs).</p>
        */
    export interface AccountStatus {
            /**
                * <p>The ID of an account within the Amazon Web Services Organization.</p>
                */
            AccountId?: string;
            /**
                * <p>The status of SLR deployment for the account.</p>
                */
            SLRDeploymentStatus?: string;
    }
    export namespace AccountStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountStatus) => any;
    }
    export interface AssociateConnectPeerRequest {
            /**
                * <p>The ID of your global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the Connect peer.</p>
                */
            ConnectPeerId: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
    }
    export namespace AssociateConnectPeerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateConnectPeerRequest) => any;
    }
    export enum ConnectPeerAssociationState {
            available = "AVAILABLE",
            deleted = "DELETED",
            deleting = "DELETING",
            pending = "PENDING"
    }
    /**
        * <p>Describes a core network Connect peer association.</p>
        */
    export interface ConnectPeerAssociation {
            /**
                * <p>The ID of the Connect peer.</p>
                */
            ConnectPeerId?: string;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of the device to connect to.</p>
                */
            DeviceId?: string;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
            /**
                * <p>The state of the Connect peer association.</p>
                */
            State?: ConnectPeerAssociationState | string;
    }
    export namespace ConnectPeerAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectPeerAssociation) => any;
    }
    export interface AssociateConnectPeerResponse {
            /**
                * <p>The response to the Connect peer request.</p>
                */
            ConnectPeerAssociation?: ConnectPeerAssociation;
    }
    export namespace AssociateConnectPeerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateConnectPeerResponse) => any;
    }
    /**
        * <p>A service limit was exceeded.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>The error message.</p>
                */
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * <p>The limit code.</p>
                */
            LimitCode: string | undefined;
            /**
                * <p>The service code.</p>
                */
            ServiceCode: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export interface AssociateCustomerGatewayRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
                */
            CustomerGatewayArn: string | undefined;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
    }
    export namespace AssociateCustomerGatewayRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateCustomerGatewayRequest) => any;
    }
    export enum CustomerGatewayAssociationState {
            available = "AVAILABLE",
            deleted = "DELETED",
            deleting = "DELETING",
            pending = "PENDING"
    }
    /**
        * <p>Describes the association between a customer gateway, a device, and a link.</p>
        */
    export interface CustomerGatewayAssociation {
            /**
                * <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
                */
            CustomerGatewayArn?: string;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId?: string;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
            /**
                * <p>The association state.</p>
                */
            State?: CustomerGatewayAssociationState | string;
    }
    export namespace CustomerGatewayAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomerGatewayAssociation) => any;
    }
    export interface AssociateCustomerGatewayResponse {
            /**
                * <p>The customer gateway association.</p>
                */
            CustomerGatewayAssociation?: CustomerGatewayAssociation;
    }
    export namespace AssociateCustomerGatewayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateCustomerGatewayResponse) => any;
    }
    export interface AssociateLinkRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId: string | undefined;
    }
    export namespace AssociateLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateLinkRequest) => any;
    }
    export enum LinkAssociationState {
            available = "AVAILABLE",
            deleted = "DELETED",
            deleting = "DELETING",
            pending = "PENDING"
    }
    /**
        * <p>Describes the association between a device and a link.</p>
        */
    export interface LinkAssociation {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The device ID for the link association.</p>
                */
            DeviceId?: string;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
            /**
                * <p>The state of the association.</p>
                */
            LinkAssociationState?: LinkAssociationState | string;
    }
    export namespace LinkAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LinkAssociation) => any;
    }
    export interface AssociateLinkResponse {
            /**
                * <p>The link association.</p>
                */
            LinkAssociation?: LinkAssociation;
    }
    export namespace AssociateLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateLinkResponse) => any;
    }
    export interface AssociateTransitGatewayConnectPeerRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Connect peer.</p>
                */
            TransitGatewayConnectPeerArn: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
    }
    export namespace AssociateTransitGatewayConnectPeerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTransitGatewayConnectPeerRequest) => any;
    }
    export enum TransitGatewayConnectPeerAssociationState {
            available = "AVAILABLE",
            deleted = "DELETED",
            deleting = "DELETING",
            pending = "PENDING"
    }
    /**
        * <p>Describes a transit gateway Connect peer association.</p>
        */
    export interface TransitGatewayConnectPeerAssociation {
            /**
                * <p>The Amazon Resource Name (ARN) of the transit gateway Connect peer.</p>
                */
            TransitGatewayConnectPeerArn?: string;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId?: string;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
            /**
                * <p>The state of the association.</p>
                */
            State?: TransitGatewayConnectPeerAssociationState | string;
    }
    export namespace TransitGatewayConnectPeerAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransitGatewayConnectPeerAssociation) => any;
    }
    export interface AssociateTransitGatewayConnectPeerResponse {
            /**
                * <p>The transit gateway Connect peer association.</p>
                */
            TransitGatewayConnectPeerAssociation?: TransitGatewayConnectPeerAssociation;
    }
    export namespace AssociateTransitGatewayConnectPeerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTransitGatewayConnectPeerResponse) => any;
    }
    /**
        * <p>Specifies a location in Amazon Web Services.</p>
        */
    export interface AWSLocation {
            /**
                * <p>The Zone that the device is located in. Specify the ID of an Availability Zone, Local
                *             Zone, Wavelength Zone, or an Outpost.</p>
                */
            Zone?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the subnet that the device is located in.</p>
                */
            SubnetArn?: string;
    }
    export namespace AWSLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AWSLocation) => any;
    }
    /**
        * <p>Describes bandwidth information.</p>
        */
    export interface Bandwidth {
            /**
                * <p>Upload speed in Mbps.</p>
                */
            UploadSpeed?: number;
            /**
                * <p>Download speed in Mbps.</p>
                */
            DownloadSpeed?: number;
    }
    export namespace Bandwidth {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Bandwidth) => any;
    }
    /**
        * <p>Describes the BGP options.</p>
        */
    export interface BgpOptions {
            /**
                * <p>The Peer ASN of the BGP.</p>
                */
            PeerAsn?: number;
    }
    export namespace BgpOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BgpOptions) => any;
    }
    export enum ChangeAction {
            ADD = "ADD",
            MODIFY = "MODIFY",
            REMOVE = "REMOVE"
    }
    export enum ChangeSetState {
            EXECUTING = "EXECUTING",
            EXECUTION_SUCCEEDED = "EXECUTION_SUCCEEDED",
            FAILED_GENERATION = "FAILED_GENERATION",
            OUT_OF_DATE = "OUT_OF_DATE",
            PENDING_GENERATION = "PENDING_GENERATION",
            READY_TO_EXECUTE = "READY_TO_EXECUTE"
    }
    export enum ChangeStatus {
            COMPLETE = "COMPLETE",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            NOT_STARTED = "NOT_STARTED"
    }
    export enum ChangeType {
            ATTACHMENT_MAPPING = "ATTACHMENT_MAPPING",
            ATTACHMENT_POLICIES_CONFIGURATION = "ATTACHMENT_POLICIES_CONFIGURATION",
            ATTACHMENT_ROUTE_PROPAGATION = "ATTACHMENT_ROUTE_PROPAGATION",
            ATTACHMENT_ROUTE_STATIC = "ATTACHMENT_ROUTE_STATIC",
            CORE_NETWORK_CONFIGURATION = "CORE_NETWORK_CONFIGURATION",
            CORE_NETWORK_EDGE = "CORE_NETWORK_EDGE",
            CORE_NETWORK_SEGMENT = "CORE_NETWORK_SEGMENT",
            SEGMENTS_CONFIGURATION = "SEGMENTS_CONFIGURATION",
            SEGMENT_ACTIONS_CONFIGURATION = "SEGMENT_ACTIONS_CONFIGURATION"
    }
    export enum TunnelProtocol {
            GRE = "GRE"
    }
    /**
        * <p>Describes a core network Connect attachment options.</p>
        */
    export interface ConnectAttachmentOptions {
            /**
                * <p>The protocol used for the attachment connection.</p>
                */
            Protocol?: TunnelProtocol | string;
    }
    export namespace ConnectAttachmentOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectAttachmentOptions) => any;
    }
    /**
        * <p>Describes a core network Connect attachment.</p>
        */
    export interface ConnectAttachment {
            /**
                * <p>The attachment details.</p>
                */
            Attachment?: Attachment;
            /**
                * <p>The ID of the transport attachment.</p>
                */
            TransportAttachmentId?: string;
            /**
                * <p>Options for connecting an attachment.</p>
                */
            Options?: ConnectAttachmentOptions;
    }
    export namespace ConnectAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectAttachment) => any;
    }
    export enum ConnectionState {
            available = "AVAILABLE",
            deleting = "DELETING",
            pending = "PENDING",
            updating = "UPDATING"
    }
    /**
        * <p>Describes a connection.</p>
        */
    export interface Connection {
            /**
                * <p>The ID of the connection.</p>
                */
            ConnectionId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the connection.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of the first device in the connection.</p>
                */
            DeviceId?: string;
            /**
                * <p>The ID of the second device in the connection.</p>
                */
            ConnectedDeviceId?: string;
            /**
                * <p>The ID of the link for the first device in the connection.</p>
                */
            LinkId?: string;
            /**
                * <p>The ID of the link for the second device in the connection.</p>
                */
            ConnectedLinkId?: string;
            /**
                * <p>The description of the connection.</p>
                */
            Description?: string;
            /**
                * <p>The date and time that the connection was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The state of the connection.</p>
                */
            State?: ConnectionState | string;
            /**
                * <p>The tags for the connection.</p>
                */
            Tags?: Tag[];
    }
    export namespace Connection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Connection) => any;
    }
    export enum ConnectionStatus {
            DOWN = "DOWN",
            UP = "UP"
    }
    export enum ConnectionType {
            BGP = "BGP",
            IPSEC = "IPSEC"
    }
    /**
        * <p>Describes connection health.</p>
        */
    export interface ConnectionHealth {
            /**
                * <p>The connection type.</p>
                */
            Type?: ConnectionType | string;
            /**
                * <p>The connection status.</p>
                */
            Status?: ConnectionStatus | string;
            /**
                * <p>The time the status was last updated.</p>
                */
            Timestamp?: Date;
    }
    export namespace ConnectionHealth {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionHealth) => any;
    }
    /**
        * <p>Describes a core network BGP configuration.</p>
        */
    export interface ConnectPeerBgpConfiguration {
            /**
                * <p>The ASN of the Coret Network.</p>
                */
            CoreNetworkAsn?: number;
            /**
                * <p>The ASN of the Connect peer.</p>
                */
            PeerAsn?: number;
            /**
                * <p>The address of a core network.</p>
                */
            CoreNetworkAddress?: string;
            /**
                * <p>The address of a core network Connect peer.</p>
                */
            PeerAddress?: string;
    }
    export namespace ConnectPeerBgpConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectPeerBgpConfiguration) => any;
    }
    /**
        * <p>Describes a core network Connect peer configuration.</p>
        */
    export interface ConnectPeerConfiguration {
            /**
                * <p>The IP address of a core network.</p>
                */
            CoreNetworkAddress?: string;
            /**
                * <p>The IP address of the Connect peer.</p>
                */
            PeerAddress?: string;
            /**
                * <p>The inside IP addresses used for a Connect peer configuration.</p>
                */
            InsideCidrBlocks?: string[];
            /**
                * <p>The protocol used for a Connect peer configuration.</p>
                */
            Protocol?: TunnelProtocol | string;
            /**
                * <p>The Connect peer BGP configurations.</p>
                */
            BgpConfigurations?: ConnectPeerBgpConfiguration[];
    }
    export namespace ConnectPeerConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectPeerConfiguration) => any;
    }
    export enum ConnectPeerState {
            AVAILABLE = "AVAILABLE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED"
    }
    /**
        * <p>Describes a core network Connect peer.</p>
        */
    export interface ConnectPeer {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ID of the attachment to connect.</p>
                */
            ConnectAttachmentId?: string;
            /**
                * <p>The ID of the Connect peer.</p>
                */
            ConnectPeerId?: string;
            /**
                * <p>The Connect peer Regions where edges are located.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The state of the Connect peer.</p>
                */
            State?: ConnectPeerState | string;
            /**
                * <p>The timestamp when the Connect peer was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The configuration of the Connect peer.</p>
                */
            Configuration?: ConnectPeerConfiguration;
            /**
                * <p>The list of key-value tags associated with the Connect peer.</p>
                */
            Tags?: Tag[];
    }
    export namespace ConnectPeer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectPeer) => any;
    }
    /**
        * <p>Summary description of a Connect peer.</p>
        */
    export interface ConnectPeerSummary {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ID of a Connect peer attachment.</p>
                */
            ConnectAttachmentId?: string;
            /**
                * <p>The ID of a Connect peer.</p>
                */
            ConnectPeerId?: string;
            /**
                * <p>The Region where the edge is located.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The state of a Connect peer.</p>
                */
            ConnectPeerState?: ConnectPeerState | string;
            /**
                * <p>The timestamp when a Connect peer was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The list of key-value tags associated with the Connect peer summary.</p>
                */
            Tags?: Tag[];
    }
    export namespace ConnectPeerSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectPeerSummary) => any;
    }
    /**
        * <p>Describes a core network edge.</p>
        */
    export interface CoreNetworkEdge {
            /**
                * <p>The Region where a core network edge is located.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The ASN of a core network edge.</p>
                */
            Asn?: number;
            /**
                * <p>The inside IP addresses used for core network edges.</p>
                */
            InsideCidrBlocks?: string[];
    }
    export namespace CoreNetworkEdge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkEdge) => any;
    }
    /**
        * <p>Describes a core network segment, which are dedicated routes. Only attachments within this segment can communicate with each other.</p>
        */
    export interface CoreNetworkSegment {
            /**
                * <p>The name of a core network segment.</p>
                */
            Name?: string;
            /**
                * <p>The Regions where the edges are located.</p>
                */
            EdgeLocations?: string[];
            /**
                * <p>The shared segments of a core network.</p>
                */
            SharedSegments?: string[];
    }
    export namespace CoreNetworkSegment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkSegment) => any;
    }
    export enum CoreNetworkState {
            AVAILABLE = "AVAILABLE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            UPDATING = "UPDATING"
    }
    /**
        * <p>Describes a core network.</p>
        */
    export interface CoreNetwork {
            /**
                * <p>The ID of the global network that your core network is a part of. </p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ARN of a core network.</p>
                */
            CoreNetworkArn?: string;
            /**
                * <p>The description of a core network.</p>
                */
            Description?: string;
            /**
                * <p>The timestamp when a core network was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The current state of a core network.</p>
                */
            State?: CoreNetworkState | string;
            /**
                * <p>The segments within a core network.</p>
                */
            Segments?: CoreNetworkSegment[];
            /**
                * <p>The edges within a core network.</p>
                */
            Edges?: CoreNetworkEdge[];
            /**
                * <p>The list of key-value tags associated with a core network.</p>
                */
            Tags?: Tag[];
    }
    export namespace CoreNetwork {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetwork) => any;
    }
    /**
        * <p>Describes a core network change.</p>
        */
    export interface CoreNetworkChangeValues {
            /**
                * <p>The names of the segments in a core network.</p>
                */
            SegmentName?: string;
            /**
                * <p>The Regions where edges are located in a core network. </p>
                */
            EdgeLocations?: string[];
            /**
                * <p>The ASN of a core network.</p>
                */
            Asn?: number;
            /**
                * <p>The IP addresses used for a core network.</p>
                */
            Cidr?: string;
            /**
                * <p>The ID of the destination.</p>
                */
            DestinationIdentifier?: string;
            /**
                * <p>The inside IP addresses used for core network change values.</p>
                */
            InsideCidrBlocks?: string[];
            /**
                * <p>The shared segments for a core network change value. </p>
                */
            SharedSegments?: string[];
    }
    export namespace CoreNetworkChangeValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkChangeValues) => any;
    }
    /**
        * <p>Details describing a core network change.</p>
        */
    export interface CoreNetworkChange {
            /**
                * <p>The type of change.</p>
                */
            Type?: ChangeType | string;
            /**
                * <p>The action to take for a core network.</p>
                */
            Action?: ChangeAction | string;
            /**
                * <p>The resource identifier.</p>
                */
            Identifier?: string;
            /**
                * <p>The previous values for a core network.</p>
                */
            PreviousValues?: CoreNetworkChangeValues;
            /**
                * <p>The new value for a core network</p>
                */
            NewValues?: CoreNetworkChangeValues;
            /**
                * <p>Uniquely identifies the path for a change within the changeset. For example, the <code>IdentifierPath</code> for a core network segment change might be <code>"CORE_NETWORK_SEGMENT/us-east-1/devsegment"</code>.</p>
                */
            IdentifierPath?: string;
    }
    export namespace CoreNetworkChange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkChange) => any;
    }
    /**
        * <p>Describes a core network change event.</p>
        */
    export interface CoreNetworkChangeEventValues {
            /**
                * <p>The edge location for the core network change event.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The segment name if the change event is associated with a segment.</p>
                */
            SegmentName?: string;
            /**
                * <p>The ID of the attachment if the change event is associated with an attachment.  </p>
                */
            AttachmentId?: string;
            /**
                * <p>For a <code>STATIC_ROUTE</code> event, this is the IP address.</p>
                */
            Cidr?: string;
    }
    export namespace CoreNetworkChangeEventValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkChangeEventValues) => any;
    }
    /**
        * <p>Describes a core network change event. This can be a change to a segment, attachment, route, etc.</p>
        */
    export interface CoreNetworkChangeEvent {
            /**
                * <p>Describes the type of change event. </p>
                */
            Type?: ChangeType | string;
            /**
                * <p>The action taken for the change event.</p>
                */
            Action?: ChangeAction | string;
            /**
                * <p>Uniquely identifies the path for a change within the changeset. For example, the <code>IdentifierPath</code> for a core network segment change might be <code>"CORE_NETWORK_SEGMENT/us-east-1/devsegment"</code>.</p>
                */
            IdentifierPath?: string;
            /**
                * <p>The timestamp for an event change in status.</p>
                */
            EventTime?: Date;
            /**
                * <p>The status of the core network change event.</p>
                */
            Status?: ChangeStatus | string;
            /**
                * <p>Details of the change event.</p>
                */
            Values?: CoreNetworkChangeEventValues;
    }
    export namespace CoreNetworkChangeEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkChangeEvent) => any;
    }
    export enum CoreNetworkPolicyAlias {
            LATEST = "LATEST",
            LIVE = "LIVE"
    }
    /**
        * <p>Provides details about an error in a core network policy.</p>
        */
    export interface CoreNetworkPolicyError {
            /**
                * <p>The error code associated with a core network policy error.</p>
                */
            ErrorCode: string | undefined;
            /**
                * <p>The message associated with a core network policy error code.</p>
                */
            Message: string | undefined;
            /**
                * <p>The JSON path where the error was discovered in the policy document.</p>
                */
            Path?: string;
    }
    export namespace CoreNetworkPolicyError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkPolicyError) => any;
    }
    /**
        * <p>Describes a core network policy. You can have only one LIVE Core Policy.</p>
        */
    export interface CoreNetworkPolicy {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ID of the policy version.</p>
                */
            PolicyVersionId?: number;
            /**
                * <p>Whether a core network policy is the current LIVE policy or the most recently submitted policy.</p>
                */
            Alias?: CoreNetworkPolicyAlias | string;
            /**
                * <p>The description of a core network policy.</p>
                */
            Description?: string;
            /**
                * <p>The timestamp when a core network policy was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The state of a core network policy.</p>
                */
            ChangeSetState?: ChangeSetState | string;
            /**
                * <p>Describes any errors in a core network policy.</p>
                */
            PolicyErrors?: CoreNetworkPolicyError[];
            /**
                * <p>Describes a core network policy.</p>
                */
            PolicyDocument?: __LazyJsonString | string;
    }
    export namespace CoreNetworkPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkPolicy) => any;
    }
    /**
        * <p>Describes a core network policy exception.</p>
        */
    export class CoreNetworkPolicyException extends __BaseException {
            readonly name: "CoreNetworkPolicyException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>Describes a core network policy exception.</p>
                */
            Errors?: CoreNetworkPolicyError[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CoreNetworkPolicyException, __BaseException>);
    }
    /**
        * <p>Describes a core network policy version.</p>
        */
    export interface CoreNetworkPolicyVersion {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ID of the policy version.</p>
                */
            PolicyVersionId?: number;
            /**
                * <p>Whether a core network policy is the current policy or the most recently submitted policy.</p>
                */
            Alias?: CoreNetworkPolicyAlias | string;
            /**
                * <p>The description of a core network policy version.</p>
                */
            Description?: string;
            /**
                * <p>The timestamp when a core network policy version was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The status of the policy version change set.</p>
                */
            ChangeSetState?: ChangeSetState | string;
    }
    export namespace CoreNetworkPolicyVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkPolicyVersion) => any;
    }
    /**
        * <p>Returns details about a core network edge.</p>
        */
    export interface CoreNetworkSegmentEdgeIdentifier {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The name of the segment edge.</p>
                */
            SegmentName?: string;
            /**
                * <p>The Region where the segment edge is located.</p>
                */
            EdgeLocation?: string;
    }
    export namespace CoreNetworkSegmentEdgeIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkSegmentEdgeIdentifier) => any;
    }
    /**
        * <p>Returns summary information about a core network.</p>
        */
    export interface CoreNetworkSummary {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>a core network ARN.</p>
                */
            CoreNetworkArn?: string;
            /**
                * <p>The global network ID.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of the account owner.</p>
                */
            OwnerAccountId?: string;
            /**
                * <p>The state of a core network.</p>
                */
            State?: CoreNetworkState | string;
            /**
                * <p>The description of a core network.</p>
                */
            Description?: string;
            /**
                * <p>The key-value tags associated with a core network summary.</p>
                */
            Tags?: Tag[];
    }
    export namespace CoreNetworkSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreNetworkSummary) => any;
    }
    export interface CreateConnectAttachmentRequest {
            /**
                * <p>The ID of a core network where you want to create the attachment. </p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The Region where the edge is located.</p>
                */
            EdgeLocation: string | undefined;
            /**
                * <p>The ID of the attachment between the two connections.</p>
                */
            TransportAttachmentId: string | undefined;
            /**
                * <p>Options for creating an attachment.</p>
                */
            Options: ConnectAttachmentOptions | undefined;
            /**
                * <p>The list of key-value tags associated with the request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The client token associated with the request.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateConnectAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectAttachmentRequest) => any;
    }
    export interface CreateConnectAttachmentResponse {
            /**
                * <p>The response to a Connect attachment request.</p>
                */
            ConnectAttachment?: ConnectAttachment;
    }
    export namespace CreateConnectAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectAttachmentResponse) => any;
    }
    export interface CreateConnectionRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the first device in the connection.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The ID of the second device in the connection.</p>
                */
            ConnectedDeviceId: string | undefined;
            /**
                * <p>The ID of the link for the first device.</p>
                */
            LinkId?: string;
            /**
                * <p>The ID of the link for the second device.</p>
                */
            ConnectedLinkId?: string;
            /**
                * <p>A description of the connection.</p>
                *         <p>Length Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The tags to apply to the resource during creation.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionRequest) => any;
    }
    export interface CreateConnectionResponse {
            /**
                * <p>Information about the connection.</p>
                */
            Connection?: Connection;
    }
    export namespace CreateConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionResponse) => any;
    }
    export interface CreateConnectPeerRequest {
            /**
                * <p>The ID of the connection attachment.</p>
                */
            ConnectAttachmentId: string | undefined;
            /**
                * <p>A Connect peer core network address.</p>
                */
            CoreNetworkAddress?: string;
            /**
                * <p>The Connect peer address.</p>
                */
            PeerAddress: string | undefined;
            /**
                * <p>The Connect peer BGP options.</p>
                */
            BgpOptions?: BgpOptions;
            /**
                * <p>The inside IP addresses used for BGP peering.</p>
                */
            InsideCidrBlocks: string[] | undefined;
            /**
                * <p>The tags associated with the peer request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The client token associated with the request.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateConnectPeerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectPeerRequest) => any;
    }
    export interface CreateConnectPeerResponse {
            /**
                * <p>The response to the request.</p>
                */
            ConnectPeer?: ConnectPeer;
    }
    export namespace CreateConnectPeerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectPeerResponse) => any;
    }
    export interface CreateCoreNetworkRequest {
            /**
                * <p>The ID of the global network that a core network will be a part of. </p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The description of a core network.</p>
                */
            Description?: string;
            /**
                * <p>Key-value tags associated with a core network request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The policy document for creating a core network.</p>
                */
            PolicyDocument?: string;
            /**
                * <p>The client token associated with a core network request.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateCoreNetworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCoreNetworkRequest) => any;
    }
    export interface CreateCoreNetworkResponse {
            /**
                * <p>Returns details about a core network.</p>
                */
            CoreNetwork?: CoreNetwork;
    }
    export namespace CreateCoreNetworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCoreNetworkResponse) => any;
    }
    /**
        * <p>Describes a location.</p>
        */
    export interface Location {
            /**
                * <p>The physical address.</p>
                */
            Address?: string;
            /**
                * <p>The latitude.</p>
                */
            Latitude?: string;
            /**
                * <p>The longitude.</p>
                */
            Longitude?: string;
    }
    export namespace Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Location) => any;
    }
    export interface CreateDeviceRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The Amazon Web Services location of the device, if applicable. For an on-premises device, you can omit this parameter.</p>
                */
            AWSLocation?: AWSLocation;
            /**
                * <p>A description of the device.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The type of the device.</p>
                */
            Type?: string;
            /**
                * <p>The vendor of the device.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            Vendor?: string;
            /**
                * <p>The model of the device.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            Model?: string;
            /**
                * <p>The serial number of the device.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            SerialNumber?: string;
            /**
                * <p>The location of the device.</p>
                */
            Location?: Location;
            /**
                * <p>The ID of the site.</p>
                */
            SiteId?: string;
            /**
                * <p>The tags to apply to the resource during creation.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeviceRequest) => any;
    }
    export enum DeviceState {
            available = "AVAILABLE",
            deleting = "DELETING",
            pending = "PENDING",
            updating = "UPDATING"
    }
    /**
        * <p>Describes a device.</p>
        */
    export interface Device {
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the device.</p>
                */
            DeviceArn?: string;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The Amazon Web Services location of the device.</p>
                */
            AWSLocation?: AWSLocation;
            /**
                * <p>The description of the device.</p>
                */
            Description?: string;
            /**
                * <p>The device type.</p>
                */
            Type?: string;
            /**
                * <p>The device vendor.</p>
                */
            Vendor?: string;
            /**
                * <p>The device model.</p>
                */
            Model?: string;
            /**
                * <p>The device serial number.</p>
                */
            SerialNumber?: string;
            /**
                * <p>The site location.</p>
                */
            Location?: Location;
            /**
                * <p>The site ID.</p>
                */
            SiteId?: string;
            /**
                * <p>The date and time that the site was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The device state.</p>
                */
            State?: DeviceState | string;
            /**
                * <p>The tags for the device.</p>
                */
            Tags?: Tag[];
    }
    export namespace Device {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Device) => any;
    }
    export interface CreateDeviceResponse {
            /**
                * <p>Information about the device.</p>
                */
            Device?: Device;
    }
    export namespace CreateDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeviceResponse) => any;
    }
    export interface CreateGlobalNetworkRequest {
            /**
                * <p>A description of the global network.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The tags to apply to the resource during creation.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateGlobalNetworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGlobalNetworkRequest) => any;
    }
    export enum GlobalNetworkState {
            available = "AVAILABLE",
            deleting = "DELETING",
            pending = "PENDING",
            updating = "UPDATING"
    }
    /**
        * <p>Describes a global network. This is a single private network acting as a high-level container for your network objects, including an Amazon Web Services-managed Core Network.</p>
        */
    export interface GlobalNetwork {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the global network.</p>
                */
            GlobalNetworkArn?: string;
            /**
                * <p>The description of the global network.</p>
                */
            Description?: string;
            /**
                * <p>The date and time that the global network was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The state of the global network.</p>
                */
            State?: GlobalNetworkState | string;
            /**
                * <p>The tags for the global network.</p>
                */
            Tags?: Tag[];
    }
    export namespace GlobalNetwork {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalNetwork) => any;
    }
    export interface CreateGlobalNetworkResponse {
            /**
                * <p>Information about the global network object.</p>
                */
            GlobalNetwork?: GlobalNetwork;
    }
    export namespace CreateGlobalNetworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGlobalNetworkResponse) => any;
    }
    export interface CreateLinkRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>A description of the link.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The type of the link.</p>
                *         <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \ ^</p>
                */
            Type?: string;
            /**
                * <p> The upload speed and download speed in Mbps. </p>
                */
            Bandwidth: Bandwidth | undefined;
            /**
                * <p>The provider of the link.</p>
                *         <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \ ^</p>
                */
            Provider?: string;
            /**
                * <p>The ID of the site.</p>
                */
            SiteId: string | undefined;
            /**
                * <p>The tags to apply to the resource during creation.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLinkRequest) => any;
    }
    export enum LinkState {
            available = "AVAILABLE",
            deleting = "DELETING",
            pending = "PENDING",
            updating = "UPDATING"
    }
    /**
        * <p>Describes a link.</p>
        */
    export interface Link {
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the link.</p>
                */
            LinkArn?: string;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of the site.</p>
                */
            SiteId?: string;
            /**
                * <p>The description of the link.</p>
                */
            Description?: string;
            /**
                * <p>The type of the link.</p>
                */
            Type?: string;
            /**
                * <p>The bandwidth for the link.</p>
                */
            Bandwidth?: Bandwidth;
            /**
                * <p>The provider of the link.</p>
                */
            Provider?: string;
            /**
                * <p>The date and time that the link was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The state of the link.</p>
                */
            State?: LinkState | string;
            /**
                * <p>The tags for the link.</p>
                */
            Tags?: Tag[];
    }
    export namespace Link {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Link) => any;
    }
    export interface CreateLinkResponse {
            /**
                * <p>Information about the link.</p>
                */
            Link?: Link;
    }
    export namespace CreateLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLinkResponse) => any;
    }
    export interface CreateSiteRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>A description of your site.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The site location. This information is used for visualization in the Network Manager console. If you specify the address, the latitude and longitude are automatically calculated.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>Address</code>: The physical address of the site.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Latitude</code>: The latitude of the site. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Longitude</code>: The longitude of the site.</p>
                *             </li>
                *          </ul>
                */
            Location?: Location;
            /**
                * <p>The tags to apply to the resource during creation.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateSiteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSiteRequest) => any;
    }
    export enum SiteState {
            available = "AVAILABLE",
            deleting = "DELETING",
            pending = "PENDING",
            updating = "UPDATING"
    }
    /**
        * <p>Describes a site.</p>
        */
    export interface Site {
            /**
                * <p>The ID of the site.</p>
                */
            SiteId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the site.</p>
                */
            SiteArn?: string;
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The description of the site.</p>
                */
            Description?: string;
            /**
                * <p>The location of the site.</p>
                */
            Location?: Location;
            /**
                * <p>The date and time that the site was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The state of the site.</p>
                */
            State?: SiteState | string;
            /**
                * <p>The tags for the site.</p>
                */
            Tags?: Tag[];
    }
    export namespace Site {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Site) => any;
    }
    export interface CreateSiteResponse {
            /**
                * <p>Information about the site.</p>
                */
            Site?: Site;
    }
    export namespace CreateSiteResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSiteResponse) => any;
    }
    export interface CreateSiteToSiteVpnAttachmentRequest {
            /**
                * <p>The ID of a core network where you're creating a site-to-site VPN attachment.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ARN identifying the VPN attachment.</p>
                */
            VpnConnectionArn: string | undefined;
            /**
                * <p>The tags associated with the request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The client token associated with the request.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateSiteToSiteVpnAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSiteToSiteVpnAttachmentRequest) => any;
    }
    /**
        * <p>Creates a site-to-site VPN attachment.</p>
        */
    export interface SiteToSiteVpnAttachment {
            /**
                * <p>Provides details about a site-to-site VPN attachment.</p>
                */
            Attachment?: Attachment;
            /**
                * <p>The ARN of the site-to-site VPN attachment. </p>
                */
            VpnConnectionArn?: string;
    }
    export namespace SiteToSiteVpnAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SiteToSiteVpnAttachment) => any;
    }
    export interface CreateSiteToSiteVpnAttachmentResponse {
            /**
                * <p>Details about a site-to-site VPN attachment.</p>
                */
            SiteToSiteVpnAttachment?: SiteToSiteVpnAttachment;
    }
    export namespace CreateSiteToSiteVpnAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSiteToSiteVpnAttachmentResponse) => any;
    }
    export interface CreateTransitGatewayPeeringRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ARN of the transit gateway for the peering request.</p>
                */
            TransitGatewayArn: string | undefined;
            /**
                * <p>The list of key-value tags associated with the request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The client token associated with the request.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateTransitGatewayPeeringRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTransitGatewayPeeringRequest) => any;
    }
    export enum PeeringType {
            TRANSIT_GATEWAY = "TRANSIT_GATEWAY"
    }
    export enum PeeringState {
            AVAILABLE = "AVAILABLE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED"
    }
    /**
        * <p>Describes a peering connection.</p>
        */
    export interface Peering {
            /**
                * <p>The ID of the core network for the peering request.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ARN of a core network.</p>
                */
            CoreNetworkArn?: string;
            /**
                * <p>The ID of the peering attachment. </p>
                */
            PeeringId?: string;
            /**
                * <p>The ID of the account owner.</p>
                */
            OwnerAccountId?: string;
            /**
                * <p>The type of peering. This will be <code>TRANSIT_GATEWAY</code>.</p>
                */
            PeeringType?: PeeringType | string;
            /**
                * <p>The current state of the peering connection. </p>
                */
            State?: PeeringState | string;
            /**
                * <p>The edge location for the peer.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The resource ARN of the peer.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The list of key-value tags associated with the peering.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The timestamp when the attachment peer was created.</p>
                */
            CreatedAt?: Date;
    }
    export namespace Peering {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Peering) => any;
    }
    /**
        * <p>Describes a transit gateway peering attachment.</p>
        */
    export interface TransitGatewayPeering {
            /**
                * <p>Describes a transit gateway peer connection.</p>
                */
            Peering?: Peering;
            /**
                * <p>The ARN of the transit gateway.</p>
                */
            TransitGatewayArn?: string;
    }
    export namespace TransitGatewayPeering {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransitGatewayPeering) => any;
    }
    export interface CreateTransitGatewayPeeringResponse {
            /**
                * <p>Returns information about the transit gateway peering connection request.</p>
                */
            TransitGatewayPeering?: TransitGatewayPeering;
    }
    export namespace CreateTransitGatewayPeeringResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTransitGatewayPeeringResponse) => any;
    }
    export interface CreateTransitGatewayRouteTableAttachmentRequest {
            /**
                * <p>The ID of the peer for the </p>
                */
            PeeringId: string | undefined;
            /**
                * <p>The ARN of the transit gateway route table for the attachment request.</p>
                */
            TransitGatewayRouteTableArn: string | undefined;
            /**
                * <p>The list of key-value tags associated with the request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The client token associated with the request.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateTransitGatewayRouteTableAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTransitGatewayRouteTableAttachmentRequest) => any;
    }
    /**
        * <p>Describes a transit gateway route table attachment.</p>
        */
    export interface TransitGatewayRouteTableAttachment {
            /**
                * <p>Describes a core network attachment.</p>
                */
            Attachment?: Attachment;
            /**
                * <p>The ID of the peering attachment.</p>
                */
            PeeringId?: string;
            /**
                * <p>The ARN of the transit gateway attachment route table.</p>
                */
            TransitGatewayRouteTableArn?: string;
    }
    export namespace TransitGatewayRouteTableAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransitGatewayRouteTableAttachment) => any;
    }
    export interface CreateTransitGatewayRouteTableAttachmentResponse {
            /**
                * <p>The route table associated with the create transit gateway route table attachment request.</p>
                */
            TransitGatewayRouteTableAttachment?: TransitGatewayRouteTableAttachment;
    }
    export namespace CreateTransitGatewayRouteTableAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTransitGatewayRouteTableAttachmentResponse) => any;
    }
    /**
        * <p>Describes the VPC options.</p>
        */
    export interface VpcOptions {
            /**
                * <p>Indicates whether IPv6 is supported.</p>
                */
            Ipv6Support?: boolean;
    }
    export namespace VpcOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcOptions) => any;
    }
    export interface CreateVpcAttachmentRequest {
            /**
                * <p>The ID of a core network for the VPC attachment.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ARN of the VPC.</p>
                */
            VpcArn: string | undefined;
            /**
                * <p>The subnet ARN of the VPC attachment.</p>
                */
            SubnetArns: string[] | undefined;
            /**
                * <p>Options for the VPC attachment.</p>
                */
            Options?: VpcOptions;
            /**
                * <p>The key-value tags associated with the request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The client token associated with the request.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateVpcAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVpcAttachmentRequest) => any;
    }
    /**
        * <p>Describes a VPC attachment.</p>
        */
    export interface VpcAttachment {
            /**
                * <p>Provides details about the VPC attachment.</p>
                */
            Attachment?: Attachment;
            /**
                * <p>The subnet ARNs.</p>
                */
            SubnetArns?: string[];
            /**
                * <p>Provides details about the VPC attachment.</p>
                */
            Options?: VpcOptions;
    }
    export namespace VpcAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcAttachment) => any;
    }
    export interface CreateVpcAttachmentResponse {
            /**
                * <p>Provides details about the VPC attachment.</p>
                */
            VpcAttachment?: VpcAttachment;
    }
    export namespace CreateVpcAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVpcAttachmentResponse) => any;
    }
    export interface DeleteAttachmentRequest {
            /**
                * <p>The ID of the attachment to delete.</p>
                */
            AttachmentId: string | undefined;
    }
    export namespace DeleteAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAttachmentRequest) => any;
    }
    export interface DeleteAttachmentResponse {
            /**
                * <p>Information about the deleted attachment.</p>
                */
            Attachment?: Attachment;
    }
    export namespace DeleteAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAttachmentResponse) => any;
    }
    export interface DeleteConnectionRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the connection.</p>
                */
            ConnectionId: string | undefined;
    }
    export namespace DeleteConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionRequest) => any;
    }
    export interface DeleteConnectionResponse {
            /**
                * <p>Information about the connection.</p>
                */
            Connection?: Connection;
    }
    export namespace DeleteConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionResponse) => any;
    }
    export interface DeleteConnectPeerRequest {
            /**
                * <p>The ID of the deleted Connect peer.</p>
                */
            ConnectPeerId: string | undefined;
    }
    export namespace DeleteConnectPeerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectPeerRequest) => any;
    }
    export interface DeleteConnectPeerResponse {
            /**
                * <p>Information about the deleted Connect peer.</p>
                */
            ConnectPeer?: ConnectPeer;
    }
    export namespace DeleteConnectPeerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectPeerResponse) => any;
    }
    export interface DeleteCoreNetworkRequest {
            /**
                * <p>The network ID of the deleted core network.</p>
                */
            CoreNetworkId: string | undefined;
    }
    export namespace DeleteCoreNetworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCoreNetworkRequest) => any;
    }
    export interface DeleteCoreNetworkResponse {
            /**
                * <p>Information about the deleted core network.</p>
                */
            CoreNetwork?: CoreNetwork;
    }
    export namespace DeleteCoreNetworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCoreNetworkResponse) => any;
    }
    export interface DeleteCoreNetworkPolicyVersionRequest {
            /**
                * <p>The ID of a core network for the deleted policy.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The version ID of the deleted policy.</p>
                */
            PolicyVersionId: number | undefined;
    }
    export namespace DeleteCoreNetworkPolicyVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCoreNetworkPolicyVersionRequest) => any;
    }
    export interface DeleteCoreNetworkPolicyVersionResponse {
            /**
                * <p>Returns information about the deleted policy version. </p>
                */
            CoreNetworkPolicy?: CoreNetworkPolicy;
    }
    export namespace DeleteCoreNetworkPolicyVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCoreNetworkPolicyVersionResponse) => any;
    }
    export interface DeleteDeviceRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId: string | undefined;
    }
    export namespace DeleteDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeviceRequest) => any;
    }
    export interface DeleteDeviceResponse {
            /**
                * <p>Information about the device.</p>
                */
            Device?: Device;
    }
    export namespace DeleteDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeviceResponse) => any;
    }
    export interface DeleteGlobalNetworkRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
    }
    export namespace DeleteGlobalNetworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGlobalNetworkRequest) => any;
    }
    export interface DeleteGlobalNetworkResponse {
            /**
                * <p>Information about the global network.</p>
                */
            GlobalNetwork?: GlobalNetwork;
    }
    export namespace DeleteGlobalNetworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGlobalNetworkResponse) => any;
    }
    export interface DeleteLinkRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId: string | undefined;
    }
    export namespace DeleteLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLinkRequest) => any;
    }
    export interface DeleteLinkResponse {
            /**
                * <p>Information about the link.</p>
                */
            Link?: Link;
    }
    export namespace DeleteLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLinkResponse) => any;
    }
    export interface DeletePeeringRequest {
            /**
                * <p>The ID of the peering connection to delete.</p>
                */
            PeeringId: string | undefined;
    }
    export namespace DeletePeeringRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePeeringRequest) => any;
    }
    export interface DeletePeeringResponse {
            /**
                * <p>Information about a deleted peering connection.</p>
                */
            Peering?: Peering;
    }
    export namespace DeletePeeringResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePeeringResponse) => any;
    }
    export interface DeleteResourcePolicyRequest {
            /**
                * <p>The ARN of the policy to delete.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DeleteResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyRequest) => any;
    }
    export interface DeleteResourcePolicyResponse {
    }
    export namespace DeleteResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyResponse) => any;
    }
    export interface DeleteSiteRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the site.</p>
                */
            SiteId: string | undefined;
    }
    export namespace DeleteSiteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSiteRequest) => any;
    }
    export interface DeleteSiteResponse {
            /**
                * <p>Information about the site.</p>
                */
            Site?: Site;
    }
    export namespace DeleteSiteResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSiteResponse) => any;
    }
    export interface DeregisterTransitGatewayRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the transit gateway.</p>
                */
            TransitGatewayArn: string | undefined;
    }
    export namespace DeregisterTransitGatewayRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTransitGatewayRequest) => any;
    }
    export enum TransitGatewayRegistrationState {
            available = "AVAILABLE",
            deleted = "DELETED",
            deleting = "DELETING",
            failed = "FAILED",
            pending = "PENDING"
    }
    /**
        * <p>Describes the status of a transit gateway registration.</p>
        */
    export interface TransitGatewayRegistrationStateReason {
            /**
                * <p>The code for the state reason.</p>
                */
            Code?: TransitGatewayRegistrationState | string;
            /**
                * <p>The message for the state reason.</p>
                */
            Message?: string;
    }
    export namespace TransitGatewayRegistrationStateReason {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransitGatewayRegistrationStateReason) => any;
    }
    /**
        * <p>Describes the registration of a transit gateway to a global network.</p>
        */
    export interface TransitGatewayRegistration {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the transit gateway.</p>
                */
            TransitGatewayArn?: string;
            /**
                * <p>The state of the transit gateway registration.</p>
                */
            State?: TransitGatewayRegistrationStateReason;
    }
    export namespace TransitGatewayRegistration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransitGatewayRegistration) => any;
    }
    export interface DeregisterTransitGatewayResponse {
            /**
                * <p>The transit gateway registration information.</p>
                */
            TransitGatewayRegistration?: TransitGatewayRegistration;
    }
    export namespace DeregisterTransitGatewayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTransitGatewayResponse) => any;
    }
    export interface DescribeGlobalNetworksRequest {
            /**
                * <p>The IDs of one or more global networks. The maximum is 10.</p>
                */
            GlobalNetworkIds?: string[];
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeGlobalNetworksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGlobalNetworksRequest) => any;
    }
    export interface DescribeGlobalNetworksResponse {
            /**
                * <p>Information about the global networks.</p>
                */
            GlobalNetworks?: GlobalNetwork[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeGlobalNetworksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGlobalNetworksResponse) => any;
    }
    export interface DisassociateConnectPeerRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the Connect peer to disassociate from a device.</p>
                */
            ConnectPeerId: string | undefined;
    }
    export namespace DisassociateConnectPeerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateConnectPeerRequest) => any;
    }
    export interface DisassociateConnectPeerResponse {
            /**
                * <p>Describes the Connect peer association.</p>
                */
            ConnectPeerAssociation?: ConnectPeerAssociation;
    }
    export namespace DisassociateConnectPeerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateConnectPeerResponse) => any;
    }
    export interface DisassociateCustomerGatewayRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
                */
            CustomerGatewayArn: string | undefined;
    }
    export namespace DisassociateCustomerGatewayRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateCustomerGatewayRequest) => any;
    }
    export interface DisassociateCustomerGatewayResponse {
            /**
                * <p>Information about the customer gateway association.</p>
                */
            CustomerGatewayAssociation?: CustomerGatewayAssociation;
    }
    export namespace DisassociateCustomerGatewayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateCustomerGatewayResponse) => any;
    }
    export interface DisassociateLinkRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId: string | undefined;
    }
    export namespace DisassociateLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateLinkRequest) => any;
    }
    export interface DisassociateLinkResponse {
            /**
                * <p>Information about the link association.</p>
                */
            LinkAssociation?: LinkAssociation;
    }
    export namespace DisassociateLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateLinkResponse) => any;
    }
    export interface DisassociateTransitGatewayConnectPeerRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the transit gateway Connect peer.</p>
                */
            TransitGatewayConnectPeerArn: string | undefined;
    }
    export namespace DisassociateTransitGatewayConnectPeerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTransitGatewayConnectPeerRequest) => any;
    }
    export interface DisassociateTransitGatewayConnectPeerResponse {
            /**
                * <p>The transit gateway Connect peer association.</p>
                */
            TransitGatewayConnectPeerAssociation?: TransitGatewayConnectPeerAssociation;
    }
    export namespace DisassociateTransitGatewayConnectPeerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTransitGatewayConnectPeerResponse) => any;
    }
    export interface ExecuteCoreNetworkChangeSetRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ID of the policy version.</p>
                */
            PolicyVersionId: number | undefined;
    }
    export namespace ExecuteCoreNetworkChangeSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteCoreNetworkChangeSetRequest) => any;
    }
    export interface ExecuteCoreNetworkChangeSetResponse {
    }
    export namespace ExecuteCoreNetworkChangeSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteCoreNetworkChangeSetResponse) => any;
    }
    export interface GetConnectAttachmentRequest {
            /**
                * <p>The ID of the attachment.</p>
                */
            AttachmentId: string | undefined;
    }
    export namespace GetConnectAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectAttachmentRequest) => any;
    }
    export interface GetConnectAttachmentResponse {
            /**
                * <p>Details about the Connect attachment.</p>
                */
            ConnectAttachment?: ConnectAttachment;
    }
    export namespace GetConnectAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectAttachmentResponse) => any;
    }
    export interface GetConnectionsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>One or more connection IDs.</p>
                */
            ConnectionIds?: string[];
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetConnectionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionsRequest) => any;
    }
    export interface GetConnectionsResponse {
            /**
                * <p>Information about the connections.</p>
                */
            Connections?: Connection[];
            /**
                * <p>The token to use for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetConnectionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionsResponse) => any;
    }
    export interface GetConnectPeerRequest {
            /**
                * <p>The ID of the Connect peer.</p>
                */
            ConnectPeerId: string | undefined;
    }
    export namespace GetConnectPeerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectPeerRequest) => any;
    }
    export interface GetConnectPeerResponse {
            /**
                * <p>Returns information about a core network Connect peer.</p>
                */
            ConnectPeer?: ConnectPeer;
    }
    export namespace GetConnectPeerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectPeerResponse) => any;
    }
    export interface GetConnectPeerAssociationsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The IDs of the Connect peers.</p>
                */
            ConnectPeerIds?: string[];
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetConnectPeerAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectPeerAssociationsRequest) => any;
    }
    export interface GetConnectPeerAssociationsResponse {
            /**
                * <p>Displays a list of Connect peer associations.</p>
                */
            ConnectPeerAssociations?: ConnectPeerAssociation[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetConnectPeerAssociationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectPeerAssociationsResponse) => any;
    }
    export interface GetCoreNetworkRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
    }
    export namespace GetCoreNetworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkRequest) => any;
    }
    export interface GetCoreNetworkResponse {
            /**
                * <p>Details about a core network.</p>
                */
            CoreNetwork?: CoreNetwork;
    }
    export namespace GetCoreNetworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkResponse) => any;
    }
    export interface GetCoreNetworkChangeEventsRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ID of the policy version.</p>
                */
            PolicyVersionId: number | undefined;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetCoreNetworkChangeEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkChangeEventsRequest) => any;
    }
    export interface GetCoreNetworkChangeEventsResponse {
            /**
                * <p>The response to <code>GetCoreNetworkChangeEventsRequest</code>.</p>
                */
            CoreNetworkChangeEvents?: CoreNetworkChangeEvent[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetCoreNetworkChangeEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkChangeEventsResponse) => any;
    }
    export interface GetCoreNetworkChangeSetRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ID of the policy version.</p>
                */
            PolicyVersionId: number | undefined;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetCoreNetworkChangeSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkChangeSetRequest) => any;
    }
    export interface GetCoreNetworkChangeSetResponse {
            /**
                * <p>Describes a core network changes.</p>
                */
            CoreNetworkChanges?: CoreNetworkChange[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetCoreNetworkChangeSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkChangeSetResponse) => any;
    }
    export interface GetCoreNetworkPolicyRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ID of a core network policy version.</p>
                */
            PolicyVersionId?: number;
            /**
                * <p>The alias of a core network policy </p>
                */
            Alias?: CoreNetworkPolicyAlias | string;
    }
    export namespace GetCoreNetworkPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkPolicyRequest) => any;
    }
    export interface GetCoreNetworkPolicyResponse {
            /**
                * <p>The details about a core network policy.</p>
                */
            CoreNetworkPolicy?: CoreNetworkPolicy;
    }
    export namespace GetCoreNetworkPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreNetworkPolicyResponse) => any;
    }
    export interface GetCustomerGatewayAssociationsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>One or more customer gateway Amazon Resource Names (ARNs). The maximum is 10.</p>
                */
            CustomerGatewayArns?: string[];
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetCustomerGatewayAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomerGatewayAssociationsRequest) => any;
    }
    export interface GetCustomerGatewayAssociationsResponse {
            /**
                * <p>The customer gateway associations.</p>
                */
            CustomerGatewayAssociations?: CustomerGatewayAssociation[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetCustomerGatewayAssociationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomerGatewayAssociationsResponse) => any;
    }
    export interface GetDevicesRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>One or more device IDs. The maximum is 10.</p>
                */
            DeviceIds?: string[];
            /**
                * <p>The ID of the site.</p>
                */
            SiteId?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicesRequest) => any;
    }
    export interface GetDevicesResponse {
            /**
                * <p>The devices.</p>
                */
            Devices?: Device[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicesResponse) => any;
    }
    export interface GetLinkAssociationsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId?: string;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetLinkAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLinkAssociationsRequest) => any;
    }
    export interface GetLinkAssociationsResponse {
            /**
                * <p>The link associations.</p>
                */
            LinkAssociations?: LinkAssociation[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetLinkAssociationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLinkAssociationsResponse) => any;
    }
    export interface GetLinksRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>One or more link IDs. The maximum is 10.</p>
                */
            LinkIds?: string[];
            /**
                * <p>The ID of the site.</p>
                */
            SiteId?: string;
            /**
                * <p>The link type.</p>
                */
            Type?: string;
            /**
                * <p>The link provider.</p>
                */
            Provider?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetLinksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLinksRequest) => any;
    }
    export interface GetLinksResponse {
            /**
                * <p>The links.</p>
                */
            Links?: Link[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetLinksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLinksResponse) => any;
    }
    export interface GetNetworkResourceCountsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The resource type.</p>
                *          <p>The following are the supported resource types for Direct Connect:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>dxcon</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-vif</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Network Manager:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>connection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>device</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>link</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>site</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Amazon VPC:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>customer-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-attachment</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-connect-peer</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-route-table</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>vpn-connection</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceType?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkResourceCountsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkResourceCountsRequest) => any;
    }
    /**
        * <p>Describes a resource count.</p>
        */
    export interface NetworkResourceCount {
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * <p>The resource count.</p>
                */
            Count?: number;
    }
    export namespace NetworkResourceCount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkResourceCount) => any;
    }
    export interface GetNetworkResourceCountsResponse {
            /**
                * <p>The count of resources.</p>
                */
            NetworkResourceCounts?: NetworkResourceCount[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkResourceCountsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkResourceCountsResponse) => any;
    }
    export interface GetNetworkResourceRelationshipsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ARN of the registered gateway.</p>
                */
            RegisteredGatewayArn?: string;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            AwsRegion?: string;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AccountId?: string;
            /**
                * <p>The resource type.</p>
                *         <p>The following are the supported resource types for Direct Connect:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>dxcon</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-vif</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Network Manager:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>connection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>device</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>link</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>site</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Amazon VPC:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>customer-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-attachment</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-connect-peer</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-route-table</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>vpn-connection</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceType?: string;
            /**
                * <p>The ARN of the gateway.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkResourceRelationshipsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkResourceRelationshipsRequest) => any;
    }
    /**
        * <p>Describes a resource relationship.</p>
        */
    export interface Relationship {
            /**
                * <p>The ARN of the resource.</p>
                */
            From?: string;
            /**
                * <p>The ARN of the resource.</p>
                */
            To?: string;
    }
    export namespace Relationship {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Relationship) => any;
    }
    export interface GetNetworkResourceRelationshipsResponse {
            /**
                * <p>The resource relationships.</p>
                */
            Relationships?: Relationship[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkResourceRelationshipsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkResourceRelationshipsResponse) => any;
    }
    export interface GetNetworkResourcesRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ARN of the gateway.</p>
                */
            RegisteredGatewayArn?: string;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            AwsRegion?: string;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AccountId?: string;
            /**
                * <p>The resource type.</p>
                *          <p>The following are the supported resource types for Direct Connect:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>dxcon</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_Connection.html">Connection</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>dx-gateway</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DirectConnectGateway.html">DirectConnectGateway</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>dx-vif</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_VirtualInterface.html">VirtualInterface</a>.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following are the supported resource types for Network Manager:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>connection</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Connection.html">Connection</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>device</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Device.html">Device</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>link</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Link.html">Link</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>site</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Site.html">Site</a>.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following are the supported resource types for Amazon VPC:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>customer-gateway</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CustomerGateway.html">CustomerGateway</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>transit-gateway</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGateway.html">TransitGateway</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>transit-gateway-attachment</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayAttachment.html">TransitGatewayAttachment</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>transit-gateway-connect-peer</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayConnectPeer.html">TransitGatewayConnectPeer</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>transit-gateway-route-table</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayRouteTable.html">TransitGatewayRouteTable</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>vpn-connection</code> - The definition model is
                *                     <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnConnection.html">VpnConnection</a>.</p>
                *             </li>
                *          </ul>
                */
            ResourceType?: string;
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkResourcesRequest) => any;
    }
    /**
        * <p>Describes a network resource.</p>
        */
    export interface NetworkResource {
            /**
                * <p>The ARN of the gateway.</p>
                */
            RegisteredGatewayArn?: string;
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            AwsRegion?: string;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AccountId?: string;
            /**
                * <p>The resource type.</p>
                *          <p>The following are the supported resource types for Direct Connect:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>dxcon</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-vif</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Network Manager:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>connection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>device</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>link</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>site</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Amazon VPC:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>customer-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-attachment</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-connect-peer</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-route-table</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>vpn-connection</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceType?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>Information about the resource, in JSON format. Network Manager gets this information by describing the resource using its Describe API call.</p>
                */
            Definition?: string;
            /**
                * <p>The time that the resource definition was retrieved.</p>
                */
            DefinitionTimestamp?: Date;
            /**
                * <p>The tags.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The resource metadata.</p>
                */
            Metadata?: Record<string, string>;
    }
    export namespace NetworkResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkResource) => any;
    }
    export interface GetNetworkResourcesResponse {
            /**
                * <p>The network resources.</p>
                */
            NetworkResources?: NetworkResource[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkResourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkResourcesResponse) => any;
    }
    /**
        * <p>Describes a route table.</p>
        */
    export interface RouteTableIdentifier {
            /**
                * <p>The ARN of the transit gateway route table.</p>
                */
            TransitGatewayRouteTableArn?: string;
            /**
                * <p>The segment edge in a core network.</p>
                */
            CoreNetworkSegmentEdge?: CoreNetworkSegmentEdgeIdentifier;
    }
    export namespace RouteTableIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteTableIdentifier) => any;
    }
    export enum RouteState {
            ACTIVE = "ACTIVE",
            BLACKHOLE = "BLACKHOLE"
    }
    export enum RouteType {
            PROPAGATED = "PROPAGATED",
            STATIC = "STATIC"
    }
    export interface GetNetworkRoutesRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the route table.</p>
                */
            RouteTableIdentifier: RouteTableIdentifier | undefined;
            /**
                * <p>An exact CIDR block.</p>
                */
            ExactCidrMatches?: string[];
            /**
                * <p>The most specific route that matches the traffic (longest prefix match).</p>
                */
            LongestPrefixMatches?: string[];
            /**
                * <p>The routes with a subnet that match the specified CIDR filter.</p>
                */
            SubnetOfMatches?: string[];
            /**
                * <p>The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
                */
            SupernetOfMatches?: string[];
            /**
                * <p>The IDs of the prefix lists.</p>
                */
            PrefixListIds?: string[];
            /**
                * <p>The route states.</p>
                */
            States?: (RouteState | string)[];
            /**
                * <p>The route types.</p>
                */
            Types?: (RouteType | string)[];
            /**
                * <p>Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.</p>
                */
            DestinationFilters?: Record<string, string[]>;
    }
    export namespace GetNetworkRoutesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkRoutesRequest) => any;
    }
    /**
        * <p>Describes the destination of a network route.</p>
        */
    export interface NetworkRouteDestination {
            /**
                * <p>The ID of a core network attachment.</p>
                */
            CoreNetworkAttachmentId?: string;
            /**
                * <p>The ID of the transit gateway attachment.</p>
                */
            TransitGatewayAttachmentId?: string;
            /**
                * <p>The name of the segment.</p>
                */
            SegmentName?: string;
            /**
                * <p>The edge location for the network destination.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
    }
    export namespace NetworkRouteDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkRouteDestination) => any;
    }
    /**
        * <p>Describes a network route.</p>
        */
    export interface NetworkRoute {
            /**
                * <p>A unique identifier for the route, such as a CIDR block.</p>
                */
            DestinationCidrBlock?: string;
            /**
                * <p>The destinations.</p>
                */
            Destinations?: NetworkRouteDestination[];
            /**
                * <p>The ID of the prefix list.</p>
                */
            PrefixListId?: string;
            /**
                * <p>The route state. The possible values are <code>active</code> and <code>blackhole</code>.</p>
                */
            State?: RouteState | string;
            /**
                * <p>The route type. The possible values are <code>propagated</code> and <code>static</code>.</p>
                */
            Type?: RouteType | string;
    }
    export namespace NetworkRoute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkRoute) => any;
    }
    export enum RouteTableType {
            CORE_NETWORK_SEGMENT = "CORE_NETWORK_SEGMENT",
            TRANSIT_GATEWAY_ROUTE_TABLE = "TRANSIT_GATEWAY_ROUTE_TABLE"
    }
    export interface GetNetworkRoutesResponse {
            /**
                * <p>The ARN of the route table.</p>
                */
            RouteTableArn?: string;
            /**
                * <p>Describes a core network segment edge.</p>
                */
            CoreNetworkSegmentEdge?: CoreNetworkSegmentEdgeIdentifier;
            /**
                * <p>The route table type.</p>
                */
            RouteTableType?: RouteTableType | string;
            /**
                * <p>The route table creation time.</p>
                */
            RouteTableTimestamp?: Date;
            /**
                * <p>The network routes.</p>
                */
            NetworkRoutes?: NetworkRoute[];
    }
    export namespace GetNetworkRoutesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkRoutesResponse) => any;
    }
    export interface GetNetworkTelemetryRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ARN of the gateway.</p>
                */
            RegisteredGatewayArn?: string;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            AwsRegion?: string;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AccountId?: string;
            /**
                * <p>The resource type.</p>
                *         <p>The following are the supported resource types for Direct Connect:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>dxcon</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dx-vif</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Network Manager:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>connection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>device</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>link</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>site</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>The following are the supported resource types for Amazon VPC:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>customer-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-attachment</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-connect-peer</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>transit-gateway-route-table</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>vpn-connection</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceType?: string;
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkTelemetryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkTelemetryRequest) => any;
    }
    /**
        * <p>Describes the telemetry information for a resource.</p>
        */
    export interface NetworkTelemetry {
            /**
                * <p>The ARN of the gateway.</p>
                */
            RegisteredGatewayArn?: string;
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            AwsRegion?: string;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            AccountId?: string;
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The address.</p>
                */
            Address?: string;
            /**
                * <p>The connection health.</p>
                */
            Health?: ConnectionHealth;
    }
    export namespace NetworkTelemetry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkTelemetry) => any;
    }
    export interface GetNetworkTelemetryResponse {
            /**
                * <p>The network telemetry.</p>
                */
            NetworkTelemetry?: NetworkTelemetry[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetNetworkTelemetryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkTelemetryResponse) => any;
    }
    export interface GetResourcePolicyRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace GetResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyRequest) => any;
    }
    export interface GetResourcePolicyResponse {
            /**
                * <p>The resource policy document.</p>
                */
            PolicyDocument?: __LazyJsonString | string;
    }
    export namespace GetResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyResponse) => any;
    }
    export interface GetRouteAnalysisRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the route analysis.</p>
                */
            RouteAnalysisId: string | undefined;
    }
    export namespace GetRouteAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteAnalysisRequest) => any;
    }
    /**
        * <p>Describes a source or a destination.</p>
        */
    export interface RouteAnalysisEndpointOptions {
            /**
                * <p>The ARN of the transit gateway attachment.</p>
                */
            TransitGatewayAttachmentArn?: string;
            /**
                * <p>The ARN of the transit gateway.</p>
                */
            TransitGatewayArn?: string;
            /**
                * <p>The IP address.</p>
                */
            IpAddress?: string;
    }
    export namespace RouteAnalysisEndpointOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteAnalysisEndpointOptions) => any;
    }
    export enum RouteAnalysisCompletionReasonCode {
            BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND = "BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND",
            CYCLIC_PATH_DETECTED = "CYCLIC_PATH_DETECTED",
            INACTIVE_ROUTE_FOR_DESTINATION_FOUND = "INACTIVE_ROUTE_FOR_DESTINATION_FOUND",
            MAX_HOPS_EXCEEDED = "MAX_HOPS_EXCEEDED",
            NO_DESTINATION_ARN_PROVIDED = "NO_DESTINATION_ARN_PROVIDED",
            POSSIBLE_MIDDLEBOX = "POSSIBLE_MIDDLEBOX",
            ROUTE_NOT_FOUND = "ROUTE_NOT_FOUND",
            TRANSIT_GATEWAY_ATTACHMENT = "TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH",
            TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND = "TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND",
            TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY = "TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY",
            TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND = "TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND"
    }
    export enum RouteAnalysisCompletionResultCode {
            CONNECTED = "CONNECTED",
            NOT_CONNECTED = "NOT_CONNECTED"
    }
    /**
        * <p>Describes the status of an analysis at completion.</p>
        */
    export interface RouteAnalysisCompletion {
            /**
                * <p>The result of the analysis. If the status is <code>NOT_CONNECTED</code>, check the
                *             reason code.</p>
                */
            ResultCode?: RouteAnalysisCompletionResultCode | string;
            /**
                * <p>The reason code. Available only if a connection is not found.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND</code> - Found a black hole route with the destination CIDR block.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CYCLIC_PATH_DETECTED</code> - Found the same resource multiple times while traversing the path.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INACTIVE_ROUTE_FOR_DESTINATION_FOUND</code> - Found an inactive route with the destination CIDR block.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MAX_HOPS_EXCEEDED</code> - Analysis exceeded 64 hops without finding the destination.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ROUTE_NOT_FOUND</code> - Cannot find a route table with the destination CIDR block.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TGW_ATTACH_ARN_NO_MATCH</code> - Found an attachment, but not with the correct destination ARN.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TGW_ATTACH_NOT_FOUND</code> - Cannot find an attachment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TGW_ATTACH_NOT_IN_TGW</code> - Found an attachment, but not to the correct transit gateway.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TGW_ATTACH_STABLE_ROUTE_TABLE_NOT_FOUND</code> - The state of the route table association is not associated.</p>
                *             </li>
                *          </ul>
                */
            ReasonCode?: RouteAnalysisCompletionReasonCode | string;
            /**
                * <p>Additional information about the path. Available only if a connection is not found.</p>
                */
            ReasonContext?: Record<string, string>;
    }
    export namespace RouteAnalysisCompletion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteAnalysisCompletion) => any;
    }
    /**
        * <p>Describes a network resource.</p>
        */
    export interface NetworkResourceSummary {
            /**
                * <p>The ARN of the gateway.</p>
                */
            RegisteredGatewayArn?: string;
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * <p>Information about the resource, in JSON format. Network Manager gets this information by describing the resource using its Describe API call.</p>
                */
            Definition?: string;
            /**
                * <p>The value for the Name tag.</p>
                */
            NameTag?: string;
            /**
                * <p>Indicates whether this is a middlebox appliance.</p>
                */
            IsMiddlebox?: boolean;
    }
    export namespace NetworkResourceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkResourceSummary) => any;
    }
    /**
        * <p>Describes a path component.</p>
        */
    export interface PathComponent {
            /**
                * <p>The sequence number in the path. The destination is 0.</p>
                */
            Sequence?: number;
            /**
                * <p>The resource.</p>
                */
            Resource?: NetworkResourceSummary;
            /**
                * <p>The destination CIDR block in the route table.</p>
                */
            DestinationCidrBlock?: string;
    }
    export namespace PathComponent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PathComponent) => any;
    }
    /**
        * <p>Describes a route analysis path.</p>
        */
    export interface RouteAnalysisPath {
            /**
                * <p>The status of the analysis at completion.</p>
                */
            CompletionStatus?: RouteAnalysisCompletion;
            /**
                * <p>The route analysis path.</p>
                */
            Path?: PathComponent[];
    }
    export namespace RouteAnalysisPath {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteAnalysisPath) => any;
    }
    export enum RouteAnalysisStatus {
            completed = "COMPLETED",
            failed = "FAILED",
            running = "RUNNING"
    }
    /**
        * <p>Describes a route analysis.</p>
        */
    export interface RouteAnalysis {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId?: string;
            /**
                * <p>The ID of the AWS account that created the route analysis.</p>
                */
            OwnerAccountId?: string;
            /**
                * <p>The ID of the route analysis.</p>
                */
            RouteAnalysisId?: string;
            /**
                * <p>The time that the analysis started.</p>
                */
            StartTimestamp?: Date;
            /**
                * <p>The status of the route analysis.</p>
                */
            Status?: RouteAnalysisStatus | string;
            /**
                * <p>The source.</p>
                */
            Source?: RouteAnalysisEndpointOptions;
            /**
                * <p>The destination.</p>
                */
            Destination?: RouteAnalysisEndpointOptions;
            /**
                * <p>Indicates whether to analyze the return path. The return path is not analyzed if the forward path
                *             analysis does not succeed.</p>
                */
            IncludeReturnPath?: boolean;
            /**
                * <p>Indicates whether to include the location of middlebox appliances in the route analysis.</p>
                */
            UseMiddleboxes?: boolean;
            /**
                * <p>The forward path.</p>
                */
            ForwardPath?: RouteAnalysisPath;
            /**
                * <p>The return path.</p>
                */
            ReturnPath?: RouteAnalysisPath;
    }
    export namespace RouteAnalysis {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteAnalysis) => any;
    }
    export interface GetRouteAnalysisResponse {
            /**
                * <p>The route analysis.</p>
                */
            RouteAnalysis?: RouteAnalysis;
    }
    export namespace GetRouteAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteAnalysisResponse) => any;
    }
    export interface GetSitesRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>One or more site IDs. The maximum is 10.</p>
                */
            SiteIds?: string[];
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetSitesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSitesRequest) => any;
    }
    export interface GetSitesResponse {
            /**
                * <p>The sites.</p>
                */
            Sites?: Site[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetSitesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSitesResponse) => any;
    }
    export interface GetSiteToSiteVpnAttachmentRequest {
            /**
                * <p>The ID of the attachment.</p>
                */
            AttachmentId: string | undefined;
    }
    export namespace GetSiteToSiteVpnAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSiteToSiteVpnAttachmentRequest) => any;
    }
    export interface GetSiteToSiteVpnAttachmentResponse {
            /**
                * <p>Describes the site-to-site attachment.</p>
                */
            SiteToSiteVpnAttachment?: SiteToSiteVpnAttachment;
    }
    export namespace GetSiteToSiteVpnAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSiteToSiteVpnAttachmentResponse) => any;
    }
    export interface GetTransitGatewayConnectPeerAssociationsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>One or more transit gateway Connect peer Amazon Resource Names (ARNs).</p>
                */
            TransitGatewayConnectPeerArns?: string[];
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetTransitGatewayConnectPeerAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayConnectPeerAssociationsRequest) => any;
    }
    export interface GetTransitGatewayConnectPeerAssociationsResponse {
            /**
                * <p>Information about the transit gateway Connect peer associations.</p>
                */
            TransitGatewayConnectPeerAssociations?: TransitGatewayConnectPeerAssociation[];
            /**
                * <p>The token to use for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetTransitGatewayConnectPeerAssociationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayConnectPeerAssociationsResponse) => any;
    }
    export interface GetTransitGatewayPeeringRequest {
            /**
                * <p>The ID of the peering request.</p>
                */
            PeeringId: string | undefined;
    }
    export namespace GetTransitGatewayPeeringRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayPeeringRequest) => any;
    }
    export interface GetTransitGatewayPeeringResponse {
            /**
                * <p>Returns information about a transit gateway peering. </p>
                */
            TransitGatewayPeering?: TransitGatewayPeering;
    }
    export namespace GetTransitGatewayPeeringResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayPeeringResponse) => any;
    }
    export interface GetTransitGatewayRegistrationsRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The Amazon Resource Names (ARNs) of one or more transit gateways. The maximum is
                *             10.</p>
                */
            TransitGatewayArns?: string[];
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetTransitGatewayRegistrationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayRegistrationsRequest) => any;
    }
    export interface GetTransitGatewayRegistrationsResponse {
            /**
                * <p>The transit gateway registrations.</p>
                */
            TransitGatewayRegistrations?: TransitGatewayRegistration[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetTransitGatewayRegistrationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayRegistrationsResponse) => any;
    }
    export interface GetTransitGatewayRouteTableAttachmentRequest {
            /**
                * <p>The ID of the transit gateway route table attachment.</p>
                */
            AttachmentId: string | undefined;
    }
    export namespace GetTransitGatewayRouteTableAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayRouteTableAttachmentRequest) => any;
    }
    export interface GetTransitGatewayRouteTableAttachmentResponse {
            /**
                * <p>Returns information about the transit gateway route table attachment.</p>
                */
            TransitGatewayRouteTableAttachment?: TransitGatewayRouteTableAttachment;
    }
    export namespace GetTransitGatewayRouteTableAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTransitGatewayRouteTableAttachmentResponse) => any;
    }
    export interface GetVpcAttachmentRequest {
            /**
                * <p>The ID of the attachment.</p>
                */
            AttachmentId: string | undefined;
    }
    export namespace GetVpcAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcAttachmentRequest) => any;
    }
    export interface GetVpcAttachmentResponse {
            /**
                * <p>Returns details about a VPC attachment.</p>
                */
            VpcAttachment?: VpcAttachment;
    }
    export namespace GetVpcAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcAttachmentResponse) => any;
    }
    export interface ListAttachmentsRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The type of attachment.</p>
                */
            AttachmentType?: AttachmentType | string;
            /**
                * <p>The Region where the edge is located.</p>
                */
            EdgeLocation?: string;
            /**
                * <p>The state of the attachment.</p>
                */
            State?: AttachmentState | string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAttachmentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachmentsRequest) => any;
    }
    export interface ListAttachmentsResponse {
            /**
                * <p>Describes the list of attachments.</p>
                */
            Attachments?: Attachment[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAttachmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachmentsResponse) => any;
    }
    export interface ListConnectPeersRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>The ID of the attachment.</p>
                */
            ConnectAttachmentId?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListConnectPeersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectPeersRequest) => any;
    }
    export interface ListConnectPeersResponse {
            /**
                * <p>Describes the Connect peers.</p>
                */
            ConnectPeers?: ConnectPeerSummary[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListConnectPeersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectPeersResponse) => any;
    }
    export interface ListCoreNetworkPolicyVersionsRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListCoreNetworkPolicyVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreNetworkPolicyVersionsRequest) => any;
    }
    export interface ListCoreNetworkPolicyVersionsResponse {
            /**
                * <p>Describes core network policy versions.</p>
                */
            CoreNetworkPolicyVersions?: CoreNetworkPolicyVersion[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListCoreNetworkPolicyVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreNetworkPolicyVersionsResponse) => any;
    }
    export interface ListCoreNetworksRequest {
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListCoreNetworksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreNetworksRequest) => any;
    }
    export interface ListCoreNetworksResponse {
            /**
                * <p>Describes the list of core networks.</p>
                */
            CoreNetworks?: CoreNetworkSummary[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListCoreNetworksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreNetworksResponse) => any;
    }
    export interface ListOrganizationServiceAccessStatusRequest {
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListOrganizationServiceAccessStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOrganizationServiceAccessStatusRequest) => any;
    }
    /**
        * <p>The status of an Amazon Web Services Organization and the accounts within that organization.</p>
        */
    export interface OrganizationStatus {
            /**
                * <p>The ID of an Amazon Web Services Organization.</p>
                */
            OrganizationId?: string;
            /**
                * <p>The status  of the organization's AWS service access. This will be <code>ENABLED</code> or <code>DISABLED</code>.</p>
                */
            OrganizationAwsServiceAccessStatus?: string;
            /**
                * <p>The status of the SLR deployment for the account. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
                */
            SLRDeploymentStatus?: string;
            /**
                * <p>The current service-linked role (SLR) deployment status for an Amazon Web Services Organization's accounts. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
                */
            AccountStatusList?: AccountStatus[];
    }
    export namespace OrganizationStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationStatus) => any;
    }
    export interface ListOrganizationServiceAccessStatusResponse {
            /**
                * <p>Displays the status of an Amazon Web Services Organization.</p>
                */
            OrganizationStatus?: OrganizationStatus;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListOrganizationServiceAccessStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOrganizationServiceAccessStatusResponse) => any;
    }
    export interface ListPeeringsRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId?: string;
            /**
                * <p>Returns a list of a peering requests.</p>
                */
            PeeringType?: PeeringType | string;
            /**
                * <p>Returns a list edge locations for the </p>
                */
            EdgeLocation?: string;
            /**
                * <p>Returns a list of the peering request states.</p>
                */
            State?: PeeringState | string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPeeringsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPeeringsRequest) => any;
    }
    export interface ListPeeringsResponse {
            /**
                * <p>Lists the transit gateway peerings for the <code>ListPeerings</code> request.</p>
                */
            Peerings?: Peering[];
            /**
                * <p>The token for the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPeeringsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPeeringsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The list of tags.</p>
                */
            TagList?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface PutCoreNetworkPolicyRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The policy document.</p>
                */
            PolicyDocument: __LazyJsonString | string | undefined;
            /**
                * <p>a core network policy description.</p>
                */
            Description?: string;
            /**
                * <p>The ID of a core network policy. </p>
                */
            LatestVersionId?: number;
            /**
                * <p>The client token associated with the request.</p>
                */
            ClientToken?: string;
    }
    export namespace PutCoreNetworkPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCoreNetworkPolicyRequest) => any;
    }
    export interface PutCoreNetworkPolicyResponse {
            /**
                * <p>Describes the changed core network policy.</p>
                */
            CoreNetworkPolicy?: CoreNetworkPolicy;
    }
    export namespace PutCoreNetworkPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCoreNetworkPolicyResponse) => any;
    }
    export interface PutResourcePolicyRequest {
            /**
                * <p>The JSON resource policy document.</p>
                */
            PolicyDocument: __LazyJsonString | string | undefined;
            /**
                * <p>The ARN of the resource policy. </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace PutResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyRequest) => any;
    }
    export interface PutResourcePolicyResponse {
    }
    export namespace PutResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyResponse) => any;
    }
    export interface RegisterTransitGatewayRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the transit gateway.</p>
                */
            TransitGatewayArn: string | undefined;
    }
    export namespace RegisterTransitGatewayRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTransitGatewayRequest) => any;
    }
    export interface RegisterTransitGatewayResponse {
            /**
                * <p>Information about the transit gateway registration.</p>
                */
            TransitGatewayRegistration?: TransitGatewayRegistration;
    }
    export namespace RegisterTransitGatewayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTransitGatewayResponse) => any;
    }
    export interface RejectAttachmentRequest {
            /**
                * <p>The ID of the attachment.</p>
                */
            AttachmentId: string | undefined;
    }
    export namespace RejectAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectAttachmentRequest) => any;
    }
    export interface RejectAttachmentResponse {
            /**
                * <p>Describes the rejected attachment request.</p>
                */
            Attachment?: Attachment;
    }
    export namespace RejectAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectAttachmentResponse) => any;
    }
    export interface RestoreCoreNetworkPolicyVersionRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The ID of the policy version to restore.</p>
                */
            PolicyVersionId: number | undefined;
    }
    export namespace RestoreCoreNetworkPolicyVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreCoreNetworkPolicyVersionRequest) => any;
    }
    export interface RestoreCoreNetworkPolicyVersionResponse {
            /**
                * <p>Describes the restored core network policy.</p>
                */
            CoreNetworkPolicy?: CoreNetworkPolicy;
    }
    export namespace RestoreCoreNetworkPolicyVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreCoreNetworkPolicyVersionResponse) => any;
    }
    export interface StartOrganizationServiceAccessUpdateRequest {
            /**
                * <p>The action to take for the update request. This can be either <code>ENABLE</code> or <code>DISABLE</code>.</p>
                */
            Action: string | undefined;
    }
    export namespace StartOrganizationServiceAccessUpdateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartOrganizationServiceAccessUpdateRequest) => any;
    }
    export interface StartOrganizationServiceAccessUpdateResponse {
            /**
                * <p>The status of the service access update request for an Amazon Web Services Organization.</p>
                */
            OrganizationStatus?: OrganizationStatus;
    }
    export namespace StartOrganizationServiceAccessUpdateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartOrganizationServiceAccessUpdateResponse) => any;
    }
    /**
        * <p>Describes a source or a destination.</p>
        */
    export interface RouteAnalysisEndpointOptionsSpecification {
            /**
                * <p>The ARN of the transit gateway attachment.</p>
                */
            TransitGatewayAttachmentArn?: string;
            /**
                * <p>The IP address.</p>
                */
            IpAddress?: string;
    }
    export namespace RouteAnalysisEndpointOptionsSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteAnalysisEndpointOptionsSpecification) => any;
    }
    export interface StartRouteAnalysisRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The source from which traffic originates.</p>
                */
            Source: RouteAnalysisEndpointOptionsSpecification | undefined;
            /**
                * <p>The destination.</p>
                */
            Destination: RouteAnalysisEndpointOptionsSpecification | undefined;
            /**
                * <p>Indicates whether to analyze the return path. The default is <code>false</code>.</p>
                */
            IncludeReturnPath?: boolean;
            /**
                * <p>Indicates whether to include the location of middlebox appliances in the route analysis.
                *             The default is <code>false</code>.</p>
                */
            UseMiddleboxes?: boolean;
    }
    export namespace StartRouteAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRouteAnalysisRequest) => any;
    }
    export interface StartRouteAnalysisResponse {
            /**
                * <p>The route analysis.</p>
                */
            RouteAnalysis?: RouteAnalysis;
    }
    export namespace StartRouteAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRouteAnalysisResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to apply to the specified resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag keys to remove from the specified resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateConnectionRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the connection.</p>
                */
            ConnectionId: string | undefined;
            /**
                * <p>The ID of the link for the first device in the connection.</p>
                */
            LinkId?: string;
            /**
                * <p>The ID of the link for the second device in the connection.</p>
                */
            ConnectedLinkId?: string;
            /**
                * <p>A description of the connection.</p>
                *         <p>Length Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
    }
    export namespace UpdateConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionRequest) => any;
    }
    export interface UpdateConnectionResponse {
            /**
                * <p>Information about the connection.</p>
                */
            Connection?: Connection;
    }
    export namespace UpdateConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionResponse) => any;
    }
    export interface UpdateCoreNetworkRequest {
            /**
                * <p>The ID of a core network.</p>
                */
            CoreNetworkId: string | undefined;
            /**
                * <p>The description of the update.</p>
                */
            Description?: string;
    }
    export namespace UpdateCoreNetworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCoreNetworkRequest) => any;
    }
    export interface UpdateCoreNetworkResponse {
            /**
                * <p>Returns information about a core network update.</p>
                */
            CoreNetwork?: CoreNetwork;
    }
    export namespace UpdateCoreNetworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCoreNetworkResponse) => any;
    }
    export interface UpdateDeviceRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the device.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The Amazon Web Services location of the device, if applicable. For an on-premises device, you can omit this parameter.</p>
                */
            AWSLocation?: AWSLocation;
            /**
                * <p>A description of the device.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The type of the device.</p>
                */
            Type?: string;
            /**
                * <p>The vendor of the device.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            Vendor?: string;
            /**
                * <p>The model of the device.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            Model?: string;
            /**
                * <p>The serial number of the device.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            SerialNumber?: string;
            /**
                * <p>Describes a location.</p>
                */
            Location?: Location;
            /**
                * <p>The ID of the site.</p>
                */
            SiteId?: string;
    }
    export namespace UpdateDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceRequest) => any;
    }
    export interface UpdateDeviceResponse {
            /**
                * <p>Information about the device.</p>
                */
            Device?: Device;
    }
    export namespace UpdateDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceResponse) => any;
    }
    export interface UpdateGlobalNetworkRequest {
            /**
                * <p>The ID of your global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>A description of the global network.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
    }
    export namespace UpdateGlobalNetworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGlobalNetworkRequest) => any;
    }
    export interface UpdateGlobalNetworkResponse {
            /**
                * <p>Information about the global network object.</p>
                */
            GlobalNetwork?: GlobalNetwork;
    }
    export namespace UpdateGlobalNetworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGlobalNetworkResponse) => any;
    }
    export interface UpdateLinkRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of the link.</p>
                */
            LinkId: string | undefined;
            /**
                * <p>A description of the link.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The type of the link.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            Type?: string;
            /**
                * <p>The upload and download speed in Mbps. </p>
                */
            Bandwidth?: Bandwidth;
            /**
                * <p>The provider of the link.</p>
                *         <p>Constraints: Maximum length of 128 characters.</p>
                */
            Provider?: string;
    }
    export namespace UpdateLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLinkRequest) => any;
    }
    export interface UpdateLinkResponse {
            /**
                * <p>Information about the link.</p>
                */
            Link?: Link;
    }
    export namespace UpdateLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLinkResponse) => any;
    }
    export interface UpdateNetworkResourceMetadataRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The resource metadata.</p>
                */
            Metadata: Record<string, string> | undefined;
    }
    export namespace UpdateNetworkResourceMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNetworkResourceMetadataRequest) => any;
    }
    export interface UpdateNetworkResourceMetadataResponse {
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The updated resource metadata.</p>
                */
            Metadata?: Record<string, string>;
    }
    export namespace UpdateNetworkResourceMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNetworkResourceMetadataResponse) => any;
    }
    export interface UpdateSiteRequest {
            /**
                * <p>The ID of the global network.</p>
                */
            GlobalNetworkId: string | undefined;
            /**
                * <p>The ID of your site.</p>
                */
            SiteId: string | undefined;
            /**
                * <p>A description of your site.</p>
                *         <p>Constraints: Maximum length of 256 characters.</p>
                */
            Description?: string;
            /**
                * <p>The site location:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>Address</code>: The physical address of the site.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Latitude</code>: The latitude of the site. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Longitude</code>: The longitude of the site.</p>
                *             </li>
                *          </ul>
                */
            Location?: Location;
    }
    export namespace UpdateSiteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteRequest) => any;
    }
    export interface UpdateSiteResponse {
            /**
                * <p>Information about the site.</p>
                */
            Site?: Site;
    }
    export namespace UpdateSiteResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteResponse) => any;
    }
    export interface UpdateVpcAttachmentRequest {
            /**
                * <p>The ID of the attachment.</p>
                */
            AttachmentId: string | undefined;
            /**
                * <p>Adds a subnet ARN to the VPC attachment.</p>
                */
            AddSubnetArns?: string[];
            /**
                * <p>Removes a subnet ARN from the attachment.</p>
                */
            RemoveSubnetArns?: string[];
            /**
                * <p>Additional options for updating the VPC attachment. </p>
                */
            Options?: VpcOptions;
    }
    export namespace UpdateVpcAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVpcAttachmentRequest) => any;
    }
    export interface UpdateVpcAttachmentResponse {
            /**
                * <p>Describes the updated VPC attachment.</p>
                */
            VpcAttachment?: VpcAttachment;
    }
    export namespace UpdateVpcAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVpcAttachmentResponse) => any;
    }
}

declare module '@aws-sdk/client-networkmanager/node_modules/@aws-sdk/client-networkmanager/dist-types/models/NetworkManagerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from NetworkManager service.
        */
    export class NetworkManagerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

