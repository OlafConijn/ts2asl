// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-kafkaconnect' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateConnectorCommandInput, CreateConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateConnectorCommand";
    import { CreateCustomPluginCommandInput, CreateCustomPluginCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateCustomPluginCommand";
    import { CreateWorkerConfigurationCommandInput, CreateWorkerConfigurationCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateWorkerConfigurationCommand";
    import { DeleteConnectorCommandInput, DeleteConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DeleteConnectorCommand";
    import { DeleteCustomPluginCommandInput, DeleteCustomPluginCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DeleteCustomPluginCommand";
    import { DescribeConnectorCommandInput, DescribeConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeConnectorCommand";
    import { DescribeCustomPluginCommandInput, DescribeCustomPluginCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeCustomPluginCommand";
    import { DescribeWorkerConfigurationCommandInput, DescribeWorkerConfigurationCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeWorkerConfigurationCommand";
    import { ListConnectorsCommandInput, ListConnectorsCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListConnectorsCommand";
    import { ListCustomPluginsCommandInput, ListCustomPluginsCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListCustomPluginsCommand";
    import { ListWorkerConfigurationsCommandInput, ListWorkerConfigurationsCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListWorkerConfigurationsCommand";
    import { UpdateConnectorCommandInput, UpdateConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/UpdateConnectorCommand";
    import { KafkaConnectClient } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    /**
        * <p/>
        */
    export class KafkaConnect extends KafkaConnectClient {
            /**
                * <p>Creates a connector using the specified properties.</p>
                */
            createConnector(args: CreateConnectorCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectorCommandOutput>;
            createConnector(args: CreateConnectorCommandInput, cb: (err: any, data?: CreateConnectorCommandOutput) => void): void;
            createConnector(args: CreateConnectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectorCommandOutput) => void): void;
            /**
                * <p>Creates a custom plugin using the specified properties.</p>
                */
            createCustomPlugin(args: CreateCustomPluginCommandInput, options?: __HttpHandlerOptions): Promise<CreateCustomPluginCommandOutput>;
            createCustomPlugin(args: CreateCustomPluginCommandInput, cb: (err: any, data?: CreateCustomPluginCommandOutput) => void): void;
            createCustomPlugin(args: CreateCustomPluginCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCustomPluginCommandOutput) => void): void;
            /**
                * <p>Creates a worker configuration using the specified properties.</p>
                */
            createWorkerConfiguration(args: CreateWorkerConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkerConfigurationCommandOutput>;
            createWorkerConfiguration(args: CreateWorkerConfigurationCommandInput, cb: (err: any, data?: CreateWorkerConfigurationCommandOutput) => void): void;
            createWorkerConfiguration(args: CreateWorkerConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkerConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified connector.</p>
                */
            deleteConnector(args: DeleteConnectorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectorCommandOutput>;
            deleteConnector(args: DeleteConnectorCommandInput, cb: (err: any, data?: DeleteConnectorCommandOutput) => void): void;
            deleteConnector(args: DeleteConnectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectorCommandOutput) => void): void;
            /**
                * <p>Deletes a custom plugin.</p>
                */
            deleteCustomPlugin(args: DeleteCustomPluginCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCustomPluginCommandOutput>;
            deleteCustomPlugin(args: DeleteCustomPluginCommandInput, cb: (err: any, data?: DeleteCustomPluginCommandOutput) => void): void;
            deleteCustomPlugin(args: DeleteCustomPluginCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCustomPluginCommandOutput) => void): void;
            /**
                * <p>Returns summary information about the connector.</p>
                */
            describeConnector(args: DescribeConnectorCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConnectorCommandOutput>;
            describeConnector(args: DescribeConnectorCommandInput, cb: (err: any, data?: DescribeConnectorCommandOutput) => void): void;
            describeConnector(args: DescribeConnectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConnectorCommandOutput) => void): void;
            /**
                * <p>A summary description of the custom plugin.</p>
                */
            describeCustomPlugin(args: DescribeCustomPluginCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCustomPluginCommandOutput>;
            describeCustomPlugin(args: DescribeCustomPluginCommandInput, cb: (err: any, data?: DescribeCustomPluginCommandOutput) => void): void;
            describeCustomPlugin(args: DescribeCustomPluginCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCustomPluginCommandOutput) => void): void;
            /**
                * <p>Returns information about a worker configuration.</p>
                */
            describeWorkerConfiguration(args: DescribeWorkerConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkerConfigurationCommandOutput>;
            describeWorkerConfiguration(args: DescribeWorkerConfigurationCommandInput, cb: (err: any, data?: DescribeWorkerConfigurationCommandOutput) => void): void;
            describeWorkerConfiguration(args: DescribeWorkerConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkerConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns a list of all the connectors in this account and Region. The list is limited to
                *          connectors whose name starts with the specified prefix. The response also includes a
                *          description of each of the listed connectors.</p>
                */
            listConnectors(args: ListConnectorsCommandInput, options?: __HttpHandlerOptions): Promise<ListConnectorsCommandOutput>;
            listConnectors(args: ListConnectorsCommandInput, cb: (err: any, data?: ListConnectorsCommandOutput) => void): void;
            listConnectors(args: ListConnectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConnectorsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all of the custom plugins in this account and Region.</p>
                */
            listCustomPlugins(args: ListCustomPluginsCommandInput, options?: __HttpHandlerOptions): Promise<ListCustomPluginsCommandOutput>;
            listCustomPlugins(args: ListCustomPluginsCommandInput, cb: (err: any, data?: ListCustomPluginsCommandOutput) => void): void;
            listCustomPlugins(args: ListCustomPluginsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCustomPluginsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all of the worker configurations in this account and Region.</p>
                */
            listWorkerConfigurations(args: ListWorkerConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkerConfigurationsCommandOutput>;
            listWorkerConfigurations(args: ListWorkerConfigurationsCommandInput, cb: (err: any, data?: ListWorkerConfigurationsCommandOutput) => void): void;
            listWorkerConfigurations(args: ListWorkerConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkerConfigurationsCommandOutput) => void): void;
            /**
                * <p>Updates the specified connector.</p>
                */
            updateConnector(args: UpdateConnectorCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectorCommandOutput>;
            updateConnector(args: UpdateConnectorCommandInput, cb: (err: any, data?: UpdateConnectorCommandOutput) => void): void;
            updateConnector(args: UpdateConnectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectorCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateConnectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { CreateConnectorRequest, CreateConnectorResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface CreateConnectorCommandInput extends CreateConnectorRequest {
    }
    export interface CreateConnectorCommandOutput extends CreateConnectorResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a connector using the specified properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, CreateConnectorCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, CreateConnectorCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new CreateConnectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectorCommandInput} for command's `input` shape.
        * @see {@link CreateConnectorCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class CreateConnectorCommand extends $Command<CreateConnectorCommandInput, CreateConnectorCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: CreateConnectorCommandInput;
            constructor(input: CreateConnectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectorCommandInput, CreateConnectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateCustomPluginCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { CreateCustomPluginRequest, CreateCustomPluginResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface CreateCustomPluginCommandInput extends CreateCustomPluginRequest {
    }
    export interface CreateCustomPluginCommandOutput extends CreateCustomPluginResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a custom plugin using the specified properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, CreateCustomPluginCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, CreateCustomPluginCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new CreateCustomPluginCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCustomPluginCommandInput} for command's `input` shape.
        * @see {@link CreateCustomPluginCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class CreateCustomPluginCommand extends $Command<CreateCustomPluginCommandInput, CreateCustomPluginCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: CreateCustomPluginCommandInput;
            constructor(input: CreateCustomPluginCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCustomPluginCommandInput, CreateCustomPluginCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateWorkerConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { CreateWorkerConfigurationRequest, CreateWorkerConfigurationResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface CreateWorkerConfigurationCommandInput extends CreateWorkerConfigurationRequest {
    }
    export interface CreateWorkerConfigurationCommandOutput extends CreateWorkerConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a worker configuration using the specified properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, CreateWorkerConfigurationCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, CreateWorkerConfigurationCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new CreateWorkerConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkerConfigurationCommandInput} for command's `input` shape.
        * @see {@link CreateWorkerConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class CreateWorkerConfigurationCommand extends $Command<CreateWorkerConfigurationCommandInput, CreateWorkerConfigurationCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: CreateWorkerConfigurationCommandInput;
            constructor(input: CreateWorkerConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkerConfigurationCommandInput, CreateWorkerConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DeleteConnectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { DeleteConnectorRequest, DeleteConnectorResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface DeleteConnectorCommandInput extends DeleteConnectorRequest {
    }
    export interface DeleteConnectorCommandOutput extends DeleteConnectorResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified connector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, DeleteConnectorCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, DeleteConnectorCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new DeleteConnectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectorCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectorCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class DeleteConnectorCommand extends $Command<DeleteConnectorCommandInput, DeleteConnectorCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: DeleteConnectorCommandInput;
            constructor(input: DeleteConnectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectorCommandInput, DeleteConnectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DeleteCustomPluginCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { DeleteCustomPluginRequest, DeleteCustomPluginResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface DeleteCustomPluginCommandInput extends DeleteCustomPluginRequest {
    }
    export interface DeleteCustomPluginCommandOutput extends DeleteCustomPluginResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a custom plugin.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, DeleteCustomPluginCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, DeleteCustomPluginCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new DeleteCustomPluginCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCustomPluginCommandInput} for command's `input` shape.
        * @see {@link DeleteCustomPluginCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class DeleteCustomPluginCommand extends $Command<DeleteCustomPluginCommandInput, DeleteCustomPluginCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: DeleteCustomPluginCommandInput;
            constructor(input: DeleteCustomPluginCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCustomPluginCommandInput, DeleteCustomPluginCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeConnectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { DescribeConnectorRequest, DescribeConnectorResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface DescribeConnectorCommandInput extends DescribeConnectorRequest {
    }
    export interface DescribeConnectorCommandOutput extends DescribeConnectorResponse, __MetadataBearer {
    }
    /**
        * <p>Returns summary information about the connector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, DescribeConnectorCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, DescribeConnectorCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new DescribeConnectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConnectorCommandInput} for command's `input` shape.
        * @see {@link DescribeConnectorCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class DescribeConnectorCommand extends $Command<DescribeConnectorCommandInput, DescribeConnectorCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: DescribeConnectorCommandInput;
            constructor(input: DescribeConnectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConnectorCommandInput, DescribeConnectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeCustomPluginCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { DescribeCustomPluginRequest, DescribeCustomPluginResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface DescribeCustomPluginCommandInput extends DescribeCustomPluginRequest {
    }
    export interface DescribeCustomPluginCommandOutput extends DescribeCustomPluginResponse, __MetadataBearer {
    }
    /**
        * <p>A summary description of the custom plugin.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, DescribeCustomPluginCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, DescribeCustomPluginCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new DescribeCustomPluginCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCustomPluginCommandInput} for command's `input` shape.
        * @see {@link DescribeCustomPluginCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class DescribeCustomPluginCommand extends $Command<DescribeCustomPluginCommandInput, DescribeCustomPluginCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: DescribeCustomPluginCommandInput;
            constructor(input: DescribeCustomPluginCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCustomPluginCommandInput, DescribeCustomPluginCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeWorkerConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { DescribeWorkerConfigurationRequest, DescribeWorkerConfigurationResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface DescribeWorkerConfigurationCommandInput extends DescribeWorkerConfigurationRequest {
    }
    export interface DescribeWorkerConfigurationCommandOutput extends DescribeWorkerConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a worker configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, DescribeWorkerConfigurationCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, DescribeWorkerConfigurationCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new DescribeWorkerConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkerConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkerConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class DescribeWorkerConfigurationCommand extends $Command<DescribeWorkerConfigurationCommandInput, DescribeWorkerConfigurationCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: DescribeWorkerConfigurationCommandInput;
            constructor(input: DescribeWorkerConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkerConfigurationCommandInput, DescribeWorkerConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListConnectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { ListConnectorsRequest, ListConnectorsResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface ListConnectorsCommandInput extends ListConnectorsRequest {
    }
    export interface ListConnectorsCommandOutput extends ListConnectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all the connectors in this account and Region. The list is limited to
        *          connectors whose name starts with the specified prefix. The response also includes a
        *          description of each of the listed connectors.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, ListConnectorsCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, ListConnectorsCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new ListConnectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConnectorsCommandInput} for command's `input` shape.
        * @see {@link ListConnectorsCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class ListConnectorsCommand extends $Command<ListConnectorsCommandInput, ListConnectorsCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: ListConnectorsCommandInput;
            constructor(input: ListConnectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConnectorsCommandInput, ListConnectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListCustomPluginsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { ListCustomPluginsRequest, ListCustomPluginsResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface ListCustomPluginsCommandInput extends ListCustomPluginsRequest {
    }
    export interface ListCustomPluginsCommandOutput extends ListCustomPluginsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all of the custom plugins in this account and Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, ListCustomPluginsCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, ListCustomPluginsCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new ListCustomPluginsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCustomPluginsCommandInput} for command's `input` shape.
        * @see {@link ListCustomPluginsCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class ListCustomPluginsCommand extends $Command<ListCustomPluginsCommandInput, ListCustomPluginsCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: ListCustomPluginsCommandInput;
            constructor(input: ListCustomPluginsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCustomPluginsCommandInput, ListCustomPluginsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListWorkerConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { ListWorkerConfigurationsRequest, ListWorkerConfigurationsResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface ListWorkerConfigurationsCommandInput extends ListWorkerConfigurationsRequest {
    }
    export interface ListWorkerConfigurationsCommandOutput extends ListWorkerConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all of the worker configurations in this account and Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, ListWorkerConfigurationsCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, ListWorkerConfigurationsCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new ListWorkerConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkerConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListWorkerConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class ListWorkerConfigurationsCommand extends $Command<ListWorkerConfigurationsCommandInput, ListWorkerConfigurationsCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: ListWorkerConfigurationsCommandInput;
            constructor(input: ListWorkerConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkerConfigurationsCommandInput, ListWorkerConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/UpdateConnectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient";
    import { UpdateConnectorRequest, UpdateConnectorResponse } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0";
    export interface UpdateConnectorCommandInput extends UpdateConnectorRequest {
    }
    export interface UpdateConnectorCommandOutput extends UpdateConnectorResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified connector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaConnectClient, UpdateConnectorCommand } from "@aws-sdk/client-kafkaconnect"; // ES Modules import
        * // const { KafkaConnectClient, UpdateConnectorCommand } = require("@aws-sdk/client-kafkaconnect"); // CommonJS import
        * const client = new KafkaConnectClient(config);
        * const command = new UpdateConnectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectorCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectorCommandOutput} for command's `response` shape.
        * @see {@link KafkaConnectClientResolvedConfig | config} for KafkaConnectClient's `config` shape.
        *
        */
    export class UpdateConnectorCommand extends $Command<UpdateConnectorCommandInput, UpdateConnectorCommandOutput, KafkaConnectClientResolvedConfig> {
            readonly input: UpdateConnectorCommandInput;
            constructor(input: UpdateConnectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectorCommandInput, UpdateConnectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/KafkaConnectClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateConnectorCommandInput, CreateConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateConnectorCommand";
    import { CreateCustomPluginCommandInput, CreateCustomPluginCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateCustomPluginCommand";
    import { CreateWorkerConfigurationCommandInput, CreateWorkerConfigurationCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/CreateWorkerConfigurationCommand";
    import { DeleteConnectorCommandInput, DeleteConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DeleteConnectorCommand";
    import { DeleteCustomPluginCommandInput, DeleteCustomPluginCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DeleteCustomPluginCommand";
    import { DescribeConnectorCommandInput, DescribeConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeConnectorCommand";
    import { DescribeCustomPluginCommandInput, DescribeCustomPluginCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeCustomPluginCommand";
    import { DescribeWorkerConfigurationCommandInput, DescribeWorkerConfigurationCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/DescribeWorkerConfigurationCommand";
    import { ListConnectorsCommandInput, ListConnectorsCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListConnectorsCommand";
    import { ListCustomPluginsCommandInput, ListCustomPluginsCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListCustomPluginsCommand";
    import { ListWorkerConfigurationsCommandInput, ListWorkerConfigurationsCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/ListWorkerConfigurationsCommand";
    import { UpdateConnectorCommandInput, UpdateConnectorCommandOutput } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/commands/UpdateConnectorCommand";
    export type ServiceInputTypes = CreateConnectorCommandInput | CreateCustomPluginCommandInput | CreateWorkerConfigurationCommandInput | DeleteConnectorCommandInput | DeleteCustomPluginCommandInput | DescribeConnectorCommandInput | DescribeCustomPluginCommandInput | DescribeWorkerConfigurationCommandInput | ListConnectorsCommandInput | ListCustomPluginsCommandInput | ListWorkerConfigurationsCommandInput | UpdateConnectorCommandInput;
    export type ServiceOutputTypes = CreateConnectorCommandOutput | CreateCustomPluginCommandOutput | CreateWorkerConfigurationCommandOutput | DeleteConnectorCommandOutput | DeleteCustomPluginCommandOutput | DescribeConnectorCommandOutput | DescribeCustomPluginCommandOutput | DescribeWorkerConfigurationCommandOutput | ListConnectorsCommandOutput | ListCustomPluginsCommandOutput | ListWorkerConfigurationsCommandOutput | UpdateConnectorCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type KafkaConnectClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of KafkaConnectClient class constructor that set the region, credentials and other options.
        */
    export interface KafkaConnectClientConfig extends KafkaConnectClientConfigType {
    }
    type KafkaConnectClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of KafkaConnectClient class. This is resolved and normalized from the {@link KafkaConnectClientConfig | constructor configuration interface}.
        */
    export interface KafkaConnectClientResolvedConfig extends KafkaConnectClientResolvedConfigType {
    }
    /**
        * <p/>
        */
    export class KafkaConnectClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, KafkaConnectClientResolvedConfig> {
            /**
                * The resolved configuration of KafkaConnectClient class. This is resolved and normalized from the {@link KafkaConnectClientConfig | constructor configuration interface}.
                */
            readonly config: KafkaConnectClientResolvedConfig;
            constructor(configuration: KafkaConnectClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { KafkaConnectServiceException as __BaseException } from "@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/KafkaConnectServiceException";
    /**
        * <p>The description of the scale-in policy for the connector.</p>
        */
    export interface ScaleInPolicyDescription {
            /**
                * <p>Specifies the CPU utilization percentage threshold at which you want connector scale in
                *          to be triggered.</p>
                */
            cpuUtilizationPercentage?: number;
    }
    export namespace ScaleInPolicyDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScaleInPolicyDescription) => any;
    }
    /**
        * <p>The description of the scale-out policy for the connector.</p>
        */
    export interface ScaleOutPolicyDescription {
            /**
                * <p>The CPU utilization percentage threshold at which you want connector scale out to be
                *          triggered.</p>
                */
            cpuUtilizationPercentage?: number;
    }
    export namespace ScaleOutPolicyDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScaleOutPolicyDescription) => any;
    }
    /**
        * <p>Information about the auto scaling parameters for the connector.</p>
        */
    export interface AutoScalingDescription {
            /**
                * <p>The maximum number of workers allocated to the connector.</p>
                */
            maxWorkerCount?: number;
            /**
                * <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid
                *          values are 1,2,4,8.</p>
                */
            mcuCount?: number;
            /**
                * <p>The minimum number of workers allocated to the connector.</p>
                */
            minWorkerCount?: number;
            /**
                * <p>The sacle-in policy for the connector.</p>
                */
            scaleInPolicy?: ScaleInPolicyDescription;
            /**
                * <p>The sacle-out policy for the connector.&gt;</p>
                */
            scaleOutPolicy?: ScaleOutPolicyDescription;
    }
    export namespace AutoScalingDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoScalingDescription) => any;
    }
    /**
        * <p>The description of a connector's provisioned capacity.</p>
        */
    export interface ProvisionedCapacityDescription {
            /**
                * <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid
                *          values are 1,2,4,8.</p>
                */
            mcuCount?: number;
            /**
                * <p>The number of workers that are allocated to the connector.</p>
                */
            workerCount?: number;
    }
    export namespace ProvisionedCapacityDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionedCapacityDescription) => any;
    }
    /**
        * <p>A description of the connector's capacity.</p>
        */
    export interface CapacityDescription {
            /**
                * <p>Describes the connector's auto scaling capacity.</p>
                */
            autoScaling?: AutoScalingDescription;
            /**
                * <p>Describes a connector's provisioned capacity.</p>
                */
            provisionedCapacity?: ProvisionedCapacityDescription;
    }
    export namespace CapacityDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CapacityDescription) => any;
    }
    export enum ConnectorState {
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            UPDATING = "UPDATING"
    }
    /**
        * <p>The description of the VPC in which the connector resides.</p>
        */
    export interface VpcDescription {
            /**
                * <p>The security groups for the connector.</p>
                */
            securityGroups?: string[];
            /**
                * <p>The subnets for the connector.</p>
                */
            subnets?: string[];
    }
    export namespace VpcDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcDescription) => any;
    }
    /**
        * <p>The description of the Apache Kafka cluster to which the connector is connected.</p>
        */
    export interface ApacheKafkaClusterDescription {
            /**
                * <p>The bootstrap servers of the cluster.</p>
                */
            bootstrapServers?: string;
            /**
                * <p>Details of an Amazon VPC which has network connectivity to the Apache Kafka
                *          cluster.</p>
                */
            vpc?: VpcDescription;
    }
    export namespace ApacheKafkaClusterDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApacheKafkaClusterDescription) => any;
    }
    /**
        * <p>Details of how to connect to the Apache Kafka cluster.</p>
        */
    export interface KafkaClusterDescription {
            /**
                * <p>The Apache Kafka cluster to which the connector is connected.</p>
                */
            apacheKafkaCluster?: ApacheKafkaClusterDescription;
    }
    export namespace KafkaClusterDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaClusterDescription) => any;
    }
    export enum KafkaClusterClientAuthenticationType {
            IAM = "IAM",
            NONE = "NONE"
    }
    /**
        * <p>The client authentication information used in order to authenticate with the Apache
        *          Kafka cluster.</p>
        */
    export interface KafkaClusterClientAuthenticationDescription {
            /**
                * <p>The type of client authentication used to connect to the Apache Kafka cluster. Value
                *          NONE means that no client authentication is used.</p>
                */
            authenticationType?: KafkaClusterClientAuthenticationType | string;
    }
    export namespace KafkaClusterClientAuthenticationDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaClusterClientAuthenticationDescription) => any;
    }
    export enum KafkaClusterEncryptionInTransitType {
            PLAINTEXT = "PLAINTEXT",
            TLS = "TLS"
    }
    /**
        * <p>The description of the encryption in transit to the Apache Kafka cluster.</p>
        */
    export interface KafkaClusterEncryptionInTransitDescription {
            /**
                * <p>The type of encryption in transit to the Apache Kafka cluster.</p>
                */
            encryptionType?: KafkaClusterEncryptionInTransitType | string;
    }
    export namespace KafkaClusterEncryptionInTransitDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaClusterEncryptionInTransitDescription) => any;
    }
    /**
        * <p>A description of the log delivery settings.</p>
        */
    export interface CloudWatchLogsLogDeliveryDescription {
            /**
                * <p>Whether log delivery to Amazon CloudWatch Logs is enabled.</p>
                */
            enabled?: boolean;
            /**
                * <p>The name of the CloudWatch log group that is the destination for log delivery.</p>
                */
            logGroup?: string;
    }
    export namespace CloudWatchLogsLogDeliveryDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchLogsLogDeliveryDescription) => any;
    }
    /**
        * <p>A description of the settings for delivering logs to Amazon Kinesis Data
        *          Firehose.</p>
        */
    export interface FirehoseLogDeliveryDescription {
            /**
                * <p>The name of the Kinesis Data Firehose delivery stream that is the destination for log
                *          delivery.</p>
                */
            deliveryStream?: string;
            /**
                * <p>Specifies whether connector logs get delivered to Amazon Kinesis Data Firehose.</p>
                */
            enabled?: boolean;
    }
    export namespace FirehoseLogDeliveryDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirehoseLogDeliveryDescription) => any;
    }
    /**
        * <p>The description of the details about delivering logs to Amazon S3.</p>
        */
    export interface S3LogDeliveryDescription {
            /**
                * <p>The name of the S3 bucket that is the destination for log delivery.</p>
                */
            bucket?: string;
            /**
                * <p>Specifies whether connector logs get sent to the specified Amazon S3 destination.</p>
                */
            enabled?: boolean;
            /**
                * <p>The S3 prefix that is the destination for log delivery.</p>
                */
            prefix?: string;
    }
    export namespace S3LogDeliveryDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3LogDeliveryDescription) => any;
    }
    /**
        * <p>Workers can send worker logs to different destination types. This configuration
        *          specifies the details of these destinations.</p>
        */
    export interface WorkerLogDeliveryDescription {
            /**
                * <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
                */
            cloudWatchLogs?: CloudWatchLogsLogDeliveryDescription;
            /**
                * <p>Details about delivering logs to Amazon Kinesis Data Firehose.</p>
                */
            firehose?: FirehoseLogDeliveryDescription;
            /**
                * <p>Details about delivering logs to Amazon S3.</p>
                */
            s3?: S3LogDeliveryDescription;
    }
    export namespace WorkerLogDeliveryDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerLogDeliveryDescription) => any;
    }
    /**
        * <p>The description of the log delivery settings.</p>
        */
    export interface LogDeliveryDescription {
            /**
                * <p>The workers can send worker logs to different destination types. This configuration
                *          specifies the details of these destinations.</p>
                */
            workerLogDelivery?: WorkerLogDeliveryDescription;
    }
    export namespace LogDeliveryDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogDeliveryDescription) => any;
    }
    /**
        * <p>Details about a custom plugin.</p>
        */
    export interface CustomPluginDescription {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
                */
            customPluginArn?: string;
            /**
                * <p>The revision of the custom plugin.</p>
                */
            revision?: number;
    }
    export namespace CustomPluginDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPluginDescription) => any;
    }
    /**
        * <p>The description of the plugin.</p>
        */
    export interface PluginDescription {
            /**
                * <p>Details about a custom plugin.</p>
                */
            customPlugin?: CustomPluginDescription;
    }
    export namespace PluginDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PluginDescription) => any;
    }
    /**
        * <p>The description of the worker configuration.</p>
        */
    export interface WorkerConfigurationDescription {
            /**
                * <p>The revision of the worker configuration.</p>
                */
            revision?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the worker configuration.</p>
                */
            workerConfigurationArn?: string;
    }
    export namespace WorkerConfigurationDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerConfigurationDescription) => any;
    }
    /**
        * <p>Summary of a connector.</p>
        */
    export interface ConnectorSummary {
            /**
                * <p>The connector's compute capacity settings.</p>
                */
            capacity?: CapacityDescription;
            /**
                * <p>The Amazon Resource Name (ARN) of the connector.</p>
                */
            connectorArn?: string;
            /**
                * <p>The description of the connector.</p>
                */
            connectorDescription?: string;
            /**
                * <p>The name of the connector.</p>
                */
            connectorName?: string;
            /**
                * <p>The state of the connector.</p>
                */
            connectorState?: ConnectorState | string;
            /**
                * <p>The time that the connector was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The current version of the connector.</p>
                */
            currentVersion?: string;
            /**
                * <p>The details of the Apache Kafka cluster to which the connector is connected.</p>
                */
            kafkaCluster?: KafkaClusterDescription;
            /**
                * <p>The type of client authentication used to connect to the Apache Kafka cluster. The value
                *          is NONE when no client authentication is used.</p>
                */
            kafkaClusterClientAuthentication?: KafkaClusterClientAuthenticationDescription;
            /**
                * <p>Details of encryption in transit to the Apache Kafka cluster.</p>
                */
            kafkaClusterEncryptionInTransit?: KafkaClusterEncryptionInTransitDescription;
            /**
                * <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka
                *          cluster's version and the plugins.</p>
                */
            kafkaConnectVersion?: string;
            /**
                * <p>The settings for delivering connector logs to Amazon CloudWatch Logs.</p>
                */
            logDelivery?: LogDeliveryDescription;
            /**
                * <p>Specifies which plugins were used for this connector.</p>
                */
            plugins?: PluginDescription[];
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon
                *          Web Services resources.</p>
                */
            serviceExecutionRoleArn?: string;
            /**
                * <p>The worker configurations that are in use with the connector.</p>
                */
            workerConfiguration?: WorkerConfigurationDescription;
    }
    export namespace ConnectorSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectorSummary) => any;
    }
    export enum CustomPluginState {
            ACTIVE = "ACTIVE",
            CREATE_FAILED = "CREATE_FAILED",
            CREATING = "CREATING",
            DELETING = "DELETING",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATING = "UPDATING"
    }
    export enum CustomPluginContentType {
            JAR = "JAR",
            ZIP = "ZIP"
    }
    /**
        * <p>Details about a custom plugin file.</p>
        */
    export interface CustomPluginFileDescription {
            /**
                * <p>The hex-encoded MD5 checksum of the custom plugin file. You can use it to validate the
                *          file.</p>
                */
            fileMd5?: string;
            /**
                * <p>The size in bytes of the custom plugin file. You can use it to validate the file.</p>
                */
            fileSize?: number;
    }
    export namespace CustomPluginFileDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPluginFileDescription) => any;
    }
    /**
        * <p>The description of the location of an object in Amazon S3.</p>
        */
    export interface S3LocationDescription {
            /**
                * <p>The Amazon Resource Name (ARN) of an S3 bucket.</p>
                */
            bucketArn?: string;
            /**
                * <p>The file key for an object in an S3 bucket.</p>
                */
            fileKey?: string;
            /**
                * <p>The version of an object in an S3 bucket.</p>
                */
            objectVersion?: string;
    }
    export namespace S3LocationDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3LocationDescription) => any;
    }
    /**
        * <p>Information about the location of a custom plugin.</p>
        */
    export interface CustomPluginLocationDescription {
            /**
                * <p>The S3 bucket Amazon Resource Name (ARN), file key, and object version of the plugin
                *          file stored in Amazon S3.</p>
                */
            s3Location?: S3LocationDescription;
    }
    export namespace CustomPluginLocationDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPluginLocationDescription) => any;
    }
    /**
        * <p>Details about the revision of a custom plugin.</p>
        */
    export interface CustomPluginRevisionSummary {
            /**
                * <p>The format of the plugin file.</p>
                */
            contentType?: CustomPluginContentType | string;
            /**
                * <p>The time that the custom plugin was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The description of the custom plugin.</p>
                */
            description?: string;
            /**
                * <p>Details about the custom plugin file.</p>
                */
            fileDescription?: CustomPluginFileDescription;
            /**
                * <p>Information about the location of the custom plugin.</p>
                */
            location?: CustomPluginLocationDescription;
            /**
                * <p>The revision of the custom plugin.</p>
                */
            revision?: number;
    }
    export namespace CustomPluginRevisionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPluginRevisionSummary) => any;
    }
    /**
        * <p>A summary of the custom plugin.</p>
        */
    export interface CustomPluginSummary {
            /**
                * <p>The time that the custom plugin was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
                */
            customPluginArn?: string;
            /**
                * <p>The state of the custom plugin.</p>
                */
            customPluginState?: CustomPluginState | string;
            /**
                * <p>A description of the custom plugin.</p>
                */
            description?: string;
            /**
                * <p>The latest revision of the custom plugin.</p>
                */
            latestRevision?: CustomPluginRevisionSummary;
            /**
                * <p>The name of the custom plugin.</p>
                */
            name?: string;
    }
    export namespace CustomPluginSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPluginSummary) => any;
    }
    /**
        * <p>A plugin is an AWS resource that contains the code that defines a connector's
        *          logic.</p>
        */
    export interface CustomPlugin {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
                */
            customPluginArn: string | undefined;
            /**
                * <p>The revision of the custom plugin.</p>
                */
            revision: number | undefined;
    }
    export namespace CustomPlugin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPlugin) => any;
    }
    /**
        * <p>A plugin is an AWS resource that contains the code that defines your connector logic.
        *       </p>
        */
    export interface Plugin {
            /**
                * <p>Details about a custom plugin.</p>
                */
            customPlugin: CustomPlugin | undefined;
    }
    export namespace Plugin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Plugin) => any;
    }
    /**
        * <p>The summary of a worker configuration revision.</p>
        */
    export interface WorkerConfigurationRevisionSummary {
            /**
                * <p>The time that a worker configuration revision was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The description of a worker configuration revision.</p>
                */
            description?: string;
            /**
                * <p>The revision of a worker configuration.</p>
                */
            revision?: number;
    }
    export namespace WorkerConfigurationRevisionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerConfigurationRevisionSummary) => any;
    }
    /**
        * <p>The summary of a worker configuration.</p>
        */
    export interface WorkerConfigurationSummary {
            /**
                * <p>The time that a worker configuration was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The description of a worker configuration.</p>
                */
            description?: string;
            /**
                * <p>The latest revision of a worker configuration.</p>
                */
            latestRevision?: WorkerConfigurationRevisionSummary;
            /**
                * <p>The name of the worker configuration.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the worker configuration.</p>
                */
            workerConfigurationArn?: string;
    }
    export namespace WorkerConfigurationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerConfigurationSummary) => any;
    }
    /**
        * <p>Information about the VPC in which the connector resides.</p>
        */
    export interface Vpc {
            /**
                * <p>The security groups for the connector.</p>
                */
            securityGroups?: string[];
            /**
                * <p>The subnets for the connector.</p>
                */
            subnets: string[] | undefined;
    }
    export namespace Vpc {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Vpc) => any;
    }
    /**
        * <p>The details of the Apache Kafka cluster to which the connector is connected.</p>
        */
    export interface ApacheKafkaCluster {
            /**
                * <p>The bootstrap servers of the cluster.</p>
                */
            bootstrapServers: string | undefined;
            /**
                * <p>Details of an Amazon VPC which has network connectivity to the Apache Kafka
                *          cluster.</p>
                */
            vpc: Vpc | undefined;
    }
    export namespace ApacheKafkaCluster {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApacheKafkaCluster) => any;
    }
    /**
        * <p>The scale-in policy for the connector.</p>
        */
    export interface ScaleInPolicy {
            /**
                * <p>Specifies the CPU utilization percentage threshold at which you want connector scale in
                *          to be triggered.</p>
                */
            cpuUtilizationPercentage: number | undefined;
    }
    export namespace ScaleInPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScaleInPolicy) => any;
    }
    /**
        * <p>The scale-out policy for the connector.</p>
        */
    export interface ScaleOutPolicy {
            /**
                * <p>The CPU utilization percentage threshold at which you want connector scale out to be
                *          triggered.</p>
                */
            cpuUtilizationPercentage: number | undefined;
    }
    export namespace ScaleOutPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScaleOutPolicy) => any;
    }
    /**
        * <p>Specifies how the connector scales.</p>
        */
    export interface AutoScaling {
            /**
                * <p>The maximum number of workers allocated to the connector.</p>
                */
            maxWorkerCount: number | undefined;
            /**
                * <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid
                *          values are 1,2,4,8.</p>
                */
            mcuCount: number | undefined;
            /**
                * <p>The minimum number of workers allocated to the connector.</p>
                */
            minWorkerCount: number | undefined;
            /**
                * <p>The sacle-in policy for the connector.</p>
                */
            scaleInPolicy?: ScaleInPolicy;
            /**
                * <p>The sacle-out policy for the connector.</p>
                */
            scaleOutPolicy?: ScaleOutPolicy;
    }
    export namespace AutoScaling {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoScaling) => any;
    }
    /**
        * <p>An update to the connector's scale-in policy.</p>
        */
    export interface ScaleInPolicyUpdate {
            /**
                * <p>The target CPU utilization percentage threshold at which you want connector scale in to
                *          be triggered.</p>
                */
            cpuUtilizationPercentage: number | undefined;
    }
    export namespace ScaleInPolicyUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScaleInPolicyUpdate) => any;
    }
    /**
        * <p>An update to the connector's scale-out policy.</p>
        */
    export interface ScaleOutPolicyUpdate {
            /**
                * <p>The target CPU utilization percentage threshold at which you want connector scale out to
                *          be triggered.</p>
                */
            cpuUtilizationPercentage: number | undefined;
    }
    export namespace ScaleOutPolicyUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScaleOutPolicyUpdate) => any;
    }
    /**
        * <p>The updates to the auto scaling parameters for the connector.</p>
        */
    export interface AutoScalingUpdate {
            /**
                * <p>The target maximum number of workers allocated to the connector.</p>
                */
            maxWorkerCount: number | undefined;
            /**
                * <p>The target number of microcontroller units (MCUs) allocated to each connector worker.
                *          The valid values are 1,2,4,8.</p>
                */
            mcuCount: number | undefined;
            /**
                * <p>The target minimum number of workers allocated to the connector.</p>
                */
            minWorkerCount: number | undefined;
            /**
                * <p>The target sacle-in policy for the connector.</p>
                */
            scaleInPolicy: ScaleInPolicyUpdate | undefined;
            /**
                * <p>The target sacle-out policy for the connector.</p>
                */
            scaleOutPolicy: ScaleOutPolicyUpdate | undefined;
    }
    export namespace AutoScalingUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoScalingUpdate) => any;
    }
    /**
        * <p>HTTP Status Code 400: Bad request due to incorrect input. Correct your request and then
        *          retry it.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>Details about a connector's provisioned capacity.</p>
        */
    export interface ProvisionedCapacity {
            /**
                * <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid
                *          values are 1,2,4,8.</p>
                */
            mcuCount: number | undefined;
            /**
                * <p>The number of workers that are allocated to the connector.</p>
                */
            workerCount: number | undefined;
    }
    export namespace ProvisionedCapacity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionedCapacity) => any;
    }
    /**
        * <p>Information about the capacity of the connector, whether it is auto scaled or
        *          provisioned.</p>
        */
    export interface Capacity {
            /**
                * <p>Information about the auto scaling parameters for the connector.</p>
                */
            autoScaling?: AutoScaling;
            /**
                * <p>Details about a fixed capacity allocated to a connector.</p>
                */
            provisionedCapacity?: ProvisionedCapacity;
    }
    export namespace Capacity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Capacity) => any;
    }
    /**
        * <p>An update to a connector's fixed capacity.</p>
        */
    export interface ProvisionedCapacityUpdate {
            /**
                * <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid
                *          values are 1,2,4,8.</p>
                */
            mcuCount: number | undefined;
            /**
                * <p>The number of workers that are allocated to the connector.</p>
                */
            workerCount: number | undefined;
    }
    export namespace ProvisionedCapacityUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionedCapacityUpdate) => any;
    }
    /**
        * <p>The target capacity for the connector. The capacity can be auto scaled or
        *          provisioned.</p>
        */
    export interface CapacityUpdate {
            /**
                * <p>The target auto scaling setting.</p>
                */
            autoScaling?: AutoScalingUpdate;
            /**
                * <p>The target settings for provisioned capacity.</p>
                */
            provisionedCapacity?: ProvisionedCapacityUpdate;
    }
    export namespace CapacityUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CapacityUpdate) => any;
    }
    /**
        * <p>The settings for delivering connector logs to Amazon CloudWatch Logs.</p>
        */
    export interface CloudWatchLogsLogDelivery {
            /**
                * <p>Whether log delivery to Amazon CloudWatch Logs is enabled.</p>
                */
            enabled: boolean | undefined;
            /**
                * <p>The name of the CloudWatch log group that is the destination for log delivery.</p>
                */
            logGroup?: string;
    }
    export namespace CloudWatchLogsLogDelivery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchLogsLogDelivery) => any;
    }
    /**
        * <p>HTTP Status Code 409: Conflict. A resource with this name already exists. Retry your
        *          request with another name.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The details of the Apache Kafka cluster to which the connector is connected.</p>
        */
    export interface KafkaCluster {
            /**
                * <p>The Apache Kafka cluster to which the connector is connected.</p>
                */
            apacheKafkaCluster: ApacheKafkaCluster | undefined;
    }
    export namespace KafkaCluster {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaCluster) => any;
    }
    /**
        * <p>The client authentication information used in order to authenticate with the Apache
        *          Kafka cluster.</p>
        */
    export interface KafkaClusterClientAuthentication {
            /**
                * <p>The type of client authentication used to connect to the Apache Kafka cluster. Value
                *          NONE means that no client authentication is used.</p>
                */
            authenticationType: KafkaClusterClientAuthenticationType | string | undefined;
    }
    export namespace KafkaClusterClientAuthentication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaClusterClientAuthentication) => any;
    }
    /**
        * <p>Details of encryption in transit to the Apache Kafka cluster.</p>
        */
    export interface KafkaClusterEncryptionInTransit {
            /**
                * <p>The type of encryption in transit to the Apache Kafka cluster.</p>
                */
            encryptionType: KafkaClusterEncryptionInTransitType | string | undefined;
    }
    export namespace KafkaClusterEncryptionInTransit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaClusterEncryptionInTransit) => any;
    }
    /**
        * <p>The settings for delivering logs to Amazon Kinesis Data Firehose.</p>
        */
    export interface FirehoseLogDelivery {
            /**
                * <p>The name of the Kinesis Data Firehose delivery stream that is the destination for log
                *          delivery.</p>
                */
            deliveryStream?: string;
            /**
                * <p>Specifies whether connector logs get delivered to Amazon Kinesis Data Firehose.</p>
                */
            enabled: boolean | undefined;
    }
    export namespace FirehoseLogDelivery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirehoseLogDelivery) => any;
    }
    /**
        * <p>Details about delivering logs to Amazon S3.</p>
        */
    export interface S3LogDelivery {
            /**
                * <p>The name of the S3 bucket that is the destination for log delivery.</p>
                */
            bucket?: string;
            /**
                * <p>Specifies whether connector logs get sent to the specified Amazon S3 destination.</p>
                */
            enabled: boolean | undefined;
            /**
                * <p>The S3 prefix that is the destination for log delivery.</p>
                */
            prefix?: string;
    }
    export namespace S3LogDelivery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3LogDelivery) => any;
    }
    /**
        * <p>Workers can send worker logs to different destination types. This configuration
        *          specifies the details of these destinations.</p>
        */
    export interface WorkerLogDelivery {
            /**
                * <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
                */
            cloudWatchLogs?: CloudWatchLogsLogDelivery;
            /**
                * <p>Details about delivering logs to Amazon Kinesis Data Firehose.</p>
                */
            firehose?: FirehoseLogDelivery;
            /**
                * <p>Details about delivering logs to Amazon S3.</p>
                */
            s3?: S3LogDelivery;
    }
    export namespace WorkerLogDelivery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerLogDelivery) => any;
    }
    /**
        * <p>Details about log delivery.</p>
        */
    export interface LogDelivery {
            /**
                * <p>The workers can send worker logs to different destination types. This configuration
                *          specifies the details of these destinations.</p>
                */
            workerLogDelivery: WorkerLogDelivery | undefined;
    }
    export namespace LogDelivery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogDelivery) => any;
    }
    /**
        * <p>The configuration of the workers, which are the processes that run the connector
        *          logic.</p>
        */
    export interface WorkerConfiguration {
            /**
                * <p>The revision of the worker configuration.</p>
                */
            revision: number | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the worker configuration.</p>
                */
            workerConfigurationArn: string | undefined;
    }
    export namespace WorkerConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerConfiguration) => any;
    }
    export interface CreateConnectorRequest {
            /**
                * <p>Information about the capacity allocated to the connector. Exactly one of the two
                *          properties must be specified.</p>
                */
            capacity: Capacity | undefined;
            /**
                * <p>A map of keys to values that represent the configuration for the connector.</p>
                */
            connectorConfiguration: Record<string, string> | undefined;
            /**
                * <p>A summary description of the connector.</p>
                */
            connectorDescription?: string;
            /**
                * <p>The name of the connector.</p>
                */
            connectorName: string | undefined;
            /**
                * <p>Specifies which Apache Kafka cluster to connect to.</p>
                */
            kafkaCluster: KafkaCluster | undefined;
            /**
                * <p>Details of the client authentication used by the Apache Kafka cluster.</p>
                */
            kafkaClusterClientAuthentication: KafkaClusterClientAuthentication | undefined;
            /**
                * <p>Details of encryption in transit to the Apache Kafka cluster.</p>
                */
            kafkaClusterEncryptionInTransit: KafkaClusterEncryptionInTransit | undefined;
            /**
                * <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka
                *          cluster's version and the plugins.</p>
                */
            kafkaConnectVersion: string | undefined;
            /**
                * <p>Details about log delivery.</p>
                */
            logDelivery?: LogDelivery;
            /**
                * <p>Specifies which plugins to use for the connector.</p>
                */
            plugins: Plugin[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access the
                *          Amazon Web Services resources that it needs. The types of resources depends on the logic of
                *          the connector. For example, a connector that has Amazon S3 as a destination must have
                *          permissions that allow it to write to the S3 destination bucket.</p>
                */
            serviceExecutionRoleArn: string | undefined;
            /**
                * <p>Specifies which worker configuration to use with the connector.</p>
                */
            workerConfiguration?: WorkerConfiguration;
    }
    export namespace CreateConnectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectorRequest) => any;
    }
    export interface CreateConnectorResponse {
            /**
                * <p>The Amazon Resource Name (ARN) that Amazon assigned to the connector.</p>
                */
            connectorArn?: string;
            /**
                * <p>The name of the connector.</p>
                */
            connectorName?: string;
            /**
                * <p>The state of the connector.</p>
                */
            connectorState?: ConnectorState | string;
    }
    export namespace CreateConnectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectorResponse) => any;
    }
    /**
        * <p>HTTP Status Code 403: Access forbidden. Correct your credentials and then retry your
        *          request.</p>
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * <p>HTTP Status Code 500: Unexpected internal server error. Retrying your request might
        *          resolve the issue.</p>
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    /**
        * <p>HTTP Status Code 404: Resource not found due to incorrect input. Correct your request
        *          and then retry it.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>HTTP Status Code 503: Service Unavailable. Retrying your request in some time might
        *          resolve the issue.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * <p>HTTP Status Code 429: Limit exceeded. Resource limit reached.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>HTTP Status Code 401: Unauthorized request. The provided credentials couldn't be
        *          validated.</p>
        */
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    /**
        * <p>The location of an object in Amazon S3.</p>
        */
    export interface S3Location {
            /**
                * <p>The Amazon Resource Name (ARN) of an S3 bucket.</p>
                */
            bucketArn: string | undefined;
            /**
                * <p>The file key for an object in an S3 bucket.</p>
                */
            fileKey: string | undefined;
            /**
                * <p>The version of an object in an S3 bucket.</p>
                */
            objectVersion?: string;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    /**
        * <p>Information about the location of a custom plugin.</p>
        */
    export interface CustomPluginLocation {
            /**
                * <p>The S3 bucket Amazon Resource Name (ARN), file key, and object version of the plugin
                *          file stored in Amazon S3.</p>
                */
            s3Location: S3Location | undefined;
    }
    export namespace CustomPluginLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPluginLocation) => any;
    }
    export interface CreateCustomPluginRequest {
            /**
                * <p>The type of the plugin file.</p>
                */
            contentType: CustomPluginContentType | string | undefined;
            /**
                * <p>A summary description of the custom plugin.</p>
                */
            description?: string;
            /**
                * <p>Information about the location of a custom plugin.</p>
                */
            location: CustomPluginLocation | undefined;
            /**
                * <p>The name of the custom plugin.</p>
                */
            name: string | undefined;
    }
    export namespace CreateCustomPluginRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomPluginRequest) => any;
    }
    export interface CreateCustomPluginResponse {
            /**
                * <p>The Amazon Resource Name (ARN) that Amazon assigned to the custom plugin.</p>
                */
            customPluginArn?: string;
            /**
                * <p>The state of the custom plugin.</p>
                */
            customPluginState?: CustomPluginState | string;
            /**
                * <p>The name of the custom plugin.</p>
                */
            name?: string;
            /**
                * <p>The revision of the custom plugin.</p>
                */
            revision?: number;
    }
    export namespace CreateCustomPluginResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomPluginResponse) => any;
    }
    export interface CreateWorkerConfigurationRequest {
            /**
                * <p>A summary description of the worker configuration.</p>
                */
            description?: string;
            /**
                * <p>The name of the worker configuration.</p>
                */
            name: string | undefined;
            /**
                * <p>Base64 encoded contents of connect-distributed.properties file.</p>
                */
            propertiesFileContent: string | undefined;
    }
    export namespace CreateWorkerConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkerConfigurationRequest) => any;
    }
    export interface CreateWorkerConfigurationResponse {
            /**
                * <p>The time that the worker configuration was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The latest revision of the worker configuration.</p>
                */
            latestRevision?: WorkerConfigurationRevisionSummary;
            /**
                * <p>The name of the worker configuration.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that Amazon assigned to the worker configuration.</p>
                */
            workerConfigurationArn?: string;
    }
    export namespace CreateWorkerConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkerConfigurationResponse) => any;
    }
    export interface DeleteConnectorRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the connector that you want to delete.</p>
                */
            connectorArn: string | undefined;
            /**
                * <p>The current version of the connector that you want to delete.</p>
                */
            currentVersion?: string;
    }
    export namespace DeleteConnectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectorRequest) => any;
    }
    export interface DeleteConnectorResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the connector that you requested to delete.</p>
                */
            connectorArn?: string;
            /**
                * <p>The state of the connector that you requested to delete.</p>
                */
            connectorState?: ConnectorState | string;
    }
    export namespace DeleteConnectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectorResponse) => any;
    }
    export interface DeleteCustomPluginRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom plugin that you want to delete.</p>
                */
            customPluginArn: string | undefined;
    }
    export namespace DeleteCustomPluginRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomPluginRequest) => any;
    }
    export interface DeleteCustomPluginResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom plugin that you requested to delete.</p>
                */
            customPluginArn?: string;
            /**
                * <p>The state of the custom plugin.</p>
                */
            customPluginState?: CustomPluginState | string;
    }
    export namespace DeleteCustomPluginResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomPluginResponse) => any;
    }
    export interface DescribeConnectorRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the connector that you want to describe.</p>
                */
            connectorArn: string | undefined;
    }
    export namespace DescribeConnectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectorRequest) => any;
    }
    /**
        * <p>Details about the state of a resource.</p>
        */
    export interface StateDescription {
            /**
                * <p>A code that describes the state of a resource.</p>
                */
            code?: string;
            /**
                * <p>A message that describes the state of a resource.</p>
                */
            message?: string;
    }
    export namespace StateDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StateDescription) => any;
    }
    export interface DescribeConnectorResponse {
            /**
                * <p>Information about the capacity of the connector, whether it is auto scaled or
                *          provisioned.</p>
                */
            capacity?: CapacityDescription;
            /**
                * <p>The Amazon Resource Name (ARN) of the connector.</p>
                */
            connectorArn?: string;
            /**
                * <p>A map of keys to values that represent the configuration for the connector.</p>
                */
            connectorConfiguration?: Record<string, string>;
            /**
                * <p>A summary description of the connector.</p>
                */
            connectorDescription?: string;
            /**
                * <p>The name of the connector.</p>
                */
            connectorName?: string;
            /**
                * <p>The state of the connector.</p>
                */
            connectorState?: ConnectorState | string;
            /**
                * <p>The time the connector was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The current version of the connector.</p>
                */
            currentVersion?: string;
            /**
                * <p>The Apache Kafka cluster that the connector is connected to.</p>
                */
            kafkaCluster?: KafkaClusterDescription;
            /**
                * <p>The type of client authentication used to connect to the Apache Kafka cluster. The value
                *          is NONE when no client authentication is used.</p>
                */
            kafkaClusterClientAuthentication?: KafkaClusterClientAuthenticationDescription;
            /**
                * <p>Details of encryption in transit to the Apache Kafka cluster.</p>
                */
            kafkaClusterEncryptionInTransit?: KafkaClusterEncryptionInTransitDescription;
            /**
                * <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka
                *          cluster's version and the plugins.</p>
                */
            kafkaConnectVersion?: string;
            /**
                * <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
                */
            logDelivery?: LogDeliveryDescription;
            /**
                * <p>Specifies which plugins were used for this connector.</p>
                */
            plugins?: PluginDescription[];
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon
                *          Web Services resources.</p>
                */
            serviceExecutionRoleArn?: string;
            /**
                * <p>Specifies which worker configuration was used for the connector.</p>
                */
            workerConfiguration?: WorkerConfigurationDescription;
            /**
                * <p>Details about the state of a connector.</p>
                */
            stateDescription?: StateDescription;
    }
    export namespace DescribeConnectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectorResponse) => any;
    }
    export interface DescribeCustomPluginRequest {
            /**
                * <p>Returns information about a custom plugin.</p>
                */
            customPluginArn: string | undefined;
    }
    export namespace DescribeCustomPluginRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCustomPluginRequest) => any;
    }
    export interface DescribeCustomPluginResponse {
            /**
                * <p>The time that the custom plugin was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
                */
            customPluginArn?: string;
            /**
                * <p>The state of the custom plugin.</p>
                */
            customPluginState?: CustomPluginState | string;
            /**
                * <p>The description of the custom plugin.</p>
                */
            description?: string;
            /**
                * <p>The latest successfully created revision of the custom plugin. If there are no
                *          successfully created revisions, this field will be absent.</p>
                */
            latestRevision?: CustomPluginRevisionSummary;
            /**
                * <p>The name of the custom plugin.</p>
                */
            name?: string;
            /**
                * <p>Details about the state of a custom plugin.</p>
                */
            stateDescription?: StateDescription;
    }
    export namespace DescribeCustomPluginResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCustomPluginResponse) => any;
    }
    export interface DescribeWorkerConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the worker configuration that you want to get
                *          information about.</p>
                */
            workerConfigurationArn: string | undefined;
    }
    export namespace DescribeWorkerConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkerConfigurationRequest) => any;
    }
    /**
        * <p>The description of the worker configuration revision.</p>
        */
    export interface WorkerConfigurationRevisionDescription {
            /**
                * <p>The time that the worker configuration was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The description of the worker configuration revision.</p>
                */
            description?: string;
            /**
                * <p>Base64 encoded contents of the connect-distributed.properties file.</p>
                */
            propertiesFileContent?: string;
            /**
                * <p>The description of a revision of the worker configuration.</p>
                */
            revision?: number;
    }
    export namespace WorkerConfigurationRevisionDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerConfigurationRevisionDescription) => any;
    }
    export interface DescribeWorkerConfigurationResponse {
            /**
                * <p>The time that the worker configuration was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The description of the worker configuration.</p>
                */
            description?: string;
            /**
                * <p>The latest revision of the custom configuration.</p>
                */
            latestRevision?: WorkerConfigurationRevisionDescription;
            /**
                * <p>The name of the worker configuration.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the custom configuration.</p>
                */
            workerConfigurationArn?: string;
    }
    export namespace DescribeWorkerConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkerConfigurationResponse) => any;
    }
    export interface ListConnectorsRequest {
            /**
                * <p>The name prefix that you want to use to search for and list connectors.</p>
                */
            connectorNamePrefix?: string;
            /**
                * <p>The maximum number of connectors to list in one response.</p>
                */
            maxResults?: number;
            /**
                * <p>If the response of a ListConnectors operation is truncated, it will include a NextToken.
                *          Send this NextToken in a subsequent request to continue listing from where the previous
                *          operation left off.</p>
                */
            nextToken?: string;
    }
    export namespace ListConnectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectorsRequest) => any;
    }
    export interface ListConnectorsResponse {
            /**
                * <p>An array of connector descriptions.</p>
                */
            connectors?: ConnectorSummary[];
            /**
                * <p>If the response of a ListConnectors operation is truncated, it will include a NextToken.
                *          Send this NextToken in a subsequent request to continue listing from where it left
                *          off.</p>
                */
            nextToken?: string;
    }
    export namespace ListConnectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectorsResponse) => any;
    }
    export interface ListCustomPluginsRequest {
            /**
                * <p>The maximum number of custom plugins to list in one response.</p>
                */
            maxResults?: number;
            /**
                * <p>If the response of a ListCustomPlugins operation is truncated, it will include a
                *          NextToken. Send this NextToken in a subsequent request to continue listing from where the
                *          previous operation left off.</p>
                */
            nextToken?: string;
    }
    export namespace ListCustomPluginsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCustomPluginsRequest) => any;
    }
    export interface ListCustomPluginsResponse {
            /**
                * <p>An array of custom plugin descriptions.</p>
                */
            customPlugins?: CustomPluginSummary[];
            /**
                * <p>If the response of a ListCustomPlugins operation is truncated, it will include a
                *          NextToken. Send this NextToken in a subsequent request to continue listing from where the
                *          previous operation left off.</p>
                */
            nextToken?: string;
    }
    export namespace ListCustomPluginsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCustomPluginsResponse) => any;
    }
    export interface ListWorkerConfigurationsRequest {
            /**
                * <p>The maximum number of worker configurations to list in one response.</p>
                */
            maxResults?: number;
            /**
                * <p>If the response of a ListWorkerConfigurations operation is truncated, it will include a
                *          NextToken. Send this NextToken in a subsequent request to continue listing from where the
                *          previous operation left off.</p>
                */
            nextToken?: string;
    }
    export namespace ListWorkerConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkerConfigurationsRequest) => any;
    }
    export interface ListWorkerConfigurationsResponse {
            /**
                * <p>If the response of a ListWorkerConfigurations operation is truncated, it will include a
                *          NextToken. Send this NextToken in a subsequent request to continue listing from where the
                *          previous operation left off.</p>
                */
            nextToken?: string;
            /**
                * <p>An array of worker configuration descriptions.</p>
                */
            workerConfigurations?: WorkerConfigurationSummary[];
    }
    export namespace ListWorkerConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkerConfigurationsResponse) => any;
    }
    export interface UpdateConnectorRequest {
            /**
                * <p>The target capacity.</p>
                */
            capacity: CapacityUpdate | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
                */
            connectorArn: string | undefined;
            /**
                * <p>The current version of the connector that you want to update.</p>
                */
            currentVersion: string | undefined;
    }
    export namespace UpdateConnectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectorRequest) => any;
    }
    export interface UpdateConnectorResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the connector.</p>
                */
            connectorArn?: string;
            /**
                * <p>The state of the connector.</p>
                */
            connectorState?: ConnectorState | string;
    }
    export namespace UpdateConnectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectorResponse) => any;
    }
}

declare module '@aws-sdk/client-kafkaconnect/node_modules/@aws-sdk/client-kafkaconnect/dist-types/models/KafkaConnectServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from KafkaConnect service.
        */
    export class KafkaConnectServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

