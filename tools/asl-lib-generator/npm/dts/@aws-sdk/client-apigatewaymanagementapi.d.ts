// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-apigatewaymanagementapi' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ApiGatewayManagementApiClient } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/ApiGatewayManagementApiClient";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/DeleteConnectionCommand";
    import { GetConnectionCommandInput, GetConnectionCommandOutput } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/GetConnectionCommand";
    import { PostToConnectionCommandInput, PostToConnectionCommandOutput } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/PostToConnectionCommand";
    /**
        * <p>The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.</p>
        */
    export class ApiGatewayManagementApi extends ApiGatewayManagementApiClient {
            /**
                * <p>Delete the connection with the provided id.</p>
                */
            deleteConnection(args: DeleteConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectionCommandOutput>;
            deleteConnection(args: DeleteConnectionCommandInput, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            deleteConnection(args: DeleteConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            /**
                * <p>Get information about the connection with the provided id.</p>
                */
            getConnection(args: GetConnectionCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectionCommandOutput>;
            getConnection(args: GetConnectionCommandInput, cb: (err: any, data?: GetConnectionCommandOutput) => void): void;
            getConnection(args: GetConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectionCommandOutput) => void): void;
            /**
                * <p>Sends the provided data to the specified connection.</p>
                */
            postToConnection(args: PostToConnectionCommandInput, options?: __HttpHandlerOptions): Promise<PostToConnectionCommandOutput>;
            postToConnection(args: PostToConnectionCommandInput, cb: (err: any, data?: PostToConnectionCommandOutput) => void): void;
            postToConnection(args: PostToConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PostToConnectionCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/ApiGatewayManagementApiClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/DeleteConnectionCommand";
    import { GetConnectionCommandInput, GetConnectionCommandOutput } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/GetConnectionCommand";
    import { PostToConnectionCommandInput, PostToConnectionCommandOutput } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/PostToConnectionCommand";
    export type ServiceInputTypes = DeleteConnectionCommandInput | GetConnectionCommandInput | PostToConnectionCommandInput;
    export type ServiceOutputTypes = DeleteConnectionCommandOutput | GetConnectionCommandOutput | PostToConnectionCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ApiGatewayManagementApiClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ApiGatewayManagementApiClient class constructor that set the region, credentials and other options.
        */
    export interface ApiGatewayManagementApiClientConfig extends ApiGatewayManagementApiClientConfigType {
    }
    type ApiGatewayManagementApiClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ApiGatewayManagementApiClient class. This is resolved and normalized from the {@link ApiGatewayManagementApiClientConfig | constructor configuration interface}.
        */
    export interface ApiGatewayManagementApiClientResolvedConfig extends ApiGatewayManagementApiClientResolvedConfigType {
    }
    /**
        * <p>The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.</p>
        */
    export class ApiGatewayManagementApiClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ApiGatewayManagementApiClientResolvedConfig> {
            /**
                * The resolved configuration of ApiGatewayManagementApiClient class. This is resolved and normalized from the {@link ApiGatewayManagementApiClientConfig | constructor configuration interface}.
                */
            readonly config: ApiGatewayManagementApiClientResolvedConfig;
            constructor(configuration: ApiGatewayManagementApiClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/DeleteConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayManagementApiClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/ApiGatewayManagementApiClient";
    import { DeleteConnectionRequest } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/models/models_0";
    export interface DeleteConnectionCommandInput extends DeleteConnectionRequest {
    }
    export interface DeleteConnectionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete the connection with the provided id.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayManagementApiClient, DeleteConnectionCommand } from "@aws-sdk/client-apigatewaymanagementapi"; // ES Modules import
        * // const { ApiGatewayManagementApiClient, DeleteConnectionCommand } = require("@aws-sdk/client-apigatewaymanagementapi"); // CommonJS import
        * const client = new ApiGatewayManagementApiClient(config);
        * const command = new DeleteConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectionCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectionCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayManagementApiClientResolvedConfig | config} for ApiGatewayManagementApiClient's `config` shape.
        *
        */
    export class DeleteConnectionCommand extends $Command<DeleteConnectionCommandInput, DeleteConnectionCommandOutput, ApiGatewayManagementApiClientResolvedConfig> {
            readonly input: DeleteConnectionCommandInput;
            constructor(input: DeleteConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayManagementApiClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectionCommandInput, DeleteConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/GetConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayManagementApiClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/ApiGatewayManagementApiClient";
    import { GetConnectionRequest, GetConnectionResponse } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/models/models_0";
    export interface GetConnectionCommandInput extends GetConnectionRequest {
    }
    export interface GetConnectionCommandOutput extends GetConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Get information about the connection with the provided id.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayManagementApiClient, GetConnectionCommand } from "@aws-sdk/client-apigatewaymanagementapi"; // ES Modules import
        * // const { ApiGatewayManagementApiClient, GetConnectionCommand } = require("@aws-sdk/client-apigatewaymanagementapi"); // CommonJS import
        * const client = new ApiGatewayManagementApiClient(config);
        * const command = new GetConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectionCommandInput} for command's `input` shape.
        * @see {@link GetConnectionCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayManagementApiClientResolvedConfig | config} for ApiGatewayManagementApiClient's `config` shape.
        *
        */
    export class GetConnectionCommand extends $Command<GetConnectionCommandInput, GetConnectionCommandOutput, ApiGatewayManagementApiClientResolvedConfig> {
            readonly input: GetConnectionCommandInput;
            constructor(input: GetConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayManagementApiClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectionCommandInput, GetConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/commands/PostToConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayManagementApiClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/ApiGatewayManagementApiClient";
    import { PostToConnectionRequest } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/models/models_0";
    export interface PostToConnectionCommandInput extends PostToConnectionRequest {
    }
    export interface PostToConnectionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sends the provided data to the specified connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayManagementApiClient, PostToConnectionCommand } from "@aws-sdk/client-apigatewaymanagementapi"; // ES Modules import
        * // const { ApiGatewayManagementApiClient, PostToConnectionCommand } = require("@aws-sdk/client-apigatewaymanagementapi"); // CommonJS import
        * const client = new ApiGatewayManagementApiClient(config);
        * const command = new PostToConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PostToConnectionCommandInput} for command's `input` shape.
        * @see {@link PostToConnectionCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayManagementApiClientResolvedConfig | config} for ApiGatewayManagementApiClient's `config` shape.
        *
        */
    export class PostToConnectionCommand extends $Command<PostToConnectionCommandInput, PostToConnectionCommandOutput, ApiGatewayManagementApiClientResolvedConfig> {
            readonly input: PostToConnectionCommandInput;
            constructor(input: PostToConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayManagementApiClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PostToConnectionCommandInput, PostToConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ApiGatewayManagementApiServiceException as __BaseException } from "@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/models/ApiGatewayManagementApiServiceException";
    export interface DeleteConnectionRequest {
            ConnectionId: string | undefined;
    }
    export namespace DeleteConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionRequest) => any;
    }
    /**
        * <p>The caller is not authorized to invoke this operation.</p>
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * <p>The connection with the provided id no longer exists.</p>
        */
    export class GoneException extends __BaseException {
            readonly name: "GoneException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GoneException, __BaseException>);
    }
    /**
        * <p>The client is sending more than the allowed number of requests per unit of time or the WebSocket client side buffer is full.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface GetConnectionRequest {
            ConnectionId: string | undefined;
    }
    export namespace GetConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionRequest) => any;
    }
    export interface Identity {
            /**
                * <p>The source IP address of the TCP connection making the request to API Gateway.</p>
                */
            SourceIp: string | undefined;
            /**
                * <p>The User Agent of the API caller.</p>
                */
            UserAgent: string | undefined;
    }
    export namespace Identity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Identity) => any;
    }
    export interface GetConnectionResponse {
            /**
                * <p>The time in ISO 8601 format for when the connection was established.</p>
                */
            ConnectedAt?: Date;
            Identity?: Identity;
            /**
                * <p>The time in ISO 8601 format for when the connection was last active.</p>
                */
            LastActiveAt?: Date;
    }
    export namespace GetConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionResponse) => any;
    }
    /**
        * <p>The data has exceeded the maximum size allowed.</p>
        */
    export class PayloadTooLargeException extends __BaseException {
            readonly name: "PayloadTooLargeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PayloadTooLargeException, __BaseException>);
    }
    export interface PostToConnectionRequest {
            /**
                * <p>The data to be sent to the client specified by its connection id.</p>
                */
            Data: Uint8Array | undefined;
            /**
                * <p>The identifier of the connection that a specific client is using.</p>
                */
            ConnectionId: string | undefined;
    }
    export namespace PostToConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostToConnectionRequest) => any;
    }
}

declare module '@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-types/models/ApiGatewayManagementApiServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ApiGatewayManagementApi service.
        */
    export class ApiGatewayManagementApiServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

