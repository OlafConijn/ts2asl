// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-codeguruprofiler' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CodeGuruProfilerClient } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { AddNotificationChannelsCommandInput, AddNotificationChannelsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/AddNotificationChannelsCommand";
    import { BatchGetFrameMetricDataCommandInput, BatchGetFrameMetricDataCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/BatchGetFrameMetricDataCommand";
    import { ConfigureAgentCommandInput, ConfigureAgentCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ConfigureAgentCommand";
    import { CreateProfilingGroupCommandInput, CreateProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/CreateProfilingGroupCommand";
    import { DeleteProfilingGroupCommandInput, DeleteProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/DeleteProfilingGroupCommand";
    import { DescribeProfilingGroupCommandInput, DescribeProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/DescribeProfilingGroupCommand";
    import { GetFindingsReportAccountSummaryCommandInput, GetFindingsReportAccountSummaryCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetFindingsReportAccountSummaryCommand";
    import { GetNotificationConfigurationCommandInput, GetNotificationConfigurationCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetNotificationConfigurationCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetPolicyCommand";
    import { GetProfileCommandInput, GetProfileCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetProfileCommand";
    import { GetRecommendationsCommandInput, GetRecommendationsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetRecommendationsCommand";
    import { ListFindingsReportsCommandInput, ListFindingsReportsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListFindingsReportsCommand";
    import { ListProfileTimesCommandInput, ListProfileTimesCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListProfileTimesCommand";
    import { ListProfilingGroupsCommandInput, ListProfilingGroupsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListProfilingGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListTagsForResourceCommand";
    import { PostAgentProfileCommandInput, PostAgentProfileCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/PostAgentProfileCommand";
    import { PutPermissionCommandInput, PutPermissionCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/PutPermissionCommand";
    import { RemoveNotificationChannelCommandInput, RemoveNotificationChannelCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/RemoveNotificationChannelCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/RemovePermissionCommand";
    import { SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/SubmitFeedbackCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/UntagResourceCommand";
    import { UpdateProfilingGroupCommandInput, UpdateProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/UpdateProfilingGroupCommand";
    /**
        * <p>
        *           This section provides documentation for the Amazon CodeGuru Profiler API operations.
        *       </p>
        *          <p>
        *          Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides
        *          recommendations that can help you fine-tune your application performance. Using machine learning
        *          algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can
        *          improve efficiency and remove CPU bottlenecks.
        *       </p>
        *          <p>
        *          Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is
        *          running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization.
        *       </p>
        *          <note>
        *             <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM)
        *             languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications
        *             written in Java, it can also generate visualizations and a subset of recommendations for
        *             applications written in other JVM languages and Python.</p>
        *          </note>
        *          <p>
        *          For more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html">What is Amazon CodeGuru Profiler</a> in
        *          the <i>Amazon CodeGuru Profiler User Guide</i>.
        *       </p>
        */
    export class CodeGuruProfiler extends CodeGuruProfilerClient {
            /**
                * <p>Add up to 2 anomaly notifications channels for a profiling group.</p>
                */
            addNotificationChannels(args: AddNotificationChannelsCommandInput, options?: __HttpHandlerOptions): Promise<AddNotificationChannelsCommandOutput>;
            addNotificationChannels(args: AddNotificationChannelsCommandInput, cb: (err: any, data?: AddNotificationChannelsCommandOutput) => void): void;
            addNotificationChannels(args: AddNotificationChannelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddNotificationChannelsCommandOutput) => void): void;
            /**
                * <p>
                *          Returns the time series of values for a requested list
                *          of frame metrics from a time period.</p>
                */
            batchGetFrameMetricData(args: BatchGetFrameMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetFrameMetricDataCommandOutput>;
            batchGetFrameMetricData(args: BatchGetFrameMetricDataCommandInput, cb: (err: any, data?: BatchGetFrameMetricDataCommandOutput) => void): void;
            batchGetFrameMetricData(args: BatchGetFrameMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetFrameMetricDataCommandOutput) => void): void;
            /**
                * <p>
                *           Used by profiler agents to report their current state and to receive remote
                *           configuration updates. For example, <code>ConfigureAgent</code> can be used
                *          to tell an agent whether to profile or not and for how long to return profiling data.
                *       </p>
                */
            configureAgent(args: ConfigureAgentCommandInput, options?: __HttpHandlerOptions): Promise<ConfigureAgentCommandOutput>;
            configureAgent(args: ConfigureAgentCommandInput, cb: (err: any, data?: ConfigureAgentCommandOutput) => void): void;
            configureAgent(args: ConfigureAgentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfigureAgentCommandOutput) => void): void;
            /**
                * <p>Creates a profiling group.</p>
                */
            createProfilingGroup(args: CreateProfilingGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateProfilingGroupCommandOutput>;
            createProfilingGroup(args: CreateProfilingGroupCommandInput, cb: (err: any, data?: CreateProfilingGroupCommandOutput) => void): void;
            createProfilingGroup(args: CreateProfilingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProfilingGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a profiling group.</p>
                */
            deleteProfilingGroup(args: DeleteProfilingGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProfilingGroupCommandOutput>;
            deleteProfilingGroup(args: DeleteProfilingGroupCommandInput, cb: (err: any, data?: DeleteProfilingGroupCommandOutput) => void): void;
            deleteProfilingGroup(args: DeleteProfilingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProfilingGroupCommandOutput) => void): void;
            /**
                * <p>
                *          Returns a <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a>
                *          object that contains information about the requested profiling group.
                *       </p>
                */
            describeProfilingGroup(args: DescribeProfilingGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProfilingGroupCommandOutput>;
            describeProfilingGroup(args: DescribeProfilingGroupCommandInput, cb: (err: any, data?: DescribeProfilingGroupCommandOutput) => void): void;
            describeProfilingGroup(args: DescribeProfilingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProfilingGroupCommandOutput) => void): void;
            /**
                * <p>
                *             Returns a list of
                *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_FindingsReportSummary.html">
                *                <code>FindingsReportSummary</code>
                *             </a>
                *             objects that contain analysis results for all profiling groups in your AWS account.
                *         </p>
                */
            getFindingsReportAccountSummary(args: GetFindingsReportAccountSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetFindingsReportAccountSummaryCommandOutput>;
            getFindingsReportAccountSummary(args: GetFindingsReportAccountSummaryCommandInput, cb: (err: any, data?: GetFindingsReportAccountSummaryCommandOutput) => void): void;
            getFindingsReportAccountSummary(args: GetFindingsReportAccountSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFindingsReportAccountSummaryCommandOutput) => void): void;
            /**
                * <p>Get the current configuration for anomaly notifications for a profiling group.</p>
                */
            getNotificationConfiguration(args: GetNotificationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetNotificationConfigurationCommandOutput>;
            getNotificationConfiguration(args: GetNotificationConfigurationCommandInput, cb: (err: any, data?: GetNotificationConfigurationCommandOutput) => void): void;
            getNotificationConfiguration(args: GetNotificationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNotificationConfigurationCommandOutput) => void): void;
            /**
                * <p>
                *             Returns the JSON-formatted resource-based policy on a profiling group.
                *         </p>
                */
            getPolicy(args: GetPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetPolicyCommandOutput>;
            getPolicy(args: GetPolicyCommandInput, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            getPolicy(args: GetPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            /**
                * <p>
                *          Gets the aggregated profile of a profiling group for a specified time range.
                *          Amazon CodeGuru Profiler collects posted agent profiles for a profiling group
                *          into aggregated profiles.
                *      </p>
                *
                *          <note>
                *             <p>
                *             Because aggregated profiles expire over time <code>GetProfile</code> is not idempotent.
                *          </p>
                *          </note>
                *
                *          <p>
                *          Specify the time range for the requested aggregated profile using 1 or 2 of the following parameters: <code>startTime</code>,
                *          <code>endTime</code>, <code>period</code>. The maximum time range allowed is 7 days. If you specify all 3 parameters,
                *          an exception is thrown. If you specify only <code>period</code>, the latest aggregated profile is returned.
                *       </p>
                *
                *          <p>
                *          Aggregated profiles are available with aggregation periods of 5 minutes, 1 hour, and 1 day, aligned to
                *          UTC. The aggregation period of an aggregated profile determines how long it is retained. For more
                *          information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AggregatedProfileTime.html">
                *                <code>AggregatedProfileTime</code>
                *             </a>. The aggregated profile's aggregation period determines how long
                *          it is retained by CodeGuru Profiler.
                *       </p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                If the aggregation period is 5 minutes, the aggregated profile is retained for 15 days.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                If the aggregation period is 1 hour, the aggregated profile is retained for 60 days.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                If the aggregation period is 1 day, the aggregated profile is retained for 3 years.
                *             </p>
                *             </li>
                *          </ul>
                *
                *          <p>There are two use cases for calling <code>GetProfile</code>.</p>
                *          <ol>
                *             <li>
                *                <p>
                *                If you want to return an aggregated profile that already exists, use
                *                <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ListProfileTimes.html">
                *                      <code>ListProfileTimes</code>
                *                   </a> to
                *                view the time ranges of existing aggregated profiles. Use them in a <code>GetProfile</code> request to return a specific,
                *                existing aggregated profile.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                If you want to return an aggregated profile for a time range that doesn't align with an existing aggregated profile,
                *                then CodeGuru Profiler makes a best effort to combine existing aggregated profiles from the requested time
                *                range and return them as one aggregated profile.
                *             </p>
                *
                *                <p> If aggregated profiles do not exist for the full time range requested, then
                *                aggregated profiles for a smaller time range are returned. For example, if the
                *                requested time range is from 00:00 to 00:20, and the existing aggregated profiles are
                *                from 00:15 and 00:25, then the aggregated profiles from 00:15 to 00:20 are returned. </p>
                *
                *
                *             </li>
                *          </ol>
                */
            getProfile(args: GetProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetProfileCommandOutput>;
            getProfile(args: GetProfileCommandInput, cb: (err: any, data?: GetProfileCommandOutput) => void): void;
            getProfile(args: GetProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetProfileCommandOutput) => void): void;
            /**
                * <p>
                *             Returns a list of
                *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Recommendation.html">
                *                <code>Recommendation</code>
                *             </a>
                *             objects that contain recommendations for a profiling group for a given time period. A list of
                *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Anomaly.html">
                *                <code>Anomaly</code>
                *             </a>
                *             objects that contains details about anomalies detected in the profiling group for the same time period is also
                *             returned.
                *         </p>
                */
            getRecommendations(args: GetRecommendationsCommandInput, options?: __HttpHandlerOptions): Promise<GetRecommendationsCommandOutput>;
            getRecommendations(args: GetRecommendationsCommandInput, cb: (err: any, data?: GetRecommendationsCommandOutput) => void): void;
            getRecommendations(args: GetRecommendationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRecommendationsCommandOutput) => void): void;
            /**
                * <p>List the available reports for a given profiling group and time range.</p>
                */
            listFindingsReports(args: ListFindingsReportsCommandInput, options?: __HttpHandlerOptions): Promise<ListFindingsReportsCommandOutput>;
            listFindingsReports(args: ListFindingsReportsCommandInput, cb: (err: any, data?: ListFindingsReportsCommandOutput) => void): void;
            listFindingsReports(args: ListFindingsReportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFindingsReportsCommandOutput) => void): void;
            /**
                * <p>Lists the start times of the available aggregated profiles of a profiling group
                *         for an aggregation period within the specified time range.</p>
                */
            listProfileTimes(args: ListProfileTimesCommandInput, options?: __HttpHandlerOptions): Promise<ListProfileTimesCommandOutput>;
            listProfileTimes(args: ListProfileTimesCommandInput, cb: (err: any, data?: ListProfileTimesCommandOutput) => void): void;
            listProfileTimes(args: ListProfileTimesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProfileTimesCommandOutput) => void): void;
            /**
                * <p>
                *          Returns a list of profiling groups. The profiling groups are returned as
                *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a>
                *          objects.
                *       </p>
                */
            listProfilingGroups(args: ListProfilingGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListProfilingGroupsCommandOutput>;
            listProfilingGroups(args: ListProfilingGroupsCommandInput, cb: (err: any, data?: ListProfilingGroupsCommandOutput) => void): void;
            listProfilingGroups(args: ListProfilingGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProfilingGroupsCommandOutput) => void): void;
            /**
                * <p>
                *          Returns a list of the tags that are assigned to a specified resource.
                *       </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>
                *          Submits profiling data to an aggregated profile of a profiling group. To get an
                *          aggregated profile that is created with this profiling data, use
                *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_GetProfile.html">
                *                <code>GetProfile</code>
                *             </a>.
                *       </p>
                */
            postAgentProfile(args: PostAgentProfileCommandInput, options?: __HttpHandlerOptions): Promise<PostAgentProfileCommandOutput>;
            postAgentProfile(args: PostAgentProfileCommandInput, cb: (err: any, data?: PostAgentProfileCommandOutput) => void): void;
            postAgentProfile(args: PostAgentProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PostAgentProfileCommandOutput) => void): void;
            /**
                * <p>
                *             Adds permissions to a profiling group's resource-based policy
                *             that are provided using an action group. If a profiling group doesn't have
                *             a resource-based policy, one is created for it using the permissions in the action group and
                *             the roles and users in the <code>principals</code> parameter.
                *         </p>
                *
                *         <p> The one supported action group that can be added is <code>agentPermission</code>
                *             which grants <code>ConfigureAgent</code> and <code>PostAgent</code> permissions. For
                *             more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based
                *                 policies in CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User
                *                 Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
                *                <code>ConfigureAgent</code>
                *             </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
                *                <code>PostAgentProfile</code>
                *             </a>. </p>
                *
                *         <p>
                *             The first time you call <code>PutPermission</code> on a profiling group, do not specify a <code>revisionId</code> because
                *             it doesn't have a resource-based policy. Subsequent calls must provide a <code>revisionId</code> to specify
                *             which revision of the resource-based policy to add the permissions to.
                *         </p>
                *
                *         <p>
                *             The response contains the profiling group's JSON-formatted resource policy.
                *         </p>
                */
            putPermission(args: PutPermissionCommandInput, options?: __HttpHandlerOptions): Promise<PutPermissionCommandOutput>;
            putPermission(args: PutPermissionCommandInput, cb: (err: any, data?: PutPermissionCommandOutput) => void): void;
            putPermission(args: PutPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPermissionCommandOutput) => void): void;
            /**
                * <p>Remove one anomaly notifications channel for a profiling group.</p>
                */
            removeNotificationChannel(args: RemoveNotificationChannelCommandInput, options?: __HttpHandlerOptions): Promise<RemoveNotificationChannelCommandOutput>;
            removeNotificationChannel(args: RemoveNotificationChannelCommandInput, cb: (err: any, data?: RemoveNotificationChannelCommandOutput) => void): void;
            removeNotificationChannel(args: RemoveNotificationChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveNotificationChannelCommandOutput) => void): void;
            /**
                * <p> Removes permissions from a profiling group's resource-based policy that are provided
                *             using an action group. The one supported action group that can be removed is
                *                 <code>agentPermission</code> which grants <code>ConfigureAgent</code> and
                *                 <code>PostAgent</code> permissions. For more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based policies in CodeGuru Profiler</a> in the <i>Amazon
                *                 CodeGuru Profiler User Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
                *                <code>ConfigureAgent</code>
                *             </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
                *                <code>PostAgentProfile</code>
                *             </a>. </p>
                */
            removePermission(args: RemovePermissionCommandInput, options?: __HttpHandlerOptions): Promise<RemovePermissionCommandOutput>;
            removePermission(args: RemovePermissionCommandInput, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            removePermission(args: RemovePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            /**
                * <p>Sends feedback to CodeGuru Profiler about whether the anomaly detected by the analysis is
                *             useful or not.</p>
                */
            submitFeedback(args: SubmitFeedbackCommandInput, options?: __HttpHandlerOptions): Promise<SubmitFeedbackCommandOutput>;
            submitFeedback(args: SubmitFeedbackCommandInput, cb: (err: any, data?: SubmitFeedbackCommandOutput) => void): void;
            submitFeedback(args: SubmitFeedbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SubmitFeedbackCommandOutput) => void): void;
            /**
                * <p>
                *          Use to assign one or more tags to a resource.
                *       </p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>
                *          Use to remove one or more tags from a resource.
                *       </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates a profiling group.</p>
                */
            updateProfilingGroup(args: UpdateProfilingGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProfilingGroupCommandOutput>;
            updateProfilingGroup(args: UpdateProfilingGroupCommandInput, cb: (err: any, data?: UpdateProfilingGroupCommandOutput) => void): void;
            updateProfilingGroup(args: UpdateProfilingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProfilingGroupCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddNotificationChannelsCommandInput, AddNotificationChannelsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/AddNotificationChannelsCommand";
    import { BatchGetFrameMetricDataCommandInput, BatchGetFrameMetricDataCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/BatchGetFrameMetricDataCommand";
    import { ConfigureAgentCommandInput, ConfigureAgentCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ConfigureAgentCommand";
    import { CreateProfilingGroupCommandInput, CreateProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/CreateProfilingGroupCommand";
    import { DeleteProfilingGroupCommandInput, DeleteProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/DeleteProfilingGroupCommand";
    import { DescribeProfilingGroupCommandInput, DescribeProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/DescribeProfilingGroupCommand";
    import { GetFindingsReportAccountSummaryCommandInput, GetFindingsReportAccountSummaryCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetFindingsReportAccountSummaryCommand";
    import { GetNotificationConfigurationCommandInput, GetNotificationConfigurationCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetNotificationConfigurationCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetPolicyCommand";
    import { GetProfileCommandInput, GetProfileCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetProfileCommand";
    import { GetRecommendationsCommandInput, GetRecommendationsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetRecommendationsCommand";
    import { ListFindingsReportsCommandInput, ListFindingsReportsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListFindingsReportsCommand";
    import { ListProfileTimesCommandInput, ListProfileTimesCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListProfileTimesCommand";
    import { ListProfilingGroupsCommandInput, ListProfilingGroupsCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListProfilingGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListTagsForResourceCommand";
    import { PostAgentProfileCommandInput, PostAgentProfileCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/PostAgentProfileCommand";
    import { PutPermissionCommandInput, PutPermissionCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/PutPermissionCommand";
    import { RemoveNotificationChannelCommandInput, RemoveNotificationChannelCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/RemoveNotificationChannelCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/RemovePermissionCommand";
    import { SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/SubmitFeedbackCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/UntagResourceCommand";
    import { UpdateProfilingGroupCommandInput, UpdateProfilingGroupCommandOutput } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/UpdateProfilingGroupCommand";
    export type ServiceInputTypes = AddNotificationChannelsCommandInput | BatchGetFrameMetricDataCommandInput | ConfigureAgentCommandInput | CreateProfilingGroupCommandInput | DeleteProfilingGroupCommandInput | DescribeProfilingGroupCommandInput | GetFindingsReportAccountSummaryCommandInput | GetNotificationConfigurationCommandInput | GetPolicyCommandInput | GetProfileCommandInput | GetRecommendationsCommandInput | ListFindingsReportsCommandInput | ListProfileTimesCommandInput | ListProfilingGroupsCommandInput | ListTagsForResourceCommandInput | PostAgentProfileCommandInput | PutPermissionCommandInput | RemoveNotificationChannelCommandInput | RemovePermissionCommandInput | SubmitFeedbackCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateProfilingGroupCommandInput;
    export type ServiceOutputTypes = AddNotificationChannelsCommandOutput | BatchGetFrameMetricDataCommandOutput | ConfigureAgentCommandOutput | CreateProfilingGroupCommandOutput | DeleteProfilingGroupCommandOutput | DescribeProfilingGroupCommandOutput | GetFindingsReportAccountSummaryCommandOutput | GetNotificationConfigurationCommandOutput | GetPolicyCommandOutput | GetProfileCommandOutput | GetRecommendationsCommandOutput | ListFindingsReportsCommandOutput | ListProfileTimesCommandOutput | ListProfilingGroupsCommandOutput | ListTagsForResourceCommandOutput | PostAgentProfileCommandOutput | PutPermissionCommandOutput | RemoveNotificationChannelCommandOutput | RemovePermissionCommandOutput | SubmitFeedbackCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateProfilingGroupCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CodeGuruProfilerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CodeGuruProfilerClient class constructor that set the region, credentials and other options.
        */
    export interface CodeGuruProfilerClientConfig extends CodeGuruProfilerClientConfigType {
    }
    type CodeGuruProfilerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CodeGuruProfilerClient class. This is resolved and normalized from the {@link CodeGuruProfilerClientConfig | constructor configuration interface}.
        */
    export interface CodeGuruProfilerClientResolvedConfig extends CodeGuruProfilerClientResolvedConfigType {
    }
    /**
        * <p>
        *           This section provides documentation for the Amazon CodeGuru Profiler API operations.
        *       </p>
        *          <p>
        *          Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides
        *          recommendations that can help you fine-tune your application performance. Using machine learning
        *          algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can
        *          improve efficiency and remove CPU bottlenecks.
        *       </p>
        *          <p>
        *          Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is
        *          running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization.
        *       </p>
        *          <note>
        *             <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM)
        *             languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications
        *             written in Java, it can also generate visualizations and a subset of recommendations for
        *             applications written in other JVM languages and Python.</p>
        *          </note>
        *          <p>
        *          For more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html">What is Amazon CodeGuru Profiler</a> in
        *          the <i>Amazon CodeGuru Profiler User Guide</i>.
        *       </p>
        */
    export class CodeGuruProfilerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CodeGuruProfilerClientResolvedConfig> {
            /**
                * The resolved configuration of CodeGuruProfilerClient class. This is resolved and normalized from the {@link CodeGuruProfilerClientConfig | constructor configuration interface}.
                */
            readonly config: CodeGuruProfilerClientResolvedConfig;
            constructor(configuration: CodeGuruProfilerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/AddNotificationChannelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { AddNotificationChannelsRequest, AddNotificationChannelsResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface AddNotificationChannelsCommandInput extends AddNotificationChannelsRequest {
    }
    export interface AddNotificationChannelsCommandOutput extends AddNotificationChannelsResponse, __MetadataBearer {
    }
    /**
        * <p>Add up to 2 anomaly notifications channels for a profiling group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, AddNotificationChannelsCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, AddNotificationChannelsCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new AddNotificationChannelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddNotificationChannelsCommandInput} for command's `input` shape.
        * @see {@link AddNotificationChannelsCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class AddNotificationChannelsCommand extends $Command<AddNotificationChannelsCommandInput, AddNotificationChannelsCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: AddNotificationChannelsCommandInput;
            constructor(input: AddNotificationChannelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddNotificationChannelsCommandInput, AddNotificationChannelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/BatchGetFrameMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { BatchGetFrameMetricDataRequest, BatchGetFrameMetricDataResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface BatchGetFrameMetricDataCommandInput extends BatchGetFrameMetricDataRequest {
    }
    export interface BatchGetFrameMetricDataCommandOutput extends BatchGetFrameMetricDataResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Returns the time series of values for a requested list
        *          of frame metrics from a time period.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, BatchGetFrameMetricDataCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, BatchGetFrameMetricDataCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new BatchGetFrameMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetFrameMetricDataCommandInput} for command's `input` shape.
        * @see {@link BatchGetFrameMetricDataCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class BatchGetFrameMetricDataCommand extends $Command<BatchGetFrameMetricDataCommandInput, BatchGetFrameMetricDataCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: BatchGetFrameMetricDataCommandInput;
            constructor(input: BatchGetFrameMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetFrameMetricDataCommandInput, BatchGetFrameMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ConfigureAgentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { ConfigureAgentRequest, ConfigureAgentResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface ConfigureAgentCommandInput extends ConfigureAgentRequest {
    }
    export interface ConfigureAgentCommandOutput extends ConfigureAgentResponse, __MetadataBearer {
    }
    /**
        * <p>
        *           Used by profiler agents to report their current state and to receive remote
        *           configuration updates. For example, <code>ConfigureAgent</code> can be used
        *          to tell an agent whether to profile or not and for how long to return profiling data.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, ConfigureAgentCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, ConfigureAgentCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new ConfigureAgentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfigureAgentCommandInput} for command's `input` shape.
        * @see {@link ConfigureAgentCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class ConfigureAgentCommand extends $Command<ConfigureAgentCommandInput, ConfigureAgentCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: ConfigureAgentCommandInput;
            constructor(input: ConfigureAgentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfigureAgentCommandInput, ConfigureAgentCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/CreateProfilingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { CreateProfilingGroupRequest, CreateProfilingGroupResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface CreateProfilingGroupCommandInput extends CreateProfilingGroupRequest {
    }
    export interface CreateProfilingGroupCommandOutput extends CreateProfilingGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a profiling group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, CreateProfilingGroupCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, CreateProfilingGroupCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new CreateProfilingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProfilingGroupCommandInput} for command's `input` shape.
        * @see {@link CreateProfilingGroupCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class CreateProfilingGroupCommand extends $Command<CreateProfilingGroupCommandInput, CreateProfilingGroupCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: CreateProfilingGroupCommandInput;
            constructor(input: CreateProfilingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProfilingGroupCommandInput, CreateProfilingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/DeleteProfilingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { DeleteProfilingGroupRequest, DeleteProfilingGroupResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface DeleteProfilingGroupCommandInput extends DeleteProfilingGroupRequest {
    }
    export interface DeleteProfilingGroupCommandOutput extends DeleteProfilingGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a profiling group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, DeleteProfilingGroupCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, DeleteProfilingGroupCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new DeleteProfilingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProfilingGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteProfilingGroupCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class DeleteProfilingGroupCommand extends $Command<DeleteProfilingGroupCommandInput, DeleteProfilingGroupCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: DeleteProfilingGroupCommandInput;
            constructor(input: DeleteProfilingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProfilingGroupCommandInput, DeleteProfilingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/DescribeProfilingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { DescribeProfilingGroupRequest, DescribeProfilingGroupResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface DescribeProfilingGroupCommandInput extends DescribeProfilingGroupRequest {
    }
    export interface DescribeProfilingGroupCommandOutput extends DescribeProfilingGroupResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Returns a <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
        *                <code>ProfilingGroupDescription</code>
        *             </a>
        *          object that contains information about the requested profiling group.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, DescribeProfilingGroupCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, DescribeProfilingGroupCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new DescribeProfilingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProfilingGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeProfilingGroupCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class DescribeProfilingGroupCommand extends $Command<DescribeProfilingGroupCommandInput, DescribeProfilingGroupCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: DescribeProfilingGroupCommandInput;
            constructor(input: DescribeProfilingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProfilingGroupCommandInput, DescribeProfilingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetFindingsReportAccountSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { GetFindingsReportAccountSummaryRequest, GetFindingsReportAccountSummaryResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface GetFindingsReportAccountSummaryCommandInput extends GetFindingsReportAccountSummaryRequest {
    }
    export interface GetFindingsReportAccountSummaryCommandOutput extends GetFindingsReportAccountSummaryResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             Returns a list of
        *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_FindingsReportSummary.html">
        *                <code>FindingsReportSummary</code>
        *             </a>
        *             objects that contain analysis results for all profiling groups in your AWS account.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, GetFindingsReportAccountSummaryCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, GetFindingsReportAccountSummaryCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new GetFindingsReportAccountSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFindingsReportAccountSummaryCommandInput} for command's `input` shape.
        * @see {@link GetFindingsReportAccountSummaryCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class GetFindingsReportAccountSummaryCommand extends $Command<GetFindingsReportAccountSummaryCommandInput, GetFindingsReportAccountSummaryCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: GetFindingsReportAccountSummaryCommandInput;
            constructor(input: GetFindingsReportAccountSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFindingsReportAccountSummaryCommandInput, GetFindingsReportAccountSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetNotificationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { GetNotificationConfigurationRequest, GetNotificationConfigurationResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface GetNotificationConfigurationCommandInput extends GetNotificationConfigurationRequest {
    }
    export interface GetNotificationConfigurationCommandOutput extends GetNotificationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Get the current configuration for anomaly notifications for a profiling group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, GetNotificationConfigurationCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, GetNotificationConfigurationCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new GetNotificationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNotificationConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetNotificationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class GetNotificationConfigurationCommand extends $Command<GetNotificationConfigurationCommandInput, GetNotificationConfigurationCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: GetNotificationConfigurationCommandInput;
            constructor(input: GetNotificationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNotificationConfigurationCommandInput, GetNotificationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { GetPolicyRequest, GetPolicyResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface GetPolicyCommandInput extends GetPolicyRequest {
    }
    export interface GetPolicyCommandOutput extends GetPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             Returns the JSON-formatted resource-based policy on a profiling group.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, GetPolicyCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, GetPolicyCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new GetPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPolicyCommandInput} for command's `input` shape.
        * @see {@link GetPolicyCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class GetPolicyCommand extends $Command<GetPolicyCommandInput, GetPolicyCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: GetPolicyCommandInput;
            constructor(input: GetPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPolicyCommandInput, GetPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { GetProfileRequest, GetProfileResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface GetProfileCommandInput extends GetProfileRequest {
    }
    export interface GetProfileCommandOutput extends GetProfileResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Gets the aggregated profile of a profiling group for a specified time range.
        *          Amazon CodeGuru Profiler collects posted agent profiles for a profiling group
        *          into aggregated profiles.
        *      </p>
        *
        *          <note>
        *             <p>
        *             Because aggregated profiles expire over time <code>GetProfile</code> is not idempotent.
        *          </p>
        *          </note>
        *
        *          <p>
        *          Specify the time range for the requested aggregated profile using 1 or 2 of the following parameters: <code>startTime</code>,
        *          <code>endTime</code>, <code>period</code>. The maximum time range allowed is 7 days. If you specify all 3 parameters,
        *          an exception is thrown. If you specify only <code>period</code>, the latest aggregated profile is returned.
        *       </p>
        *
        *          <p>
        *          Aggregated profiles are available with aggregation periods of 5 minutes, 1 hour, and 1 day, aligned to
        *          UTC. The aggregation period of an aggregated profile determines how long it is retained. For more
        *          information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AggregatedProfileTime.html">
        *                <code>AggregatedProfileTime</code>
        *             </a>. The aggregated profile's aggregation period determines how long
        *          it is retained by CodeGuru Profiler.
        *       </p>
        *
        *          <ul>
        *             <li>
        *                <p>
        *                If the aggregation period is 5 minutes, the aggregated profile is retained for 15 days.
        *             </p>
        *             </li>
        *             <li>
        *                <p>
        *                If the aggregation period is 1 hour, the aggregated profile is retained for 60 days.
        *             </p>
        *             </li>
        *             <li>
        *                <p>
        *                If the aggregation period is 1 day, the aggregated profile is retained for 3 years.
        *             </p>
        *             </li>
        *          </ul>
        *
        *          <p>There are two use cases for calling <code>GetProfile</code>.</p>
        *          <ol>
        *             <li>
        *                <p>
        *                If you want to return an aggregated profile that already exists, use
        *                <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ListProfileTimes.html">
        *                      <code>ListProfileTimes</code>
        *                   </a> to
        *                view the time ranges of existing aggregated profiles. Use them in a <code>GetProfile</code> request to return a specific,
        *                existing aggregated profile.
        *             </p>
        *             </li>
        *             <li>
        *                <p>
        *                If you want to return an aggregated profile for a time range that doesn't align with an existing aggregated profile,
        *                then CodeGuru Profiler makes a best effort to combine existing aggregated profiles from the requested time
        *                range and return them as one aggregated profile.
        *             </p>
        *
        *                <p> If aggregated profiles do not exist for the full time range requested, then
        *                aggregated profiles for a smaller time range are returned. For example, if the
        *                requested time range is from 00:00 to 00:20, and the existing aggregated profiles are
        *                from 00:15 and 00:25, then the aggregated profiles from 00:15 to 00:20 are returned. </p>
        *
        *
        *             </li>
        *          </ol>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, GetProfileCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, GetProfileCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new GetProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetProfileCommandInput} for command's `input` shape.
        * @see {@link GetProfileCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class GetProfileCommand extends $Command<GetProfileCommandInput, GetProfileCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: GetProfileCommandInput;
            constructor(input: GetProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetProfileCommandInput, GetProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/GetRecommendationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { GetRecommendationsRequest, GetRecommendationsResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface GetRecommendationsCommandInput extends GetRecommendationsRequest {
    }
    export interface GetRecommendationsCommandOutput extends GetRecommendationsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             Returns a list of
        *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Recommendation.html">
        *                <code>Recommendation</code>
        *             </a>
        *             objects that contain recommendations for a profiling group for a given time period. A list of
        *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Anomaly.html">
        *                <code>Anomaly</code>
        *             </a>
        *             objects that contains details about anomalies detected in the profiling group for the same time period is also
        *             returned.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, GetRecommendationsCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, GetRecommendationsCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new GetRecommendationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRecommendationsCommandInput} for command's `input` shape.
        * @see {@link GetRecommendationsCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class GetRecommendationsCommand extends $Command<GetRecommendationsCommandInput, GetRecommendationsCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: GetRecommendationsCommandInput;
            constructor(input: GetRecommendationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRecommendationsCommandInput, GetRecommendationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListFindingsReportsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { ListFindingsReportsRequest, ListFindingsReportsResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface ListFindingsReportsCommandInput extends ListFindingsReportsRequest {
    }
    export interface ListFindingsReportsCommandOutput extends ListFindingsReportsResponse, __MetadataBearer {
    }
    /**
        * <p>List the available reports for a given profiling group and time range.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, ListFindingsReportsCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, ListFindingsReportsCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new ListFindingsReportsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFindingsReportsCommandInput} for command's `input` shape.
        * @see {@link ListFindingsReportsCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class ListFindingsReportsCommand extends $Command<ListFindingsReportsCommandInput, ListFindingsReportsCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: ListFindingsReportsCommandInput;
            constructor(input: ListFindingsReportsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFindingsReportsCommandInput, ListFindingsReportsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListProfileTimesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { ListProfileTimesRequest, ListProfileTimesResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface ListProfileTimesCommandInput extends ListProfileTimesRequest {
    }
    export interface ListProfileTimesCommandOutput extends ListProfileTimesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the start times of the available aggregated profiles of a profiling group
        *         for an aggregation period within the specified time range.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, ListProfileTimesCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, ListProfileTimesCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new ListProfileTimesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProfileTimesCommandInput} for command's `input` shape.
        * @see {@link ListProfileTimesCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class ListProfileTimesCommand extends $Command<ListProfileTimesCommandInput, ListProfileTimesCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: ListProfileTimesCommandInput;
            constructor(input: ListProfileTimesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProfileTimesCommandInput, ListProfileTimesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListProfilingGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { ListProfilingGroupsRequest, ListProfilingGroupsResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface ListProfilingGroupsCommandInput extends ListProfilingGroupsRequest {
    }
    export interface ListProfilingGroupsCommandOutput extends ListProfilingGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Returns a list of profiling groups. The profiling groups are returned as
        *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
        *                <code>ProfilingGroupDescription</code>
        *             </a>
        *          objects.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, ListProfilingGroupsCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, ListProfilingGroupsCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new ListProfilingGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProfilingGroupsCommandInput} for command's `input` shape.
        * @see {@link ListProfilingGroupsCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class ListProfilingGroupsCommand extends $Command<ListProfilingGroupsCommandInput, ListProfilingGroupsCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: ListProfilingGroupsCommandInput;
            constructor(input: ListProfilingGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProfilingGroupsCommandInput, ListProfilingGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Returns a list of the tags that are assigned to a specified resource.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, ListTagsForResourceCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, ListTagsForResourceCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/PostAgentProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { PostAgentProfileRequest, PostAgentProfileResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface PostAgentProfileCommandInput extends PostAgentProfileRequest {
    }
    export interface PostAgentProfileCommandOutput extends PostAgentProfileResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Submits profiling data to an aggregated profile of a profiling group. To get an
        *          aggregated profile that is created with this profiling data, use
        *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_GetProfile.html">
        *                <code>GetProfile</code>
        *             </a>.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, PostAgentProfileCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, PostAgentProfileCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new PostAgentProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PostAgentProfileCommandInput} for command's `input` shape.
        * @see {@link PostAgentProfileCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class PostAgentProfileCommand extends $Command<PostAgentProfileCommandInput, PostAgentProfileCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: PostAgentProfileCommandInput;
            constructor(input: PostAgentProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PostAgentProfileCommandInput, PostAgentProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/PutPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { PutPermissionRequest, PutPermissionResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface PutPermissionCommandInput extends PutPermissionRequest {
    }
    export interface PutPermissionCommandOutput extends PutPermissionResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             Adds permissions to a profiling group's resource-based policy
        *             that are provided using an action group. If a profiling group doesn't have
        *             a resource-based policy, one is created for it using the permissions in the action group and
        *             the roles and users in the <code>principals</code> parameter.
        *         </p>
        *
        *         <p> The one supported action group that can be added is <code>agentPermission</code>
        *             which grants <code>ConfigureAgent</code> and <code>PostAgent</code> permissions. For
        *             more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based
        *                 policies in CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User
        *                 Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
        *                <code>ConfigureAgent</code>
        *             </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
        *                <code>PostAgentProfile</code>
        *             </a>. </p>
        *
        *         <p>
        *             The first time you call <code>PutPermission</code> on a profiling group, do not specify a <code>revisionId</code> because
        *             it doesn't have a resource-based policy. Subsequent calls must provide a <code>revisionId</code> to specify
        *             which revision of the resource-based policy to add the permissions to.
        *         </p>
        *
        *         <p>
        *             The response contains the profiling group's JSON-formatted resource policy.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, PutPermissionCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, PutPermissionCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new PutPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPermissionCommandInput} for command's `input` shape.
        * @see {@link PutPermissionCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class PutPermissionCommand extends $Command<PutPermissionCommandInput, PutPermissionCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: PutPermissionCommandInput;
            constructor(input: PutPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPermissionCommandInput, PutPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/RemoveNotificationChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { RemoveNotificationChannelRequest, RemoveNotificationChannelResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface RemoveNotificationChannelCommandInput extends RemoveNotificationChannelRequest {
    }
    export interface RemoveNotificationChannelCommandOutput extends RemoveNotificationChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Remove one anomaly notifications channel for a profiling group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, RemoveNotificationChannelCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, RemoveNotificationChannelCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new RemoveNotificationChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveNotificationChannelCommandInput} for command's `input` shape.
        * @see {@link RemoveNotificationChannelCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class RemoveNotificationChannelCommand extends $Command<RemoveNotificationChannelCommandInput, RemoveNotificationChannelCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: RemoveNotificationChannelCommandInput;
            constructor(input: RemoveNotificationChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveNotificationChannelCommandInput, RemoveNotificationChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/RemovePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { RemovePermissionRequest, RemovePermissionResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface RemovePermissionCommandInput extends RemovePermissionRequest {
    }
    export interface RemovePermissionCommandOutput extends RemovePermissionResponse, __MetadataBearer {
    }
    /**
        * <p> Removes permissions from a profiling group's resource-based policy that are provided
        *             using an action group. The one supported action group that can be removed is
        *                 <code>agentPermission</code> which grants <code>ConfigureAgent</code> and
        *                 <code>PostAgent</code> permissions. For more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based policies in CodeGuru Profiler</a> in the <i>Amazon
        *                 CodeGuru Profiler User Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
        *                <code>ConfigureAgent</code>
        *             </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
        *                <code>PostAgentProfile</code>
        *             </a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, RemovePermissionCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, RemovePermissionCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new RemovePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemovePermissionCommandInput} for command's `input` shape.
        * @see {@link RemovePermissionCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class RemovePermissionCommand extends $Command<RemovePermissionCommandInput, RemovePermissionCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: RemovePermissionCommandInput;
            constructor(input: RemovePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemovePermissionCommandInput, RemovePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/SubmitFeedbackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { SubmitFeedbackRequest, SubmitFeedbackResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface SubmitFeedbackCommandInput extends SubmitFeedbackRequest {
    }
    export interface SubmitFeedbackCommandOutput extends SubmitFeedbackResponse, __MetadataBearer {
    }
    /**
        * <p>Sends feedback to CodeGuru Profiler about whether the anomaly detected by the analysis is
        *             useful or not.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, SubmitFeedbackCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, SubmitFeedbackCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new SubmitFeedbackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SubmitFeedbackCommandInput} for command's `input` shape.
        * @see {@link SubmitFeedbackCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class SubmitFeedbackCommand extends $Command<SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: SubmitFeedbackCommandInput;
            constructor(input: SubmitFeedbackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Use to assign one or more tags to a resource.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, TagResourceCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, TagResourceCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Use to remove one or more tags from a resource.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, UntagResourceCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, UntagResourceCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/commands/UpdateProfilingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/CodeGuruProfilerClient";
    import { UpdateProfilingGroupRequest, UpdateProfilingGroupResponse } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0";
    export interface UpdateProfilingGroupCommandInput extends UpdateProfilingGroupRequest {
    }
    export interface UpdateProfilingGroupCommandOutput extends UpdateProfilingGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a profiling group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeGuruProfilerClient, UpdateProfilingGroupCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
        * // const { CodeGuruProfilerClient, UpdateProfilingGroupCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
        * const client = new CodeGuruProfilerClient(config);
        * const command = new UpdateProfilingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProfilingGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateProfilingGroupCommandOutput} for command's `response` shape.
        * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
        *
        */
    export class UpdateProfilingGroupCommand extends $Command<UpdateProfilingGroupCommandInput, UpdateProfilingGroupCommandOutput, CodeGuruProfilerClientResolvedConfig> {
            readonly input: UpdateProfilingGroupCommandInput;
            constructor(input: UpdateProfilingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeGuruProfilerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProfilingGroupCommandInput, UpdateProfilingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CodeGuruProfilerServiceException as __BaseException } from "@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/CodeGuruProfilerServiceException";
    export enum ActionGroup {
            /**
                * Permission group type for Agent APIs - ConfigureAgent, PostAgentProfile
                */
            AGENT_PERMISSIONS = "agentPermissions"
    }
    export enum EventPublisher {
            /**
                * Notifications for Anomaly Detection
                */
            ANOMALY_DETECTION = "AnomalyDetection"
    }
    /**
        * <p>Notification medium for users to get alerted for events that occur in application profile. We support SNS topic as a notification channel.</p>
        */
    export interface Channel {
            /**
                * <p>Unique identifier for each <code>Channel</code> in the notification configuration of a Profiling Group. A random UUID for channelId is used when adding a channel to the notification configuration if not specified in the request.</p>
                */
            id?: string;
            /**
                * <p>Unique arn of the resource to be used for notifications. We support a valid SNS topic arn as a channel uri.</p>
                */
            uri: string | undefined;
            /**
                * <p>List of publishers for different type of events that may be detected in an application from the profile. Anomaly detection is the only event publisher in Profiler.</p>
                */
            eventPublishers: (EventPublisher | string)[] | undefined;
    }
    export namespace Channel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Channel) => any;
    }
    /**
        * <p>The structure representing the AddNotificationChannelsRequest.</p>
        */
    export interface AddNotificationChannelsRequest {
            /**
                * <p>The name of the profiling group that we are setting up notifications for.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>One or 2 channels to report to when anomalies are detected.</p>
                */
            channels: Channel[] | undefined;
    }
    export namespace AddNotificationChannelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddNotificationChannelsRequest) => any;
    }
    /**
        * <p>The configuration for notifications stored for each profiling group. This includes up to
        *          to two channels and a list of event publishers associated with each channel.</p>
        */
    export interface NotificationConfiguration {
            /**
                * <p>List of up to two channels to be used for sending notifications for events detected from
                *          the application profile.</p>
                */
            channels?: Channel[];
    }
    export namespace NotificationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationConfiguration) => any;
    }
    /**
        * <p>The structure representing the AddNotificationChannelsResponse.</p>
        */
    export interface AddNotificationChannelsResponse {
            /**
                * <p>The new notification configuration for this profiling group.</p>
                */
            notificationConfiguration?: NotificationConfiguration;
    }
    export namespace AddNotificationChannelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddNotificationChannelsResponse) => any;
    }
    /**
        * <p>The requested operation would cause a conflict with the current state
        *         of a service resource associated with the request. Resolve the conflict
        *         before retrying this request.
        *       </p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The server encountered an internal error and is unable to complete the request.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            $retryable: {};
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The resource specified in the request does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>You have exceeded your service quota. To perform the requested action,
        *         remove some of the relevant resources, or use <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html">Service Quotas</a> to request a
        *         service quota increase.
        *       </p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            $retryable: {};
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The request was denied due to request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            $retryable: {};
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>The parameter is not valid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export enum AgentParameterField {
            /**
                * Maximum stack depth to be captured by the CodeGuru Profiler.
                */
            MAX_STACK_DEPTH = "MaxStackDepth",
            /**
                * Percentage of memory to be used by CodeGuru profiler. Minimum of 30MB is required for the agent.
                */
            MEMORY_USAGE_LIMIT_PERCENT = "MemoryUsageLimitPercent",
            /**
                * Minimum time in milliseconds between sending reports.
                */
            MINIMUM_TIME_FOR_REPORTING_IN_MILLISECONDS = "MinimumTimeForReportingInMilliseconds",
            /**
                * Reporting interval in milliseconds used to report profiles.
                */
            REPORTING_INTERVAL_IN_MILLISECONDS = "ReportingIntervalInMilliseconds",
            /**
                * Sampling interval in milliseconds used to sample profiles.
                */
            SAMPLING_INTERVAL_IN_MILLISECONDS = "SamplingIntervalInMilliseconds"
    }
    /**
        * <p>
        *          The response of <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
        *                <code>ConfigureAgent</code>
        *             </a> that
        *          specifies if an agent profiles or not and for how long to return profiling data.
        *       </p>
        */
    export interface AgentConfiguration {
            /**
                * <p>
                *          A <code>Boolean</code> that specifies whether the profiling agent collects profiling data or not. Set to <code>true</code>
                *         to enable profiling.
                *       </p>
                */
            shouldProfile: boolean | undefined;
            /**
                * <p>
                *          How long a profiling agent should send profiling data using
                *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
                *                <code>ConfigureAgent</code>
                *             </a>.
                *          For example, if this is set to 300, the profiling agent calls <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
                *                <code>ConfigureAgent</code>
                *             </a>
                *          every 5 minutes to submit the profiled data collected during that period.
                *       </p>
                */
            periodInSeconds: number | undefined;
            /**
                * <p>
                *          Parameters used by the profiler. The valid parameters are:
                *       </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>MaxStackDepth</code> - The maximum depth of the stacks in the code that is represented in
                *                the profile. For example, if CodeGuru Profiler finds a method <code>A</code>,
                *                which calls method <code>B</code>, which calls method <code>C</code>, which
                *                calls method <code>D</code>, then the depth is 4. If the <code>maxDepth</code> is
                *                set to 2, then the profiler evaluates <code>A</code> and <code>B</code>.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MemoryUsageLimitPercent</code> - The percentage of memory that is used by the
                *                profiler.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MinimumTimeForReportingInMilliseconds</code> - The minimum time in milliseconds between
                *                sending reports.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ReportingIntervalInMilliseconds</code> - The reporting interval in milliseconds used
                *                to report profiles.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SamplingIntervalInMilliseconds</code> - The sampling interval in milliseconds that is used to
                *                profile samples.
                *             </p>
                *             </li>
                *          </ul>
                */
            agentParameters?: Record<string, string>;
    }
    export namespace AgentConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AgentConfiguration) => any;
    }
    /**
        * <p>
        *          Specifies whether profiling is enabled or disabled for a profiling group. It
        *          is used by <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
        *                <code>ConfigureAgent</code>
        *             </a>
        *          to enable or disable profiling for a profiling group.
        *       </p>
        */
    export interface AgentOrchestrationConfig {
            /**
                * <p>
                *          A <code>Boolean</code> that specifies whether the profiling agent collects profiling data or not. Set to <code>true</code>
                *          to enable profiling.
                *       </p>
                */
            profilingEnabled: boolean | undefined;
    }
    export namespace AgentOrchestrationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AgentOrchestrationConfig) => any;
    }
    export enum AggregationPeriod {
            /**
                * Period of one day.
                */
            P1D = "P1D",
            /**
                * Period of one hour.
                */
            PT1H = "PT1H",
            /**
                * Period of five minutes.
                */
            PT5M = "PT5M"
    }
    /**
        * <p>
        *          Specifies the aggregation period and aggregation start time for
        *          an aggregated profile. An aggregated profile is used to collect posted agent profiles
        *          during an aggregation period. There are three possible aggregation periods (1 day,
        *          1 hour, or 5 minutes).
        *       </p>
        */
    export interface AggregatedProfileTime {
            /**
                * <p>
                *          The time that aggregation of posted agent profiles for a profiling group starts. The aggregation profile
                *          contains profiles posted by the agent starting at this time for an aggregation period
                *          specified by the <code>period</code> property of the <code>AggregatedProfileTime</code>
                *          object.
                *       </p>
                *          <p>
                *          Specify <code>start</code> using the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            start?: Date;
            /**
                * <p>
                *          The aggregation period. This indicates the period during which an aggregation profile
                *          collects posted agent profiles for a profiling group. Use one of three valid
                *          durations that are specified using the ISO 8601 format.
                *       </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>P1D</code> — 1 day
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT1H</code> — 1 hour
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT5M</code> — 5 minutes
                *             </p>
                *             </li>
                *          </ul>
                */
            period?: AggregationPeriod | string;
    }
    export namespace AggregatedProfileTime {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregatedProfileTime) => any;
    }
    export enum FeedbackType {
            /**
                * Profiler recommendation flagged as not useful.
                */
            Negative = "Negative",
            /**
                * Profiler recommendation flagged as useful.
                */
            Positive = "Positive"
    }
    /**
        * <p>Feedback that can be submitted for each instance of an anomaly by the user.
        *             Feedback is be used for improvements in generating recommendations for the application.</p>
        */
    export interface UserFeedback {
            /**
                * <p>Optional <code>Positive</code> or <code>Negative</code> feedback submitted by
                *             the user about whether the recommendation is useful or not.</p>
                */
            type: FeedbackType | string | undefined;
    }
    export namespace UserFeedback {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserFeedback) => any;
    }
    /**
        * <p>The specific duration in which the metric is flagged as anomalous.</p>
        */
    export interface AnomalyInstance {
            /**
                * <p>
                *             The universally unique identifier (UUID) of an instance of an anomaly in a metric.
                *         </p>
                */
            id: string | undefined;
            /**
                * <p>
                *             The start time of the period during which the metric is flagged as anomalous.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            startTime: Date | undefined;
            /**
                * <p>
                *             The end time of the period during which the metric is flagged as anomalous.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            endTime?: Date;
            /**
                * <p>Feedback type on a specific instance of anomaly submitted by the user.</p>
                */
            userFeedback?: UserFeedback;
    }
    export namespace AnomalyInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyInstance) => any;
    }
    export enum MetricType {
            /**
                * Metric value aggregated for all instances of a frame name in a profile relative to the root frame.
                */
            AggregatedRelativeTotalTime = "AggregatedRelativeTotalTime"
    }
    /**
        * <p>
        *             Details about the metric that the analysis used when it detected the anomaly.
        *             The metric what is analyzed to create recommendations. It includes the name of the
        *             frame that was analyzed and the type and thread states used to derive the metric
        *             value for that frame.
        *         </p>
        */
    export interface Metric {
            /**
                * <p>
                *             The name of the method that appears as a frame in any stack in a profile.
                *         </p>
                */
            frameName: string | undefined;
            /**
                * <p>
                *             A type that specifies how a metric for a frame is analyzed.
                *             The supported value <code>AggregatedRelativeTotalTime</code> is an
                *             aggregation of the metric value for one frame that is calculated across the
                *             occurences of all frames in a profile.</p>
                */
            type: MetricType | string | undefined;
            /**
                * <p>
                *             The list of application runtime thread states that is used to calculate the
                *             metric value for the frame.
                *         </p>
                */
            threadStates: string[] | undefined;
    }
    export namespace Metric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Metric) => any;
    }
    /**
        * <p>
        *             Details about an anomaly in a specific metric of application profile. The anomaly is detected using
        *             analysis of the metric data over a period of time.
        *         </p>
        */
    export interface Anomaly {
            /**
                * <p>
                *             Details about the metric that the analysis used when it detected the anomaly.
                *             The metric includes the name of the frame that was analyzed with the type and
                *             thread states used to derive the metric value for that frame.
                *         </p>
                */
            metric: Metric | undefined;
            /**
                * <p>The reason for which metric was flagged as anomalous.</p>
                */
            reason: string | undefined;
            /**
                * <p>
                *             A list of the instances of the detected anomalies during the requested period.
                *         </p>
                */
            instances: AnomalyInstance[] | undefined;
    }
    export namespace Anomaly {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Anomaly) => any;
    }
    /**
        * <p>
        *          The frame name, metric type, and thread states. These are used
        *          to derive the value of the metric for the frame.</p>
        */
    export interface FrameMetric {
            /**
                * <p> Name of the method common across the multiple occurrences of a frame in an application
                *          profile.</p>
                */
            frameName: string | undefined;
            /**
                * <p> A type of aggregation that specifies how a metric for a frame is analyzed. The
                *          supported value <code>AggregatedRelativeTotalTime</code> is an aggregation of the metric
                *          value for one frame that is calculated across the occurrences of all frames in a profile. </p>
                */
            type: MetricType | string | undefined;
            /**
                * <p>List of application runtime thread states used to get the counts for a frame a derive a metric value.</p>
                */
            threadStates: string[] | undefined;
    }
    export namespace FrameMetric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FrameMetric) => any;
    }
    /**
        * <p>The structure representing the BatchGetFrameMetricDataRequest.</p>
        */
    export interface BatchGetFrameMetricDataRequest {
            /**
                * <p>
                *          The name of the profiling group associated with the
                *          the frame metrics used to return the time series values.
                *       </p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *          The start time of the time period for the frame metrics used to return the time series values.
                *          This is specified
                *          using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *          millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            startTime?: Date;
            /**
                * <p>
                *          The end time of the time period for the returned time series values.
                *          This is specified
                *          using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *          millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            endTime?: Date;
            /**
                * <p>
                *          The duration of the frame metrics used to return the time series values.
                *          Specify using the ISO 8601 format. The maximum period duration
                *          is one day (<code>PT24H</code> or <code>P1D</code>).
                *       </p>
                */
            period?: string;
            /**
                * <p>The requested resolution of time steps for the returned time series of values.
                *          If the requested target resolution is not available due to data not being retained we provide a best effort
                *          result by falling back to the most granular available resolution after the target resolution.
                *          There are 3 valid values.
                *       </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>P1D</code> — 1 day
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT1H</code> — 1 hour
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT5M</code> — 5 minutes
                *             </p>
                *             </li>
                *          </ul>
                */
            targetResolution?: AggregationPeriod | string;
            /**
                * <p>
                *          The details of the metrics that are used to request a time series of values. The metric includes
                *          the name of the frame, the aggregation type to calculate the metric value for the
                *          frame, and the thread states to use to get the count for the metric value of the frame.</p>
                */
            frameMetrics?: FrameMetric[];
    }
    export namespace BatchGetFrameMetricDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetFrameMetricDataRequest) => any;
    }
    /**
        * <p>
        *          A data type that contains a <code>Timestamp</code> object. This is specified
        *          using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
        *          millisecond past June 1, 2020 1:15:02 PM UTC.
        *       </p>
        */
    export interface TimestampStructure {
            /**
                * <p>
                *          A <code>Timestamp</code>. This is specified
                *          using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *          millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            value: Date | undefined;
    }
    export namespace TimestampStructure {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimestampStructure) => any;
    }
    /**
        * <p>
        *          Information about a frame metric and its values.
        *       </p>
        */
    export interface FrameMetricDatum {
            /**
                * <p>
                *          The frame name, metric type, and thread states. These are used
                *          to derive the value of the metric for the frame.</p>
                */
            frameMetric: FrameMetric | undefined;
            /**
                * <p>
                *          A list of values that are associated with a frame metric.
                *       </p>
                */
            values: number[] | undefined;
    }
    export namespace FrameMetricDatum {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FrameMetricDatum) => any;
    }
    /**
        * <p>The structure representing the BatchGetFrameMetricDataResponse.</p>
        */
    export interface BatchGetFrameMetricDataResponse {
            /**
                * <p>
                *          The start time of the time period for the returned time series values.
                *          This is specified
                *          using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *          millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            startTime: Date | undefined;
            /**
                * <p>
                *          The end time of the time period for the returned time series values.
                *          This is specified
                *          using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *          millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            endTime: Date | undefined;
            /**
                * <p>Resolution or granularity of the profile data used to generate the time series.
                *          This is the value used to jump through time steps in a time series. There are 3 valid values.
                *       </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>P1D</code> — 1 day
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT1H</code> — 1 hour
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT5M</code> — 5 minutes
                *             </p>
                *             </li>
                *          </ul>
                */
            resolution: AggregationPeriod | string | undefined;
            /**
                * <p>
                *          List of instances, or time steps, in the time series. For example, if the
                *          <code>period</code> is one day (<code>PT24H)</code>), and the <code>resolution</code>
                *          is five minutes (<code>PT5M</code>), then there are 288 <code>endTimes</code> in the
                *          list that are each five minutes appart.
                *       </p>
                */
            endTimes: TimestampStructure[] | undefined;
            /**
                * <p>List of instances which remained unprocessed. This will create a missing time step in the list of end times.</p>
                */
            unprocessedEndTimes: Record<string, TimestampStructure[]> | undefined;
            /**
                * <p>Details of the metrics to request a time series of values. The metric includes
                *          the name of the frame, the aggregation type to calculate the metric value for the frame,
                *          and the thread states to use to get the count for the metric value of the frame.</p>
                */
            frameMetricData: FrameMetricDatum[] | undefined;
    }
    export namespace BatchGetFrameMetricDataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetFrameMetricDataResponse) => any;
    }
    /**
        * <p>The structure representing the GetFindingsReportAccountSummaryRequest.</p>
        */
    export interface GetFindingsReportAccountSummaryRequest {
            /**
                * <p>The <code>nextToken</code> value returned from a previous paginated <code>GetFindingsReportAccountSummary</code>
                *          request where <code>maxResults</code> was used and the results exceeded the value of that parameter.
                *          Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
                *       </p>
                *          <note>
                *             <p>This token should be treated as an opaque identifier that is only used to retrieve
                *          the next items in a list and not for other programmatic purposes.</p>
                *          </note>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results returned by <code> GetFindingsReportAccountSummary</code> in paginated output.
                *             When this parameter is used, <code>GetFindingsReportAccountSummary</code> only returns <code>maxResults</code>
                *             results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial
                *             request can be seen by sending another <code>GetFindingsReportAccountSummary</code> request with the returned
                *             <code>nextToken</code> value.</p>
                */
            maxResults?: number;
            /**
                * <p>A <code>Boolean</code> value indicating whether to only return reports from daily profiles. If set
                *             to <code>True</code>, only analysis data from daily profiles is returned. If set to <code>False</code>,
                *             analysis data is returned from smaller time windows (for example, one hour).</p>
                */
            dailyReportsOnly?: boolean;
    }
    export namespace GetFindingsReportAccountSummaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingsReportAccountSummaryRequest) => any;
    }
    /**
        * <p>
        *             Information about potential recommendations that might be created from the
        *             analysis of profiling data.
        *         </p>
        */
    export interface FindingsReportSummary {
            /**
                * <p>The universally unique identifier (UUID) of the recommendation report.</p>
                */
            id?: string;
            /**
                * <p>The name of the profiling group that is associated with the analysis data.</p>
                */
            profilingGroupName?: string;
            /**
                * <p>The start time of the profile the analysis data is about.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.</p>
                */
            profileStartTime?: Date;
            /**
                * <p>
                *             The end time of the period during which the metric is flagged as anomalous.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            profileEndTime?: Date;
            /**
                * <p>The total number of different recommendations that were found by the analysis.</p>
                */
            totalNumberOfFindings?: number;
    }
    export namespace FindingsReportSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindingsReportSummary) => any;
    }
    /**
        * <p>The structure representing the GetFindingsReportAccountSummaryResponse.</p>
        */
    export interface GetFindingsReportAccountSummaryResponse {
            /**
                * <p>The return list of
                *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_FindingsReportSummary.html">
                *                <code>FindingsReportSummary</code>
                *             </a>
                *             objects taht contain summaries of analysis results for all profiling groups in your AWS account.</p>
                */
            reportSummaries: FindingsReportSummary[] | undefined;
            /**
                * <p>The <code>nextToken</code> value to include in a future <code>GetFindingsReportAccountSummary</code> request.
                *          When the results of a <code>GetFindingsReportAccountSummary</code> request exceed <code>maxResults</code>, this
                *          value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more
                *          results to return.</p>
                */
            nextToken?: string;
    }
    export namespace GetFindingsReportAccountSummaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingsReportAccountSummaryResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>
                *          The Amazon Resource Name (ARN) of the resource that contains the tags to return.
                *       </p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>
                *          The list of tags assigned to the specified resource. This is the list of tags
                *          returned in the response.
                *       </p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export enum MetadataField {
            /**
                * Unique identifier for the agent instance.
                */
            AGENT_ID = "AgentId",
            /**
                * AWS requestId of the Lambda invocation.
                */
            AWS_REQUEST_ID = "AwsRequestId",
            /**
                * Compute platform on which agent is running.
                */
            COMPUTE_PLATFORM = "ComputePlatform",
            /**
                * Execution environment on which Lambda function is running.
                */
            EXECUTION_ENVIRONMENT = "ExecutionEnvironment",
            /**
                * Function ARN that's used to invoke the Lambda function.
                */
            LAMBDA_FUNCTION_ARN = "LambdaFunctionArn",
            /**
                * Memory allocated for the Lambda function.
                */
            LAMBDA_MEMORY_LIMIT_IN_MB = "LambdaMemoryLimitInMB",
            /**
                * Time in milliseconds for the previous Lambda invocation.
                */
            LAMBDA_PREVIOUS_EXECUTION_TIME_IN_MILLISECONDS = "LambdaPreviousExecutionTimeInMilliseconds",
            /**
                * Time in milliseconds left before the execution times out.
                */
            LAMBDA_REMAINING_TIME_IN_MILLISECONDS = "LambdaRemainingTimeInMilliseconds",
            /**
                * Time in milliseconds between two invocations of the Lambda function.
                */
            LAMBDA_TIME_GAP_BETWEEN_INVOKES_IN_MILLISECONDS = "LambdaTimeGapBetweenInvokesInMilliseconds"
    }
    /**
        * <p>The structure representing the configureAgentRequest.</p>
        */
    export interface ConfigureAgentRequest {
            /**
                * <p>
                *          The name of the profiling group for which the configured agent is collecting profiling data.
                *       </p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p> A universally unique identifier (UUID) for a profiling instance. For example, if the
                *          profiling instance is an Amazon EC2 instance, it is the instance ID. If it is an AWS
                *          Fargate container, it is the container's task ID. </p>
                */
            fleetInstanceId?: string;
            /**
                * <p> Metadata captured about the compute platform the agent is running on. It includes
                *          information about sampling and reporting. The valid fields are:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>COMPUTE_PLATFORM</code> - The compute platform on which the agent is running
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AGENT_ID</code> - The ID for an agent instance.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS_REQUEST_ID</code> - The AWS request ID of a Lambda invocation.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>EXECUTION_ENVIRONMENT</code> - The execution environment a Lambda function is running on.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LAMBDA_FUNCTION_ARN</code> - The Amazon Resource Name (ARN) that is used to invoke a Lambda function.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LAMBDA_MEMORY_LIMIT_IN_MB</code> - The memory allocated to a Lambda function.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LAMBDA_REMAINING_TIME_IN_MILLISECONDS</code> - The time in milliseconds before execution of a Lambda function times out.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LAMBDA_TIME_GAP_BETWEEN_INVOKES_IN_MILLISECONDS</code> - The time in milliseconds between two invocations of a Lambda function.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LAMBDA_PREVIOUS_EXECUTION_TIME_IN_MILLISECONDS</code> - The time in milliseconds for the previous Lambda invocation.
                *             </p>
                *             </li>
                *          </ul>
                */
            metadata?: Record<string, string>;
    }
    export namespace ConfigureAgentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureAgentRequest) => any;
    }
    /**
        * <p>The structure representing the configureAgentResponse.</p>
        */
    export interface ConfigureAgentResponse {
            /**
                * <p>
                *          An <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AgentConfiguration.html">
                *                <code>AgentConfiguration</code>
                *             </a>
                *          object that specifies if an agent profiles or not and for how long to return profiling data.
                *       </p>
                */
            configuration: AgentConfiguration | undefined;
    }
    export namespace ConfigureAgentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureAgentResponse) => any;
    }
    export enum ComputePlatform {
            /**
                * Compute platform meant to used for AWS Lambda.
                */
            AWSLAMBDA = "AWSLambda",
            /**
                * Compute platform meant to used for all usecases (like EC2, Fargate, physical servers etc.) but AWS Lambda.
                */
            DEFAULT = "Default"
    }
    /**
        * <p>The structure representing the createProfiliingGroupRequest.</p>
        */
    export interface CreateProfilingGroupRequest {
            /**
                * <p>The name of the profiling group to create.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *          The compute platform of the profiling group. Use <code>AWSLambda</code> if your application
                *          runs on AWS Lambda. Use <code>Default</code> if your application runs on a compute platform that
                *          is not AWS Lambda, such an Amazon EC2 instance, an on-premises server, or a different platform.
                *          If not specified, <code>Default</code> is used.
                *       </p>
                */
            computePlatform?: ComputePlatform | string;
            /**
                * <p> Amazon CodeGuru Profiler uses this universally unique identifier (UUID) to prevent the
                *          accidental creation of duplicate profiling groups if there are failures and retries. </p>
                */
            clientToken?: string;
            /**
                * <p>
                *          Specifies whether profiling is enabled or disabled for the created profiling group.
                *       </p>
                */
            agentOrchestrationConfig?: AgentOrchestrationConfig;
            /**
                * <p>
                *          A list of tags to add to the created profiling group.
                *       </p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateProfilingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProfilingGroupRequest) => any;
    }
    /**
        * <p>
        *          Profiling status includes information about the last time a profile agent pinged back,
        *          the last time a profile was received, and the aggregation period and start time for the
        *          most recent aggregated profile.
        *       </p>
        */
    export interface ProfilingStatus {
            /**
                * <p>The date and time when the most recent profile was received. Specify using
                *          the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
                */
            latestAgentProfileReportedAt?: Date;
            /**
                * <p>
                *          An <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AggregatedProfileTime.html">
                *                <code>AggregatedProfileTime</code>
                *             </a>
                *          object that contains the aggregation period and start time for an aggregated profile.
                *       </p>
                */
            latestAggregatedProfile?: AggregatedProfileTime;
            /**
                * <p>The date and time when the profiling agent most recently pinged back. Specify using
                *          the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
                */
            latestAgentOrchestratedAt?: Date;
    }
    export namespace ProfilingStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfilingStatus) => any;
    }
    /**
        * <p>
        *          Contains information about a profiling group.
        *       </p>
        */
    export interface ProfilingGroupDescription {
            /**
                * <p>The name of the profiling group.</p>
                */
            name?: string;
            /**
                * <p>
                *          An <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AgentOrchestrationConfig.html">
                *                <code>AgentOrchestrationConfig</code>
                *             </a>
                *          object that indicates if the profiling group is enabled for profiled or not.
                *       </p>
                */
            agentOrchestrationConfig?: AgentOrchestrationConfig;
            /**
                * <p>The Amazon Resource Name (ARN) identifying the profiling group resource.</p>
                */
            arn?: string;
            /**
                * <p>The time when the profiling group was created. Specify using
                *          the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            createdAt?: Date;
            /**
                * <p>
                *          The date and time when the profiling group was last updated. Specify using
                *          the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                */
            updatedAt?: Date;
            /**
                * <p>
                *          A <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingStatus.html">
                *                <code>ProfilingStatus</code>
                *             </a> object
                *          that includes information about the last time a profile agent pinged back,
                *          the last time a profile was received, and the aggregation period and start time for the
                *          most recent aggregated profile.
                *       </p>
                */
            profilingStatus?: ProfilingStatus;
            /**
                * <p>
                *          The compute platform of the profiling group. If it is set to <code>AWSLambda</code>, then
                *          the profiled application runs on AWS Lambda. If it is set to <code>Default</code>, then the
                *          profiled application runs on a compute platform that is not AWS Lambda, such an Amazon EC2 instance,
                *          an on-premises server, or a different platform. The default is <code>Default</code>.
                *       </p>
                */
            computePlatform?: ComputePlatform | string;
            /**
                * <p>
                *          A list of the tags that belong to this profiling group.
                *       </p>
                */
            tags?: Record<string, string>;
    }
    export namespace ProfilingGroupDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfilingGroupDescription) => any;
    }
    /**
        * <p>The structure representing the createProfilingGroupResponse.</p>
        */
    export interface CreateProfilingGroupResponse {
            /**
                * <p> The returned <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a> object that contains information
                *          about the created profiling group. </p>
                */
            profilingGroup: ProfilingGroupDescription | undefined;
    }
    export namespace CreateProfilingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProfilingGroupResponse) => any;
    }
    /**
        * <p>The structure representing the deleteProfilingGroupRequest.</p>
        */
    export interface DeleteProfilingGroupRequest {
            /**
                * <p>The name of the profiling group to delete.</p>
                */
            profilingGroupName: string | undefined;
    }
    export namespace DeleteProfilingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProfilingGroupRequest) => any;
    }
    /**
        * <p>The structure representing the deleteProfilingGroupResponse.</p>
        */
    export interface DeleteProfilingGroupResponse {
    }
    export namespace DeleteProfilingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProfilingGroupResponse) => any;
    }
    /**
        * <p>The structure representing the describeProfilingGroupRequest.</p>
        */
    export interface DescribeProfilingGroupRequest {
            /**
                * <p>
                *          The name of the profiling group to get information about.
                *       </p>
                */
            profilingGroupName: string | undefined;
    }
    export namespace DescribeProfilingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProfilingGroupRequest) => any;
    }
    /**
        * <p>The structure representing the describeProfilingGroupResponse.</p>
        */
    export interface DescribeProfilingGroupResponse {
            /**
                * <p>
                *          The returned <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a>
                *          object that contains information about the requested profiling group.
                *       </p>
                */
            profilingGroup: ProfilingGroupDescription | undefined;
    }
    export namespace DescribeProfilingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProfilingGroupResponse) => any;
    }
    /**
        * <p>The structure representing the GetNotificationConfigurationRequest.</p>
        */
    export interface GetNotificationConfigurationRequest {
            /**
                * <p>The name of the profiling group we want to get the notification configuration for.</p>
                */
            profilingGroupName: string | undefined;
    }
    export namespace GetNotificationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNotificationConfigurationRequest) => any;
    }
    /**
        * <p>The structure representing the GetNotificationConfigurationResponse.</p>
        */
    export interface GetNotificationConfigurationResponse {
            /**
                * <p>The current notification configuration for this profiling group.</p>
                */
            notificationConfiguration: NotificationConfiguration | undefined;
    }
    export namespace GetNotificationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNotificationConfigurationResponse) => any;
    }
    /**
        * <p>
        *             The structure representing the <code>getPolicyRequest</code>.
        *         </p>
        */
    export interface GetPolicyRequest {
            /**
                * <p>The name of the profiling group.</p>
                */
            profilingGroupName: string | undefined;
    }
    export namespace GetPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyRequest) => any;
    }
    /**
        * <p>The structure representing the <code>getPolicyResponse</code>.</p>
        */
    export interface GetPolicyResponse {
            /**
                * <p>The JSON-formatted resource-based policy attached to the <code>ProfilingGroup</code>.</p>
                */
            policy: string | undefined;
            /**
                * <p>A unique identifier for the current revision of the returned policy.</p>
                */
            revisionId: string | undefined;
    }
    export namespace GetPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyResponse) => any;
    }
    /**
        * <p>The structure representing the getProfileRequest.</p>
        */
    export interface GetProfileRequest {
            /**
                * <p>The name of the profiling group to get.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>The start time of the profile to get. Specify using
                *          the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
                *
                *          <p>
                *          If you specify <code>startTime</code>, then you must also specify <code>period</code>
                *          or <code>endTime</code>, but not both.
                *       </p>
                */
            startTime?: Date;
            /**
                * <p>
                *          Used with <code>startTime</code> or <code>endTime</code> to specify
                *          the time range for the returned aggregated profile. Specify using
                *          the ISO 8601 format. For example, <code>P1DT1H1M1S</code>.
                *       </p>
                *
                *          <p>
                *          To get the latest aggregated profile, specify only <code>period</code>.
                *       </p>
                */
            period?: string;
            /**
                * <p>
                *          The end time of the requested profile. Specify using
                *          the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.
                *       </p>
                *          <p>
                *          If you specify <code>endTime</code>, then you must also specify <code>period</code>
                *          or <code>startTime</code>, but not both.
                *       </p>
                */
            endTime?: Date;
            /**
                * <p>
                *          The maximum depth of the stacks in the code that is represented in
                *          the aggregated profile. For example, if CodeGuru Profiler finds a method <code>A</code>,
                *          which calls method <code>B</code>, which calls method <code>C</code>, which
                *          calls method <code>D</code>, then the depth is 4. If the <code>maxDepth</code> is
                *          set to 2, then the aggregated profile contains representations of methods <code>A</code>
                *          and <code>B</code>.
                *       </p>
                */
            maxDepth?: number;
            /**
                * <p>
                *          The format of the returned profiling data. The format maps to the
                *          <code>Accept</code> and <code>Content-Type</code> headers of the
                *          HTTP request. You can specify one of the following:
                *         or the default .
                *       </p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>application/json</code> — standard JSON format
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>application/x-amzn-ion</code> — the Amazon Ion data format. For more information,
                *                see <a href="http://amzn.github.io/ion-docs/">Amazon Ion</a>.
                *             </p>
                *             </li>
                *          </ul>
                */
            accept?: string;
    }
    export namespace GetProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProfileRequest) => any;
    }
    /**
        * <p>The structure representing the getProfileResponse.</p>
        */
    export interface GetProfileResponse {
            /**
                * <p>Information about the profile.</p>
                */
            profile: Uint8Array | undefined;
            /**
                * <p>The content type of the profile in the payload. It is
                *         either <code>application/json</code> or the default
                *         <code>application/x-amzn-ion</code>.</p>
                */
            contentType: string | undefined;
            /**
                * <p>The content encoding of the profile.</p>
                */
            contentEncoding?: string;
    }
    export namespace GetProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProfileResponse) => any;
    }
    /**
        * <p>The structure representing the GetRecommendationsRequest.</p>
        */
    export interface GetRecommendationsRequest {
            /**
                * <p>
                *             The name of the profiling group to get analysis data about.
                *         </p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *             The end time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            startTime: Date | undefined;
            /**
                * <p>
                *             The start time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            endTime: Date | undefined;
            /**
                * <p>
                *             The language used to provide analysis. Specify using a string that is one
                *             of the following <code>BCP 47</code> language codes.
                *         </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>de-DE</code> - German, Germany
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>en-GB</code> - English, United Kingdom
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>en-US</code> - English, United States
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>es-ES</code> - Spanish, Spain
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>fr-FR</code> - French, France
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>it-IT</code> - Italian, Italy
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>ja-JP</code> - Japanese, Japan
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>ko-KR</code> - Korean, Republic of Korea
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>pt-BR</code> - Portugese, Brazil
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>zh-CN</code> - Chinese, China
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>zh-TW</code> - Chinese, Taiwan
                *                 </p>
                *             </li>
                *          </ul>
                */
            locale?: string;
    }
    export namespace GetRecommendationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRecommendationsRequest) => any;
    }
    /**
        * <p>
        *             A set of rules used to make a recommendation during an analysis.
        *         </p>
        */
    export interface Pattern {
            /**
                * <p>The universally unique identifier (UUID) of this pattern.</p>
                */
            id?: string;
            /**
                * <p>The name for this pattern.</p>
                */
            name?: string;
            /**
                * <p>The description of the recommendation. This explains a potential
                *             inefficiency in a profiled application.</p>
                */
            description?: string;
            /**
                * <p>
                *             A string that contains the steps recommended to address the potential inefficiency.
                *         </p>
                */
            resolutionSteps?: string;
            /**
                * <p>A list of frame names that were searched during the analysis that generated
                *             a recommendation.</p>
                */
            targetFrames?: string[][];
            /**
                * <p>
                *             The percentage of time an application spends in one method that triggers
                *             a recommendation. The percentage of time is the same as the percentage of
                *             the total gathered sample counts during analysis.
                *         </p>
                */
            thresholdPercent?: number;
            /**
                * <p>
                *             A list of the different counters used to determine if there is a match.
                *         </p>
                */
            countersToAggregate?: string[];
    }
    export namespace Pattern {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Pattern) => any;
    }
    /**
        * <p>The part of a profile that contains a recommendation found during analysis.</p>
        */
    export interface Match {
            /**
                * <p>The target frame that triggered a match.</p>
                */
            targetFramesIndex?: number;
            /**
                * <p>The location in the profiling graph that contains a recommendation found during analysis.</p>
                */
            frameAddress?: string;
            /**
                * <p>The value in the profile data that exceeded the recommendation threshold.</p>
                */
            thresholdBreachValue?: number;
    }
    export namespace Match {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Match) => any;
    }
    /**
        * <p>A potential improvement that was found from analyzing the profiling data.</p>
        */
    export interface Recommendation {
            /**
                * <p>How many different places in the profile graph triggered a match.</p>
                */
            allMatchesCount: number | undefined;
            /**
                * <p>How much of the total sample count is potentially affected.</p>
                */
            allMatchesSum: number | undefined;
            /**
                * <p>The pattern that analysis recognized in the profile to make this recommendation.</p>
                */
            pattern: Pattern | undefined;
            /**
                * <p>List of the matches with most impact. </p>
                */
            topMatches: Match[] | undefined;
            /**
                * <p>The start time of the profile that was used by this analysis.
                *         This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>End time of the profile that was used by this analysis.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.</p>
                */
            endTime: Date | undefined;
    }
    export namespace Recommendation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Recommendation) => any;
    }
    /**
        * <p>The structure representing the GetRecommendationsResponse.</p>
        */
    export interface GetRecommendationsResponse {
            /**
                * <p>The name of the profiling group the analysis data is about.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *             The start time of the profile the analysis data is about. This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            profileStartTime: Date | undefined;
            /**
                * <p>
                *             The end time of the profile the analysis data is about. This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            profileEndTime: Date | undefined;
            /**
                * <p>The list of recommendations that the analysis found for this profile.</p>
                */
            recommendations: Recommendation[] | undefined;
            /**
                * <p>
                *             The list of anomalies that the analysis has found for this profile.
                *         </p>
                */
            anomalies: Anomaly[] | undefined;
    }
    export namespace GetRecommendationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRecommendationsResponse) => any;
    }
    /**
        * <p>The structure representing the ListFindingsReportsRequest.</p>
        */
    export interface ListFindingsReportsRequest {
            /**
                * <p>The name of the profiling group from which to search for analysis data.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *             The start time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            startTime: Date | undefined;
            /**
                * <p>
                *             The end time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>.
                *             This is specified
                *             using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1
                *             millisecond past June 1, 2020 1:15:02 PM UTC.
                *         </p>
                */
            endTime: Date | undefined;
            /**
                * <p>The <code>nextToken</code> value returned from a previous paginated <code>ListFindingsReportsRequest</code>
                *          request where <code>maxResults</code> was used and the results exceeded the value of that parameter.
                *          Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
                *       </p>
                *          <note>
                *             <p>This token should be treated as an opaque identifier that is only used to retrieve
                *       the next items in a list and not for other programmatic purposes.</p>
                *          </note>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of report results returned by <code>ListFindingsReports</code>
                *          in paginated output. When this parameter is used, <code>ListFindingsReports</code> only returns
                *          <code>maxResults</code> results in a single page along with a <code>nextToken</code> response
                *          element. The remaining results of the initial request
                *          can be seen by sending another <code>ListFindingsReports</code> request with the returned
                *          <code>nextToken</code> value.</p>
                */
            maxResults?: number;
            /**
                * <p>A <code>Boolean</code> value indicating whether to only return reports from daily profiles. If set
                *         to <code>True</code>, only analysis data from daily profiles is returned. If set to <code>False</code>,
                *         analysis data is returned from smaller time windows (for example, one hour).</p>
                */
            dailyReportsOnly?: boolean;
    }
    export namespace ListFindingsReportsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingsReportsRequest) => any;
    }
    /**
        * <p>The structure representing the ListFindingsReportsResponse.</p>
        */
    export interface ListFindingsReportsResponse {
            /**
                * <p>The list of analysis results summaries.</p>
                */
            findingsReportSummaries: FindingsReportSummary[] | undefined;
            /**
                * <p>The <code>nextToken</code> value to include in a future <code>ListFindingsReports</code> request.
                *          When the results of a <code>ListFindingsReports</code> request exceed <code>maxResults</code>, this
                *          value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more
                *          results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListFindingsReportsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingsReportsResponse) => any;
    }
    export enum OrderBy {
            /**
                * Order by timestamp in ascending order.
                */
            TIMESTAMP_ASCENDING = "TimestampAscending",
            /**
                * Order by timestamp in descending order.
                */
            TIMESTAMP_DESCENDING = "TimestampDescending"
    }
    /**
        * <p>The structure representing the listProfileTimesRequest.</p>
        */
    export interface ListProfileTimesRequest {
            /**
                * <p>The name of the profiling group.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>The start time of the time range from which to list the profiles.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The end time of the time range from which to list the profiles.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>
                *          The aggregation period. This specifies the period during which an aggregation profile
                *          collects posted agent profiles for a profiling group. There are 3 valid values.
                *       </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>P1D</code> — 1 day
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT1H</code> — 1 hour
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PT5M</code> — 5 minutes
                *             </p>
                *             </li>
                *          </ul>
                */
            period: AggregationPeriod | string | undefined;
            /**
                * <p>The order (ascending or descending by start time of the profile) to
                *         use when listing profiles. Defaults to <code>TIMESTAMP_DESCENDING</code>.
                *       </p>
                */
            orderBy?: OrderBy | string;
            /**
                * <p>The maximum number of profile time results returned by <code>ListProfileTimes</code>
                *          in paginated output. When this parameter is used, <code>ListProfileTimes</code> only returns
                *          <code>maxResults</code> results in a single page with a <code>nextToken</code> response
                *          element. The remaining results of the initial request
                *          can be seen by sending another <code>ListProfileTimes</code> request with the returned
                *          <code>nextToken</code> value.
                *       </p>
                */
            maxResults?: number;
            /**
                * <p>The <code>nextToken</code> value returned from a previous paginated
                *          <code>ListProfileTimes</code> request where <code>maxResults</code> was used and the results
                *          exceeded the value of that parameter. Pagination continues from the end of the previous results
                *          that returned the <code>nextToken</code> value.
                *       </p>
                *          <note>
                *             <p>This token should be treated as an opaque identifier that is only used to retrieve
                *          the next items in a list and not for other programmatic purposes.</p>
                *          </note>
                */
            nextToken?: string;
    }
    export namespace ListProfileTimesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProfileTimesRequest) => any;
    }
    /**
        * <p>
        *          Contains the start time of a profile.
        *       </p>
        */
    export interface ProfileTime {
            /**
                * <p>The start time of a profile. It is specified using
                *          the ISO 8601 format. For example,
                *          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
                */
            start?: Date;
    }
    export namespace ProfileTime {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfileTime) => any;
    }
    /**
        * <p>The structure representing the listProfileTimesResponse.</p>
        */
    export interface ListProfileTimesResponse {
            /**
                * <p>The list of start times of the available profiles for the aggregation
                *         period in the specified time range.
                *       </p>
                */
            profileTimes: ProfileTime[] | undefined;
            /**
                * <p>The <code>nextToken</code> value to include in a future <code>ListProfileTimes</code> request.
                *          When the results of a <code>ListProfileTimes</code> request exceed <code>maxResults</code>, this
                *          value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more
                *          results to return. </p>
                */
            nextToken?: string;
    }
    export namespace ListProfileTimesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProfileTimesResponse) => any;
    }
    /**
        * <p>The structure representing the listProfilingGroupsRequest.</p>
        */
    export interface ListProfilingGroupsRequest {
            /**
                * <p>The <code>nextToken</code> value returned from a previous paginated
                *          <code>ListProfilingGroups</code> request where <code>maxResults</code> was used and the results
                *          exceeded the value of that parameter. Pagination continues from the end of the previous results
                *          that returned the <code>nextToken</code> value.
                *       </p>
                *          <note>
                *             <p>This token should be treated as an opaque identifier that is only used to retrieve
                *          the next items in a list and not for other programmatic purposes.</p>
                *          </note>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of profiling groups results returned by <code>ListProfilingGroups</code>
                *          in paginated output. When this parameter is used, <code>ListProfilingGroups</code> only returns
                *          <code>maxResults</code> results in a single page along with a <code>nextToken</code> response
                *          element. The remaining results of the initial request
                *          can be seen by sending another <code>ListProfilingGroups</code> request with the returned
                *          <code>nextToken</code> value.
                *       </p>
                */
            maxResults?: number;
            /**
                * <p>A <code>Boolean</code> value indicating whether to include a description. If <code>true</code>,
                *       then a list of
                *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a> objects
                *       that contain detailed information about profiling groups is returned. If <code>false</code>, then
                *       a list of profiling group names is returned.</p>
                */
            includeDescription?: boolean;
    }
    export namespace ListProfilingGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProfilingGroupsRequest) => any;
    }
    /**
        * <p>The structure representing the listProfilingGroupsResponse.</p>
        */
    export interface ListProfilingGroupsResponse {
            /**
                * <p>
                *          A returned list of profiling group names. A list of the names is returned only if
                *          <code>includeDescription</code> is <code>false</code>, otherwise a list of
                *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a> objects
                *          is returned.
                *       </p>
                */
            profilingGroupNames: string[] | undefined;
            /**
                * <p>
                *          A returned list
                *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a>
                *          objects. A list of
                *          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a>
                *          objects is returned only if <code>includeDescription</code> is <code>true</code>, otherwise a list of profiling group names is returned.
                *       </p>
                */
            profilingGroups?: ProfilingGroupDescription[];
            /**
                * <p>The <code>nextToken</code> value to include in a future <code>ListProfilingGroups</code> request.
                *          When the results of a <code>ListProfilingGroups</code> request exceed <code>maxResults</code>, this
                *          value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more
                *          results to return. </p>
                */
            nextToken?: string;
    }
    export namespace ListProfilingGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProfilingGroupsResponse) => any;
    }
    /**
        * <p>The structure representing the postAgentProfileRequest.</p>
        */
    export interface PostAgentProfileRequest {
            /**
                * <p>
                *          The name of the profiling group with the aggregated profile that receives the
                *          submitted profiling data.
                *       </p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *          The submitted profiling data.
                *       </p>
                */
            agentProfile: Uint8Array | undefined;
            /**
                * <p> Amazon CodeGuru Profiler uses this universally unique identifier (UUID) to prevent the
                *          accidental submission of duplicate profiling data if there are failures and retries. </p>
                */
            profileToken?: string;
            /**
                * <p>
                *          The format of the submitted profiling data. The format maps to the
                *          <code>Accept</code> and <code>Content-Type</code> headers of the
                *          HTTP request. You can specify one of the following:
                *          or the default .
                *       </p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>application/json</code> — standard JSON format
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>application/x-amzn-ion</code> — the Amazon Ion data format. For more information,
                *                see <a href="http://amzn.github.io/ion-docs/">Amazon Ion</a>.
                *             </p>
                *             </li>
                *          </ul>
                */
            contentType: string | undefined;
    }
    export namespace PostAgentProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostAgentProfileRequest) => any;
    }
    /**
        * <p>The structure representing the postAgentProfileResponse.</p>
        */
    export interface PostAgentProfileResponse {
    }
    export namespace PostAgentProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostAgentProfileResponse) => any;
    }
    /**
        * <p>The structure representing the <code>putPermissionRequest</code>.</p>
        */
    export interface PutPermissionRequest {
            /**
                * <p>The name of the profiling group to grant access to.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *             Specifies an action group that contains permissions to add to
                *             a profiling group resource. One action group is supported, <code>agentPermissions</code>, which
                *             grants permission to perform actions required by the profiling agent, <code>ConfigureAgent</code>
                *             and <code>PostAgentProfile</code> permissions.
                *         </p>
                */
            actionGroup: ActionGroup | string | undefined;
            /**
                * <p>
                *             A list ARNs for the roles and users you want to grant access to the profiling group.
                *             Wildcards are not are supported in the ARNs.
                *         </p>
                */
            principals: string[] | undefined;
            /**
                * <p>
                *             A universally unique identifier (UUID) for the revision of the policy you
                *             are adding to the profiling group. Do not specify
                *             this when you add permissions to a profiling group for the first time. If a policy already exists on the
                *             profiling group, you must specify the <code>revisionId</code>.
                *         </p>
                */
            revisionId?: string;
    }
    export namespace PutPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPermissionRequest) => any;
    }
    /**
        * <p>The structure representing the <code>putPermissionResponse</code>.</p>
        */
    export interface PutPermissionResponse {
            /**
                * <p>
                *             The JSON-formatted resource-based policy on the profiling group that includes the
                *             added permissions.
                *         </p>
                */
            policy: string | undefined;
            /**
                * <p> A universally unique identifier (UUID) for the revision of the resource-based policy
                *             that includes the added permissions. The JSON-formatted policy is in the
                *                 <code>policy</code> element of the response. </p>
                */
            revisionId: string | undefined;
    }
    export namespace PutPermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPermissionResponse) => any;
    }
    /**
        * <p>The structure representing the RemoveNotificationChannelRequest.</p>
        */
    export interface RemoveNotificationChannelRequest {
            /**
                * <p>The name of the profiling group we want to change notification configuration for.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>The id of the channel that we want to stop receiving notifications.</p>
                */
            channelId: string | undefined;
    }
    export namespace RemoveNotificationChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveNotificationChannelRequest) => any;
    }
    /**
        * <p>The structure representing the RemoveNotificationChannelResponse.</p>
        */
    export interface RemoveNotificationChannelResponse {
            /**
                * <p>The new notification configuration for this profiling group.</p>
                */
            notificationConfiguration?: NotificationConfiguration;
    }
    export namespace RemoveNotificationChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveNotificationChannelResponse) => any;
    }
    /**
        * <p>
        *
        *             The structure representing the <code>removePermissionRequest</code>.</p>
        */
    export interface RemovePermissionRequest {
            /**
                * <p>The name of the profiling group.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *             Specifies an action group that contains the permissions to remove from
                *             a profiling group's resource-based policy. One action group is supported, <code>agentPermissions</code>, which
                *             grants <code>ConfigureAgent</code> and <code>PostAgentProfile</code> permissions.
                *         </p>
                */
            actionGroup: ActionGroup | string | undefined;
            /**
                * <p>
                *             A universally unique identifier (UUID) for the revision of the resource-based policy from which
                *             you want to remove permissions.
                *         </p>
                */
            revisionId: string | undefined;
    }
    export namespace RemovePermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemovePermissionRequest) => any;
    }
    /**
        * <p>The structure representing the <code>removePermissionResponse</code>.</p>
        */
    export interface RemovePermissionResponse {
            /**
                * <p>
                *             The JSON-formatted resource-based policy on the profiling group after
                *             the specified permissions were removed.
                *         </p>
                */
            policy: string | undefined;
            /**
                * <p> A universally unique identifier (UUID) for the revision of the resource-based policy
                *             after the specified permissions were removed. The updated JSON-formatted policy is in the
                *                 <code>policy</code> element of the response. </p>
                */
            revisionId: string | undefined;
    }
    export namespace RemovePermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemovePermissionResponse) => any;
    }
    /**
        * <p>The structure representing the SubmitFeedbackRequest.</p>
        */
    export interface SubmitFeedbackRequest {
            /**
                * <p>The name of the profiling group that is associated with the analysis data.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>The universally unique identifier (UUID) of the
                *             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AnomalyInstance.html">
                *                <code>AnomalyInstance</code>
                *             </a> object
                *             that is included in the analysis data.</p>
                */
            anomalyInstanceId: string | undefined;
            /**
                * <p>
                *             The feedback tpye. Thee are two valid values, <code>Positive</code> and <code>Negative</code>.
                *         </p>
                */
            type: FeedbackType | string | undefined;
            /**
                * <p>Optional feedback about this anomaly.</p>
                */
            comment?: string;
    }
    export namespace SubmitFeedbackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubmitFeedbackRequest) => any;
    }
    /**
        * <p>The structure representing the SubmitFeedbackResponse.</p>
        */
    export interface SubmitFeedbackResponse {
    }
    export namespace SubmitFeedbackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubmitFeedbackResponse) => any;
    }
    /**
        * <p>The structure representing the updateProfilingGroupRequest.</p>
        */
    export interface UpdateProfilingGroupRequest {
            /**
                * <p>The name of the profiling group to update.</p>
                */
            profilingGroupName: string | undefined;
            /**
                * <p>
                *          Specifies whether profiling is enabled or disabled for a profiling group.
                *       </p>
                */
            agentOrchestrationConfig: AgentOrchestrationConfig | undefined;
    }
    export namespace UpdateProfilingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProfilingGroupRequest) => any;
    }
    /**
        * <p>The structure representing the updateProfilingGroupResponse.</p>
        */
    export interface UpdateProfilingGroupResponse {
            /**
                * <p>
                *          A <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
                *                <code>ProfilingGroupDescription</code>
                *             </a>
                *          that contains information about the returned updated profiling group.
                *       </p>
                */
            profilingGroup: ProfilingGroupDescription | undefined;
    }
    export namespace UpdateProfilingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProfilingGroupResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>
                *          The Amazon Resource Name (ARN) of the resource that the tags are added to.
                *       </p>
                */
            resourceArn: string | undefined;
            /**
                * <p>
                *          The list of tags that are added to the specified resource.
                *       </p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>
                *          The Amazon Resource Name (ARN) of the resource that contains the tags to remove.
                *       </p>
                */
            resourceArn: string | undefined;
            /**
                * <p>
                *          A list of tag keys. Existing tags of resources with keys in this list are removed from
                *          the specified resource.
                *       </p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-codeguruprofiler/node_modules/@aws-sdk/client-codeguruprofiler/dist-types/models/CodeGuruProfilerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CodeGuruProfiler service.
        */
    export class CodeGuruProfilerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

