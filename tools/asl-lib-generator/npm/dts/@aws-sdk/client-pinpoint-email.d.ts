// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-pinpoint-email' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateConfigurationSetCommand";
    import { CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateConfigurationSetEventDestinationCommand";
    import { CreateDedicatedIpPoolCommandInput, CreateDedicatedIpPoolCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateDedicatedIpPoolCommand";
    import { CreateDeliverabilityTestReportCommandInput, CreateDeliverabilityTestReportCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateDeliverabilityTestReportCommand";
    import { CreateEmailIdentityCommandInput, CreateEmailIdentityCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateEmailIdentityCommand";
    import { DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteConfigurationSetCommand";
    import { DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteConfigurationSetEventDestinationCommand";
    import { DeleteDedicatedIpPoolCommandInput, DeleteDedicatedIpPoolCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteDedicatedIpPoolCommand";
    import { DeleteEmailIdentityCommandInput, DeleteEmailIdentityCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteEmailIdentityCommand";
    import { GetAccountCommandInput, GetAccountCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetAccountCommand";
    import { GetBlacklistReportsCommandInput, GetBlacklistReportsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetBlacklistReportsCommand";
    import { GetConfigurationSetCommandInput, GetConfigurationSetCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetConfigurationSetCommand";
    import { GetConfigurationSetEventDestinationsCommandInput, GetConfigurationSetEventDestinationsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetConfigurationSetEventDestinationsCommand";
    import { GetDedicatedIpCommandInput, GetDedicatedIpCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDedicatedIpCommand";
    import { GetDedicatedIpsCommandInput, GetDedicatedIpsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDedicatedIpsCommand";
    import { GetDeliverabilityDashboardOptionsCommandInput, GetDeliverabilityDashboardOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDeliverabilityDashboardOptionsCommand";
    import { GetDeliverabilityTestReportCommandInput, GetDeliverabilityTestReportCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDeliverabilityTestReportCommand";
    import { GetDomainDeliverabilityCampaignCommandInput, GetDomainDeliverabilityCampaignCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDomainDeliverabilityCampaignCommand";
    import { GetDomainStatisticsReportCommandInput, GetDomainStatisticsReportCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDomainStatisticsReportCommand";
    import { GetEmailIdentityCommandInput, GetEmailIdentityCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetEmailIdentityCommand";
    import { ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListConfigurationSetsCommand";
    import { ListDedicatedIpPoolsCommandInput, ListDedicatedIpPoolsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDedicatedIpPoolsCommand";
    import { ListDeliverabilityTestReportsCommandInput, ListDeliverabilityTestReportsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDeliverabilityTestReportsCommand";
    import { ListDomainDeliverabilityCampaignsCommandInput, ListDomainDeliverabilityCampaignsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDomainDeliverabilityCampaignsCommand";
    import { ListEmailIdentitiesCommandInput, ListEmailIdentitiesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListEmailIdentitiesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListTagsForResourceCommand";
    import { PutAccountDedicatedIpWarmupAttributesCommandInput, PutAccountDedicatedIpWarmupAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutAccountDedicatedIpWarmupAttributesCommand";
    import { PutAccountSendingAttributesCommandInput, PutAccountSendingAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutAccountSendingAttributesCommand";
    import { PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetDeliveryOptionsCommand";
    import { PutConfigurationSetReputationOptionsCommandInput, PutConfigurationSetReputationOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetReputationOptionsCommand";
    import { PutConfigurationSetSendingOptionsCommandInput, PutConfigurationSetSendingOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetSendingOptionsCommand";
    import { PutConfigurationSetTrackingOptionsCommandInput, PutConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetTrackingOptionsCommand";
    import { PutDedicatedIpInPoolCommandInput, PutDedicatedIpInPoolCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDedicatedIpInPoolCommand";
    import { PutDedicatedIpWarmupAttributesCommandInput, PutDedicatedIpWarmupAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDedicatedIpWarmupAttributesCommand";
    import { PutDeliverabilityDashboardOptionCommandInput, PutDeliverabilityDashboardOptionCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDeliverabilityDashboardOptionCommand";
    import { PutEmailIdentityDkimAttributesCommandInput, PutEmailIdentityDkimAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityDkimAttributesCommand";
    import { PutEmailIdentityFeedbackAttributesCommandInput, PutEmailIdentityFeedbackAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityFeedbackAttributesCommand";
    import { PutEmailIdentityMailFromAttributesCommandInput, PutEmailIdentityMailFromAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityMailFromAttributesCommand";
    import { SendEmailCommandInput, SendEmailCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/SendEmailCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/UntagResourceCommand";
    import { UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/UpdateConfigurationSetEventDestinationCommand";
    import { PinpointEmailClient } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    /**
        * <fullname>Amazon Pinpoint Email Service</fullname>
        *         <p>Welcome to the <i>Amazon Pinpoint Email API Reference</i>. This guide provides
        *             information about the Amazon Pinpoint Email API (version 1.0), including supported
        *             operations, data types, parameters, and schemas.</p>
        *         <p>
        *             <a href="https://aws.amazon.com/pinpoint">Amazon Pinpoint</a> is an AWS service that you
        *             can use to engage with your customers across multiple messaging channels. You can use
        *             Amazon Pinpoint to send email, SMS text messages, voice messages, and push notifications. The
        *             Amazon Pinpoint Email API provides programmatic access to options that are unique to the
        *             email channel and supplement the options provided by the Amazon Pinpoint API.</p>
        *         <p>If you're new to Amazon Pinpoint, you might find it helpful to also review the <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html">Amazon
        *                 Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer
        *                 Guide</i> provides tutorials, code samples, and procedures that demonstrate
        *             how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into
        *             mobile apps and other types of applications. The guide also provides information about
        *             key topics such as Amazon Pinpoint integration with other AWS services and the limits that apply
        *             to using the service.</p>
        *         <p>The Amazon Pinpoint Email API is available in several AWS Regions and it provides an endpoint
        *             for each of these Regions. For a list of all the Regions and endpoints where the API is
        *             currently available, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region">AWS Service Endpoints</a> in
        *             the <i>Amazon Web Services General Reference</i>. To learn more about AWS Regions, see
        *                 <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing AWS
        *                 Regions</a> in the <i>Amazon Web Services General Reference</i>.</p>
        *         <p>In each Region, AWS maintains multiple Availability Zones. These Availability Zones
        *             are physically isolated from each other, but are united by private, low-latency,
        *             high-throughput, and highly redundant network connections. These Availability Zones
        *             enable us to provide very high levels of availability and redundancy, while also
        *             minimizing latency. To learn more about the number of Availability Zones that are
        *             available in each Region, see <a href="http://aws.amazon.com/about-aws/global-infrastructure/">AWS Global Infrastructure</a>.</p>
        */
    export class PinpointEmail extends PinpointEmailClient {
            /**
                * <p>Create a configuration set. <i>Configuration sets</i> are groups of
                *             rules that you can apply to the emails you send using Amazon Pinpoint. You apply a configuration
                *             set to an email by including a reference to the configuration set in the headers of the
                *             email. When you apply a configuration set to an email, all of the rules in that
                *             configuration set are applied to the email. </p>
                */
            createConfigurationSet(args: CreateConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationSetCommandOutput>;
            createConfigurationSet(args: CreateConfigurationSetCommandInput, cb: (err: any, data?: CreateConfigurationSetCommandOutput) => void): void;
            createConfigurationSet(args: CreateConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationSetCommandOutput) => void): void;
            /**
                * <p>Create an event destination. In Amazon Pinpoint, <i>events</i> include message
                *             sends, deliveries, opens, clicks, bounces, and complaints. <i>Event
                *                 destinations</i> are places that you can send information about these events
                *             to. For example, you can send event data to Amazon SNS to receive notifications when you
                *             receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term
                *             storage.</p>
                *         <p>A single configuration set can include more than one event destination.</p>
                */
            createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationSetEventDestinationCommandOutput>;
            createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: CreateConfigurationSetEventDestinationCommandOutput) => void): void;
            createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationSetEventDestinationCommandOutput) => void): void;
            /**
                * <p>Create a new pool of dedicated IP addresses. A pool can include one or more dedicated
                *             IP addresses that are associated with your Amazon Pinpoint account. You can associate a pool with
                *             a configuration set. When you send an email that uses that configuration set, Amazon Pinpoint
                *             sends it using only the IP addresses in the associated pool.</p>
                */
            createDedicatedIpPool(args: CreateDedicatedIpPoolCommandInput, options?: __HttpHandlerOptions): Promise<CreateDedicatedIpPoolCommandOutput>;
            createDedicatedIpPool(args: CreateDedicatedIpPoolCommandInput, cb: (err: any, data?: CreateDedicatedIpPoolCommandOutput) => void): void;
            createDedicatedIpPool(args: CreateDedicatedIpPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDedicatedIpPoolCommandOutput) => void): void;
            /**
                * <p>Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled
                *             by various email providers around the world. When you perform a predictive inbox placement test, you provide a
                *             sample message that contains the content that you plan to send to your customers. Amazon Pinpoint
                *             then sends that message to special email addresses spread across several major email
                *             providers. After about 24 hours, the test is complete, and you can use the
                *                 <code>GetDeliverabilityTestReport</code> operation to view the results of the
                *             test.</p>
                */
            createDeliverabilityTestReport(args: CreateDeliverabilityTestReportCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeliverabilityTestReportCommandOutput>;
            createDeliverabilityTestReport(args: CreateDeliverabilityTestReportCommandInput, cb: (err: any, data?: CreateDeliverabilityTestReportCommandOutput) => void): void;
            createDeliverabilityTestReport(args: CreateDeliverabilityTestReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeliverabilityTestReportCommandOutput) => void): void;
            /**
                * <p>Verifies an email identity for use with Amazon Pinpoint. In Amazon Pinpoint, an identity is an email
                *             address or domain that you use when you send email. Before you can use an identity to
                *             send email with Amazon Pinpoint, you first have to verify it. By verifying an address, you
                *             demonstrate that you're the owner of the address, and that you've given Amazon Pinpoint permission
                *             to send email from the address.</p>
                *         <p>When you verify an email address, Amazon Pinpoint sends an email to the address. Your email
                *             address is verified as soon as you follow the link in the verification email.
                *
                *         </p>
                *         <p>When you verify a domain, this operation provides a set of DKIM tokens, which you can
                *             convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your
                *             domain. Your domain is verified when Amazon Pinpoint detects these records in the DNS
                *             configuration for your domain. It usually takes around 72 hours to complete the domain
                *             verification process.</p>
                */
            createEmailIdentity(args: CreateEmailIdentityCommandInput, options?: __HttpHandlerOptions): Promise<CreateEmailIdentityCommandOutput>;
            createEmailIdentity(args: CreateEmailIdentityCommandInput, cb: (err: any, data?: CreateEmailIdentityCommandOutput) => void): void;
            createEmailIdentity(args: CreateEmailIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEmailIdentityCommandOutput) => void): void;
            /**
                * <p>Delete an existing configuration set.</p>
                *         <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
                *             apply to the emails you send. You apply a configuration set to an email by including a
                *             reference to the configuration set in the headers of the email. When you apply a
                *             configuration set to an email, all of the rules in that configuration set are applied to
                *             the email.</p>
                */
            deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationSetCommandOutput>;
            deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, cb: (err: any, data?: DeleteConfigurationSetCommandOutput) => void): void;
            deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationSetCommandOutput) => void): void;
            /**
                * <p>Delete an event destination.</p>
                *         <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
                *             clicks, bounces, and complaints. <i>Event destinations</i> are places that
                *             you can send information about these events to. For example, you can send event data to
                *             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
                *             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
                */
            deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationSetEventDestinationCommandOutput>;
            deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: DeleteConfigurationSetEventDestinationCommandOutput) => void): void;
            deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationSetEventDestinationCommandOutput) => void): void;
            /**
                * <p>Delete a dedicated IP pool.</p>
                */
            deleteDedicatedIpPool(args: DeleteDedicatedIpPoolCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDedicatedIpPoolCommandOutput>;
            deleteDedicatedIpPool(args: DeleteDedicatedIpPoolCommandInput, cb: (err: any, data?: DeleteDedicatedIpPoolCommandOutput) => void): void;
            deleteDedicatedIpPool(args: DeleteDedicatedIpPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDedicatedIpPoolCommandOutput) => void): void;
            /**
                * <p>Deletes an email identity that you previously verified for use with Amazon Pinpoint. An identity
                *             can be either an email address or a domain name.</p>
                */
            deleteEmailIdentity(args: DeleteEmailIdentityCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEmailIdentityCommandOutput>;
            deleteEmailIdentity(args: DeleteEmailIdentityCommandInput, cb: (err: any, data?: DeleteEmailIdentityCommandOutput) => void): void;
            deleteEmailIdentity(args: DeleteEmailIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEmailIdentityCommandOutput) => void): void;
            /**
                * <p>Obtain information about the email-sending status and capabilities of your Amazon Pinpoint
                *             account in the current AWS Region.</p>
                */
            getAccount(args: GetAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountCommandOutput>;
            getAccount(args: GetAccountCommandInput, cb: (err: any, data?: GetAccountCommandOutput) => void): void;
            getAccount(args: GetAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountCommandOutput) => void): void;
            /**
                * <p>Retrieve a list of the blacklists that your dedicated IP addresses appear on.</p>
                */
            getBlacklistReports(args: GetBlacklistReportsCommandInput, options?: __HttpHandlerOptions): Promise<GetBlacklistReportsCommandOutput>;
            getBlacklistReports(args: GetBlacklistReportsCommandInput, cb: (err: any, data?: GetBlacklistReportsCommandOutput) => void): void;
            getBlacklistReports(args: GetBlacklistReportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlacklistReportsCommandOutput) => void): void;
            /**
                * <p>Get information about an existing configuration set, including the dedicated IP pool
                *             that it's associated with, whether or not it's enabled for sending email, and
                *             more.</p>
                *         <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
                *             apply to the emails you send. You apply a configuration set to an email by including a
                *             reference to the configuration set in the headers of the email. When you apply a
                *             configuration set to an email, all of the rules in that configuration set are applied to
                *             the email.</p>
                */
            getConfigurationSet(args: GetConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationSetCommandOutput>;
            getConfigurationSet(args: GetConfigurationSetCommandInput, cb: (err: any, data?: GetConfigurationSetCommandOutput) => void): void;
            getConfigurationSet(args: GetConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationSetCommandOutput) => void): void;
            /**
                * <p>Retrieve a list of event destinations that are associated with a configuration
                *             set.</p>
                *         <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
                *             clicks, bounces, and complaints. <i>Event destinations</i> are places that
                *             you can send information about these events to. For example, you can send event data to
                *             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
                *             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
                */
            getConfigurationSetEventDestinations(args: GetConfigurationSetEventDestinationsCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationSetEventDestinationsCommandOutput>;
            getConfigurationSetEventDestinations(args: GetConfigurationSetEventDestinationsCommandInput, cb: (err: any, data?: GetConfigurationSetEventDestinationsCommandOutput) => void): void;
            getConfigurationSetEventDestinations(args: GetConfigurationSetEventDestinationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationSetEventDestinationsCommandOutput) => void): void;
            /**
                * <p>Get information about a dedicated IP address, including the name of the dedicated IP
                *             pool that it's associated with, as well information about the automatic warm-up process
                *             for the address.</p>
                */
            getDedicatedIp(args: GetDedicatedIpCommandInput, options?: __HttpHandlerOptions): Promise<GetDedicatedIpCommandOutput>;
            getDedicatedIp(args: GetDedicatedIpCommandInput, cb: (err: any, data?: GetDedicatedIpCommandOutput) => void): void;
            getDedicatedIp(args: GetDedicatedIpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDedicatedIpCommandOutput) => void): void;
            /**
                * <p>List the dedicated IP addresses that are associated with your Amazon Pinpoint
                *             account.</p>
                */
            getDedicatedIps(args: GetDedicatedIpsCommandInput, options?: __HttpHandlerOptions): Promise<GetDedicatedIpsCommandOutput>;
            getDedicatedIps(args: GetDedicatedIpsCommandInput, cb: (err: any, data?: GetDedicatedIpsCommandOutput) => void): void;
            getDedicatedIps(args: GetDedicatedIpsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDedicatedIpsCommandOutput) => void): void;
            /**
                * <p>Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account.
                *             When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and
                *             other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the
                *             ability to perform predictive inbox placement tests.</p>
                *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
                *             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
                *             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
                */
            getDeliverabilityDashboardOptions(args: GetDeliverabilityDashboardOptionsCommandInput, options?: __HttpHandlerOptions): Promise<GetDeliverabilityDashboardOptionsCommandOutput>;
            getDeliverabilityDashboardOptions(args: GetDeliverabilityDashboardOptionsCommandInput, cb: (err: any, data?: GetDeliverabilityDashboardOptionsCommandOutput) => void): void;
            getDeliverabilityDashboardOptions(args: GetDeliverabilityDashboardOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeliverabilityDashboardOptionsCommandOutput) => void): void;
            /**
                * <p>Retrieve the results of a predictive inbox placement test.</p>
                */
            getDeliverabilityTestReport(args: GetDeliverabilityTestReportCommandInput, options?: __HttpHandlerOptions): Promise<GetDeliverabilityTestReportCommandOutput>;
            getDeliverabilityTestReport(args: GetDeliverabilityTestReportCommandInput, cb: (err: any, data?: GetDeliverabilityTestReportCommandOutput) => void): void;
            getDeliverabilityTestReport(args: GetDeliverabilityTestReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeliverabilityTestReportCommandOutput) => void): void;
            /**
                * <p>Retrieve all the deliverability data for a specific campaign. This data is available
                *             for a campaign only if the campaign sent email by using a domain that the
                *             Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
                *             operation).</p>
                */
            getDomainDeliverabilityCampaign(args: GetDomainDeliverabilityCampaignCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainDeliverabilityCampaignCommandOutput>;
            getDomainDeliverabilityCampaign(args: GetDomainDeliverabilityCampaignCommandInput, cb: (err: any, data?: GetDomainDeliverabilityCampaignCommandOutput) => void): void;
            getDomainDeliverabilityCampaign(args: GetDomainDeliverabilityCampaignCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainDeliverabilityCampaignCommandOutput) => void): void;
            /**
                * <p>Retrieve inbox placement and engagement rates for the domains that you use to send
                *             email.</p>
                */
            getDomainStatisticsReport(args: GetDomainStatisticsReportCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainStatisticsReportCommandOutput>;
            getDomainStatisticsReport(args: GetDomainStatisticsReportCommandInput, cb: (err: any, data?: GetDomainStatisticsReportCommandOutput) => void): void;
            getDomainStatisticsReport(args: GetDomainStatisticsReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainStatisticsReportCommandOutput) => void): void;
            /**
                * <p>Provides information about a specific identity associated with your Amazon Pinpoint account,
                *             including the identity's verification status, its DKIM authentication status, and its
                *             custom Mail-From settings.</p>
                */
            getEmailIdentity(args: GetEmailIdentityCommandInput, options?: __HttpHandlerOptions): Promise<GetEmailIdentityCommandOutput>;
            getEmailIdentity(args: GetEmailIdentityCommandInput, cb: (err: any, data?: GetEmailIdentityCommandOutput) => void): void;
            getEmailIdentity(args: GetEmailIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEmailIdentityCommandOutput) => void): void;
            /**
                * <p>List all of the configuration sets associated with your Amazon Pinpoint account in the current
                *             region.</p>
                *         <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
                *             apply to the emails you send. You apply a configuration set to an email by including a
                *             reference to the configuration set in the headers of the email. When you apply a
                *             configuration set to an email, all of the rules in that configuration set are applied to
                *             the email.</p>
                */
            listConfigurationSets(args: ListConfigurationSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationSetsCommandOutput>;
            listConfigurationSets(args: ListConfigurationSetsCommandInput, cb: (err: any, data?: ListConfigurationSetsCommandOutput) => void): void;
            listConfigurationSets(args: ListConfigurationSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationSetsCommandOutput) => void): void;
            /**
                * <p>List all of the dedicated IP pools that exist in your Amazon Pinpoint account in the current
                *             AWS Region.</p>
                */
            listDedicatedIpPools(args: ListDedicatedIpPoolsCommandInput, options?: __HttpHandlerOptions): Promise<ListDedicatedIpPoolsCommandOutput>;
            listDedicatedIpPools(args: ListDedicatedIpPoolsCommandInput, cb: (err: any, data?: ListDedicatedIpPoolsCommandOutput) => void): void;
            listDedicatedIpPools(args: ListDedicatedIpPoolsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDedicatedIpPoolsCommandOutput) => void): void;
            /**
                * <p>Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For
                *             predictive inbox placement tests that are complete, you can use the <code>GetDeliverabilityTestReport</code>
                *             operation to view the results.</p>
                */
            listDeliverabilityTestReports(args: ListDeliverabilityTestReportsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeliverabilityTestReportsCommandOutput>;
            listDeliverabilityTestReports(args: ListDeliverabilityTestReportsCommandInput, cb: (err: any, data?: ListDeliverabilityTestReportsCommandOutput) => void): void;
            listDeliverabilityTestReports(args: ListDeliverabilityTestReportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeliverabilityTestReportsCommandOutput) => void): void;
            /**
                * <p>Retrieve deliverability data for all the campaigns that used a specific domain to send
                *             email during a specified time range. This data is available for a domain only if you
                *             enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation)
                *             for the domain.</p>
                */
            listDomainDeliverabilityCampaigns(args: ListDomainDeliverabilityCampaignsCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainDeliverabilityCampaignsCommandOutput>;
            listDomainDeliverabilityCampaigns(args: ListDomainDeliverabilityCampaignsCommandInput, cb: (err: any, data?: ListDomainDeliverabilityCampaignsCommandOutput) => void): void;
            listDomainDeliverabilityCampaigns(args: ListDomainDeliverabilityCampaignsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainDeliverabilityCampaignsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all of the email identities that are associated with your Amazon Pinpoint
                *             account. An identity can be either an email address or a domain. This operation returns
                *             identities that are verified as well as those that aren't.</p>
                */
            listEmailIdentities(args: ListEmailIdentitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListEmailIdentitiesCommandOutput>;
            listEmailIdentities(args: ListEmailIdentitiesCommandInput, cb: (err: any, data?: ListEmailIdentitiesCommandOutput) => void): void;
            listEmailIdentities(args: ListEmailIdentitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEmailIdentitiesCommandOutput) => void): void;
            /**
                * <p>Retrieve a list of the tags (keys and values) that are associated with a specified
                *             resource. A <i>tag</i> is a label that you optionally define and associate
                *             with a resource in Amazon Pinpoint. Each tag consists of a required <i>tag
                *                 key</i> and an optional associated <i>tag value</i>. A tag key
                *             is a general label that acts as a category for more specific tag values. A tag value
                *             acts as a descriptor within a tag key.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Enable or disable the automatic warm-up feature for dedicated IP addresses.</p>
                */
            putAccountDedicatedIpWarmupAttributes(args: PutAccountDedicatedIpWarmupAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutAccountDedicatedIpWarmupAttributesCommandOutput>;
            putAccountDedicatedIpWarmupAttributes(args: PutAccountDedicatedIpWarmupAttributesCommandInput, cb: (err: any, data?: PutAccountDedicatedIpWarmupAttributesCommandOutput) => void): void;
            putAccountDedicatedIpWarmupAttributes(args: PutAccountDedicatedIpWarmupAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAccountDedicatedIpWarmupAttributesCommandOutput) => void): void;
            /**
                * <p>Enable or disable the ability of your account to send email.</p>
                */
            putAccountSendingAttributes(args: PutAccountSendingAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutAccountSendingAttributesCommandOutput>;
            putAccountSendingAttributes(args: PutAccountSendingAttributesCommandInput, cb: (err: any, data?: PutAccountSendingAttributesCommandOutput) => void): void;
            putAccountSendingAttributes(args: PutAccountSendingAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAccountSendingAttributesCommandOutput) => void): void;
            /**
                * <p>Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools
                *             to create groups of dedicated IP addresses for sending specific types of email.</p>
                */
            putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetDeliveryOptionsCommandOutput>;
            putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetDeliveryOptionsCommandOutput) => void): void;
            putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetDeliveryOptionsCommandOutput) => void): void;
            /**
                * <p>Enable or disable collection of reputation metrics for emails that you send using a
                *             particular configuration set in a specific AWS Region.</p>
                */
            putConfigurationSetReputationOptions(args: PutConfigurationSetReputationOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetReputationOptionsCommandOutput>;
            putConfigurationSetReputationOptions(args: PutConfigurationSetReputationOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetReputationOptionsCommandOutput) => void): void;
            putConfigurationSetReputationOptions(args: PutConfigurationSetReputationOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetReputationOptionsCommandOutput) => void): void;
            /**
                * <p>Enable or disable email sending for messages that use a particular configuration set
                *             in a specific AWS Region.</p>
                */
            putConfigurationSetSendingOptions(args: PutConfigurationSetSendingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetSendingOptionsCommandOutput>;
            putConfigurationSetSendingOptions(args: PutConfigurationSetSendingOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetSendingOptionsCommandOutput) => void): void;
            putConfigurationSetSendingOptions(args: PutConfigurationSetSendingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetSendingOptionsCommandOutput) => void): void;
            /**
                * <p>Specify a custom domain to use for open and click tracking elements in email that you
                *             send using Amazon Pinpoint.</p>
                */
            putConfigurationSetTrackingOptions(args: PutConfigurationSetTrackingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetTrackingOptionsCommandOutput>;
            putConfigurationSetTrackingOptions(args: PutConfigurationSetTrackingOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetTrackingOptionsCommandOutput) => void): void;
            putConfigurationSetTrackingOptions(args: PutConfigurationSetTrackingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetTrackingOptionsCommandOutput) => void): void;
            /**
                * <p>Move a dedicated IP address to an existing dedicated IP pool.</p>
                *         <note>
                *             <p>The dedicated IP address that you specify must already exist, and must be
                *                 associated with your Amazon Pinpoint account.
                *
                *             </p>
                *             <p>The dedicated IP pool you specify must already exist. You can create a new pool by
                *                 using the <code>CreateDedicatedIpPool</code> operation.</p>
                *
                *         </note>
                */
            putDedicatedIpInPool(args: PutDedicatedIpInPoolCommandInput, options?: __HttpHandlerOptions): Promise<PutDedicatedIpInPoolCommandOutput>;
            putDedicatedIpInPool(args: PutDedicatedIpInPoolCommandInput, cb: (err: any, data?: PutDedicatedIpInPoolCommandOutput) => void): void;
            putDedicatedIpInPool(args: PutDedicatedIpInPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDedicatedIpInPoolCommandOutput) => void): void;
            /**
                * <p></p>
                */
            putDedicatedIpWarmupAttributes(args: PutDedicatedIpWarmupAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutDedicatedIpWarmupAttributesCommandOutput>;
            putDedicatedIpWarmupAttributes(args: PutDedicatedIpWarmupAttributesCommandInput, cb: (err: any, data?: PutDedicatedIpWarmupAttributesCommandOutput) => void): void;
            putDedicatedIpWarmupAttributes(args: PutDedicatedIpWarmupAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDedicatedIpWarmupAttributesCommandOutput) => void): void;
            /**
                * <p>Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the
                *             Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for
                *             the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform
                *             predictive inbox placement tests.</p>
                *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
                *             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
                *             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
                */
            putDeliverabilityDashboardOption(args: PutDeliverabilityDashboardOptionCommandInput, options?: __HttpHandlerOptions): Promise<PutDeliverabilityDashboardOptionCommandOutput>;
            putDeliverabilityDashboardOption(args: PutDeliverabilityDashboardOptionCommandInput, cb: (err: any, data?: PutDeliverabilityDashboardOptionCommandOutput) => void): void;
            putDeliverabilityDashboardOption(args: PutDeliverabilityDashboardOptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDeliverabilityDashboardOptionCommandOutput) => void): void;
            /**
                * <p>Used to enable or disable DKIM authentication for an email identity.</p>
                */
            putEmailIdentityDkimAttributes(args: PutEmailIdentityDkimAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityDkimAttributesCommandOutput>;
            putEmailIdentityDkimAttributes(args: PutEmailIdentityDkimAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityDkimAttributesCommandOutput) => void): void;
            putEmailIdentityDkimAttributes(args: PutEmailIdentityDkimAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityDkimAttributesCommandOutput) => void): void;
            /**
                * <p>Used to enable or disable feedback forwarding for an identity. This setting determines
                *             what happens when an identity is used to send an email that results in a bounce or
                *             complaint event.</p>
                *         <p>When you enable feedback forwarding, Amazon Pinpoint sends you email notifications when bounce
                *             or complaint events occur. Amazon Pinpoint sends this notification to the address that you
                *             specified in the Return-Path header of the original email.</p>
                *         <p>When you disable feedback forwarding, Amazon Pinpoint sends notifications through other
                *             mechanisms, such as by notifying an Amazon SNS topic. You're required to have a method of
                *             tracking bounces and complaints. If you haven't set up another mechanism for receiving
                *             bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events
                *             occur (even if this setting is disabled).</p>
                */
            putEmailIdentityFeedbackAttributes(args: PutEmailIdentityFeedbackAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityFeedbackAttributesCommandOutput>;
            putEmailIdentityFeedbackAttributes(args: PutEmailIdentityFeedbackAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityFeedbackAttributesCommandOutput) => void): void;
            putEmailIdentityFeedbackAttributes(args: PutEmailIdentityFeedbackAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityFeedbackAttributesCommandOutput) => void): void;
            /**
                * <p>Used to enable or disable the custom Mail-From domain configuration for an email
                *             identity.</p>
                */
            putEmailIdentityMailFromAttributes(args: PutEmailIdentityMailFromAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityMailFromAttributesCommandOutput>;
            putEmailIdentityMailFromAttributes(args: PutEmailIdentityMailFromAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityMailFromAttributesCommandOutput) => void): void;
            putEmailIdentityMailFromAttributes(args: PutEmailIdentityMailFromAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityMailFromAttributesCommandOutput) => void): void;
            /**
                * <p>Sends an email message. You can use the Amazon Pinpoint Email API to send two types of
                *             messages:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>Simple</b> – A standard email message. When
                *                     you create this type of message, you specify the sender, the recipient, and the
                *                     message body, and Amazon Pinpoint assembles the message for you.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Raw</b> –  A raw, MIME-formatted email
                *                     message. When you send this type of email, you have to specify all of the
                *                     message headers, as well as the message body. You can use this message type to
                *                     send messages that contain attachments. The message that you specify has to be a
                *                     valid MIME message.</p>
                *             </li>
                *          </ul>
                */
            sendEmail(args: SendEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendEmailCommandOutput>;
            sendEmail(args: SendEmailCommandInput, cb: (err: any, data?: SendEmailCommandOutput) => void): void;
            sendEmail(args: SendEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendEmailCommandOutput) => void): void;
            /**
                * <p>Add one or more tags (keys and values) to a specified resource. A
                *                 <i>tag</i> is a label that you optionally define and associate with a
                *             resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways,
                *             such as by purpose, owner, environment, or other criteria. A resource can have as many
                *             as 50 tags.</p>
                *         <p>Each tag consists of a required <i>tag key</i> and an
                *                 associated <i>tag value</i>, both of which you define. A tag key is a
                *             general label that acts as a category for more specific tag values. A tag value acts as
                *             a descriptor within a tag key.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Remove one or more tags (keys and values) from a specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Update the configuration of an event destination for a configuration set.</p>
                *         <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
                *             clicks, bounces, and complaints. <i>Event destinations</i> are places that
                *             you can send information about these events to. For example, you can send event data to
                *             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
                *             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
                */
            updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationSetEventDestinationCommandOutput>;
            updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: UpdateConfigurationSetEventDestinationCommandOutput) => void): void;
            updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationSetEventDestinationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateConfigurationSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConfigurationSetRequest, CreateConfigurationSetResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface CreateConfigurationSetCommandInput extends CreateConfigurationSetRequest {
    }
    export interface CreateConfigurationSetCommandOutput extends CreateConfigurationSetResponse, __MetadataBearer {
    }
    /**
        * <p>Create a configuration set. <i>Configuration sets</i> are groups of
        *             rules that you can apply to the emails you send using Amazon Pinpoint. You apply a configuration
        *             set to an email by including a reference to the configuration set in the headers of the
        *             email. When you apply a configuration set to an email, all of the rules in that
        *             configuration set are applied to the email. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, CreateConfigurationSetCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, CreateConfigurationSetCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new CreateConfigurationSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationSetCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationSetCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class CreateConfigurationSetCommand extends $Command<CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: CreateConfigurationSetCommandInput;
            constructor(input: CreateConfigurationSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateConfigurationSetEventDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConfigurationSetEventDestinationRequest, CreateConfigurationSetEventDestinationResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface CreateConfigurationSetEventDestinationCommandInput extends CreateConfigurationSetEventDestinationRequest {
    }
    export interface CreateConfigurationSetEventDestinationCommandOutput extends CreateConfigurationSetEventDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Create an event destination. In Amazon Pinpoint, <i>events</i> include message
        *             sends, deliveries, opens, clicks, bounces, and complaints. <i>Event
        *                 destinations</i> are places that you can send information about these events
        *             to. For example, you can send event data to Amazon SNS to receive notifications when you
        *             receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term
        *             storage.</p>
        *         <p>A single configuration set can include more than one event destination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, CreateConfigurationSetEventDestinationCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, CreateConfigurationSetEventDestinationCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new CreateConfigurationSetEventDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationSetEventDestinationCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationSetEventDestinationCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class CreateConfigurationSetEventDestinationCommand extends $Command<CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: CreateConfigurationSetEventDestinationCommandInput;
            constructor(input: CreateConfigurationSetEventDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateDedicatedIpPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDedicatedIpPoolRequest, CreateDedicatedIpPoolResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface CreateDedicatedIpPoolCommandInput extends CreateDedicatedIpPoolRequest {
    }
    export interface CreateDedicatedIpPoolCommandOutput extends CreateDedicatedIpPoolResponse, __MetadataBearer {
    }
    /**
        * <p>Create a new pool of dedicated IP addresses. A pool can include one or more dedicated
        *             IP addresses that are associated with your Amazon Pinpoint account. You can associate a pool with
        *             a configuration set. When you send an email that uses that configuration set, Amazon Pinpoint
        *             sends it using only the IP addresses in the associated pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, CreateDedicatedIpPoolCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, CreateDedicatedIpPoolCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new CreateDedicatedIpPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDedicatedIpPoolCommandInput} for command's `input` shape.
        * @see {@link CreateDedicatedIpPoolCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class CreateDedicatedIpPoolCommand extends $Command<CreateDedicatedIpPoolCommandInput, CreateDedicatedIpPoolCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: CreateDedicatedIpPoolCommandInput;
            constructor(input: CreateDedicatedIpPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDedicatedIpPoolCommandInput, CreateDedicatedIpPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateDeliverabilityTestReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDeliverabilityTestReportRequest, CreateDeliverabilityTestReportResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface CreateDeliverabilityTestReportCommandInput extends CreateDeliverabilityTestReportRequest {
    }
    export interface CreateDeliverabilityTestReportCommandOutput extends CreateDeliverabilityTestReportResponse, __MetadataBearer {
    }
    /**
        * <p>Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled
        *             by various email providers around the world. When you perform a predictive inbox placement test, you provide a
        *             sample message that contains the content that you plan to send to your customers. Amazon Pinpoint
        *             then sends that message to special email addresses spread across several major email
        *             providers. After about 24 hours, the test is complete, and you can use the
        *                 <code>GetDeliverabilityTestReport</code> operation to view the results of the
        *             test.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, CreateDeliverabilityTestReportCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, CreateDeliverabilityTestReportCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new CreateDeliverabilityTestReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeliverabilityTestReportCommandInput} for command's `input` shape.
        * @see {@link CreateDeliverabilityTestReportCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class CreateDeliverabilityTestReportCommand extends $Command<CreateDeliverabilityTestReportCommandInput, CreateDeliverabilityTestReportCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: CreateDeliverabilityTestReportCommandInput;
            constructor(input: CreateDeliverabilityTestReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeliverabilityTestReportCommandInput, CreateDeliverabilityTestReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateEmailIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEmailIdentityRequest, CreateEmailIdentityResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface CreateEmailIdentityCommandInput extends CreateEmailIdentityRequest {
    }
    export interface CreateEmailIdentityCommandOutput extends CreateEmailIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Verifies an email identity for use with Amazon Pinpoint. In Amazon Pinpoint, an identity is an email
        *             address or domain that you use when you send email. Before you can use an identity to
        *             send email with Amazon Pinpoint, you first have to verify it. By verifying an address, you
        *             demonstrate that you're the owner of the address, and that you've given Amazon Pinpoint permission
        *             to send email from the address.</p>
        *         <p>When you verify an email address, Amazon Pinpoint sends an email to the address. Your email
        *             address is verified as soon as you follow the link in the verification email.
        *
        *         </p>
        *         <p>When you verify a domain, this operation provides a set of DKIM tokens, which you can
        *             convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your
        *             domain. Your domain is verified when Amazon Pinpoint detects these records in the DNS
        *             configuration for your domain. It usually takes around 72 hours to complete the domain
        *             verification process.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, CreateEmailIdentityCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, CreateEmailIdentityCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new CreateEmailIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEmailIdentityCommandInput} for command's `input` shape.
        * @see {@link CreateEmailIdentityCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class CreateEmailIdentityCommand extends $Command<CreateEmailIdentityCommandInput, CreateEmailIdentityCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: CreateEmailIdentityCommandInput;
            constructor(input: CreateEmailIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEmailIdentityCommandInput, CreateEmailIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteConfigurationSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConfigurationSetRequest, DeleteConfigurationSetResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface DeleteConfigurationSetCommandInput extends DeleteConfigurationSetRequest {
    }
    export interface DeleteConfigurationSetCommandOutput extends DeleteConfigurationSetResponse, __MetadataBearer {
    }
    /**
        * <p>Delete an existing configuration set.</p>
        *         <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
        *             apply to the emails you send. You apply a configuration set to an email by including a
        *             reference to the configuration set in the headers of the email. When you apply a
        *             configuration set to an email, all of the rules in that configuration set are applied to
        *             the email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, DeleteConfigurationSetCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, DeleteConfigurationSetCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new DeleteConfigurationSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationSetCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationSetCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class DeleteConfigurationSetCommand extends $Command<DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: DeleteConfigurationSetCommandInput;
            constructor(input: DeleteConfigurationSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteConfigurationSetEventDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConfigurationSetEventDestinationRequest, DeleteConfigurationSetEventDestinationResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface DeleteConfigurationSetEventDestinationCommandInput extends DeleteConfigurationSetEventDestinationRequest {
    }
    export interface DeleteConfigurationSetEventDestinationCommandOutput extends DeleteConfigurationSetEventDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Delete an event destination.</p>
        *         <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
        *             clicks, bounces, and complaints. <i>Event destinations</i> are places that
        *             you can send information about these events to. For example, you can send event data to
        *             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
        *             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, DeleteConfigurationSetEventDestinationCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, DeleteConfigurationSetEventDestinationCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new DeleteConfigurationSetEventDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationSetEventDestinationCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationSetEventDestinationCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class DeleteConfigurationSetEventDestinationCommand extends $Command<DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: DeleteConfigurationSetEventDestinationCommandInput;
            constructor(input: DeleteConfigurationSetEventDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteDedicatedIpPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDedicatedIpPoolRequest, DeleteDedicatedIpPoolResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface DeleteDedicatedIpPoolCommandInput extends DeleteDedicatedIpPoolRequest {
    }
    export interface DeleteDedicatedIpPoolCommandOutput extends DeleteDedicatedIpPoolResponse, __MetadataBearer {
    }
    /**
        * <p>Delete a dedicated IP pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, DeleteDedicatedIpPoolCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, DeleteDedicatedIpPoolCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new DeleteDedicatedIpPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDedicatedIpPoolCommandInput} for command's `input` shape.
        * @see {@link DeleteDedicatedIpPoolCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class DeleteDedicatedIpPoolCommand extends $Command<DeleteDedicatedIpPoolCommandInput, DeleteDedicatedIpPoolCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: DeleteDedicatedIpPoolCommandInput;
            constructor(input: DeleteDedicatedIpPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDedicatedIpPoolCommandInput, DeleteDedicatedIpPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteEmailIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteEmailIdentityRequest, DeleteEmailIdentityResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface DeleteEmailIdentityCommandInput extends DeleteEmailIdentityRequest {
    }
    export interface DeleteEmailIdentityCommandOutput extends DeleteEmailIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an email identity that you previously verified for use with Amazon Pinpoint. An identity
        *             can be either an email address or a domain name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, DeleteEmailIdentityCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, DeleteEmailIdentityCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new DeleteEmailIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEmailIdentityCommandInput} for command's `input` shape.
        * @see {@link DeleteEmailIdentityCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class DeleteEmailIdentityCommand extends $Command<DeleteEmailIdentityCommandInput, DeleteEmailIdentityCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: DeleteEmailIdentityCommandInput;
            constructor(input: DeleteEmailIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEmailIdentityCommandInput, DeleteEmailIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAccountRequest, GetAccountResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetAccountCommandInput extends GetAccountRequest {
    }
    export interface GetAccountCommandOutput extends GetAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Obtain information about the email-sending status and capabilities of your Amazon Pinpoint
        *             account in the current AWS Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetAccountCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetAccountCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountCommandInput} for command's `input` shape.
        * @see {@link GetAccountCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetAccountCommand extends $Command<GetAccountCommandInput, GetAccountCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetAccountCommandInput;
            constructor(input: GetAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountCommandInput, GetAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetBlacklistReportsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetBlacklistReportsRequest, GetBlacklistReportsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetBlacklistReportsCommandInput extends GetBlacklistReportsRequest {
    }
    export interface GetBlacklistReportsCommandOutput extends GetBlacklistReportsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve a list of the blacklists that your dedicated IP addresses appear on.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetBlacklistReportsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetBlacklistReportsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetBlacklistReportsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBlacklistReportsCommandInput} for command's `input` shape.
        * @see {@link GetBlacklistReportsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetBlacklistReportsCommand extends $Command<GetBlacklistReportsCommandInput, GetBlacklistReportsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetBlacklistReportsCommandInput;
            constructor(input: GetBlacklistReportsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBlacklistReportsCommandInput, GetBlacklistReportsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetConfigurationSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConfigurationSetRequest, GetConfigurationSetResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetConfigurationSetCommandInput extends GetConfigurationSetRequest {
    }
    export interface GetConfigurationSetCommandOutput extends GetConfigurationSetResponse, __MetadataBearer {
    }
    /**
        * <p>Get information about an existing configuration set, including the dedicated IP pool
        *             that it's associated with, whether or not it's enabled for sending email, and
        *             more.</p>
        *         <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
        *             apply to the emails you send. You apply a configuration set to an email by including a
        *             reference to the configuration set in the headers of the email. When you apply a
        *             configuration set to an email, all of the rules in that configuration set are applied to
        *             the email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetConfigurationSetCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetConfigurationSetCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetConfigurationSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConfigurationSetCommandInput} for command's `input` shape.
        * @see {@link GetConfigurationSetCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetConfigurationSetCommand extends $Command<GetConfigurationSetCommandInput, GetConfigurationSetCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetConfigurationSetCommandInput;
            constructor(input: GetConfigurationSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConfigurationSetCommandInput, GetConfigurationSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetConfigurationSetEventDestinationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConfigurationSetEventDestinationsRequest, GetConfigurationSetEventDestinationsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetConfigurationSetEventDestinationsCommandInput extends GetConfigurationSetEventDestinationsRequest {
    }
    export interface GetConfigurationSetEventDestinationsCommandOutput extends GetConfigurationSetEventDestinationsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve a list of event destinations that are associated with a configuration
        *             set.</p>
        *         <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
        *             clicks, bounces, and complaints. <i>Event destinations</i> are places that
        *             you can send information about these events to. For example, you can send event data to
        *             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
        *             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetConfigurationSetEventDestinationsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetConfigurationSetEventDestinationsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetConfigurationSetEventDestinationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConfigurationSetEventDestinationsCommandInput} for command's `input` shape.
        * @see {@link GetConfigurationSetEventDestinationsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetConfigurationSetEventDestinationsCommand extends $Command<GetConfigurationSetEventDestinationsCommandInput, GetConfigurationSetEventDestinationsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetConfigurationSetEventDestinationsCommandInput;
            constructor(input: GetConfigurationSetEventDestinationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConfigurationSetEventDestinationsCommandInput, GetConfigurationSetEventDestinationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDedicatedIpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDedicatedIpRequest, GetDedicatedIpResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetDedicatedIpCommandInput extends GetDedicatedIpRequest {
    }
    export interface GetDedicatedIpCommandOutput extends GetDedicatedIpResponse, __MetadataBearer {
    }
    /**
        * <p>Get information about a dedicated IP address, including the name of the dedicated IP
        *             pool that it's associated with, as well information about the automatic warm-up process
        *             for the address.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetDedicatedIpCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetDedicatedIpCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetDedicatedIpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDedicatedIpCommandInput} for command's `input` shape.
        * @see {@link GetDedicatedIpCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetDedicatedIpCommand extends $Command<GetDedicatedIpCommandInput, GetDedicatedIpCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetDedicatedIpCommandInput;
            constructor(input: GetDedicatedIpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDedicatedIpCommandInput, GetDedicatedIpCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDedicatedIpsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDedicatedIpsRequest, GetDedicatedIpsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetDedicatedIpsCommandInput extends GetDedicatedIpsRequest {
    }
    export interface GetDedicatedIpsCommandOutput extends GetDedicatedIpsResponse, __MetadataBearer {
    }
    /**
        * <p>List the dedicated IP addresses that are associated with your Amazon Pinpoint
        *             account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetDedicatedIpsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetDedicatedIpsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetDedicatedIpsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDedicatedIpsCommandInput} for command's `input` shape.
        * @see {@link GetDedicatedIpsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetDedicatedIpsCommand extends $Command<GetDedicatedIpsCommandInput, GetDedicatedIpsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetDedicatedIpsCommandInput;
            constructor(input: GetDedicatedIpsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDedicatedIpsCommandInput, GetDedicatedIpsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDeliverabilityDashboardOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDeliverabilityDashboardOptionsRequest, GetDeliverabilityDashboardOptionsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetDeliverabilityDashboardOptionsCommandInput extends GetDeliverabilityDashboardOptionsRequest {
    }
    export interface GetDeliverabilityDashboardOptionsCommandOutput extends GetDeliverabilityDashboardOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account.
        *             When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and
        *             other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the
        *             ability to perform predictive inbox placement tests.</p>
        *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
        *             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
        *             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetDeliverabilityDashboardOptionsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetDeliverabilityDashboardOptionsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetDeliverabilityDashboardOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeliverabilityDashboardOptionsCommandInput} for command's `input` shape.
        * @see {@link GetDeliverabilityDashboardOptionsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetDeliverabilityDashboardOptionsCommand extends $Command<GetDeliverabilityDashboardOptionsCommandInput, GetDeliverabilityDashboardOptionsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetDeliverabilityDashboardOptionsCommandInput;
            constructor(input: GetDeliverabilityDashboardOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeliverabilityDashboardOptionsCommandInput, GetDeliverabilityDashboardOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDeliverabilityTestReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDeliverabilityTestReportRequest, GetDeliverabilityTestReportResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetDeliverabilityTestReportCommandInput extends GetDeliverabilityTestReportRequest {
    }
    export interface GetDeliverabilityTestReportCommandOutput extends GetDeliverabilityTestReportResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve the results of a predictive inbox placement test.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetDeliverabilityTestReportCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetDeliverabilityTestReportCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetDeliverabilityTestReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeliverabilityTestReportCommandInput} for command's `input` shape.
        * @see {@link GetDeliverabilityTestReportCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetDeliverabilityTestReportCommand extends $Command<GetDeliverabilityTestReportCommandInput, GetDeliverabilityTestReportCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetDeliverabilityTestReportCommandInput;
            constructor(input: GetDeliverabilityTestReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeliverabilityTestReportCommandInput, GetDeliverabilityTestReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDomainDeliverabilityCampaignCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDomainDeliverabilityCampaignRequest, GetDomainDeliverabilityCampaignResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetDomainDeliverabilityCampaignCommandInput extends GetDomainDeliverabilityCampaignRequest {
    }
    export interface GetDomainDeliverabilityCampaignCommandOutput extends GetDomainDeliverabilityCampaignResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve all the deliverability data for a specific campaign. This data is available
        *             for a campaign only if the campaign sent email by using a domain that the
        *             Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
        *             operation).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetDomainDeliverabilityCampaignCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetDomainDeliverabilityCampaignCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetDomainDeliverabilityCampaignCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainDeliverabilityCampaignCommandInput} for command's `input` shape.
        * @see {@link GetDomainDeliverabilityCampaignCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetDomainDeliverabilityCampaignCommand extends $Command<GetDomainDeliverabilityCampaignCommandInput, GetDomainDeliverabilityCampaignCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetDomainDeliverabilityCampaignCommandInput;
            constructor(input: GetDomainDeliverabilityCampaignCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainDeliverabilityCampaignCommandInput, GetDomainDeliverabilityCampaignCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDomainStatisticsReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDomainStatisticsReportRequest, GetDomainStatisticsReportResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetDomainStatisticsReportCommandInput extends GetDomainStatisticsReportRequest {
    }
    export interface GetDomainStatisticsReportCommandOutput extends GetDomainStatisticsReportResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve inbox placement and engagement rates for the domains that you use to send
        *             email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetDomainStatisticsReportCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetDomainStatisticsReportCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetDomainStatisticsReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainStatisticsReportCommandInput} for command's `input` shape.
        * @see {@link GetDomainStatisticsReportCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetDomainStatisticsReportCommand extends $Command<GetDomainStatisticsReportCommandInput, GetDomainStatisticsReportCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetDomainStatisticsReportCommandInput;
            constructor(input: GetDomainStatisticsReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainStatisticsReportCommandInput, GetDomainStatisticsReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetEmailIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetEmailIdentityRequest, GetEmailIdentityResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface GetEmailIdentityCommandInput extends GetEmailIdentityRequest {
    }
    export interface GetEmailIdentityCommandOutput extends GetEmailIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about a specific identity associated with your Amazon Pinpoint account,
        *             including the identity's verification status, its DKIM authentication status, and its
        *             custom Mail-From settings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, GetEmailIdentityCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, GetEmailIdentityCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new GetEmailIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEmailIdentityCommandInput} for command's `input` shape.
        * @see {@link GetEmailIdentityCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class GetEmailIdentityCommand extends $Command<GetEmailIdentityCommandInput, GetEmailIdentityCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: GetEmailIdentityCommandInput;
            constructor(input: GetEmailIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEmailIdentityCommandInput, GetEmailIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListConfigurationSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListConfigurationSetsRequest, ListConfigurationSetsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface ListConfigurationSetsCommandInput extends ListConfigurationSetsRequest {
    }
    export interface ListConfigurationSetsCommandOutput extends ListConfigurationSetsResponse, __MetadataBearer {
    }
    /**
        * <p>List all of the configuration sets associated with your Amazon Pinpoint account in the current
        *             region.</p>
        *         <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
        *             apply to the emails you send. You apply a configuration set to an email by including a
        *             reference to the configuration set in the headers of the email. When you apply a
        *             configuration set to an email, all of the rules in that configuration set are applied to
        *             the email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, ListConfigurationSetsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, ListConfigurationSetsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new ListConfigurationSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigurationSetsCommandInput} for command's `input` shape.
        * @see {@link ListConfigurationSetsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class ListConfigurationSetsCommand extends $Command<ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: ListConfigurationSetsCommandInput;
            constructor(input: ListConfigurationSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDedicatedIpPoolsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDedicatedIpPoolsRequest, ListDedicatedIpPoolsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface ListDedicatedIpPoolsCommandInput extends ListDedicatedIpPoolsRequest {
    }
    export interface ListDedicatedIpPoolsCommandOutput extends ListDedicatedIpPoolsResponse, __MetadataBearer {
    }
    /**
        * <p>List all of the dedicated IP pools that exist in your Amazon Pinpoint account in the current
        *             AWS Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, ListDedicatedIpPoolsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, ListDedicatedIpPoolsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new ListDedicatedIpPoolsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDedicatedIpPoolsCommandInput} for command's `input` shape.
        * @see {@link ListDedicatedIpPoolsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class ListDedicatedIpPoolsCommand extends $Command<ListDedicatedIpPoolsCommandInput, ListDedicatedIpPoolsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: ListDedicatedIpPoolsCommandInput;
            constructor(input: ListDedicatedIpPoolsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDedicatedIpPoolsCommandInput, ListDedicatedIpPoolsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDeliverabilityTestReportsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDeliverabilityTestReportsRequest, ListDeliverabilityTestReportsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface ListDeliverabilityTestReportsCommandInput extends ListDeliverabilityTestReportsRequest {
    }
    export interface ListDeliverabilityTestReportsCommandOutput extends ListDeliverabilityTestReportsResponse, __MetadataBearer {
    }
    /**
        * <p>Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For
        *             predictive inbox placement tests that are complete, you can use the <code>GetDeliverabilityTestReport</code>
        *             operation to view the results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, ListDeliverabilityTestReportsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, ListDeliverabilityTestReportsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new ListDeliverabilityTestReportsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeliverabilityTestReportsCommandInput} for command's `input` shape.
        * @see {@link ListDeliverabilityTestReportsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class ListDeliverabilityTestReportsCommand extends $Command<ListDeliverabilityTestReportsCommandInput, ListDeliverabilityTestReportsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: ListDeliverabilityTestReportsCommandInput;
            constructor(input: ListDeliverabilityTestReportsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeliverabilityTestReportsCommandInput, ListDeliverabilityTestReportsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDomainDeliverabilityCampaignsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDomainDeliverabilityCampaignsRequest, ListDomainDeliverabilityCampaignsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface ListDomainDeliverabilityCampaignsCommandInput extends ListDomainDeliverabilityCampaignsRequest {
    }
    export interface ListDomainDeliverabilityCampaignsCommandOutput extends ListDomainDeliverabilityCampaignsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve deliverability data for all the campaigns that used a specific domain to send
        *             email during a specified time range. This data is available for a domain only if you
        *             enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation)
        *             for the domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, ListDomainDeliverabilityCampaignsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, ListDomainDeliverabilityCampaignsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new ListDomainDeliverabilityCampaignsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDomainDeliverabilityCampaignsCommandInput} for command's `input` shape.
        * @see {@link ListDomainDeliverabilityCampaignsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class ListDomainDeliverabilityCampaignsCommand extends $Command<ListDomainDeliverabilityCampaignsCommandInput, ListDomainDeliverabilityCampaignsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: ListDomainDeliverabilityCampaignsCommandInput;
            constructor(input: ListDomainDeliverabilityCampaignsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDomainDeliverabilityCampaignsCommandInput, ListDomainDeliverabilityCampaignsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListEmailIdentitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEmailIdentitiesRequest, ListEmailIdentitiesResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface ListEmailIdentitiesCommandInput extends ListEmailIdentitiesRequest {
    }
    export interface ListEmailIdentitiesCommandOutput extends ListEmailIdentitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all of the email identities that are associated with your Amazon Pinpoint
        *             account. An identity can be either an email address or a domain. This operation returns
        *             identities that are verified as well as those that aren't.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, ListEmailIdentitiesCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, ListEmailIdentitiesCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new ListEmailIdentitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEmailIdentitiesCommandInput} for command's `input` shape.
        * @see {@link ListEmailIdentitiesCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class ListEmailIdentitiesCommand extends $Command<ListEmailIdentitiesCommandInput, ListEmailIdentitiesCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: ListEmailIdentitiesCommandInput;
            constructor(input: ListEmailIdentitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEmailIdentitiesCommandInput, ListEmailIdentitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve a list of the tags (keys and values) that are associated with a specified
        *             resource. A <i>tag</i> is a label that you optionally define and associate
        *             with a resource in Amazon Pinpoint. Each tag consists of a required <i>tag
        *                 key</i> and an optional associated <i>tag value</i>. A tag key
        *             is a general label that acts as a category for more specific tag values. A tag value
        *             acts as a descriptor within a tag key.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, ListTagsForResourceCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, ListTagsForResourceCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutAccountDedicatedIpWarmupAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutAccountDedicatedIpWarmupAttributesRequest, PutAccountDedicatedIpWarmupAttributesResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutAccountDedicatedIpWarmupAttributesCommandInput extends PutAccountDedicatedIpWarmupAttributesRequest {
    }
    export interface PutAccountDedicatedIpWarmupAttributesCommandOutput extends PutAccountDedicatedIpWarmupAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Enable or disable the automatic warm-up feature for dedicated IP addresses.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutAccountDedicatedIpWarmupAttributesCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutAccountDedicatedIpWarmupAttributesCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutAccountDedicatedIpWarmupAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAccountDedicatedIpWarmupAttributesCommandInput} for command's `input` shape.
        * @see {@link PutAccountDedicatedIpWarmupAttributesCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutAccountDedicatedIpWarmupAttributesCommand extends $Command<PutAccountDedicatedIpWarmupAttributesCommandInput, PutAccountDedicatedIpWarmupAttributesCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutAccountDedicatedIpWarmupAttributesCommandInput;
            constructor(input: PutAccountDedicatedIpWarmupAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAccountDedicatedIpWarmupAttributesCommandInput, PutAccountDedicatedIpWarmupAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutAccountSendingAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutAccountSendingAttributesRequest, PutAccountSendingAttributesResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutAccountSendingAttributesCommandInput extends PutAccountSendingAttributesRequest {
    }
    export interface PutAccountSendingAttributesCommandOutput extends PutAccountSendingAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Enable or disable the ability of your account to send email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutAccountSendingAttributesCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutAccountSendingAttributesCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutAccountSendingAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAccountSendingAttributesCommandInput} for command's `input` shape.
        * @see {@link PutAccountSendingAttributesCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutAccountSendingAttributesCommand extends $Command<PutAccountSendingAttributesCommandInput, PutAccountSendingAttributesCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutAccountSendingAttributesCommandInput;
            constructor(input: PutAccountSendingAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAccountSendingAttributesCommandInput, PutAccountSendingAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetDeliveryOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutConfigurationSetDeliveryOptionsRequest, PutConfigurationSetDeliveryOptionsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutConfigurationSetDeliveryOptionsCommandInput extends PutConfigurationSetDeliveryOptionsRequest {
    }
    export interface PutConfigurationSetDeliveryOptionsCommandOutput extends PutConfigurationSetDeliveryOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools
        *             to create groups of dedicated IP addresses for sending specific types of email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutConfigurationSetDeliveryOptionsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutConfigurationSetDeliveryOptionsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutConfigurationSetDeliveryOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigurationSetDeliveryOptionsCommandInput} for command's `input` shape.
        * @see {@link PutConfigurationSetDeliveryOptionsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutConfigurationSetDeliveryOptionsCommand extends $Command<PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutConfigurationSetDeliveryOptionsCommandInput;
            constructor(input: PutConfigurationSetDeliveryOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetReputationOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutConfigurationSetReputationOptionsRequest, PutConfigurationSetReputationOptionsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutConfigurationSetReputationOptionsCommandInput extends PutConfigurationSetReputationOptionsRequest {
    }
    export interface PutConfigurationSetReputationOptionsCommandOutput extends PutConfigurationSetReputationOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Enable or disable collection of reputation metrics for emails that you send using a
        *             particular configuration set in a specific AWS Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutConfigurationSetReputationOptionsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutConfigurationSetReputationOptionsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutConfigurationSetReputationOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigurationSetReputationOptionsCommandInput} for command's `input` shape.
        * @see {@link PutConfigurationSetReputationOptionsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutConfigurationSetReputationOptionsCommand extends $Command<PutConfigurationSetReputationOptionsCommandInput, PutConfigurationSetReputationOptionsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutConfigurationSetReputationOptionsCommandInput;
            constructor(input: PutConfigurationSetReputationOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigurationSetReputationOptionsCommandInput, PutConfigurationSetReputationOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetSendingOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutConfigurationSetSendingOptionsRequest, PutConfigurationSetSendingOptionsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutConfigurationSetSendingOptionsCommandInput extends PutConfigurationSetSendingOptionsRequest {
    }
    export interface PutConfigurationSetSendingOptionsCommandOutput extends PutConfigurationSetSendingOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Enable or disable email sending for messages that use a particular configuration set
        *             in a specific AWS Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutConfigurationSetSendingOptionsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutConfigurationSetSendingOptionsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutConfigurationSetSendingOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigurationSetSendingOptionsCommandInput} for command's `input` shape.
        * @see {@link PutConfigurationSetSendingOptionsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutConfigurationSetSendingOptionsCommand extends $Command<PutConfigurationSetSendingOptionsCommandInput, PutConfigurationSetSendingOptionsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutConfigurationSetSendingOptionsCommandInput;
            constructor(input: PutConfigurationSetSendingOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigurationSetSendingOptionsCommandInput, PutConfigurationSetSendingOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetTrackingOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutConfigurationSetTrackingOptionsRequest, PutConfigurationSetTrackingOptionsResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutConfigurationSetTrackingOptionsCommandInput extends PutConfigurationSetTrackingOptionsRequest {
    }
    export interface PutConfigurationSetTrackingOptionsCommandOutput extends PutConfigurationSetTrackingOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Specify a custom domain to use for open and click tracking elements in email that you
        *             send using Amazon Pinpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutConfigurationSetTrackingOptionsCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutConfigurationSetTrackingOptionsCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutConfigurationSetTrackingOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigurationSetTrackingOptionsCommandInput} for command's `input` shape.
        * @see {@link PutConfigurationSetTrackingOptionsCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutConfigurationSetTrackingOptionsCommand extends $Command<PutConfigurationSetTrackingOptionsCommandInput, PutConfigurationSetTrackingOptionsCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutConfigurationSetTrackingOptionsCommandInput;
            constructor(input: PutConfigurationSetTrackingOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigurationSetTrackingOptionsCommandInput, PutConfigurationSetTrackingOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDedicatedIpInPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutDedicatedIpInPoolRequest, PutDedicatedIpInPoolResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutDedicatedIpInPoolCommandInput extends PutDedicatedIpInPoolRequest {
    }
    export interface PutDedicatedIpInPoolCommandOutput extends PutDedicatedIpInPoolResponse, __MetadataBearer {
    }
    /**
        * <p>Move a dedicated IP address to an existing dedicated IP pool.</p>
        *         <note>
        *             <p>The dedicated IP address that you specify must already exist, and must be
        *                 associated with your Amazon Pinpoint account.
        *
        *             </p>
        *             <p>The dedicated IP pool you specify must already exist. You can create a new pool by
        *                 using the <code>CreateDedicatedIpPool</code> operation.</p>
        *
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutDedicatedIpInPoolCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutDedicatedIpInPoolCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutDedicatedIpInPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDedicatedIpInPoolCommandInput} for command's `input` shape.
        * @see {@link PutDedicatedIpInPoolCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutDedicatedIpInPoolCommand extends $Command<PutDedicatedIpInPoolCommandInput, PutDedicatedIpInPoolCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutDedicatedIpInPoolCommandInput;
            constructor(input: PutDedicatedIpInPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDedicatedIpInPoolCommandInput, PutDedicatedIpInPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDedicatedIpWarmupAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutDedicatedIpWarmupAttributesRequest, PutDedicatedIpWarmupAttributesResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutDedicatedIpWarmupAttributesCommandInput extends PutDedicatedIpWarmupAttributesRequest {
    }
    export interface PutDedicatedIpWarmupAttributesCommandOutput extends PutDedicatedIpWarmupAttributesResponse, __MetadataBearer {
    }
    /**
        * <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutDedicatedIpWarmupAttributesCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutDedicatedIpWarmupAttributesCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutDedicatedIpWarmupAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDedicatedIpWarmupAttributesCommandInput} for command's `input` shape.
        * @see {@link PutDedicatedIpWarmupAttributesCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutDedicatedIpWarmupAttributesCommand extends $Command<PutDedicatedIpWarmupAttributesCommandInput, PutDedicatedIpWarmupAttributesCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutDedicatedIpWarmupAttributesCommandInput;
            constructor(input: PutDedicatedIpWarmupAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDedicatedIpWarmupAttributesCommandInput, PutDedicatedIpWarmupAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDeliverabilityDashboardOptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutDeliverabilityDashboardOptionRequest, PutDeliverabilityDashboardOptionResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutDeliverabilityDashboardOptionCommandInput extends PutDeliverabilityDashboardOptionRequest {
    }
    export interface PutDeliverabilityDashboardOptionCommandOutput extends PutDeliverabilityDashboardOptionResponse, __MetadataBearer {
    }
    /**
        * <p>Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the
        *             Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for
        *             the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform
        *             predictive inbox placement tests.</p>
        *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
        *             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
        *             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutDeliverabilityDashboardOptionCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutDeliverabilityDashboardOptionCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutDeliverabilityDashboardOptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDeliverabilityDashboardOptionCommandInput} for command's `input` shape.
        * @see {@link PutDeliverabilityDashboardOptionCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutDeliverabilityDashboardOptionCommand extends $Command<PutDeliverabilityDashboardOptionCommandInput, PutDeliverabilityDashboardOptionCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutDeliverabilityDashboardOptionCommandInput;
            constructor(input: PutDeliverabilityDashboardOptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDeliverabilityDashboardOptionCommandInput, PutDeliverabilityDashboardOptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityDkimAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutEmailIdentityDkimAttributesRequest, PutEmailIdentityDkimAttributesResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutEmailIdentityDkimAttributesCommandInput extends PutEmailIdentityDkimAttributesRequest {
    }
    export interface PutEmailIdentityDkimAttributesCommandOutput extends PutEmailIdentityDkimAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Used to enable or disable DKIM authentication for an email identity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutEmailIdentityDkimAttributesCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutEmailIdentityDkimAttributesCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutEmailIdentityDkimAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEmailIdentityDkimAttributesCommandInput} for command's `input` shape.
        * @see {@link PutEmailIdentityDkimAttributesCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutEmailIdentityDkimAttributesCommand extends $Command<PutEmailIdentityDkimAttributesCommandInput, PutEmailIdentityDkimAttributesCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutEmailIdentityDkimAttributesCommandInput;
            constructor(input: PutEmailIdentityDkimAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEmailIdentityDkimAttributesCommandInput, PutEmailIdentityDkimAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityFeedbackAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutEmailIdentityFeedbackAttributesRequest, PutEmailIdentityFeedbackAttributesResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutEmailIdentityFeedbackAttributesCommandInput extends PutEmailIdentityFeedbackAttributesRequest {
    }
    export interface PutEmailIdentityFeedbackAttributesCommandOutput extends PutEmailIdentityFeedbackAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Used to enable or disable feedback forwarding for an identity. This setting determines
        *             what happens when an identity is used to send an email that results in a bounce or
        *             complaint event.</p>
        *         <p>When you enable feedback forwarding, Amazon Pinpoint sends you email notifications when bounce
        *             or complaint events occur. Amazon Pinpoint sends this notification to the address that you
        *             specified in the Return-Path header of the original email.</p>
        *         <p>When you disable feedback forwarding, Amazon Pinpoint sends notifications through other
        *             mechanisms, such as by notifying an Amazon SNS topic. You're required to have a method of
        *             tracking bounces and complaints. If you haven't set up another mechanism for receiving
        *             bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events
        *             occur (even if this setting is disabled).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutEmailIdentityFeedbackAttributesCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutEmailIdentityFeedbackAttributesCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutEmailIdentityFeedbackAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEmailIdentityFeedbackAttributesCommandInput} for command's `input` shape.
        * @see {@link PutEmailIdentityFeedbackAttributesCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutEmailIdentityFeedbackAttributesCommand extends $Command<PutEmailIdentityFeedbackAttributesCommandInput, PutEmailIdentityFeedbackAttributesCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutEmailIdentityFeedbackAttributesCommandInput;
            constructor(input: PutEmailIdentityFeedbackAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEmailIdentityFeedbackAttributesCommandInput, PutEmailIdentityFeedbackAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityMailFromAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutEmailIdentityMailFromAttributesRequest, PutEmailIdentityMailFromAttributesResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface PutEmailIdentityMailFromAttributesCommandInput extends PutEmailIdentityMailFromAttributesRequest {
    }
    export interface PutEmailIdentityMailFromAttributesCommandOutput extends PutEmailIdentityMailFromAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Used to enable or disable the custom Mail-From domain configuration for an email
        *             identity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, PutEmailIdentityMailFromAttributesCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, PutEmailIdentityMailFromAttributesCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new PutEmailIdentityMailFromAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEmailIdentityMailFromAttributesCommandInput} for command's `input` shape.
        * @see {@link PutEmailIdentityMailFromAttributesCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class PutEmailIdentityMailFromAttributesCommand extends $Command<PutEmailIdentityMailFromAttributesCommandInput, PutEmailIdentityMailFromAttributesCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: PutEmailIdentityMailFromAttributesCommandInput;
            constructor(input: PutEmailIdentityMailFromAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEmailIdentityMailFromAttributesCommandInput, PutEmailIdentityMailFromAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/SendEmailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendEmailRequest, SendEmailResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface SendEmailCommandInput extends SendEmailRequest {
    }
    export interface SendEmailCommandOutput extends SendEmailResponse, __MetadataBearer {
    }
    /**
        * <p>Sends an email message. You can use the Amazon Pinpoint Email API to send two types of
        *             messages:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>Simple</b> – A standard email message. When
        *                     you create this type of message, you specify the sender, the recipient, and the
        *                     message body, and Amazon Pinpoint assembles the message for you.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Raw</b> –  A raw, MIME-formatted email
        *                     message. When you send this type of email, you have to specify all of the
        *                     message headers, as well as the message body. You can use this message type to
        *                     send messages that contain attachments. The message that you specify has to be a
        *                     valid MIME message.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, SendEmailCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, SendEmailCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new SendEmailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendEmailCommandInput} for command's `input` shape.
        * @see {@link SendEmailCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class SendEmailCommand extends $Command<SendEmailCommandInput, SendEmailCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: SendEmailCommandInput;
            constructor(input: SendEmailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendEmailCommandInput, SendEmailCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Add one or more tags (keys and values) to a specified resource. A
        *                 <i>tag</i> is a label that you optionally define and associate with a
        *             resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways,
        *             such as by purpose, owner, environment, or other criteria. A resource can have as many
        *             as 50 tags.</p>
        *         <p>Each tag consists of a required <i>tag key</i> and an
        *                 associated <i>tag value</i>, both of which you define. A tag key is a
        *             general label that acts as a category for more specific tag values. A tag value acts as
        *             a descriptor within a tag key.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, TagResourceCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, TagResourceCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Remove one or more tags (keys and values) from a specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, UntagResourceCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, UntagResourceCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/UpdateConfigurationSetEventDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConfigurationSetEventDestinationRequest, UpdateConfigurationSetEventDestinationResponse } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0";
    import { PinpointEmailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient";
    export interface UpdateConfigurationSetEventDestinationCommandInput extends UpdateConfigurationSetEventDestinationRequest {
    }
    export interface UpdateConfigurationSetEventDestinationCommandOutput extends UpdateConfigurationSetEventDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Update the configuration of an event destination for a configuration set.</p>
        *         <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
        *             clicks, bounces, and complaints. <i>Event destinations</i> are places that
        *             you can send information about these events to. For example, you can send event data to
        *             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
        *             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PinpointEmailClient, UpdateConfigurationSetEventDestinationCommand } from "@aws-sdk/client-pinpoint-email"; // ES Modules import
        * // const { PinpointEmailClient, UpdateConfigurationSetEventDestinationCommand } = require("@aws-sdk/client-pinpoint-email"); // CommonJS import
        * const client = new PinpointEmailClient(config);
        * const command = new UpdateConfigurationSetEventDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationSetEventDestinationCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationSetEventDestinationCommandOutput} for command's `response` shape.
        * @see {@link PinpointEmailClientResolvedConfig | config} for PinpointEmailClient's `config` shape.
        *
        */
    export class UpdateConfigurationSetEventDestinationCommand extends $Command<UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput, PinpointEmailClientResolvedConfig> {
            readonly input: UpdateConfigurationSetEventDestinationCommandInput;
            constructor(input: UpdateConfigurationSetEventDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PinpointEmailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/PinpointEmailClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateConfigurationSetCommand";
    import { CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateConfigurationSetEventDestinationCommand";
    import { CreateDedicatedIpPoolCommandInput, CreateDedicatedIpPoolCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateDedicatedIpPoolCommand";
    import { CreateDeliverabilityTestReportCommandInput, CreateDeliverabilityTestReportCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateDeliverabilityTestReportCommand";
    import { CreateEmailIdentityCommandInput, CreateEmailIdentityCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/CreateEmailIdentityCommand";
    import { DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteConfigurationSetCommand";
    import { DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteConfigurationSetEventDestinationCommand";
    import { DeleteDedicatedIpPoolCommandInput, DeleteDedicatedIpPoolCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteDedicatedIpPoolCommand";
    import { DeleteEmailIdentityCommandInput, DeleteEmailIdentityCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/DeleteEmailIdentityCommand";
    import { GetAccountCommandInput, GetAccountCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetAccountCommand";
    import { GetBlacklistReportsCommandInput, GetBlacklistReportsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetBlacklistReportsCommand";
    import { GetConfigurationSetCommandInput, GetConfigurationSetCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetConfigurationSetCommand";
    import { GetConfigurationSetEventDestinationsCommandInput, GetConfigurationSetEventDestinationsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetConfigurationSetEventDestinationsCommand";
    import { GetDedicatedIpCommandInput, GetDedicatedIpCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDedicatedIpCommand";
    import { GetDedicatedIpsCommandInput, GetDedicatedIpsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDedicatedIpsCommand";
    import { GetDeliverabilityDashboardOptionsCommandInput, GetDeliverabilityDashboardOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDeliverabilityDashboardOptionsCommand";
    import { GetDeliverabilityTestReportCommandInput, GetDeliverabilityTestReportCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDeliverabilityTestReportCommand";
    import { GetDomainDeliverabilityCampaignCommandInput, GetDomainDeliverabilityCampaignCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDomainDeliverabilityCampaignCommand";
    import { GetDomainStatisticsReportCommandInput, GetDomainStatisticsReportCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetDomainStatisticsReportCommand";
    import { GetEmailIdentityCommandInput, GetEmailIdentityCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/GetEmailIdentityCommand";
    import { ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListConfigurationSetsCommand";
    import { ListDedicatedIpPoolsCommandInput, ListDedicatedIpPoolsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDedicatedIpPoolsCommand";
    import { ListDeliverabilityTestReportsCommandInput, ListDeliverabilityTestReportsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDeliverabilityTestReportsCommand";
    import { ListDomainDeliverabilityCampaignsCommandInput, ListDomainDeliverabilityCampaignsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListDomainDeliverabilityCampaignsCommand";
    import { ListEmailIdentitiesCommandInput, ListEmailIdentitiesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListEmailIdentitiesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/ListTagsForResourceCommand";
    import { PutAccountDedicatedIpWarmupAttributesCommandInput, PutAccountDedicatedIpWarmupAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutAccountDedicatedIpWarmupAttributesCommand";
    import { PutAccountSendingAttributesCommandInput, PutAccountSendingAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutAccountSendingAttributesCommand";
    import { PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetDeliveryOptionsCommand";
    import { PutConfigurationSetReputationOptionsCommandInput, PutConfigurationSetReputationOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetReputationOptionsCommand";
    import { PutConfigurationSetSendingOptionsCommandInput, PutConfigurationSetSendingOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetSendingOptionsCommand";
    import { PutConfigurationSetTrackingOptionsCommandInput, PutConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutConfigurationSetTrackingOptionsCommand";
    import { PutDedicatedIpInPoolCommandInput, PutDedicatedIpInPoolCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDedicatedIpInPoolCommand";
    import { PutDedicatedIpWarmupAttributesCommandInput, PutDedicatedIpWarmupAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDedicatedIpWarmupAttributesCommand";
    import { PutDeliverabilityDashboardOptionCommandInput, PutDeliverabilityDashboardOptionCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutDeliverabilityDashboardOptionCommand";
    import { PutEmailIdentityDkimAttributesCommandInput, PutEmailIdentityDkimAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityDkimAttributesCommand";
    import { PutEmailIdentityFeedbackAttributesCommandInput, PutEmailIdentityFeedbackAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityFeedbackAttributesCommand";
    import { PutEmailIdentityMailFromAttributesCommandInput, PutEmailIdentityMailFromAttributesCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/PutEmailIdentityMailFromAttributesCommand";
    import { SendEmailCommandInput, SendEmailCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/SendEmailCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/UntagResourceCommand";
    import { UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/commands/UpdateConfigurationSetEventDestinationCommand";
    export type ServiceInputTypes = CreateConfigurationSetCommandInput | CreateConfigurationSetEventDestinationCommandInput | CreateDedicatedIpPoolCommandInput | CreateDeliverabilityTestReportCommandInput | CreateEmailIdentityCommandInput | DeleteConfigurationSetCommandInput | DeleteConfigurationSetEventDestinationCommandInput | DeleteDedicatedIpPoolCommandInput | DeleteEmailIdentityCommandInput | GetAccountCommandInput | GetBlacklistReportsCommandInput | GetConfigurationSetCommandInput | GetConfigurationSetEventDestinationsCommandInput | GetDedicatedIpCommandInput | GetDedicatedIpsCommandInput | GetDeliverabilityDashboardOptionsCommandInput | GetDeliverabilityTestReportCommandInput | GetDomainDeliverabilityCampaignCommandInput | GetDomainStatisticsReportCommandInput | GetEmailIdentityCommandInput | ListConfigurationSetsCommandInput | ListDedicatedIpPoolsCommandInput | ListDeliverabilityTestReportsCommandInput | ListDomainDeliverabilityCampaignsCommandInput | ListEmailIdentitiesCommandInput | ListTagsForResourceCommandInput | PutAccountDedicatedIpWarmupAttributesCommandInput | PutAccountSendingAttributesCommandInput | PutConfigurationSetDeliveryOptionsCommandInput | PutConfigurationSetReputationOptionsCommandInput | PutConfigurationSetSendingOptionsCommandInput | PutConfigurationSetTrackingOptionsCommandInput | PutDedicatedIpInPoolCommandInput | PutDedicatedIpWarmupAttributesCommandInput | PutDeliverabilityDashboardOptionCommandInput | PutEmailIdentityDkimAttributesCommandInput | PutEmailIdentityFeedbackAttributesCommandInput | PutEmailIdentityMailFromAttributesCommandInput | SendEmailCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateConfigurationSetEventDestinationCommandInput;
    export type ServiceOutputTypes = CreateConfigurationSetCommandOutput | CreateConfigurationSetEventDestinationCommandOutput | CreateDedicatedIpPoolCommandOutput | CreateDeliverabilityTestReportCommandOutput | CreateEmailIdentityCommandOutput | DeleteConfigurationSetCommandOutput | DeleteConfigurationSetEventDestinationCommandOutput | DeleteDedicatedIpPoolCommandOutput | DeleteEmailIdentityCommandOutput | GetAccountCommandOutput | GetBlacklistReportsCommandOutput | GetConfigurationSetCommandOutput | GetConfigurationSetEventDestinationsCommandOutput | GetDedicatedIpCommandOutput | GetDedicatedIpsCommandOutput | GetDeliverabilityDashboardOptionsCommandOutput | GetDeliverabilityTestReportCommandOutput | GetDomainDeliverabilityCampaignCommandOutput | GetDomainStatisticsReportCommandOutput | GetEmailIdentityCommandOutput | ListConfigurationSetsCommandOutput | ListDedicatedIpPoolsCommandOutput | ListDeliverabilityTestReportsCommandOutput | ListDomainDeliverabilityCampaignsCommandOutput | ListEmailIdentitiesCommandOutput | ListTagsForResourceCommandOutput | PutAccountDedicatedIpWarmupAttributesCommandOutput | PutAccountSendingAttributesCommandOutput | PutConfigurationSetDeliveryOptionsCommandOutput | PutConfigurationSetReputationOptionsCommandOutput | PutConfigurationSetSendingOptionsCommandOutput | PutConfigurationSetTrackingOptionsCommandOutput | PutDedicatedIpInPoolCommandOutput | PutDedicatedIpWarmupAttributesCommandOutput | PutDeliverabilityDashboardOptionCommandOutput | PutEmailIdentityDkimAttributesCommandOutput | PutEmailIdentityFeedbackAttributesCommandOutput | PutEmailIdentityMailFromAttributesCommandOutput | SendEmailCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateConfigurationSetEventDestinationCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type PinpointEmailClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of PinpointEmailClient class constructor that set the region, credentials and other options.
        */
    export interface PinpointEmailClientConfig extends PinpointEmailClientConfigType {
    }
    type PinpointEmailClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of PinpointEmailClient class. This is resolved and normalized from the {@link PinpointEmailClientConfig | constructor configuration interface}.
        */
    export interface PinpointEmailClientResolvedConfig extends PinpointEmailClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Pinpoint Email Service</fullname>
        *         <p>Welcome to the <i>Amazon Pinpoint Email API Reference</i>. This guide provides
        *             information about the Amazon Pinpoint Email API (version 1.0), including supported
        *             operations, data types, parameters, and schemas.</p>
        *         <p>
        *             <a href="https://aws.amazon.com/pinpoint">Amazon Pinpoint</a> is an AWS service that you
        *             can use to engage with your customers across multiple messaging channels. You can use
        *             Amazon Pinpoint to send email, SMS text messages, voice messages, and push notifications. The
        *             Amazon Pinpoint Email API provides programmatic access to options that are unique to the
        *             email channel and supplement the options provided by the Amazon Pinpoint API.</p>
        *         <p>If you're new to Amazon Pinpoint, you might find it helpful to also review the <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html">Amazon
        *                 Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer
        *                 Guide</i> provides tutorials, code samples, and procedures that demonstrate
        *             how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into
        *             mobile apps and other types of applications. The guide also provides information about
        *             key topics such as Amazon Pinpoint integration with other AWS services and the limits that apply
        *             to using the service.</p>
        *         <p>The Amazon Pinpoint Email API is available in several AWS Regions and it provides an endpoint
        *             for each of these Regions. For a list of all the Regions and endpoints where the API is
        *             currently available, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region">AWS Service Endpoints</a> in
        *             the <i>Amazon Web Services General Reference</i>. To learn more about AWS Regions, see
        *                 <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing AWS
        *                 Regions</a> in the <i>Amazon Web Services General Reference</i>.</p>
        *         <p>In each Region, AWS maintains multiple Availability Zones. These Availability Zones
        *             are physically isolated from each other, but are united by private, low-latency,
        *             high-throughput, and highly redundant network connections. These Availability Zones
        *             enable us to provide very high levels of availability and redundancy, while also
        *             minimizing latency. To learn more about the number of Availability Zones that are
        *             available in each Region, see <a href="http://aws.amazon.com/about-aws/global-infrastructure/">AWS Global Infrastructure</a>.</p>
        */
    export class PinpointEmailClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, PinpointEmailClientResolvedConfig> {
            /**
                * The resolved configuration of PinpointEmailClient class. This is resolved and normalized from the {@link PinpointEmailClientConfig | constructor configuration interface}.
                */
            readonly config: PinpointEmailClientResolvedConfig;
            constructor(configuration: PinpointEmailClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { PinpointEmailServiceException as __BaseException } from "@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/PinpointEmailServiceException";
    /**
        * <p>The message can't be sent because the account's ability to send email has been
        *             permanently restricted.</p>
        */
    export class AccountSuspendedException extends __BaseException {
            readonly name: "AccountSuspendedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccountSuspendedException, __BaseException>);
    }
    /**
        * <p>The resource specified in your request already exists.</p>
        */
    export class AlreadyExistsException extends __BaseException {
            readonly name: "AlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The input you provided is invalid.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>The resource is being modified by another operation or thread.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    export enum TlsPolicy {
            OPTIONAL = "OPTIONAL",
            REQUIRE = "REQUIRE"
    }
    /**
        * <p>Used to associate a configuration set with a dedicated IP pool.</p>
        */
    export interface DeliveryOptions {
            /**
                * <p>Specifies whether messages that use the configuration set are required to use
                *             Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
                *             delivered if a TLS connection can be established. If the value is <code>Optional</code>,
                *             messages can be delivered in plain text if a TLS connection can't be established.</p>
                */
            TlsPolicy?: TlsPolicy | string;
            /**
                * <p>The name of the dedicated IP pool that you want to associate with the configuration
                *             set.</p>
                */
            SendingPoolName?: string;
    }
    export namespace DeliveryOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeliveryOptions) => any;
    }
    /**
        * <p>Enable or disable collection of reputation metrics for emails that you send using this
        *             configuration set in the current AWS Region. </p>
        */
    export interface ReputationOptions {
            /**
                * <p>If <code>true</code>, tracking of reputation metrics is enabled for the configuration
                *             set. If <code>false</code>, tracking of reputation metrics is disabled for the
                *             configuration set.</p>
                */
            ReputationMetricsEnabled?: boolean;
            /**
                * <p>The date and time (in Unix time) when the reputation metrics were last given a fresh
                *             start. When your account is given a fresh start, your reputation metrics are calculated
                *             starting from the date of the fresh start.</p>
                */
            LastFreshStart?: Date;
    }
    export namespace ReputationOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReputationOptions) => any;
    }
    /**
        * <p>Used to enable or disable email sending for messages that use this configuration set
        *             in the current AWS Region.</p>
        */
    export interface SendingOptions {
            /**
                * <p>If <code>true</code>, email sending is enabled for the configuration set. If
                *                 <code>false</code>, email sending is disabled for the configuration set.</p>
                */
            SendingEnabled?: boolean;
    }
    export namespace SendingOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendingOptions) => any;
    }
    /**
        * <p>An object that defines the tags that are associated with a resource.
        *                 A <i>tag</i> is a label that you optionally define and associate with
        *             a resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different
        *             ways, such as by purpose, owner, environment, or other criteria. A resource can have as
        *             many as 50 tags.</p>
        *         <p>Each tag consists of a required <i>tag key</i> and an
        *                 associated <i>tag value</i>, both of which you define. A tag key is a
        *             general label that acts as a category for a more specific tag value. A tag value acts as
        *             a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag
        *             value can contain as many as 256 characters. The characters can be Unicode letters,
        *             digits, white space, or one of the following symbols: _ . : / = + -. The following
        *             additional restrictions apply to tags:</p>
        *         <ul>
        *             <li>
        *                 <p>Tag keys and values are case sensitive.</p>
        *             </li>
        *             <li>
        *                 <p>For each associated resource, each tag key must be unique and it can have only
        *                     one value.</p>
        *             </li>
        *             <li>
        *                 <p>The <code>aws:</code> prefix is reserved for use by AWS; you can’t use it in
        *                     any tag keys or values that you define. In addition, you can't edit or remove
        *                     tag keys or values that use this prefix. Tags that use this prefix don’t count
        *                     against the limit of 50 tags per resource.</p>
        *             </li>
        *             <li>
        *                 <p>You can associate tags with public or shared resources, but the tags are
        *                     available only for your AWS account, not any other accounts that share the
        *                     resource. In addition, the tags are available only for resources that are
        *                     located in the specified AWS Region for your AWS account.</p>
        *             </li>
        *          </ul>
        */
    export interface Tag {
            /**
                * <p>One part of a key-value pair that defines a tag. The maximum length of a tag key is
                *             128 characters. The minimum length is 1 character.</p>
                */
            Key: string | undefined;
            /**
                * <p>The optional part of a key-value pair that defines a tag. The maximum length of a tag
                *             value is 256 characters. The minimum length is 0 characters. If you don’t want a
                *             resource to have a specific tag value, don’t specify a value for this parameter. Amazon Pinpoint
                *             will set the value to an empty string.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>An object that defines the tracking options for a configuration set. When you use
        *             Amazon Pinpoint to send an email, it contains an invisible image that's used to track when
        *             recipients open your email. If your email contains links, those links are changed
        *             slightly in order to track when recipients click them.</p>
        *         <p>These images and links include references to a domain operated by AWS. You can
        *             optionally configure Amazon Pinpoint to use a domain that you operate for these images and
        *             links.</p>
        */
    export interface TrackingOptions {
            /**
                * <p>The domain that you want to use for tracking open and click events.</p>
                */
            CustomRedirectDomain: string | undefined;
    }
    export namespace TrackingOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrackingOptions) => any;
    }
    /**
        * <p>A request to create a configuration set.</p>
        */
    export interface CreateConfigurationSetRequest {
            /**
                * <p>The name of the configuration set.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>An object that defines the open and click tracking options for emails that you send
                *             using the configuration set.</p>
                */
            TrackingOptions?: TrackingOptions;
            /**
                * <p>An object that defines the dedicated IP pool that is used to send emails that you send
                *             using the configuration set.</p>
                */
            DeliveryOptions?: DeliveryOptions;
            /**
                * <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails
                *             that you send that use the configuration set.</p>
                */
            ReputationOptions?: ReputationOptions;
            /**
                * <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the
                *             configuration set.</p>
                */
            SendingOptions?: SendingOptions;
            /**
                * <p>An array of objects that define the tags (keys and values) that you want to associate
                *             with the configuration set.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateConfigurationSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface CreateConfigurationSetResponse {
    }
    export namespace CreateConfigurationSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetResponse) => any;
    }
    /**
        * <p>There are too many instances of the specified resource type.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The resource you attempted to access doesn't exist.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>Too many requests have been made to the operation.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    export enum DimensionValueSource {
            EMAIL_HEADER = "EMAIL_HEADER",
            LINK_TAG = "LINK_TAG",
            MESSAGE_TAG = "MESSAGE_TAG"
    }
    /**
        * <p>An object that defines the dimension configuration to use when you send Amazon Pinpoint email
        *             events to Amazon CloudWatch.</p>
        */
    export interface CloudWatchDimensionConfiguration {
            /**
                * <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to
                *             meet the following criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_),
                *                     or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>It can contain no more than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            DimensionName: string | undefined;
            /**
                * <p>The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you
                *             want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header
                *             or a parameter to the SendEmail/SendRawEmail API, choose <code>messageTag</code>. If you
                *             want Amazon Pinpoint to use your own email headers, choose <code>emailHeader</code>. If you want
                *             Amazon Pinpoint to use link tags, choose <code>linkTags</code>.</p>
                */
            DimensionValueSource: DimensionValueSource | string | undefined;
            /**
                * <p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the
                *             value of the dimension when you send an email. This value has to meet the following
                *             criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_),
                *                     or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>It can contain no more than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            DefaultDimensionValue: string | undefined;
    }
    export namespace CloudWatchDimensionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchDimensionConfiguration) => any;
    }
    /**
        * <p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
        *             monitor and gain insights on your email sending metrics.</p>
        */
    export interface CloudWatchDestination {
            /**
                * <p>An array of objects that define the dimensions to use when you send email events to
                *             Amazon CloudWatch.</p>
                */
            DimensionConfigurations: CloudWatchDimensionConfiguration[] | undefined;
    }
    export namespace CloudWatchDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchDestination) => any;
    }
    /**
        * <p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
        *             stream data to other services, such as Amazon S3 and Amazon Redshift.</p>
        */
    export interface KinesisFirehoseDestination {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that Amazon Pinpoint uses when sending email
                *             events to the Amazon Kinesis Data Firehose stream.</p>
                */
            IamRoleArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that Amazon Pinpoint sends email events
                *             to.</p>
                */
            DeliveryStreamArn: string | undefined;
    }
    export namespace KinesisFirehoseDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KinesisFirehoseDestination) => any;
    }
    export enum EventType {
            BOUNCE = "BOUNCE",
            CLICK = "CLICK",
            COMPLAINT = "COMPLAINT",
            DELIVERY = "DELIVERY",
            OPEN = "OPEN",
            REJECT = "REJECT",
            RENDERING_FAILURE = "RENDERING_FAILURE",
            SEND = "SEND"
    }
    /**
        * <p>An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events
        *             to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments
        *             for your campaigns.</p>
        */
    export interface PinpointDestination {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email
                *             events to.</p>
                */
            ApplicationArn?: string;
    }
    export namespace PinpointDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PinpointDestination) => any;
    }
    /**
        * <p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
        *             send notification when certain email events occur.</p>
        */
    export interface SnsDestination {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish email
                *             events to. For more information about Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer
                *                 Guide</a>.</p>
                */
            TopicArn: string | undefined;
    }
    export namespace SnsDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SnsDestination) => any;
    }
    /**
        * <p>An object that defines the event destination. Specifically, it defines which services
        *             receive events from emails sent using the configuration set that the event destination
        *             is associated with. Also defines the types of events that are sent to the event
        *             destination.</p>
        */
    export interface EventDestinationDefinition {
            /**
                * <p>If <code>true</code>, the event destination is enabled. When the event destination is
                *             enabled, the specified event types are sent to the destinations in this
                *                 <code>EventDestinationDefinition</code>.</p>
                *         <p>If <code>false</code>, the event destination is disabled. When the event destination
                *             is disabled, events aren't sent to the specified destinations.</p>
                */
            Enabled?: boolean;
            /**
                * <p>An array that specifies which events Amazon Pinpoint should send to the destinations in this
                *                 <code>EventDestinationDefinition</code>.</p>
                */
            MatchingEventTypes?: (EventType | string)[];
            /**
                * <p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
                *             stream data to other services, such as Amazon S3 and Amazon Redshift.</p>
                */
            KinesisFirehoseDestination?: KinesisFirehoseDestination;
            /**
                * <p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
                *             monitor and gain insights on your email sending metrics.</p>
                */
            CloudWatchDestination?: CloudWatchDestination;
            /**
                * <p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
                *             send notification when certain email events occur.</p>
                */
            SnsDestination?: SnsDestination;
            /**
                * <p>An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events
                *             to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments
                *             for your campaigns.</p>
                */
            PinpointDestination?: PinpointDestination;
    }
    export namespace EventDestinationDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventDestinationDefinition) => any;
    }
    /**
        * <p>A request to add an event destination to a configuration set.</p>
        */
    export interface CreateConfigurationSetEventDestinationRequest {
            /**
                * <p>The name of the configuration set that you want to add an event destination to.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>A name that identifies the event destination within the configuration set.</p>
                */
            EventDestinationName: string | undefined;
            /**
                * <p>An object that defines the event destination.</p>
                */
            EventDestination: EventDestinationDefinition | undefined;
    }
    export namespace CreateConfigurationSetEventDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetEventDestinationRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface CreateConfigurationSetEventDestinationResponse {
    }
    export namespace CreateConfigurationSetEventDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetEventDestinationResponse) => any;
    }
    /**
        * <p>A request to create a new dedicated IP pool.</p>
        */
    export interface CreateDedicatedIpPoolRequest {
            /**
                * <p>The name of the dedicated IP pool.</p>
                */
            PoolName: string | undefined;
            /**
                * <p>An object that defines the tags (keys and values) that you want to associate with the
                *             pool.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDedicatedIpPoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDedicatedIpPoolRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface CreateDedicatedIpPoolResponse {
    }
    export namespace CreateDedicatedIpPoolResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDedicatedIpPoolResponse) => any;
    }
    /**
        * <p>The raw email message.</p>
        */
    export interface RawMessage {
            /**
                * <p>The raw email message. The message has to meet the following criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>The message has to contain a header and a body, separated by one blank
                *                     line.</p>
                *             </li>
                *             <li>
                *                 <p>All of the required header fields must be present in the message.</p>
                *             </li>
                *             <li>
                *                 <p>Each part of a multipart MIME message must be formatted properly.</p>
                *             </li>
                *             <li>
                *                 <p>Attachments must be in a file format that Amazon Pinpoint supports.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>The entire message must be Base64 encoded.</p>
                *             </li>
                *             <li>
                *                 <p>If any of the MIME parts in your message contain content that is outside of
                *                     the 7-bit ASCII character range, you should encode that content to ensure that
                *                     recipients' email clients render the message properly.</p>
                *             </li>
                *             <li>
                *                 <p>The length of any single line of text in the message can't exceed 1,000
                *                     characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p>
                *             </li>
                *          </ul>
                */
            Data: Uint8Array | undefined;
    }
    export namespace RawMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RawMessage) => any;
    }
    /**
        * <p>An object that represents the content of the email, and optionally a character set
        *             specification.</p>
        */
    export interface Content {
            /**
                * <p>The content of the message itself.</p>
                */
            Data: string | undefined;
            /**
                * <p>The character set for the content. Because of the constraints of the SMTP protocol,
                *             Amazon Pinpoint uses 7-bit ASCII by default. If the text includes characters outside of the ASCII
                *             range, you have to specify a character set. For example, you could specify
                *                 <code>UTF-8</code>, <code>ISO-8859-1</code>, or <code>Shift_JIS</code>.</p>
                */
            Charset?: string;
    }
    export namespace Content {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Content) => any;
    }
    /**
        * <p>Represents the body of the email message.</p>
        */
    export interface Body {
            /**
                * <p>An object that represents the version of the message that is displayed in email
                *             clients that don't support HTML, or clients where the recipient has disabled HTML
                *             rendering.</p>
                */
            Text?: Content;
            /**
                * <p>An object that represents the version of the message that is displayed in email
                *             clients that support HTML. HTML messages can include formatted text, hyperlinks, images,
                *             and more. </p>
                */
            Html?: Content;
    }
    export namespace Body {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Body) => any;
    }
    /**
        * <p>Represents the email message that you're sending. The <code>Message</code> object
        *             consists of a subject line and a message body.</p>
        */
    export interface Message {
            /**
                * <p>The subject line of the email. The subject line can only contain 7-bit ASCII
                *             characters. However, you can specify non-ASCII characters in the subject line by using
                *             encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>.</p>
                */
            Subject: Content | undefined;
            /**
                * <p>The body of the message. You can specify an HTML version of the message, a text-only
                *             version of the message, or both.</p>
                */
            Body: Body | undefined;
    }
    export namespace Message {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Message) => any;
    }
    export interface Template {
            /**
                * <p>The Amazon Resource Name (ARN) of the template.</p>
                */
            TemplateArn?: string;
            /**
                * <p>An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.</p>
                */
            TemplateData?: string;
    }
    export namespace Template {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Template) => any;
    }
    /**
        * <p>An object that defines the entire content of the email, including the message headers
        *             and the body content. You can create a simple email message, in which you specify the
        *             subject and the text and HTML versions of the message body. You can also create raw
        *             messages, in which you specify a complete MIME-formatted message. Raw messages can
        *             include attachments and custom headers.</p>
        */
    export interface EmailContent {
            /**
                * <p>The simple email message. The message consists of a subject and a message body.</p>
                */
            Simple?: Message;
            /**
                * <p>The raw email message. The message has to meet the following criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>The message has to contain a header and a body, separated by one blank
                *                     line.</p>
                *             </li>
                *             <li>
                *                 <p>All of the required header fields must be present in the message.</p>
                *             </li>
                *             <li>
                *                 <p>Each part of a multipart MIME message must be formatted properly.</p>
                *             </li>
                *             <li>
                *                 <p>If you include attachments, they must be in a file format that Amazon Pinpoint supports.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>The entire message must be Base64 encoded.</p>
                *             </li>
                *             <li>
                *                 <p>If any of the MIME parts in your message contain content that is outside of
                *                     the 7-bit ASCII character range, you should encode that content to ensure that
                *                     recipients' email clients render the message properly.</p>
                *             </li>
                *             <li>
                *                 <p>The length of any single line of text in the message can't exceed 1,000
                *                     characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p>
                *             </li>
                *          </ul>
                */
            Raw?: RawMessage;
            /**
                * <p>The template to use for the email message.</p>
                */
            Template?: Template;
    }
    export namespace EmailContent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EmailContent) => any;
    }
    /**
        * <p>A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will
        *             be handled by various email providers around the world. When you perform a predictive inbox placement test, you
        *             provide a sample message that contains the content that you plan to send to your
        *             customers. Amazon Pinpoint then sends that message to special email addresses spread across
        *             several major email providers. After about 24 hours, the test is complete, and you can
        *             use the <code>GetDeliverabilityTestReport</code> operation to view the results of the
        *             test.</p>
        */
    export interface CreateDeliverabilityTestReportRequest {
            /**
                * <p>A unique name that helps you to identify the predictive inbox placement test when you retrieve the
                *             results.</p>
                */
            ReportName?: string;
            /**
                * <p>The email address that the predictive inbox placement test email was sent from.</p>
                */
            FromEmailAddress: string | undefined;
            /**
                * <p>The HTML body of the message that you sent when you performed the predictive inbox placement test.</p>
                */
            Content: EmailContent | undefined;
            /**
                * <p>An array of objects that define the tags (keys and values) that you want to associate
                *             with the predictive inbox placement test.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDeliverabilityTestReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeliverabilityTestReportRequest) => any;
    }
    export enum DeliverabilityTestStatus {
            COMPLETED = "COMPLETED",
            IN_PROGRESS = "IN_PROGRESS"
    }
    /**
        * <p>Information about the predictive inbox placement test that you created.</p>
        */
    export interface CreateDeliverabilityTestReportResponse {
            /**
                * <p>A unique string that identifies the predictive inbox placement test.</p>
                */
            ReportId: string | undefined;
            /**
                * <p>The status of the predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test
                *             is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
                *             test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use
                *             the <code>GetDeliverabilityTestReport</code> to view the results of the test.</p>
                */
            DeliverabilityTestStatus: DeliverabilityTestStatus | string | undefined;
    }
    export namespace CreateDeliverabilityTestReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeliverabilityTestReportResponse) => any;
    }
    /**
        * <p>The message can't be sent because the sending domain isn't verified.</p>
        */
    export class MailFromDomainNotVerifiedException extends __BaseException {
            readonly name: "MailFromDomainNotVerifiedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MailFromDomainNotVerifiedException, __BaseException>);
    }
    /**
        * <p>The message can't be sent because it contains invalid content.</p>
        */
    export class MessageRejected extends __BaseException {
            readonly name: "MessageRejected";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MessageRejected, __BaseException>);
    }
    /**
        * <p>The message can't be sent because the account's ability to send email is currently
        *             paused.</p>
        */
    export class SendingPausedException extends __BaseException {
            readonly name: "SendingPausedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SendingPausedException, __BaseException>);
    }
    /**
        * <p>A request to begin the verification process for an email identity (an email address or
        *             domain).</p>
        */
    export interface CreateEmailIdentityRequest {
            /**
                * <p>The email address or domain that you want to verify.</p>
                */
            EmailIdentity: string | undefined;
            /**
                * <p>An array of objects that define the tags (keys and values) that you want to associate
                *             with the email identity.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEmailIdentityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEmailIdentityRequest) => any;
    }
    export enum DkimStatus {
            FAILED = "FAILED",
            NOT_STARTED = "NOT_STARTED",
            PENDING = "PENDING",
            SUCCESS = "SUCCESS",
            TEMPORARY_FAILURE = "TEMPORARY_FAILURE"
    }
    /**
        * <p>An object that contains information about the DKIM configuration for an email
        *             identity.</p>
        */
    export interface DkimAttributes {
            /**
                * <p>If the value is <code>true</code>, then the messages that Amazon Pinpoint sends from the
                *             identity are DKIM-signed. If the value is <code>false</code>, then the messages that
                *             Amazon Pinpoint sends from the identity aren't DKIM-signed.</p>
                */
            SigningEnabled?: boolean;
            /**
                * <p>Describes whether or not Amazon Pinpoint has successfully located the DKIM records in the DNS
                *             records for the domain. The status can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> – Amazon Pinpoint hasn't yet located the DKIM records in the
                *                     DNS configuration for the domain, but will continue to attempt to locate
                *                     them.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SUCCESS</code> – Amazon Pinpoint located the DKIM records in the DNS
                *                     configuration for the domain and determined that they're correct. Amazon Pinpoint can now
                *                     send DKIM-signed email from the identity.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FAILED</code> – Amazon Pinpoint was unable to locate the DKIM records in the
                *                     DNS settings for the domain, and won't continue to search for them.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
                *                     prevented Amazon Pinpoint from determining the DKIM status for the domain.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>NOT_STARTED</code> – Amazon Pinpoint hasn't yet started searching for the
                *                     DKIM records in the DKIM records for the domain.</p>
                *             </li>
                *          </ul>
                */
            Status?: DkimStatus | string;
            /**
                * <p>A set of unique strings that you use to create a set of CNAME records that you add to
                *             the DNS configuration for your domain. When Amazon Pinpoint detects these records in the DNS
                *             configuration for your domain, the DKIM authentication process is complete. Amazon Pinpoint
                *             usually detects these records within about 72 hours of adding them to the DNS
                *             configuration for your domain.</p>
                */
            Tokens?: string[];
    }
    export namespace DkimAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DkimAttributes) => any;
    }
    export enum IdentityType {
            DOMAIN = "DOMAIN",
            EMAIL_ADDRESS = "EMAIL_ADDRESS",
            MANAGED_DOMAIN = "MANAGED_DOMAIN"
    }
    /**
        * <p>If the email identity is a domain, this object contains tokens that you can use to
        *             create a set of CNAME records. To sucessfully verify your domain, you have to add these
        *             records to the DNS configuration for your domain.</p>
        *         <p>If the email identity is an email address, this object is empty. </p>
        */
    export interface CreateEmailIdentityResponse {
            /**
                * <p>The email identity type.</p>
                */
            IdentityType?: IdentityType | string;
            /**
                * <p>Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email
                *             from verified email addresses or domains. For more information about verifying
                *             identities, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide</a>.</p>
                */
            VerifiedForSendingStatus?: boolean;
            /**
                * <p>An object that contains information about the DKIM attributes for the identity. This
                *             object includes the tokens that you use to create the CNAME records that are required to
                *             complete the DKIM verification process.</p>
                */
            DkimAttributes?: DkimAttributes;
    }
    export namespace CreateEmailIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEmailIdentityResponse) => any;
    }
    /**
        * <p>A request to delete a configuration set.</p>
        */
    export interface DeleteConfigurationSetRequest {
            /**
                * <p>The name of the configuration set that you want to delete.</p>
                */
            ConfigurationSetName: string | undefined;
    }
    export namespace DeleteConfigurationSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface DeleteConfigurationSetResponse {
    }
    export namespace DeleteConfigurationSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetResponse) => any;
    }
    /**
        * <p>A request to delete an event destination from a configuration set.</p>
        */
    export interface DeleteConfigurationSetEventDestinationRequest {
            /**
                * <p>The name of the configuration set that contains the event destination that you want to
                *             delete.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>The name of the event destination that you want to delete.</p>
                */
            EventDestinationName: string | undefined;
    }
    export namespace DeleteConfigurationSetEventDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetEventDestinationRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface DeleteConfigurationSetEventDestinationResponse {
    }
    export namespace DeleteConfigurationSetEventDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetEventDestinationResponse) => any;
    }
    /**
        * <p>A request to delete a dedicated IP pool.</p>
        */
    export interface DeleteDedicatedIpPoolRequest {
            /**
                * <p>The name of the dedicated IP pool that you want to delete.</p>
                */
            PoolName: string | undefined;
    }
    export namespace DeleteDedicatedIpPoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDedicatedIpPoolRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface DeleteDedicatedIpPoolResponse {
    }
    export namespace DeleteDedicatedIpPoolResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDedicatedIpPoolResponse) => any;
    }
    /**
        * <p>A request to delete an existing email identity. When you delete an identity, you lose
        *             the ability to use Amazon Pinpoint to send email from that identity. You can restore your ability
        *             to send email by completing the verification process for the identity again.</p>
        */
    export interface DeleteEmailIdentityRequest {
            /**
                * <p>The identity (that is, the email address or domain) that you want to delete from your
                *             Amazon Pinpoint account.</p>
                */
            EmailIdentity: string | undefined;
    }
    export namespace DeleteEmailIdentityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEmailIdentityRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface DeleteEmailIdentityResponse {
    }
    export namespace DeleteEmailIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEmailIdentityResponse) => any;
    }
    /**
        * <p>A request to obtain information about the email-sending capabilities of your Amazon Pinpoint
        *             account.</p>
        */
    export interface GetAccountRequest {
    }
    export namespace GetAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountRequest) => any;
    }
    /**
        * <p>An object that contains information about the per-day and per-second sending limits
        *             for your Amazon Pinpoint account in the current AWS Region.</p>
        */
    export interface SendQuota {
            /**
                * <p>The maximum number of emails that you can send in the current AWS Region over a
                *             24-hour period. This value is also called your <i>sending
                *             quota</i>.</p>
                */
            Max24HourSend?: number;
            /**
                * <p>The maximum number of emails that you can send per second in the current AWS Region.
                *             This value is also called your <i>maximum sending rate</i> or your
                *                 <i>maximum TPS (transactions per second) rate</i>.</p>
                */
            MaxSendRate?: number;
            /**
                * <p>The number of emails sent from your Amazon Pinpoint account in the current AWS Region over the
                *             past 24 hours.</p>
                */
            SentLast24Hours?: number;
    }
    export namespace SendQuota {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendQuota) => any;
    }
    /**
        * <p>A list of details about the email-sending capabilities of your Amazon Pinpoint account in the
        *             current AWS Region.</p>
        */
    export interface GetAccountResponse {
            /**
                * <p>An object that contains information about the per-day and per-second sending limits
                *             for your Amazon Pinpoint account in the current AWS Region.</p>
                */
            SendQuota?: SendQuota;
            /**
                * <p>Indicates whether or not email sending is enabled for your Amazon Pinpoint account in the
                *             current AWS Region.</p>
                */
            SendingEnabled?: boolean;
            /**
                * <p>Indicates whether or not the automatic warm-up feature is enabled for dedicated IP
                *             addresses that are associated with your account.</p>
                */
            DedicatedIpAutoWarmupEnabled?: boolean;
            /**
                * <p>The reputation status of your Amazon Pinpoint account. The status can be one of the
                *             following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>HEALTHY</code> – There are no reputation-related issues that
                *                     currently impact your account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PROBATION</code> – We've identified some issues with your Amazon Pinpoint
                *                     account. We're placing your account under review while you work on correcting
                *                     these issues.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SHUTDOWN</code> – Your account's ability to send email is
                *                     currently paused because of an issue with the email sent from your account. When
                *                     you correct the issue, you can contact us and request that your account's
                *                     ability to send email is resumed.</p>
                *             </li>
                *          </ul>
                */
            EnforcementStatus?: string;
            /**
                * <p>Indicates whether or not your account has production access in the current AWS
                *             Region.</p>
                *         <p>If the value is <code>false</code>, then your account is in the
                *                 <i>sandbox</i>. When your account is in the sandbox, you can only send
                *             email to verified identities. Additionally, the maximum number of emails you can send in
                *             a 24-hour period (your sending quota) is 200, and the maximum number of emails you can
                *             send per second (your maximum sending rate) is 1.</p>
                *         <p>If the value is <code>true</code>, then your account has production access. When your
                *             account has production access, you can send email to any address. The sending quota and
                *             maximum sending rate for your account vary based on your specific use case.</p>
                */
            ProductionAccessEnabled?: boolean;
    }
    export namespace GetAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountResponse) => any;
    }
    /**
        * <p>A request to retrieve a list of the blacklists that your dedicated IP addresses appear
        *             on.</p>
        */
    export interface GetBlacklistReportsRequest {
            /**
                * <p>A list of IP addresses that you want to retrieve blacklist information about. You can
                *             only specify the dedicated IP addresses that you use to send email using Amazon Pinpoint or
                *             Amazon SES.</p>
                */
            BlacklistItemNames: string[] | undefined;
    }
    export namespace GetBlacklistReportsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlacklistReportsRequest) => any;
    }
    /**
        * <p>An object that contains information about a blacklisting event that impacts one of the
        *             dedicated IP addresses that is associated with your account.</p>
        */
    export interface BlacklistEntry {
            /**
                * <p>The name of the blacklist that the IP address appears on.</p>
                */
            RblName?: string;
            /**
                * <p>The time when the blacklisting event occurred, shown in Unix time format.</p>
                */
            ListingTime?: Date;
            /**
                * <p>Additional information about the blacklisting event, as provided by the blacklist
                *             maintainer.</p>
                */
            Description?: string;
    }
    export namespace BlacklistEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BlacklistEntry) => any;
    }
    /**
        * <p>An object that contains information about blacklist events.</p>
        */
    export interface GetBlacklistReportsResponse {
            /**
                * <p>An object that contains information about a blacklist that one of your dedicated IP
                *             addresses appears on.</p>
                */
            BlacklistReport: Record<string, BlacklistEntry[]> | undefined;
    }
    export namespace GetBlacklistReportsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlacklistReportsResponse) => any;
    }
    /**
        * <p>A request to obtain information about a configuration set.</p>
        */
    export interface GetConfigurationSetRequest {
            /**
                * <p>The name of the configuration set that you want to obtain more information
                *             about.</p>
                */
            ConfigurationSetName: string | undefined;
    }
    export namespace GetConfigurationSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationSetRequest) => any;
    }
    /**
        * <p>Information about a configuration set.</p>
        */
    export interface GetConfigurationSetResponse {
            /**
                * <p>The name of the configuration set.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>An object that defines the open and click tracking options for emails that you send
                *             using the configuration set.</p>
                */
            TrackingOptions?: TrackingOptions;
            /**
                * <p>An object that defines the dedicated IP pool that is used to send emails that you send
                *             using the configuration set.</p>
                */
            DeliveryOptions?: DeliveryOptions;
            /**
                * <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails
                *             that you send that use the configuration set.</p>
                */
            ReputationOptions?: ReputationOptions;
            /**
                * <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the
                *             configuration set.</p>
                */
            SendingOptions?: SendingOptions;
            /**
                * <p>An array of objects that define the tags (keys and values) that are associated with
                *             the configuration set.</p>
                */
            Tags?: Tag[];
    }
    export namespace GetConfigurationSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationSetResponse) => any;
    }
    /**
        * <p>A request to obtain information about the event destinations for a configuration
        *             set.</p>
        */
    export interface GetConfigurationSetEventDestinationsRequest {
            /**
                * <p>The name of the configuration set that contains the event destination.</p>
                */
            ConfigurationSetName: string | undefined;
    }
    export namespace GetConfigurationSetEventDestinationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationSetEventDestinationsRequest) => any;
    }
    /**
        * <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
        *             clicks, bounces, and complaints. <i>Event destinations</i> are places that
        *             you can send information about these events to. For example, you can send event data to
        *             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
        *             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
        */
    export interface EventDestination {
            /**
                * <p>A name that identifies the event destination.</p>
                */
            Name: string | undefined;
            /**
                * <p>If <code>true</code>, the event destination is enabled. When the event destination is
                *             enabled, the specified event types are sent to the destinations in this
                *                 <code>EventDestinationDefinition</code>.</p>
                *         <p>If <code>false</code>, the event destination is disabled. When the event destination
                *             is disabled, events aren't sent to the specified destinations.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The types of events that Amazon Pinpoint sends to the specified event destinations.</p>
                */
            MatchingEventTypes: (EventType | string)[] | undefined;
            /**
                * <p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
                *             stream data to other services, such as Amazon S3 and Amazon Redshift.</p>
                */
            KinesisFirehoseDestination?: KinesisFirehoseDestination;
            /**
                * <p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
                *             monitor and gain insights on your email sending metrics.</p>
                */
            CloudWatchDestination?: CloudWatchDestination;
            /**
                * <p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
                *             send notification when certain email events occur.</p>
                */
            SnsDestination?: SnsDestination;
            /**
                * <p>An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events
                *             to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments
                *             for your campaigns.</p>
                */
            PinpointDestination?: PinpointDestination;
    }
    export namespace EventDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventDestination) => any;
    }
    /**
        * <p>Information about an event destination for a configuration set.</p>
        */
    export interface GetConfigurationSetEventDestinationsResponse {
            /**
                * <p>An array that includes all of the events destinations that have been configured for
                *             the configuration set.</p>
                */
            EventDestinations?: EventDestination[];
    }
    export namespace GetConfigurationSetEventDestinationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationSetEventDestinationsResponse) => any;
    }
    /**
        * <p>A request to obtain more information about a dedicated IP address.</p>
        */
    export interface GetDedicatedIpRequest {
            /**
                * <p>The IP address that you want to obtain more information about. The value you specify
                *             has to be a dedicated IP address that's assocaited with your Amazon Pinpoint account.</p>
                */
            Ip: string | undefined;
    }
    export namespace GetDedicatedIpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDedicatedIpRequest) => any;
    }
    export enum WarmupStatus {
            DONE = "DONE",
            IN_PROGRESS = "IN_PROGRESS"
    }
    /**
        * <p>Contains information about a dedicated IP address that is associated with your Amazon Pinpoint
        *             account.</p>
        *         <p></p>
        */
    export interface DedicatedIp {
            /**
                * <p>An IP address that is reserved for use by your Amazon Pinpoint account.</p>
                */
            Ip: string | undefined;
            /**
                * <p>The warm-up status of a dedicated IP address. The status can have one of the following
                *             values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IN_PROGRESS</code> – The IP address isn't ready to use because the
                *                     dedicated IP warm-up process is ongoing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DONE</code> – The dedicated IP warm-up process is complete, and
                *                     the IP address is ready to use.</p>
                *             </li>
                *          </ul>
                */
            WarmupStatus: WarmupStatus | string | undefined;
            /**
                * <p>Indicates how complete the dedicated IP warm-up process is. When this value equals 1,
                *             the address has completed the warm-up process and is ready for use.</p>
                */
            WarmupPercentage: number | undefined;
            /**
                * <p>The name of the dedicated IP pool that the IP address is associated with.</p>
                */
            PoolName?: string;
    }
    export namespace DedicatedIp {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DedicatedIp) => any;
    }
    /**
        * <p>Information about a dedicated IP address.</p>
        */
    export interface GetDedicatedIpResponse {
            /**
                * <p>An object that contains information about a dedicated IP address.</p>
                */
            DedicatedIp?: DedicatedIp;
    }
    export namespace GetDedicatedIpResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDedicatedIpResponse) => any;
    }
    /**
        * <p>A request to obtain more information about dedicated IP pools.</p>
        */
    export interface GetDedicatedIpsRequest {
            /**
                * <p>The name of the IP pool that the dedicated IP address is associated with.</p>
                */
            PoolName?: string;
            /**
                * <p>A token returned from a previous call to <code>GetDedicatedIps</code> to indicate the
                *             position of the dedicated IP pool in the list of IP pools.</p>
                */
            NextToken?: string;
            /**
                * <p>The number of results to show in a single call to <code>GetDedicatedIpsRequest</code>.
                *             If the number of results is larger than the number you specified in this parameter, then
                *             the response includes a <code>NextToken</code> element, which you can use to obtain
                *             additional results.</p>
                */
            PageSize?: number;
    }
    export namespace GetDedicatedIpsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDedicatedIpsRequest) => any;
    }
    /**
        * <p>Information about the dedicated IP addresses that are associated with your Amazon Pinpoint
        *             account.</p>
        */
    export interface GetDedicatedIpsResponse {
            /**
                * <p>A list of dedicated IP addresses that are reserved for use by your Amazon Pinpoint
                *             account.</p>
                */
            DedicatedIps?: DedicatedIp[];
            /**
                * <p>A token that indicates that there are additional dedicated IP addresses to list. To
                *             view additional addresses, issue another request to <code>GetDedicatedIps</code>,
                *             passing this token in the <code>NextToken</code> parameter.</p>
                */
            NextToken?: string;
    }
    export namespace GetDedicatedIpsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDedicatedIpsResponse) => any;
    }
    /**
        * <p>Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account.
        *             When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and
        *             other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the
        *             ability to perform predictive inbox placement tests.</p>
        *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
        *             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
        *             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
        */
    export interface GetDeliverabilityDashboardOptionsRequest {
    }
    export namespace GetDeliverabilityDashboardOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeliverabilityDashboardOptionsRequest) => any;
    }
    export enum DeliverabilityDashboardAccountStatus {
            ACTIVE = "ACTIVE",
            DISABLED = "DISABLED",
            PENDING_EXPIRATION = "PENDING_EXPIRATION"
    }
    /**
        * <p>An object that contains information about the inbox placement data settings for a
        *             verified domain that’s associated with your AWS account. This data is available only
        *             if you enabled the Deliverability dashboard for the domain
        *                 (<code>PutDeliverabilityDashboardOption</code> operation).</p>
        */
    export interface InboxPlacementTrackingOption {
            /**
                * <p>Specifies whether inbox placement data is being tracked for the domain.</p>
                */
            Global?: boolean;
            /**
                * <p>An array of strings, one for each major email provider that the inbox placement data
                *             applies to.</p>
                */
            TrackedIsps?: string[];
    }
    export namespace InboxPlacementTrackingOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InboxPlacementTrackingOption) => any;
    }
    /**
        * <p>An object that contains information about the Deliverability dashboard subscription for a
        *             verified domain that you use to send email and currently has an active Deliverability dashboard
        *             subscription. If a Deliverability dashboard subscription is active for a domain, you gain access
        *             to reputation, inbox placement, and other metrics for the domain.</p>
        */
    export interface DomainDeliverabilityTrackingOption {
            /**
                * <p>A verified domain that’s associated with your AWS account and currently has an
                *             active Deliverability dashboard subscription.</p>
                */
            Domain?: string;
            /**
                * <p>The date, in Unix time format, when you enabled the Deliverability dashboard for the
                *             domain.</p>
                */
            SubscriptionStartDate?: Date;
            /**
                * <p>An object that contains information about the inbox placement data settings for the
                *             domain.</p>
                */
            InboxPlacementTrackingOption?: InboxPlacementTrackingOption;
    }
    export namespace DomainDeliverabilityTrackingOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainDeliverabilityTrackingOption) => any;
    }
    /**
        * <p>An object that shows the status of the Deliverability dashboard for your Amazon Pinpoint account.</p>
        */
    export interface GetDeliverabilityDashboardOptionsResponse {
            /**
                * <p>Specifies whether the Deliverability dashboard is enabled for your Amazon Pinpoint account. If this value
                *             is <code>true</code>, the dashboard is enabled.</p>
                */
            DashboardEnabled: boolean | undefined;
            /**
                * <p>The date, in Unix time format, when your current subscription to the Deliverability dashboard
                *             is scheduled to expire, if your subscription is scheduled to expire at the end of the
                *             current calendar month. This value is null if you have an active subscription that isn’t
                *             due to expire at the end of the month.</p>
                */
            SubscriptionExpiryDate?: Date;
            /**
                * <p>The current status of your Deliverability dashboard subscription. If this value is
                *                 <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end
                *             of the current calendar month.</p>
                */
            AccountStatus?: DeliverabilityDashboardAccountStatus | string;
            /**
                * <p>An array of objects, one for each verified domain that you use to send email and
                *             currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at
                *             the end of the current calendar month.</p>
                */
            ActiveSubscribedDomains?: DomainDeliverabilityTrackingOption[];
            /**
                * <p>An array of objects, one for each verified domain that you use to send email and
                *             currently has an active Deliverability dashboard subscription that's scheduled to expire at the
                *             end of the current calendar month.</p>
                */
            PendingExpirationSubscribedDomains?: DomainDeliverabilityTrackingOption[];
    }
    export namespace GetDeliverabilityDashboardOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeliverabilityDashboardOptionsResponse) => any;
    }
    /**
        * <p>A request to retrieve the results of a predictive inbox placement test.</p>
        */
    export interface GetDeliverabilityTestReportRequest {
            /**
                * <p>A unique string that identifies the predictive inbox placement test.</p>
                */
            ReportId: string | undefined;
    }
    export namespace GetDeliverabilityTestReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeliverabilityTestReportRequest) => any;
    }
    /**
        * <p>An object that contains metadata related to a predictive inbox placement test.</p>
        */
    export interface DeliverabilityTestReport {
            /**
                * <p>A unique string that identifies the predictive inbox placement test.</p>
                */
            ReportId?: string;
            /**
                * <p>A name that helps you identify a predictive inbox placement test report.</p>
                */
            ReportName?: string;
            /**
                * <p>The subject line for an email that you submitted in a predictive inbox placement test.</p>
                */
            Subject?: string;
            /**
                * <p>The sender address that you specified for the predictive inbox placement test.</p>
                */
            FromEmailAddress?: string;
            /**
                * <p>The date and time when the predictive inbox placement test was created, in Unix time format.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The status of the predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test
                *             is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
                *             test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use
                *             the <code>GetDeliverabilityTestReport</code> to view the results of the test.</p>
                */
            DeliverabilityTestStatus?: DeliverabilityTestStatus | string;
    }
    export namespace DeliverabilityTestReport {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeliverabilityTestReport) => any;
    }
    /**
        * <p>An object that contains inbox placement data for an email provider.</p>
        */
    export interface PlacementStatistics {
            /**
                * <p>The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.</p>
                */
            InboxPercentage?: number;
            /**
                * <p>The percentage of emails that arrived in recipients' spam or junk mail folders during
                *             the predictive inbox placement test.</p>
                */
            SpamPercentage?: number;
            /**
                * <p>The percentage of emails that didn't arrive in recipients' inboxes at all during the
                *             predictive inbox placement test.</p>
                */
            MissingPercentage?: number;
            /**
                * <p>The percentage of emails that were authenticated by using Sender Policy Framework
                *             (SPF) during the predictive inbox placement test.</p>
                */
            SpfPercentage?: number;
            /**
                * <p>The percentage of emails that were authenticated by using DomainKeys Identified Mail
                *             (DKIM) during the predictive inbox placement test.</p>
                */
            DkimPercentage?: number;
    }
    export namespace PlacementStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlacementStatistics) => any;
    }
    /**
        * <p>An object that describes how email sent during the predictive inbox placement test was handled by a certain
        *             email provider.</p>
        */
    export interface IspPlacement {
            /**
                * <p>The name of the email provider that the inbox placement data applies to.</p>
                */
            IspName?: string;
            /**
                * <p>An object that contains inbox placement metrics for a specific email provider.</p>
                */
            PlacementStatistics?: PlacementStatistics;
    }
    export namespace IspPlacement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IspPlacement) => any;
    }
    /**
        * <p>The results of the predictive inbox placement test.</p>
        */
    export interface GetDeliverabilityTestReportResponse {
            /**
                * <p>An object that contains the results of the predictive inbox placement test.</p>
                */
            DeliverabilityTestReport: DeliverabilityTestReport | undefined;
            /**
                * <p>An object that specifies how many test messages that were sent during the predictive inbox placement test were
                *             delivered to recipients' inboxes, how many were sent to recipients' spam folders, and
                *             how many weren't delivered.</p>
                */
            OverallPlacement: PlacementStatistics | undefined;
            /**
                * <p>An object that describes how the test email was handled by several email providers,
                *             including Gmail, Hotmail, Yahoo, AOL, and others.</p>
                */
            IspPlacements: IspPlacement[] | undefined;
            /**
                * <p>An object that contains the message that you sent when you performed this
                *             predictive inbox placement test.</p>
                */
            Message?: string;
            /**
                * <p>An array of objects that define the tags (keys and values) that are associated with
                *             the predictive inbox placement test.</p>
                */
            Tags?: Tag[];
    }
    export namespace GetDeliverabilityTestReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeliverabilityTestReportResponse) => any;
    }
    /**
        * <p>Retrieve all the deliverability data for a specific campaign. This data is available
        *             for a campaign only if the campaign sent email by using a domain that the
        *             Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
        *             operation).</p>
        */
    export interface GetDomainDeliverabilityCampaignRequest {
            /**
                * <p>The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this
                *             identifier to a campaign. This value is not the same as the campaign identifier that
                *             Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the
                *             Amazon Pinpoint console.</p>
                */
            CampaignId: string | undefined;
    }
    export namespace GetDomainDeliverabilityCampaignRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainDeliverabilityCampaignRequest) => any;
    }
    /**
        * <p>An object that contains the deliverability data for a specific campaign. This data is
        *             available for a campaign only if the campaign sent email by using a domain that the
        *             Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
        *             operation).</p>
        */
    export interface DomainDeliverabilityCampaign {
            /**
                * <p>The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this
                *             identifier to a campaign. This value is not the same as the campaign identifier that
                *             Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the
                *             Amazon Pinpoint console.</p>
                */
            CampaignId?: string;
            /**
                * <p>The URL of an image that contains a snapshot of the email message that was
                *             sent.</p>
                */
            ImageUrl?: string;
            /**
                * <p>The subject line, or title, of the email message.</p>
                */
            Subject?: string;
            /**
                * <p>The verified email address that the email message was sent from.</p>
                */
            FromAddress?: string;
            /**
                * <p>The IP addresses that were used to send the email message.</p>
                */
            SendingIps?: string[];
            /**
                * <p>The first time, in Unix time format, when the email message was delivered to any
                *             recipient's inbox. This value can help you determine how long it took for a campaign to
                *             deliver an email message.</p>
                */
            FirstSeenDateTime?: Date;
            /**
                * <p>The last time, in Unix time format, when the email message was delivered to any
                *             recipient's inbox. This value can help you determine how long it took for a campaign to
                *             deliver an email message.</p>
                */
            LastSeenDateTime?: Date;
            /**
                * <p>The number of email messages that were delivered to recipients’ inboxes.</p>
                */
            InboxCount?: number;
            /**
                * <p>The number of email messages that were delivered to recipients' spam or junk mail
                *             folders.</p>
                */
            SpamCount?: number;
            /**
                * <p>The percentage of email messages that were opened by recipients. Due to technical
                *             limitations, this value only includes recipients who opened the message by using an
                *             email client that supports images.</p>
                */
            ReadRate?: number;
            /**
                * <p>The percentage of email messages that were deleted by recipients, without being opened
                *             first. Due to technical limitations, this value only includes recipients who opened the
                *             message by using an email client that supports images.</p>
                */
            DeleteRate?: number;
            /**
                * <p>The percentage of email messages that were opened and then deleted by recipients. Due
                *             to technical limitations, this value only includes recipients who opened the message by
                *             using an email client that supports images.</p>
                */
            ReadDeleteRate?: number;
            /**
                * <p>The projected number of recipients that the email message was sent to.</p>
                */
            ProjectedVolume?: number;
            /**
                * <p>The major email providers who handled the email message.</p>
                */
            Esps?: string[];
    }
    export namespace DomainDeliverabilityCampaign {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainDeliverabilityCampaign) => any;
    }
    /**
        * <p>An object that contains all the deliverability data for a specific campaign. This data
        *             is available for a campaign only if the campaign sent email by using a domain that the
        *             Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
        *             operation).</p>
        */
    export interface GetDomainDeliverabilityCampaignResponse {
            /**
                * <p>An object that contains the deliverability data for the campaign.</p>
                */
            DomainDeliverabilityCampaign: DomainDeliverabilityCampaign | undefined;
    }
    export namespace GetDomainDeliverabilityCampaignResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainDeliverabilityCampaignResponse) => any;
    }
    /**
        * <p>A request to obtain deliverability metrics for a domain.</p>
        */
    export interface GetDomainStatisticsReportRequest {
            /**
                * <p>The domain that you want to obtain deliverability metrics for.</p>
                */
            Domain: string | undefined;
            /**
                * <p>The first day (in Unix time) that you want to obtain domain deliverability metrics
                *             for.</p>
                */
            StartDate: Date | undefined;
            /**
                * <p>The last day (in Unix time) that you want to obtain domain deliverability metrics for.
                *             The <code>EndDate</code> that you specify has to be less than or equal to 30 days after
                *             the <code>StartDate</code>.</p>
                */
            EndDate: Date | undefined;
    }
    export namespace GetDomainStatisticsReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainStatisticsReportRequest) => any;
    }
    /**
        * <p>An object that contains inbox placement data for email sent from one of your email
        *             domains to a specific email provider.</p>
        */
    export interface DomainIspPlacement {
            /**
                * <p>The name of the email provider that the inbox placement data applies to.</p>
                */
            IspName?: string;
            /**
                * <p>The total number of messages that were sent from the selected domain to the specified
                *             email provider that arrived in recipients' inboxes.</p>
                */
            InboxRawCount?: number;
            /**
                * <p>The total number of messages that were sent from the selected domain to the specified
                *             email provider that arrived in recipients' spam or junk mail folders.</p>
                */
            SpamRawCount?: number;
            /**
                * <p>The percentage of messages that were sent from the selected domain to the specified
                *             email provider that arrived in recipients' inboxes.</p>
                */
            InboxPercentage?: number;
            /**
                * <p>The percentage of messages that were sent from the selected domain to the specified
                *             email provider that arrived in recipients' spam or junk mail folders.</p>
                */
            SpamPercentage?: number;
    }
    export namespace DomainIspPlacement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainIspPlacement) => any;
    }
    /**
        * <p>An object that contains information about the amount of email that was delivered to
        *             recipients.</p>
        */
    export interface VolumeStatistics {
            /**
                * <p>The total number of emails that arrived in recipients' inboxes.</p>
                */
            InboxRawCount?: number;
            /**
                * <p>The total number of emails that arrived in recipients' spam or junk mail
                *             folders.</p>
                */
            SpamRawCount?: number;
            /**
                * <p>An estimate of the percentage of emails sent from the current domain that will arrive
                *             in recipients' inboxes.</p>
                */
            ProjectedInbox?: number;
            /**
                * <p>An estimate of the percentage of emails sent from the current domain that will arrive
                *             in recipients' spam or junk mail folders.</p>
                */
            ProjectedSpam?: number;
    }
    export namespace VolumeStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VolumeStatistics) => any;
    }
    /**
        * <p>An object that contains information about the volume of email sent on each day of the
        *             analysis period.</p>
        */
    export interface DailyVolume {
            /**
                * <p>The date that the DailyVolume metrics apply to, in Unix time.</p>
                */
            StartDate?: Date;
            /**
                * <p>An object that contains inbox placement metrics for a specific day in the analysis
                *             period.</p>
                */
            VolumeStatistics?: VolumeStatistics;
            /**
                * <p>An object that contains inbox placement metrics for a specified day in the analysis
                *             period, broken out by the recipient's email provider.</p>
                */
            DomainIspPlacements?: DomainIspPlacement[];
    }
    export namespace DailyVolume {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DailyVolume) => any;
    }
    /**
        * <p>An object that contains information about email that was sent from the selected
        *             domain.</p>
        */
    export interface OverallVolume {
            /**
                * <p>An object that contains information about the numbers of messages that arrived in
                *             recipients' inboxes and junk mail folders.</p>
                */
            VolumeStatistics?: VolumeStatistics;
            /**
                * <p>The percentage of emails that were sent from the domain that were read by their
                *             recipients.</p>
                */
            ReadRatePercent?: number;
            /**
                * <p>An object that contains inbox and junk mail placement metrics for individual email
                *             providers.</p>
                */
            DomainIspPlacements?: DomainIspPlacement[];
    }
    export namespace OverallVolume {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OverallVolume) => any;
    }
    /**
        * <p>An object that includes statistics that are related to the domain that you
        *             specified.</p>
        */
    export interface GetDomainStatisticsReportResponse {
            /**
                * <p>An object that contains deliverability metrics for the domain that you specified. The
                *             data in this object is a summary of all of the data that was collected from the
                *                 <code>StartDate</code> to the <code>EndDate</code>.</p>
                */
            OverallVolume: OverallVolume | undefined;
            /**
                * <p>An object that contains deliverability metrics for the domain that you specified. This
                *             object contains data for each day, starting on the <code>StartDate</code> and ending on
                *             the <code>EndDate</code>.</p>
                */
            DailyVolumes: DailyVolume[] | undefined;
    }
    export namespace GetDomainStatisticsReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainStatisticsReportResponse) => any;
    }
    /**
        * <p>A request to return details about an email identity.</p>
        */
    export interface GetEmailIdentityRequest {
            /**
                * <p>The email identity that you want to retrieve details for.</p>
                */
            EmailIdentity: string | undefined;
    }
    export namespace GetEmailIdentityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEmailIdentityRequest) => any;
    }
    export enum BehaviorOnMxFailure {
            REJECT_MESSAGE = "REJECT_MESSAGE",
            USE_DEFAULT_VALUE = "USE_DEFAULT_VALUE"
    }
    export enum MailFromDomainStatus {
            FAILED = "FAILED",
            PENDING = "PENDING",
            SUCCESS = "SUCCESS",
            TEMPORARY_FAILURE = "TEMPORARY_FAILURE"
    }
    /**
        * <p>A list of attributes that are associated with a MAIL FROM domain.</p>
        */
    export interface MailFromAttributes {
            /**
                * <p>The name of a domain that an email identity uses as a custom MAIL FROM domain.</p>
                */
            MailFromDomain: string | undefined;
            /**
                * <p>The status of the MAIL FROM domain. This status can have the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> – Amazon Pinpoint hasn't started searching for the MX record
                *                     yet.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SUCCESS</code> – Amazon Pinpoint detected the required MX record for the
                *                     MAIL FROM domain.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FAILED</code> – Amazon Pinpoint can't find the required MX record, or the
                *                     record no longer exists.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
                *                     prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.</p>
                *             </li>
                *          </ul>
                */
            MailFromDomainStatus: MailFromDomainStatus | string | undefined;
            /**
                * <p>The action that Amazon Pinpoint to takes if it can't read the required MX record for a custom
                *             MAIL FROM domain. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint uses
                *                 <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
                *             to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code>
                *             error, and doesn't attempt to deliver the email.</p>
                *         <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                *                 <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
                *             states.</p>
                */
            BehaviorOnMxFailure: BehaviorOnMxFailure | string | undefined;
    }
    export namespace MailFromAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MailFromAttributes) => any;
    }
    /**
        * <p>Details about an email identity.</p>
        */
    export interface GetEmailIdentityResponse {
            /**
                * <p>The email identity type.</p>
                */
            IdentityType?: IdentityType | string;
            /**
                * <p>The feedback forwarding configuration for the identity.</p>
                *         <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or
                *             complaint events occur. Amazon Pinpoint sends this notification to the address that you specified
                *             in the Return-Path header of the original email.</p>
                *         <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other
                *             mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're
                *             required to have a method of tracking bounces and complaints. If you haven't set up
                *             another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email
                *             notification when these events occur (even if this setting is disabled).</p>
                */
            FeedbackForwardingStatus?: boolean;
            /**
                * <p>Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email
                *             from verified email addresses or domains. For more information about verifying
                *             identities, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide</a>.</p>
                */
            VerifiedForSendingStatus?: boolean;
            /**
                * <p>An object that contains information about the DKIM attributes for the identity. This
                *             object includes the tokens that you use to create the CNAME records that are required to
                *             complete the DKIM verification process.</p>
                */
            DkimAttributes?: DkimAttributes;
            /**
                * <p>An object that contains information about the Mail-From attributes for the email
                *             identity.</p>
                */
            MailFromAttributes?: MailFromAttributes;
            /**
                * <p>An array of objects that define the tags (keys and values) that are associated with
                *             the email identity.</p>
                */
            Tags?: Tag[];
    }
    export namespace GetEmailIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEmailIdentityResponse) => any;
    }
    /**
        * <p>A request to obtain a list of configuration sets for your Amazon Pinpoint account in the current
        *             AWS Region.</p>
        */
    export interface ListConfigurationSetsRequest {
            /**
                * <p>A token returned from a previous call to <code>ListConfigurationSets</code> to
                *             indicate the position in the list of configuration sets.</p>
                */
            NextToken?: string;
            /**
                * <p>The number of results to show in a single call to <code>ListConfigurationSets</code>.
                *             If the number of results is larger than the number you specified in this parameter, then
                *             the response includes a <code>NextToken</code> element, which you can use to obtain
                *             additional results.</p>
                */
            PageSize?: number;
    }
    export namespace ListConfigurationSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationSetsRequest) => any;
    }
    /**
        * <p>A list of configuration sets in your Amazon Pinpoint account in the current AWS Region.</p>
        */
    export interface ListConfigurationSetsResponse {
            /**
                * <p>An array that contains all of the configuration sets in your Amazon Pinpoint account in the
                *             current AWS Region.</p>
                */
            ConfigurationSets?: string[];
            /**
                * <p>A token that indicates that there are additional configuration sets to list. To view
                *             additional configuration sets, issue another request to
                *                 <code>ListConfigurationSets</code>, and pass this token in the
                *                 <code>NextToken</code> parameter.</p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationSetsResponse) => any;
    }
    /**
        * <p>A request to obtain a list of dedicated IP pools.</p>
        */
    export interface ListDedicatedIpPoolsRequest {
            /**
                * <p>A token returned from a previous call to <code>ListDedicatedIpPools</code> to indicate
                *             the position in the list of dedicated IP pools.</p>
                */
            NextToken?: string;
            /**
                * <p>The number of results to show in a single call to <code>ListDedicatedIpPools</code>.
                *             If the number of results is larger than the number you specified in this parameter, then
                *             the response includes a <code>NextToken</code> element, which you can use to obtain
                *             additional results.</p>
                */
            PageSize?: number;
    }
    export namespace ListDedicatedIpPoolsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDedicatedIpPoolsRequest) => any;
    }
    /**
        * <p>A list of dedicated IP pools.</p>
        */
    export interface ListDedicatedIpPoolsResponse {
            /**
                * <p>A list of all of the dedicated IP pools that are associated with your Amazon Pinpoint
                *             account.</p>
                */
            DedicatedIpPools?: string[];
            /**
                * <p>A token that indicates that there are additional IP pools to list. To view additional
                *             IP pools, issue another request to <code>ListDedicatedIpPools</code>, passing this token
                *             in the <code>NextToken</code> parameter.</p>
                */
            NextToken?: string;
    }
    export namespace ListDedicatedIpPoolsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDedicatedIpPoolsResponse) => any;
    }
    /**
        * <p>A request to list all of the predictive inbox placement tests that you've performed.</p>
        */
    export interface ListDeliverabilityTestReportsRequest {
            /**
                * <p>A token returned from a previous call to <code>ListDeliverabilityTestReports</code> to
                *             indicate the position in the list of predictive inbox placement tests.</p>
                */
            NextToken?: string;
            /**
                * <p>The number of results to show in a single call to
                *                 <code>ListDeliverabilityTestReports</code>. If the number of results is larger than
                *             the number you specified in this parameter, then the response includes a
                *                 <code>NextToken</code> element, which you can use to obtain additional
                *             results.</p>
                *         <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
                */
            PageSize?: number;
    }
    export namespace ListDeliverabilityTestReportsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeliverabilityTestReportsRequest) => any;
    }
    /**
        * <p>A list of the predictive inbox placement test reports that are available for your account, regardless of
        *             whether or not those tests are complete.</p>
        */
    export interface ListDeliverabilityTestReportsResponse {
            /**
                * <p>An object that contains a lists of predictive inbox placement tests that you've performed.</p>
                */
            DeliverabilityTestReports: DeliverabilityTestReport[] | undefined;
            /**
                * <p>A token that indicates that there are additional predictive inbox placement tests to list. To view additional
                *             predictive inbox placement tests, issue another request to <code>ListDeliverabilityTestReports</code>, and pass
                *             this token in the <code>NextToken</code> parameter.</p>
                */
            NextToken?: string;
    }
    export namespace ListDeliverabilityTestReportsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeliverabilityTestReportsResponse) => any;
    }
    /**
        * <p>Retrieve deliverability data for all the campaigns that used a specific domain to send
        *             email during a specified time range. This data is available for a domain only if you
        *             enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation)
        *             for the domain.</p>
        */
    export interface ListDomainDeliverabilityCampaignsRequest {
            /**
                * <p>The first day, in Unix time format, that you want to obtain deliverability data
                *             for.</p>
                */
            StartDate: Date | undefined;
            /**
                * <p>The last day, in Unix time format, that you want to obtain deliverability data for.
                *             This value has to be less than or equal to 30 days after the value of the
                *                 <code>StartDate</code> parameter.</p>
                */
            EndDate: Date | undefined;
            /**
                * <p>The domain to obtain deliverability data for.</p>
                */
            SubscribedDomain: string | undefined;
            /**
                * <p>A token that’s returned from a previous call to the
                *                 <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the
                *             position of a campaign in the list of campaigns.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to include in response to a single call to the
                *                 <code>ListDomainDeliverabilityCampaigns</code> operation. If the number of results
                *             is larger than the number that you specify in this parameter, the response includes a
                *                 <code>NextToken</code> element, which you can use to obtain additional
                *             results.</p>
                */
            PageSize?: number;
    }
    export namespace ListDomainDeliverabilityCampaignsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainDeliverabilityCampaignsRequest) => any;
    }
    /**
        * <p>An array of objects that provide deliverability data for all the campaigns that used a
        *             specific domain to send email during a specified time range. This data is available for
        *             a domain only if you enabled the Deliverability dashboard
        *                 (<code>PutDeliverabilityDashboardOption</code> operation) for the domain.</p>
        */
    export interface ListDomainDeliverabilityCampaignsResponse {
            /**
                * <p>An array of responses, one for each campaign that used the domain to send email during
                *             the specified time range.</p>
                */
            DomainDeliverabilityCampaigns: DomainDeliverabilityCampaign[] | undefined;
            /**
                * <p>A token that’s returned from a previous call to the
                *                 <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the
                *             position of the campaign in the list of campaigns.</p>
                */
            NextToken?: string;
    }
    export namespace ListDomainDeliverabilityCampaignsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainDeliverabilityCampaignsResponse) => any;
    }
    /**
        * <p>A request to list all of the email identities associated with your Amazon Pinpoint account. This
        *             list includes identities that you've already verified, identities that are unverified,
        *             and identities that were verified in the past, but are no longer verified.</p>
        */
    export interface ListEmailIdentitiesRequest {
            /**
                * <p>A token returned from a previous call to <code>ListEmailIdentities</code> to indicate
                *             the position in the list of identities.</p>
                */
            NextToken?: string;
            /**
                * <p>The number of results to show in a single call to <code>ListEmailIdentities</code>. If
                *             the number of results is larger than the number you specified in this parameter, then
                *             the response includes a <code>NextToken</code> element, which you can use to obtain
                *             additional results.</p>
                *         <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
                */
            PageSize?: number;
    }
    export namespace ListEmailIdentitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEmailIdentitiesRequest) => any;
    }
    /**
        * <p>Information about an email identity.</p>
        */
    export interface IdentityInfo {
            /**
                * <p>The email identity type. The identity type can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>EMAIL_ADDRESS</code> – The identity is an email address.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DOMAIN</code> – The identity is a domain.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MANAGED_DOMAIN</code> – The identity is a domain that is managed
                *                     by AWS.</p>
                *             </li>
                *          </ul>
                */
            IdentityType?: IdentityType | string;
            /**
                * <p>The address or domain of the identity.</p>
                */
            IdentityName?: string;
            /**
                * <p>Indicates whether or not you can send email from the identity.</p>
                *         <p>In Amazon Pinpoint, an identity is an email address or domain that you send email from. Before
                *             you can send email from an identity, you have to demostrate that you own the identity,
                *             and that you authorize Amazon Pinpoint to send email from that identity.</p>
                */
            SendingEnabled?: boolean;
    }
    export namespace IdentityInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityInfo) => any;
    }
    /**
        * <p>A list of all of the identities that you've attempted to verify for use with Amazon Pinpoint,
        *             regardless of whether or not those identities were successfully verified.</p>
        */
    export interface ListEmailIdentitiesResponse {
            /**
                * <p>An array that includes all of the identities associated with your Amazon Pinpoint
                *             account.</p>
                */
            EmailIdentities?: IdentityInfo[];
            /**
                * <p>A token that indicates that there are additional configuration sets to list. To view
                *             additional configuration sets, issue another request to
                *             <code>ListEmailIdentities</code>, and pass this token in the <code>NextToken</code>
                *             parameter.</p>
                */
            NextToken?: string;
    }
    export namespace ListEmailIdentitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEmailIdentitiesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to retrieve tag
                *             information for.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>An array that lists all the tags that are associated with the resource. Each tag
                *             consists of a required tag key (<code>Key</code>) and an associated tag value
                *                 (<code>Value</code>)</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>A request to enable or disable the automatic IP address warm-up feature.</p>
        */
    export interface PutAccountDedicatedIpWarmupAttributesRequest {
            /**
                * <p>Enables or disables the automatic warm-up feature for dedicated IP addresses that are
                *             associated with your Amazon Pinpoint account in the current AWS Region. Set to <code>true</code>
                *             to enable the automatic warm-up feature, or set to <code>false</code> to disable
                *             it.</p>
                */
            AutoWarmupEnabled?: boolean;
    }
    export namespace PutAccountDedicatedIpWarmupAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAccountDedicatedIpWarmupAttributesRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutAccountDedicatedIpWarmupAttributesResponse {
    }
    export namespace PutAccountDedicatedIpWarmupAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAccountDedicatedIpWarmupAttributesResponse) => any;
    }
    /**
        * <p>A request to change the ability of your account to send email.</p>
        */
    export interface PutAccountSendingAttributesRequest {
            /**
                * <p>Enables or disables your account's ability to send email. Set to <code>true</code> to
                *             enable email sending, or set to <code>false</code> to disable email sending.</p>
                *         <note>
                *             <p>If AWS paused your account's ability to send email, you can't use this operation
                *                 to resume your account's ability to send email.</p>
                *         </note>
                */
            SendingEnabled?: boolean;
    }
    export namespace PutAccountSendingAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAccountSendingAttributesRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutAccountSendingAttributesResponse {
    }
    export namespace PutAccountSendingAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAccountSendingAttributesResponse) => any;
    }
    /**
        * <p>A request to associate a configuration set with a dedicated IP pool.</p>
        */
    export interface PutConfigurationSetDeliveryOptionsRequest {
            /**
                * <p>The name of the configuration set that you want to associate with a dedicated IP
                *             pool.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>Specifies whether messages that use the configuration set are required to use
                *             Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
                *             delivered if a TLS connection can be established. If the value is <code>Optional</code>,
                *             messages can be delivered in plain text if a TLS connection can't be established.</p>
                */
            TlsPolicy?: TlsPolicy | string;
            /**
                * <p>The name of the dedicated IP pool that you want to associate with the configuration
                *             set.</p>
                */
            SendingPoolName?: string;
    }
    export namespace PutConfigurationSetDeliveryOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetDeliveryOptionsRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutConfigurationSetDeliveryOptionsResponse {
    }
    export namespace PutConfigurationSetDeliveryOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetDeliveryOptionsResponse) => any;
    }
    /**
        * <p>A request to enable or disable tracking of reputation metrics for a configuration
        *             set.</p>
        */
    export interface PutConfigurationSetReputationOptionsRequest {
            /**
                * <p>The name of the configuration set that you want to enable or disable reputation metric
                *             tracking for.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>If <code>true</code>, tracking of reputation metrics is enabled for the configuration
                *             set. If <code>false</code>, tracking of reputation metrics is disabled for the
                *             configuration set.</p>
                */
            ReputationMetricsEnabled?: boolean;
    }
    export namespace PutConfigurationSetReputationOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetReputationOptionsRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutConfigurationSetReputationOptionsResponse {
    }
    export namespace PutConfigurationSetReputationOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetReputationOptionsResponse) => any;
    }
    /**
        * <p>A request to enable or disable the ability of Amazon Pinpoint to send emails that use a specific
        *             configuration set.</p>
        */
    export interface PutConfigurationSetSendingOptionsRequest {
            /**
                * <p>The name of the configuration set that you want to enable or disable email sending
                *             for.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>If <code>true</code>, email sending is enabled for the configuration set. If
                *                 <code>false</code>, email sending is disabled for the configuration set.</p>
                */
            SendingEnabled?: boolean;
    }
    export namespace PutConfigurationSetSendingOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetSendingOptionsRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutConfigurationSetSendingOptionsResponse {
    }
    export namespace PutConfigurationSetSendingOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetSendingOptionsResponse) => any;
    }
    /**
        * <p>A request to add a custom domain for tracking open and click events to a configuration
        *             set.</p>
        */
    export interface PutConfigurationSetTrackingOptionsRequest {
            /**
                * <p>The name of the configuration set that you want to add a custom tracking domain
                *             to.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>The domain that you want to use to track open and click events.</p>
                */
            CustomRedirectDomain?: string;
    }
    export namespace PutConfigurationSetTrackingOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetTrackingOptionsRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutConfigurationSetTrackingOptionsResponse {
    }
    export namespace PutConfigurationSetTrackingOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetTrackingOptionsResponse) => any;
    }
    /**
        * <p>A request to move a dedicated IP address to a dedicated IP pool.</p>
        */
    export interface PutDedicatedIpInPoolRequest {
            /**
                * <p>The IP address that you want to move to the dedicated IP pool. The value you specify
                *             has to be a dedicated IP address that's associated with your Amazon Pinpoint account.</p>
                */
            Ip: string | undefined;
            /**
                * <p>The name of the IP pool that you want to add the dedicated IP address to. You have to
                *             specify an IP pool that already exists.</p>
                */
            DestinationPoolName: string | undefined;
    }
    export namespace PutDedicatedIpInPoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDedicatedIpInPoolRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutDedicatedIpInPoolResponse {
    }
    export namespace PutDedicatedIpInPoolResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDedicatedIpInPoolResponse) => any;
    }
    /**
        * <p>A request to change the warm-up attributes for a dedicated IP address. This operation
        *             is useful when you want to resume the warm-up process for an existing IP address.</p>
        */
    export interface PutDedicatedIpWarmupAttributesRequest {
            /**
                * <p>The dedicated IP address that you want to update the warm-up attributes for.</p>
                */
            Ip: string | undefined;
            /**
                * <p>The warm-up percentage that you want to associate with the dedicated IP
                *             address.</p>
                */
            WarmupPercentage: number | undefined;
    }
    export namespace PutDedicatedIpWarmupAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDedicatedIpWarmupAttributesRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutDedicatedIpWarmupAttributesResponse {
    }
    export namespace PutDedicatedIpWarmupAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDedicatedIpWarmupAttributesResponse) => any;
    }
    /**
        * <p>Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the
        *             Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for
        *             the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform
        *             predictive inbox placement tests.</p>
        *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
        *             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
        *             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
        */
    export interface PutDeliverabilityDashboardOptionRequest {
            /**
                * <p>Specifies whether to enable the Deliverability dashboard for your Amazon Pinpoint account. To enable the
                *             dashboard, set this value to <code>true</code>.</p>
                */
            DashboardEnabled: boolean | undefined;
            /**
                * <p>An array of objects, one for each verified domain that you use to send email and
                *             enabled the Deliverability dashboard for.</p>
                */
            SubscribedDomains?: DomainDeliverabilityTrackingOption[];
    }
    export namespace PutDeliverabilityDashboardOptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDeliverabilityDashboardOptionRequest) => any;
    }
    /**
        * <p>A response that indicates whether the Deliverability dashboard is enabled for your Amazon Pinpoint
        *             account.</p>
        */
    export interface PutDeliverabilityDashboardOptionResponse {
    }
    export namespace PutDeliverabilityDashboardOptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDeliverabilityDashboardOptionResponse) => any;
    }
    /**
        * <p>A request to enable or disable DKIM signing of email that you send from an email
        *             identity.</p>
        */
    export interface PutEmailIdentityDkimAttributesRequest {
            /**
                * <p>The email identity that you want to change the DKIM settings for.</p>
                */
            EmailIdentity: string | undefined;
            /**
                * <p>Sets the DKIM signing configuration for the identity.</p>
                *         <p>When you set this value <code>true</code>, then the messages that Amazon Pinpoint sends from the
                *             identity are DKIM-signed. When you set this value to <code>false</code>, then the
                *             messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.</p>
                */
            SigningEnabled?: boolean;
    }
    export namespace PutEmailIdentityDkimAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEmailIdentityDkimAttributesRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutEmailIdentityDkimAttributesResponse {
    }
    export namespace PutEmailIdentityDkimAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEmailIdentityDkimAttributesResponse) => any;
    }
    /**
        * <p>A request to set the attributes that control how bounce and complaint events are
        *             processed.</p>
        */
    export interface PutEmailIdentityFeedbackAttributesRequest {
            /**
                * <p>The email identity that you want to configure bounce and complaint feedback forwarding
                *             for.</p>
                */
            EmailIdentity: string | undefined;
            /**
                * <p>Sets the feedback forwarding configuration for the identity.</p>
                *         <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or
                *             complaint events occur. Amazon Pinpoint sends this notification to the address that you specified
                *             in the Return-Path header of the original email.</p>
                *         <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other
                *             mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're
                *             required to have a method of tracking bounces and complaints. If you haven't set up
                *             another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email
                *             notification when these events occur (even if this setting is disabled).</p>
                */
            EmailForwardingEnabled?: boolean;
    }
    export namespace PutEmailIdentityFeedbackAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEmailIdentityFeedbackAttributesRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutEmailIdentityFeedbackAttributesResponse {
    }
    export namespace PutEmailIdentityFeedbackAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEmailIdentityFeedbackAttributesResponse) => any;
    }
    /**
        * <p>A request to configure the custom MAIL FROM domain for a verified identity.</p>
        */
    export interface PutEmailIdentityMailFromAttributesRequest {
            /**
                * <p>The verified email identity that you want to set up the custom MAIL FROM domain
                *             for.</p>
                */
            EmailIdentity: string | undefined;
            /**
                * <p> The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM
                *             domain must meet the following criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>It has to be a subdomain of the verified identity.</p>
                *             </li>
                *             <li>
                *                 <p>It can't be used to receive email.</p>
                *             </li>
                *             <li>
                *                 <p>It can't be used in a "From" address if the MAIL FROM domain is a destination
                *                     for feedback forwarding emails.</p>
                *             </li>
                *          </ul>
                */
            MailFromDomain?: string;
            /**
                * <p>The action that you want Amazon Pinpoint to take if it can't read the required MX record when
                *             you send an email. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint uses
                *                 <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
                *             to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code>
                *             error, and doesn't attempt to deliver the email.</p>
                *         <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                *                 <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
                *             states.</p>
                */
            BehaviorOnMxFailure?: BehaviorOnMxFailure | string;
    }
    export namespace PutEmailIdentityMailFromAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEmailIdentityMailFromAttributesRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutEmailIdentityMailFromAttributesResponse {
    }
    export namespace PutEmailIdentityMailFromAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEmailIdentityMailFromAttributesResponse) => any;
    }
    /**
        * <p>An object that describes the recipients for an email.</p>
        */
    export interface Destination {
            /**
                * <p>An array that contains the email addresses of the "To" recipients for the
                *             email.</p>
                */
            ToAddresses?: string[];
            /**
                * <p>An array that contains the email addresses of the "CC" (carbon copy) recipients for
                *             the email.</p>
                */
            CcAddresses?: string[];
            /**
                * <p>An array that contains the email addresses of the "BCC" (blind carbon copy) recipients
                *             for the email.</p>
                */
            BccAddresses?: string[];
    }
    export namespace Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Destination) => any;
    }
    /**
        * <p>Contains the name and value of a tag that you apply to an email. You can use message
        *             tags when you publish email sending events.
        *             </p>
        */
    export interface MessageTag {
            /**
                * <p>The name of the message tag. The message tag name has to meet the following
                *             criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>It can contain no more than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            Name: string | undefined;
            /**
                * <p>The value of the message tag. The message tag value has to meet the following
                *             criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>It can contain no more than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            Value: string | undefined;
    }
    export namespace MessageTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessageTag) => any;
    }
    /**
        * <p>A request to send an email message.</p>
        */
    export interface SendEmailRequest {
            /**
                * <p>The email address that you want to use as the "From" address for the email. The
                *             address that you specify has to be verified.
                *             </p>
                */
            FromEmailAddress?: string;
            /**
                * <p>An object that contains the recipients of the email message.</p>
                */
            Destination: Destination | undefined;
            /**
                * <p>The "Reply-to" email addresses for the message. When the recipient replies to the
                *             message, each Reply-to address receives the reply.</p>
                */
            ReplyToAddresses?: string[];
            /**
                * <p>The address that Amazon Pinpoint should send bounce and complaint notifications to.</p>
                */
            FeedbackForwardingEmailAddress?: string;
            /**
                * <p>An object that contains the body of the message. You can send either a Simple message
                *             or a Raw message.</p>
                */
            Content: EmailContent | undefined;
            /**
                * <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
                *             using the <code>SendEmail</code> operation. Tags correspond to characteristics of the
                *             email that you define, so that you can publish email sending events. </p>
                */
            EmailTags?: MessageTag[];
            /**
                * <p>The name of the configuration set that you want to use when sending the email.</p>
                */
            ConfigurationSetName?: string;
    }
    export namespace SendEmailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEmailRequest) => any;
    }
    /**
        * <p>A unique message ID that you receive when Amazon Pinpoint accepts an email for sending.</p>
        */
    export interface SendEmailResponse {
            /**
                * <p>A unique identifier for the message that is generated when Amazon Pinpoint accepts the
                *             message.</p>
                *         <note>
                *             <p>It is possible for Amazon Pinpoint to accept a message without sending it. This can happen
                *                 when the message you're trying to send has an attachment doesn't pass a virus check,
                *                 or when you send a templated email that contains invalid personalization content,
                *                 for example.</p>
                *         </note>
                */
            MessageId?: string;
    }
    export namespace SendEmailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEmailResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to add one or more tags
                *             to.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A list of the tags that you want to add to the resource. A tag consists of a required
                *             tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum
                *             length of a tag key is 128 characters. The maximum length of a tag value is 256
                *             characters.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to remove one or more
                *             tags from.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags (tag keys) that you want to remove from the resource. When you specify a tag
                *             key, the action removes both that key and its associated tag value.</p>
                *         <p>To remove more than one tag from the resource, append the <code>TagKeys</code>
                *             parameter and argument for each additional tag to remove, separated by an ampersand. For
                *             example:
                *                 <code>/v1/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2</code>
                *         </p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    /**
        * <p>A request to change the settings for an event destination for a configuration
        *             set.</p>
        */
    export interface UpdateConfigurationSetEventDestinationRequest {
            /**
                * <p>The name of the configuration set that contains the event destination that you want to
                *             modify.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>The name of the event destination that you want to modify.</p>
                */
            EventDestinationName: string | undefined;
            /**
                * <p>An object that defines the event destination.</p>
                */
            EventDestination: EventDestinationDefinition | undefined;
    }
    export namespace UpdateConfigurationSetEventDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetEventDestinationRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface UpdateConfigurationSetEventDestinationResponse {
    }
    export namespace UpdateConfigurationSetEventDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetEventDestinationResponse) => any;
    }
}

declare module '@aws-sdk/client-pinpoint-email/node_modules/@aws-sdk/client-pinpoint-email/dist-types/models/PinpointEmailServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from PinpointEmail service.
        */
    export class PinpointEmailServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

