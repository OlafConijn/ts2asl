// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-mgn' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ChangeServerLifeCycleStateCommandInput, ChangeServerLifeCycleStateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/ChangeServerLifeCycleStateCommand";
    import { CreateLaunchConfigurationTemplateCommandInput, CreateLaunchConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/CreateLaunchConfigurationTemplateCommand";
    import { CreateReplicationConfigurationTemplateCommandInput, CreateReplicationConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/CreateReplicationConfigurationTemplateCommand";
    import { DeleteJobCommandInput, DeleteJobCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteJobCommand";
    import { DeleteLaunchConfigurationTemplateCommandInput, DeleteLaunchConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteLaunchConfigurationTemplateCommand";
    import { DeleteReplicationConfigurationTemplateCommandInput, DeleteReplicationConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteReplicationConfigurationTemplateCommand";
    import { DeleteSourceServerCommandInput, DeleteSourceServerCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteSourceServerCommand";
    import { DeleteVcenterClientCommandInput, DeleteVcenterClientCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteVcenterClientCommand";
    import { DescribeJobLogItemsCommandInput, DescribeJobLogItemsCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeJobLogItemsCommand";
    import { DescribeJobsCommandInput, DescribeJobsCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeJobsCommand";
    import { DescribeLaunchConfigurationTemplatesCommandInput, DescribeLaunchConfigurationTemplatesCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeLaunchConfigurationTemplatesCommand";
    import { DescribeReplicationConfigurationTemplatesCommandInput, DescribeReplicationConfigurationTemplatesCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeReplicationConfigurationTemplatesCommand";
    import { DescribeSourceServersCommandInput, DescribeSourceServersCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeSourceServersCommand";
    import { DescribeVcenterClientsCommandInput, DescribeVcenterClientsCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeVcenterClientsCommand";
    import { DisconnectFromServiceCommandInput, DisconnectFromServiceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DisconnectFromServiceCommand";
    import { FinalizeCutoverCommandInput, FinalizeCutoverCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/FinalizeCutoverCommand";
    import { GetLaunchConfigurationCommandInput, GetLaunchConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/GetLaunchConfigurationCommand";
    import { GetReplicationConfigurationCommandInput, GetReplicationConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/GetReplicationConfigurationCommand";
    import { InitializeServiceCommandInput, InitializeServiceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/InitializeServiceCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/ListTagsForResourceCommand";
    import { MarkAsArchivedCommandInput, MarkAsArchivedCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/MarkAsArchivedCommand";
    import { RetryDataReplicationCommandInput, RetryDataReplicationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/RetryDataReplicationCommand";
    import { StartCutoverCommandInput, StartCutoverCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartCutoverCommand";
    import { StartReplicationCommandInput, StartReplicationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartReplicationCommand";
    import { StartTestCommandInput, StartTestCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartTestCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/TagResourceCommand";
    import { TerminateTargetInstancesCommandInput, TerminateTargetInstancesCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/TerminateTargetInstancesCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UntagResourceCommand";
    import { UpdateLaunchConfigurationCommandInput, UpdateLaunchConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateLaunchConfigurationCommand";
    import { UpdateLaunchConfigurationTemplateCommandInput, UpdateLaunchConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateLaunchConfigurationTemplateCommand";
    import { UpdateReplicationConfigurationCommandInput, UpdateReplicationConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateReplicationConfigurationCommand";
    import { UpdateReplicationConfigurationTemplateCommandInput, UpdateReplicationConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateReplicationConfigurationTemplateCommand";
    import { UpdateSourceServerReplicationTypeCommandInput, UpdateSourceServerReplicationTypeCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateSourceServerReplicationTypeCommand";
    import { MgnClient } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    /**
        * <p>The Application Migration Service service.</p>
        */
    export class Mgn extends MgnClient {
            /**
                * <p>Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)</p>
                */
            changeServerLifeCycleState(args: ChangeServerLifeCycleStateCommandInput, options?: __HttpHandlerOptions): Promise<ChangeServerLifeCycleStateCommandOutput>;
            changeServerLifeCycleState(args: ChangeServerLifeCycleStateCommandInput, cb: (err: any, data?: ChangeServerLifeCycleStateCommandOutput) => void): void;
            changeServerLifeCycleState(args: ChangeServerLifeCycleStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ChangeServerLifeCycleStateCommandOutput) => void): void;
            /**
                * <p>Creates a new ReplicationConfigurationTemplate.</p>
                */
            createLaunchConfigurationTemplate(args: CreateLaunchConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateLaunchConfigurationTemplateCommandOutput>;
            createLaunchConfigurationTemplate(args: CreateLaunchConfigurationTemplateCommandInput, cb: (err: any, data?: CreateLaunchConfigurationTemplateCommandOutput) => void): void;
            createLaunchConfigurationTemplate(args: CreateLaunchConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLaunchConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Creates a new ReplicationConfigurationTemplate.</p>
                */
            createReplicationConfigurationTemplate(args: CreateReplicationConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateReplicationConfigurationTemplateCommandOutput>;
            createReplicationConfigurationTemplate(args: CreateReplicationConfigurationTemplateCommandInput, cb: (err: any, data?: CreateReplicationConfigurationTemplateCommandOutput) => void): void;
            createReplicationConfigurationTemplate(args: CreateReplicationConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReplicationConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes a single Job by ID.</p>
                */
            deleteJob(args: DeleteJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteJobCommandOutput>;
            deleteJob(args: DeleteJobCommandInput, cb: (err: any, data?: DeleteJobCommandOutput) => void): void;
            deleteJob(args: DeleteJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteJobCommandOutput) => void): void;
            /**
                * <p>Creates a new ReplicationConfigurationTemplate.</p>
                */
            deleteLaunchConfigurationTemplate(args: DeleteLaunchConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLaunchConfigurationTemplateCommandOutput>;
            deleteLaunchConfigurationTemplate(args: DeleteLaunchConfigurationTemplateCommandInput, cb: (err: any, data?: DeleteLaunchConfigurationTemplateCommandOutput) => void): void;
            deleteLaunchConfigurationTemplate(args: DeleteLaunchConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLaunchConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes a single Replication Configuration Template by ID</p>
                */
            deleteReplicationConfigurationTemplate(args: DeleteReplicationConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReplicationConfigurationTemplateCommandOutput>;
            deleteReplicationConfigurationTemplate(args: DeleteReplicationConfigurationTemplateCommandInput, cb: (err: any, data?: DeleteReplicationConfigurationTemplateCommandOutput) => void): void;
            deleteReplicationConfigurationTemplate(args: DeleteReplicationConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReplicationConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes a single source server by ID.</p>
                */
            deleteSourceServer(args: DeleteSourceServerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSourceServerCommandOutput>;
            deleteSourceServer(args: DeleteSourceServerCommandInput, cb: (err: any, data?: DeleteSourceServerCommandOutput) => void): void;
            deleteSourceServer(args: DeleteSourceServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSourceServerCommandOutput) => void): void;
            /**
                * <p>Deletes a given vCenter client by ID.</p>
                */
            deleteVcenterClient(args: DeleteVcenterClientCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVcenterClientCommandOutput>;
            deleteVcenterClient(args: DeleteVcenterClientCommandInput, cb: (err: any, data?: DeleteVcenterClientCommandOutput) => void): void;
            deleteVcenterClient(args: DeleteVcenterClientCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVcenterClientCommandOutput) => void): void;
            /**
                * <p>Retrieves detailed job log items with paging.</p>
                */
            describeJobLogItems(args: DescribeJobLogItemsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeJobLogItemsCommandOutput>;
            describeJobLogItems(args: DescribeJobLogItemsCommandInput, cb: (err: any, data?: DescribeJobLogItemsCommandOutput) => void): void;
            describeJobLogItems(args: DescribeJobLogItemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeJobLogItemsCommandOutput) => void): void;
            /**
                * <p>Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.</p>
                */
            describeJobs(args: DescribeJobsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeJobsCommandOutput>;
            describeJobs(args: DescribeJobsCommandInput, cb: (err: any, data?: DescribeJobsCommandOutput) => void): void;
            describeJobs(args: DescribeJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeJobsCommandOutput) => void): void;
            /**
                * <p>Creates a new ReplicationConfigurationTemplate.</p>
                */
            describeLaunchConfigurationTemplates(args: DescribeLaunchConfigurationTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLaunchConfigurationTemplatesCommandOutput>;
            describeLaunchConfigurationTemplates(args: DescribeLaunchConfigurationTemplatesCommandInput, cb: (err: any, data?: DescribeLaunchConfigurationTemplatesCommandOutput) => void): void;
            describeLaunchConfigurationTemplates(args: DescribeLaunchConfigurationTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLaunchConfigurationTemplatesCommandOutput) => void): void;
            /**
                * <p>Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.</p>
                */
            describeReplicationConfigurationTemplates(args: DescribeReplicationConfigurationTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationConfigurationTemplatesCommandOutput>;
            describeReplicationConfigurationTemplates(args: DescribeReplicationConfigurationTemplatesCommandInput, cb: (err: any, data?: DescribeReplicationConfigurationTemplatesCommandOutput) => void): void;
            describeReplicationConfigurationTemplates(args: DescribeReplicationConfigurationTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationConfigurationTemplatesCommandOutput) => void): void;
            /**
                * <p>Retrieves all SourceServers or multiple SourceServers by ID.</p>
                */
            describeSourceServers(args: DescribeSourceServersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSourceServersCommandOutput>;
            describeSourceServers(args: DescribeSourceServersCommandInput, cb: (err: any, data?: DescribeSourceServersCommandOutput) => void): void;
            describeSourceServers(args: DescribeSourceServersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSourceServersCommandOutput) => void): void;
            /**
                * <p>Returns a list of the installed vCenter clients.</p>
                */
            describeVcenterClients(args: DescribeVcenterClientsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeVcenterClientsCommandOutput>;
            describeVcenterClients(args: DescribeVcenterClientsCommandInput, cb: (err: any, data?: DescribeVcenterClientsCommandOutput) => void): void;
            describeVcenterClients(args: DescribeVcenterClientsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeVcenterClientsCommandOutput) => void): void;
            /**
                * <p>Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.</p>
                */
            disconnectFromService(args: DisconnectFromServiceCommandInput, options?: __HttpHandlerOptions): Promise<DisconnectFromServiceCommandOutput>;
            disconnectFromService(args: DisconnectFromServiceCommandInput, cb: (err: any, data?: DisconnectFromServiceCommandOutput) => void): void;
            disconnectFromService(args: DisconnectFromServiceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisconnectFromServiceCommandOutput) => void): void;
            /**
                * <p>Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.</p>
                */
            finalizeCutover(args: FinalizeCutoverCommandInput, options?: __HttpHandlerOptions): Promise<FinalizeCutoverCommandOutput>;
            finalizeCutover(args: FinalizeCutoverCommandInput, cb: (err: any, data?: FinalizeCutoverCommandOutput) => void): void;
            finalizeCutover(args: FinalizeCutoverCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: FinalizeCutoverCommandOutput) => void): void;
            /**
                * <p>Lists all LaunchConfigurations available, filtered by Source Server IDs.</p>
                */
            getLaunchConfiguration(args: GetLaunchConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetLaunchConfigurationCommandOutput>;
            getLaunchConfiguration(args: GetLaunchConfigurationCommandInput, cb: (err: any, data?: GetLaunchConfigurationCommandOutput) => void): void;
            getLaunchConfiguration(args: GetLaunchConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLaunchConfigurationCommandOutput) => void): void;
            /**
                * <p>Lists all ReplicationConfigurations, filtered by Source Server ID.</p>
                */
            getReplicationConfiguration(args: GetReplicationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetReplicationConfigurationCommandOutput>;
            getReplicationConfiguration(args: GetReplicationConfigurationCommandInput, cb: (err: any, data?: GetReplicationConfigurationCommandOutput) => void): void;
            getReplicationConfiguration(args: GetReplicationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetReplicationConfigurationCommandOutput) => void): void;
            /**
                * <p>Initialize Application Migration Service.</p>
                */
            initializeService(args: InitializeServiceCommandInput, options?: __HttpHandlerOptions): Promise<InitializeServiceCommandOutput>;
            initializeService(args: InitializeServiceCommandInput, cb: (err: any, data?: InitializeServiceCommandOutput) => void): void;
            initializeService(args: InitializeServiceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InitializeServiceCommandOutput) => void): void;
            /**
                * <p>List all tags for your Application Migration Service resources.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.</p>
                */
            markAsArchived(args: MarkAsArchivedCommandInput, options?: __HttpHandlerOptions): Promise<MarkAsArchivedCommandOutput>;
            markAsArchived(args: MarkAsArchivedCommandInput, cb: (err: any, data?: MarkAsArchivedCommandOutput) => void): void;
            markAsArchived(args: MarkAsArchivedCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MarkAsArchivedCommandOutput) => void): void;
            /**
                * <p>Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.</p>
                */
            retryDataReplication(args: RetryDataReplicationCommandInput, options?: __HttpHandlerOptions): Promise<RetryDataReplicationCommandOutput>;
            retryDataReplication(args: RetryDataReplicationCommandInput, cb: (err: any, data?: RetryDataReplicationCommandOutput) => void): void;
            retryDataReplication(args: RetryDataReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RetryDataReplicationCommandOutput) => void): void;
            /**
                * <p>Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.</p>
                */
            startCutover(args: StartCutoverCommandInput, options?: __HttpHandlerOptions): Promise<StartCutoverCommandOutput>;
            startCutover(args: StartCutoverCommandInput, cb: (err: any, data?: StartCutoverCommandOutput) => void): void;
            startCutover(args: StartCutoverCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartCutoverCommandOutput) => void): void;
            /**
                * <p>Starts replication for SNAPSHOT_SHIPPING agents.</p>
                */
            startReplication(args: StartReplicationCommandInput, options?: __HttpHandlerOptions): Promise<StartReplicationCommandOutput>;
            startReplication(args: StartReplicationCommandInput, cb: (err: any, data?: StartReplicationCommandOutput) => void): void;
            startReplication(args: StartReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartReplicationCommandOutput) => void): void;
            /**
                * <p>Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.</p>
                */
            startTest(args: StartTestCommandInput, options?: __HttpHandlerOptions): Promise<StartTestCommandOutput>;
            startTest(args: StartTestCommandInput, cb: (err: any, data?: StartTestCommandOutput) => void): void;
            startTest(args: StartTestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTestCommandOutput) => void): void;
            /**
                * <p>Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.</p>
                */
            terminateTargetInstances(args: TerminateTargetInstancesCommandInput, options?: __HttpHandlerOptions): Promise<TerminateTargetInstancesCommandOutput>;
            terminateTargetInstances(args: TerminateTargetInstancesCommandInput, cb: (err: any, data?: TerminateTargetInstancesCommandOutput) => void): void;
            terminateTargetInstances(args: TerminateTargetInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TerminateTargetInstancesCommandOutput) => void): void;
            /**
                * <p>Deletes the specified set of tags from the specified set of Application Migration Service resources.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates multiple LaunchConfigurations by Source Server ID.</p>
                */
            updateLaunchConfiguration(args: UpdateLaunchConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLaunchConfigurationCommandOutput>;
            updateLaunchConfiguration(args: UpdateLaunchConfigurationCommandInput, cb: (err: any, data?: UpdateLaunchConfigurationCommandOutput) => void): void;
            updateLaunchConfiguration(args: UpdateLaunchConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLaunchConfigurationCommandOutput) => void): void;
            /**
                * <p>Creates a new ReplicationConfigurationTemplate.</p>
                */
            updateLaunchConfigurationTemplate(args: UpdateLaunchConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLaunchConfigurationTemplateCommandOutput>;
            updateLaunchConfigurationTemplate(args: UpdateLaunchConfigurationTemplateCommandInput, cb: (err: any, data?: UpdateLaunchConfigurationTemplateCommandOutput) => void): void;
            updateLaunchConfigurationTemplate(args: UpdateLaunchConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLaunchConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Allows you to update multiple ReplicationConfigurations by Source Server ID.</p>
                */
            updateReplicationConfiguration(args: UpdateReplicationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateReplicationConfigurationCommandOutput>;
            updateReplicationConfiguration(args: UpdateReplicationConfigurationCommandInput, cb: (err: any, data?: UpdateReplicationConfigurationCommandOutput) => void): void;
            updateReplicationConfiguration(args: UpdateReplicationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateReplicationConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates multiple ReplicationConfigurationTemplates by ID.</p>
                */
            updateReplicationConfigurationTemplate(args: UpdateReplicationConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateReplicationConfigurationTemplateCommandOutput>;
            updateReplicationConfigurationTemplate(args: UpdateReplicationConfigurationTemplateCommandInput, cb: (err: any, data?: UpdateReplicationConfigurationTemplateCommandOutput) => void): void;
            updateReplicationConfigurationTemplate(args: UpdateReplicationConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateReplicationConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.</p>
                */
            updateSourceServerReplicationType(args: UpdateSourceServerReplicationTypeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSourceServerReplicationTypeCommandOutput>;
            updateSourceServerReplicationType(args: UpdateSourceServerReplicationTypeCommandInput, cb: (err: any, data?: UpdateSourceServerReplicationTypeCommandOutput) => void): void;
            updateSourceServerReplicationType(args: UpdateSourceServerReplicationTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSourceServerReplicationTypeCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/ChangeServerLifeCycleStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { ChangeServerLifeCycleStateRequest, SourceServer } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface ChangeServerLifeCycleStateCommandInput extends ChangeServerLifeCycleStateRequest {
    }
    export interface ChangeServerLifeCycleStateCommandOutput extends SourceServer, __MetadataBearer {
    }
    /**
        * <p>Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, ChangeServerLifeCycleStateCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, ChangeServerLifeCycleStateCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new ChangeServerLifeCycleStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ChangeServerLifeCycleStateCommandInput} for command's `input` shape.
        * @see {@link ChangeServerLifeCycleStateCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class ChangeServerLifeCycleStateCommand extends $Command<ChangeServerLifeCycleStateCommandInput, ChangeServerLifeCycleStateCommandOutput, MgnClientResolvedConfig> {
            readonly input: ChangeServerLifeCycleStateCommandInput;
            constructor(input: ChangeServerLifeCycleStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ChangeServerLifeCycleStateCommandInput, ChangeServerLifeCycleStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/CreateLaunchConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { CreateLaunchConfigurationTemplateRequest, LaunchConfigurationTemplate } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface CreateLaunchConfigurationTemplateCommandInput extends CreateLaunchConfigurationTemplateRequest {
    }
    export interface CreateLaunchConfigurationTemplateCommandOutput extends LaunchConfigurationTemplate, __MetadataBearer {
    }
    /**
        * <p>Creates a new ReplicationConfigurationTemplate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, CreateLaunchConfigurationTemplateCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, CreateLaunchConfigurationTemplateCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new CreateLaunchConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLaunchConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateLaunchConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class CreateLaunchConfigurationTemplateCommand extends $Command<CreateLaunchConfigurationTemplateCommandInput, CreateLaunchConfigurationTemplateCommandOutput, MgnClientResolvedConfig> {
            readonly input: CreateLaunchConfigurationTemplateCommandInput;
            constructor(input: CreateLaunchConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLaunchConfigurationTemplateCommandInput, CreateLaunchConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/CreateReplicationConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { CreateReplicationConfigurationTemplateRequest, ReplicationConfigurationTemplate } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface CreateReplicationConfigurationTemplateCommandInput extends CreateReplicationConfigurationTemplateRequest {
    }
    export interface CreateReplicationConfigurationTemplateCommandOutput extends ReplicationConfigurationTemplate, __MetadataBearer {
    }
    /**
        * <p>Creates a new ReplicationConfigurationTemplate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, CreateReplicationConfigurationTemplateCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, CreateReplicationConfigurationTemplateCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new CreateReplicationConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReplicationConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateReplicationConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class CreateReplicationConfigurationTemplateCommand extends $Command<CreateReplicationConfigurationTemplateCommandInput, CreateReplicationConfigurationTemplateCommandOutput, MgnClientResolvedConfig> {
            readonly input: CreateReplicationConfigurationTemplateCommandInput;
            constructor(input: CreateReplicationConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReplicationConfigurationTemplateCommandInput, CreateReplicationConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DeleteJobRequest, DeleteJobResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DeleteJobCommandInput extends DeleteJobRequest {
    }
    export interface DeleteJobCommandOutput extends DeleteJobResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a single Job by ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DeleteJobCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DeleteJobCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DeleteJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteJobCommandInput} for command's `input` shape.
        * @see {@link DeleteJobCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DeleteJobCommand extends $Command<DeleteJobCommandInput, DeleteJobCommandOutput, MgnClientResolvedConfig> {
            readonly input: DeleteJobCommandInput;
            constructor(input: DeleteJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteJobCommandInput, DeleteJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteLaunchConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DeleteLaunchConfigurationTemplateRequest, DeleteLaunchConfigurationTemplateResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DeleteLaunchConfigurationTemplateCommandInput extends DeleteLaunchConfigurationTemplateRequest {
    }
    export interface DeleteLaunchConfigurationTemplateCommandOutput extends DeleteLaunchConfigurationTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new ReplicationConfigurationTemplate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DeleteLaunchConfigurationTemplateCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DeleteLaunchConfigurationTemplateCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DeleteLaunchConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLaunchConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteLaunchConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DeleteLaunchConfigurationTemplateCommand extends $Command<DeleteLaunchConfigurationTemplateCommandInput, DeleteLaunchConfigurationTemplateCommandOutput, MgnClientResolvedConfig> {
            readonly input: DeleteLaunchConfigurationTemplateCommandInput;
            constructor(input: DeleteLaunchConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLaunchConfigurationTemplateCommandInput, DeleteLaunchConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteReplicationConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DeleteReplicationConfigurationTemplateRequest, DeleteReplicationConfigurationTemplateResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DeleteReplicationConfigurationTemplateCommandInput extends DeleteReplicationConfigurationTemplateRequest {
    }
    export interface DeleteReplicationConfigurationTemplateCommandOutput extends DeleteReplicationConfigurationTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a single Replication Configuration Template by ID</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DeleteReplicationConfigurationTemplateCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DeleteReplicationConfigurationTemplateCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DeleteReplicationConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReplicationConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteReplicationConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DeleteReplicationConfigurationTemplateCommand extends $Command<DeleteReplicationConfigurationTemplateCommandInput, DeleteReplicationConfigurationTemplateCommandOutput, MgnClientResolvedConfig> {
            readonly input: DeleteReplicationConfigurationTemplateCommandInput;
            constructor(input: DeleteReplicationConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReplicationConfigurationTemplateCommandInput, DeleteReplicationConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteSourceServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DeleteSourceServerRequest, DeleteSourceServerResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DeleteSourceServerCommandInput extends DeleteSourceServerRequest {
    }
    export interface DeleteSourceServerCommandOutput extends DeleteSourceServerResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a single source server by ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DeleteSourceServerCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DeleteSourceServerCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DeleteSourceServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSourceServerCommandInput} for command's `input` shape.
        * @see {@link DeleteSourceServerCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DeleteSourceServerCommand extends $Command<DeleteSourceServerCommandInput, DeleteSourceServerCommandOutput, MgnClientResolvedConfig> {
            readonly input: DeleteSourceServerCommandInput;
            constructor(input: DeleteSourceServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSourceServerCommandInput, DeleteSourceServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteVcenterClientCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DeleteVcenterClientRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DeleteVcenterClientCommandInput extends DeleteVcenterClientRequest {
    }
    export interface DeleteVcenterClientCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a given vCenter client by ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DeleteVcenterClientCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DeleteVcenterClientCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DeleteVcenterClientCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVcenterClientCommandInput} for command's `input` shape.
        * @see {@link DeleteVcenterClientCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DeleteVcenterClientCommand extends $Command<DeleteVcenterClientCommandInput, DeleteVcenterClientCommandOutput, MgnClientResolvedConfig> {
            readonly input: DeleteVcenterClientCommandInput;
            constructor(input: DeleteVcenterClientCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVcenterClientCommandInput, DeleteVcenterClientCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeJobLogItemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DescribeJobLogItemsRequest, DescribeJobLogItemsResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DescribeJobLogItemsCommandInput extends DescribeJobLogItemsRequest {
    }
    export interface DescribeJobLogItemsCommandOutput extends DescribeJobLogItemsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves detailed job log items with paging.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DescribeJobLogItemsCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DescribeJobLogItemsCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DescribeJobLogItemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeJobLogItemsCommandInput} for command's `input` shape.
        * @see {@link DescribeJobLogItemsCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DescribeJobLogItemsCommand extends $Command<DescribeJobLogItemsCommandInput, DescribeJobLogItemsCommandOutput, MgnClientResolvedConfig> {
            readonly input: DescribeJobLogItemsCommandInput;
            constructor(input: DescribeJobLogItemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeJobLogItemsCommandInput, DescribeJobLogItemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DescribeJobsRequest, DescribeJobsResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DescribeJobsCommandInput extends DescribeJobsRequest {
    }
    export interface DescribeJobsCommandOutput extends DescribeJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DescribeJobsCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DescribeJobsCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DescribeJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeJobsCommandInput} for command's `input` shape.
        * @see {@link DescribeJobsCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DescribeJobsCommand extends $Command<DescribeJobsCommandInput, DescribeJobsCommandOutput, MgnClientResolvedConfig> {
            readonly input: DescribeJobsCommandInput;
            constructor(input: DescribeJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeJobsCommandInput, DescribeJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeLaunchConfigurationTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DescribeLaunchConfigurationTemplatesRequest, DescribeLaunchConfigurationTemplatesResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DescribeLaunchConfigurationTemplatesCommandInput extends DescribeLaunchConfigurationTemplatesRequest {
    }
    export interface DescribeLaunchConfigurationTemplatesCommandOutput extends DescribeLaunchConfigurationTemplatesResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new ReplicationConfigurationTemplate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DescribeLaunchConfigurationTemplatesCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DescribeLaunchConfigurationTemplatesCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DescribeLaunchConfigurationTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLaunchConfigurationTemplatesCommandInput} for command's `input` shape.
        * @see {@link DescribeLaunchConfigurationTemplatesCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DescribeLaunchConfigurationTemplatesCommand extends $Command<DescribeLaunchConfigurationTemplatesCommandInput, DescribeLaunchConfigurationTemplatesCommandOutput, MgnClientResolvedConfig> {
            readonly input: DescribeLaunchConfigurationTemplatesCommandInput;
            constructor(input: DescribeLaunchConfigurationTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLaunchConfigurationTemplatesCommandInput, DescribeLaunchConfigurationTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeReplicationConfigurationTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DescribeReplicationConfigurationTemplatesRequest, DescribeReplicationConfigurationTemplatesResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DescribeReplicationConfigurationTemplatesCommandInput extends DescribeReplicationConfigurationTemplatesRequest {
    }
    export interface DescribeReplicationConfigurationTemplatesCommandOutput extends DescribeReplicationConfigurationTemplatesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DescribeReplicationConfigurationTemplatesCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DescribeReplicationConfigurationTemplatesCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DescribeReplicationConfigurationTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationConfigurationTemplatesCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationConfigurationTemplatesCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DescribeReplicationConfigurationTemplatesCommand extends $Command<DescribeReplicationConfigurationTemplatesCommandInput, DescribeReplicationConfigurationTemplatesCommandOutput, MgnClientResolvedConfig> {
            readonly input: DescribeReplicationConfigurationTemplatesCommandInput;
            constructor(input: DescribeReplicationConfigurationTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationConfigurationTemplatesCommandInput, DescribeReplicationConfigurationTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeSourceServersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DescribeSourceServersRequest, DescribeSourceServersResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DescribeSourceServersCommandInput extends DescribeSourceServersRequest {
    }
    export interface DescribeSourceServersCommandOutput extends DescribeSourceServersResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves all SourceServers or multiple SourceServers by ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DescribeSourceServersCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DescribeSourceServersCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DescribeSourceServersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSourceServersCommandInput} for command's `input` shape.
        * @see {@link DescribeSourceServersCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DescribeSourceServersCommand extends $Command<DescribeSourceServersCommandInput, DescribeSourceServersCommandOutput, MgnClientResolvedConfig> {
            readonly input: DescribeSourceServersCommandInput;
            constructor(input: DescribeSourceServersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSourceServersCommandInput, DescribeSourceServersCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeVcenterClientsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DescribeVcenterClientsRequest, DescribeVcenterClientsResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DescribeVcenterClientsCommandInput extends DescribeVcenterClientsRequest {
    }
    export interface DescribeVcenterClientsCommandOutput extends DescribeVcenterClientsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the installed vCenter clients.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DescribeVcenterClientsCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DescribeVcenterClientsCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DescribeVcenterClientsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeVcenterClientsCommandInput} for command's `input` shape.
        * @see {@link DescribeVcenterClientsCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DescribeVcenterClientsCommand extends $Command<DescribeVcenterClientsCommandInput, DescribeVcenterClientsCommandOutput, MgnClientResolvedConfig> {
            readonly input: DescribeVcenterClientsCommandInput;
            constructor(input: DescribeVcenterClientsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeVcenterClientsCommandInput, DescribeVcenterClientsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DisconnectFromServiceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { DisconnectFromServiceRequest, SourceServer } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface DisconnectFromServiceCommandInput extends DisconnectFromServiceRequest {
    }
    export interface DisconnectFromServiceCommandOutput extends SourceServer, __MetadataBearer {
    }
    /**
        * <p>Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, DisconnectFromServiceCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, DisconnectFromServiceCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new DisconnectFromServiceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisconnectFromServiceCommandInput} for command's `input` shape.
        * @see {@link DisconnectFromServiceCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class DisconnectFromServiceCommand extends $Command<DisconnectFromServiceCommandInput, DisconnectFromServiceCommandOutput, MgnClientResolvedConfig> {
            readonly input: DisconnectFromServiceCommandInput;
            constructor(input: DisconnectFromServiceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisconnectFromServiceCommandInput, DisconnectFromServiceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/FinalizeCutoverCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { FinalizeCutoverRequest, SourceServer } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface FinalizeCutoverCommandInput extends FinalizeCutoverRequest {
    }
    export interface FinalizeCutoverCommandOutput extends SourceServer, __MetadataBearer {
    }
    /**
        * <p>Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, FinalizeCutoverCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, FinalizeCutoverCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new FinalizeCutoverCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link FinalizeCutoverCommandInput} for command's `input` shape.
        * @see {@link FinalizeCutoverCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class FinalizeCutoverCommand extends $Command<FinalizeCutoverCommandInput, FinalizeCutoverCommandOutput, MgnClientResolvedConfig> {
            readonly input: FinalizeCutoverCommandInput;
            constructor(input: FinalizeCutoverCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<FinalizeCutoverCommandInput, FinalizeCutoverCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/GetLaunchConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { GetLaunchConfigurationRequest, LaunchConfiguration } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface GetLaunchConfigurationCommandInput extends GetLaunchConfigurationRequest {
    }
    export interface GetLaunchConfigurationCommandOutput extends LaunchConfiguration, __MetadataBearer {
    }
    /**
        * <p>Lists all LaunchConfigurations available, filtered by Source Server IDs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, GetLaunchConfigurationCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, GetLaunchConfigurationCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new GetLaunchConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLaunchConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetLaunchConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class GetLaunchConfigurationCommand extends $Command<GetLaunchConfigurationCommandInput, GetLaunchConfigurationCommandOutput, MgnClientResolvedConfig> {
            readonly input: GetLaunchConfigurationCommandInput;
            constructor(input: GetLaunchConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLaunchConfigurationCommandInput, GetLaunchConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/GetReplicationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { GetReplicationConfigurationRequest, ReplicationConfiguration } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface GetReplicationConfigurationCommandInput extends GetReplicationConfigurationRequest {
    }
    export interface GetReplicationConfigurationCommandOutput extends ReplicationConfiguration, __MetadataBearer {
    }
    /**
        * <p>Lists all ReplicationConfigurations, filtered by Source Server ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, GetReplicationConfigurationCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, GetReplicationConfigurationCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new GetReplicationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetReplicationConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetReplicationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class GetReplicationConfigurationCommand extends $Command<GetReplicationConfigurationCommandInput, GetReplicationConfigurationCommandOutput, MgnClientResolvedConfig> {
            readonly input: GetReplicationConfigurationCommandInput;
            constructor(input: GetReplicationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetReplicationConfigurationCommandInput, GetReplicationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/InitializeServiceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { InitializeServiceRequest, InitializeServiceResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface InitializeServiceCommandInput extends InitializeServiceRequest {
    }
    export interface InitializeServiceCommandOutput extends InitializeServiceResponse, __MetadataBearer {
    }
    /**
        * <p>Initialize Application Migration Service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, InitializeServiceCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, InitializeServiceCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new InitializeServiceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InitializeServiceCommandInput} for command's `input` shape.
        * @see {@link InitializeServiceCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class InitializeServiceCommand extends $Command<InitializeServiceCommandInput, InitializeServiceCommandOutput, MgnClientResolvedConfig> {
            readonly input: InitializeServiceCommandInput;
            constructor(input: InitializeServiceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InitializeServiceCommandInput, InitializeServiceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>List all tags for your Application Migration Service resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, ListTagsForResourceCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, ListTagsForResourceCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, MgnClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/MarkAsArchivedCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { MarkAsArchivedRequest, SourceServer } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface MarkAsArchivedCommandInput extends MarkAsArchivedRequest {
    }
    export interface MarkAsArchivedCommandOutput extends SourceServer, __MetadataBearer {
    }
    /**
        * <p>Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, MarkAsArchivedCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, MarkAsArchivedCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new MarkAsArchivedCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MarkAsArchivedCommandInput} for command's `input` shape.
        * @see {@link MarkAsArchivedCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class MarkAsArchivedCommand extends $Command<MarkAsArchivedCommandInput, MarkAsArchivedCommandOutput, MgnClientResolvedConfig> {
            readonly input: MarkAsArchivedCommandInput;
            constructor(input: MarkAsArchivedCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MarkAsArchivedCommandInput, MarkAsArchivedCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/RetryDataReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { RetryDataReplicationRequest, SourceServer } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface RetryDataReplicationCommandInput extends RetryDataReplicationRequest {
    }
    export interface RetryDataReplicationCommandOutput extends SourceServer, __MetadataBearer {
    }
    /**
        * <p>Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, RetryDataReplicationCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, RetryDataReplicationCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new RetryDataReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RetryDataReplicationCommandInput} for command's `input` shape.
        * @see {@link RetryDataReplicationCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class RetryDataReplicationCommand extends $Command<RetryDataReplicationCommandInput, RetryDataReplicationCommandOutput, MgnClientResolvedConfig> {
            readonly input: RetryDataReplicationCommandInput;
            constructor(input: RetryDataReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RetryDataReplicationCommandInput, RetryDataReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartCutoverCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { StartCutoverRequest, StartCutoverResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface StartCutoverCommandInput extends StartCutoverRequest {
    }
    export interface StartCutoverCommandOutput extends StartCutoverResponse, __MetadataBearer {
    }
    /**
        * <p>Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, StartCutoverCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, StartCutoverCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new StartCutoverCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartCutoverCommandInput} for command's `input` shape.
        * @see {@link StartCutoverCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class StartCutoverCommand extends $Command<StartCutoverCommandInput, StartCutoverCommandOutput, MgnClientResolvedConfig> {
            readonly input: StartCutoverCommandInput;
            constructor(input: StartCutoverCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartCutoverCommandInput, StartCutoverCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { SourceServer, StartReplicationRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface StartReplicationCommandInput extends StartReplicationRequest {
    }
    export interface StartReplicationCommandOutput extends SourceServer, __MetadataBearer {
    }
    /**
        * <p>Starts replication for SNAPSHOT_SHIPPING agents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, StartReplicationCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, StartReplicationCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new StartReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartReplicationCommandInput} for command's `input` shape.
        * @see {@link StartReplicationCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class StartReplicationCommand extends $Command<StartReplicationCommandInput, StartReplicationCommandOutput, MgnClientResolvedConfig> {
            readonly input: StartReplicationCommandInput;
            constructor(input: StartReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartReplicationCommandInput, StartReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartTestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { StartTestRequest, StartTestResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface StartTestCommandInput extends StartTestRequest {
    }
    export interface StartTestCommandOutput extends StartTestResponse, __MetadataBearer {
    }
    /**
        * <p>Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, StartTestCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, StartTestCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new StartTestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartTestCommandInput} for command's `input` shape.
        * @see {@link StartTestCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class StartTestCommand extends $Command<StartTestCommandInput, StartTestCommandOutput, MgnClientResolvedConfig> {
            readonly input: StartTestCommandInput;
            constructor(input: StartTestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartTestCommandInput, StartTestCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { TagResourceRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, TagResourceCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, TagResourceCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, MgnClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/TerminateTargetInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { TerminateTargetInstancesRequest, TerminateTargetInstancesResponse } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface TerminateTargetInstancesCommandInput extends TerminateTargetInstancesRequest {
    }
    export interface TerminateTargetInstancesCommandOutput extends TerminateTargetInstancesResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, TerminateTargetInstancesCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, TerminateTargetInstancesCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new TerminateTargetInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TerminateTargetInstancesCommandInput} for command's `input` shape.
        * @see {@link TerminateTargetInstancesCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class TerminateTargetInstancesCommand extends $Command<TerminateTargetInstancesCommandInput, TerminateTargetInstancesCommandOutput, MgnClientResolvedConfig> {
            readonly input: TerminateTargetInstancesCommandInput;
            constructor(input: TerminateTargetInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TerminateTargetInstancesCommandInput, TerminateTargetInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { UntagResourceRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified set of tags from the specified set of Application Migration Service resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, UntagResourceCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, UntagResourceCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, MgnClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateLaunchConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { LaunchConfiguration, UpdateLaunchConfigurationRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface UpdateLaunchConfigurationCommandInput extends UpdateLaunchConfigurationRequest {
    }
    export interface UpdateLaunchConfigurationCommandOutput extends LaunchConfiguration, __MetadataBearer {
    }
    /**
        * <p>Updates multiple LaunchConfigurations by Source Server ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, UpdateLaunchConfigurationCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, UpdateLaunchConfigurationCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new UpdateLaunchConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLaunchConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateLaunchConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class UpdateLaunchConfigurationCommand extends $Command<UpdateLaunchConfigurationCommandInput, UpdateLaunchConfigurationCommandOutput, MgnClientResolvedConfig> {
            readonly input: UpdateLaunchConfigurationCommandInput;
            constructor(input: UpdateLaunchConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLaunchConfigurationCommandInput, UpdateLaunchConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateLaunchConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { LaunchConfigurationTemplate, UpdateLaunchConfigurationTemplateRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface UpdateLaunchConfigurationTemplateCommandInput extends UpdateLaunchConfigurationTemplateRequest {
    }
    export interface UpdateLaunchConfigurationTemplateCommandOutput extends LaunchConfigurationTemplate, __MetadataBearer {
    }
    /**
        * <p>Creates a new ReplicationConfigurationTemplate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, UpdateLaunchConfigurationTemplateCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, UpdateLaunchConfigurationTemplateCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new UpdateLaunchConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLaunchConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateLaunchConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class UpdateLaunchConfigurationTemplateCommand extends $Command<UpdateLaunchConfigurationTemplateCommandInput, UpdateLaunchConfigurationTemplateCommandOutput, MgnClientResolvedConfig> {
            readonly input: UpdateLaunchConfigurationTemplateCommandInput;
            constructor(input: UpdateLaunchConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLaunchConfigurationTemplateCommandInput, UpdateLaunchConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateReplicationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { ReplicationConfiguration, UpdateReplicationConfigurationRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface UpdateReplicationConfigurationCommandInput extends UpdateReplicationConfigurationRequest {
    }
    export interface UpdateReplicationConfigurationCommandOutput extends ReplicationConfiguration, __MetadataBearer {
    }
    /**
        * <p>Allows you to update multiple ReplicationConfigurations by Source Server ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, UpdateReplicationConfigurationCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, UpdateReplicationConfigurationCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new UpdateReplicationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateReplicationConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateReplicationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class UpdateReplicationConfigurationCommand extends $Command<UpdateReplicationConfigurationCommandInput, UpdateReplicationConfigurationCommandOutput, MgnClientResolvedConfig> {
            readonly input: UpdateReplicationConfigurationCommandInput;
            constructor(input: UpdateReplicationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateReplicationConfigurationCommandInput, UpdateReplicationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateReplicationConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { ReplicationConfigurationTemplate, UpdateReplicationConfigurationTemplateRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface UpdateReplicationConfigurationTemplateCommandInput extends UpdateReplicationConfigurationTemplateRequest {
    }
    export interface UpdateReplicationConfigurationTemplateCommandOutput extends ReplicationConfigurationTemplate, __MetadataBearer {
    }
    /**
        * <p>Updates multiple ReplicationConfigurationTemplates by ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, UpdateReplicationConfigurationTemplateCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, UpdateReplicationConfigurationTemplateCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new UpdateReplicationConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateReplicationConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateReplicationConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class UpdateReplicationConfigurationTemplateCommand extends $Command<UpdateReplicationConfigurationTemplateCommandInput, UpdateReplicationConfigurationTemplateCommandOutput, MgnClientResolvedConfig> {
            readonly input: UpdateReplicationConfigurationTemplateCommandInput;
            constructor(input: UpdateReplicationConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateReplicationConfigurationTemplateCommandInput, UpdateReplicationConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateSourceServerReplicationTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MgnClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient";
    import { SourceServer, UpdateSourceServerReplicationTypeRequest } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0";
    export interface UpdateSourceServerReplicationTypeCommandInput extends UpdateSourceServerReplicationTypeRequest {
    }
    export interface UpdateSourceServerReplicationTypeCommandOutput extends SourceServer, __MetadataBearer {
    }
    /**
        * <p>Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MgnClient, UpdateSourceServerReplicationTypeCommand } from "@aws-sdk/client-mgn"; // ES Modules import
        * // const { MgnClient, UpdateSourceServerReplicationTypeCommand } = require("@aws-sdk/client-mgn"); // CommonJS import
        * const client = new MgnClient(config);
        * const command = new UpdateSourceServerReplicationTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSourceServerReplicationTypeCommandInput} for command's `input` shape.
        * @see {@link UpdateSourceServerReplicationTypeCommandOutput} for command's `response` shape.
        * @see {@link MgnClientResolvedConfig | config} for MgnClient's `config` shape.
        *
        */
    export class UpdateSourceServerReplicationTypeCommand extends $Command<UpdateSourceServerReplicationTypeCommandInput, UpdateSourceServerReplicationTypeCommandOutput, MgnClientResolvedConfig> {
            readonly input: UpdateSourceServerReplicationTypeCommandInput;
            constructor(input: UpdateSourceServerReplicationTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MgnClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSourceServerReplicationTypeCommandInput, UpdateSourceServerReplicationTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/MgnClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { ChangeServerLifeCycleStateCommandInput, ChangeServerLifeCycleStateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/ChangeServerLifeCycleStateCommand";
    import { CreateLaunchConfigurationTemplateCommandInput, CreateLaunchConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/CreateLaunchConfigurationTemplateCommand";
    import { CreateReplicationConfigurationTemplateCommandInput, CreateReplicationConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/CreateReplicationConfigurationTemplateCommand";
    import { DeleteJobCommandInput, DeleteJobCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteJobCommand";
    import { DeleteLaunchConfigurationTemplateCommandInput, DeleteLaunchConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteLaunchConfigurationTemplateCommand";
    import { DeleteReplicationConfigurationTemplateCommandInput, DeleteReplicationConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteReplicationConfigurationTemplateCommand";
    import { DeleteSourceServerCommandInput, DeleteSourceServerCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteSourceServerCommand";
    import { DeleteVcenterClientCommandInput, DeleteVcenterClientCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DeleteVcenterClientCommand";
    import { DescribeJobLogItemsCommandInput, DescribeJobLogItemsCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeJobLogItemsCommand";
    import { DescribeJobsCommandInput, DescribeJobsCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeJobsCommand";
    import { DescribeLaunchConfigurationTemplatesCommandInput, DescribeLaunchConfigurationTemplatesCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeLaunchConfigurationTemplatesCommand";
    import { DescribeReplicationConfigurationTemplatesCommandInput, DescribeReplicationConfigurationTemplatesCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeReplicationConfigurationTemplatesCommand";
    import { DescribeSourceServersCommandInput, DescribeSourceServersCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeSourceServersCommand";
    import { DescribeVcenterClientsCommandInput, DescribeVcenterClientsCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DescribeVcenterClientsCommand";
    import { DisconnectFromServiceCommandInput, DisconnectFromServiceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/DisconnectFromServiceCommand";
    import { FinalizeCutoverCommandInput, FinalizeCutoverCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/FinalizeCutoverCommand";
    import { GetLaunchConfigurationCommandInput, GetLaunchConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/GetLaunchConfigurationCommand";
    import { GetReplicationConfigurationCommandInput, GetReplicationConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/GetReplicationConfigurationCommand";
    import { InitializeServiceCommandInput, InitializeServiceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/InitializeServiceCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/ListTagsForResourceCommand";
    import { MarkAsArchivedCommandInput, MarkAsArchivedCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/MarkAsArchivedCommand";
    import { RetryDataReplicationCommandInput, RetryDataReplicationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/RetryDataReplicationCommand";
    import { StartCutoverCommandInput, StartCutoverCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartCutoverCommand";
    import { StartReplicationCommandInput, StartReplicationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartReplicationCommand";
    import { StartTestCommandInput, StartTestCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/StartTestCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/TagResourceCommand";
    import { TerminateTargetInstancesCommandInput, TerminateTargetInstancesCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/TerminateTargetInstancesCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UntagResourceCommand";
    import { UpdateLaunchConfigurationCommandInput, UpdateLaunchConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateLaunchConfigurationCommand";
    import { UpdateLaunchConfigurationTemplateCommandInput, UpdateLaunchConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateLaunchConfigurationTemplateCommand";
    import { UpdateReplicationConfigurationCommandInput, UpdateReplicationConfigurationCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateReplicationConfigurationCommand";
    import { UpdateReplicationConfigurationTemplateCommandInput, UpdateReplicationConfigurationTemplateCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateReplicationConfigurationTemplateCommand";
    import { UpdateSourceServerReplicationTypeCommandInput, UpdateSourceServerReplicationTypeCommandOutput } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/commands/UpdateSourceServerReplicationTypeCommand";
    export type ServiceInputTypes = ChangeServerLifeCycleStateCommandInput | CreateLaunchConfigurationTemplateCommandInput | CreateReplicationConfigurationTemplateCommandInput | DeleteJobCommandInput | DeleteLaunchConfigurationTemplateCommandInput | DeleteReplicationConfigurationTemplateCommandInput | DeleteSourceServerCommandInput | DeleteVcenterClientCommandInput | DescribeJobLogItemsCommandInput | DescribeJobsCommandInput | DescribeLaunchConfigurationTemplatesCommandInput | DescribeReplicationConfigurationTemplatesCommandInput | DescribeSourceServersCommandInput | DescribeVcenterClientsCommandInput | DisconnectFromServiceCommandInput | FinalizeCutoverCommandInput | GetLaunchConfigurationCommandInput | GetReplicationConfigurationCommandInput | InitializeServiceCommandInput | ListTagsForResourceCommandInput | MarkAsArchivedCommandInput | RetryDataReplicationCommandInput | StartCutoverCommandInput | StartReplicationCommandInput | StartTestCommandInput | TagResourceCommandInput | TerminateTargetInstancesCommandInput | UntagResourceCommandInput | UpdateLaunchConfigurationCommandInput | UpdateLaunchConfigurationTemplateCommandInput | UpdateReplicationConfigurationCommandInput | UpdateReplicationConfigurationTemplateCommandInput | UpdateSourceServerReplicationTypeCommandInput;
    export type ServiceOutputTypes = ChangeServerLifeCycleStateCommandOutput | CreateLaunchConfigurationTemplateCommandOutput | CreateReplicationConfigurationTemplateCommandOutput | DeleteJobCommandOutput | DeleteLaunchConfigurationTemplateCommandOutput | DeleteReplicationConfigurationTemplateCommandOutput | DeleteSourceServerCommandOutput | DeleteVcenterClientCommandOutput | DescribeJobLogItemsCommandOutput | DescribeJobsCommandOutput | DescribeLaunchConfigurationTemplatesCommandOutput | DescribeReplicationConfigurationTemplatesCommandOutput | DescribeSourceServersCommandOutput | DescribeVcenterClientsCommandOutput | DisconnectFromServiceCommandOutput | FinalizeCutoverCommandOutput | GetLaunchConfigurationCommandOutput | GetReplicationConfigurationCommandOutput | InitializeServiceCommandOutput | ListTagsForResourceCommandOutput | MarkAsArchivedCommandOutput | RetryDataReplicationCommandOutput | StartCutoverCommandOutput | StartReplicationCommandOutput | StartTestCommandOutput | TagResourceCommandOutput | TerminateTargetInstancesCommandOutput | UntagResourceCommandOutput | UpdateLaunchConfigurationCommandOutput | UpdateLaunchConfigurationTemplateCommandOutput | UpdateReplicationConfigurationCommandOutput | UpdateReplicationConfigurationTemplateCommandOutput | UpdateSourceServerReplicationTypeCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MgnClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MgnClient class constructor that set the region, credentials and other options.
        */
    export interface MgnClientConfig extends MgnClientConfigType {
    }
    type MgnClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MgnClient class. This is resolved and normalized from the {@link MgnClientConfig | constructor configuration interface}.
        */
    export interface MgnClientResolvedConfig extends MgnClientResolvedConfigType {
    }
    /**
        * <p>The Application Migration Service service.</p>
        */
    export class MgnClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MgnClientResolvedConfig> {
            /**
                * The resolved configuration of MgnClient class. This is resolved and normalized from the {@link MgnClientConfig | constructor configuration interface}.
                */
            readonly config: MgnClientResolvedConfig;
            constructor(configuration: MgnClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MgnServiceException as __BaseException } from "@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/MgnServiceException";
    /**
        * <p>Operating denied due to a file permission or access check error.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export interface InitializeServiceRequest {
    }
    export namespace InitializeServiceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InitializeServiceRequest) => any;
    }
    export interface InitializeServiceResponse {
    }
    export namespace InitializeServiceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InitializeServiceResponse) => any;
    }
    /**
        * <p>Validate exception field.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>Validate exception field name.</p>
                */
            name?: string;
            /**
                * <p>Validate exception field message.</p>
                */
            message?: string;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "cannotParse",
            FIELD_VALIDATION_FAILED = "fieldValidationFailed",
            OTHER = "other",
            UNKNOWN_OPERATION = "unknownOperation"
    }
    /**
        * <p>Validate exception.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            code?: string;
            /**
                * <p>Validate exception reason.</p>
                */
            reason?: ValidationExceptionReason | string;
            /**
                * <p>Validate exception field list.</p>
                */
            fieldList?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>Error details.</p>
        */
    export interface ErrorDetails {
            /**
                * <p>Error details message.</p>
                */
            message?: string;
            /**
                * <p>Error details code.</p>
                */
            code?: string;
            /**
                * <p>Error details resourceId.</p>
                */
            resourceId?: string;
            /**
                * <p>Error details resourceType.</p>
                */
            resourceType?: string;
    }
    export namespace ErrorDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetails) => any;
    }
    /**
        * <p>The request could not be completed due to a conflict with the current state of the target resource.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            code?: string;
            /**
                * <p>A conflict occurred when prompting for the Resource ID.</p>
                */
            resourceId?: string;
            /**
                * <p>A conflict occurred when prompting for resource type.</p>
                */
            resourceType?: string;
            /**
                * <p>Conflict Exception specific errors.</p>
                */
            errors?: ErrorDetails[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface DeleteJobRequest {
            /**
                * <p>Request to delete Job from service by Job ID.</p>
                */
            jobID: string | undefined;
    }
    export namespace DeleteJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteJobRequest) => any;
    }
    export interface DeleteJobResponse {
    }
    export namespace DeleteJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteJobResponse) => any;
    }
    /**
        * <p>Resource not found exception.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            code?: string;
            /**
                * <p>Resource ID not found error.</p>
                */
            resourceId?: string;
            /**
                * <p>Resource type not found error.</p>
                */
            resourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Uninitialized account exception.</p>
        */
    export class UninitializedAccountException extends __BaseException {
            readonly name: "UninitializedAccountException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UninitializedAccountException, __BaseException>);
    }
    export interface DescribeJobLogItemsRequest {
            /**
                * <p>Request to describe Job log job ID.</p>
                */
            jobID: string | undefined;
            /**
                * <p>Request to describe Job log item maximum results.</p>
                */
            maxResults?: number;
            /**
                * <p>Request to describe Job log next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeJobLogItemsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobLogItemsRequest) => any;
    }
    export enum JobLogEvent {
            CLEANUP_END = "CLEANUP_END",
            CLEANUP_FAIL = "CLEANUP_FAIL",
            CLEANUP_START = "CLEANUP_START",
            CONVERSION_END = "CONVERSION_END",
            CONVERSION_FAIL = "CONVERSION_FAIL",
            CONVERSION_START = "CONVERSION_START",
            JOB_CANCEL = "JOB_CANCEL",
            JOB_END = "JOB_END",
            JOB_START = "JOB_START",
            LAUNCH_FAILED = "LAUNCH_FAILED",
            LAUNCH_START = "LAUNCH_START",
            SERVER_SKIPPED = "SERVER_SKIPPED",
            SNAPSHOT_END = "SNAPSHOT_END",
            SNAPSHOT_FAIL = "SNAPSHOT_FAIL",
            SNAPSHOT_START = "SNAPSHOT_START",
            USING_PREVIOUS_SNAPSHOT = "USING_PREVIOUS_SNAPSHOT"
    }
    /**
        * <p>Job log data</p>
        */
    export interface JobLogEventData {
            /**
                * <p>Job Event Source Server ID.</p>
                */
            sourceServerID?: string;
            /**
                * <p>Job Event conversion Server ID.</p>
                */
            conversionServerID?: string;
            /**
                * <p>Job Event Target instance ID.</p>
                */
            targetInstanceID?: string;
            /**
                * <p>Job error.</p>
                */
            rawError?: string;
    }
    export namespace JobLogEventData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobLogEventData) => any;
    }
    /**
        * <p>Job log.</p>
        */
    export interface JobLog {
            /**
                * <p>Job log event date and time.</p>
                */
            logDateTime?: string;
            /**
                * <p>Job log event.</p>
                */
            event?: JobLogEvent | string;
            /**
                * <p>Job event data</p>
                */
            eventData?: JobLogEventData;
    }
    export namespace JobLog {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobLog) => any;
    }
    export interface DescribeJobLogItemsResponse {
            /**
                * <p>Request to describe Job log response items.</p>
                */
            items?: JobLog[];
            /**
                * <p>Request to describe Job log response next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeJobLogItemsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobLogItemsResponse) => any;
    }
    /**
        * <p>Request to describe Job log filters.</p>
        */
    export interface DescribeJobsRequestFilters {
            /**
                * <p>Request to describe Job log filters by job ID.</p>
                */
            jobIDs?: string[];
            /**
                * <p>Request to describe Job log filters by date.</p>
                */
            fromDate?: string;
            /**
                * <p>Request to describe job log items by last date.</p>
                */
            toDate?: string;
    }
    export namespace DescribeJobsRequestFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobsRequestFilters) => any;
    }
    export interface DescribeJobsRequest {
            /**
                * <p>Request to describe Job log filters.</p>
                */
            filters?: DescribeJobsRequestFilters;
            /**
                * <p>Request to describe job log items by max results.</p>
                */
            maxResults?: number;
            /**
                * <p>Request to describe job log items by next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobsRequest) => any;
    }
    export enum InitiatedBy {
            DIAGNOSTIC = "DIAGNOSTIC",
            START_CUTOVER = "START_CUTOVER",
            START_TEST = "START_TEST",
            TERMINATE = "TERMINATE"
    }
    export enum LaunchStatus {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            LAUNCHED = "LAUNCHED",
            PENDING = "PENDING",
            TERMINATED = "TERMINATED"
    }
    export enum PostLaunchActionExecutionStatus {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            SUCCESS = "SUCCESS"
    }
    export enum SsmParameterStoreParameterType {
            STRING = "STRING"
    }
    /**
        * <p>Source server replication type.</p>
        */
    export interface SsmParameterStoreParameter {
            /**
                * <p>Source server replication type.</p>
                */
            parameterType: SsmParameterStoreParameterType | string | undefined;
            /**
                * <p>Source server replication type.</p>
                */
            parameterName: string | undefined;
    }
    export namespace SsmParameterStoreParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SsmParameterStoreParameter) => any;
    }
    /**
        * <p>Source server replication type.</p>
        */
    export interface SsmDocument {
            /**
                * <p>Source server replication type.</p>
                */
            actionName: string | undefined;
            /**
                * <p>Source server replication type.</p>
                */
            ssmDocumentName: string | undefined;
            /**
                * <p>Source server replication type.</p>
                */
            timeoutSeconds?: number;
            /**
                * <p>Source server replication type.</p>
                */
            mustSucceedForCutover?: boolean;
            /**
                * <p>Source server replication type.</p>
                */
            parameters?: Record<string, SsmParameterStoreParameter[]>;
    }
    export namespace SsmDocument {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SsmDocument) => any;
    }
    export enum SsmDocumentType {
            AUTOMATION = "AUTOMATION",
            COMMAND = "COMMAND"
    }
    /**
        * <p>Job type.</p>
        */
    export interface JobPostLaunchActionsLaunchStatus {
            /**
                * <p>Job type.</p>
                */
            ssmDocument?: SsmDocument;
            /**
                * <p>Job type.</p>
                */
            ssmDocumentType?: SsmDocumentType | string;
            /**
                * <p>Job type.</p>
                */
            executionID?: string;
            /**
                * <p>Job type.</p>
                */
            executionStatus?: PostLaunchActionExecutionStatus | string;
            /**
                * <p>Job type.</p>
                */
            failureReason?: string;
    }
    export namespace JobPostLaunchActionsLaunchStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobPostLaunchActionsLaunchStatus) => any;
    }
    /**
        * <p>Server participating in Job.</p>
        */
    export interface PostLaunchActionsStatus {
            /**
                * <p>Server participating in Job.</p>
                */
            ssmAgentDiscoveryDatetime?: string;
            /**
                * <p>Server participating in Job.</p>
                */
            postLaunchActionsLaunchStatusList?: JobPostLaunchActionsLaunchStatus[];
    }
    export namespace PostLaunchActionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostLaunchActionsStatus) => any;
    }
    /**
        * <p>Server participating in Job.</p>
        */
    export interface ParticipatingServer {
            /**
                * <p>Participating server Source Server ID.</p>
                */
            sourceServerID: string | undefined;
            /**
                * <p>Participating server launch status.</p>
                */
            launchStatus?: LaunchStatus | string;
            /**
                * <p>Participating server Source Server ID.</p>
                */
            launchedEc2InstanceID?: string;
            /**
                * <p>Participating server Source Server ID.</p>
                */
            postLaunchActionsStatus?: PostLaunchActionsStatus;
    }
    export namespace ParticipatingServer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParticipatingServer) => any;
    }
    export enum JobStatus {
            COMPLETED = "COMPLETED",
            PENDING = "PENDING",
            STARTED = "STARTED"
    }
    export enum JobType {
            LAUNCH = "LAUNCH",
            TERMINATE = "TERMINATE"
    }
    /**
        * <p>Job.</p>
        */
    export interface Job {
            /**
                * <p>Job ID.</p>
                */
            jobID: string | undefined;
            /**
                * <p>the ARN of the specific Job.</p>
                */
            arn?: string;
            /**
                * <p>Job type.</p>
                */
            type?: JobType | string;
            /**
                * <p>Job initiated by field.</p>
                */
            initiatedBy?: InitiatedBy | string;
            /**
                * <p>Job creation time.</p>
                */
            creationDateTime?: string;
            /**
                * <p>Job end time.</p>
                */
            endDateTime?: string;
            /**
                * <p>Job status.</p>
                */
            status?: JobStatus | string;
            /**
                * <p>Servers participating in a specific Job.</p>
                */
            participatingServers?: ParticipatingServer[];
            /**
                * <p>Tags associated with specific Job.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Job {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Job) => any;
    }
    export interface DescribeJobsResponse {
            /**
                * <p>Request to describe Job log items.</p>
                */
            items?: Job[];
            /**
                * <p>Request to describe Job response by next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobsResponse) => any;
    }
    export enum PostLaunchActionsDeploymentType {
            CUTOVER_ONLY = "CUTOVER_ONLY",
            TEST_AND_CUTOVER = "TEST_AND_CUTOVER"
    }
    /**
        * <p>Server participating in Job.</p>
        */
    export interface PostLaunchActions {
            /**
                * <p>Server participating in Job.</p>
                */
            deployment?: PostLaunchActionsDeploymentType | string;
            /**
                * <p>Server participating in Job.</p>
                */
            s3LogBucket?: string;
            /**
                * <p>Server participating in Job.</p>
                */
            s3OutputKeyPrefix?: string;
            /**
                * <p>Server participating in Job.</p>
                */
            cloudWatchLogGroupName?: string;
            /**
                * <p>Server participating in Job.</p>
                */
            ssmDocuments?: SsmDocument[];
    }
    export namespace PostLaunchActions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostLaunchActions) => any;
    }
    export interface CreateLaunchConfigurationTemplateRequest {
            /**
                * <p>Request to associate the default Application Migration Service Security group with the Replication Settings template.</p>
                */
            postLaunchActions?: PostLaunchActions;
            /**
                * <p>Request to associate the default Application Migration Service Security group with the Replication Settings template.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateLaunchConfigurationTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLaunchConfigurationTemplateRequest) => any;
    }
    export interface LaunchConfigurationTemplate {
            /**
                * <p>Copy Private IP during Launch Configuration.</p>
                */
            launchConfigurationTemplateID: string | undefined;
            /**
                * <p>Copy Private IP during Launch Configuration.</p>
                */
            arn?: string;
            /**
                * <p>Copy Private IP during Launch Configuration.</p>
                */
            postLaunchActions?: PostLaunchActions;
            /**
                * <p>Copy Private IP during Launch Configuration.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace LaunchConfigurationTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchConfigurationTemplate) => any;
    }
    export interface DeleteLaunchConfigurationTemplateRequest {
            /**
                * <p>ID of resource to be deleted.</p>
                */
            launchConfigurationTemplateID: string | undefined;
    }
    export namespace DeleteLaunchConfigurationTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchConfigurationTemplateRequest) => any;
    }
    export interface DeleteLaunchConfigurationTemplateResponse {
    }
    export namespace DeleteLaunchConfigurationTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchConfigurationTemplateResponse) => any;
    }
    export interface DescribeLaunchConfigurationTemplatesRequest {
            /**
                * <p>Request to disconnect Source Server from service by Server ID.</p>
                */
            launchConfigurationTemplateIDs?: string[];
            /**
                * <p>Request to disconnect Source Server from service by Server ID.</p>
                */
            maxResults?: number;
            /**
                * <p>Request to disconnect Source Server from service by Server ID.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeLaunchConfigurationTemplatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLaunchConfigurationTemplatesRequest) => any;
    }
    export interface DescribeLaunchConfigurationTemplatesResponse {
            /**
                * <p>Request to disconnect Source Server from service by Server ID.</p>
                */
            items?: LaunchConfigurationTemplate[];
            /**
                * <p>Request to disconnect Source Server from service by Server ID.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeLaunchConfigurationTemplatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLaunchConfigurationTemplatesResponse) => any;
    }
    export interface UpdateLaunchConfigurationTemplateRequest {
            /**
                * <p>Update Launch configuration Target instance right sizing request.</p>
                */
            launchConfigurationTemplateID: string | undefined;
            /**
                * <p>Update Launch configuration Target instance right sizing request.</p>
                */
            postLaunchActions?: PostLaunchActions;
    }
    export namespace UpdateLaunchConfigurationTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchConfigurationTemplateRequest) => any;
    }
    /**
        * <p>The server encountered an unexpected condition that prevented it from fulfilling the request.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * <p>The server encountered an unexpected condition that prevented it from fulfilling the request. The request will be retried again after x seconds.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>List tags for resource request by ARN.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>List tags for resource response.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>Reached throttling quota exception.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * <p>Reached throttling quota exception service code.</p>
                */
            serviceCode?: string;
            /**
                * <p>Reached throttling quota exception.</p>
                */
            quotaCode?: string;
            /**
                * <p>Reached throttling quota exception will retry after x seconds.</p>
                */
            retryAfterSeconds?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export enum ReplicationConfigurationDataPlaneRouting {
            PRIVATE_IP = "PRIVATE_IP",
            PUBLIC_IP = "PUBLIC_IP"
    }
    export enum ReplicationConfigurationDefaultLargeStagingDiskType {
            GP2 = "GP2",
            GP3 = "GP3",
            ST1 = "ST1"
    }
    export enum ReplicationConfigurationEbsEncryption {
            CUSTOM = "CUSTOM",
            DEFAULT = "DEFAULT"
    }
    export interface CreateReplicationConfigurationTemplateRequest {
            /**
                * <p>Request to configure the Staging Area subnet ID during Replication Settings template creation.</p>
                */
            stagingAreaSubnetId: string | undefined;
            /**
                * <p>Request to associate the default Application Migration Service Security group with the Replication Settings template.</p>
                */
            associateDefaultSecurityGroup: boolean | undefined;
            /**
                * <p>Request to configure the Replication Server Security group ID during Replication Settings template creation.</p>
                */
            replicationServersSecurityGroupsIDs: string[] | undefined;
            /**
                * <p>Request to configure the Replication Server instance type during Replication Settings template creation.</p>
                */
            replicationServerInstanceType: string | undefined;
            /**
                * <p>Request to use Dedicated Replication Servers during Replication Settings template creation.</p>
                */
            useDedicatedReplicationServer: boolean | undefined;
            /**
                * <p>Request to configure the default large staging disk EBS volume type during Replication Settings template creation.</p>
                */
            defaultLargeStagingDiskType: ReplicationConfigurationDefaultLargeStagingDiskType | string | undefined;
            /**
                * <p>Request to configure EBS encryption during Replication Settings template creation.</p>
                */
            ebsEncryption: ReplicationConfigurationEbsEncryption | string | undefined;
            /**
                * <p>Request to configure an EBS encryption key during Replication Settings template creation.</p>
                */
            ebsEncryptionKeyArn?: string;
            /**
                * <p>Request to configure bandwidth throttling during Replication Settings template creation.</p>
                */
            bandwidthThrottling: number | undefined;
            /**
                * <p>Request to configure  data plane routing during Replication Settings template creation.</p>
                */
            dataPlaneRouting: ReplicationConfigurationDataPlaneRouting | string | undefined;
            /**
                * <p>Request to create Public IP during Replication Settings template creation.</p>
                */
            createPublicIP: boolean | undefined;
            /**
                * <p>Request to configure Staging Area tags during Replication Settings template creation.</p>
                */
            stagingAreaTags: Record<string, string> | undefined;
            /**
                * <p>Request to configure tags during Replication Settings template creation.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateReplicationConfigurationTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationConfigurationTemplateRequest) => any;
    }
    export interface ReplicationConfigurationTemplate {
            /**
                * <p>Replication Configuration template ID.</p>
                */
            replicationConfigurationTemplateID: string | undefined;
            /**
                * <p>Replication Configuration template ARN.</p>
                */
            arn?: string;
            /**
                * <p>Replication Configuration template Staging Area subnet ID.</p>
                */
            stagingAreaSubnetId?: string;
            /**
                * <p>Replication Configuration template associate default Application Migration Service Security group.</p>
                */
            associateDefaultSecurityGroup?: boolean;
            /**
                * <p>Replication Configuration template server Security Groups IDs.</p>
                */
            replicationServersSecurityGroupsIDs?: string[];
            /**
                * <p>Replication Configuration template server instance type.</p>
                */
            replicationServerInstanceType?: string;
            /**
                * <p>Replication Configuration template use Dedicated Replication Server.</p>
                */
            useDedicatedReplicationServer?: boolean;
            /**
                * <p>Replication Configuration template use default large Staging Disk type.</p>
                */
            defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType | string;
            /**
                * <p>Replication Configuration template EBS encryption.</p>
                */
            ebsEncryption?: ReplicationConfigurationEbsEncryption | string;
            /**
                * <p>Replication Configuration template EBS encryption key ARN.</p>
                */
            ebsEncryptionKeyArn?: string;
            /**
                * <p>Replication Configuration template bandwidth throttling.</p>
                */
            bandwidthThrottling?: number;
            /**
                * <p>Replication Configuration template data plane routing.</p>
                */
            dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting | string;
            /**
                * <p>Replication Configuration template create Public IP.</p>
                */
            createPublicIP?: boolean;
            /**
                * <p>Replication Configuration template Staging Area Tags.</p>
                */
            stagingAreaTags?: Record<string, string>;
            /**
                * <p>Replication Configuration template Tags.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ReplicationConfigurationTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationConfigurationTemplate) => any;
    }
    export interface DeleteReplicationConfigurationTemplateRequest {
            /**
                * <p>Request to delete Replication Configuration Template from service by Replication Configuration Template ID.</p>
                */
            replicationConfigurationTemplateID: string | undefined;
    }
    export namespace DeleteReplicationConfigurationTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationConfigurationTemplateRequest) => any;
    }
    export interface DeleteReplicationConfigurationTemplateResponse {
    }
    export namespace DeleteReplicationConfigurationTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationConfigurationTemplateResponse) => any;
    }
    export interface DescribeReplicationConfigurationTemplatesRequest {
            /**
                * <p>Request to describe Replication Configuration template by template IDs.</p>
                */
            replicationConfigurationTemplateIDs?: string[];
            /**
                * <p>Request to describe Replication Configuration template by max results.</p>
                */
            maxResults?: number;
            /**
                * <p>Request to describe Replication Configuration template by next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeReplicationConfigurationTemplatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationConfigurationTemplatesRequest) => any;
    }
    export interface DescribeReplicationConfigurationTemplatesResponse {
            /**
                * <p>Request to describe Replication Configuration template by items.</p>
                */
            items?: ReplicationConfigurationTemplate[];
            /**
                * <p>Request to describe Replication Configuration template by next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeReplicationConfigurationTemplatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationConfigurationTemplatesResponse) => any;
    }
    export interface UpdateReplicationConfigurationTemplateRequest {
            /**
                * <p>Update replication configuration template template ID request.</p>
                */
            replicationConfigurationTemplateID: string | undefined;
            /**
                * <p>Update replication configuration template ARN request.</p>
                */
            arn?: string;
            /**
                * <p>Update replication configuration template Staging Area subnet ID request.</p>
                */
            stagingAreaSubnetId?: string;
            /**
                * <p>Update replication configuration template associate default Application Migration Service Security group request.</p>
                */
            associateDefaultSecurityGroup?: boolean;
            /**
                * <p>Update replication configuration template Replication Server Security groups IDs request.</p>
                */
            replicationServersSecurityGroupsIDs?: string[];
            /**
                * <p>Update replication configuration template Replication Server instance type request.</p>
                */
            replicationServerInstanceType?: string;
            /**
                * <p>Update replication configuration template use dedicated Replication Server request.</p>
                */
            useDedicatedReplicationServer?: boolean;
            /**
                * <p>Update replication configuration template use default large Staging Disk type request.</p>
                */
            defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType | string;
            /**
                * <p>Update replication configuration template EBS encryption request.</p>
                */
            ebsEncryption?: ReplicationConfigurationEbsEncryption | string;
            /**
                * <p>Update replication configuration template EBS encryption key ARN request.</p>
                */
            ebsEncryptionKeyArn?: string;
            /**
                * <p>Update replication configuration template bandwidth throttling request.</p>
                */
            bandwidthThrottling?: number;
            /**
                * <p>Update replication configuration template data plane routing request.</p>
                */
            dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting | string;
            /**
                * <p>Update replication configuration template create Public IP request.</p>
                */
            createPublicIP?: boolean;
            /**
                * <p>Update replication configuration template Staging Area Tags request.</p>
                */
            stagingAreaTags?: Record<string, string>;
    }
    export namespace UpdateReplicationConfigurationTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateReplicationConfigurationTemplateRequest) => any;
    }
    export enum ChangeServerLifeCycleStateSourceServerLifecycleState {
            CUTOVER = "CUTOVER",
            READY_FOR_CUTOVER = "READY_FOR_CUTOVER",
            READY_FOR_TEST = "READY_FOR_TEST"
    }
    /**
        * <p>The request to change the source server migration lifecycle state.</p>
        */
    export interface ChangeServerLifeCycleStateSourceServerLifecycle {
            /**
                * <p>The request to change the source server migration lifecycle state.</p>
                */
            state: ChangeServerLifeCycleStateSourceServerLifecycleState | string | undefined;
    }
    export namespace ChangeServerLifeCycleStateSourceServerLifecycle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangeServerLifeCycleStateSourceServerLifecycle) => any;
    }
    export interface ChangeServerLifeCycleStateRequest {
            /**
                * <p>The request to change the source server migration lifecycle state by source server ID.</p>
                */
            sourceServerID: string | undefined;
            /**
                * <p>The request to change the source server migration lifecycle state.</p>
                */
            lifeCycle: ChangeServerLifeCycleStateSourceServerLifecycle | undefined;
    }
    export namespace ChangeServerLifeCycleStateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangeServerLifeCycleStateRequest) => any;
    }
    export enum DataReplicationErrorString {
            AGENT_NOT_SEEN = "AGENT_NOT_SEEN",
            FAILED_TO_ATTACH_STAGING_DISKS = "FAILED_TO_ATTACH_STAGING_DISKS",
            FAILED_TO_AUTHENTICATE_WITH_SERVICE = "FAILED_TO_AUTHENTICATE_WITH_SERVICE",
            FAILED_TO_BOOT_REPLICATION_SERVER = "FAILED_TO_BOOT_REPLICATION_SERVER",
            FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER = "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER",
            FAILED_TO_CREATE_SECURITY_GROUP = "FAILED_TO_CREATE_SECURITY_GROUP",
            FAILED_TO_CREATE_STAGING_DISKS = "FAILED_TO_CREATE_STAGING_DISKS",
            FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE = "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE",
            FAILED_TO_LAUNCH_REPLICATION_SERVER = "FAILED_TO_LAUNCH_REPLICATION_SERVER",
            FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT = "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT",
            FAILED_TO_START_DATA_TRANSFER = "FAILED_TO_START_DATA_TRANSFER",
            LAST_SNAPSHOT_JOB_FAILED = "LAST_SNAPSHOT_JOB_FAILED",
            NOT_CONVERGING = "NOT_CONVERGING",
            SNAPSHOTS_FAILURE = "SNAPSHOTS_FAILURE",
            UNSTABLE_NETWORK = "UNSTABLE_NETWORK",
            UNSUPPORTED_VM_CONFIGURATION = "UNSUPPORTED_VM_CONFIGURATION"
    }
    /**
        * <p>Error in data replication.</p>
        */
    export interface DataReplicationError {
            /**
                * <p>Error in data replication.</p>
                */
            error?: DataReplicationErrorString | string;
            /**
                * <p>Error in data replication.</p>
                */
            rawError?: string;
    }
    export namespace DataReplicationError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataReplicationError) => any;
    }
    export enum DataReplicationInitiationStepName {
            ATTACH_STAGING_DISKS = "ATTACH_STAGING_DISKS",
            AUTHENTICATE_WITH_SERVICE = "AUTHENTICATE_WITH_SERVICE",
            BOOT_REPLICATION_SERVER = "BOOT_REPLICATION_SERVER",
            CONNECT_AGENT_TO_REPLICATION_SERVER = "CONNECT_AGENT_TO_REPLICATION_SERVER",
            CREATE_SECURITY_GROUP = "CREATE_SECURITY_GROUP",
            CREATE_STAGING_DISKS = "CREATE_STAGING_DISKS",
            DOWNLOAD_REPLICATION_SOFTWARE = "DOWNLOAD_REPLICATION_SOFTWARE",
            LAUNCH_REPLICATION_SERVER = "LAUNCH_REPLICATION_SERVER",
            PAIR_REPLICATION_SERVER_WITH_AGENT = "PAIR_REPLICATION_SERVER_WITH_AGENT",
            START_DATA_TRANSFER = "START_DATA_TRANSFER",
            WAIT = "WAIT"
    }
    export enum DataReplicationInitiationStepStatus {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            NOT_STARTED = "NOT_STARTED",
            SKIPPED = "SKIPPED",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>Data replication initiation step.</p>
        */
    export interface DataReplicationInitiationStep {
            /**
                * <p>Request to query data initiation step name.</p>
                */
            name?: DataReplicationInitiationStepName | string;
            /**
                * <p>Request to query data initiation status.</p>
                */
            status?: DataReplicationInitiationStepStatus | string;
    }
    export namespace DataReplicationInitiationStep {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataReplicationInitiationStep) => any;
    }
    /**
        * <p>Data replication initiation.</p>
        */
    export interface DataReplicationInitiation {
            /**
                * <p>Request to query data initiation start date and time.</p>
                */
            startDateTime?: string;
            /**
                * <p>Request to query next data initiation date and time.</p>
                */
            nextAttemptDateTime?: string;
            /**
                * <p>Request to query data initiation steps.</p>
                */
            steps?: DataReplicationInitiationStep[];
    }
    export namespace DataReplicationInitiation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataReplicationInitiation) => any;
    }
    export enum DataReplicationState {
            BACKLOG = "BACKLOG",
            CONTINUOUS = "CONTINUOUS",
            CREATING_SNAPSHOT = "CREATING_SNAPSHOT",
            DISCONNECTED = "DISCONNECTED",
            INITIAL_SYNC = "INITIAL_SYNC",
            INITIATING = "INITIATING",
            PAUSED = "PAUSED",
            PENDING_SNAPSHOT_SHIPPING = "PENDING_SNAPSHOT_SHIPPING",
            RESCAN = "RESCAN",
            SHIPPING_SNAPSHOT = "SHIPPING_SNAPSHOT",
            STALLED = "STALLED",
            STOPPED = "STOPPED"
    }
    /**
        * <p>Request to query disks replicated.</p>
        */
    export interface DataReplicationInfoReplicatedDisk {
            /**
                * <p>Request to query device name.</p>
                */
            deviceName?: string;
            /**
                * <p>Request to query total amount of data replicated in bytes.</p>
                */
            totalStorageBytes?: number;
            /**
                * <p>Request to query amount of data replicated in bytes.</p>
                */
            replicatedStorageBytes?: number;
            /**
                * <p>Request to query amount of data rescanned in bytes.</p>
                */
            rescannedStorageBytes?: number;
            /**
                * <p>Request to query data replication backlog size in bytes.</p>
                */
            backloggedStorageBytes?: number;
    }
    export namespace DataReplicationInfoReplicatedDisk {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataReplicationInfoReplicatedDisk) => any;
    }
    /**
        * <p>Request data replication info.</p>
        */
    export interface DataReplicationInfo {
            /**
                * <p>Request to query data replication lag duration.</p>
                */
            lagDuration?: string;
            /**
                * <p>Request to query the time when data replication will be complete.</p>
                */
            etaDateTime?: string;
            /**
                * <p>Request to query disks replicated.</p>
                */
            replicatedDisks?: DataReplicationInfoReplicatedDisk[];
            /**
                * <p>Request to query the data replication state.</p>
                */
            dataReplicationState?: DataReplicationState | string;
            /**
                * <p>Request to query whether data replication has been initiated.</p>
                */
            dataReplicationInitiation?: DataReplicationInitiation;
            /**
                * <p>Error in obtaining data replication info.</p>
                */
            dataReplicationError?: DataReplicationError;
            /**
                * <p>Request to query data replication last snapshot time.</p>
                */
            lastSnapshotDateTime?: string;
    }
    export namespace DataReplicationInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataReplicationInfo) => any;
    }
    export enum FirstBoot {
            STOPPED = "STOPPED",
            SUCCEEDED = "SUCCEEDED",
            UNKNOWN = "UNKNOWN",
            WAITING = "WAITING"
    }
    /**
        * <p>Launched instance.</p>
        */
    export interface LaunchedInstance {
            /**
                * <p>Launched instance EC2 ID.</p>
                */
            ec2InstanceID?: string;
            /**
                * <p>Launched instance Job ID.</p>
                */
            jobID?: string;
            /**
                * <p>Launched instance first boot.</p>
                */
            firstBoot?: FirstBoot | string;
    }
    export namespace LaunchedInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchedInstance) => any;
    }
    /**
        * <p>Lifecycle Cutover finalized</p>
        */
    export interface LifeCycleLastCutoverFinalized {
            /**
                * <p>Lifecycle Cutover finalized date and time.</p>
                */
            apiCallDateTime?: string;
    }
    export namespace LifeCycleLastCutoverFinalized {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastCutoverFinalized) => any;
    }
    /**
        * <p>Lifecycle last Cutover initiated.</p>
        */
    export interface LifeCycleLastCutoverInitiated {
            /**
                * <p/>
                */
            apiCallDateTime?: string;
            /**
                * <p>Lifecycle last Cutover initiated by Job ID.</p>
                */
            jobID?: string;
    }
    export namespace LifeCycleLastCutoverInitiated {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastCutoverInitiated) => any;
    }
    /**
        * <p>Lifecycle last Cutover reverted.</p>
        */
    export interface LifeCycleLastCutoverReverted {
            /**
                * <p>Lifecycle last Cutover reverted API call date time.</p>
                */
            apiCallDateTime?: string;
    }
    export namespace LifeCycleLastCutoverReverted {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastCutoverReverted) => any;
    }
    /**
        * <p>Lifecycle last Cutover .</p>
        */
    export interface LifeCycleLastCutover {
            /**
                * <p>Lifecycle last Cutover initiated.</p>
                */
            initiated?: LifeCycleLastCutoverInitiated;
            /**
                * <p>Lifecycle last Cutover reverted.</p>
                */
            reverted?: LifeCycleLastCutoverReverted;
            /**
                * <p>Lifecycle Cutover finalized date and time.</p>
                */
            finalized?: LifeCycleLastCutoverFinalized;
    }
    export namespace LifeCycleLastCutover {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastCutover) => any;
    }
    /**
        * <p>Lifecycle last Test finalized.</p>
        */
    export interface LifeCycleLastTestFinalized {
            /**
                * <p>Lifecycle Test failed API call date and time.</p>
                */
            apiCallDateTime?: string;
    }
    export namespace LifeCycleLastTestFinalized {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastTestFinalized) => any;
    }
    /**
        * <p>Lifecycle last Test initiated.</p>
        */
    export interface LifeCycleLastTestInitiated {
            /**
                * <p>Lifecycle last Test initiated API call date and time.</p>
                */
            apiCallDateTime?: string;
            /**
                * <p>Lifecycle last Test initiated Job ID.</p>
                */
            jobID?: string;
    }
    export namespace LifeCycleLastTestInitiated {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastTestInitiated) => any;
    }
    /**
        * <p>Lifecycle last Test reverted.</p>
        */
    export interface LifeCycleLastTestReverted {
            /**
                * <p>Lifecycle last Test reverted API call date and time.</p>
                */
            apiCallDateTime?: string;
    }
    export namespace LifeCycleLastTestReverted {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastTestReverted) => any;
    }
    /**
        * <p>Lifecycle last Test.</p>
        */
    export interface LifeCycleLastTest {
            /**
                * <p>Lifecycle last Test initiated.</p>
                */
            initiated?: LifeCycleLastTestInitiated;
            /**
                * <p>Lifecycle last Test reverted.</p>
                */
            reverted?: LifeCycleLastTestReverted;
            /**
                * <p>Lifecycle last Test finalized.</p>
                */
            finalized?: LifeCycleLastTestFinalized;
    }
    export namespace LifeCycleLastTest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycleLastTest) => any;
    }
    export enum LifeCycleState {
            CUTOVER = "CUTOVER",
            CUTTING_OVER = "CUTTING_OVER",
            DISCONNECTED = "DISCONNECTED",
            DISCOVERED = "DISCOVERED",
            NOT_READY = "NOT_READY",
            READY_FOR_CUTOVER = "READY_FOR_CUTOVER",
            READY_FOR_TEST = "READY_FOR_TEST",
            STOPPED = "STOPPED",
            TESTING = "TESTING"
    }
    /**
        * <p>Lifecycle.</p>
        */
    export interface LifeCycle {
            /**
                * <p>Lifecycle added to service data and time.</p>
                */
            addedToServiceDateTime?: string;
            /**
                * <p>Lifecycle replication initiation date and time.</p>
                */
            firstByteDateTime?: string;
            /**
                * <p>Lifecycle elapsed time and duration.</p>
                */
            elapsedReplicationDuration?: string;
            /**
                * <p>Lifecycle last seen date and time.</p>
                */
            lastSeenByServiceDateTime?: string;
            /**
                * <p>Lifecycle last Test.</p>
                */
            lastTest?: LifeCycleLastTest;
            /**
                * <p>Lifecycle last Cutover.</p>
                */
            lastCutover?: LifeCycleLastCutover;
            /**
                * <p>Lifecycle state.</p>
                */
            state?: LifeCycleState | string;
    }
    export namespace LifeCycle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifeCycle) => any;
    }
    export enum ReplicationType {
            AGENT_BASED = "AGENT_BASED",
            SNAPSHOT_SHIPPING = "SNAPSHOT_SHIPPING"
    }
    /**
        * <p>Source server CPU information.</p>
        */
    export interface CPU {
            /**
                * <p>The number of CPU cores on the source server.</p>
                */
            cores?: number;
            /**
                * <p>The source server's CPU model name.</p>
                */
            modelName?: string;
    }
    export namespace CPU {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CPU) => any;
    }
    /**
        * <p>The disk identifier.</p>
        */
    export interface Disk {
            /**
                * <p>The disk or device name.</p>
                */
            deviceName?: string;
            /**
                * <p>The amount of storage on the disk in bytes.</p>
                */
            bytes?: number;
    }
    export namespace Disk {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Disk) => any;
    }
    /**
        * <p>Identification hints.</p>
        */
    export interface IdentificationHints {
            /**
                * <p>FQDN address identification hint.</p>
                */
            fqdn?: string;
            /**
                * <p>Hostname identification hint.</p>
                */
            hostname?: string;
            /**
                * <p>vmWare UUID identification hint.</p>
                */
            vmWareUuid?: string;
            /**
                * <p>AWS Instance ID identification hint.</p>
                */
            awsInstanceID?: string;
            /**
                * <p>vCenter VM path identification hint.</p>
                */
            vmPath?: string;
    }
    export namespace IdentificationHints {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentificationHints) => any;
    }
    /**
        * <p>Network interface.</p>
        */
    export interface NetworkInterface {
            /**
                * <p>Network interface Mac address.</p>
                */
            macAddress?: string;
            /**
                * <p>Network interface IPs.</p>
                */
            ips?: string[];
            /**
                * <p>Network interface primary IP.</p>
                */
            isPrimary?: boolean;
    }
    export namespace NetworkInterface {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkInterface) => any;
    }
    /**
        * <p>Operating System.</p>
        */
    export interface OS {
            /**
                * <p>OS full string.</p>
                */
            fullString?: string;
    }
    export namespace OS {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OS) => any;
    }
    /**
        * <p>Source server properties.</p>
        */
    export interface SourceProperties {
            /**
                * <p>Source server last update date and time.</p>
                */
            lastUpdatedDateTime?: string;
            /**
                * <p>Source server recommended instance type.</p>
                */
            recommendedInstanceType?: string;
            /**
                * <p>Source server identification hints.</p>
                */
            identificationHints?: IdentificationHints;
            /**
                * <p>Source server network interfaces.</p>
                */
            networkInterfaces?: NetworkInterface[];
            /**
                * <p>Source Server disks.</p>
                */
            disks?: Disk[];
            /**
                * <p>Source Server CPUs.</p>
                */
            cpus?: CPU[];
            /**
                * <p>Source server RAM in bytes.</p>
                */
            ramBytes?: number;
            /**
                * <p>Source server OS.</p>
                */
            os?: OS;
    }
    export namespace SourceProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceProperties) => any;
    }
    export interface SourceServer {
            /**
                * <p>Source server ID.</p>
                */
            sourceServerID?: string;
            /**
                * <p>Source server ARN.</p>
                */
            arn?: string;
            /**
                * <p>Source server archived status.</p>
                */
            isArchived?: boolean;
            /**
                * <p>Source server Tags.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Source server launched instance.</p>
                */
            launchedInstance?: LaunchedInstance;
            /**
                * <p>Source server data replication info.</p>
                */
            dataReplicationInfo?: DataReplicationInfo;
            /**
                * <p>Source server lifecycle state.</p>
                */
            lifeCycle?: LifeCycle;
            /**
                * <p>Source server properties.</p>
                */
            sourceProperties?: SourceProperties;
            /**
                * <p>Source server replication type.</p>
                */
            replicationType?: ReplicationType | string;
            /**
                * <p>Source server vCenter client id.</p>
                */
            vcenterClientID?: string;
    }
    export namespace SourceServer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceServer) => any;
    }
    export interface DeleteSourceServerRequest {
            /**
                * <p>Request to delete Source Server from service by Server ID.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace DeleteSourceServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSourceServerRequest) => any;
    }
    export interface DeleteSourceServerResponse {
    }
    export namespace DeleteSourceServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSourceServerResponse) => any;
    }
    /**
        * <p>Request to filter Source Servers list.</p>
        */
    export interface DescribeSourceServersRequestFilters {
            /**
                * <p>Request to filter Source Servers list by Source Server ID.</p>
                */
            sourceServerIDs?: string[];
            /**
                * <p>Request to filter Source Servers list by archived.</p>
                */
            isArchived?: boolean;
            /**
                * <p>Request to filter Source Servers list by replication type.</p>
                */
            replicationTypes?: (ReplicationType | string)[];
            /**
                * <p>Request to filter Source Servers list by life cycle states.</p>
                */
            lifeCycleStates?: (LifeCycleState | string)[];
    }
    export namespace DescribeSourceServersRequestFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSourceServersRequestFilters) => any;
    }
    export interface DescribeSourceServersRequest {
            /**
                * <p>Request to filter Source Servers list.</p>
                */
            filters?: DescribeSourceServersRequestFilters;
            /**
                * <p>Request to filter Source Servers list by maximum results.</p>
                */
            maxResults?: number;
            /**
                * <p>Request to filter Source Servers list by next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeSourceServersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSourceServersRequest) => any;
    }
    export interface DescribeSourceServersResponse {
            /**
                * <p>Request to filter Source Servers list by item.</p>
                */
            items?: SourceServer[];
            /**
                * <p>Request to filter Source Servers next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeSourceServersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSourceServersResponse) => any;
    }
    export interface DisconnectFromServiceRequest {
            /**
                * <p>Request to disconnect Source Server from service by Server ID.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace DisconnectFromServiceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisconnectFromServiceRequest) => any;
    }
    export interface FinalizeCutoverRequest {
            /**
                * <p>Request to finalize Cutover by Source Server ID.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace FinalizeCutoverRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FinalizeCutoverRequest) => any;
    }
    export interface GetLaunchConfigurationRequest {
            /**
                * <p>Request to get Launch Configuration information by Source Server ID.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace GetLaunchConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchConfigurationRequest) => any;
    }
    export enum BootMode {
            LEGACY_BIOS = "LEGACY_BIOS",
            UEFI = "UEFI"
    }
    export enum LaunchDisposition {
            STARTED = "STARTED",
            STOPPED = "STOPPED"
    }
    /**
        * <p>Configure Licensing.</p>
        */
    export interface Licensing {
            /**
                * <p>Configure BYOL OS licensing.</p>
                */
            osByol?: boolean;
    }
    export namespace Licensing {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Licensing) => any;
    }
    export enum TargetInstanceTypeRightSizingMethod {
            BASIC = "BASIC",
            NONE = "NONE"
    }
    export interface LaunchConfiguration {
            /**
                * <p>Launch configuration Source Server ID.</p>
                */
            sourceServerID?: string;
            /**
                * <p>Launch configuration name.</p>
                */
            name?: string;
            /**
                * <p>Launch configuration EC2 Launch template ID.</p>
                */
            ec2LaunchTemplateID?: string;
            /**
                * <p>Launch disposition for launch configuration.</p>
                */
            launchDisposition?: LaunchDisposition | string;
            /**
                * <p>Launch configuration Target instance type right sizing method.</p>
                */
            targetInstanceTypeRightSizingMethod?: TargetInstanceTypeRightSizingMethod | string;
            /**
                * <p>Copy Private IP during Launch Configuration.</p>
                */
            copyPrivateIp?: boolean;
            /**
                * <p>Copy Tags during Launch Configuration.</p>
                */
            copyTags?: boolean;
            /**
                * <p>Launch configuration OS licensing.</p>
                */
            licensing?: Licensing;
            /**
                * <p>Launch configuration boot mode.</p>
                */
            bootMode?: BootMode | string;
            /**
                * <p>Server participating in Job.</p>
                */
            postLaunchActions?: PostLaunchActions;
    }
    export namespace LaunchConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchConfiguration) => any;
    }
    export interface GetReplicationConfigurationRequest {
            /**
                * <p>Request to get Replication Configuration by Source Server ID.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace GetReplicationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetReplicationConfigurationRequest) => any;
    }
    export enum ReplicationConfigurationReplicatedDiskStagingDiskType {
            AUTO = "AUTO",
            GP2 = "GP2",
            GP3 = "GP3",
            IO1 = "IO1",
            IO2 = "IO2",
            SC1 = "SC1",
            ST1 = "ST1",
            STANDARD = "STANDARD"
    }
    /**
        * <p>Replication Configuration replicated disk.</p>
        */
    export interface ReplicationConfigurationReplicatedDisk {
            /**
                * <p>Replication Configuration replicated disk device name.</p>
                */
            deviceName?: string;
            /**
                * <p>Replication Configuration replicated disk boot disk.</p>
                */
            isBootDisk?: boolean;
            /**
                * <p>Replication Configuration replicated disk staging disk type.</p>
                */
            stagingDiskType?: ReplicationConfigurationReplicatedDiskStagingDiskType | string;
            /**
                * <p>Replication Configuration replicated disk IOPs.</p>
                */
            iops?: number;
            /**
                * <p>Replication Configuration replicated disk throughput.</p>
                */
            throughput?: number;
    }
    export namespace ReplicationConfigurationReplicatedDisk {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationConfigurationReplicatedDisk) => any;
    }
    export interface ReplicationConfiguration {
            /**
                * <p>Replication Configuration Source Server ID.</p>
                */
            sourceServerID?: string;
            /**
                * <p>Replication Configuration name.</p>
                */
            name?: string;
            /**
                * <p>Replication Configuration Staging Area subnet ID.</p>
                */
            stagingAreaSubnetId?: string;
            /**
                * <p>Replication Configuration associate default Application Migration Service Security Group.</p>
                */
            associateDefaultSecurityGroup?: boolean;
            /**
                * <p>Replication Configuration Replication Server Security Group IDs.</p>
                */
            replicationServersSecurityGroupsIDs?: string[];
            /**
                * <p>Replication Configuration Replication Server instance type.</p>
                */
            replicationServerInstanceType?: string;
            /**
                * <p>Replication Configuration use Dedicated Replication Server.</p>
                */
            useDedicatedReplicationServer?: boolean;
            /**
                * <p>Replication Configuration use default large Staging Disks.</p>
                */
            defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType | string;
            /**
                * <p>Replication Configuration replicated disks.</p>
                */
            replicatedDisks?: ReplicationConfigurationReplicatedDisk[];
            /**
                * <p>Replication Configuration EBS encryption.</p>
                */
            ebsEncryption?: ReplicationConfigurationEbsEncryption | string;
            /**
                * <p>Replication Configuration EBS encryption key ARN.</p>
                */
            ebsEncryptionKeyArn?: string;
            /**
                * <p>Replication Configuration set bandwidth throttling.</p>
                */
            bandwidthThrottling?: number;
            /**
                * <p>Replication Configuration data plane routing.</p>
                */
            dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting | string;
            /**
                * <p>Replication Configuration create Public IP.</p>
                */
            createPublicIP?: boolean;
            /**
                * <p>Replication Configuration Staging Area tags.</p>
                */
            stagingAreaTags?: Record<string, string>;
    }
    export namespace ReplicationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationConfiguration) => any;
    }
    export interface MarkAsArchivedRequest {
            /**
                * <p>Mark as archived by Source Server ID.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace MarkAsArchivedRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MarkAsArchivedRequest) => any;
    }
    export interface RetryDataReplicationRequest {
            /**
                * <p>Retry data replication for Source Server ID.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace RetryDataReplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetryDataReplicationRequest) => any;
    }
    export interface StartCutoverRequest {
            /**
                * <p>Start Cutover by Source Server IDs.</p>
                */
            sourceServerIDs: string[] | undefined;
            /**
                * <p>Start Cutover by Tags.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace StartCutoverRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCutoverRequest) => any;
    }
    export interface StartCutoverResponse {
            /**
                * <p>Start Cutover Job response.</p>
                */
            job?: Job;
    }
    export namespace StartCutoverResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCutoverResponse) => any;
    }
    /**
        * <p>The request could not be completed because its exceeded the service quota.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            code?: string;
            /**
                * <p>Exceeded the service quota resource ID.</p>
                */
            resourceId?: string;
            /**
                * <p>Exceeded the service quota resource type.</p>
                */
            resourceType?: string;
            /**
                * <p>Exceeded the service quota service code.</p>
                */
            serviceCode?: string;
            /**
                * <p>Exceeded the service quota code.</p>
                */
            quotaCode?: string;
            /**
                * <p>Exceeded the service quota value.</p>
                */
            quotaValue?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export interface StartReplicationRequest {
            /**
                * <p>ID of source server on which to start replication.</p>
                */
            sourceServerID: string | undefined;
    }
    export namespace StartReplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplicationRequest) => any;
    }
    export interface StartTestRequest {
            /**
                * <p>Start Test for Source Server IDs.</p>
                */
            sourceServerIDs: string[] | undefined;
            /**
                * <p>Start Test by Tags.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace StartTestRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTestRequest) => any;
    }
    export interface StartTestResponse {
            /**
                * <p>Start Test Job response.</p>
                */
            job?: Job;
    }
    export namespace StartTestResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTestResponse) => any;
    }
    export interface TerminateTargetInstancesRequest {
            /**
                * <p>Terminate Target instance by Source Server IDs.</p>
                */
            sourceServerIDs: string[] | undefined;
            /**
                * <p>Terminate Target instance by Tags.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace TerminateTargetInstancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateTargetInstancesRequest) => any;
    }
    export interface TerminateTargetInstancesResponse {
            /**
                * <p>Terminate Target instance Job response.</p>
                */
            job?: Job;
    }
    export namespace TerminateTargetInstancesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateTargetInstancesResponse) => any;
    }
    export interface UpdateLaunchConfigurationRequest {
            /**
                * <p>Update Launch configuration by Source Server ID request.</p>
                */
            sourceServerID: string | undefined;
            /**
                * <p>Update Launch configuration name request.</p>
                */
            name?: string;
            /**
                * <p>Update Launch configuration launch disposition request.</p>
                */
            launchDisposition?: LaunchDisposition | string;
            /**
                * <p>Update Launch configuration Target instance right sizing request.</p>
                */
            targetInstanceTypeRightSizingMethod?: TargetInstanceTypeRightSizingMethod | string;
            /**
                * <p>Update Launch configuration copy Private IP request.</p>
                */
            copyPrivateIp?: boolean;
            /**
                * <p>Update Launch configuration copy Tags request.</p>
                */
            copyTags?: boolean;
            /**
                * <p>Update Launch configuration licensing request.</p>
                */
            licensing?: Licensing;
            /**
                * <p>Update Launch configuration boot mode request.</p>
                */
            bootMode?: BootMode | string;
            /**
                * <p>Server participating in Job.</p>
                */
            postLaunchActions?: PostLaunchActions;
    }
    export namespace UpdateLaunchConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchConfigurationRequest) => any;
    }
    export interface UpdateReplicationConfigurationRequest {
            /**
                * <p>Update replication configuration Source Server ID request.</p>
                */
            sourceServerID: string | undefined;
            /**
                * <p>Update replication configuration name request.</p>
                */
            name?: string;
            /**
                * <p>Update replication configuration Staging Area subnet request.</p>
                */
            stagingAreaSubnetId?: string;
            /**
                * <p>Update replication configuration associate default Application Migration Service Security group request.</p>
                */
            associateDefaultSecurityGroup?: boolean;
            /**
                * <p>Update replication configuration Replication Server Security Groups IDs request.</p>
                */
            replicationServersSecurityGroupsIDs?: string[];
            /**
                * <p>Update replication configuration Replication Server instance type request.</p>
                */
            replicationServerInstanceType?: string;
            /**
                * <p>Update replication configuration use dedicated Replication Server request.</p>
                */
            useDedicatedReplicationServer?: boolean;
            /**
                * <p>Update replication configuration use default large Staging Disk type request.</p>
                */
            defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType | string;
            /**
                * <p>Update replication configuration replicated disks request.</p>
                */
            replicatedDisks?: ReplicationConfigurationReplicatedDisk[];
            /**
                * <p>Update replication configuration EBS encryption request.</p>
                */
            ebsEncryption?: ReplicationConfigurationEbsEncryption | string;
            /**
                * <p>Update replication configuration EBS encryption key ARN request.</p>
                */
            ebsEncryptionKeyArn?: string;
            /**
                * <p>Update replication configuration bandwidth throttling request.</p>
                */
            bandwidthThrottling?: number;
            /**
                * <p>Update replication configuration data plane routing request.</p>
                */
            dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting | string;
            /**
                * <p>Update replication configuration create Public IP request.</p>
                */
            createPublicIP?: boolean;
            /**
                * <p>Update replication configuration Staging Area Tags request.</p>
                */
            stagingAreaTags?: Record<string, string>;
    }
    export namespace UpdateReplicationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateReplicationConfigurationRequest) => any;
    }
    export interface UpdateSourceServerReplicationTypeRequest {
            /**
                * <p>ID of source server on which to update replication type.</p>
                */
            sourceServerID: string | undefined;
            /**
                * <p>Replication type to which to update source server.</p>
                */
            replicationType: ReplicationType | string | undefined;
    }
    export namespace UpdateSourceServerReplicationTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSourceServerReplicationTypeRequest) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>Tag resource by ARN.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>Tag resource by Tags.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>Untag resource by ARN.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>Untag resource by Keys.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface DeleteVcenterClientRequest {
            /**
                * <p>ID of resource to be deleted.</p>
                */
            vcenterClientID: string | undefined;
    }
    export namespace DeleteVcenterClientRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVcenterClientRequest) => any;
    }
    export interface DescribeVcenterClientsRequest {
            /**
                * <p>Maximum results to be returned in DescribeVcenterClients.</p>
                */
            maxResults?: number;
            /**
                * <p>Next pagination token to be provided for DescribeVcenterClients.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeVcenterClientsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeVcenterClientsRequest) => any;
    }
    /**
        * <p>vCenter client.</p>
        */
    export interface VcenterClient {
            /**
                * <p>ID of vCenter client.</p>
                */
            vcenterClientID?: string;
            /**
                * <p>Arn of vCenter client.</p>
                */
            arn?: string;
            /**
                * <p>Hostname of vCenter client .</p>
                */
            hostname?: string;
            /**
                * <p>Vcenter UUID of vCenter client.</p>
                */
            vcenterUUID?: string;
            /**
                * <p>Datacenter name of vCenter client.</p>
                */
            datacenterName?: string;
            /**
                * <p>Last seen time of vCenter client.</p>
                */
            lastSeenDatetime?: string;
            /**
                * <p>Tags for Source Server of vCenter client.</p>
                */
            sourceServerTags?: Record<string, string>;
            /**
                * <p>Tags for vCenter client.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace VcenterClient {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VcenterClient) => any;
    }
    export interface DescribeVcenterClientsResponse {
            /**
                * <p>List of items returned by DescribeVcenterClients.</p>
                */
            items?: VcenterClient[];
            /**
                * <p>Next pagination token returned from DescribeVcenterClients.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeVcenterClientsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeVcenterClientsResponse) => any;
    }
}

declare module '@aws-sdk/client-mgn/node_modules/@aws-sdk/client-mgn/dist-types/models/MgnServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Mgn service.
        */
    export class MgnServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

