// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-braket' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BraketClient } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { CancelJobCommandInput, CancelJobCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CancelJobCommand";
    import { CancelQuantumTaskCommandInput, CancelQuantumTaskCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CancelQuantumTaskCommand";
    import { CreateJobCommandInput, CreateJobCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CreateJobCommand";
    import { CreateQuantumTaskCommandInput, CreateQuantumTaskCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CreateQuantumTaskCommand";
    import { GetDeviceCommandInput, GetDeviceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetDeviceCommand";
    import { GetJobCommandInput, GetJobCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetJobCommand";
    import { GetQuantumTaskCommandInput, GetQuantumTaskCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetQuantumTaskCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/ListTagsForResourceCommand";
    import { SearchDevicesCommandInput, SearchDevicesCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchDevicesCommand";
    import { SearchJobsCommandInput, SearchJobsCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchJobsCommand";
    import { SearchQuantumTasksCommandInput, SearchQuantumTasksCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchQuantumTasksCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/UntagResourceCommand";
    /**
        * <p>The Amazon Braket API Reference provides information about the operations and structures
        *          supported in Amazon Braket.</p>
        *          <p>Additional Resources:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html">Amazon Braket Developer Guide</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class Braket extends BraketClient {
            /**
                * <p>Cancels an Amazon Braket job.</p>
                */
            cancelJob(args: CancelJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelJobCommandOutput>;
            cancelJob(args: CancelJobCommandInput, cb: (err: any, data?: CancelJobCommandOutput) => void): void;
            cancelJob(args: CancelJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelJobCommandOutput) => void): void;
            /**
                * <p>Cancels the specified task.</p>
                */
            cancelQuantumTask(args: CancelQuantumTaskCommandInput, options?: __HttpHandlerOptions): Promise<CancelQuantumTaskCommandOutput>;
            cancelQuantumTask(args: CancelQuantumTaskCommandInput, cb: (err: any, data?: CancelQuantumTaskCommandOutput) => void): void;
            cancelQuantumTask(args: CancelQuantumTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelQuantumTaskCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Braket job.</p>
                */
            createJob(args: CreateJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateJobCommandOutput>;
            createJob(args: CreateJobCommandInput, cb: (err: any, data?: CreateJobCommandOutput) => void): void;
            createJob(args: CreateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateJobCommandOutput) => void): void;
            /**
                * <p>Creates a quantum task.</p>
                */
            createQuantumTask(args: CreateQuantumTaskCommandInput, options?: __HttpHandlerOptions): Promise<CreateQuantumTaskCommandOutput>;
            createQuantumTask(args: CreateQuantumTaskCommandInput, cb: (err: any, data?: CreateQuantumTaskCommandOutput) => void): void;
            createQuantumTask(args: CreateQuantumTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateQuantumTaskCommandOutput) => void): void;
            /**
                * <p>Retrieves the devices available in Amazon Braket.</p>
                *          <note>
                *             <p>For backwards compatibility with older versions of BraketSchemas, OpenQASM
                *             information is omitted from GetDevice API calls. To get this information the user-agent
                *             needs to present a recent version of the BraketSchemas (1.8.0 or later). The Braket SDK
                *             automatically reports this for you. If you do not see OpenQASM results in the GetDevice
                *             response when using a Braket SDK, you may need to set AWS_EXECUTION_ENV environment
                *             variable to configure user-agent. See the code examples provided below for how to do
                *             this for the AWS CLI, Boto3, and the Go, Java, and JavaScript/TypeScript SDKs.</p>
                *          </note>
                */
            getDevice(args: GetDeviceCommandInput, options?: __HttpHandlerOptions): Promise<GetDeviceCommandOutput>;
            getDevice(args: GetDeviceCommandInput, cb: (err: any, data?: GetDeviceCommandOutput) => void): void;
            getDevice(args: GetDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeviceCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified Amazon Braket job.</p>
                */
            getJob(args: GetJobCommandInput, options?: __HttpHandlerOptions): Promise<GetJobCommandOutput>;
            getJob(args: GetJobCommandInput, cb: (err: any, data?: GetJobCommandOutput) => void): void;
            getJob(args: GetJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified quantum task.</p>
                */
            getQuantumTask(args: GetQuantumTaskCommandInput, options?: __HttpHandlerOptions): Promise<GetQuantumTaskCommandOutput>;
            getQuantumTask(args: GetQuantumTaskCommandInput, cb: (err: any, data?: GetQuantumTaskCommandOutput) => void): void;
            getQuantumTask(args: GetQuantumTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQuantumTaskCommandOutput) => void): void;
            /**
                * <p>Shows the tags associated with this resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Searches for devices using the specified filters.</p>
                */
            searchDevices(args: SearchDevicesCommandInput, options?: __HttpHandlerOptions): Promise<SearchDevicesCommandOutput>;
            searchDevices(args: SearchDevicesCommandInput, cb: (err: any, data?: SearchDevicesCommandOutput) => void): void;
            searchDevices(args: SearchDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchDevicesCommandOutput) => void): void;
            /**
                * <p>Searches for Amazon Braket jobs that match the specified filter values.</p>
                */
            searchJobs(args: SearchJobsCommandInput, options?: __HttpHandlerOptions): Promise<SearchJobsCommandOutput>;
            searchJobs(args: SearchJobsCommandInput, cb: (err: any, data?: SearchJobsCommandOutput) => void): void;
            searchJobs(args: SearchJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchJobsCommandOutput) => void): void;
            /**
                * <p>Searches for tasks that match the specified filter values.</p>
                */
            searchQuantumTasks(args: SearchQuantumTasksCommandInput, options?: __HttpHandlerOptions): Promise<SearchQuantumTasksCommandOutput>;
            searchQuantumTasks(args: SearchQuantumTasksCommandInput, cb: (err: any, data?: SearchQuantumTasksCommandOutput) => void): void;
            searchQuantumTasks(args: SearchQuantumTasksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchQuantumTasksCommandOutput) => void): void;
            /**
                * <p>Add a tag to the specified resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Remove tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CancelJobCommandInput, CancelJobCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CancelJobCommand";
    import { CancelQuantumTaskCommandInput, CancelQuantumTaskCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CancelQuantumTaskCommand";
    import { CreateJobCommandInput, CreateJobCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CreateJobCommand";
    import { CreateQuantumTaskCommandInput, CreateQuantumTaskCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CreateQuantumTaskCommand";
    import { GetDeviceCommandInput, GetDeviceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetDeviceCommand";
    import { GetJobCommandInput, GetJobCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetJobCommand";
    import { GetQuantumTaskCommandInput, GetQuantumTaskCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetQuantumTaskCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/ListTagsForResourceCommand";
    import { SearchDevicesCommandInput, SearchDevicesCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchDevicesCommand";
    import { SearchJobsCommandInput, SearchJobsCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchJobsCommand";
    import { SearchQuantumTasksCommandInput, SearchQuantumTasksCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchQuantumTasksCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/UntagResourceCommand";
    export type ServiceInputTypes = CancelJobCommandInput | CancelQuantumTaskCommandInput | CreateJobCommandInput | CreateQuantumTaskCommandInput | GetDeviceCommandInput | GetJobCommandInput | GetQuantumTaskCommandInput | ListTagsForResourceCommandInput | SearchDevicesCommandInput | SearchJobsCommandInput | SearchQuantumTasksCommandInput | TagResourceCommandInput | UntagResourceCommandInput;
    export type ServiceOutputTypes = CancelJobCommandOutput | CancelQuantumTaskCommandOutput | CreateJobCommandOutput | CreateQuantumTaskCommandOutput | GetDeviceCommandOutput | GetJobCommandOutput | GetQuantumTaskCommandOutput | ListTagsForResourceCommandOutput | SearchDevicesCommandOutput | SearchJobsCommandOutput | SearchQuantumTasksCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type BraketClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of BraketClient class constructor that set the region, credentials and other options.
        */
    export interface BraketClientConfig extends BraketClientConfigType {
    }
    type BraketClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of BraketClient class. This is resolved and normalized from the {@link BraketClientConfig | constructor configuration interface}.
        */
    export interface BraketClientResolvedConfig extends BraketClientResolvedConfigType {
    }
    /**
        * <p>The Amazon Braket API Reference provides information about the operations and structures
        *          supported in Amazon Braket.</p>
        *          <p>Additional Resources:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html">Amazon Braket Developer Guide</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class BraketClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, BraketClientResolvedConfig> {
            /**
                * The resolved configuration of BraketClient class. This is resolved and normalized from the {@link BraketClientConfig | constructor configuration interface}.
                */
            readonly config: BraketClientResolvedConfig;
            constructor(configuration: BraketClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CancelJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { CancelJobRequest, CancelJobResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface CancelJobCommandInput extends CancelJobRequest {
    }
    export interface CancelJobCommandOutput extends CancelJobResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels an Amazon Braket job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, CancelJobCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, CancelJobCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new CancelJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelJobCommandInput} for command's `input` shape.
        * @see {@link CancelJobCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class CancelJobCommand extends $Command<CancelJobCommandInput, CancelJobCommandOutput, BraketClientResolvedConfig> {
            readonly input: CancelJobCommandInput;
            constructor(input: CancelJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelJobCommandInput, CancelJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CancelQuantumTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { CancelQuantumTaskRequest, CancelQuantumTaskResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface CancelQuantumTaskCommandInput extends CancelQuantumTaskRequest {
    }
    export interface CancelQuantumTaskCommandOutput extends CancelQuantumTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the specified task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, CancelQuantumTaskCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, CancelQuantumTaskCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new CancelQuantumTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelQuantumTaskCommandInput} for command's `input` shape.
        * @see {@link CancelQuantumTaskCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class CancelQuantumTaskCommand extends $Command<CancelQuantumTaskCommandInput, CancelQuantumTaskCommandOutput, BraketClientResolvedConfig> {
            readonly input: CancelQuantumTaskCommandInput;
            constructor(input: CancelQuantumTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelQuantumTaskCommandInput, CancelQuantumTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CreateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { CreateJobRequest, CreateJobResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface CreateJobCommandInput extends CreateJobRequest {
    }
    export interface CreateJobCommandOutput extends CreateJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Braket job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, CreateJobCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, CreateJobCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new CreateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateJobCommandInput} for command's `input` shape.
        * @see {@link CreateJobCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class CreateJobCommand extends $Command<CreateJobCommandInput, CreateJobCommandOutput, BraketClientResolvedConfig> {
            readonly input: CreateJobCommandInput;
            constructor(input: CreateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateJobCommandInput, CreateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/CreateQuantumTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { CreateQuantumTaskRequest, CreateQuantumTaskResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface CreateQuantumTaskCommandInput extends CreateQuantumTaskRequest {
    }
    export interface CreateQuantumTaskCommandOutput extends CreateQuantumTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a quantum task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, CreateQuantumTaskCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, CreateQuantumTaskCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new CreateQuantumTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateQuantumTaskCommandInput} for command's `input` shape.
        * @see {@link CreateQuantumTaskCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class CreateQuantumTaskCommand extends $Command<CreateQuantumTaskCommandInput, CreateQuantumTaskCommandOutput, BraketClientResolvedConfig> {
            readonly input: CreateQuantumTaskCommandInput;
            constructor(input: CreateQuantumTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateQuantumTaskCommandInput, CreateQuantumTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { GetDeviceRequest, GetDeviceResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface GetDeviceCommandInput extends GetDeviceRequest {
    }
    export interface GetDeviceCommandOutput extends GetDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the devices available in Amazon Braket.</p>
        *          <note>
        *             <p>For backwards compatibility with older versions of BraketSchemas, OpenQASM
        *             information is omitted from GetDevice API calls. To get this information the user-agent
        *             needs to present a recent version of the BraketSchemas (1.8.0 or later). The Braket SDK
        *             automatically reports this for you. If you do not see OpenQASM results in the GetDevice
        *             response when using a Braket SDK, you may need to set AWS_EXECUTION_ENV environment
        *             variable to configure user-agent. See the code examples provided below for how to do
        *             this for the AWS CLI, Boto3, and the Go, Java, and JavaScript/TypeScript SDKs.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, GetDeviceCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, GetDeviceCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new GetDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeviceCommandInput} for command's `input` shape.
        * @see {@link GetDeviceCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class GetDeviceCommand extends $Command<GetDeviceCommandInput, GetDeviceCommandOutput, BraketClientResolvedConfig> {
            readonly input: GetDeviceCommandInput;
            constructor(input: GetDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeviceCommandInput, GetDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { GetJobRequest, GetJobResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface GetJobCommandInput extends GetJobRequest {
    }
    export interface GetJobCommandOutput extends GetJobResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified Amazon Braket job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, GetJobCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, GetJobCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new GetJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobCommandInput} for command's `input` shape.
        * @see {@link GetJobCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class GetJobCommand extends $Command<GetJobCommandInput, GetJobCommandOutput, BraketClientResolvedConfig> {
            readonly input: GetJobCommandInput;
            constructor(input: GetJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobCommandInput, GetJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/GetQuantumTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { GetQuantumTaskRequest, GetQuantumTaskResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface GetQuantumTaskCommandInput extends GetQuantumTaskRequest {
    }
    export interface GetQuantumTaskCommandOutput extends GetQuantumTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified quantum task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, GetQuantumTaskCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, GetQuantumTaskCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new GetQuantumTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQuantumTaskCommandInput} for command's `input` shape.
        * @see {@link GetQuantumTaskCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class GetQuantumTaskCommand extends $Command<GetQuantumTaskCommandInput, GetQuantumTaskCommandOutput, BraketClientResolvedConfig> {
            readonly input: GetQuantumTaskCommandInput;
            constructor(input: GetQuantumTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQuantumTaskCommandInput, GetQuantumTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Shows the tags associated with this resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, ListTagsForResourceCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, ListTagsForResourceCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, BraketClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { SearchDevicesRequest, SearchDevicesResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface SearchDevicesCommandInput extends SearchDevicesRequest {
    }
    export interface SearchDevicesCommandOutput extends SearchDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Searches for devices using the specified filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, SearchDevicesCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, SearchDevicesCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new SearchDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchDevicesCommandInput} for command's `input` shape.
        * @see {@link SearchDevicesCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class SearchDevicesCommand extends $Command<SearchDevicesCommandInput, SearchDevicesCommandOutput, BraketClientResolvedConfig> {
            readonly input: SearchDevicesCommandInput;
            constructor(input: SearchDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchDevicesCommandInput, SearchDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { SearchJobsRequest, SearchJobsResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface SearchJobsCommandInput extends SearchJobsRequest {
    }
    export interface SearchJobsCommandOutput extends SearchJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Searches for Amazon Braket jobs that match the specified filter values.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, SearchJobsCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, SearchJobsCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new SearchJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchJobsCommandInput} for command's `input` shape.
        * @see {@link SearchJobsCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class SearchJobsCommand extends $Command<SearchJobsCommandInput, SearchJobsCommandOutput, BraketClientResolvedConfig> {
            readonly input: SearchJobsCommandInput;
            constructor(input: SearchJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchJobsCommandInput, SearchJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/SearchQuantumTasksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { SearchQuantumTasksRequest, SearchQuantumTasksResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface SearchQuantumTasksCommandInput extends SearchQuantumTasksRequest {
    }
    export interface SearchQuantumTasksCommandOutput extends SearchQuantumTasksResponse, __MetadataBearer {
    }
    /**
        * <p>Searches for tasks that match the specified filter values.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, SearchQuantumTasksCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, SearchQuantumTasksCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new SearchQuantumTasksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchQuantumTasksCommandInput} for command's `input` shape.
        * @see {@link SearchQuantumTasksCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class SearchQuantumTasksCommand extends $Command<SearchQuantumTasksCommandInput, SearchQuantumTasksCommandOutput, BraketClientResolvedConfig> {
            readonly input: SearchQuantumTasksCommandInput;
            constructor(input: SearchQuantumTasksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchQuantumTasksCommandInput, SearchQuantumTasksCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Add a tag to the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, TagResourceCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, TagResourceCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, BraketClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BraketClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/BraketClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Remove tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BraketClient, UntagResourceCommand } from "@aws-sdk/client-braket"; // ES Modules import
        * // const { BraketClient, UntagResourceCommand } = require("@aws-sdk/client-braket"); // CommonJS import
        * const client = new BraketClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link BraketClientResolvedConfig | config} for BraketClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, BraketClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BraketClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType, LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
    import { BraketServiceException as __BaseException } from "@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/BraketServiceException";
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>The container image used to create an Amazon Braket job.</p>
        */
    export interface ContainerImage {
            /**
                * <p>The URI locating the container image.</p>
                */
            uri: string | undefined;
    }
    export namespace ContainerImage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerImage) => any;
    }
    export enum CompressionType {
            GZIP = "GZIP",
            NONE = "NONE"
    }
    /**
        * <p>Contains information about the Python scripts used for entry and by an Amazon Braket
        *          job.</p>
        */
    export interface ScriptModeConfig {
            /**
                * <p>The path to the Python script that serves as the entry point for an Amazon Braket
                *          job.</p>
                */
            entryPoint: string | undefined;
            /**
                * <p>The URI that specifies the S3 path to the Python script module that contains the
                *          training script used by an Amazon Braket job.</p>
                */
            s3Uri: string | undefined;
            /**
                * <p>The type of compression used by the Python scripts for an Amazon Braket job.</p>
                */
            compressionType?: CompressionType | string;
    }
    export namespace ScriptModeConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScriptModeConfig) => any;
    }
    /**
        * <p>Defines the Amazon Braket job to be created. Specifies the container image the job uses
        *          and the paths to the Python scripts used for entry and training.</p>
        */
    export interface AlgorithmSpecification {
            /**
                * <p>Configures the paths to the Python scripts used for entry and training.</p>
                */
            scriptModeConfig?: ScriptModeConfig;
            /**
                * <p>The container image used to create an Amazon Braket job.</p>
                */
            containerImage?: ContainerImage;
    }
    export namespace AlgorithmSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlgorithmSpecification) => any;
    }
    export interface GetDeviceRequest {
            /**
                * <p>The ARN of the device to retrieve.</p>
                */
            deviceArn: string | undefined;
    }
    export namespace GetDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceRequest) => any;
    }
    export enum DeviceStatus {
            OFFLINE = "OFFLINE",
            ONLINE = "ONLINE",
            RETIRED = "RETIRED"
    }
    export enum DeviceType {
            QPU = "QPU",
            SIMULATOR = "SIMULATOR"
    }
    export interface GetDeviceResponse {
            /**
                * <p>The ARN of the device.</p>
                */
            deviceArn: string | undefined;
            /**
                * <p>The name of the device.</p>
                */
            deviceName: string | undefined;
            /**
                * <p>The name of the partner company for the device.</p>
                */
            providerName: string | undefined;
            /**
                * <p>The type of the device.</p>
                */
            deviceType: DeviceType | string | undefined;
            /**
                * <p>The status of the device.</p>
                */
            deviceStatus: DeviceStatus | string | undefined;
            /**
                * <p>Details about the capabilities of the device.</p>
                */
            deviceCapabilities: __LazyJsonString | string | undefined;
    }
    export namespace GetDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceResponse) => any;
    }
    /**
        * <p>The request processing has failed because of an unknown error, exception, or
        *          failure.</p>
        */
    export class InternalServiceException extends __BaseException {
            readonly name: "InternalServiceException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceException, __BaseException>);
    }
    /**
        * <p>The specified resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The throttling rate limit is met.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>The input fails to satisfy the constraints specified by an AWS service.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>The filter to use for searching devices.</p>
        */
    export interface SearchDevicesFilter {
            /**
                * <p>The name to use to filter results.</p>
                */
            name: string | undefined;
            /**
                * <p>The values to use to filter results.</p>
                */
            values: string[] | undefined;
    }
    export namespace SearchDevicesFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchDevicesFilter) => any;
    }
    export interface SearchDevicesRequest {
            /**
                * <p>A token used for pagination of results returned in the response. Use the token returned
                *          from the previous request continue results where the previous request ended.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The filter values to use to search for a device.</p>
                */
            filters: SearchDevicesFilter[] | undefined;
    }
    export namespace SearchDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchDevicesRequest) => any;
    }
    /**
        * <p>Includes information about the device.</p>
        */
    export interface DeviceSummary {
            /**
                * <p>The ARN of the device.</p>
                */
            deviceArn: string | undefined;
            /**
                * <p>The name of the device.</p>
                */
            deviceName: string | undefined;
            /**
                * <p>The provider of the device.</p>
                */
            providerName: string | undefined;
            /**
                * <p>The type of the device.</p>
                */
            deviceType: DeviceType | string | undefined;
            /**
                * <p>The status of the device.</p>
                */
            deviceStatus: DeviceStatus | string | undefined;
    }
    export namespace DeviceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceSummary) => any;
    }
    export interface SearchDevicesResponse {
            /**
                * <p>An array of <code>DeviceSummary</code> objects for devices that match the specified
                *          filter values.</p>
                */
            devices: DeviceSummary[] | undefined;
            /**
                * <p>A token used for pagination of results, or null if there are no additional results. Use
                *          the token value in a subsequent request to continue results where the previous request
                *          ended.</p>
                */
            nextToken?: string;
    }
    export namespace SearchDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchDevicesResponse) => any;
    }
    export interface CancelJobRequest {
            /**
                * <p>The ARN of the Amazon Braket job to cancel.</p>
                */
            jobArn: string | undefined;
    }
    export namespace CancelJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelJobRequest) => any;
    }
    export enum CancellationStatus {
            CANCELLED = "CANCELLED",
            CANCELLING = "CANCELLING"
    }
    export interface CancelJobResponse {
            /**
                * <p>The ARN of the Amazon Braket job.</p>
                */
            jobArn: string | undefined;
            /**
                * <p>The status of the job cancellation request.</p>
                */
            cancellationStatus: CancellationStatus | string | undefined;
    }
    export namespace CancelJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelJobResponse) => any;
    }
    /**
        * <p>An error occurred due to a conflict.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>Contains information about the output locations for job checkpoint data.</p>
        */
    export interface JobCheckpointConfig {
            /**
                * <p>(Optional) The local directory where checkpoints are written. The default directory is
                *             <code>/opt/braket/checkpoints/</code>.</p>
                */
            localPath?: string;
            /**
                * <p>Identifies the S3 path where you want Amazon Braket to store checkpoints. For example,
                *             <code>s3://bucket-name/key-name-prefix</code>.</p>
                */
            s3Uri: string | undefined;
    }
    export namespace JobCheckpointConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobCheckpointConfig) => any;
    }
    /**
        * <p>Configures the quantum processing units (QPUs) or simulator used to create and run an
        *          Amazon Braket job.</p>
        */
    export interface DeviceConfig {
            /**
                * <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon
                *          Braket job.</p>
                */
            device: string | undefined;
    }
    export namespace DeviceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceConfig) => any;
    }
    /**
        * <p>Information about the data stored in Amazon S3 used by the Amazon Braket job.</p>
        */
    export interface S3DataSource {
            /**
                * <p>Depending on the value specified for the <code>S3DataType</code>, identifies either a
                *          key name prefix or a manifest that locates the S3 data source.</p>
                */
            s3Uri: string | undefined;
    }
    export namespace S3DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3DataSource) => any;
    }
    /**
        * <p>Information about the source of the data used by the Amazon Braket job.</p>
        */
    export interface DataSource {
            /**
                * <p>Information about the data stored in Amazon S3 used by the Amazon Braket job.</p>
                */
            s3DataSource: S3DataSource | undefined;
    }
    export namespace DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSource) => any;
    }
    /**
        * <p>A list of parameters that specify the input channels, type of input data, and where it
        *          is located.</p>
        */
    export interface InputFileConfig {
            /**
                * <p>A named input source that an Amazon Braket job can consume.</p>
                */
            channelName: string | undefined;
            /**
                * <p>The MIME type of the data.</p>
                */
            contentType?: string;
            /**
                * <p>The location of the channel data.</p>
                */
            dataSource: DataSource | undefined;
    }
    export namespace InputFileConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputFileConfig) => any;
    }
    export enum _InstanceType {
            ML_C4_2XLARGE = "ml.c4.2xlarge",
            ML_C4_4XLARGE = "ml.c4.4xlarge",
            ML_C4_8XLARGE = "ml.c4.8xlarge",
            ML_C4_XLARGE = "ml.c4.xlarge",
            ML_C5N_18XLARGE = "ml.c5n.18xlarge",
            ML_C5N_2XLARGE = "ml.c5n.2xlarge",
            ML_C5N_4XLARGE = "ml.c5n.4xlarge",
            ML_C5N_9XLARGE = "ml.c5n.9xlarge",
            ML_C5N_XLARGE = "ml.c5n.xlarge",
            ML_C5_18XLARGE = "ml.c5.18xlarge",
            ML_C5_2XLARGE = "ml.c5.2xlarge",
            ML_C5_4XLARGE = "ml.c5.4xlarge",
            ML_C5_9XLARGE = "ml.c5.9xlarge",
            ML_C5_XLARGE = "ml.c5.xlarge",
            ML_G4DN_12XLARGE = "ml.g4dn.12xlarge",
            ML_G4DN_16XLARGE = "ml.g4dn.16xlarge",
            ML_G4DN_2XLARGE = "ml.g4dn.2xlarge",
            ML_G4DN_4XLARGE = "ml.g4dn.4xlarge",
            ML_G4DN_8XLARGE = "ml.g4dn.8xlarge",
            ML_G4DN_XLARGE = "ml.g4dn.xlarge",
            ML_M4_10XLARGE = "ml.m4.10xlarge",
            ML_M4_16XLARGE = "ml.m4.16xlarge",
            ML_M4_2XLARGE = "ml.m4.2xlarge",
            ML_M4_4XLARGE = "ml.m4.4xlarge",
            ML_M4_XLARGE = "ml.m4.xlarge",
            ML_M5_12XLARGE = "ml.m5.12xlarge",
            ML_M5_24XLARGE = "ml.m5.24xlarge",
            ML_M5_2XLARGE = "ml.m5.2xlarge",
            ML_M5_4XLARGE = "ml.m5.4xlarge",
            ML_M5_LARGE = "ml.m5.large",
            ML_M5_XLARGE = "ml.m5.xlarge",
            ML_P2_16XLARGE = "ml.p2.16xlarge",
            ML_P2_8XLARGE = "ml.p2.8xlarge",
            ML_P2_XLARGE = "ml.p2.xlarge",
            ML_P3DN_24XLARGE = "ml.p3dn.24xlarge",
            ML_P3_16XLARGE = "ml.p3.16xlarge",
            ML_P3_2XLARGE = "ml.p3.2xlarge",
            ML_P3_8XLARGE = "ml.p3.8xlarge",
            ML_P4D_24XLARGE = "ml.p4d.24xlarge"
    }
    /**
        * <p>Configures the resource instances to use while running the Amazon Braket hybrid job on
        *          Amazon Braket.</p>
        */
    export interface InstanceConfig {
            /**
                * <p>Configures the type resource instances to use while running an Amazon Braket hybrid
                *          job.</p>
                */
            instanceType: _InstanceType | string | undefined;
            /**
                * <p>The size of the storage volume, in GB, that user wants to provision.</p>
                */
            volumeSizeInGb: number | undefined;
            /**
                * <p>Configures the number of resource instances to use while running an Amazon Braket job on
                *          Amazon Braket. The default value is 1.</p>
                */
            instanceCount?: number;
    }
    export namespace InstanceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceConfig) => any;
    }
    /**
        * <p>Specifies the path to the S3 location where you want to store job artifacts and the
        *          encryption key used to store them.</p>
        */
    export interface JobOutputDataConfig {
            /**
                * <p>The AWS Key Management Service (AWS KMS) key that Amazon Braket uses to encrypt the job
                *          training artifacts at rest using Amazon S3 server-side encryption.</p>
                */
            kmsKeyId?: string;
            /**
                * <p>Identifies the S3 path where you want Amazon Braket to store the job training artifacts.
                *          For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
                */
            s3Path: string | undefined;
    }
    export namespace JobOutputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobOutputDataConfig) => any;
    }
    /**
        * <p>Specifies limits for how long an Amazon Braket job can run. </p>
        */
    export interface JobStoppingCondition {
            /**
                * <p>The maximum length of time, in seconds, that an Amazon Braket job can run.</p>
                */
            maxRuntimeInSeconds?: number;
    }
    export namespace JobStoppingCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobStoppingCondition) => any;
    }
    export interface CreateJobRequest {
            /**
                * <p>A unique token that guarantees that the call to this API is idempotent.</p>
                */
            clientToken?: string;
            /**
                * <p>Definition of the Amazon Braket job to be created. Specifies the container image the job
                *          uses and information about the Python scripts used for entry and training.</p>
                */
            algorithmSpecification: AlgorithmSpecification | undefined;
            /**
                * <p>A list of parameters that specify the name and type of input data and where it is
                *          located.</p>
                */
            inputDataConfig?: InputFileConfig[];
            /**
                * <p>The path to the S3 location where you want to store job artifacts and the encryption key
                *          used to store them.</p>
                */
            outputDataConfig: JobOutputDataConfig | undefined;
            /**
                * <p>Information about the output locations for job checkpoint data.</p>
                */
            checkpointConfig?: JobCheckpointConfig;
            /**
                * <p>The name of the Amazon Braket job.</p>
                */
            jobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform
                *          tasks on behalf of a user. It can access user resources, run an Amazon Braket job container
                *          on behalf of user, and output resources to the users' s3 buckets.</p>
                */
            roleArn: string | undefined;
            /**
                * <p> The user-defined criteria that specifies when a job stops running.</p>
                */
            stoppingCondition?: JobStoppingCondition;
            /**
                * <p>Configuration of the resource instances to use while running the hybrid job on Amazon
                *          Braket.</p>
                */
            instanceConfig: InstanceConfig | undefined;
            /**
                * <p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of
                *          the training job. The values are set with a string of JSON key:value pairs, where the key
                *          is the name of the hyperparameter and the value is the value of th hyperparameter.</p>
                */
            hyperParameters?: Record<string, string>;
            /**
                * <p>The quantum processing unit (QPU) or simulator used to create an Amazon Braket
                *          job.</p>
                */
            deviceConfig: DeviceConfig | undefined;
            /**
                * <p>A tag object that consists of a key and an optional value, used to manage metadata for
                *          Amazon Braket resources.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobRequest) => any;
    }
    export interface CreateJobResponse {
            /**
                * <p>The ARN of the Amazon Braket job created.</p>
                */
            jobArn: string | undefined;
    }
    export namespace CreateJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobResponse) => any;
    }
    /**
        * <p>The specified device has been retired.</p>
        */
    export class DeviceRetiredException extends __BaseException {
            readonly name: "DeviceRetiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DeviceRetiredException, __BaseException>);
    }
    /**
        * <p>The request failed because a service quota is exceeded.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export interface GetJobRequest {
            /**
                * <p>The ARN of the job to retrieve.</p>
                */
            jobArn: string | undefined;
    }
    export namespace GetJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobRequest) => any;
    }
    export enum JobEventType {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED",
            DEPRIORITIZED_DUE_TO_INACTIVITY = "DEPRIORITIZED_DUE_TO_INACTIVITY",
            DOWNLOADING_DATA = "DOWNLOADING_DATA",
            FAILED = "FAILED",
            MAX_RUNTIME_EXCEEDED = "MAX_RUNTIME_EXCEEDED",
            QUEUED_FOR_EXECUTION = "QUEUED_FOR_EXECUTION",
            RUNNING = "RUNNING",
            STARTING_INSTANCE = "STARTING_INSTANCE",
            UPLOADING_RESULTS = "UPLOADING_RESULTS",
            WAITING_FOR_PRIORITY = "WAITING_FOR_PRIORITY"
    }
    /**
        * <p>Details about the type and time events occurred related to the Amazon Braket job.</p>
        */
    export interface JobEventDetails {
            /**
                * <p>The type of event that occurred related to the Amazon Braket job.</p>
                */
            eventType?: JobEventType | string;
            /**
                * <p>TThe type of event that occurred related to the Amazon Braket job.</p>
                */
            timeOfEvent?: Date;
            /**
                * <p>A message describing the event that occurred related to the Amazon Braket job.</p>
                */
            message?: string;
    }
    export namespace JobEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobEventDetails) => any;
    }
    export enum JobPrimaryStatus {
            CANCELLED = "CANCELLED",
            CANCELLING = "CANCELLING",
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            QUEUED = "QUEUED",
            RUNNING = "RUNNING"
    }
    export interface GetJobResponse {
            /**
                * <p>The status of the Amazon Braket job.</p>
                */
            status: JobPrimaryStatus | string | undefined;
            /**
                * <p>The ARN of the Amazon Braket job.</p>
                */
            jobArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform
                *          tasks on behalf of a user. It can access user resources, run an Amazon Braket job container
                *          on behalf of user, and output resources to the s3 buckets of a user.</p>
                */
            roleArn: string | undefined;
            /**
                * <p>A description of the reason why an Amazon Braket job failed, if it failed.</p>
                */
            failureReason?: string;
            /**
                * <p>The name of the Amazon Braket job.</p>
                */
            jobName: string | undefined;
            /**
                * <p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of
                *          the traiing job. The values are set with a string of JSON key:value pairs, where the key is
                *          the name of the hyperparameter and the value is the value of th hyperparameter.</p>
                */
            hyperParameters?: Record<string, string>;
            /**
                * <p>A list of parameters that specify the name and type of input data and where it is
                *          located.</p>
                */
            inputDataConfig?: InputFileConfig[];
            /**
                * <p>The path to the S3 location where job artifacts are stored and the encryption key used
                *          to store them there.</p>
                */
            outputDataConfig: JobOutputDataConfig | undefined;
            /**
                * <p>The user-defined criteria that specifies when to stop a job running.</p>
                */
            stoppingCondition?: JobStoppingCondition;
            /**
                * <p>Information about the output locations for job checkpoint data.</p>
                */
            checkpointConfig?: JobCheckpointConfig;
            /**
                * <p>Definition of the Amazon Braket job created. Specifies the container image the job uses,
                *          information about the Python scripts used for entry and training, and the user-defined
                *          metrics used to evaluation the job.</p>
                */
            algorithmSpecification: AlgorithmSpecification | undefined;
            /**
                * <p>The resource instances to use while running the hybrid job on Amazon Braket.</p>
                */
            instanceConfig: InstanceConfig | undefined;
            /**
                * <p>The date and time that the Amazon Braket job was created.</p>
                */
            createdAt: Date | undefined;
            /**
                * <p>The date and time that the Amazon Braket job was started.</p>
                */
            startedAt?: Date;
            /**
                * <p>The date and time that the Amazon Braket job ended.</p>
                */
            endedAt?: Date;
            /**
                * <p>The billable time the Amazon Braket job used to complete.</p>
                */
            billableDuration?: number;
            /**
                * <p>The quantum processing unit (QPU) or simulator used to run the Amazon Braket job.</p>
                */
            deviceConfig?: DeviceConfig;
            /**
                * <p>Details about the type and time events occurred related to the Amazon Braket job.</p>
                */
            events?: JobEventDetails[];
            /**
                * <p>A tag object that consists of a key and an optional value, used to manage metadata for
                *          Amazon Braket resources.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobResponse) => any;
    }
    export enum SearchJobsFilterOperator {
            BETWEEN = "BETWEEN",
            CONTAINS = "CONTAINS",
            EQUAL = "EQUAL",
            GT = "GT",
            GTE = "GTE",
            LT = "LT",
            LTE = "LTE"
    }
    /**
        * <p>A filter used to search for Amazon Braket jobs.</p>
        */
    export interface SearchJobsFilter {
            /**
                * <p>The name to use for the jobs filter.</p>
                */
            name: string | undefined;
            /**
                * <p>The values to use for the jobs filter.</p>
                */
            values: string[] | undefined;
            /**
                * <p>An operator to use for the jobs filter.</p>
                */
            operator: SearchJobsFilterOperator | string | undefined;
    }
    export namespace SearchJobsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchJobsFilter) => any;
    }
    export interface SearchJobsRequest {
            /**
                * <p>A token used for pagination of results returned in the response. Use the token returned
                *          from the previous request to continue results where the previous request ended.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The filter values to use when searching for a job.</p>
                */
            filters: SearchJobsFilter[] | undefined;
    }
    export namespace SearchJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchJobsRequest) => any;
    }
    /**
        * <p>Provides summary information about an Amazon Braket job.</p>
        */
    export interface JobSummary {
            /**
                * <p>The status of the Amazon Braket job.</p>
                */
            status: JobPrimaryStatus | string | undefined;
            /**
                * <p>The ARN of the Amazon Braket job.</p>
                */
            jobArn: string | undefined;
            /**
                * <p>The name of the Amazon Braket job.</p>
                */
            jobName: string | undefined;
            /**
                * <p>Provides summary information about the primary device used by an Amazon Braket
                *          job.</p>
                */
            device: string | undefined;
            /**
                * <p>The date and time that the Amazon Braket job was created.</p>
                */
            createdAt: Date | undefined;
            /**
                * <p>The date and time that the Amazon Braket job was started.</p>
                */
            startedAt?: Date;
            /**
                * <p>The date and time that the Amazon Braket job ended.</p>
                */
            endedAt?: Date;
            /**
                * <p>A tag object that consists of a key and an optional value, used to manage metadata for
                *          Amazon Braket resources.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace JobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobSummary) => any;
    }
    export interface SearchJobsResponse {
            /**
                * <p>An array of <code>JobSummary</code> objects for devices that match the specified filter
                *          values.</p>
                */
            jobs: JobSummary[] | undefined;
            /**
                * <p>A token used for pagination of results, or <code>null</code> if there are no additional
                *          results. Use the token value in a subsequent request to continue results where the previous
                *          request ended.</p>
                */
            nextToken?: string;
    }
    export namespace SearchJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchJobsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>Specify the <code>resourceArn</code> for the resource whose tags to display.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>Displays the key, value pairs of tags associated with this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface CancelQuantumTaskRequest {
            /**
                * <p>The ARN of the task to cancel.</p>
                */
            quantumTaskArn: string | undefined;
            /**
                * <p>The client token associated with the request.</p>
                */
            clientToken?: string;
    }
    export namespace CancelQuantumTaskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelQuantumTaskRequest) => any;
    }
    export interface CancelQuantumTaskResponse {
            /**
                * <p>The ARN of the task.</p>
                */
            quantumTaskArn: string | undefined;
            /**
                * <p>The status of the cancellation request.</p>
                */
            cancellationStatus: CancellationStatus | string | undefined;
    }
    export namespace CancelQuantumTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelQuantumTaskResponse) => any;
    }
    export interface CreateQuantumTaskRequest {
            /**
                * <p>The client token associated with the request.</p>
                */
            clientToken?: string;
            /**
                * <p>The ARN of the device to run the task on.</p>
                */
            deviceArn: string | undefined;
            /**
                * <p>The parameters for the device to run the task on.</p>
                */
            deviceParameters?: __LazyJsonString | string;
            /**
                * <p>The number of shots to use for the task.</p>
                */
            shots: number | undefined;
            /**
                * <p>The S3 bucket to store task result files in.</p>
                */
            outputS3Bucket: string | undefined;
            /**
                * <p>The key prefix for the location in the S3 bucket to store task results in.</p>
                */
            outputS3KeyPrefix: string | undefined;
            /**
                * <p>The action associated with the task.</p>
                */
            action: __LazyJsonString | string | undefined;
            /**
                * <p>Tags to be added to the quantum task you're creating.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The token for an Amazon Braket job that associates it with the quantum task.</p>
                */
            jobToken?: string;
    }
    export namespace CreateQuantumTaskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateQuantumTaskRequest) => any;
    }
    export interface CreateQuantumTaskResponse {
            /**
                * <p>The ARN of the task created by the request.</p>
                */
            quantumTaskArn: string | undefined;
    }
    export namespace CreateQuantumTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateQuantumTaskResponse) => any;
    }
    /**
        * <p>The specified device is currently offline.</p>
        */
    export class DeviceOfflineException extends __BaseException {
            readonly name: "DeviceOfflineException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DeviceOfflineException, __BaseException>);
    }
    export interface GetQuantumTaskRequest {
            /**
                * <p>the ARN of the task to retrieve.</p>
                */
            quantumTaskArn: string | undefined;
    }
    export namespace GetQuantumTaskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQuantumTaskRequest) => any;
    }
    export enum QuantumTaskStatus {
            CANCELLED = "CANCELLED",
            CANCELLING = "CANCELLING",
            COMPLETED = "COMPLETED",
            CREATED = "CREATED",
            FAILED = "FAILED",
            QUEUED = "QUEUED",
            RUNNING = "RUNNING"
    }
    export interface GetQuantumTaskResponse {
            /**
                * <p>The ARN of the task.</p>
                */
            quantumTaskArn: string | undefined;
            /**
                * <p>The status of the task.</p>
                */
            status: QuantumTaskStatus | string | undefined;
            /**
                * <p>The reason that a task failed.</p>
                */
            failureReason?: string;
            /**
                * <p>The ARN of the device the task was run on.</p>
                */
            deviceArn: string | undefined;
            /**
                * <p>The parameters for the device on which the task ran.</p>
                */
            deviceParameters: __LazyJsonString | string | undefined;
            /**
                * <p>The number of shots used in the task.</p>
                */
            shots: number | undefined;
            /**
                * <p>The S3 bucket where task results are stored.</p>
                */
            outputS3Bucket: string | undefined;
            /**
                * <p>The folder in the S3 bucket where task results are stored.</p>
                */
            outputS3Directory: string | undefined;
            /**
                * <p>The time at which the task was created.</p>
                */
            createdAt: Date | undefined;
            /**
                * <p>The time at which the task ended.</p>
                */
            endedAt?: Date;
            /**
                * <p>The tags that belong to this task.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The ARN of the Amazon Braket job associated with the quantum task.</p>
                */
            jobArn?: string;
    }
    export namespace GetQuantumTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQuantumTaskResponse) => any;
    }
    export enum SearchQuantumTasksFilterOperator {
            BETWEEN = "BETWEEN",
            EQUAL = "EQUAL",
            GT = "GT",
            GTE = "GTE",
            LT = "LT",
            LTE = "LTE"
    }
    /**
        * <p>A filter to use to search for tasks.</p>
        */
    export interface SearchQuantumTasksFilter {
            /**
                * <p>The name of the device used for the task.</p>
                */
            name: string | undefined;
            /**
                * <p>The values to use for the filter.</p>
                */
            values: string[] | undefined;
            /**
                * <p>An operator to use in the filter.</p>
                */
            operator: SearchQuantumTasksFilterOperator | string | undefined;
    }
    export namespace SearchQuantumTasksFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchQuantumTasksFilter) => any;
    }
    export interface SearchQuantumTasksRequest {
            /**
                * <p>A token used for pagination of results returned in the response. Use the token returned
                *          from the previous request continue results where the previous request ended.</p>
                */
            nextToken?: string;
            /**
                * <p>Maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>Array of <code>SearchQuantumTasksFilter</code> objects.</p>
                */
            filters: SearchQuantumTasksFilter[] | undefined;
    }
    export namespace SearchQuantumTasksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchQuantumTasksRequest) => any;
    }
    /**
        * <p>Includes information about a quantum task.</p>
        */
    export interface QuantumTaskSummary {
            /**
                * <p>The ARN of the task.</p>
                */
            quantumTaskArn: string | undefined;
            /**
                * <p>The status of the task.</p>
                */
            status: QuantumTaskStatus | string | undefined;
            /**
                * <p>The ARN of the device the task ran on.</p>
                */
            deviceArn: string | undefined;
            /**
                * <p>The shots used for the task.</p>
                */
            shots: number | undefined;
            /**
                * <p>The S3 bucket where the task result file is stored..</p>
                */
            outputS3Bucket: string | undefined;
            /**
                * <p>The folder in the S3 bucket where the task result file is stored.</p>
                */
            outputS3Directory: string | undefined;
            /**
                * <p>The time at which the task was created.</p>
                */
            createdAt: Date | undefined;
            /**
                * <p>The time at which the task finished.</p>
                */
            endedAt?: Date;
            /**
                * <p>Displays the key, value pairs of tags associated with this quantum task.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace QuantumTaskSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QuantumTaskSummary) => any;
    }
    export interface SearchQuantumTasksResponse {
            /**
                * <p>An array of <code>QuantumTaskSummary</code> objects for tasks that match the specified
                *          filters.</p>
                */
            quantumTasks: QuantumTaskSummary[] | undefined;
            /**
                * <p>A token used for pagination of results, or null if there are no additional results. Use
                *          the token value in a subsequent request to continue results where the previous request
                *          ended.</p>
                */
            nextToken?: string;
    }
    export namespace SearchQuantumTasksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchQuantumTasksResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>Specify the <code>resourceArn</code> of the resource to which a tag will be
                *          added.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>Specify the tags to add to the resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>Specify the <code>resourceArn</code> for the resource from which to remove the
                *          tags.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>Specify the keys for the tags to remove from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-braket/node_modules/@aws-sdk/client-braket/dist-types/models/BraketServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Braket service.
        */
    export class BraketServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

