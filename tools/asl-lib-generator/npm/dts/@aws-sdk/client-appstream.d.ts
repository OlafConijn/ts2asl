// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-appstream' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AppStreamClient } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { AssociateApplicationFleetCommandInput, AssociateApplicationFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateApplicationFleetCommand";
    import { AssociateApplicationToEntitlementCommandInput, AssociateApplicationToEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateApplicationToEntitlementCommand";
    import { AssociateFleetCommandInput, AssociateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateFleetCommand";
    import { BatchAssociateUserStackCommandInput, BatchAssociateUserStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/BatchAssociateUserStackCommand";
    import { BatchDisassociateUserStackCommandInput, BatchDisassociateUserStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/BatchDisassociateUserStackCommand";
    import { CopyImageCommandInput, CopyImageCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CopyImageCommand";
    import { CreateAppBlockCommandInput, CreateAppBlockCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateAppBlockCommand";
    import { CreateApplicationCommandInput, CreateApplicationCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateApplicationCommand";
    import { CreateDirectoryConfigCommandInput, CreateDirectoryConfigCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateDirectoryConfigCommand";
    import { CreateEntitlementCommandInput, CreateEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateEntitlementCommand";
    import { CreateFleetCommandInput, CreateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateFleetCommand";
    import { CreateImageBuilderCommandInput, CreateImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateImageBuilderCommand";
    import { CreateImageBuilderStreamingURLCommandInput, CreateImageBuilderStreamingURLCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateImageBuilderStreamingURLCommand";
    import { CreateStackCommandInput, CreateStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateStackCommand";
    import { CreateStreamingURLCommandInput, CreateStreamingURLCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateStreamingURLCommand";
    import { CreateUpdatedImageCommandInput, CreateUpdatedImageCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUpdatedImageCommand";
    import { CreateUsageReportSubscriptionCommandInput, CreateUsageReportSubscriptionCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUsageReportSubscriptionCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUserCommand";
    import { DeleteAppBlockCommandInput, DeleteAppBlockCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteAppBlockCommand";
    import { DeleteApplicationCommandInput, DeleteApplicationCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteApplicationCommand";
    import { DeleteDirectoryConfigCommandInput, DeleteDirectoryConfigCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteDirectoryConfigCommand";
    import { DeleteEntitlementCommandInput, DeleteEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteEntitlementCommand";
    import { DeleteFleetCommandInput, DeleteFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteFleetCommand";
    import { DeleteImageBuilderCommandInput, DeleteImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImageBuilderCommand";
    import { DeleteImageCommandInput, DeleteImageCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImageCommand";
    import { DeleteImagePermissionsCommandInput, DeleteImagePermissionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImagePermissionsCommand";
    import { DeleteStackCommandInput, DeleteStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteStackCommand";
    import { DeleteUsageReportSubscriptionCommandInput, DeleteUsageReportSubscriptionCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteUsageReportSubscriptionCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteUserCommand";
    import { DescribeAppBlocksCommandInput, DescribeAppBlocksCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeAppBlocksCommand";
    import { DescribeApplicationFleetAssociationsCommandInput, DescribeApplicationFleetAssociationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeApplicationFleetAssociationsCommand";
    import { DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeApplicationsCommand";
    import { DescribeDirectoryConfigsCommandInput, DescribeDirectoryConfigsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeDirectoryConfigsCommand";
    import { DescribeEntitlementsCommandInput, DescribeEntitlementsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeEntitlementsCommand";
    import { DescribeFleetsCommandInput, DescribeFleetsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeFleetsCommand";
    import { DescribeImageBuildersCommandInput, DescribeImageBuildersCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImageBuildersCommand";
    import { DescribeImagePermissionsCommandInput, DescribeImagePermissionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImagePermissionsCommand";
    import { DescribeImagesCommandInput, DescribeImagesCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImagesCommand";
    import { DescribeSessionsCommandInput, DescribeSessionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeSessionsCommand";
    import { DescribeStacksCommandInput, DescribeStacksCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeStacksCommand";
    import { DescribeUsageReportSubscriptionsCommandInput, DescribeUsageReportSubscriptionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUsageReportSubscriptionsCommand";
    import { DescribeUsersCommandInput, DescribeUsersCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUsersCommand";
    import { DescribeUserStackAssociationsCommandInput, DescribeUserStackAssociationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUserStackAssociationsCommand";
    import { DisableUserCommandInput, DisableUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisableUserCommand";
    import { DisassociateApplicationFleetCommandInput, DisassociateApplicationFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateApplicationFleetCommand";
    import { DisassociateApplicationFromEntitlementCommandInput, DisassociateApplicationFromEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateApplicationFromEntitlementCommand";
    import { DisassociateFleetCommandInput, DisassociateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateFleetCommand";
    import { EnableUserCommandInput, EnableUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/EnableUserCommand";
    import { ExpireSessionCommandInput, ExpireSessionCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ExpireSessionCommand";
    import { ListAssociatedFleetsCommandInput, ListAssociatedFleetsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListAssociatedFleetsCommand";
    import { ListAssociatedStacksCommandInput, ListAssociatedStacksCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListAssociatedStacksCommand";
    import { ListEntitledApplicationsCommandInput, ListEntitledApplicationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListEntitledApplicationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListTagsForResourceCommand";
    import { StartFleetCommandInput, StartFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StartFleetCommand";
    import { StartImageBuilderCommandInput, StartImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StartImageBuilderCommand";
    import { StopFleetCommandInput, StopFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StopFleetCommand";
    import { StopImageBuilderCommandInput, StopImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StopImageBuilderCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UntagResourceCommand";
    import { UpdateApplicationCommandInput, UpdateApplicationCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateApplicationCommand";
    import { UpdateDirectoryConfigCommandInput, UpdateDirectoryConfigCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateDirectoryConfigCommand";
    import { UpdateEntitlementCommandInput, UpdateEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateEntitlementCommand";
    import { UpdateFleetCommandInput, UpdateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateFleetCommand";
    import { UpdateImagePermissionsCommandInput, UpdateImagePermissionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateImagePermissionsCommand";
    import { UpdateStackCommandInput, UpdateStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateStackCommand";
    /**
        * <fullname>Amazon AppStream 2.0</fullname>
        *         <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p>
        *
        *         <note>
        *             <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
        *          </note>
        *
        *         <p>To learn more about AppStream 2.0, see the following resources:</p>
        *
        *             <ul>
        *             <li>
        *                <p>
        *                   <a href="http://aws.amazon.com/appstream2">Amazon AppStream 2.0 product page</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="http://aws.amazon.com/documentation/appstream2">Amazon AppStream 2.0 documentation</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class AppStream extends AppStreamClient {
            /**
                * <p>Associates the specified application with the specified fleet. This is only supported for Elastic fleets.</p>
                */
            associateApplicationFleet(args: AssociateApplicationFleetCommandInput, options?: __HttpHandlerOptions): Promise<AssociateApplicationFleetCommandOutput>;
            associateApplicationFleet(args: AssociateApplicationFleetCommandInput, cb: (err: any, data?: AssociateApplicationFleetCommandOutput) => void): void;
            associateApplicationFleet(args: AssociateApplicationFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateApplicationFleetCommandOutput) => void): void;
            /**
                * <p>Associates an application to entitle.</p>
                */
            associateApplicationToEntitlement(args: AssociateApplicationToEntitlementCommandInput, options?: __HttpHandlerOptions): Promise<AssociateApplicationToEntitlementCommandOutput>;
            associateApplicationToEntitlement(args: AssociateApplicationToEntitlementCommandInput, cb: (err: any, data?: AssociateApplicationToEntitlementCommandOutput) => void): void;
            associateApplicationToEntitlement(args: AssociateApplicationToEntitlementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateApplicationToEntitlementCommandOutput) => void): void;
            /**
                * <p>Associates the specified fleet with the specified stack.</p>
                */
            associateFleet(args: AssociateFleetCommandInput, options?: __HttpHandlerOptions): Promise<AssociateFleetCommandOutput>;
            associateFleet(args: AssociateFleetCommandInput, cb: (err: any, data?: AssociateFleetCommandOutput) => void): void;
            associateFleet(args: AssociateFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateFleetCommandOutput) => void): void;
            /**
                * <p>Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.</p>
                */
            batchAssociateUserStack(args: BatchAssociateUserStackCommandInput, options?: __HttpHandlerOptions): Promise<BatchAssociateUserStackCommandOutput>;
            batchAssociateUserStack(args: BatchAssociateUserStackCommandInput, cb: (err: any, data?: BatchAssociateUserStackCommandOutput) => void): void;
            batchAssociateUserStack(args: BatchAssociateUserStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchAssociateUserStackCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified users from the specified stacks.</p>
                */
            batchDisassociateUserStack(args: BatchDisassociateUserStackCommandInput, options?: __HttpHandlerOptions): Promise<BatchDisassociateUserStackCommandOutput>;
            batchDisassociateUserStack(args: BatchDisassociateUserStackCommandInput, cb: (err: any, data?: BatchDisassociateUserStackCommandOutput) => void): void;
            batchDisassociateUserStack(args: BatchDisassociateUserStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDisassociateUserStackCommandOutput) => void): void;
            /**
                * <p>Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.</p>
                */
            copyImage(args: CopyImageCommandInput, options?: __HttpHandlerOptions): Promise<CopyImageCommandOutput>;
            copyImage(args: CopyImageCommandInput, cb: (err: any, data?: CopyImageCommandOutput) => void): void;
            copyImage(args: CopyImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyImageCommandOutput) => void): void;
            /**
                * <p>Creates an app block.</p>
                *         <p>App blocks are an Amazon AppStream 2.0 resource that stores the details about the
                *             virtual hard disk in an S3 bucket. It also stores the setup script with details about
                *             how to mount the virtual hard disk. The virtual hard disk includes the application
                *             binaries and other files necessary to launch your applications. Multiple applications
                *             can be assigned to a single app block.</p>
                *         <p>This is only supported for Elastic fleets.</p>
                */
            createAppBlock(args: CreateAppBlockCommandInput, options?: __HttpHandlerOptions): Promise<CreateAppBlockCommandOutput>;
            createAppBlock(args: CreateAppBlockCommandInput, cb: (err: any, data?: CreateAppBlockCommandOutput) => void): void;
            createAppBlock(args: CreateAppBlockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAppBlockCommandOutput) => void): void;
            /**
                * <p>Creates an application.</p>
                *         <p>Applications are an Amazon AppStream 2.0 resource that stores the details about how to
                *             launch applications on Elastic fleet streaming instances. An application consists of the
                *             launch details, icon, and display name. Applications are associated with an app block
                *             that contains the application binaries and other files. The applications assigned to an
                *             Elastic fleet are the applications users can launch. </p>
                *         <p>This is only supported for Elastic fleets.</p>
                */
            createApplication(args: CreateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<CreateApplicationCommandOutput>;
            createApplication(args: CreateApplicationCommandInput, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
            createApplication(args: CreateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
            /**
                * <p>Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.</p>
                */
            createDirectoryConfig(args: CreateDirectoryConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateDirectoryConfigCommandOutput>;
            createDirectoryConfig(args: CreateDirectoryConfigCommandInput, cb: (err: any, data?: CreateDirectoryConfigCommandOutput) => void): void;
            createDirectoryConfig(args: CreateDirectoryConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDirectoryConfigCommandOutput) => void): void;
            /**
                * <p>Creates a new entitlement. Entitlements control access to specific applications within
                *             a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user
                *             identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all
                *             applications in a stack. Entitlements don't apply to the desktop stream view
                *             application, or to applications managed by a dynamic app provider using the Dynamic
                *             Application Framework.</p>
                */
            createEntitlement(args: CreateEntitlementCommandInput, options?: __HttpHandlerOptions): Promise<CreateEntitlementCommandOutput>;
            createEntitlement(args: CreateEntitlementCommandInput, cb: (err: any, data?: CreateEntitlementCommandOutput) => void): void;
            createEntitlement(args: CreateEntitlementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEntitlementCommandOutput) => void): void;
            /**
                * <p>Creates a fleet. A fleet consists of streaming instances that run a specified image when using Always-On or On-Demand.</p>
                */
            createFleet(args: CreateFleetCommandInput, options?: __HttpHandlerOptions): Promise<CreateFleetCommandOutput>;
            createFleet(args: CreateFleetCommandInput, cb: (err: any, data?: CreateFleetCommandOutput) => void): void;
            createFleet(args: CreateFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFleetCommandOutput) => void): void;
            /**
                * <p>Creates an image builder. An image builder is a virtual machine that is used to create an image.</p>
                *         <p>The initial state of the builder is <code>PENDING</code>. When it is ready, the state is <code>RUNNING</code>.</p>
                */
            createImageBuilder(args: CreateImageBuilderCommandInput, options?: __HttpHandlerOptions): Promise<CreateImageBuilderCommandOutput>;
            createImageBuilder(args: CreateImageBuilderCommandInput, cb: (err: any, data?: CreateImageBuilderCommandOutput) => void): void;
            createImageBuilder(args: CreateImageBuilderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateImageBuilderCommandOutput) => void): void;
            /**
                * <p>Creates a URL to start an image builder streaming session.</p>
                */
            createImageBuilderStreamingURL(args: CreateImageBuilderStreamingURLCommandInput, options?: __HttpHandlerOptions): Promise<CreateImageBuilderStreamingURLCommandOutput>;
            createImageBuilderStreamingURL(args: CreateImageBuilderStreamingURLCommandInput, cb: (err: any, data?: CreateImageBuilderStreamingURLCommandOutput) => void): void;
            createImageBuilderStreamingURL(args: CreateImageBuilderStreamingURLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateImageBuilderStreamingURLCommandOutput) => void): void;
            /**
                * <p>Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations. </p>
                */
            createStack(args: CreateStackCommandInput, options?: __HttpHandlerOptions): Promise<CreateStackCommandOutput>;
            createStack(args: CreateStackCommandInput, cb: (err: any, data?: CreateStackCommandOutput) => void): void;
            createStack(args: CreateStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStackCommandOutput) => void): void;
            /**
                * <p>Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup. </p>
                */
            createStreamingURL(args: CreateStreamingURLCommandInput, options?: __HttpHandlerOptions): Promise<CreateStreamingURLCommandOutput>;
            createStreamingURL(args: CreateStreamingURLCommandInput, cb: (err: any, data?: CreateStreamingURLCommandOutput) => void): void;
            createStreamingURL(args: CreateStreamingURLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStreamingURLCommandOutput) => void): void;
            /**
                * <p>Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software.</p>
                *
                *         <p>For more information, see the "Update an Image by Using
                *             Managed AppStream 2.0 Image Updates" section in <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/administer-images.html">Administer Your AppStream 2.0 Images</a>, in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            createUpdatedImage(args: CreateUpdatedImageCommandInput, options?: __HttpHandlerOptions): Promise<CreateUpdatedImageCommandOutput>;
            createUpdatedImage(args: CreateUpdatedImageCommandInput, cb: (err: any, data?: CreateUpdatedImageCommandOutput) => void): void;
            createUpdatedImage(args: CreateUpdatedImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUpdatedImageCommandOutput) => void): void;
            /**
                * <p>Creates a usage report subscription. Usage reports are generated daily.</p>
                */
            createUsageReportSubscription(args: CreateUsageReportSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<CreateUsageReportSubscriptionCommandOutput>;
            createUsageReportSubscription(args: CreateUsageReportSubscriptionCommandInput, cb: (err: any, data?: CreateUsageReportSubscriptionCommandOutput) => void): void;
            createUsageReportSubscription(args: CreateUsageReportSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUsageReportSubscriptionCommandOutput) => void): void;
            /**
                * <p>Creates a new user in the user pool.</p>
                */
            createUser(args: CreateUserCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserCommandOutput>;
            createUser(args: CreateUserCommandInput, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            createUser(args: CreateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            /**
                * <p>Deletes an app block.</p>
                */
            deleteAppBlock(args: DeleteAppBlockCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppBlockCommandOutput>;
            deleteAppBlock(args: DeleteAppBlockCommandInput, cb: (err: any, data?: DeleteAppBlockCommandOutput) => void): void;
            deleteAppBlock(args: DeleteAppBlockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppBlockCommandOutput) => void): void;
            /**
                * <p>Deletes an application.</p>
                */
            deleteApplication(args: DeleteApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApplicationCommandOutput>;
            deleteApplication(args: DeleteApplicationCommandInput, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
            deleteApplication(args: DeleteApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.</p>
                */
            deleteDirectoryConfig(args: DeleteDirectoryConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDirectoryConfigCommandOutput>;
            deleteDirectoryConfig(args: DeleteDirectoryConfigCommandInput, cb: (err: any, data?: DeleteDirectoryConfigCommandOutput) => void): void;
            deleteDirectoryConfig(args: DeleteDirectoryConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDirectoryConfigCommandOutput) => void): void;
            /**
                * <p>Deletes the specified entitlement.</p>
                */
            deleteEntitlement(args: DeleteEntitlementCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEntitlementCommandOutput>;
            deleteEntitlement(args: DeleteEntitlementCommandInput, cb: (err: any, data?: DeleteEntitlementCommandOutput) => void): void;
            deleteEntitlement(args: DeleteEntitlementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEntitlementCommandOutput) => void): void;
            /**
                * <p>Deletes the specified fleet.</p>
                */
            deleteFleet(args: DeleteFleetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFleetCommandOutput>;
            deleteFleet(args: DeleteFleetCommandInput, cb: (err: any, data?: DeleteFleetCommandOutput) => void): void;
            deleteFleet(args: DeleteFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFleetCommandOutput) => void): void;
            /**
                * <p>Deletes the specified image. You cannot delete an image when it is in use.
                *             After you delete an image, you cannot provision new capacity using the image.</p>
                */
            deleteImage(args: DeleteImageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteImageCommandOutput>;
            deleteImage(args: DeleteImageCommandInput, cb: (err: any, data?: DeleteImageCommandOutput) => void): void;
            deleteImage(args: DeleteImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteImageCommandOutput) => void): void;
            /**
                * <p>Deletes the specified image builder and releases the capacity.</p>
                */
            deleteImageBuilder(args: DeleteImageBuilderCommandInput, options?: __HttpHandlerOptions): Promise<DeleteImageBuilderCommandOutput>;
            deleteImageBuilder(args: DeleteImageBuilderCommandInput, cb: (err: any, data?: DeleteImageBuilderCommandOutput) => void): void;
            deleteImageBuilder(args: DeleteImageBuilderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteImageBuilderCommandOutput) => void): void;
            /**
                * <p>Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.</p>
                */
            deleteImagePermissions(args: DeleteImagePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteImagePermissionsCommandOutput>;
            deleteImagePermissions(args: DeleteImagePermissionsCommandInput, cb: (err: any, data?: DeleteImagePermissionsCommandOutput) => void): void;
            deleteImagePermissions(args: DeleteImagePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteImagePermissionsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.</p>
                */
            deleteStack(args: DeleteStackCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStackCommandOutput>;
            deleteStack(args: DeleteStackCommandInput, cb: (err: any, data?: DeleteStackCommandOutput) => void): void;
            deleteStack(args: DeleteStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStackCommandOutput) => void): void;
            /**
                * <p>Disables usage report generation.</p>
                */
            deleteUsageReportSubscription(args: DeleteUsageReportSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUsageReportSubscriptionCommandOutput>;
            deleteUsageReportSubscription(args: DeleteUsageReportSubscriptionCommandInput, cb: (err: any, data?: DeleteUsageReportSubscriptionCommandOutput) => void): void;
            deleteUsageReportSubscription(args: DeleteUsageReportSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUsageReportSubscriptionCommandOutput) => void): void;
            /**
                * <p>Deletes a user from the user pool.</p>
                */
            deleteUser(args: DeleteUserCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserCommandOutput>;
            deleteUser(args: DeleteUserCommandInput, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            deleteUser(args: DeleteUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more app blocks.</p>
                */
            describeAppBlocks(args: DescribeAppBlocksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAppBlocksCommandOutput>;
            describeAppBlocks(args: DescribeAppBlocksCommandInput, cb: (err: any, data?: DescribeAppBlocksCommandOutput) => void): void;
            describeAppBlocks(args: DescribeAppBlocksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAppBlocksCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more application fleet associations. Either ApplicationArn or FleetName must be specified.</p>
                */
            describeApplicationFleetAssociations(args: DescribeApplicationFleetAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApplicationFleetAssociationsCommandOutput>;
            describeApplicationFleetAssociations(args: DescribeApplicationFleetAssociationsCommandInput, cb: (err: any, data?: DescribeApplicationFleetAssociationsCommandOutput) => void): void;
            describeApplicationFleetAssociations(args: DescribeApplicationFleetAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApplicationFleetAssociationsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more applications.</p>
                */
            describeApplications(args: DescribeApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApplicationsCommandOutput>;
            describeApplications(args: DescribeApplicationsCommandInput, cb: (err: any, data?: DescribeApplicationsCommandOutput) => void): void;
            describeApplications(args: DescribeApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApplicationsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
                *         </p>
                *         <p>Although the response syntax in this topic includes the account password, this password is not returned in the actual response.</p>
                */
            describeDirectoryConfigs(args: DescribeDirectoryConfigsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDirectoryConfigsCommandOutput>;
            describeDirectoryConfigs(args: DescribeDirectoryConfigsCommandInput, cb: (err: any, data?: DescribeDirectoryConfigsCommandOutput) => void): void;
            describeDirectoryConfigs(args: DescribeDirectoryConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDirectoryConfigsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one of more entitlements.</p>
                */
            describeEntitlements(args: DescribeEntitlementsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEntitlementsCommandOutput>;
            describeEntitlements(args: DescribeEntitlementsCommandInput, cb: (err: any, data?: DescribeEntitlementsCommandOutput) => void): void;
            describeEntitlements(args: DescribeEntitlementsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEntitlementsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.</p>
                */
            describeFleets(args: DescribeFleetsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFleetsCommandOutput>;
            describeFleets(args: DescribeFleetsCommandInput, cb: (err: any, data?: DescribeFleetsCommandOutput) => void): void;
            describeFleets(args: DescribeFleetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFleetsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.</p>
                */
            describeImageBuilders(args: DescribeImageBuildersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeImageBuildersCommandOutput>;
            describeImageBuilders(args: DescribeImageBuildersCommandInput, cb: (err: any, data?: DescribeImageBuildersCommandOutput) => void): void;
            describeImageBuilders(args: DescribeImageBuildersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeImageBuildersCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own. </p>
                */
            describeImagePermissions(args: DescribeImagePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeImagePermissionsCommandOutput>;
            describeImagePermissions(args: DescribeImagePermissionsCommandInput, cb: (err: any, data?: DescribeImagePermissionsCommandOutput) => void): void;
            describeImagePermissions(args: DescribeImagePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeImagePermissionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.</p>
                */
            describeImages(args: DescribeImagesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeImagesCommandOutput>;
            describeImages(args: DescribeImagesCommandInput, cb: (err: any, data?: DescribeImagesCommandOutput) => void): void;
            describeImages(args: DescribeImagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeImagesCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet,
                *             only streaming sessions for that user are described. If an authentication type is not provided,
                *             the default is to authenticate users using a streaming URL.</p>
                */
            describeSessions(args: DescribeSessionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSessionsCommandOutput>;
            describeSessions(args: DescribeSessionsCommandInput, cb: (err: any, data?: DescribeSessionsCommandOutput) => void): void;
            describeSessions(args: DescribeSessionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSessionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.</p>
                */
            describeStacks(args: DescribeStacksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStacksCommandOutput>;
            describeStacks(args: DescribeStacksCommandInput, cb: (err: any, data?: DescribeStacksCommandOutput) => void): void;
            describeStacks(args: DescribeStacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStacksCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more usage report subscriptions.</p>
                */
            describeUsageReportSubscriptions(args: DescribeUsageReportSubscriptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUsageReportSubscriptionsCommandOutput>;
            describeUsageReportSubscriptions(args: DescribeUsageReportSubscriptionsCommandInput, cb: (err: any, data?: DescribeUsageReportSubscriptionsCommandOutput) => void): void;
            describeUsageReportSubscriptions(args: DescribeUsageReportSubscriptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUsageReportSubscriptionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified users in the user pool.</p>
                */
            describeUsers(args: DescribeUsersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUsersCommandOutput>;
            describeUsers(args: DescribeUsersCommandInput, cb: (err: any, data?: DescribeUsersCommandOutput) => void): void;
            describeUsers(args: DescribeUsersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUsersCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:</p>
                *         <ul>
                *             <li>
                *                <p>The stack name</p>
                *             </li>
                *             <li>
                *                <p>The user name (email address of the user associated with the stack) and the authentication type for the user</p>
                *             </li>
                *          </ul>
                */
            describeUserStackAssociations(args: DescribeUserStackAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserStackAssociationsCommandOutput>;
            describeUserStackAssociations(args: DescribeUserStackAssociationsCommandInput, cb: (err: any, data?: DescribeUserStackAssociationsCommandOutput) => void): void;
            describeUserStackAssociations(args: DescribeUserStackAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserStackAssociationsCommandOutput) => void): void;
            /**
                * <p>Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user. </p>
                */
            disableUser(args: DisableUserCommandInput, options?: __HttpHandlerOptions): Promise<DisableUserCommandOutput>;
            disableUser(args: DisableUserCommandInput, cb: (err: any, data?: DisableUserCommandOutput) => void): void;
            disableUser(args: DisableUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableUserCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified application from the fleet.</p>
                */
            disassociateApplicationFleet(args: DisassociateApplicationFleetCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateApplicationFleetCommandOutput>;
            disassociateApplicationFleet(args: DisassociateApplicationFleetCommandInput, cb: (err: any, data?: DisassociateApplicationFleetCommandOutput) => void): void;
            disassociateApplicationFleet(args: DisassociateApplicationFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateApplicationFleetCommandOutput) => void): void;
            /**
                * <p>Deletes the specified application from the specified entitlement.</p>
                */
            disassociateApplicationFromEntitlement(args: DisassociateApplicationFromEntitlementCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateApplicationFromEntitlementCommandOutput>;
            disassociateApplicationFromEntitlement(args: DisassociateApplicationFromEntitlementCommandInput, cb: (err: any, data?: DisassociateApplicationFromEntitlementCommandOutput) => void): void;
            disassociateApplicationFromEntitlement(args: DisassociateApplicationFromEntitlementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateApplicationFromEntitlementCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified fleet from the specified stack.</p>
                */
            disassociateFleet(args: DisassociateFleetCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateFleetCommandOutput>;
            disassociateFleet(args: DisassociateFleetCommandInput, cb: (err: any, data?: DisassociateFleetCommandOutput) => void): void;
            disassociateFleet(args: DisassociateFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateFleetCommandOutput) => void): void;
            /**
                * <p>Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.</p>
                */
            enableUser(args: EnableUserCommandInput, options?: __HttpHandlerOptions): Promise<EnableUserCommandOutput>;
            enableUser(args: EnableUserCommandInput, cb: (err: any, data?: EnableUserCommandOutput) => void): void;
            enableUser(args: EnableUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableUserCommandOutput) => void): void;
            /**
                * <p>Immediately stops the specified streaming session.</p>
                */
            expireSession(args: ExpireSessionCommandInput, options?: __HttpHandlerOptions): Promise<ExpireSessionCommandOutput>;
            expireSession(args: ExpireSessionCommandInput, cb: (err: any, data?: ExpireSessionCommandOutput) => void): void;
            expireSession(args: ExpireSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExpireSessionCommandOutput) => void): void;
            /**
                * <p>Retrieves the name of the fleet that is associated with the specified stack.</p>
                */
            listAssociatedFleets(args: ListAssociatedFleetsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssociatedFleetsCommandOutput>;
            listAssociatedFleets(args: ListAssociatedFleetsCommandInput, cb: (err: any, data?: ListAssociatedFleetsCommandOutput) => void): void;
            listAssociatedFleets(args: ListAssociatedFleetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssociatedFleetsCommandOutput) => void): void;
            /**
                * <p>Retrieves the name of the stack with which the specified fleet is associated.</p>
                */
            listAssociatedStacks(args: ListAssociatedStacksCommandInput, options?: __HttpHandlerOptions): Promise<ListAssociatedStacksCommandOutput>;
            listAssociatedStacks(args: ListAssociatedStacksCommandInput, cb: (err: any, data?: ListAssociatedStacksCommandOutput) => void): void;
            listAssociatedStacks(args: ListAssociatedStacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssociatedStacksCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of entitled applications.</p>
                */
            listEntitledApplications(args: ListEntitledApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<ListEntitledApplicationsCommandOutput>;
            listEntitledApplications(args: ListEntitledApplicationsCommandInput, cb: (err: any, data?: ListEntitledApplicationsCommandOutput) => void): void;
            listEntitledApplications(args: ListEntitledApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntitledApplicationsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p>
                *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Starts the specified fleet.</p>
                */
            startFleet(args: StartFleetCommandInput, options?: __HttpHandlerOptions): Promise<StartFleetCommandOutput>;
            startFleet(args: StartFleetCommandInput, cb: (err: any, data?: StartFleetCommandOutput) => void): void;
            startFleet(args: StartFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartFleetCommandOutput) => void): void;
            /**
                * <p>Starts the specified image builder.</p>
                */
            startImageBuilder(args: StartImageBuilderCommandInput, options?: __HttpHandlerOptions): Promise<StartImageBuilderCommandOutput>;
            startImageBuilder(args: StartImageBuilderCommandInput, cb: (err: any, data?: StartImageBuilderCommandOutput) => void): void;
            startImageBuilder(args: StartImageBuilderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartImageBuilderCommandOutput) => void): void;
            /**
                * <p>Stops the specified fleet.</p>
                */
            stopFleet(args: StopFleetCommandInput, options?: __HttpHandlerOptions): Promise<StopFleetCommandOutput>;
            stopFleet(args: StopFleetCommandInput, cb: (err: any, data?: StopFleetCommandOutput) => void): void;
            stopFleet(args: StopFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopFleetCommandOutput) => void): void;
            /**
                * <p>Stops the specified image builder.</p>
                */
            stopImageBuilder(args: StopImageBuilderCommandInput, options?: __HttpHandlerOptions): Promise<StopImageBuilderCommandOutput>;
            stopImageBuilder(args: StopImageBuilderCommandInput, cb: (err: any, data?: StopImageBuilderCommandOutput) => void): void;
            stopImageBuilder(args: StopImageBuilderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopImageBuilderCommandOutput) => void): void;
            /**
                * <p>Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p>
                *             <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key,
                *                 this operation updates its value.</p>
                *
                *             <p>To list the current tags for your resources, use <a>ListTagsForResource</a>.
                *                 To disassociate tags from your resources, use <a>UntagResource</a>.</p>
                *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Disassociates one or more specified tags from the specified AppStream 2.0 resource.</p>
                *         <p>To list the current tags for your resources, use <a>ListTagsForResource</a>.</p>
                *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the specified application.</p>
                */
            updateApplication(args: UpdateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApplicationCommandOutput>;
            updateApplication(args: UpdateApplicationCommandInput, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
            updateApplication(args: UpdateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
            /**
                * <p>Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.</p>
                */
            updateDirectoryConfig(args: UpdateDirectoryConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDirectoryConfigCommandOutput>;
            updateDirectoryConfig(args: UpdateDirectoryConfigCommandInput, cb: (err: any, data?: UpdateDirectoryConfigCommandOutput) => void): void;
            updateDirectoryConfig(args: UpdateDirectoryConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDirectoryConfigCommandOutput) => void): void;
            /**
                * <p>Updates the specified entitlement.</p>
                */
            updateEntitlement(args: UpdateEntitlementCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEntitlementCommandOutput>;
            updateEntitlement(args: UpdateEntitlementCommandInput, cb: (err: any, data?: UpdateEntitlementCommandOutput) => void): void;
            updateEntitlement(args: UpdateEntitlementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEntitlementCommandOutput) => void): void;
            /**
                * <p>Updates the specified fleet.</p>
                *         <p>If the fleet is in the <code>STOPPED</code> state, you can update any attribute except
                *             the fleet name.</p>
                *         <p>If the fleet is in the <code>RUNNING</code> state, you can update the following based
                *             on the fleet type:</p>
                *         <ul>
                *             <li>
                *                <p>Always-On and On-Demand fleet types</p>
                *                 <p>You can update the  <code>DisplayName</code>, <code>ComputeCapacity</code>,
                *                         <code>ImageARN</code>, <code>ImageName</code>,
                *                         <code>IdleDisconnectTimeoutInSeconds</code>, and
                *                         <code>DisconnectTimeoutInSeconds</code> attributes.</p>
                *             </li>
                *             <li>
                *                <p>Elastic fleet type</p>
                *                 <p>You can update the  <code>DisplayName</code>,
                *                         <code>IdleDisconnectTimeoutInSeconds</code>,
                *                     <code>DisconnectTimeoutInSeconds</code>, <code>MaxConcurrentSessions</code>, <code>SessionScriptS3Location</code>
                *                     and <code>UsbDeviceFilterStrings</code> attributes.</p>
                *             </li>
                *          </ul>
                *         <p>If the fleet is in the <code>STARTING</code> or <code>STOPPED</code> state, you can't update it.</p>
                */
            updateFleet(args: UpdateFleetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFleetCommandOutput>;
            updateFleet(args: UpdateFleetCommandInput, cb: (err: any, data?: UpdateFleetCommandOutput) => void): void;
            updateFleet(args: UpdateFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFleetCommandOutput) => void): void;
            /**
                * <p>Adds or updates permissions for the specified private image. </p>
                */
            updateImagePermissions(args: UpdateImagePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateImagePermissionsCommandOutput>;
            updateImagePermissions(args: UpdateImagePermissionsCommandInput, cb: (err: any, data?: UpdateImagePermissionsCommandOutput) => void): void;
            updateImagePermissions(args: UpdateImagePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateImagePermissionsCommandOutput) => void): void;
            /**
                * <p>Updates the specified fields for the specified stack.</p>
                */
            updateStack(args: UpdateStackCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStackCommandOutput>;
            updateStack(args: UpdateStackCommandInput, cb: (err: any, data?: UpdateStackCommandOutput) => void): void;
            updateStack(args: UpdateStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStackCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateApplicationFleetCommandInput, AssociateApplicationFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateApplicationFleetCommand";
    import { AssociateApplicationToEntitlementCommandInput, AssociateApplicationToEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateApplicationToEntitlementCommand";
    import { AssociateFleetCommandInput, AssociateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateFleetCommand";
    import { BatchAssociateUserStackCommandInput, BatchAssociateUserStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/BatchAssociateUserStackCommand";
    import { BatchDisassociateUserStackCommandInput, BatchDisassociateUserStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/BatchDisassociateUserStackCommand";
    import { CopyImageCommandInput, CopyImageCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CopyImageCommand";
    import { CreateAppBlockCommandInput, CreateAppBlockCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateAppBlockCommand";
    import { CreateApplicationCommandInput, CreateApplicationCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateApplicationCommand";
    import { CreateDirectoryConfigCommandInput, CreateDirectoryConfigCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateDirectoryConfigCommand";
    import { CreateEntitlementCommandInput, CreateEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateEntitlementCommand";
    import { CreateFleetCommandInput, CreateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateFleetCommand";
    import { CreateImageBuilderCommandInput, CreateImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateImageBuilderCommand";
    import { CreateImageBuilderStreamingURLCommandInput, CreateImageBuilderStreamingURLCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateImageBuilderStreamingURLCommand";
    import { CreateStackCommandInput, CreateStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateStackCommand";
    import { CreateStreamingURLCommandInput, CreateStreamingURLCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateStreamingURLCommand";
    import { CreateUpdatedImageCommandInput, CreateUpdatedImageCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUpdatedImageCommand";
    import { CreateUsageReportSubscriptionCommandInput, CreateUsageReportSubscriptionCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUsageReportSubscriptionCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUserCommand";
    import { DeleteAppBlockCommandInput, DeleteAppBlockCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteAppBlockCommand";
    import { DeleteApplicationCommandInput, DeleteApplicationCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteApplicationCommand";
    import { DeleteDirectoryConfigCommandInput, DeleteDirectoryConfigCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteDirectoryConfigCommand";
    import { DeleteEntitlementCommandInput, DeleteEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteEntitlementCommand";
    import { DeleteFleetCommandInput, DeleteFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteFleetCommand";
    import { DeleteImageBuilderCommandInput, DeleteImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImageBuilderCommand";
    import { DeleteImageCommandInput, DeleteImageCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImageCommand";
    import { DeleteImagePermissionsCommandInput, DeleteImagePermissionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImagePermissionsCommand";
    import { DeleteStackCommandInput, DeleteStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteStackCommand";
    import { DeleteUsageReportSubscriptionCommandInput, DeleteUsageReportSubscriptionCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteUsageReportSubscriptionCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteUserCommand";
    import { DescribeAppBlocksCommandInput, DescribeAppBlocksCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeAppBlocksCommand";
    import { DescribeApplicationFleetAssociationsCommandInput, DescribeApplicationFleetAssociationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeApplicationFleetAssociationsCommand";
    import { DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeApplicationsCommand";
    import { DescribeDirectoryConfigsCommandInput, DescribeDirectoryConfigsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeDirectoryConfigsCommand";
    import { DescribeEntitlementsCommandInput, DescribeEntitlementsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeEntitlementsCommand";
    import { DescribeFleetsCommandInput, DescribeFleetsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeFleetsCommand";
    import { DescribeImageBuildersCommandInput, DescribeImageBuildersCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImageBuildersCommand";
    import { DescribeImagePermissionsCommandInput, DescribeImagePermissionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImagePermissionsCommand";
    import { DescribeImagesCommandInput, DescribeImagesCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImagesCommand";
    import { DescribeSessionsCommandInput, DescribeSessionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeSessionsCommand";
    import { DescribeStacksCommandInput, DescribeStacksCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeStacksCommand";
    import { DescribeUsageReportSubscriptionsCommandInput, DescribeUsageReportSubscriptionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUsageReportSubscriptionsCommand";
    import { DescribeUsersCommandInput, DescribeUsersCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUsersCommand";
    import { DescribeUserStackAssociationsCommandInput, DescribeUserStackAssociationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUserStackAssociationsCommand";
    import { DisableUserCommandInput, DisableUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisableUserCommand";
    import { DisassociateApplicationFleetCommandInput, DisassociateApplicationFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateApplicationFleetCommand";
    import { DisassociateApplicationFromEntitlementCommandInput, DisassociateApplicationFromEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateApplicationFromEntitlementCommand";
    import { DisassociateFleetCommandInput, DisassociateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateFleetCommand";
    import { EnableUserCommandInput, EnableUserCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/EnableUserCommand";
    import { ExpireSessionCommandInput, ExpireSessionCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ExpireSessionCommand";
    import { ListAssociatedFleetsCommandInput, ListAssociatedFleetsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListAssociatedFleetsCommand";
    import { ListAssociatedStacksCommandInput, ListAssociatedStacksCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListAssociatedStacksCommand";
    import { ListEntitledApplicationsCommandInput, ListEntitledApplicationsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListEntitledApplicationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListTagsForResourceCommand";
    import { StartFleetCommandInput, StartFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StartFleetCommand";
    import { StartImageBuilderCommandInput, StartImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StartImageBuilderCommand";
    import { StopFleetCommandInput, StopFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StopFleetCommand";
    import { StopImageBuilderCommandInput, StopImageBuilderCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StopImageBuilderCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UntagResourceCommand";
    import { UpdateApplicationCommandInput, UpdateApplicationCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateApplicationCommand";
    import { UpdateDirectoryConfigCommandInput, UpdateDirectoryConfigCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateDirectoryConfigCommand";
    import { UpdateEntitlementCommandInput, UpdateEntitlementCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateEntitlementCommand";
    import { UpdateFleetCommandInput, UpdateFleetCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateFleetCommand";
    import { UpdateImagePermissionsCommandInput, UpdateImagePermissionsCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateImagePermissionsCommand";
    import { UpdateStackCommandInput, UpdateStackCommandOutput } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateStackCommand";
    export type ServiceInputTypes = AssociateApplicationFleetCommandInput | AssociateApplicationToEntitlementCommandInput | AssociateFleetCommandInput | BatchAssociateUserStackCommandInput | BatchDisassociateUserStackCommandInput | CopyImageCommandInput | CreateAppBlockCommandInput | CreateApplicationCommandInput | CreateDirectoryConfigCommandInput | CreateEntitlementCommandInput | CreateFleetCommandInput | CreateImageBuilderCommandInput | CreateImageBuilderStreamingURLCommandInput | CreateStackCommandInput | CreateStreamingURLCommandInput | CreateUpdatedImageCommandInput | CreateUsageReportSubscriptionCommandInput | CreateUserCommandInput | DeleteAppBlockCommandInput | DeleteApplicationCommandInput | DeleteDirectoryConfigCommandInput | DeleteEntitlementCommandInput | DeleteFleetCommandInput | DeleteImageBuilderCommandInput | DeleteImageCommandInput | DeleteImagePermissionsCommandInput | DeleteStackCommandInput | DeleteUsageReportSubscriptionCommandInput | DeleteUserCommandInput | DescribeAppBlocksCommandInput | DescribeApplicationFleetAssociationsCommandInput | DescribeApplicationsCommandInput | DescribeDirectoryConfigsCommandInput | DescribeEntitlementsCommandInput | DescribeFleetsCommandInput | DescribeImageBuildersCommandInput | DescribeImagePermissionsCommandInput | DescribeImagesCommandInput | DescribeSessionsCommandInput | DescribeStacksCommandInput | DescribeUsageReportSubscriptionsCommandInput | DescribeUserStackAssociationsCommandInput | DescribeUsersCommandInput | DisableUserCommandInput | DisassociateApplicationFleetCommandInput | DisassociateApplicationFromEntitlementCommandInput | DisassociateFleetCommandInput | EnableUserCommandInput | ExpireSessionCommandInput | ListAssociatedFleetsCommandInput | ListAssociatedStacksCommandInput | ListEntitledApplicationsCommandInput | ListTagsForResourceCommandInput | StartFleetCommandInput | StartImageBuilderCommandInput | StopFleetCommandInput | StopImageBuilderCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateApplicationCommandInput | UpdateDirectoryConfigCommandInput | UpdateEntitlementCommandInput | UpdateFleetCommandInput | UpdateImagePermissionsCommandInput | UpdateStackCommandInput;
    export type ServiceOutputTypes = AssociateApplicationFleetCommandOutput | AssociateApplicationToEntitlementCommandOutput | AssociateFleetCommandOutput | BatchAssociateUserStackCommandOutput | BatchDisassociateUserStackCommandOutput | CopyImageCommandOutput | CreateAppBlockCommandOutput | CreateApplicationCommandOutput | CreateDirectoryConfigCommandOutput | CreateEntitlementCommandOutput | CreateFleetCommandOutput | CreateImageBuilderCommandOutput | CreateImageBuilderStreamingURLCommandOutput | CreateStackCommandOutput | CreateStreamingURLCommandOutput | CreateUpdatedImageCommandOutput | CreateUsageReportSubscriptionCommandOutput | CreateUserCommandOutput | DeleteAppBlockCommandOutput | DeleteApplicationCommandOutput | DeleteDirectoryConfigCommandOutput | DeleteEntitlementCommandOutput | DeleteFleetCommandOutput | DeleteImageBuilderCommandOutput | DeleteImageCommandOutput | DeleteImagePermissionsCommandOutput | DeleteStackCommandOutput | DeleteUsageReportSubscriptionCommandOutput | DeleteUserCommandOutput | DescribeAppBlocksCommandOutput | DescribeApplicationFleetAssociationsCommandOutput | DescribeApplicationsCommandOutput | DescribeDirectoryConfigsCommandOutput | DescribeEntitlementsCommandOutput | DescribeFleetsCommandOutput | DescribeImageBuildersCommandOutput | DescribeImagePermissionsCommandOutput | DescribeImagesCommandOutput | DescribeSessionsCommandOutput | DescribeStacksCommandOutput | DescribeUsageReportSubscriptionsCommandOutput | DescribeUserStackAssociationsCommandOutput | DescribeUsersCommandOutput | DisableUserCommandOutput | DisassociateApplicationFleetCommandOutput | DisassociateApplicationFromEntitlementCommandOutput | DisassociateFleetCommandOutput | EnableUserCommandOutput | ExpireSessionCommandOutput | ListAssociatedFleetsCommandOutput | ListAssociatedStacksCommandOutput | ListEntitledApplicationsCommandOutput | ListTagsForResourceCommandOutput | StartFleetCommandOutput | StartImageBuilderCommandOutput | StopFleetCommandOutput | StopImageBuilderCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateApplicationCommandOutput | UpdateDirectoryConfigCommandOutput | UpdateEntitlementCommandOutput | UpdateFleetCommandOutput | UpdateImagePermissionsCommandOutput | UpdateStackCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type AppStreamClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of AppStreamClient class constructor that set the region, credentials and other options.
        */
    export interface AppStreamClientConfig extends AppStreamClientConfigType {
    }
    type AppStreamClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of AppStreamClient class. This is resolved and normalized from the {@link AppStreamClientConfig | constructor configuration interface}.
        */
    export interface AppStreamClientResolvedConfig extends AppStreamClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon AppStream 2.0</fullname>
        *         <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p>
        *
        *         <note>
        *             <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
        *          </note>
        *
        *         <p>To learn more about AppStream 2.0, see the following resources:</p>
        *
        *             <ul>
        *             <li>
        *                <p>
        *                   <a href="http://aws.amazon.com/appstream2">Amazon AppStream 2.0 product page</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="http://aws.amazon.com/documentation/appstream2">Amazon AppStream 2.0 documentation</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class AppStreamClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, AppStreamClientResolvedConfig> {
            /**
                * The resolved configuration of AppStreamClient class. This is resolved and normalized from the {@link AppStreamClientConfig | constructor configuration interface}.
                */
            readonly config: AppStreamClientResolvedConfig;
            constructor(configuration: AppStreamClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateApplicationFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { AssociateApplicationFleetRequest, AssociateApplicationFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface AssociateApplicationFleetCommandInput extends AssociateApplicationFleetRequest {
    }
    export interface AssociateApplicationFleetCommandOutput extends AssociateApplicationFleetResult, __MetadataBearer {
    }
    /**
        * <p>Associates the specified application with the specified fleet. This is only supported for Elastic fleets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, AssociateApplicationFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, AssociateApplicationFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new AssociateApplicationFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateApplicationFleetCommandInput} for command's `input` shape.
        * @see {@link AssociateApplicationFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class AssociateApplicationFleetCommand extends $Command<AssociateApplicationFleetCommandInput, AssociateApplicationFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: AssociateApplicationFleetCommandInput;
            constructor(input: AssociateApplicationFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateApplicationFleetCommandInput, AssociateApplicationFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateApplicationToEntitlementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { AssociateApplicationToEntitlementRequest, AssociateApplicationToEntitlementResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface AssociateApplicationToEntitlementCommandInput extends AssociateApplicationToEntitlementRequest {
    }
    export interface AssociateApplicationToEntitlementCommandOutput extends AssociateApplicationToEntitlementResult, __MetadataBearer {
    }
    /**
        * <p>Associates an application to entitle.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, AssociateApplicationToEntitlementCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, AssociateApplicationToEntitlementCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new AssociateApplicationToEntitlementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateApplicationToEntitlementCommandInput} for command's `input` shape.
        * @see {@link AssociateApplicationToEntitlementCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class AssociateApplicationToEntitlementCommand extends $Command<AssociateApplicationToEntitlementCommandInput, AssociateApplicationToEntitlementCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: AssociateApplicationToEntitlementCommandInput;
            constructor(input: AssociateApplicationToEntitlementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateApplicationToEntitlementCommandInput, AssociateApplicationToEntitlementCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/AssociateFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { AssociateFleetRequest, AssociateFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface AssociateFleetCommandInput extends AssociateFleetRequest {
    }
    export interface AssociateFleetCommandOutput extends AssociateFleetResult, __MetadataBearer {
    }
    /**
        * <p>Associates the specified fleet with the specified stack.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, AssociateFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, AssociateFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new AssociateFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateFleetCommandInput} for command's `input` shape.
        * @see {@link AssociateFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class AssociateFleetCommand extends $Command<AssociateFleetCommandInput, AssociateFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: AssociateFleetCommandInput;
            constructor(input: AssociateFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateFleetCommandInput, AssociateFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/BatchAssociateUserStackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { BatchAssociateUserStackRequest, BatchAssociateUserStackResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface BatchAssociateUserStackCommandInput extends BatchAssociateUserStackRequest {
    }
    export interface BatchAssociateUserStackCommandOutput extends BatchAssociateUserStackResult, __MetadataBearer {
    }
    /**
        * <p>Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, BatchAssociateUserStackCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, BatchAssociateUserStackCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new BatchAssociateUserStackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchAssociateUserStackCommandInput} for command's `input` shape.
        * @see {@link BatchAssociateUserStackCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class BatchAssociateUserStackCommand extends $Command<BatchAssociateUserStackCommandInput, BatchAssociateUserStackCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: BatchAssociateUserStackCommandInput;
            constructor(input: BatchAssociateUserStackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchAssociateUserStackCommandInput, BatchAssociateUserStackCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/BatchDisassociateUserStackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { BatchDisassociateUserStackRequest, BatchDisassociateUserStackResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface BatchDisassociateUserStackCommandInput extends BatchDisassociateUserStackRequest {
    }
    export interface BatchDisassociateUserStackCommandOutput extends BatchDisassociateUserStackResult, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified users from the specified stacks.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, BatchDisassociateUserStackCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, BatchDisassociateUserStackCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new BatchDisassociateUserStackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDisassociateUserStackCommandInput} for command's `input` shape.
        * @see {@link BatchDisassociateUserStackCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class BatchDisassociateUserStackCommand extends $Command<BatchDisassociateUserStackCommandInput, BatchDisassociateUserStackCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: BatchDisassociateUserStackCommandInput;
            constructor(input: BatchDisassociateUserStackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDisassociateUserStackCommandInput, BatchDisassociateUserStackCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CopyImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CopyImageRequest, CopyImageResponse } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CopyImageCommandInput extends CopyImageRequest {
    }
    export interface CopyImageCommandOutput extends CopyImageResponse, __MetadataBearer {
    }
    /**
        * <p>Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CopyImageCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CopyImageCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CopyImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyImageCommandInput} for command's `input` shape.
        * @see {@link CopyImageCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CopyImageCommand extends $Command<CopyImageCommandInput, CopyImageCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CopyImageCommandInput;
            constructor(input: CopyImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyImageCommandInput, CopyImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateAppBlockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateAppBlockRequest, CreateAppBlockResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateAppBlockCommandInput extends CreateAppBlockRequest {
    }
    export interface CreateAppBlockCommandOutput extends CreateAppBlockResult, __MetadataBearer {
    }
    /**
        * <p>Creates an app block.</p>
        *         <p>App blocks are an Amazon AppStream 2.0 resource that stores the details about the
        *             virtual hard disk in an S3 bucket. It also stores the setup script with details about
        *             how to mount the virtual hard disk. The virtual hard disk includes the application
        *             binaries and other files necessary to launch your applications. Multiple applications
        *             can be assigned to a single app block.</p>
        *         <p>This is only supported for Elastic fleets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateAppBlockCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateAppBlockCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateAppBlockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAppBlockCommandInput} for command's `input` shape.
        * @see {@link CreateAppBlockCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateAppBlockCommand extends $Command<CreateAppBlockCommandInput, CreateAppBlockCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateAppBlockCommandInput;
            constructor(input: CreateAppBlockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAppBlockCommandInput, CreateAppBlockCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateApplicationRequest, CreateApplicationResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateApplicationCommandInput extends CreateApplicationRequest {
    }
    export interface CreateApplicationCommandOutput extends CreateApplicationResult, __MetadataBearer {
    }
    /**
        * <p>Creates an application.</p>
        *         <p>Applications are an Amazon AppStream 2.0 resource that stores the details about how to
        *             launch applications on Elastic fleet streaming instances. An application consists of the
        *             launch details, icon, and display name. Applications are associated with an app block
        *             that contains the application binaries and other files. The applications assigned to an
        *             Elastic fleet are the applications users can launch. </p>
        *         <p>This is only supported for Elastic fleets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateApplicationCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateApplicationCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApplicationCommandInput} for command's `input` shape.
        * @see {@link CreateApplicationCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateApplicationCommand extends $Command<CreateApplicationCommandInput, CreateApplicationCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateApplicationCommandInput;
            constructor(input: CreateApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApplicationCommandInput, CreateApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateDirectoryConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateDirectoryConfigRequest, CreateDirectoryConfigResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateDirectoryConfigCommandInput extends CreateDirectoryConfigRequest {
    }
    export interface CreateDirectoryConfigCommandOutput extends CreateDirectoryConfigResult, __MetadataBearer {
    }
    /**
        * <p>Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateDirectoryConfigCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateDirectoryConfigCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateDirectoryConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDirectoryConfigCommandInput} for command's `input` shape.
        * @see {@link CreateDirectoryConfigCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateDirectoryConfigCommand extends $Command<CreateDirectoryConfigCommandInput, CreateDirectoryConfigCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateDirectoryConfigCommandInput;
            constructor(input: CreateDirectoryConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDirectoryConfigCommandInput, CreateDirectoryConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateEntitlementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateEntitlementRequest, CreateEntitlementResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateEntitlementCommandInput extends CreateEntitlementRequest {
    }
    export interface CreateEntitlementCommandOutput extends CreateEntitlementResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new entitlement. Entitlements control access to specific applications within
        *             a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user
        *             identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all
        *             applications in a stack. Entitlements don't apply to the desktop stream view
        *             application, or to applications managed by a dynamic app provider using the Dynamic
        *             Application Framework.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateEntitlementCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateEntitlementCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateEntitlementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEntitlementCommandInput} for command's `input` shape.
        * @see {@link CreateEntitlementCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateEntitlementCommand extends $Command<CreateEntitlementCommandInput, CreateEntitlementCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateEntitlementCommandInput;
            constructor(input: CreateEntitlementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEntitlementCommandInput, CreateEntitlementCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateFleetRequest, CreateFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateFleetCommandInput extends CreateFleetRequest {
    }
    export interface CreateFleetCommandOutput extends CreateFleetResult, __MetadataBearer {
    }
    /**
        * <p>Creates a fleet. A fleet consists of streaming instances that run a specified image when using Always-On or On-Demand.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFleetCommandInput} for command's `input` shape.
        * @see {@link CreateFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateFleetCommand extends $Command<CreateFleetCommandInput, CreateFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateFleetCommandInput;
            constructor(input: CreateFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFleetCommandInput, CreateFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateImageBuilderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateImageBuilderRequest, CreateImageBuilderResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateImageBuilderCommandInput extends CreateImageBuilderRequest {
    }
    export interface CreateImageBuilderCommandOutput extends CreateImageBuilderResult, __MetadataBearer {
    }
    /**
        * <p>Creates an image builder. An image builder is a virtual machine that is used to create an image.</p>
        *         <p>The initial state of the builder is <code>PENDING</code>. When it is ready, the state is <code>RUNNING</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateImageBuilderCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateImageBuilderCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateImageBuilderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateImageBuilderCommandInput} for command's `input` shape.
        * @see {@link CreateImageBuilderCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateImageBuilderCommand extends $Command<CreateImageBuilderCommandInput, CreateImageBuilderCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateImageBuilderCommandInput;
            constructor(input: CreateImageBuilderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateImageBuilderCommandInput, CreateImageBuilderCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateImageBuilderStreamingURLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateImageBuilderStreamingURLRequest, CreateImageBuilderStreamingURLResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateImageBuilderStreamingURLCommandInput extends CreateImageBuilderStreamingURLRequest {
    }
    export interface CreateImageBuilderStreamingURLCommandOutput extends CreateImageBuilderStreamingURLResult, __MetadataBearer {
    }
    /**
        * <p>Creates a URL to start an image builder streaming session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateImageBuilderStreamingURLCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateImageBuilderStreamingURLCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateImageBuilderStreamingURLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateImageBuilderStreamingURLCommandInput} for command's `input` shape.
        * @see {@link CreateImageBuilderStreamingURLCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateImageBuilderStreamingURLCommand extends $Command<CreateImageBuilderStreamingURLCommandInput, CreateImageBuilderStreamingURLCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateImageBuilderStreamingURLCommandInput;
            constructor(input: CreateImageBuilderStreamingURLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateImageBuilderStreamingURLCommandInput, CreateImageBuilderStreamingURLCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateStackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateStackRequest, CreateStackResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateStackCommandInput extends CreateStackRequest {
    }
    export interface CreateStackCommandOutput extends CreateStackResult, __MetadataBearer {
    }
    /**
        * <p>Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateStackCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateStackCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateStackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStackCommandInput} for command's `input` shape.
        * @see {@link CreateStackCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateStackCommand extends $Command<CreateStackCommandInput, CreateStackCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateStackCommandInput;
            constructor(input: CreateStackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStackCommandInput, CreateStackCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateStreamingURLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateStreamingURLRequest, CreateStreamingURLResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateStreamingURLCommandInput extends CreateStreamingURLRequest {
    }
    export interface CreateStreamingURLCommandOutput extends CreateStreamingURLResult, __MetadataBearer {
    }
    /**
        * <p>Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateStreamingURLCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateStreamingURLCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateStreamingURLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStreamingURLCommandInput} for command's `input` shape.
        * @see {@link CreateStreamingURLCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateStreamingURLCommand extends $Command<CreateStreamingURLCommandInput, CreateStreamingURLCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateStreamingURLCommandInput;
            constructor(input: CreateStreamingURLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStreamingURLCommandInput, CreateStreamingURLCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUpdatedImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateUpdatedImageRequest, CreateUpdatedImageResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateUpdatedImageCommandInput extends CreateUpdatedImageRequest {
    }
    export interface CreateUpdatedImageCommandOutput extends CreateUpdatedImageResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software.</p>
        *
        *         <p>For more information, see the "Update an Image by Using
        *             Managed AppStream 2.0 Image Updates" section in <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/administer-images.html">Administer Your AppStream 2.0 Images</a>, in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateUpdatedImageCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateUpdatedImageCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateUpdatedImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUpdatedImageCommandInput} for command's `input` shape.
        * @see {@link CreateUpdatedImageCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateUpdatedImageCommand extends $Command<CreateUpdatedImageCommandInput, CreateUpdatedImageCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateUpdatedImageCommandInput;
            constructor(input: CreateUpdatedImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUpdatedImageCommandInput, CreateUpdatedImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUsageReportSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateUsageReportSubscriptionRequest, CreateUsageReportSubscriptionResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateUsageReportSubscriptionCommandInput extends CreateUsageReportSubscriptionRequest {
    }
    export interface CreateUsageReportSubscriptionCommandOutput extends CreateUsageReportSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Creates a usage report subscription. Usage reports are generated daily.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateUsageReportSubscriptionCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateUsageReportSubscriptionCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateUsageReportSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUsageReportSubscriptionCommandInput} for command's `input` shape.
        * @see {@link CreateUsageReportSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateUsageReportSubscriptionCommand extends $Command<CreateUsageReportSubscriptionCommandInput, CreateUsageReportSubscriptionCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateUsageReportSubscriptionCommandInput;
            constructor(input: CreateUsageReportSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUsageReportSubscriptionCommandInput, CreateUsageReportSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/CreateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { CreateUserRequest, CreateUserResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface CreateUserCommandInput extends CreateUserRequest {
    }
    export interface CreateUserCommandOutput extends CreateUserResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new user in the user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, CreateUserCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, CreateUserCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new CreateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserCommandInput} for command's `input` shape.
        * @see {@link CreateUserCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class CreateUserCommand extends $Command<CreateUserCommandInput, CreateUserCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: CreateUserCommandInput;
            constructor(input: CreateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserCommandInput, CreateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteAppBlockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteAppBlockRequest, DeleteAppBlockResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteAppBlockCommandInput extends DeleteAppBlockRequest {
    }
    export interface DeleteAppBlockCommandOutput extends DeleteAppBlockResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an app block.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteAppBlockCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteAppBlockCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteAppBlockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppBlockCommandInput} for command's `input` shape.
        * @see {@link DeleteAppBlockCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteAppBlockCommand extends $Command<DeleteAppBlockCommandInput, DeleteAppBlockCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteAppBlockCommandInput;
            constructor(input: DeleteAppBlockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppBlockCommandInput, DeleteAppBlockCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteApplicationRequest, DeleteApplicationResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteApplicationCommandInput extends DeleteApplicationRequest {
    }
    export interface DeleteApplicationCommandOutput extends DeleteApplicationResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteApplicationCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteApplicationCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApplicationCommandInput} for command's `input` shape.
        * @see {@link DeleteApplicationCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteApplicationCommand extends $Command<DeleteApplicationCommandInput, DeleteApplicationCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteApplicationCommandInput;
            constructor(input: DeleteApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApplicationCommandInput, DeleteApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteDirectoryConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteDirectoryConfigRequest, DeleteDirectoryConfigResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteDirectoryConfigCommandInput extends DeleteDirectoryConfigRequest {
    }
    export interface DeleteDirectoryConfigCommandOutput extends DeleteDirectoryConfigResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteDirectoryConfigCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteDirectoryConfigCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteDirectoryConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDirectoryConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteDirectoryConfigCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteDirectoryConfigCommand extends $Command<DeleteDirectoryConfigCommandInput, DeleteDirectoryConfigCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteDirectoryConfigCommandInput;
            constructor(input: DeleteDirectoryConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDirectoryConfigCommandInput, DeleteDirectoryConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteEntitlementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteEntitlementRequest, DeleteEntitlementResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteEntitlementCommandInput extends DeleteEntitlementRequest {
    }
    export interface DeleteEntitlementCommandOutput extends DeleteEntitlementResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified entitlement.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteEntitlementCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteEntitlementCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteEntitlementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEntitlementCommandInput} for command's `input` shape.
        * @see {@link DeleteEntitlementCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteEntitlementCommand extends $Command<DeleteEntitlementCommandInput, DeleteEntitlementCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteEntitlementCommandInput;
            constructor(input: DeleteEntitlementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEntitlementCommandInput, DeleteEntitlementCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteFleetRequest, DeleteFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteFleetCommandInput extends DeleteFleetRequest {
    }
    export interface DeleteFleetCommandOutput extends DeleteFleetResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFleetCommandInput} for command's `input` shape.
        * @see {@link DeleteFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteFleetCommand extends $Command<DeleteFleetCommandInput, DeleteFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteFleetCommandInput;
            constructor(input: DeleteFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFleetCommandInput, DeleteFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImageBuilderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteImageBuilderRequest, DeleteImageBuilderResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteImageBuilderCommandInput extends DeleteImageBuilderRequest {
    }
    export interface DeleteImageBuilderCommandOutput extends DeleteImageBuilderResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified image builder and releases the capacity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteImageBuilderCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteImageBuilderCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteImageBuilderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteImageBuilderCommandInput} for command's `input` shape.
        * @see {@link DeleteImageBuilderCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteImageBuilderCommand extends $Command<DeleteImageBuilderCommandInput, DeleteImageBuilderCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteImageBuilderCommandInput;
            constructor(input: DeleteImageBuilderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteImageBuilderCommandInput, DeleteImageBuilderCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteImageRequest, DeleteImageResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteImageCommandInput extends DeleteImageRequest {
    }
    export interface DeleteImageCommandOutput extends DeleteImageResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified image. You cannot delete an image when it is in use.
        *             After you delete an image, you cannot provision new capacity using the image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteImageCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteImageCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteImageCommandInput} for command's `input` shape.
        * @see {@link DeleteImageCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteImageCommand extends $Command<DeleteImageCommandInput, DeleteImageCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteImageCommandInput;
            constructor(input: DeleteImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteImageCommandInput, DeleteImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteImagePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteImagePermissionsRequest, DeleteImagePermissionsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteImagePermissionsCommandInput extends DeleteImagePermissionsRequest {
    }
    export interface DeleteImagePermissionsCommandOutput extends DeleteImagePermissionsResult, __MetadataBearer {
    }
    /**
        * <p>Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteImagePermissionsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteImagePermissionsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteImagePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteImagePermissionsCommandInput} for command's `input` shape.
        * @see {@link DeleteImagePermissionsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteImagePermissionsCommand extends $Command<DeleteImagePermissionsCommandInput, DeleteImagePermissionsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteImagePermissionsCommandInput;
            constructor(input: DeleteImagePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteImagePermissionsCommandInput, DeleteImagePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteStackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteStackRequest, DeleteStackResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteStackCommandInput extends DeleteStackRequest {
    }
    export interface DeleteStackCommandOutput extends DeleteStackResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteStackCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteStackCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteStackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStackCommandInput} for command's `input` shape.
        * @see {@link DeleteStackCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteStackCommand extends $Command<DeleteStackCommandInput, DeleteStackCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteStackCommandInput;
            constructor(input: DeleteStackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStackCommandInput, DeleteStackCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteUsageReportSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteUsageReportSubscriptionRequest, DeleteUsageReportSubscriptionResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteUsageReportSubscriptionCommandInput extends DeleteUsageReportSubscriptionRequest {
    }
    export interface DeleteUsageReportSubscriptionCommandOutput extends DeleteUsageReportSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Disables usage report generation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteUsageReportSubscriptionCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteUsageReportSubscriptionCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteUsageReportSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUsageReportSubscriptionCommandInput} for command's `input` shape.
        * @see {@link DeleteUsageReportSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteUsageReportSubscriptionCommand extends $Command<DeleteUsageReportSubscriptionCommandInput, DeleteUsageReportSubscriptionCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteUsageReportSubscriptionCommandInput;
            constructor(input: DeleteUsageReportSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUsageReportSubscriptionCommandInput, DeleteUsageReportSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DeleteUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DeleteUserRequest, DeleteUserResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DeleteUserCommandInput extends DeleteUserRequest {
    }
    export interface DeleteUserCommandOutput extends DeleteUserResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a user from the user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DeleteUserCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DeleteUserCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DeleteUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserCommandInput} for command's `input` shape.
        * @see {@link DeleteUserCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DeleteUserCommand extends $Command<DeleteUserCommandInput, DeleteUserCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DeleteUserCommandInput;
            constructor(input: DeleteUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserCommandInput, DeleteUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeAppBlocksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeAppBlocksRequest, DescribeAppBlocksResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeAppBlocksCommandInput extends DescribeAppBlocksRequest {
    }
    export interface DescribeAppBlocksCommandOutput extends DescribeAppBlocksResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more app blocks.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeAppBlocksCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeAppBlocksCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeAppBlocksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAppBlocksCommandInput} for command's `input` shape.
        * @see {@link DescribeAppBlocksCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeAppBlocksCommand extends $Command<DescribeAppBlocksCommandInput, DescribeAppBlocksCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeAppBlocksCommandInput;
            constructor(input: DescribeAppBlocksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAppBlocksCommandInput, DescribeAppBlocksCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeApplicationFleetAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeApplicationFleetAssociationsRequest, DescribeApplicationFleetAssociationsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeApplicationFleetAssociationsCommandInput extends DescribeApplicationFleetAssociationsRequest {
    }
    export interface DescribeApplicationFleetAssociationsCommandOutput extends DescribeApplicationFleetAssociationsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more application fleet associations. Either ApplicationArn or FleetName must be specified.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeApplicationFleetAssociationsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeApplicationFleetAssociationsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeApplicationFleetAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApplicationFleetAssociationsCommandInput} for command's `input` shape.
        * @see {@link DescribeApplicationFleetAssociationsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeApplicationFleetAssociationsCommand extends $Command<DescribeApplicationFleetAssociationsCommandInput, DescribeApplicationFleetAssociationsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeApplicationFleetAssociationsCommandInput;
            constructor(input: DescribeApplicationFleetAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApplicationFleetAssociationsCommandInput, DescribeApplicationFleetAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeApplicationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeApplicationsRequest, DescribeApplicationsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeApplicationsCommandInput extends DescribeApplicationsRequest {
    }
    export interface DescribeApplicationsCommandOutput extends DescribeApplicationsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more applications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeApplicationsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeApplicationsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeApplicationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApplicationsCommandInput} for command's `input` shape.
        * @see {@link DescribeApplicationsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeApplicationsCommand extends $Command<DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeApplicationsCommandInput;
            constructor(input: DescribeApplicationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeDirectoryConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeDirectoryConfigsRequest, DescribeDirectoryConfigsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeDirectoryConfigsCommandInput extends DescribeDirectoryConfigsRequest {
    }
    export interface DescribeDirectoryConfigsCommandOutput extends DescribeDirectoryConfigsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
        *         </p>
        *         <p>Although the response syntax in this topic includes the account password, this password is not returned in the actual response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeDirectoryConfigsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeDirectoryConfigsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeDirectoryConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDirectoryConfigsCommandInput} for command's `input` shape.
        * @see {@link DescribeDirectoryConfigsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeDirectoryConfigsCommand extends $Command<DescribeDirectoryConfigsCommandInput, DescribeDirectoryConfigsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeDirectoryConfigsCommandInput;
            constructor(input: DescribeDirectoryConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDirectoryConfigsCommandInput, DescribeDirectoryConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeEntitlementsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeEntitlementsRequest, DescribeEntitlementsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeEntitlementsCommandInput extends DescribeEntitlementsRequest {
    }
    export interface DescribeEntitlementsCommandOutput extends DescribeEntitlementsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one of more entitlements.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeEntitlementsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeEntitlementsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeEntitlementsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEntitlementsCommandInput} for command's `input` shape.
        * @see {@link DescribeEntitlementsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeEntitlementsCommand extends $Command<DescribeEntitlementsCommandInput, DescribeEntitlementsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeEntitlementsCommandInput;
            constructor(input: DescribeEntitlementsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEntitlementsCommandInput, DescribeEntitlementsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeFleetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeFleetsRequest, DescribeFleetsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeFleetsCommandInput extends DescribeFleetsRequest {
    }
    export interface DescribeFleetsCommandOutput extends DescribeFleetsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeFleetsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeFleetsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeFleetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFleetsCommandInput} for command's `input` shape.
        * @see {@link DescribeFleetsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeFleetsCommand extends $Command<DescribeFleetsCommandInput, DescribeFleetsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeFleetsCommandInput;
            constructor(input: DescribeFleetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFleetsCommandInput, DescribeFleetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImageBuildersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeImageBuildersRequest, DescribeImageBuildersResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeImageBuildersCommandInput extends DescribeImageBuildersRequest {
    }
    export interface DescribeImageBuildersCommandOutput extends DescribeImageBuildersResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeImageBuildersCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeImageBuildersCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeImageBuildersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeImageBuildersCommandInput} for command's `input` shape.
        * @see {@link DescribeImageBuildersCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeImageBuildersCommand extends $Command<DescribeImageBuildersCommandInput, DescribeImageBuildersCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeImageBuildersCommandInput;
            constructor(input: DescribeImageBuildersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeImageBuildersCommandInput, DescribeImageBuildersCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImagePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeImagePermissionsRequest, DescribeImagePermissionsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeImagePermissionsCommandInput extends DescribeImagePermissionsRequest {
    }
    export interface DescribeImagePermissionsCommandOutput extends DescribeImagePermissionsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeImagePermissionsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeImagePermissionsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeImagePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeImagePermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeImagePermissionsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeImagePermissionsCommand extends $Command<DescribeImagePermissionsCommandInput, DescribeImagePermissionsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeImagePermissionsCommandInput;
            constructor(input: DescribeImagePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeImagePermissionsCommandInput, DescribeImagePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeImagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeImagesRequest, DescribeImagesResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeImagesCommandInput extends DescribeImagesRequest {
    }
    export interface DescribeImagesCommandOutput extends DescribeImagesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeImagesCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeImagesCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeImagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeImagesCommandInput} for command's `input` shape.
        * @see {@link DescribeImagesCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeImagesCommand extends $Command<DescribeImagesCommandInput, DescribeImagesCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeImagesCommandInput;
            constructor(input: DescribeImagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeImagesCommandInput, DescribeImagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeSessionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeSessionsRequest, DescribeSessionsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeSessionsCommandInput extends DescribeSessionsRequest {
    }
    export interface DescribeSessionsCommandOutput extends DescribeSessionsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet,
        *             only streaming sessions for that user are described. If an authentication type is not provided,
        *             the default is to authenticate users using a streaming URL.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeSessionsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeSessionsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeSessionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSessionsCommandInput} for command's `input` shape.
        * @see {@link DescribeSessionsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeSessionsCommand extends $Command<DescribeSessionsCommandInput, DescribeSessionsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeSessionsCommandInput;
            constructor(input: DescribeSessionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSessionsCommandInput, DescribeSessionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeStacksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeStacksRequest, DescribeStacksResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeStacksCommandInput extends DescribeStacksRequest {
    }
    export interface DescribeStacksCommandOutput extends DescribeStacksResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeStacksCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeStacksCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeStacksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeStacksCommandInput} for command's `input` shape.
        * @see {@link DescribeStacksCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeStacksCommand extends $Command<DescribeStacksCommandInput, DescribeStacksCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeStacksCommandInput;
            constructor(input: DescribeStacksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeStacksCommandInput, DescribeStacksCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUsageReportSubscriptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeUsageReportSubscriptionsRequest, DescribeUsageReportSubscriptionsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeUsageReportSubscriptionsCommandInput extends DescribeUsageReportSubscriptionsRequest {
    }
    export interface DescribeUsageReportSubscriptionsCommandOutput extends DescribeUsageReportSubscriptionsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more usage report subscriptions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeUsageReportSubscriptionsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeUsageReportSubscriptionsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeUsageReportSubscriptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUsageReportSubscriptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeUsageReportSubscriptionsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeUsageReportSubscriptionsCommand extends $Command<DescribeUsageReportSubscriptionsCommandInput, DescribeUsageReportSubscriptionsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeUsageReportSubscriptionsCommandInput;
            constructor(input: DescribeUsageReportSubscriptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUsageReportSubscriptionsCommandInput, DescribeUsageReportSubscriptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUsersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeUsersRequest, DescribeUsersResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeUsersCommandInput extends DescribeUsersRequest {
    }
    export interface DescribeUsersCommandOutput extends DescribeUsersResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified users in the user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeUsersCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeUsersCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeUsersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUsersCommandInput} for command's `input` shape.
        * @see {@link DescribeUsersCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeUsersCommand extends $Command<DescribeUsersCommandInput, DescribeUsersCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeUsersCommandInput;
            constructor(input: DescribeUsersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUsersCommandInput, DescribeUsersCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DescribeUserStackAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DescribeUserStackAssociationsRequest, DescribeUserStackAssociationsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DescribeUserStackAssociationsCommandInput extends DescribeUserStackAssociationsRequest {
    }
    export interface DescribeUserStackAssociationsCommandOutput extends DescribeUserStackAssociationsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:</p>
        *         <ul>
        *             <li>
        *                <p>The stack name</p>
        *             </li>
        *             <li>
        *                <p>The user name (email address of the user associated with the stack) and the authentication type for the user</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DescribeUserStackAssociationsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DescribeUserStackAssociationsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DescribeUserStackAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserStackAssociationsCommandInput} for command's `input` shape.
        * @see {@link DescribeUserStackAssociationsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DescribeUserStackAssociationsCommand extends $Command<DescribeUserStackAssociationsCommandInput, DescribeUserStackAssociationsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DescribeUserStackAssociationsCommandInput;
            constructor(input: DescribeUserStackAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserStackAssociationsCommandInput, DescribeUserStackAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisableUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DisableUserRequest, DisableUserResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DisableUserCommandInput extends DisableUserRequest {
    }
    export interface DisableUserCommandOutput extends DisableUserResult, __MetadataBearer {
    }
    /**
        * <p>Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DisableUserCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DisableUserCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DisableUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableUserCommandInput} for command's `input` shape.
        * @see {@link DisableUserCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DisableUserCommand extends $Command<DisableUserCommandInput, DisableUserCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DisableUserCommandInput;
            constructor(input: DisableUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableUserCommandInput, DisableUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateApplicationFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DisassociateApplicationFleetRequest, DisassociateApplicationFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DisassociateApplicationFleetCommandInput extends DisassociateApplicationFleetRequest {
    }
    export interface DisassociateApplicationFleetCommandOutput extends DisassociateApplicationFleetResult, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified application from the fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DisassociateApplicationFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DisassociateApplicationFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DisassociateApplicationFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateApplicationFleetCommandInput} for command's `input` shape.
        * @see {@link DisassociateApplicationFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DisassociateApplicationFleetCommand extends $Command<DisassociateApplicationFleetCommandInput, DisassociateApplicationFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DisassociateApplicationFleetCommandInput;
            constructor(input: DisassociateApplicationFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateApplicationFleetCommandInput, DisassociateApplicationFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateApplicationFromEntitlementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DisassociateApplicationFromEntitlementRequest, DisassociateApplicationFromEntitlementResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DisassociateApplicationFromEntitlementCommandInput extends DisassociateApplicationFromEntitlementRequest {
    }
    export interface DisassociateApplicationFromEntitlementCommandOutput extends DisassociateApplicationFromEntitlementResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified application from the specified entitlement.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DisassociateApplicationFromEntitlementCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DisassociateApplicationFromEntitlementCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DisassociateApplicationFromEntitlementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateApplicationFromEntitlementCommandInput} for command's `input` shape.
        * @see {@link DisassociateApplicationFromEntitlementCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DisassociateApplicationFromEntitlementCommand extends $Command<DisassociateApplicationFromEntitlementCommandInput, DisassociateApplicationFromEntitlementCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DisassociateApplicationFromEntitlementCommandInput;
            constructor(input: DisassociateApplicationFromEntitlementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateApplicationFromEntitlementCommandInput, DisassociateApplicationFromEntitlementCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/DisassociateFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { DisassociateFleetRequest, DisassociateFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface DisassociateFleetCommandInput extends DisassociateFleetRequest {
    }
    export interface DisassociateFleetCommandOutput extends DisassociateFleetResult, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified fleet from the specified stack.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, DisassociateFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, DisassociateFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new DisassociateFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateFleetCommandInput} for command's `input` shape.
        * @see {@link DisassociateFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class DisassociateFleetCommand extends $Command<DisassociateFleetCommandInput, DisassociateFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: DisassociateFleetCommandInput;
            constructor(input: DisassociateFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateFleetCommandInput, DisassociateFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/EnableUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { EnableUserRequest, EnableUserResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface EnableUserCommandInput extends EnableUserRequest {
    }
    export interface EnableUserCommandOutput extends EnableUserResult, __MetadataBearer {
    }
    /**
        * <p>Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, EnableUserCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, EnableUserCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new EnableUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableUserCommandInput} for command's `input` shape.
        * @see {@link EnableUserCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class EnableUserCommand extends $Command<EnableUserCommandInput, EnableUserCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: EnableUserCommandInput;
            constructor(input: EnableUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableUserCommandInput, EnableUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ExpireSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { ExpireSessionRequest, ExpireSessionResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface ExpireSessionCommandInput extends ExpireSessionRequest {
    }
    export interface ExpireSessionCommandOutput extends ExpireSessionResult, __MetadataBearer {
    }
    /**
        * <p>Immediately stops the specified streaming session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, ExpireSessionCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, ExpireSessionCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new ExpireSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExpireSessionCommandInput} for command's `input` shape.
        * @see {@link ExpireSessionCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class ExpireSessionCommand extends $Command<ExpireSessionCommandInput, ExpireSessionCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: ExpireSessionCommandInput;
            constructor(input: ExpireSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExpireSessionCommandInput, ExpireSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListAssociatedFleetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { ListAssociatedFleetsRequest, ListAssociatedFleetsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface ListAssociatedFleetsCommandInput extends ListAssociatedFleetsRequest {
    }
    export interface ListAssociatedFleetsCommandOutput extends ListAssociatedFleetsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the name of the fleet that is associated with the specified stack.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, ListAssociatedFleetsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, ListAssociatedFleetsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new ListAssociatedFleetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssociatedFleetsCommandInput} for command's `input` shape.
        * @see {@link ListAssociatedFleetsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class ListAssociatedFleetsCommand extends $Command<ListAssociatedFleetsCommandInput, ListAssociatedFleetsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: ListAssociatedFleetsCommandInput;
            constructor(input: ListAssociatedFleetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssociatedFleetsCommandInput, ListAssociatedFleetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListAssociatedStacksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { ListAssociatedStacksRequest, ListAssociatedStacksResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface ListAssociatedStacksCommandInput extends ListAssociatedStacksRequest {
    }
    export interface ListAssociatedStacksCommandOutput extends ListAssociatedStacksResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the name of the stack with which the specified fleet is associated.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, ListAssociatedStacksCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, ListAssociatedStacksCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new ListAssociatedStacksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssociatedStacksCommandInput} for command's `input` shape.
        * @see {@link ListAssociatedStacksCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class ListAssociatedStacksCommand extends $Command<ListAssociatedStacksCommandInput, ListAssociatedStacksCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: ListAssociatedStacksCommandInput;
            constructor(input: ListAssociatedStacksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssociatedStacksCommandInput, ListAssociatedStacksCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListEntitledApplicationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { ListEntitledApplicationsRequest, ListEntitledApplicationsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface ListEntitledApplicationsCommandInput extends ListEntitledApplicationsRequest {
    }
    export interface ListEntitledApplicationsCommandOutput extends ListEntitledApplicationsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of entitled applications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, ListEntitledApplicationsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, ListEntitledApplicationsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new ListEntitledApplicationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntitledApplicationsCommandInput} for command's `input` shape.
        * @see {@link ListEntitledApplicationsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class ListEntitledApplicationsCommand extends $Command<ListEntitledApplicationsCommandInput, ListEntitledApplicationsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: ListEntitledApplicationsCommandInput;
            constructor(input: ListEntitledApplicationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntitledApplicationsCommandInput, ListEntitledApplicationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p>
        *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, ListTagsForResourceCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, ListTagsForResourceCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StartFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { StartFleetRequest, StartFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface StartFleetCommandInput extends StartFleetRequest {
    }
    export interface StartFleetCommandOutput extends StartFleetResult, __MetadataBearer {
    }
    /**
        * <p>Starts the specified fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, StartFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, StartFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new StartFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartFleetCommandInput} for command's `input` shape.
        * @see {@link StartFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class StartFleetCommand extends $Command<StartFleetCommandInput, StartFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: StartFleetCommandInput;
            constructor(input: StartFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartFleetCommandInput, StartFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StartImageBuilderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { StartImageBuilderRequest, StartImageBuilderResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface StartImageBuilderCommandInput extends StartImageBuilderRequest {
    }
    export interface StartImageBuilderCommandOutput extends StartImageBuilderResult, __MetadataBearer {
    }
    /**
        * <p>Starts the specified image builder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, StartImageBuilderCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, StartImageBuilderCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new StartImageBuilderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartImageBuilderCommandInput} for command's `input` shape.
        * @see {@link StartImageBuilderCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class StartImageBuilderCommand extends $Command<StartImageBuilderCommandInput, StartImageBuilderCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: StartImageBuilderCommandInput;
            constructor(input: StartImageBuilderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartImageBuilderCommandInput, StartImageBuilderCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StopFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { StopFleetRequest, StopFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface StopFleetCommandInput extends StopFleetRequest {
    }
    export interface StopFleetCommandOutput extends StopFleetResult, __MetadataBearer {
    }
    /**
        * <p>Stops the specified fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, StopFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, StopFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new StopFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopFleetCommandInput} for command's `input` shape.
        * @see {@link StopFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class StopFleetCommand extends $Command<StopFleetCommandInput, StopFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: StopFleetCommandInput;
            constructor(input: StopFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopFleetCommandInput, StopFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/StopImageBuilderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { StopImageBuilderRequest, StopImageBuilderResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface StopImageBuilderCommandInput extends StopImageBuilderRequest {
    }
    export interface StopImageBuilderCommandOutput extends StopImageBuilderResult, __MetadataBearer {
    }
    /**
        * <p>Stops the specified image builder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, StopImageBuilderCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, StopImageBuilderCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new StopImageBuilderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopImageBuilderCommandInput} for command's `input` shape.
        * @see {@link StopImageBuilderCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class StopImageBuilderCommand extends $Command<StopImageBuilderCommandInput, StopImageBuilderCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: StopImageBuilderCommandInput;
            constructor(input: StopImageBuilderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopImageBuilderCommandInput, StopImageBuilderCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p>
        *             <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key,
        *                 this operation updates its value.</p>
        *
        *             <p>To list the current tags for your resources, use <a>ListTagsForResource</a>.
        *                 To disassociate tags from your resources, use <a>UntagResource</a>.</p>
        *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, TagResourceCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, TagResourceCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates one or more specified tags from the specified AppStream 2.0 resource.</p>
        *         <p>To list the current tags for your resources, use <a>ListTagsForResource</a>.</p>
        *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, UntagResourceCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, UntagResourceCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { UpdateApplicationRequest, UpdateApplicationResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface UpdateApplicationCommandInput extends UpdateApplicationRequest {
    }
    export interface UpdateApplicationCommandOutput extends UpdateApplicationResult, __MetadataBearer {
    }
    /**
        * <p>Updates the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, UpdateApplicationCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, UpdateApplicationCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new UpdateApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApplicationCommandInput} for command's `input` shape.
        * @see {@link UpdateApplicationCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class UpdateApplicationCommand extends $Command<UpdateApplicationCommandInput, UpdateApplicationCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: UpdateApplicationCommandInput;
            constructor(input: UpdateApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApplicationCommandInput, UpdateApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateDirectoryConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { UpdateDirectoryConfigRequest, UpdateDirectoryConfigResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface UpdateDirectoryConfigCommandInput extends UpdateDirectoryConfigRequest {
    }
    export interface UpdateDirectoryConfigCommandOutput extends UpdateDirectoryConfigResult, __MetadataBearer {
    }
    /**
        * <p>Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, UpdateDirectoryConfigCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, UpdateDirectoryConfigCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new UpdateDirectoryConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDirectoryConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateDirectoryConfigCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class UpdateDirectoryConfigCommand extends $Command<UpdateDirectoryConfigCommandInput, UpdateDirectoryConfigCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: UpdateDirectoryConfigCommandInput;
            constructor(input: UpdateDirectoryConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDirectoryConfigCommandInput, UpdateDirectoryConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateEntitlementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { UpdateEntitlementRequest, UpdateEntitlementResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface UpdateEntitlementCommandInput extends UpdateEntitlementRequest {
    }
    export interface UpdateEntitlementCommandOutput extends UpdateEntitlementResult, __MetadataBearer {
    }
    /**
        * <p>Updates the specified entitlement.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, UpdateEntitlementCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, UpdateEntitlementCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new UpdateEntitlementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEntitlementCommandInput} for command's `input` shape.
        * @see {@link UpdateEntitlementCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class UpdateEntitlementCommand extends $Command<UpdateEntitlementCommandInput, UpdateEntitlementCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: UpdateEntitlementCommandInput;
            constructor(input: UpdateEntitlementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEntitlementCommandInput, UpdateEntitlementCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { UpdateFleetRequest, UpdateFleetResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface UpdateFleetCommandInput extends UpdateFleetRequest {
    }
    export interface UpdateFleetCommandOutput extends UpdateFleetResult, __MetadataBearer {
    }
    /**
        * <p>Updates the specified fleet.</p>
        *         <p>If the fleet is in the <code>STOPPED</code> state, you can update any attribute except
        *             the fleet name.</p>
        *         <p>If the fleet is in the <code>RUNNING</code> state, you can update the following based
        *             on the fleet type:</p>
        *         <ul>
        *             <li>
        *                <p>Always-On and On-Demand fleet types</p>
        *                 <p>You can update the  <code>DisplayName</code>, <code>ComputeCapacity</code>,
        *                         <code>ImageARN</code>, <code>ImageName</code>,
        *                         <code>IdleDisconnectTimeoutInSeconds</code>, and
        *                         <code>DisconnectTimeoutInSeconds</code> attributes.</p>
        *             </li>
        *             <li>
        *                <p>Elastic fleet type</p>
        *                 <p>You can update the  <code>DisplayName</code>,
        *                         <code>IdleDisconnectTimeoutInSeconds</code>,
        *                     <code>DisconnectTimeoutInSeconds</code>, <code>MaxConcurrentSessions</code>, <code>SessionScriptS3Location</code>
        *                     and <code>UsbDeviceFilterStrings</code> attributes.</p>
        *             </li>
        *          </ul>
        *         <p>If the fleet is in the <code>STARTING</code> or <code>STOPPED</code> state, you can't update it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, UpdateFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, UpdateFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new UpdateFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFleetCommandInput} for command's `input` shape.
        * @see {@link UpdateFleetCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class UpdateFleetCommand extends $Command<UpdateFleetCommandInput, UpdateFleetCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: UpdateFleetCommandInput;
            constructor(input: UpdateFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFleetCommandInput, UpdateFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateImagePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { UpdateImagePermissionsRequest, UpdateImagePermissionsResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface UpdateImagePermissionsCommandInput extends UpdateImagePermissionsRequest {
    }
    export interface UpdateImagePermissionsCommandOutput extends UpdateImagePermissionsResult, __MetadataBearer {
    }
    /**
        * <p>Adds or updates permissions for the specified private image. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, UpdateImagePermissionsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, UpdateImagePermissionsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new UpdateImagePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateImagePermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdateImagePermissionsCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class UpdateImagePermissionsCommand extends $Command<UpdateImagePermissionsCommandInput, UpdateImagePermissionsCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: UpdateImagePermissionsCommandInput;
            constructor(input: UpdateImagePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateImagePermissionsCommandInput, UpdateImagePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/commands/UpdateStackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/AppStreamClient";
    import { UpdateStackRequest, UpdateStackResult } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0";
    export interface UpdateStackCommandInput extends UpdateStackRequest {
    }
    export interface UpdateStackCommandOutput extends UpdateStackResult, __MetadataBearer {
    }
    /**
        * <p>Updates the specified fields for the specified stack.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppStreamClient, UpdateStackCommand } from "@aws-sdk/client-appstream"; // ES Modules import
        * // const { AppStreamClient, UpdateStackCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
        * const client = new AppStreamClient(config);
        * const command = new UpdateStackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStackCommandInput} for command's `input` shape.
        * @see {@link UpdateStackCommandOutput} for command's `response` shape.
        * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
        *
        */
    export class UpdateStackCommand extends $Command<UpdateStackCommandInput, UpdateStackCommandOutput, AppStreamClientResolvedConfig> {
            readonly input: UpdateStackCommandInput;
            constructor(input: UpdateStackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStackCommandInput, UpdateStackCommandOutput>;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AppStreamServiceException as __BaseException } from "@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/AppStreamServiceException";
    export enum AccessEndpointType {
            STREAMING = "STREAMING"
    }
    /**
        * <p>Describes an interface VPC endpoint (interface endpoint) that lets you create a private connection between the virtual private cloud (VPC) that you specify and AppStream 2.0. When you specify an interface endpoint for a stack, users of the stack can connect to AppStream 2.0 only through that endpoint. When you specify an interface endpoint for an image builder, administrators can connect to the image builder only through that endpoint.</p>
        */
    export interface AccessEndpoint {
            /**
                * <p>The type of interface endpoint.</p>
                */
            EndpointType: AccessEndpointType | string | undefined;
            /**
                * <p>The identifier (ID) of the VPC in which the interface endpoint is used.</p>
                */
            VpceId?: string;
    }
    export namespace AccessEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessEndpoint) => any;
    }
    export enum Action {
            CLIPBOARD_COPY_FROM_LOCAL_DEVICE = "CLIPBOARD_COPY_FROM_LOCAL_DEVICE",
            CLIPBOARD_COPY_TO_LOCAL_DEVICE = "CLIPBOARD_COPY_TO_LOCAL_DEVICE",
            DOMAIN_PASSWORD_SIGNIN = "DOMAIN_PASSWORD_SIGNIN",
            DOMAIN_SMART_CARD_SIGNIN = "DOMAIN_SMART_CARD_SIGNIN",
            FILE_DOWNLOAD = "FILE_DOWNLOAD",
            FILE_UPLOAD = "FILE_UPLOAD",
            PRINTING_TO_LOCAL_DEVICE = "PRINTING_TO_LOCAL_DEVICE"
    }
    /**
        * <p>Describes the S3 location.</p>
        */
    export interface S3Location {
            /**
                * <p>The S3 bucket of the S3 object.</p>
                */
            S3Bucket: string | undefined;
            /**
                * <p>The S3 key of the S3 object.</p>
                */
            S3Key: string | undefined;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    /**
        * <p>Describes the details of the script.</p>
        */
    export interface ScriptDetails {
            /**
                * <p>The S3 object location for the script.</p>
                */
            ScriptS3Location: S3Location | undefined;
            /**
                * <p>The run path for the script.</p>
                */
            ExecutablePath: string | undefined;
            /**
                * <p>The runtime parameters passed to the run path for the script.</p>
                */
            ExecutableParameters?: string;
            /**
                * <p>The run timeout, in seconds, for the script.</p>
                */
            TimeoutInSeconds: number | undefined;
    }
    export namespace ScriptDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScriptDetails) => any;
    }
    /**
        * <p>Describes an app block.</p>
        *          <p>App blocks are an Amazon AppStream 2.0 resource that stores the details about the
        *            virtual hard disk in an S3 bucket. It also stores the setup script with details about
        *            how to mount the virtual hard disk. The virtual hard disk includes the application
        *            binaries and other files necessary to launch your applications. Multiple applications
        *            can be assigned to a single app block.</p>
        *          <p>This is only supported for Elastic fleets.</p>
        */
    export interface AppBlock {
            /**
                * <p>The name of the app block.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ARN of the app block.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The description of the app block.</p>
                */
            Description?: string;
            /**
                * <p>The display name of the app block.</p>
                */
            DisplayName?: string;
            /**
                * <p>The source S3 location of the app block.</p>
                */
            SourceS3Location?: S3Location;
            /**
                * <p>The setup script details of the app block.</p>
                */
            SetupScriptDetails: ScriptDetails | undefined;
            /**
                * <p>The created time of the app block.</p>
                */
            CreatedTime?: Date;
    }
    export namespace AppBlock {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppBlock) => any;
    }
    export type PlatformType = "AMAZON_LINUX2" | "WINDOWS" | "WINDOWS_SERVER_2016" | "WINDOWS_SERVER_2019";
    /**
        * <p>Describes an application in the application catalog.</p>
        */
    export interface Application {
            /**
                * <p>The name of the application.</p>
                */
            Name?: string;
            /**
                * <p>The application name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The URL for the application icon. This URL might be time-limited.</p>
                */
            IconURL?: string;
            /**
                * <p>The path to the application executable in the instance.</p>
                */
            LaunchPath?: string;
            /**
                * <p>The arguments that are passed to the application at launch.</p>
                */
            LaunchParameters?: string;
            /**
                * <p>If there is a problem, the application can be disabled after image creation.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Additional attributes that describe the application.</p>
                */
            Metadata?: Record<string, string>;
            /**
                * <p>The working directory for the application.</p>
                */
            WorkingDirectory?: string;
            /**
                * <p>The description of the application.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the application.</p>
                */
            Arn?: string;
            /**
                * <p>The app block ARN of the application.</p>
                */
            AppBlockArn?: string;
            /**
                * <p>The S3 location of the application icon.</p>
                */
            IconS3Location?: S3Location;
            /**
                * <p>The platforms on which the application can run.</p>
                */
            Platforms?: (PlatformType | string)[];
            /**
                * <p>The instance families for the application.</p>
                */
            InstanceFamilies?: string[];
            /**
                * <p>The time at which the application was created within the app block.</p>
                */
            CreatedTime?: Date;
    }
    export namespace Application {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Application) => any;
    }
    export enum ApplicationAttribute {
            LAUNCH_PARAMETERS = "LAUNCH_PARAMETERS",
            WORKING_DIRECTORY = "WORKING_DIRECTORY"
    }
    /**
        * <p>Describes the application fleet association.</p>
        */
    export interface ApplicationFleetAssociation {
            /**
                * <p>The name of the fleet associated with the application.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The ARN of the application associated with the fleet.</p>
                */
            ApplicationArn: string | undefined;
    }
    export namespace ApplicationFleetAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationFleetAssociation) => any;
    }
    /**
        * <p>The persistent application settings for users of a stack.</p>
        */
    export interface ApplicationSettings {
            /**
                * <p>Enables or disables persistent application settings for users during their streaming sessions. </p>
                */
            Enabled: boolean | undefined;
            /**
                * <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple stacks by specifying the same settings group for each stack. </p>
                */
            SettingsGroup?: string;
    }
    export namespace ApplicationSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationSettings) => any;
    }
    /**
        * <p>Describes the persistent application settings for users of a stack.</p>
        */
    export interface ApplicationSettingsResponse {
            /**
                * <p>Specifies whether persistent application settings are enabled for users during their streaming sessions.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The path prefix for the S3 bucket where users’ persistent application settings are stored.</p>
                */
            SettingsGroup?: string;
            /**
                * <p>The S3 bucket where users’ persistent application settings are stored. When persistent application settings are enabled for the first time for an account in an AWS Region, an S3 bucket is created. The bucket is unique to the AWS account and the Region.
                *         </p>
                */
            S3BucketName?: string;
    }
    export namespace ApplicationSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationSettingsResponse) => any;
    }
    export enum AppVisibility {
            ALL = "ALL",
            ASSOCIATED = "ASSOCIATED"
    }
    export interface AssociateApplicationFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The ARN of the application.</p>
                */
            ApplicationArn: string | undefined;
    }
    export namespace AssociateApplicationFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateApplicationFleetRequest) => any;
    }
    export interface AssociateApplicationFleetResult {
            /**
                * <p>If fleet name is specified, this returns the list of applications that are associated
                *             to it. If application ARN is specified, this returns the list of fleets to which it is
                *             associated.</p>
                */
            ApplicationFleetAssociation?: ApplicationFleetAssociation;
    }
    export namespace AssociateApplicationFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateApplicationFleetResult) => any;
    }
    /**
        * <p>An API error occurred. Wait a few minutes and try again.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>Indicates an incorrect combination of parameters, or a missing parameter.</p>
        */
    export class InvalidParameterCombinationException extends __BaseException {
            readonly name: "InvalidParameterCombinationException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterCombinationException, __BaseException>);
    }
    /**
        * <p>The requested limit exceeds the permitted limit for an account.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The attempted operation is not permitted.</p>
        */
    export class OperationNotPermittedException extends __BaseException {
            readonly name: "OperationNotPermittedException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationNotPermittedException, __BaseException>);
    }
    /**
        * <p>The specified resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface AssociateApplicationToEntitlementRequest {
            /**
                * <p>The name of the stack.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The name of the entitlement.</p>
                */
            EntitlementName: string | undefined;
            /**
                * <p>The identifier of the application.</p>
                */
            ApplicationIdentifier: string | undefined;
    }
    export namespace AssociateApplicationToEntitlementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateApplicationToEntitlementRequest) => any;
    }
    export interface AssociateApplicationToEntitlementResult {
    }
    export namespace AssociateApplicationToEntitlementResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateApplicationToEntitlementResult) => any;
    }
    /**
        * <p>The entitlement can't be found.</p>
        */
    export class EntitlementNotFoundException extends __BaseException {
            readonly name: "EntitlementNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntitlementNotFoundException, __BaseException>);
    }
    export interface AssociateFleetRequest {
            /**
                * <p>The name of the fleet. </p>
                */
            FleetName: string | undefined;
            /**
                * <p>The name of the stack.</p>
                */
            StackName: string | undefined;
    }
    export namespace AssociateFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateFleetRequest) => any;
    }
    export interface AssociateFleetResult {
    }
    export namespace AssociateFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateFleetResult) => any;
    }
    /**
        * <p>The image can't be updated because it's not compatible for updates.</p>
        */
    export class IncompatibleImageException extends __BaseException {
            readonly name: "IncompatibleImageException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IncompatibleImageException, __BaseException>);
    }
    /**
        * <p>The resource cannot be created because your AWS account is suspended. For assistance, contact AWS Support. </p>
        */
    export class InvalidAccountStatusException extends __BaseException {
            readonly name: "InvalidAccountStatusException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAccountStatusException, __BaseException>);
    }
    export enum AuthenticationType {
            API = "API",
            SAML = "SAML",
            USERPOOL = "USERPOOL"
    }
    /**
        * <p>Describes a user in the user pool and the associated stack.</p>
        */
    export interface UserStackAssociation {
            /**
                * <p>The name of the stack that is associated with the user.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The email address of the user who is associated with the stack.</p>
                *
                *         <note>
                *             <p>Users' email addresses are case-sensitive.</p>
                *          </note>
                */
            UserName: string | undefined;
            /**
                * <p>The authentication type for the user.</p>
                */
            AuthenticationType: AuthenticationType | string | undefined;
            /**
                * <p>Specifies whether a welcome email is sent to a user after the user is created in the user pool.</p>
                */
            SendEmailNotification?: boolean;
    }
    export namespace UserStackAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserStackAssociation) => any;
    }
    export interface BatchAssociateUserStackRequest {
            /**
                * <p>The list of UserStackAssociation objects.</p>
                */
            UserStackAssociations: UserStackAssociation[] | undefined;
    }
    export namespace BatchAssociateUserStackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateUserStackRequest) => any;
    }
    export enum UserStackAssociationErrorCode {
            DIRECTORY_NOT_FOUND = "DIRECTORY_NOT_FOUND",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            STACK_NOT_FOUND = "STACK_NOT_FOUND",
            USER_NAME_NOT_FOUND = "USER_NAME_NOT_FOUND"
    }
    /**
        * <p>Describes the error that is returned when a user can’t be associated with or disassociated from a stack. </p>
        */
    export interface UserStackAssociationError {
            /**
                * <p>Information about the user and associated stack.</p>
                */
            UserStackAssociation?: UserStackAssociation;
            /**
                * <p>The error code for the error that is returned when a user can’t be associated with or disassociated from a stack.</p>
                */
            ErrorCode?: UserStackAssociationErrorCode | string;
            /**
                * <p>The error message for the error that is returned when a user can’t be associated with or disassociated from a stack.</p>
                */
            ErrorMessage?: string;
    }
    export namespace UserStackAssociationError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserStackAssociationError) => any;
    }
    export interface BatchAssociateUserStackResult {
            /**
                * <p>The list of UserStackAssociationError objects.</p>
                */
            errors?: UserStackAssociationError[];
    }
    export namespace BatchAssociateUserStackResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateUserStackResult) => any;
    }
    export interface BatchDisassociateUserStackRequest {
            /**
                * <p>The list of UserStackAssociation objects.</p>
                */
            UserStackAssociations: UserStackAssociation[] | undefined;
    }
    export namespace BatchDisassociateUserStackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateUserStackRequest) => any;
    }
    export interface BatchDisassociateUserStackResult {
            /**
                * <p>The list of UserStackAssociationError objects.</p>
                */
            errors?: UserStackAssociationError[];
    }
    export namespace BatchDisassociateUserStackResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateUserStackResult) => any;
    }
    /**
        * <p>Describes the capacity for a fleet.</p>
        */
    export interface ComputeCapacity {
            /**
                * <p>The desired number of streaming instances.</p>
                */
            DesiredInstances: number | undefined;
    }
    export namespace ComputeCapacity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComputeCapacity) => any;
    }
    /**
        * <p>Describes the capacity status for a fleet.</p>
        */
    export interface ComputeCapacityStatus {
            /**
                * <p>The desired number of streaming instances.</p>
                */
            Desired: number | undefined;
            /**
                * <p>The total number of simultaneous streaming instances that are running.</p>
                */
            Running?: number;
            /**
                * <p>The number of instances in use for streaming.</p>
                */
            InUse?: number;
            /**
                * <p>The number of currently available instances that can be used to stream
                *             sessions.</p>
                */
            Available?: number;
    }
    export namespace ComputeCapacityStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComputeCapacityStatus) => any;
    }
    export interface CopyImageRequest {
            /**
                * <p>The name of the image to copy.</p>
                */
            SourceImageName: string | undefined;
            /**
                * <p>The name that the image will have when it is copied to the destination.</p>
                */
            DestinationImageName: string | undefined;
            /**
                * <p>The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region.</p>
                */
            DestinationRegion: string | undefined;
            /**
                * <p>The description that the image will have when it is copied to the destination.</p>
                */
            DestinationImageDescription?: string;
    }
    export namespace CopyImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyImageRequest) => any;
    }
    export interface CopyImageResponse {
            /**
                * <p>The name of the destination image.</p>
                */
            DestinationImageName?: string;
    }
    export namespace CopyImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyImageResponse) => any;
    }
    /**
        * <p>The specified resource already exists.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The specified resource exists and is not in use, but isn't available.</p>
        */
    export class ResourceNotAvailableException extends __BaseException {
            readonly name: "ResourceNotAvailableException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotAvailableException, __BaseException>);
    }
    export interface CreateAppBlockRequest {
            /**
                * <p>The name of the app block.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the app block.</p>
                */
            Description?: string;
            /**
                * <p>The display name of the app block. This is not displayed to the user.</p>
                */
            DisplayName?: string;
            /**
                * <p>The source S3 location of the app block.</p>
                */
            SourceS3Location: S3Location | undefined;
            /**
                * <p>The setup script details of the app block.</p>
                */
            SetupScriptDetails: ScriptDetails | undefined;
            /**
                * <p>The tags assigned to the app block.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateAppBlockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppBlockRequest) => any;
    }
    export interface CreateAppBlockResult {
            /**
                * <p>The app block.</p>
                */
            AppBlock?: AppBlock;
    }
    export namespace CreateAppBlockResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppBlockResult) => any;
    }
    export interface CreateApplicationRequest {
            /**
                * <p>The name of the application. This name is visible to users when display name is not specified.</p>
                */
            Name: string | undefined;
            /**
                * <p>The display name of the application. This name is visible to users in the application catalog.</p>
                */
            DisplayName?: string;
            /**
                * <p>The description of the application.</p>
                */
            Description?: string;
            /**
                * <p>The location in S3 of the application icon.</p>
                */
            IconS3Location: S3Location | undefined;
            /**
                * <p>The launch path of the application.</p>
                */
            LaunchPath: string | undefined;
            /**
                * <p>The working directory of the application.</p>
                */
            WorkingDirectory?: string;
            /**
                * <p>The launch parameters of the application.</p>
                */
            LaunchParameters?: string;
            /**
                * <p>The platforms the application supports. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
                */
            Platforms: (PlatformType | string)[] | undefined;
            /**
                * <p>The instance families the application supports. Valid values are GENERAL_PURPOSE and GRAPHICS_G4.</p>
                */
            InstanceFamilies: string[] | undefined;
            /**
                * <p>The app block ARN to which the application should be associated</p>
                */
            AppBlockArn: string | undefined;
            /**
                * <p>The tags assigned to the application.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApplicationRequest) => any;
    }
    export interface CreateApplicationResult {
            /**
                * <p>Describes an application in the application catalog.</p>
                */
            Application?: Application;
    }
    export namespace CreateApplicationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApplicationResult) => any;
    }
    /**
        * <p>Describes the credentials for the service account used by the fleet or image builder to connect to the directory.</p>
        */
    export interface ServiceAccountCredentials {
            /**
                * <p>The user name of the account. This account must have the following privileges: create computer objects,
                *             join computers to the domain, and change/reset the password on descendant computer objects for the
                *             organizational units specified.</p>
                */
            AccountName: string | undefined;
            /**
                * <p>The password for the account.</p>
                */
            AccountPassword: string | undefined;
    }
    export namespace ServiceAccountCredentials {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceAccountCredentials) => any;
    }
    export interface CreateDirectoryConfigRequest {
            /**
                * <p>The fully qualified name of the directory (for example, corp.example.com).</p>
                */
            DirectoryName: string | undefined;
            /**
                * <p>The distinguished names of the organizational units for computer accounts.</p>
                */
            OrganizationalUnitDistinguishedNames: string[] | undefined;
            /**
                * <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
                */
            ServiceAccountCredentials?: ServiceAccountCredentials;
    }
    export namespace CreateDirectoryConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDirectoryConfigRequest) => any;
    }
    /**
        * <p>Describes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.</p>
        */
    export interface DirectoryConfig {
            /**
                * <p>The fully qualified name of the directory (for example, corp.example.com).</p>
                */
            DirectoryName: string | undefined;
            /**
                * <p>The distinguished names of the organizational units for computer accounts.</p>
                */
            OrganizationalUnitDistinguishedNames?: string[];
            /**
                * <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
                */
            ServiceAccountCredentials?: ServiceAccountCredentials;
            /**
                * <p>The time the directory configuration was created.</p>
                */
            CreatedTime?: Date;
    }
    export namespace DirectoryConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DirectoryConfig) => any;
    }
    export interface CreateDirectoryConfigResult {
            /**
                * <p>Information about the directory configuration.</p>
                */
            DirectoryConfig?: DirectoryConfig;
    }
    export namespace CreateDirectoryConfigResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDirectoryConfigResult) => any;
    }
    /**
        * <p>The specified role is invalid.</p>
        */
    export class InvalidRoleException extends __BaseException {
            readonly name: "InvalidRoleException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRoleException, __BaseException>);
    }
    /**
        * <p>An attribute associated with an entitlement. Application entitlements work by matching
        *             a supported SAML 2.0 attribute name to a value when a user identity federates to an
        *             Amazon AppStream 2.0 SAML application.</p>
        */
    export interface EntitlementAttribute {
            /**
                * <p>A supported AWS IAM SAML <code>PrincipalTag</code> attribute that is matched to the
                *             associated value when a user identity federates into an Amazon AppStream 2.0 SAML
                *             application.</p>
                *         <p>The following are valid values:</p>
                *         <ul>
                *             <li>
                *                <p>roles</p>
                *             </li>
                *             <li>
                *                <p>department </p>
                *             </li>
                *             <li>
                *                <p>organization </p>
                *             </li>
                *             <li>
                *                <p>groups </p>
                *             </li>
                *             <li>
                *                <p>title </p>
                *             </li>
                *             <li>
                *                <p>costCenter </p>
                *             </li>
                *             <li>
                *                <p>userType</p>
                *             </li>
                *          </ul>
                *         <p> </p>
                */
            Name: string | undefined;
            /**
                * <p>A value that is matched to a supported SAML attribute name when a user identity
                *             federates into an Amazon AppStream 2.0 SAML application. </p>
                */
            Value: string | undefined;
    }
    export namespace EntitlementAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntitlementAttribute) => any;
    }
    export interface CreateEntitlementRequest {
            /**
                * <p>The name of the entitlement.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the stack with which the entitlement is associated.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The description of the entitlement.</p>
                */
            Description?: string;
            /**
                * <p>Specifies whether all or selected apps are entitled.</p>
                */
            AppVisibility: AppVisibility | string | undefined;
            /**
                * <p>The attributes of the entitlement.</p>
                */
            Attributes: EntitlementAttribute[] | undefined;
    }
    export namespace CreateEntitlementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEntitlementRequest) => any;
    }
    /**
        * <p>Specifies an entitlement. Entitlements control access to specific applications within
        *             a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user
        *             identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all
        *             applications in a stack. Entitlements don't apply to the desktop stream view
        *             application, or to applications managed by a dynamic app provider using the Dynamic
        *             Application Framework.</p>
        */
    export interface Entitlement {
            /**
                * <p>The name of the entitlement.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the stack with which the entitlement is associated.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The description of the entitlement.</p>
                */
            Description?: string;
            /**
                * <p>Specifies whether all or selected apps are entitled.</p>
                */
            AppVisibility: AppVisibility | string | undefined;
            /**
                * <p>The attributes of the entitlement.</p>
                */
            Attributes: EntitlementAttribute[] | undefined;
            /**
                * <p>The time when the entitlement was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The time when the entitlement was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace Entitlement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Entitlement) => any;
    }
    export interface CreateEntitlementResult {
            /**
                * <p>The entitlement.</p>
                */
            Entitlement?: Entitlement;
    }
    export namespace CreateEntitlementResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEntitlementResult) => any;
    }
    /**
        * <p>The entitlement already exists.</p>
        */
    export class EntitlementAlreadyExistsException extends __BaseException {
            readonly name: "EntitlementAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntitlementAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Describes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.</p>
        */
    export interface DomainJoinInfo {
            /**
                * <p>The fully qualified name of the directory (for example, corp.example.com).</p>
                */
            DirectoryName?: string;
            /**
                * <p>The distinguished name of the organizational unit for computer accounts.</p>
                */
            OrganizationalUnitDistinguishedName?: string;
    }
    export namespace DomainJoinInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainJoinInfo) => any;
    }
    export enum FleetType {
            ALWAYS_ON = "ALWAYS_ON",
            ELASTIC = "ELASTIC",
            ON_DEMAND = "ON_DEMAND"
    }
    export enum StreamView {
            APP = "APP",
            DESKTOP = "DESKTOP"
    }
    /**
        * <p>Describes VPC configuration information for fleets and image builders.</p>
        */
    export interface VpcConfig {
            /**
                * <p>The identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance. Fleet instances use one or more subnets. Image builder instances use one subnet.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The identifiers of the security groups for the fleet or image builder.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace VpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfig) => any;
    }
    export interface CreateFleetRequest {
            /**
                * <p>A unique name for the fleet.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the image used to create the fleet.</p>
                */
            ImageName?: string;
            /**
                * <p>The ARN of the public, private, or shared image to use.</p>
                */
            ImageArn?: string;
            /**
                * <p>The instance type to use when launching fleet instances. The following instance types are available:</p>
                *         <ul>
                *             <li>
                *                <p>stream.standard.small</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.medium</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.3xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.6xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.large</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-desktop.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.16xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.16xlarge</p>
                *             </li>
                *          </ul>
                *         <p>The following instance types are available for Elastic fleets:</p>
                *         <ul>
                *             <li>
                *                <p>stream.standard.small</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.medium</p>
                *             </li>
                *          </ul>
                */
            InstanceType: string | undefined;
            /**
                * <p>The fleet type.</p>
                *         <dl>
                *             <dt>ALWAYS_ON</dt>
                *             <dd>
                *                     <p>Provides users with instant-on access to their apps.
                *                         You are charged for all running instances in your fleet, even if no users are streaming apps.</p>
                *                 </dd>
                *             <dt>ON_DEMAND</dt>
                *             <dd>
                *                     <p>Provide users with access to applications after they connect, which takes one to two minutes.
                *                         You are charged for instance streaming when users are connected and a
                *                         small hourly fee for instances that are not streaming apps.</p>
                *                 </dd>
                *          </dl>
                */
            FleetType?: FleetType | string;
            /**
                * <p>The desired capacity for the fleet. This is not allowed for Elastic fleets. For Elastic fleets, specify MaxConcurrentSessions instead.</p>
                */
            ComputeCapacity?: ComputeCapacity;
            /**
                * <p>The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance.</p>
                *         <p>Specify a value between 600 and 360000.</p>
                */
            MaxUserDurationInSeconds?: number;
            /**
                * <p>The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance. </p>
                *         <p>Specify a value between 60 and 360000.</p>
                */
            DisconnectTimeoutInSeconds?: number;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The fleet name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>Enables or disables default internet access for the fleet.</p>
                */
            EnableDefaultInternetAccess?: boolean;
            /**
                * <p>The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. This is not allowed for Elastic fleets. </p>
                */
            DomainJoinInfo?: DomainJoinInfo;
            /**
                * <p>The tags to associate with the fleet. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
                *
                *         <p>If you do not specify a value, the value is set to an empty string.</p>
                *
                *         <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
                *         <p>_ . : / = + \ - @</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The amount of time that users can be idle (inactive) before they are disconnected
                *             from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time
                *             interval begins. Users are notified before they are disconnected due to inactivity. If
                *             they try to reconnect to the streaming session before the time interval specified in
                *             <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their
                *             previous session. Users are considered idle when they stop providing keyboard or mouse
                *             input during their streaming session. File uploads and downloads, audio in, audio out,
                *             and pixels changing do not qualify as user activity. If users continue to be idle after
                *             the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are
                *             disconnected.</p>
                *         <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p>
                *         <note>
                *             <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity. </p>
                *          </note>
                */
            IdleDisconnectTimeoutInSeconds?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            IamRoleArn?: string;
            /**
                * <p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p>
                *
                *         <p>The default value is <code>APP</code>.</p>
                */
            StreamView?: StreamView | string;
            /**
                * <p>The fleet platform. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic
                *             fleets. </p>
                */
            Platform?: PlatformType | string;
            /**
                * <p>The maximum concurrent sessions of the Elastic fleet. This is required for Elastic
                *             fleets, and not allowed for other fleet types.</p>
                */
            MaxConcurrentSessions?: number;
            /**
                * <p>The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets.</p>
                */
            UsbDeviceFilterStrings?: string[];
            /**
                * <p>The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.</p>
                */
            SessionScriptS3Location?: S3Location;
    }
    export namespace CreateFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFleetRequest) => any;
    }
    export enum FleetErrorCode {
            DOMAIN_JOIN_ERROR_ACCESS_DENIED = "DOMAIN_JOIN_ERROR_ACCESS_DENIED",
            DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
            DOMAIN_JOIN_ERROR_FILE_NOT_FOUND = "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND",
            DOMAIN_JOIN_ERROR_INVALID_PARAMETER = "DOMAIN_JOIN_ERROR_INVALID_PARAMETER",
            DOMAIN_JOIN_ERROR_LOGON_FAILURE = "DOMAIN_JOIN_ERROR_LOGON_FAILURE",
            DOMAIN_JOIN_ERROR_MORE_DATA = "DOMAIN_JOIN_ERROR_MORE_DATA",
            DOMAIN_JOIN_ERROR_NOT_SUPPORTED = "DOMAIN_JOIN_ERROR_NOT_SUPPORTED",
            DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN = "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN",
            DOMAIN_JOIN_INTERNAL_SERVICE_ERROR = "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR",
            DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME = "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME",
            DOMAIN_JOIN_NERR_PASSWORD_EXPIRED = "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED",
            DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED = "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED",
            FLEET_INSTANCE_PROVISIONING_FAILURE = "FLEET_INSTANCE_PROVISIONING_FAILURE",
            FLEET_STOPPED = "FLEET_STOPPED",
            IAM_SERVICE_ROLE_IS_MISSING = "IAM_SERVICE_ROLE_IS_MISSING",
            IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION = "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION",
            IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION = "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION",
            IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION = "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION",
            IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION = "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION",
            IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION = "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION",
            IGW_NOT_ATTACHED = "IGW_NOT_ATTACHED",
            IMAGE_NOT_FOUND = "IMAGE_NOT_FOUND",
            INTERNAL_SERVICE_ERROR = "INTERNAL_SERVICE_ERROR",
            INVALID_SUBNET_CONFIGURATION = "INVALID_SUBNET_CONFIGURATION",
            MACHINE_ROLE_IS_MISSING = "MACHINE_ROLE_IS_MISSING",
            NETWORK_INTERFACE_LIMIT_EXCEEDED = "NETWORK_INTERFACE_LIMIT_EXCEEDED",
            SECURITY_GROUPS_NOT_FOUND = "SECURITY_GROUPS_NOT_FOUND",
            STS_DISABLED_IN_REGION = "STS_DISABLED_IN_REGION",
            SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES = "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES",
            SUBNET_NOT_FOUND = "SUBNET_NOT_FOUND"
    }
    /**
        * <p>Describes a fleet error.</p>
        */
    export interface FleetError {
            /**
                * <p>The error code.</p>
                */
            ErrorCode?: FleetErrorCode | string;
            /**
                * <p>The error message.</p>
                */
            ErrorMessage?: string;
    }
    export namespace FleetError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FleetError) => any;
    }
    export enum FleetState {
            RUNNING = "RUNNING",
            STARTING = "STARTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING"
    }
    /**
        * <p>Describes a fleet.</p>
        */
    export interface Fleet {
            /**
                * <p>The Amazon Resource Name (ARN) for the fleet.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The name of the fleet.</p>
                */
            Name: string | undefined;
            /**
                * <p>The fleet name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The name of the image used to create the fleet.</p>
                */
            ImageName?: string;
            /**
                * <p>The ARN for the public, private, or shared image.</p>
                */
            ImageArn?: string;
            /**
                * <p>The instance type to use when launching fleet instances. The following instance types are available:</p>
                *         <ul>
                *             <li>
                *                <p>stream.standard.small</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.medium</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.3xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.6xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.large</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-desktop.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.16xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.16xlarge</p>
                *             </li>
                *          </ul>
                */
            InstanceType: string | undefined;
            /**
                * <p>The fleet type.</p>
                *         <dl>
                *             <dt>ALWAYS_ON</dt>
                *             <dd>
                *                     <p>Provides users with instant-on access to their apps.
                *                         You are charged for all running instances in your fleet, even if no users are streaming apps.</p>
                *                 </dd>
                *             <dt>ON_DEMAND</dt>
                *             <dd>
                *                     <p>Provide users with access to applications after they connect, which takes one to two minutes.
                *                         You are charged for instance streaming when users are connected and a
                *                         small hourly fee for instances that are not streaming apps.</p>
                *                 </dd>
                *          </dl>
                */
            FleetType?: FleetType | string;
            /**
                * <p>The capacity status for the fleet.</p>
                */
            ComputeCapacityStatus: ComputeCapacityStatus | undefined;
            /**
                * <p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance. </p>
                *         <p>Specify a value between 600 and 360000.</p>
                */
            MaxUserDurationInSeconds?: number;
            /**
                * <p>The amount of time that a streaming session remains active after users disconnect. If they try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance.</p>
                *         <p>Specify a value between 60 and 360000.</p>
                */
            DisconnectTimeoutInSeconds?: number;
            /**
                * <p>The current state for the fleet.</p>
                */
            State: FleetState | string | undefined;
            /**
                * <p>The VPC configuration for the fleet.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>The time the fleet was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The fleet errors.</p>
                */
            FleetErrors?: FleetError[];
            /**
                * <p>Indicates whether default internet access is enabled for the fleet.</p>
                */
            EnableDefaultInternetAccess?: boolean;
            /**
                * <p>The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. </p>
                */
            DomainJoinInfo?: DomainJoinInfo;
            /**
                * <p>The amount of time that users can be idle (inactive) before they are disconnected
                *             from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time
                *             interval begins. Users are notified before they are disconnected due to inactivity. If
                *             users try to reconnect to the streaming session before the time interval specified in
                *             <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their
                *             previous session. Users are considered idle when they stop providing keyboard or mouse
                *             input during their streaming session. File uploads and downloads, audio in, audio out,
                *             and pixels changing do not qualify as user activity. If users continue to be idle after
                *             the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are
                *             disconnected.</p>
                *         <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p>
                *
                *         <note>
                *             <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity. </p>
                *          </note>
                */
            IdleDisconnectTimeoutInSeconds?: number;
            /**
                * <p>The ARN of the IAM role that is applied to the fleet. To assume a role, the fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            IamRoleArn?: string;
            /**
                * <p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p>
                *
                *         <p>The default value is <code>APP</code>.</p>
                */
            StreamView?: StreamView | string;
            /**
                * <p>The platform of the fleet.</p>
                */
            Platform?: PlatformType | string;
            /**
                * <p>The maximum number of concurrent sessions for the fleet.</p>
                */
            MaxConcurrentSessions?: number;
            /**
                * <p>The USB device filter strings associated with the fleet.</p>
                */
            UsbDeviceFilterStrings?: string[];
            /**
                * <p>The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.</p>
                */
            SessionScriptS3Location?: S3Location;
    }
    export namespace Fleet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Fleet) => any;
    }
    export interface CreateFleetResult {
            /**
                * <p>Information about the fleet.</p>
                */
            Fleet?: Fleet;
    }
    export namespace CreateFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFleetResult) => any;
    }
    /**
        * <p>AppStream 2.0 can’t process the request right now because the Describe calls from your AWS account are being throttled by Amazon EC2. Try again later.</p>
        */
    export class RequestLimitExceededException extends __BaseException {
            readonly name: "RequestLimitExceededException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RequestLimitExceededException, __BaseException>);
    }
    export interface CreateImageBuilderRequest {
            /**
                * <p>A unique name for the image builder.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the image used to create the image builder.</p>
                */
            ImageName?: string;
            /**
                * <p>The ARN of the public, private, or shared image to use.</p>
                */
            ImageArn?: string;
            /**
                * <p>The instance type to use when launching the image builder. The following instance types are available:</p>
                *         <ul>
                *             <li>
                *                <p>stream.standard.small</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.medium</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.3xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.6xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.large</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-desktop.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.16xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.16xlarge</p>
                *             </li>
                *          </ul>
                */
            InstanceType: string | undefined;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The image builder name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The VPC configuration for the image builder. You can specify only one subnet.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to apply to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            IamRoleArn?: string;
            /**
                * <p>Enables or disables default internet access for the image builder.</p>
                */
            EnableDefaultInternetAccess?: boolean;
            /**
                * <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
                */
            DomainJoinInfo?: DomainJoinInfo;
            /**
                * <p>The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST]. </p>
                */
            AppstreamAgentVersion?: string;
            /**
                * <p>The tags to associate with the image builder. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
                *
                *         <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
                *         <p>_ . : / = + \ - @</p>
                *
                *         <p>If you do not specify a value, the value is set to an empty string.</p>
                *
                *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the image builder only through the specified endpoints.</p>
                */
            AccessEndpoints?: AccessEndpoint[];
    }
    export namespace CreateImageBuilderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageBuilderRequest) => any;
    }
    /**
        * <p>Describes a resource error.</p>
        */
    export interface ResourceError {
            /**
                * <p>The error code.</p>
                */
            ErrorCode?: FleetErrorCode | string;
            /**
                * <p>The error message.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The time the error occurred.</p>
                */
            ErrorTimestamp?: Date;
    }
    export namespace ResourceError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceError) => any;
    }
    /**
        * <p>Describes the network details of the fleet or image builder instance.</p>
        */
    export interface NetworkAccessConfiguration {
            /**
                * <p>The private IP address of the elastic network interface that is attached to instances in your VPC.</p>
                */
            EniPrivateIpAddress?: string;
            /**
                * <p>The resource identifier of the elastic network interface that is attached to instances in your VPC. All network interfaces have the eni-xxxxxxxx resource identifier.</p>
                */
            EniId?: string;
    }
    export namespace NetworkAccessConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkAccessConfiguration) => any;
    }
    export enum ImageBuilderState {
            DELETING = "DELETING",
            FAILED = "FAILED",
            PENDING = "PENDING",
            PENDING_QUALIFICATION = "PENDING_QUALIFICATION",
            REBOOTING = "REBOOTING",
            RUNNING = "RUNNING",
            SNAPSHOTTING = "SNAPSHOTTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING",
            UPDATING = "UPDATING",
            UPDATING_AGENT = "UPDATING_AGENT"
    }
    export enum ImageBuilderStateChangeReasonCode {
            IMAGE_UNAVAILABLE = "IMAGE_UNAVAILABLE",
            INTERNAL_ERROR = "INTERNAL_ERROR"
    }
    /**
        * <p>Describes the reason why the last image builder state change occurred.</p>
        */
    export interface ImageBuilderStateChangeReason {
            /**
                * <p>The state change reason code.</p>
                */
            Code?: ImageBuilderStateChangeReasonCode | string;
            /**
                * <p>The state change reason message.</p>
                */
            Message?: string;
    }
    export namespace ImageBuilderStateChangeReason {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageBuilderStateChangeReason) => any;
    }
    /**
        * <p>Describes a virtual machine that is used to create an image. </p>
        */
    export interface ImageBuilder {
            /**
                * <p>The name of the image builder.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ARN for the image builder.</p>
                */
            Arn?: string;
            /**
                * <p>The ARN of the image from which this builder was created.</p>
                */
            ImageArn?: string;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The image builder name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The VPC configuration of the image builder.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>The instance type for the image builder. The following instance types are available:</p>
                *             <ul>
                *             <li>
                *                <p>stream.standard.small</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.medium</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.3xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.6xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.large</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-desktop.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.16xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.16xlarge</p>
                *             </li>
                *          </ul>
                */
            InstanceType?: string;
            /**
                * <p>The operating system platform of the image builder.</p>
                */
            Platform?: PlatformType | string;
            /**
                * <p>The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            IamRoleArn?: string;
            /**
                * <p>The state of the image builder.</p>
                */
            State?: ImageBuilderState | string;
            /**
                * <p>The reason why the last state change occurred.</p>
                */
            StateChangeReason?: ImageBuilderStateChangeReason;
            /**
                * <p>The time stamp when the image builder was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>Enables or disables default internet access for the image builder.</p>
                */
            EnableDefaultInternetAccess?: boolean;
            /**
                * <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
                */
            DomainJoinInfo?: DomainJoinInfo;
            /**
                * <p>Describes the network details of the fleet or image builder instance.</p>
                */
            NetworkAccessConfiguration?: NetworkAccessConfiguration;
            /**
                * <p>The image builder errors.</p>
                */
            ImageBuilderErrors?: ResourceError[];
            /**
                * <p>The version of the AppStream 2.0 agent that is currently being used by the image builder. </p>
                */
            AppstreamAgentVersion?: string;
            /**
                * <p>The list of virtual private cloud (VPC) interface endpoint objects. Administrators can connect to the image builder only through the specified endpoints.</p>
                */
            AccessEndpoints?: AccessEndpoint[];
    }
    export namespace ImageBuilder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageBuilder) => any;
    }
    export interface CreateImageBuilderResult {
            /**
                * <p>Information about the image builder.</p>
                */
            ImageBuilder?: ImageBuilder;
    }
    export namespace CreateImageBuilderResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageBuilderResult) => any;
    }
    export interface CreateImageBuilderStreamingURLRequest {
            /**
                * <p>The name of the image builder.</p>
                */
            Name: string | undefined;
            /**
                * <p>The time that the streaming URL will be valid, in seconds.
                *             Specify a value between 1 and 604800 seconds. The default is 3600 seconds.</p>
                */
            Validity?: number;
    }
    export namespace CreateImageBuilderStreamingURLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageBuilderStreamingURLRequest) => any;
    }
    export interface CreateImageBuilderStreamingURLResult {
            /**
                * <p>The URL to start the AppStream 2.0 streaming session.</p>
                */
            StreamingURL?: string;
            /**
                * <p>The elapsed time, in seconds after the Unix epoch, when this URL expires.</p>
                */
            Expires?: Date;
    }
    export namespace CreateImageBuilderStreamingURLResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageBuilderStreamingURLResult) => any;
    }
    export enum StorageConnectorType {
            GOOGLE_DRIVE = "GOOGLE_DRIVE",
            HOMEFOLDERS = "HOMEFOLDERS",
            ONE_DRIVE = "ONE_DRIVE"
    }
    /**
        * <p>Describes a connector that enables persistent storage for users.</p>
        */
    export interface StorageConnector {
            /**
                * <p>The type of storage connector.</p>
                */
            ConnectorType: StorageConnectorType | string | undefined;
            /**
                * <p>The ARN of the storage connector.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>The names of the domains for the account.</p>
                */
            Domains?: string[];
    }
    export namespace StorageConnector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageConnector) => any;
    }
    export enum PreferredProtocol {
            TCP = "TCP",
            UDP = "UDP"
    }
    /**
        * <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
        */
    export interface StreamingExperienceSettings {
            /**
                * <p>The preferred protocol that you want to use while streaming your application.</p>
                */
            PreferredProtocol?: PreferredProtocol | string;
    }
    export namespace StreamingExperienceSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamingExperienceSettings) => any;
    }
    export enum Permission {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Describes an action and whether the action is enabled or disabled for users during their streaming sessions.</p>
        */
    export interface UserSetting {
            /**
                * <p>The action that is enabled or disabled.</p>
                */
            Action: Action | string | undefined;
            /**
                * <p>Indicates whether the action is enabled or disabled.</p>
                */
            Permission: Permission | string | undefined;
    }
    export namespace UserSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserSetting) => any;
    }
    export interface CreateStackRequest {
            /**
                * <p>The name of the stack.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The stack name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The storage connectors to enable.</p>
                */
            StorageConnectors?: StorageConnector[];
            /**
                * <p>The URL that users are redirected to after their streaming session ends.</p>
                */
            RedirectURL?: string;
            /**
                * <p>The URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
                */
            FeedbackURL?: string;
            /**
                * <p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled. </p>
                */
            UserSettings?: UserSetting[];
            /**
                * <p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p>
                */
            ApplicationSettings?: ApplicationSettings;
            /**
                * <p>The tags to associate with the stack. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
                *
                *         <p>If you do not specify a value, the value is set to an empty string.</p>
                *
                *         <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
                *         <p>_ . : / = + \ - @</p>
                *
                *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p>
                */
            AccessEndpoints?: AccessEndpoint[];
            /**
                * <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p>
                */
            EmbedHostDomains?: string[];
            /**
                * <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
                */
            StreamingExperienceSettings?: StreamingExperienceSettings;
    }
    export namespace CreateStackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStackRequest) => any;
    }
    export enum StackErrorCode {
            INTERNAL_SERVICE_ERROR = "INTERNAL_SERVICE_ERROR",
            STORAGE_CONNECTOR_ERROR = "STORAGE_CONNECTOR_ERROR"
    }
    /**
        * <p>Describes a stack error.</p>
        */
    export interface StackError {
            /**
                * <p>The error code.</p>
                */
            ErrorCode?: StackErrorCode | string;
            /**
                * <p>The error message.</p>
                */
            ErrorMessage?: string;
    }
    export namespace StackError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StackError) => any;
    }
    /**
        * <p>Describes a stack.</p>
        */
    export interface Stack {
            /**
                * <p>The ARN of the stack.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the stack.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The stack name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The time the stack was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The storage connectors to enable.</p>
                */
            StorageConnectors?: StorageConnector[];
            /**
                * <p>The URL that users are redirected to after their streaming session ends.</p>
                */
            RedirectURL?: string;
            /**
                * <p>The URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
                */
            FeedbackURL?: string;
            /**
                * <p>The errors for the stack.</p>
                */
            StackErrors?: StackError[];
            /**
                * <p>The actions that are enabled or disabled for users during their streaming sessions. By default these actions are enabled.</p>
                */
            UserSettings?: UserSetting[];
            /**
                * <p>The persistent application settings for users of the stack.</p>
                */
            ApplicationSettings?: ApplicationSettingsResponse;
            /**
                * <p>The list of virtual private cloud (VPC) interface endpoint objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints. </p>
                */
            AccessEndpoints?: AccessEndpoint[];
            /**
                * <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.</p>
                */
            EmbedHostDomains?: string[];
            /**
                * <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
                */
            StreamingExperienceSettings?: StreamingExperienceSettings;
    }
    export namespace Stack {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Stack) => any;
    }
    export interface CreateStackResult {
            /**
                * <p>Information about the stack.</p>
                */
            Stack?: Stack;
    }
    export namespace CreateStackResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStackResult) => any;
    }
    export interface CreateStreamingURLRequest {
            /**
                * <p>The name of the stack.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The name of the fleet.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The identifier of the user.</p>
                */
            UserId: string | undefined;
            /**
                * <p>The name of the application to launch after the session starts. This is the name that you specified
                *             as <b>Name</b> in the Image Assistant. If your fleet is enabled for the <b>Desktop</b> stream view, you can also choose to launch directly to the operating system desktop. To do so, specify <b>Desktop</b>.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The time that the streaming URL will be valid, in seconds.
                *             Specify a value between 1 and 604800 seconds. The default is 60 seconds.</p>
                */
            Validity?: number;
            /**
                * <p>The session context. For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/managing-stacks-fleets.html#managing-stacks-fleets-parameters">Session Context</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            SessionContext?: string;
    }
    export namespace CreateStreamingURLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingURLRequest) => any;
    }
    export interface CreateStreamingURLResult {
            /**
                * <p>The URL to start the AppStream 2.0 streaming session.</p>
                */
            StreamingURL?: string;
            /**
                * <p>The elapsed time, in seconds after the Unix epoch, when this URL expires.</p>
                */
            Expires?: Date;
    }
    export namespace CreateStreamingURLResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingURLResult) => any;
    }
    export interface CreateUpdatedImageRequest {
            /**
                * <p>The name of the image to update.</p>
                */
            existingImageName: string | undefined;
            /**
                * <p>The name of the new image. The name must be unique within the AWS account and Region.</p>
                */
            newImageName: string | undefined;
            /**
                * <p>The description to display for the new image.</p>
                */
            newImageDescription?: string;
            /**
                * <p>The name to display for the new image.</p>
                */
            newImageDisplayName?: string;
            /**
                * <p>The tags to associate with the new image. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
                *         <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
                *         <p>_ . : / = + \ - @</p>
                *         <p>If you do not specify a value, the value is set to an empty string.</p>
                *         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            newImageTags?: Record<string, string>;
            /**
                * <p>Indicates whether to display the status of image update availability before AppStream 2.0 initiates the process of creating a new updated image. If this value is set to <code>true</code>, AppStream 2.0 displays whether image updates are available. If this value is set to <code>false</code>, AppStream 2.0 initiates the process of creating a new updated image without displaying whether image updates are available.</p>
                */
            dryRun?: boolean;
    }
    export namespace CreateUpdatedImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUpdatedImageRequest) => any;
    }
    /**
        * <p>Describes the permissions for an image. </p>
        */
    export interface ImagePermissions {
            /**
                * <p>Indicates whether the image can be used for a fleet.</p>
                */
            allowFleet?: boolean;
            /**
                * <p>Indicates whether the image can be used for an image builder.</p>
                */
            allowImageBuilder?: boolean;
    }
    export namespace ImagePermissions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImagePermissions) => any;
    }
    export enum ImageState {
            AVAILABLE = "AVAILABLE",
            COPYING = "COPYING",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            IMPORTING = "IMPORTING",
            PENDING = "PENDING"
    }
    export enum ImageStateChangeReasonCode {
            IMAGE_BUILDER_NOT_AVAILABLE = "IMAGE_BUILDER_NOT_AVAILABLE",
            IMAGE_COPY_FAILURE = "IMAGE_COPY_FAILURE",
            INTERNAL_ERROR = "INTERNAL_ERROR"
    }
    /**
        * <p>Describes the reason why the last image state change occurred.</p>
        */
    export interface ImageStateChangeReason {
            /**
                * <p>The state change reason code.</p>
                */
            Code?: ImageStateChangeReasonCode | string;
            /**
                * <p>The state change reason message.</p>
                */
            Message?: string;
    }
    export namespace ImageStateChangeReason {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageStateChangeReason) => any;
    }
    export enum VisibilityType {
            PRIVATE = "PRIVATE",
            PUBLIC = "PUBLIC",
            SHARED = "SHARED"
    }
    /**
        * <p>Describes an image.</p>
        */
    export interface Image {
            /**
                * <p>The name of the image.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ARN of the image.</p>
                */
            Arn?: string;
            /**
                * <p>The ARN of the image from which this image was created.</p>
                */
            BaseImageArn?: string;
            /**
                * <p>The image name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The image starts in the <code>PENDING</code> state. If image creation succeeds, the
                *             state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.</p>
                */
            State?: ImageState | string;
            /**
                * <p>Indicates whether the image is public or private.</p>
                */
            Visibility?: VisibilityType | string;
            /**
                * <p>Indicates whether an image builder can be launched from this image.</p>
                */
            ImageBuilderSupported?: boolean;
            /**
                * <p>The name of the image builder that was used to create the private image. If the image is shared, this value is null.</p>
                */
            ImageBuilderName?: string;
            /**
                * <p>The operating system platform of the image.</p>
                */
            Platform?: PlatformType | string;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The reason why the last state change occurred.</p>
                */
            StateChangeReason?: ImageStateChangeReason;
            /**
                * <p>The applications associated with the image.</p>
                */
            Applications?: Application[];
            /**
                * <p>The time the image was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The release date of the public base image.
                *             For private images, this date is the release date of the base image from which the image was created.</p>
                */
            PublicBaseImageReleasedDate?: Date;
            /**
                * <p>The version of the AppStream 2.0 agent to use for instances that are launched from this image. </p>
                */
            AppstreamAgentVersion?: string;
            /**
                * <p>The permissions to provide to the destination AWS account for the specified image.</p>
                */
            ImagePermissions?: ImagePermissions;
            /**
                * <p>Describes the errors that are returned when a new image can't be created.</p>
                */
            ImageErrors?: ResourceError[];
    }
    export namespace Image {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Image) => any;
    }
    export interface CreateUpdatedImageResult {
            /**
                * <p>Describes an image.</p>
                */
            image?: Image;
            /**
                * <p>Indicates whether a new image can be created.</p>
                */
            canUpdateImage?: boolean;
    }
    export namespace CreateUpdatedImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUpdatedImageResult) => any;
    }
    export interface CreateUsageReportSubscriptionRequest {
    }
    export namespace CreateUsageReportSubscriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUsageReportSubscriptionRequest) => any;
    }
    export enum UsageReportSchedule {
            DAILY = "DAILY"
    }
    export interface CreateUsageReportSubscriptionResult {
            /**
                * <p>The Amazon S3 bucket where generated reports are stored.</p>
                *
                *             <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script
                *             configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is
                *             unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0
                *             uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts,
                *             when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>
                */
            S3BucketName?: string;
            /**
                * <p>The schedule for generating usage reports.</p>
                */
            Schedule?: UsageReportSchedule | string;
    }
    export namespace CreateUsageReportSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUsageReportSubscriptionResult) => any;
    }
    export enum MessageAction {
            RESEND = "RESEND",
            SUPPRESS = "SUPPRESS"
    }
    export interface CreateUserRequest {
            /**
                * <p>The email address of the user.</p>
                *
                *         <note>
                *             <p>Users' email addresses are case-sensitive. During login, if they specify an email address that doesn't use the same capitalization as the email address specified when their user pool account was created, a "user does not exist" error message displays.</p>
                *          </note>
                */
            UserName: string | undefined;
            /**
                * <p>The action to take for the welcome email that is sent to a user after the user is created in the user pool. If you specify SUPPRESS, no email is sent. If you specify RESEND, do not specify the first name or last name of the user. If the value is null, the email is sent. </p>
                *
                *         <note>
                *             <p>The temporary password in the welcome email is valid for only 7 days. If users don’t set their passwords within 7 days, you must send them a new welcome email.</p>
                *          </note>
                */
            MessageAction?: MessageAction | string;
            /**
                * <p>The first name, or given name, of the user.</p>
                */
            FirstName?: string;
            /**
                * <p>The last name, or surname, of the user.</p>
                */
            LastName?: string;
            /**
                * <p>The authentication type for the user. You must specify USERPOOL. </p>
                */
            AuthenticationType: AuthenticationType | string | undefined;
    }
    export namespace CreateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserRequest) => any;
    }
    export interface CreateUserResult {
    }
    export namespace CreateUserResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserResult) => any;
    }
    export interface DeleteAppBlockRequest {
            /**
                * <p>The name of the app block.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteAppBlockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppBlockRequest) => any;
    }
    export interface DeleteAppBlockResult {
    }
    export namespace DeleteAppBlockResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppBlockResult) => any;
    }
    /**
        * <p>The specified resource is in use.</p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            /**
                * <p>The error message in the exception.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    export interface DeleteApplicationRequest {
            /**
                * <p>The name of the application.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApplicationRequest) => any;
    }
    export interface DeleteApplicationResult {
    }
    export namespace DeleteApplicationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApplicationResult) => any;
    }
    export interface DeleteDirectoryConfigRequest {
            /**
                * <p>The name of the directory configuration.</p>
                */
            DirectoryName: string | undefined;
    }
    export namespace DeleteDirectoryConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDirectoryConfigRequest) => any;
    }
    export interface DeleteDirectoryConfigResult {
    }
    export namespace DeleteDirectoryConfigResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDirectoryConfigResult) => any;
    }
    export interface DeleteEntitlementRequest {
            /**
                * <p>The name of the entitlement.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the stack with which the entitlement is associated.</p>
                */
            StackName: string | undefined;
    }
    export namespace DeleteEntitlementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntitlementRequest) => any;
    }
    export interface DeleteEntitlementResult {
    }
    export namespace DeleteEntitlementResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntitlementResult) => any;
    }
    export interface DeleteFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFleetRequest) => any;
    }
    export interface DeleteFleetResult {
    }
    export namespace DeleteFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFleetResult) => any;
    }
    export interface DeleteImageRequest {
            /**
                * <p>The name of the image.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageRequest) => any;
    }
    export interface DeleteImageResult {
            /**
                * <p>Information about the image.</p>
                */
            Image?: Image;
    }
    export namespace DeleteImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageResult) => any;
    }
    export interface DeleteImageBuilderRequest {
            /**
                * <p>The name of the image builder.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteImageBuilderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageBuilderRequest) => any;
    }
    export interface DeleteImageBuilderResult {
            /**
                * <p>Information about the image builder.</p>
                */
            ImageBuilder?: ImageBuilder;
    }
    export namespace DeleteImageBuilderResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageBuilderResult) => any;
    }
    export interface DeleteImagePermissionsRequest {
            /**
                * <p>The name of the private image.</p>
                */
            Name: string | undefined;
            /**
                * <p>The 12-digit identifier of the AWS account for which to delete image permissions.</p>
                */
            SharedAccountId: string | undefined;
    }
    export namespace DeleteImagePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImagePermissionsRequest) => any;
    }
    export interface DeleteImagePermissionsResult {
    }
    export namespace DeleteImagePermissionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImagePermissionsResult) => any;
    }
    export interface DeleteStackRequest {
            /**
                * <p>The name of the stack.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteStackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStackRequest) => any;
    }
    export interface DeleteStackResult {
    }
    export namespace DeleteStackResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStackResult) => any;
    }
    export interface DeleteUsageReportSubscriptionRequest {
    }
    export namespace DeleteUsageReportSubscriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUsageReportSubscriptionRequest) => any;
    }
    export interface DeleteUsageReportSubscriptionResult {
    }
    export namespace DeleteUsageReportSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUsageReportSubscriptionResult) => any;
    }
    export interface DeleteUserRequest {
            /**
                * <p>The email address of the user.</p>
                *
                *         <note>
                *             <p>Users' email addresses are case-sensitive.</p>
                *          </note>
                */
            UserName: string | undefined;
            /**
                * <p>The authentication type for the user. You must specify USERPOOL.</p>
                */
            AuthenticationType: AuthenticationType | string | undefined;
    }
    export namespace DeleteUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserRequest) => any;
    }
    export interface DeleteUserResult {
    }
    export namespace DeleteUserResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserResult) => any;
    }
    export interface DescribeAppBlocksRequest {
            /**
                * <p>The ARNs of the app blocks.</p>
                */
            Arns?: string[];
            /**
                * <p>The pagination token used to retrieve the next page of results for this
                *             operation.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeAppBlocksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAppBlocksRequest) => any;
    }
    export interface DescribeAppBlocksResult {
            /**
                * <p>The app blocks in the list.</p>
                */
            AppBlocks?: AppBlock[];
            /**
                * <p>The pagination token used to retrieve the next page of results for this
                *             operation.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAppBlocksResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAppBlocksResult) => any;
    }
    export interface DescribeApplicationFleetAssociationsRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            FleetName?: string;
            /**
                * <p>The ARN of the application.</p>
                */
            ApplicationArn?: string;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token used to retrieve the next page of results for this
                *             operation.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeApplicationFleetAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationFleetAssociationsRequest) => any;
    }
    export interface DescribeApplicationFleetAssociationsResult {
            /**
                * <p>The application fleet associations in the list.</p>
                */
            ApplicationFleetAssociations?: ApplicationFleetAssociation[];
            /**
                * <p>The pagination token used to retrieve the next page of results for this
                *             operation.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeApplicationFleetAssociationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationFleetAssociationsResult) => any;
    }
    export interface DescribeApplicationsRequest {
            /**
                * <p>The ARNs for the applications.</p>
                */
            Arns?: string[];
            /**
                * <p>The pagination token used to retrieve the next page of results for this
                *             operation.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeApplicationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationsRequest) => any;
    }
    export interface DescribeApplicationsResult {
            /**
                * <p>The applications in the list.</p>
                */
            Applications?: Application[];
            /**
                * <p>The pagination token used to retrieve the next page of results for this
                *             operation.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeApplicationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationsResult) => any;
    }
    export interface DescribeDirectoryConfigsRequest {
            /**
                * <p>The directory names.</p>
                */
            DirectoryNames?: string[];
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeDirectoryConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDirectoryConfigsRequest) => any;
    }
    export interface DescribeDirectoryConfigsResult {
            /**
                * <p>Information about the directory configurations. Note that although the response syntax in this topic includes the account password, this password is not returned in the actual response. </p>
                */
            DirectoryConfigs?: DirectoryConfig[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeDirectoryConfigsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDirectoryConfigsResult) => any;
    }
    export interface DescribeEntitlementsRequest {
            /**
                * <p>The name of the entitlement.</p>
                */
            Name?: string;
            /**
                * <p>The name of the stack with which the entitlement is associated.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The pagination token used to retrieve the next page of results for this operation.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeEntitlementsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntitlementsRequest) => any;
    }
    export interface DescribeEntitlementsResult {
            /**
                * <p>The entitlements.</p>
                */
            Entitlements?: Entitlement[];
            /**
                * <p>The pagination token used to retrieve the next page of results for this
                *             operation.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEntitlementsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntitlementsResult) => any;
    }
    export interface DescribeFleetsRequest {
            /**
                * <p>The names of the fleets to describe.</p>
                */
            Names?: string[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetsRequest) => any;
    }
    export interface DescribeFleetsResult {
            /**
                * <p>Information about the fleets.</p>
                */
            Fleets?: Fleet[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetsResult) => any;
    }
    export interface DescribeImageBuildersRequest {
            /**
                * <p>The names of the image builders to describe.</p>
                */
            Names?: string[];
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeImageBuildersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImageBuildersRequest) => any;
    }
    export interface DescribeImageBuildersResult {
            /**
                * <p>Information about the image builders.</p>
                */
            ImageBuilders?: ImageBuilder[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeImageBuildersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImageBuildersResult) => any;
    }
    export interface DescribeImagePermissionsRequest {
            /**
                * <p>The name of the private image for which to describe permissions. The image must be one that you own. </p>
                */
            Name: string | undefined;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The 12-digit identifier of one or more AWS accounts with which the image is shared.</p>
                */
            SharedAwsAccountIds?: string[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeImagePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImagePermissionsRequest) => any;
    }
    /**
        * <p>Describes the permissions that are available to the specified AWS account for a shared image.</p>
        */
    export interface SharedImagePermissions {
            /**
                * <p>The 12-digit identifier of the AWS account with which the image is shared.</p>
                */
            sharedAccountId: string | undefined;
            /**
                * <p>Describes the permissions for a shared image.</p>
                */
            imagePermissions: ImagePermissions | undefined;
    }
    export namespace SharedImagePermissions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SharedImagePermissions) => any;
    }
    export interface DescribeImagePermissionsResult {
            /**
                * <p>The name of the private image.</p>
                */
            Name?: string;
            /**
                * <p>The permissions for a private image that you own. </p>
                */
            SharedImagePermissionsList?: SharedImagePermissions[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeImagePermissionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImagePermissionsResult) => any;
    }
    export interface DescribeImagesRequest {
            /**
                * <p>The names of the public or private images to describe.</p>
                */
            Names?: string[];
            /**
                * <p>The ARNs of the public, private, and shared images to describe.</p>
                */
            Arns?: string[];
            /**
                * <p>The type of image (public, private, or shared) to describe. </p>
                */
            Type?: VisibilityType | string;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeImagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImagesRequest) => any;
    }
    export interface DescribeImagesResult {
            /**
                * <p>Information about the images.</p>
                */
            Images?: Image[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeImagesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImagesResult) => any;
    }
    export interface DescribeSessionsRequest {
            /**
                * <p>The name of the stack. This value is case-sensitive.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The name of the fleet. This value is case-sensitive.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The user identifier (ID). If you specify a user ID, you must also specify the authentication type.</p>
                */
            UserId?: string;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
            /**
                * <p>The size of each page of results. The default value is 20 and the maximum value is 50.</p>
                */
            Limit?: number;
            /**
                * <p>The authentication method. Specify <code>API</code> for a user
                *             authenticated using a streaming URL or <code>SAML</code> for a SAML federated user.
                *             The default is to authenticate users using a streaming URL.</p>
                */
            AuthenticationType?: AuthenticationType | string;
    }
    export namespace DescribeSessionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSessionsRequest) => any;
    }
    export enum SessionConnectionState {
            CONNECTED = "CONNECTED",
            NOT_CONNECTED = "NOT_CONNECTED"
    }
    export enum SessionState {
            ACTIVE = "ACTIVE",
            EXPIRED = "EXPIRED",
            PENDING = "PENDING"
    }
    /**
        * <p>Describes a streaming session.</p>
        */
    export interface Session {
            /**
                * <p>The identifier of the streaming session.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the user for whom the session was created.</p>
                */
            UserId: string | undefined;
            /**
                * <p>The name of the stack for the streaming session.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The name of the fleet for the streaming session.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The current state of the streaming session.</p>
                */
            State: SessionState | string | undefined;
            /**
                * <p>Specifies whether a user is connected to the streaming session.</p>
                */
            ConnectionState?: SessionConnectionState | string;
            /**
                * <p>The time when a streaming instance is dedicated for the user.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time when the streaming session is set to expire. This time is based on the <code>MaxUserDurationinSeconds</code> value, which determines the maximum length of time that a streaming session can run. A streaming session might end earlier than the time specified in <code>SessionMaxExpirationTime</code>, when the <code>DisconnectTimeOutInSeconds</code> elapses or the user chooses to end his or her session. If the <code>DisconnectTimeOutInSeconds</code> elapses, or the user chooses to end his or her session, the streaming instance is terminated and the streaming session ends.</p>
                */
            MaxExpirationTime?: Date;
            /**
                * <p>The authentication method. The user is authenticated using a streaming URL
                *             (<code>API</code>) or SAML 2.0 federation (<code>SAML</code>).</p>
                */
            AuthenticationType?: AuthenticationType | string;
            /**
                * <p>The network details for the streaming session.</p>
                */
            NetworkAccessConfiguration?: NetworkAccessConfiguration;
    }
    export namespace Session {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Session) => any;
    }
    export interface DescribeSessionsResult {
            /**
                * <p>Information about the streaming sessions.</p>
                */
            Sessions?: Session[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeSessionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSessionsResult) => any;
    }
    export interface DescribeStacksRequest {
            /**
                * <p>The names of the stacks to describe.</p>
                */
            Names?: string[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeStacksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStacksRequest) => any;
    }
    export interface DescribeStacksResult {
            /**
                * <p>Information about the stacks.</p>
                */
            Stacks?: Stack[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeStacksResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStacksResult) => any;
    }
    export interface DescribeUsageReportSubscriptionsRequest {
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeUsageReportSubscriptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUsageReportSubscriptionsRequest) => any;
    }
    export enum UsageReportExecutionErrorCode {
            ACCESS_DENIED = "ACCESS_DENIED",
            INTERNAL_SERVICE_ERROR = "INTERNAL_SERVICE_ERROR",
            RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND"
    }
    /**
        * <p>Describes the error that is returned when a usage report can't be generated.</p>
        */
    export interface LastReportGenerationExecutionError {
            /**
                * <p>The error code for the error that is returned when a usage report can't be generated.</p>
                */
            ErrorCode?: UsageReportExecutionErrorCode | string;
            /**
                * <p>The error message for the error that is returned when a usage report can't be generated.</p>
                */
            ErrorMessage?: string;
    }
    export namespace LastReportGenerationExecutionError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LastReportGenerationExecutionError) => any;
    }
    /**
        * <p>Describes information about the usage report subscription.</p>
        */
    export interface UsageReportSubscription {
            /**
                * <p>The Amazon S3 bucket where generated reports are stored.</p>
                *
                *         <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script
                *             configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is
                *             unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0
                *             uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts,
                *             when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>
                */
            S3BucketName?: string;
            /**
                * <p>The schedule for generating usage reports.</p>
                */
            Schedule?: UsageReportSchedule | string;
            /**
                * <p>The time when the last usage report was generated.</p>
                */
            LastGeneratedReportDate?: Date;
            /**
                * <p>The errors that were returned if usage reports couldn't be generated.</p>
                */
            SubscriptionErrors?: LastReportGenerationExecutionError[];
    }
    export namespace UsageReportSubscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsageReportSubscription) => any;
    }
    export interface DescribeUsageReportSubscriptionsResult {
            /**
                * <p>Information about the usage report subscription.</p>
                */
            UsageReportSubscriptions?: UsageReportSubscription[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeUsageReportSubscriptionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUsageReportSubscriptionsResult) => any;
    }
    export interface DescribeUsersRequest {
            /**
                * <p>The authentication type for the users in the user pool to describe. You must specify USERPOOL.</p>
                */
            AuthenticationType: AuthenticationType | string | undefined;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeUsersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUsersRequest) => any;
    }
    /**
        * <p>Describes a user in the user pool.</p>
        */
    export interface User {
            /**
                * <p>The ARN of the user.</p>
                */
            Arn?: string;
            /**
                * <p>The email address of the user.</p>
                *
                *         <note>
                *             <p>Users' email addresses are case-sensitive.</p>
                *          </note>
                */
            UserName?: string;
            /**
                * <p>Specifies whether the user in the user pool is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The status of the user in the user pool. The status can be one of the following:</p>
                *         <ul>
                *             <li>
                *                <p>UNCONFIRMED – The user is created but not confirmed.</p>
                *             </li>
                *             <li>
                *                <p>CONFIRMED – The user is confirmed.</p>
                *             </li>
                *             <li>
                *                <p>ARCHIVED – The user is no longer active.</p>
                *             </li>
                *             <li>
                *                <p>COMPROMISED – The user is disabled because of a potential security threat.</p>
                *             </li>
                *             <li>
                *                <p>UNKNOWN – The user status is not known.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>The first name, or given name, of the user.</p>
                */
            FirstName?: string;
            /**
                * <p>The last name, or surname, of the user.</p>
                */
            LastName?: string;
            /**
                * <p>The date and time the user was created in the user pool.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The authentication type for the user.</p>
                */
            AuthenticationType: AuthenticationType | string | undefined;
    }
    export namespace User {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: User) => any;
    }
    export interface DescribeUsersResult {
            /**
                * <p>Information about users in the user pool.</p>
                */
            Users?: User[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeUsersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUsersResult) => any;
    }
    export interface DescribeUserStackAssociationsRequest {
            /**
                * <p>The name of the stack that is associated with the user.</p>
                */
            StackName?: string;
            /**
                * <p>The email address of the user who is associated with the stack.</p>
                *
                *         <note>
                *             <p>Users' email addresses are case-sensitive.</p>
                *          </note>
                */
            UserName?: string;
            /**
                * <p>The authentication type for the user who is associated with the stack. You must specify USERPOOL.</p>
                */
            AuthenticationType?: AuthenticationType | string;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeUserStackAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserStackAssociationsRequest) => any;
    }
    export interface DescribeUserStackAssociationsResult {
            /**
                * <p>The UserStackAssociation objects.</p>
                */
            UserStackAssociations?: UserStackAssociation[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeUserStackAssociationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserStackAssociationsResult) => any;
    }
    export interface DisableUserRequest {
            /**
                * <p>The email address of the user.</p>
                *
                *         <note>
                *             <p>Users' email addresses are case-sensitive.</p>
                *          </note>
                */
            UserName: string | undefined;
            /**
                * <p>The authentication type for the user. You must specify USERPOOL.</p>
                */
            AuthenticationType: AuthenticationType | string | undefined;
    }
    export namespace DisableUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableUserRequest) => any;
    }
    export interface DisableUserResult {
    }
    export namespace DisableUserResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableUserResult) => any;
    }
    export interface DisassociateApplicationFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The ARN of the application.</p>
                */
            ApplicationArn: string | undefined;
    }
    export namespace DisassociateApplicationFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateApplicationFleetRequest) => any;
    }
    export interface DisassociateApplicationFleetResult {
    }
    export namespace DisassociateApplicationFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateApplicationFleetResult) => any;
    }
    export interface DisassociateApplicationFromEntitlementRequest {
            /**
                * <p>The name of the stack with which the entitlement is associated.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The name of the entitlement.</p>
                */
            EntitlementName: string | undefined;
            /**
                * <p>The identifier of the application to remove from the entitlement.</p>
                */
            ApplicationIdentifier: string | undefined;
    }
    export namespace DisassociateApplicationFromEntitlementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateApplicationFromEntitlementRequest) => any;
    }
    export interface DisassociateApplicationFromEntitlementResult {
    }
    export namespace DisassociateApplicationFromEntitlementResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateApplicationFromEntitlementResult) => any;
    }
    export interface DisassociateFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The name of the stack.</p>
                */
            StackName: string | undefined;
    }
    export namespace DisassociateFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateFleetRequest) => any;
    }
    export interface DisassociateFleetResult {
    }
    export namespace DisassociateFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateFleetResult) => any;
    }
    export interface EnableUserRequest {
            /**
                * <p>The email address of the user.</p>
                *
                *         <note>
                *             <p>Users' email addresses are case-sensitive. During login, if they specify an email address that doesn't use the same capitalization as the email address specified when their user pool account was created, a "user does not exist" error message displays. </p>
                *          </note>
                */
            UserName: string | undefined;
            /**
                * <p>The authentication type for the user. You must specify USERPOOL.</p>
                */
            AuthenticationType: AuthenticationType | string | undefined;
    }
    export namespace EnableUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableUserRequest) => any;
    }
    export interface EnableUserResult {
    }
    export namespace EnableUserResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableUserResult) => any;
    }
    /**
        * <p>The application associated to an entitlement. Access is controlled based on user attributes.</p>
        */
    export interface EntitledApplication {
            /**
                * <p>The identifier of the application.</p>
                */
            ApplicationIdentifier: string | undefined;
    }
    export namespace EntitledApplication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntitledApplication) => any;
    }
    export interface ExpireSessionRequest {
            /**
                * <p>The identifier of the streaming session.</p>
                */
            SessionId: string | undefined;
    }
    export namespace ExpireSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExpireSessionRequest) => any;
    }
    export interface ExpireSessionResult {
    }
    export namespace ExpireSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExpireSessionResult) => any;
    }
    export enum FleetAttribute {
            DOMAIN_JOIN_INFO = "DOMAIN_JOIN_INFO",
            IAM_ROLE_ARN = "IAM_ROLE_ARN",
            SESSION_SCRIPT_S3_LOCATION = "SESSION_SCRIPT_S3_LOCATION",
            USB_DEVICE_FILTER_STRINGS = "USB_DEVICE_FILTER_STRINGS",
            VPC_CONFIGURATION = "VPC_CONFIGURATION",
            VPC_CONFIGURATION_SECURITY_GROUP_IDS = "VPC_CONFIGURATION_SECURITY_GROUP_IDS"
    }
    export interface ListAssociatedFleetsRequest {
            /**
                * <p>The name of the stack.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociatedFleetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedFleetsRequest) => any;
    }
    export interface ListAssociatedFleetsResult {
            /**
                * <p>The name of the fleet.</p>
                */
            Names?: string[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociatedFleetsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedFleetsResult) => any;
    }
    export interface ListAssociatedStacksRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            FleetName: string | undefined;
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociatedStacksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedStacksRequest) => any;
    }
    export interface ListAssociatedStacksResult {
            /**
                * <p>The name of the stack.</p>
                */
            Names?: string[];
            /**
                * <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociatedStacksResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedStacksResult) => any;
    }
    export interface ListEntitledApplicationsRequest {
            /**
                * <p>The name of the stack with which the entitlement is associated.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The name of the entitlement.</p>
                */
            EntitlementName: string | undefined;
            /**
                * <p>The pagination token used to retrieve the next page of results for this operation.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of each page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEntitledApplicationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitledApplicationsRequest) => any;
    }
    export interface ListEntitledApplicationsResult {
            /**
                * <p>The entitled applications.</p>
                */
            EntitledApplications?: EntitledApplication[];
            /**
                * <p>The pagination token used to retrieve the next page of results for this operation.</p>
                */
            NextToken?: string;
    }
    export namespace ListEntitledApplicationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitledApplicationsResult) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The information about the tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface StartFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            Name: string | undefined;
    }
    export namespace StartFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartFleetRequest) => any;
    }
    export interface StartFleetResult {
    }
    export namespace StartFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartFleetResult) => any;
    }
    export interface StartImageBuilderRequest {
            /**
                * <p>The name of the image builder.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST]. </p>
                */
            AppstreamAgentVersion?: string;
    }
    export namespace StartImageBuilderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartImageBuilderRequest) => any;
    }
    export interface StartImageBuilderResult {
            /**
                * <p>Information about the image builder.</p>
                */
            ImageBuilder?: ImageBuilder;
    }
    export namespace StartImageBuilderResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartImageBuilderResult) => any;
    }
    export interface StopFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            Name: string | undefined;
    }
    export namespace StopFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopFleetRequest) => any;
    }
    export interface StopFleetResult {
    }
    export namespace StopFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopFleetResult) => any;
    }
    export interface StopImageBuilderRequest {
            /**
                * <p>The name of the image builder.</p>
                */
            Name: string | undefined;
    }
    export namespace StopImageBuilderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopImageBuilderRequest) => any;
    }
    export interface StopImageBuilderResult {
            /**
                * <p>Information about the image builder.</p>
                */
            ImageBuilder?: ImageBuilder;
    }
    export namespace StopImageBuilderResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopImageBuilderResult) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to associate. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
                *
                *         <p>If you do not specify a value, the value is set to an empty string.</p>
                *
                *         <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
                *         <p>_ . : / = + \ - @</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag keys for the tags to disassociate.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateApplicationRequest {
            /**
                * <p>The name of the application. This name is visible to users when display name is not specified.</p>
                */
            Name: string | undefined;
            /**
                * <p>The display name of the application. This name is visible to users in the application catalog.</p>
                */
            DisplayName?: string;
            /**
                * <p>The description of the application.</p>
                */
            Description?: string;
            /**
                * <p>The icon S3 location of the application.</p>
                */
            IconS3Location?: S3Location;
            /**
                * <p>The launch path of the application.</p>
                */
            LaunchPath?: string;
            /**
                * <p>The working directory of the application.</p>
                */
            WorkingDirectory?: string;
            /**
                * <p>The launch parameters of the application.</p>
                */
            LaunchParameters?: string;
            /**
                * <p>The ARN of the app block.</p>
                */
            AppBlockArn?: string;
            /**
                * <p>The attributes to delete for an application.</p>
                */
            AttributesToDelete?: (ApplicationAttribute | string)[];
    }
    export namespace UpdateApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApplicationRequest) => any;
    }
    export interface UpdateApplicationResult {
            /**
                * <p>Describes an application in the application catalog.</p>
                */
            Application?: Application;
    }
    export namespace UpdateApplicationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApplicationResult) => any;
    }
    export interface UpdateDirectoryConfigRequest {
            /**
                * <p>The name of the Directory Config object.</p>
                */
            DirectoryName: string | undefined;
            /**
                * <p>The distinguished names of the organizational units for computer accounts.</p>
                */
            OrganizationalUnitDistinguishedNames?: string[];
            /**
                * <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
                */
            ServiceAccountCredentials?: ServiceAccountCredentials;
    }
    export namespace UpdateDirectoryConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDirectoryConfigRequest) => any;
    }
    export interface UpdateDirectoryConfigResult {
            /**
                * <p>Information about the Directory Config object.</p>
                */
            DirectoryConfig?: DirectoryConfig;
    }
    export namespace UpdateDirectoryConfigResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDirectoryConfigResult) => any;
    }
    export interface UpdateEntitlementRequest {
            /**
                * <p>The name of the entitlement.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the stack with which the entitlement is associated.</p>
                */
            StackName: string | undefined;
            /**
                * <p>The description of the entitlement.</p>
                */
            Description?: string;
            /**
                * <p>Specifies whether all or only selected apps are entitled.</p>
                */
            AppVisibility?: AppVisibility | string;
            /**
                * <p>The attributes of the entitlement.</p>
                */
            Attributes?: EntitlementAttribute[];
    }
    export namespace UpdateEntitlementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEntitlementRequest) => any;
    }
    export interface UpdateEntitlementResult {
            /**
                * <p>The entitlement.</p>
                */
            Entitlement?: Entitlement;
    }
    export namespace UpdateEntitlementResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEntitlementResult) => any;
    }
    export interface UpdateFleetRequest {
            /**
                * <p>The name of the image used to create the fleet.</p>
                */
            ImageName?: string;
            /**
                * <p>The ARN of the public, private, or shared image to use.</p>
                */
            ImageArn?: string;
            /**
                * <p>A unique name for the fleet.</p>
                */
            Name?: string;
            /**
                * <p>The instance type to use when launching fleet instances. The following instance types are available:</p>
                *         <ul>
                *             <li>
                *                <p>stream.standard.small</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.medium</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.large</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.compute.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.large</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.3xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.6xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.memory.z1d.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.large</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-design.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-desktop.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.2xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.12xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics.g4dn.16xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.4xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.8xlarge</p>
                *             </li>
                *             <li>
                *                <p>stream.graphics-pro.16xlarge</p>
                *             </li>
                *          </ul>
                *         <p>The following instance types are available for Elastic fleets:</p>
                *         <ul>
                *             <li>
                *                <p>stream.standard.small</p>
                *             </li>
                *             <li>
                *                <p>stream.standard.medium</p>
                *             </li>
                *          </ul>
                */
            InstanceType?: string;
            /**
                * <p>The desired capacity for the fleet. This is not allowed for Elastic fleets.</p>
                */
            ComputeCapacity?: ComputeCapacity;
            /**
                * <p>The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance.</p>
                *         <p>Specify a value between 600 and 360000.</p>
                */
            MaxUserDurationInSeconds?: number;
            /**
                * <p>The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance. </p>
                *         <p>Specify a value between 60 and 360000.</p>
                */
            DisconnectTimeoutInSeconds?: number;
            /**
                * @deprecated
                *
                * <p>Deletes the VPC association for the specified fleet.</p>
                */
            DeleteVpcConfig?: boolean;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The fleet name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>Enables or disables default internet access for the fleet.</p>
                */
            EnableDefaultInternetAccess?: boolean;
            /**
                * <p>The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. </p>
                */
            DomainJoinInfo?: DomainJoinInfo;
            /**
                * <p>The amount of time that users can be idle (inactive) before they are disconnected
                *             from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time
                *             interval begins. Users are notified before they are disconnected due to inactivity. If
                *             users try to reconnect to the streaming session before the time interval specified in
                *             <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their
                *             previous session. Users are considered idle when they stop providing keyboard or mouse
                *             input during their streaming session. File uploads and downloads, audio in, audio out,
                *             and pixels changing do not qualify as user activity. If users continue to be idle after
                *             the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are
                *             disconnected. </p>
                *         <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p>
                *
                *         <note>
                *             <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity. </p>
                *          </note>
                */
            IdleDisconnectTimeoutInSeconds?: number;
            /**
                * <p>The fleet attributes to delete.</p>
                */
            AttributesToDelete?: (FleetAttribute | string)[];
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
                */
            IamRoleArn?: string;
            /**
                * <p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p>
                *
                *         <p>The default value is <code>APP</code>.</p>
                */
            StreamView?: StreamView | string;
            /**
                * <p>The platform of the fleet. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets. </p>
                */
            Platform?: PlatformType | string;
            /**
                * <p>The maximum number of concurrent sessions for a fleet.</p>
                */
            MaxConcurrentSessions?: number;
            /**
                * <p>The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets.</p>
                */
            UsbDeviceFilterStrings?: string[];
            /**
                * <p>The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets. </p>
                */
            SessionScriptS3Location?: S3Location;
    }
    export namespace UpdateFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFleetRequest) => any;
    }
    export interface UpdateFleetResult {
            /**
                * <p>Information about the fleet.</p>
                */
            Fleet?: Fleet;
    }
    export namespace UpdateFleetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFleetResult) => any;
    }
    export interface UpdateImagePermissionsRequest {
            /**
                * <p>The name of the private image.</p>
                */
            Name: string | undefined;
            /**
                * <p>The 12-digit identifier of the AWS account for which you want add or update image permissions.</p>
                */
            SharedAccountId: string | undefined;
            /**
                * <p>The permissions for the image.</p>
                */
            ImagePermissions: ImagePermissions | undefined;
    }
    export namespace UpdateImagePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateImagePermissionsRequest) => any;
    }
    export interface UpdateImagePermissionsResult {
    }
    export namespace UpdateImagePermissionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateImagePermissionsResult) => any;
    }
    export enum StackAttribute {
            ACCESS_ENDPOINTS = "ACCESS_ENDPOINTS",
            EMBED_HOST_DOMAINS = "EMBED_HOST_DOMAINS",
            FEEDBACK_URL = "FEEDBACK_URL",
            IAM_ROLE_ARN = "IAM_ROLE_ARN",
            REDIRECT_URL = "REDIRECT_URL",
            STORAGE_CONNECTORS = "STORAGE_CONNECTORS",
            STORAGE_CONNECTOR_GOOGLE_DRIVE = "STORAGE_CONNECTOR_GOOGLE_DRIVE",
            STORAGE_CONNECTOR_HOMEFOLDERS = "STORAGE_CONNECTOR_HOMEFOLDERS",
            STORAGE_CONNECTOR_ONE_DRIVE = "STORAGE_CONNECTOR_ONE_DRIVE",
            STREAMING_EXPERIENCE_SETTINGS = "STREAMING_EXPERIENCE_SETTINGS",
            THEME_NAME = "THEME_NAME",
            USER_SETTINGS = "USER_SETTINGS"
    }
    export interface UpdateStackRequest {
            /**
                * <p>The stack name to display.</p>
                */
            DisplayName?: string;
            /**
                * <p>The description to display.</p>
                */
            Description?: string;
            /**
                * <p>The name of the stack.</p>
                */
            Name: string | undefined;
            /**
                * <p>The storage connectors to enable.</p>
                */
            StorageConnectors?: StorageConnector[];
            /**
                * @deprecated
                *
                * <p>Deletes the storage connectors currently enabled for the stack.</p>
                */
            DeleteStorageConnectors?: boolean;
            /**
                * <p>The URL that users are redirected to after their streaming session ends.</p>
                */
            RedirectURL?: string;
            /**
                * <p>The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
                */
            FeedbackURL?: string;
            /**
                * <p>The stack attributes to delete.</p>
                */
            AttributesToDelete?: (StackAttribute | string)[];
            /**
                * <p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.</p>
                */
            UserSettings?: UserSetting[];
            /**
                * <p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p>
                */
            ApplicationSettings?: ApplicationSettings;
            /**
                * <p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p>
                */
            AccessEndpoints?: AccessEndpoint[];
            /**
                * <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p>
                */
            EmbedHostDomains?: string[];
            /**
                * <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
                */
            StreamingExperienceSettings?: StreamingExperienceSettings;
    }
    export namespace UpdateStackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStackRequest) => any;
    }
    export interface UpdateStackResult {
            /**
                * <p>Information about the stack.</p>
                */
            Stack?: Stack;
    }
    export namespace UpdateStackResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStackResult) => any;
    }
}

declare module '@aws-sdk/client-appstream/node_modules/@aws-sdk/client-appstream/dist-types/models/AppStreamServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from AppStream service.
        */
    export class AppStreamServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

