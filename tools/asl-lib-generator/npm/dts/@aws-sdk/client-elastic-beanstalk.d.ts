// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-elastic-beanstalk' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AbortEnvironmentUpdateCommandInput, AbortEnvironmentUpdateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/AbortEnvironmentUpdateCommand";
    import { ApplyEnvironmentManagedActionCommandInput, ApplyEnvironmentManagedActionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ApplyEnvironmentManagedActionCommand";
    import { AssociateEnvironmentOperationsRoleCommandInput, AssociateEnvironmentOperationsRoleCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/AssociateEnvironmentOperationsRoleCommand";
    import { CheckDNSAvailabilityCommandInput, CheckDNSAvailabilityCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CheckDNSAvailabilityCommand";
    import { ComposeEnvironmentsCommandInput, ComposeEnvironmentsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ComposeEnvironmentsCommand";
    import { CreateApplicationCommandInput, CreateApplicationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateApplicationCommand";
    import { CreateApplicationVersionCommandInput, CreateApplicationVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateApplicationVersionCommand";
    import { CreateConfigurationTemplateCommandInput, CreateConfigurationTemplateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateConfigurationTemplateCommand";
    import { CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateEnvironmentCommand";
    import { CreatePlatformVersionCommandInput, CreatePlatformVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreatePlatformVersionCommand";
    import { CreateStorageLocationCommandInput, CreateStorageLocationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateStorageLocationCommand";
    import { DeleteApplicationCommandInput, DeleteApplicationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteApplicationCommand";
    import { DeleteApplicationVersionCommandInput, DeleteApplicationVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteApplicationVersionCommand";
    import { DeleteConfigurationTemplateCommandInput, DeleteConfigurationTemplateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteConfigurationTemplateCommand";
    import { DeleteEnvironmentConfigurationCommandInput, DeleteEnvironmentConfigurationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteEnvironmentConfigurationCommand";
    import { DeletePlatformVersionCommandInput, DeletePlatformVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeletePlatformVersionCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeApplicationsCommand";
    import { DescribeApplicationVersionsCommandInput, DescribeApplicationVersionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeApplicationVersionsCommand";
    import { DescribeConfigurationOptionsCommandInput, DescribeConfigurationOptionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeConfigurationOptionsCommand";
    import { DescribeConfigurationSettingsCommandInput, DescribeConfigurationSettingsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeConfigurationSettingsCommand";
    import { DescribeEnvironmentHealthCommandInput, DescribeEnvironmentHealthCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentHealthCommand";
    import { DescribeEnvironmentManagedActionHistoryCommandInput, DescribeEnvironmentManagedActionHistoryCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentManagedActionHistoryCommand";
    import { DescribeEnvironmentManagedActionsCommandInput, DescribeEnvironmentManagedActionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentManagedActionsCommand";
    import { DescribeEnvironmentResourcesCommandInput, DescribeEnvironmentResourcesCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentResourcesCommand";
    import { DescribeEnvironmentsCommandInput, DescribeEnvironmentsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentsCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEventsCommand";
    import { DescribeInstancesHealthCommandInput, DescribeInstancesHealthCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeInstancesHealthCommand";
    import { DescribePlatformVersionCommandInput, DescribePlatformVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribePlatformVersionCommand";
    import { DisassociateEnvironmentOperationsRoleCommandInput, DisassociateEnvironmentOperationsRoleCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DisassociateEnvironmentOperationsRoleCommand";
    import { ListAvailableSolutionStacksCommandInput, ListAvailableSolutionStacksCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListAvailableSolutionStacksCommand";
    import { ListPlatformBranchesCommandInput, ListPlatformBranchesCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListPlatformBranchesCommand";
    import { ListPlatformVersionsCommandInput, ListPlatformVersionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListPlatformVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListTagsForResourceCommand";
    import { RebuildEnvironmentCommandInput, RebuildEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RebuildEnvironmentCommand";
    import { RequestEnvironmentInfoCommandInput, RequestEnvironmentInfoCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RequestEnvironmentInfoCommand";
    import { RestartAppServerCommandInput, RestartAppServerCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RestartAppServerCommand";
    import { RetrieveEnvironmentInfoCommandInput, RetrieveEnvironmentInfoCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RetrieveEnvironmentInfoCommand";
    import { SwapEnvironmentCNAMEsCommandInput, SwapEnvironmentCNAMEsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/SwapEnvironmentCNAMEsCommand";
    import { TerminateEnvironmentCommandInput, TerminateEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/TerminateEnvironmentCommand";
    import { UpdateApplicationCommandInput, UpdateApplicationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationCommand";
    import { UpdateApplicationResourceLifecycleCommandInput, UpdateApplicationResourceLifecycleCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationResourceLifecycleCommand";
    import { UpdateApplicationVersionCommandInput, UpdateApplicationVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationVersionCommand";
    import { UpdateConfigurationTemplateCommandInput, UpdateConfigurationTemplateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateConfigurationTemplateCommand";
    import { UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateEnvironmentCommand";
    import { UpdateTagsForResourceCommandInput, UpdateTagsForResourceCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateTagsForResourceCommand";
    import { ValidateConfigurationSettingsCommandInput, ValidateConfigurationSettingsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ValidateConfigurationSettingsCommand";
    import { ElasticBeanstalkClient } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    /**
        * <fullname>AWS Elastic Beanstalk</fullname>
        *
        *
        *          <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable,
        *       fault-tolerant applications running on the Amazon Web Services cloud.</p>
        *          <p>For more information about this product, go to the <a href="http://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a> details page. The location of the
        *       latest AWS Elastic Beanstalk WSDL is <a href="https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>.
        *       To install the Software Development Kits (SDKs), Integrated Development Environment (IDE)
        *       Toolkits, and command line tools that enable you to access the API, go to <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
        *          <p>
        *             <b>Endpoints</b>
        *          </p>
        *          <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to
        *         <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region">Regions and Endpoints</a> in the <i>Amazon Web Services
        *       Glossary</i>.</p>
        */
    export class ElasticBeanstalk extends ElasticBeanstalkClient {
            /**
                * <p>Cancels in-progress environment configuration update or application version
                *       deployment.</p>
                */
            abortEnvironmentUpdate(args: AbortEnvironmentUpdateCommandInput, options?: __HttpHandlerOptions): Promise<AbortEnvironmentUpdateCommandOutput>;
            abortEnvironmentUpdate(args: AbortEnvironmentUpdateCommandInput, cb: (err: any, data?: AbortEnvironmentUpdateCommandOutput) => void): void;
            abortEnvironmentUpdate(args: AbortEnvironmentUpdateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AbortEnvironmentUpdateCommandOutput) => void): void;
            /**
                * <p>Applies a scheduled managed action immediately. A managed action can be applied only if
                *       its status is <code>Scheduled</code>. Get the status and action ID of a managed action with
                *         <a>DescribeEnvironmentManagedActions</a>.</p>
                */
            applyEnvironmentManagedAction(args: ApplyEnvironmentManagedActionCommandInput, options?: __HttpHandlerOptions): Promise<ApplyEnvironmentManagedActionCommandOutput>;
            applyEnvironmentManagedAction(args: ApplyEnvironmentManagedActionCommandInput, cb: (err: any, data?: ApplyEnvironmentManagedActionCommandOutput) => void): void;
            applyEnvironmentManagedAction(args: ApplyEnvironmentManagedActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ApplyEnvironmentManagedActionCommandOutput) => void): void;
            /**
                * <p>Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk
                *       uses the associated operations role for permissions to downstream services during subsequent
                *       calls acting on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
                *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                */
            associateEnvironmentOperationsRole(args: AssociateEnvironmentOperationsRoleCommandInput, options?: __HttpHandlerOptions): Promise<AssociateEnvironmentOperationsRoleCommandOutput>;
            associateEnvironmentOperationsRole(args: AssociateEnvironmentOperationsRoleCommandInput, cb: (err: any, data?: AssociateEnvironmentOperationsRoleCommandOutput) => void): void;
            associateEnvironmentOperationsRole(args: AssociateEnvironmentOperationsRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateEnvironmentOperationsRoleCommandOutput) => void): void;
            /**
                * <p>Checks if the specified CNAME is available.</p>
                */
            checkDNSAvailability(args: CheckDNSAvailabilityCommandInput, options?: __HttpHandlerOptions): Promise<CheckDNSAvailabilityCommandOutput>;
            checkDNSAvailability(args: CheckDNSAvailabilityCommandInput, cb: (err: any, data?: CheckDNSAvailabilityCommandOutput) => void): void;
            checkDNSAvailability(args: CheckDNSAvailabilityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CheckDNSAvailabilityCommandOutput) => void): void;
            /**
                * <p>Create or update a group of environments that each run a separate component of a single
                *       application. Takes a list of version labels that specify application source bundles for each
                *       of the environments to create or update. The name of each environment and other required
                *       information must be included in the source bundles in an environment manifest named
                *       <code>env.yaml</code>. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html">Compose Environments</a>
                *       for details.</p>
                */
            composeEnvironments(args: ComposeEnvironmentsCommandInput, options?: __HttpHandlerOptions): Promise<ComposeEnvironmentsCommandOutput>;
            composeEnvironments(args: ComposeEnvironmentsCommandInput, cb: (err: any, data?: ComposeEnvironmentsCommandOutput) => void): void;
            composeEnvironments(args: ComposeEnvironmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ComposeEnvironmentsCommandOutput) => void): void;
            /**
                * <p>Creates an application that has one configuration template named <code>default</code>
                *       and no application versions.</p>
                */
            createApplication(args: CreateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<CreateApplicationCommandOutput>;
            createApplication(args: CreateApplicationCommandInput, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
            createApplication(args: CreateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
            /**
                * <p>Creates an application version for the specified application. You can create an
                *       application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the
                *       output of an AWS CodeBuild build as follows:</p>
                *          <p>Specify a commit in an AWS CodeCommit repository with
                *         <code>SourceBuildInformation</code>.</p>
                *          <p>Specify a build in an AWS CodeBuild with <code>SourceBuildInformation</code> and
                *         <code>BuildConfiguration</code>.</p>
                *          <p>Specify a source bundle in S3 with <code>SourceBundle</code>
                *          </p>
                *          <p>Omit both <code>SourceBuildInformation</code> and <code>SourceBundle</code> to use the
                *       default sample application.</p>
                *          <note>
                *             <p>After you create an application version with a specified Amazon S3 bucket and key
                *         location, you can't change that Amazon S3 location. If you change the Amazon S3 location,
                *         you receive an exception when you attempt to launch an environment from the application
                *         version.</p>
                *          </note>
                */
            createApplicationVersion(args: CreateApplicationVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateApplicationVersionCommandOutput>;
            createApplicationVersion(args: CreateApplicationVersionCommandInput, cb: (err: any, data?: CreateApplicationVersionCommandOutput) => void): void;
            createApplicationVersion(args: CreateApplicationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApplicationVersionCommandOutput) => void): void;
            /**
                * <p>Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk
                *       application. You define application configuration settings in a configuration template. You
                *       can then use the configuration template to deploy different versions of the application with
                *       the same configuration settings.</p>
                *          <p>Templates aren't associated with any environment. The <code>EnvironmentName</code>
                *       response element is always <code>null</code>.</p>
                *          <p>Related Topics</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>DescribeConfigurationOptions</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>DescribeConfigurationSettings</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>ListAvailableSolutionStacks</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            createConfigurationTemplate(args: CreateConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationTemplateCommandOutput>;
            createConfigurationTemplate(args: CreateConfigurationTemplateCommandInput, cb: (err: any, data?: CreateConfigurationTemplateCommandOutput) => void): void;
            createConfigurationTemplate(args: CreateConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Launches an AWS Elastic Beanstalk environment for the specified application using the specified
                *       configuration.</p>
                */
            createEnvironment(args: CreateEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateEnvironmentCommandOutput>;
            createEnvironment(args: CreateEnvironmentCommandInput, cb: (err: any, data?: CreateEnvironmentCommandOutput) => void): void;
            createEnvironment(args: CreateEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEnvironmentCommandOutput) => void): void;
            /**
                * <p>Create a new version of your custom platform.</p>
                */
            createPlatformVersion(args: CreatePlatformVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreatePlatformVersionCommandOutput>;
            createPlatformVersion(args: CreatePlatformVersionCommandInput, cb: (err: any, data?: CreatePlatformVersionCommandOutput) => void): void;
            createPlatformVersion(args: CreatePlatformVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePlatformVersionCommandOutput) => void): void;
            /**
                * <p>Creates a bucket in Amazon S3 to store application versions, logs, and other files used
                *       by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the
                *       first time you create an environment in a region. If the storage location already exists,
                *         <code>CreateStorageLocation</code> still returns the bucket name but does not create a new
                *       bucket.</p>
                */
            createStorageLocation(args: CreateStorageLocationCommandInput, options?: __HttpHandlerOptions): Promise<CreateStorageLocationCommandOutput>;
            createStorageLocation(args: CreateStorageLocationCommandInput, cb: (err: any, data?: CreateStorageLocationCommandOutput) => void): void;
            createStorageLocation(args: CreateStorageLocationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStorageLocationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified application along with all associated versions and
                *       configurations. The application versions will not be deleted from your Amazon S3
                *       bucket.</p>
                *          <note>
                *             <p>You cannot delete an application that has a running environment.</p>
                *          </note>
                */
            deleteApplication(args: DeleteApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApplicationCommandOutput>;
            deleteApplication(args: DeleteApplicationCommandInput, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
            deleteApplication(args: DeleteApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified version from the specified application.</p>
                *          <note>
                *             <p>You cannot delete an application version that is associated with a running
                *         environment.</p>
                *          </note>
                */
            deleteApplicationVersion(args: DeleteApplicationVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApplicationVersionCommandOutput>;
            deleteApplicationVersion(args: DeleteApplicationVersionCommandInput, cb: (err: any, data?: DeleteApplicationVersionCommandOutput) => void): void;
            deleteApplicationVersion(args: DeleteApplicationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApplicationVersionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified configuration template.</p>
                *          <note>
                *             <p>When you launch an environment using a configuration template, the environment gets a
                *         copy of the template. You can delete or modify the environment's copy of the template
                *         without affecting the running environment.</p>
                *          </note>
                */
            deleteConfigurationTemplate(args: DeleteConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationTemplateCommandOutput>;
            deleteConfigurationTemplate(args: DeleteConfigurationTemplateCommandInput, cb: (err: any, data?: DeleteConfigurationTemplateCommandOutput) => void): void;
            deleteConfigurationTemplate(args: DeleteConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes the draft configuration associated with the running environment.</p>
                *          <p>Updating a running environment with any configuration changes creates a draft
                *       configuration set. You can get the draft configuration using <a>DescribeConfigurationSettings</a> while the update is in progress or if the update
                *       fails. The <code>DeploymentStatus</code> for the draft configuration indicates whether the
                *       deployment is in process or has failed. The draft configuration remains in existence until it
                *       is deleted with this action.</p>
                */
            deleteEnvironmentConfiguration(args: DeleteEnvironmentConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEnvironmentConfigurationCommandOutput>;
            deleteEnvironmentConfiguration(args: DeleteEnvironmentConfigurationCommandInput, cb: (err: any, data?: DeleteEnvironmentConfigurationCommandOutput) => void): void;
            deleteEnvironmentConfiguration(args: DeleteEnvironmentConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEnvironmentConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified version of a custom platform.</p>
                */
            deletePlatformVersion(args: DeletePlatformVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeletePlatformVersionCommandOutput>;
            deletePlatformVersion(args: DeletePlatformVersionCommandInput, cb: (err: any, data?: DeletePlatformVersionCommandOutput) => void): void;
            deletePlatformVersion(args: DeletePlatformVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePlatformVersionCommandOutput) => void): void;
            /**
                * <p>Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS
                *       account.</p>
                *          <p>The result currently has one set of attributes—resource quotas.</p>
                */
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountAttributesCommandOutput>;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            /**
                * <p>Returns the descriptions of existing applications.</p>
                */
            describeApplications(args: DescribeApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApplicationsCommandOutput>;
            describeApplications(args: DescribeApplicationsCommandInput, cb: (err: any, data?: DescribeApplicationsCommandOutput) => void): void;
            describeApplications(args: DescribeApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApplicationsCommandOutput) => void): void;
            /**
                * <p>Retrieve a list of application versions.</p>
                */
            describeApplicationVersions(args: DescribeApplicationVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApplicationVersionsCommandOutput>;
            describeApplicationVersions(args: DescribeApplicationVersionsCommandInput, cb: (err: any, data?: DescribeApplicationVersionsCommandOutput) => void): void;
            describeApplicationVersions(args: DescribeApplicationVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApplicationVersionsCommandOutput) => void): void;
            /**
                * <p>Describes the configuration options that are used in a particular configuration
                *       template or environment, or that a specified solution stack defines. The description includes
                *       the values the options, their default values, and an indication of the required action on a
                *       running environment if an option value is changed.</p>
                */
            describeConfigurationOptions(args: DescribeConfigurationOptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationOptionsCommandOutput>;
            describeConfigurationOptions(args: DescribeConfigurationOptionsCommandInput, cb: (err: any, data?: DescribeConfigurationOptionsCommandOutput) => void): void;
            describeConfigurationOptions(args: DescribeConfigurationOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationOptionsCommandOutput) => void): void;
            /**
                * <p>Returns a description of the settings for the specified configuration set, that is,
                *       either a configuration template or the configuration set associated with a running
                *       environment.</p>
                *          <p>When describing the settings for the configuration set associated with a running
                *       environment, it is possible to receive two sets of setting descriptions. One is the deployed
                *       configuration set, and the other is a draft configuration of an environment that is either in
                *       the process of deployment or that failed to deploy.</p>
                *          <p>Related Topics</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>DeleteEnvironmentConfiguration</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            describeConfigurationSettings(args: DescribeConfigurationSettingsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationSettingsCommandOutput>;
            describeConfigurationSettings(args: DescribeConfigurationSettingsCommandInput, cb: (err: any, data?: DescribeConfigurationSettingsCommandOutput) => void): void;
            describeConfigurationSettings(args: DescribeConfigurationSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationSettingsCommandOutput) => void): void;
            /**
                * <p>Returns information about the overall health of the specified environment. The
                *         <b>DescribeEnvironmentHealth</b> operation is only available with
                *       AWS Elastic Beanstalk Enhanced Health.</p>
                */
            describeEnvironmentHealth(args: DescribeEnvironmentHealthCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEnvironmentHealthCommandOutput>;
            describeEnvironmentHealth(args: DescribeEnvironmentHealthCommandInput, cb: (err: any, data?: DescribeEnvironmentHealthCommandOutput) => void): void;
            describeEnvironmentHealth(args: DescribeEnvironmentHealthCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEnvironmentHealthCommandOutput) => void): void;
            /**
                * <p>Lists an environment's completed and failed managed actions.</p>
                */
            describeEnvironmentManagedActionHistory(args: DescribeEnvironmentManagedActionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEnvironmentManagedActionHistoryCommandOutput>;
            describeEnvironmentManagedActionHistory(args: DescribeEnvironmentManagedActionHistoryCommandInput, cb: (err: any, data?: DescribeEnvironmentManagedActionHistoryCommandOutput) => void): void;
            describeEnvironmentManagedActionHistory(args: DescribeEnvironmentManagedActionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEnvironmentManagedActionHistoryCommandOutput) => void): void;
            /**
                * <p>Lists an environment's upcoming and in-progress managed actions.</p>
                */
            describeEnvironmentManagedActions(args: DescribeEnvironmentManagedActionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEnvironmentManagedActionsCommandOutput>;
            describeEnvironmentManagedActions(args: DescribeEnvironmentManagedActionsCommandInput, cb: (err: any, data?: DescribeEnvironmentManagedActionsCommandOutput) => void): void;
            describeEnvironmentManagedActions(args: DescribeEnvironmentManagedActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEnvironmentManagedActionsCommandOutput) => void): void;
            /**
                * <p>Returns AWS resources for this environment.</p>
                */
            describeEnvironmentResources(args: DescribeEnvironmentResourcesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEnvironmentResourcesCommandOutput>;
            describeEnvironmentResources(args: DescribeEnvironmentResourcesCommandInput, cb: (err: any, data?: DescribeEnvironmentResourcesCommandOutput) => void): void;
            describeEnvironmentResources(args: DescribeEnvironmentResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEnvironmentResourcesCommandOutput) => void): void;
            /**
                * <p>Returns descriptions for existing environments.</p>
                */
            describeEnvironments(args: DescribeEnvironmentsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEnvironmentsCommandOutput>;
            describeEnvironments(args: DescribeEnvironmentsCommandInput, cb: (err: any, data?: DescribeEnvironmentsCommandOutput) => void): void;
            describeEnvironments(args: DescribeEnvironmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEnvironmentsCommandOutput) => void): void;
            /**
                * <p>Returns list of event descriptions matching criteria up to the last 6 weeks.</p>
                *          <note>
                *             <p>This action returns the most recent 1,000 events from the specified
                *           <code>NextToken</code>.</p>
                *          </note>
                */
            describeEvents(args: DescribeEventsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventsCommandOutput>;
            describeEvents(args: DescribeEventsCommandInput, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            describeEvents(args: DescribeEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            /**
                * <p>Retrieves detailed information about the health of instances in your AWS Elastic
                *       Beanstalk. This operation requires <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html">enhanced health
                *       reporting</a>.</p>
                */
            describeInstancesHealth(args: DescribeInstancesHealthCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstancesHealthCommandOutput>;
            describeInstancesHealth(args: DescribeInstancesHealthCommandInput, cb: (err: any, data?: DescribeInstancesHealthCommandOutput) => void): void;
            describeInstancesHealth(args: DescribeInstancesHealthCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstancesHealthCommandOutput) => void): void;
            /**
                * <p>Describes a platform version. Provides full details. Compare to <a>ListPlatformVersions</a>, which provides summary information about a list of
                *       platform versions.</p>
                *          <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
                *         Platforms Glossary</a>.</p>
                */
            describePlatformVersion(args: DescribePlatformVersionCommandInput, options?: __HttpHandlerOptions): Promise<DescribePlatformVersionCommandOutput>;
            describePlatformVersion(args: DescribePlatformVersionCommandInput, cb: (err: any, data?: DescribePlatformVersionCommandOutput) => void): void;
            describePlatformVersion(args: DescribePlatformVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePlatformVersionCommandOutput) => void): void;
            /**
                * <p>Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses
                *       the caller's permissions for permissions to downstream services during subsequent calls acting
                *       on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
                *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                */
            disassociateEnvironmentOperationsRole(args: DisassociateEnvironmentOperationsRoleCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateEnvironmentOperationsRoleCommandOutput>;
            disassociateEnvironmentOperationsRole(args: DisassociateEnvironmentOperationsRoleCommandInput, cb: (err: any, data?: DisassociateEnvironmentOperationsRoleCommandOutput) => void): void;
            disassociateEnvironmentOperationsRole(args: DisassociateEnvironmentOperationsRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateEnvironmentOperationsRoleCommandOutput) => void): void;
            /**
                * <p>Returns a list of the available solution stack names, with the public version first and
                *       then in reverse chronological order.</p>
                */
            listAvailableSolutionStacks(args: ListAvailableSolutionStacksCommandInput, options?: __HttpHandlerOptions): Promise<ListAvailableSolutionStacksCommandOutput>;
            listAvailableSolutionStacks(args: ListAvailableSolutionStacksCommandInput, cb: (err: any, data?: ListAvailableSolutionStacksCommandOutput) => void): void;
            listAvailableSolutionStacks(args: ListAvailableSolutionStacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAvailableSolutionStacksCommandOutput) => void): void;
            /**
                * <p>Lists the platform branches available for your account in an AWS Region. Provides
                *       summary information about each platform branch.</p>
                *          <p>For definitions of platform branch and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
                *         Platforms Glossary</a>.</p>
                */
            listPlatformBranches(args: ListPlatformBranchesCommandInput, options?: __HttpHandlerOptions): Promise<ListPlatformBranchesCommandOutput>;
            listPlatformBranches(args: ListPlatformBranchesCommandInput, cb: (err: any, data?: ListPlatformBranchesCommandOutput) => void): void;
            listPlatformBranches(args: ListPlatformBranchesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPlatformBranchesCommandOutput) => void): void;
            /**
                * <p>Lists the platform versions available for your account in an AWS Region. Provides
                *       summary information about each platform version. Compare to <a>DescribePlatformVersion</a>, which provides full details about a single platform
                *       version.</p>
                *          <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
                *         Platforms Glossary</a>.</p>
                */
            listPlatformVersions(args: ListPlatformVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListPlatformVersionsCommandOutput>;
            listPlatformVersions(args: ListPlatformVersionsCommandInput, cb: (err: any, data?: ListPlatformVersionsCommandOutput) => void): void;
            listPlatformVersions(args: ListPlatformVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPlatformVersionsCommandOutput) => void): void;
            /**
                * <p>Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.</p>
                *          <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
                *         <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
                *         Resources</a>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Deletes and recreates all of the AWS resources (for example: the Auto Scaling group,
                *       load balancer, etc.) for a specified environment and forces a restart.</p>
                */
            rebuildEnvironment(args: RebuildEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<RebuildEnvironmentCommandOutput>;
            rebuildEnvironment(args: RebuildEnvironmentCommandInput, cb: (err: any, data?: RebuildEnvironmentCommandOutput) => void): void;
            rebuildEnvironment(args: RebuildEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebuildEnvironmentCommandOutput) => void): void;
            /**
                * <p>Initiates a request to compile the specified type of information of the deployed
                *       environment.</p>
                *          <p> Setting the <code>InfoType</code> to <code>tail</code> compiles the last lines from
                *       the application server log files of every Amazon EC2 instance in your environment. </p>
                *          <p> Setting the <code>InfoType</code> to <code>bundle</code> compresses the application
                *       server log files for every Amazon EC2 instance into a <code>.zip</code> file. Legacy and .NET
                *       containers do not support bundle logs. </p>
                *          <p> Use <a>RetrieveEnvironmentInfo</a> to obtain the set of logs. </p>
                *          <p>Related Topics</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>RetrieveEnvironmentInfo</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            requestEnvironmentInfo(args: RequestEnvironmentInfoCommandInput, options?: __HttpHandlerOptions): Promise<RequestEnvironmentInfoCommandOutput>;
            requestEnvironmentInfo(args: RequestEnvironmentInfoCommandInput, cb: (err: any, data?: RequestEnvironmentInfoCommandOutput) => void): void;
            requestEnvironmentInfo(args: RequestEnvironmentInfoCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RequestEnvironmentInfoCommandOutput) => void): void;
            /**
                * <p>Causes the environment to restart the application container server running on each
                *       Amazon EC2 instance.</p>
                */
            restartAppServer(args: RestartAppServerCommandInput, options?: __HttpHandlerOptions): Promise<RestartAppServerCommandOutput>;
            restartAppServer(args: RestartAppServerCommandInput, cb: (err: any, data?: RestartAppServerCommandOutput) => void): void;
            restartAppServer(args: RestartAppServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestartAppServerCommandOutput) => void): void;
            /**
                * <p>Retrieves the compiled information from a <a>RequestEnvironmentInfo</a>
                *       request.</p>
                *          <p>Related Topics</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>RequestEnvironmentInfo</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            retrieveEnvironmentInfo(args: RetrieveEnvironmentInfoCommandInput, options?: __HttpHandlerOptions): Promise<RetrieveEnvironmentInfoCommandOutput>;
            retrieveEnvironmentInfo(args: RetrieveEnvironmentInfoCommandInput, cb: (err: any, data?: RetrieveEnvironmentInfoCommandOutput) => void): void;
            retrieveEnvironmentInfo(args: RetrieveEnvironmentInfoCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RetrieveEnvironmentInfoCommandOutput) => void): void;
            /**
                * <p>Swaps the CNAMEs of two environments.</p>
                */
            swapEnvironmentCNAMEs(args: SwapEnvironmentCNAMEsCommandInput, options?: __HttpHandlerOptions): Promise<SwapEnvironmentCNAMEsCommandOutput>;
            swapEnvironmentCNAMEs(args: SwapEnvironmentCNAMEsCommandInput, cb: (err: any, data?: SwapEnvironmentCNAMEsCommandOutput) => void): void;
            swapEnvironmentCNAMEs(args: SwapEnvironmentCNAMEsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SwapEnvironmentCNAMEsCommandOutput) => void): void;
            /**
                * <p>Terminates the specified environment.</p>
                */
            terminateEnvironment(args: TerminateEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<TerminateEnvironmentCommandOutput>;
            terminateEnvironment(args: TerminateEnvironmentCommandInput, cb: (err: any, data?: TerminateEnvironmentCommandOutput) => void): void;
            terminateEnvironment(args: TerminateEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TerminateEnvironmentCommandOutput) => void): void;
            /**
                * <p>Updates the specified application to have the specified properties.</p>
                *          <note>
                *             <p>If a property (for example, <code>description</code>) is not provided, the value
                *         remains unchanged. To clear these properties, specify an empty string.</p>
                *          </note>
                */
            updateApplication(args: UpdateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApplicationCommandOutput>;
            updateApplication(args: UpdateApplicationCommandInput, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
            updateApplication(args: UpdateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
            /**
                * <p>Modifies lifecycle settings for an application.</p>
                */
            updateApplicationResourceLifecycle(args: UpdateApplicationResourceLifecycleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApplicationResourceLifecycleCommandOutput>;
            updateApplicationResourceLifecycle(args: UpdateApplicationResourceLifecycleCommandInput, cb: (err: any, data?: UpdateApplicationResourceLifecycleCommandOutput) => void): void;
            updateApplicationResourceLifecycle(args: UpdateApplicationResourceLifecycleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApplicationResourceLifecycleCommandOutput) => void): void;
            /**
                * <p>Updates the specified application version to have the specified properties.</p>
                *          <note>
                *             <p>If a property (for example, <code>description</code>) is not provided, the value
                *         remains unchanged. To clear properties, specify an empty string.</p>
                *          </note>
                */
            updateApplicationVersion(args: UpdateApplicationVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApplicationVersionCommandOutput>;
            updateApplicationVersion(args: UpdateApplicationVersionCommandInput, cb: (err: any, data?: UpdateApplicationVersionCommandOutput) => void): void;
            updateApplicationVersion(args: UpdateApplicationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApplicationVersionCommandOutput) => void): void;
            /**
                * <p>Updates the specified configuration template to have the specified properties or
                *       configuration option values.</p>
                *          <note>
                *             <p>If a property (for example, <code>ApplicationName</code>) is not provided, its value
                *         remains unchanged. To clear such properties, specify an empty string.</p>
                *          </note>
                *          <p>Related Topics</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>DescribeConfigurationOptions</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            updateConfigurationTemplate(args: UpdateConfigurationTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationTemplateCommandOutput>;
            updateConfigurationTemplate(args: UpdateConfigurationTemplateCommandInput, cb: (err: any, data?: UpdateConfigurationTemplateCommandOutput) => void): void;
            updateConfigurationTemplate(args: UpdateConfigurationTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationTemplateCommandOutput) => void): void;
            /**
                * <p>Updates the environment description, deploys a new application version, updates the
                *       configuration settings to an entirely new configuration template, or updates select
                *       configuration option values in the running environment.</p>
                *          <p> Attempting to update both the release and configuration is not allowed and AWS Elastic
                *       Beanstalk returns an <code>InvalidParameterCombination</code> error. </p>
                *          <p> When updating the configuration settings to a new template or individual settings, a
                *       draft configuration is created and <a>DescribeConfigurationSettings</a> for this
                *       environment returns two setting descriptions with different <code>DeploymentStatus</code>
                *       values. </p>
                */
            updateEnvironment(args: UpdateEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEnvironmentCommandOutput>;
            updateEnvironment(args: UpdateEnvironmentCommandInput, cb: (err: any, data?: UpdateEnvironmentCommandOutput) => void): void;
            updateEnvironment(args: UpdateEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEnvironmentCommandOutput) => void): void;
            /**
                * <p>Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: <code>TagsToAdd</code>
                *       for tags to add or update, and <code>TagsToRemove</code>.</p>
                *          <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
                *       <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
                *         Resources</a>.</p>
                *          <p>If you create a custom IAM user policy to control permission to this operation, specify
                *       one of the following two virtual actions (or both) instead of the API operation name:</p>
                *          <dl>
                *             <dt>elasticbeanstalk:AddTags</dt>
                *             <dd>
                *                <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tags to add in the <code>TagsToAdd</code>
                *           parameter.</p>
                *             </dd>
                *             <dt>elasticbeanstalk:RemoveTags</dt>
                *             <dd>
                *                <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tag keys to remove in the <code>TagsToRemove</code>
                *           parameter.</p>
                *             </dd>
                *          </dl>
                *          <p>For details about creating a custom user policy, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies">Creating a Custom User Policy</a>.</p>
                */
            updateTagsForResource(args: UpdateTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTagsForResourceCommandOutput>;
            updateTagsForResource(args: UpdateTagsForResourceCommandInput, cb: (err: any, data?: UpdateTagsForResourceCommandOutput) => void): void;
            updateTagsForResource(args: UpdateTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Takes a set of configuration settings and either a configuration template or
                *       environment, and determines whether those values are valid.</p>
                *          <p>This action returns a list of messages indicating any errors or warnings associated
                *       with the selection of option values.</p>
                */
            validateConfigurationSettings(args: ValidateConfigurationSettingsCommandInput, options?: __HttpHandlerOptions): Promise<ValidateConfigurationSettingsCommandOutput>;
            validateConfigurationSettings(args: ValidateConfigurationSettingsCommandInput, cb: (err: any, data?: ValidateConfigurationSettingsCommandOutput) => void): void;
            validateConfigurationSettings(args: ValidateConfigurationSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ValidateConfigurationSettingsCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/AbortEnvironmentUpdateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { AbortEnvironmentUpdateMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface AbortEnvironmentUpdateCommandInput extends AbortEnvironmentUpdateMessage {
    }
    export interface AbortEnvironmentUpdateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Cancels in-progress environment configuration update or application version
        *       deployment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, AbortEnvironmentUpdateCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, AbortEnvironmentUpdateCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new AbortEnvironmentUpdateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AbortEnvironmentUpdateCommandInput} for command's `input` shape.
        * @see {@link AbortEnvironmentUpdateCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class AbortEnvironmentUpdateCommand extends $Command<AbortEnvironmentUpdateCommandInput, AbortEnvironmentUpdateCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: AbortEnvironmentUpdateCommandInput;
            constructor(input: AbortEnvironmentUpdateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AbortEnvironmentUpdateCommandInput, AbortEnvironmentUpdateCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ApplyEnvironmentManagedActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplyEnvironmentManagedActionRequest, ApplyEnvironmentManagedActionResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface ApplyEnvironmentManagedActionCommandInput extends ApplyEnvironmentManagedActionRequest {
    }
    export interface ApplyEnvironmentManagedActionCommandOutput extends ApplyEnvironmentManagedActionResult, __MetadataBearer {
    }
    /**
        * <p>Applies a scheduled managed action immediately. A managed action can be applied only if
        *       its status is <code>Scheduled</code>. Get the status and action ID of a managed action with
        *         <a>DescribeEnvironmentManagedActions</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, ApplyEnvironmentManagedActionCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, ApplyEnvironmentManagedActionCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new ApplyEnvironmentManagedActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ApplyEnvironmentManagedActionCommandInput} for command's `input` shape.
        * @see {@link ApplyEnvironmentManagedActionCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class ApplyEnvironmentManagedActionCommand extends $Command<ApplyEnvironmentManagedActionCommandInput, ApplyEnvironmentManagedActionCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: ApplyEnvironmentManagedActionCommandInput;
            constructor(input: ApplyEnvironmentManagedActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ApplyEnvironmentManagedActionCommandInput, ApplyEnvironmentManagedActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/AssociateEnvironmentOperationsRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { AssociateEnvironmentOperationsRoleMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface AssociateEnvironmentOperationsRoleCommandInput extends AssociateEnvironmentOperationsRoleMessage {
    }
    export interface AssociateEnvironmentOperationsRoleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk
        *       uses the associated operations role for permissions to downstream services during subsequent
        *       calls acting on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
        *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, AssociateEnvironmentOperationsRoleCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, AssociateEnvironmentOperationsRoleCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new AssociateEnvironmentOperationsRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateEnvironmentOperationsRoleCommandInput} for command's `input` shape.
        * @see {@link AssociateEnvironmentOperationsRoleCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class AssociateEnvironmentOperationsRoleCommand extends $Command<AssociateEnvironmentOperationsRoleCommandInput, AssociateEnvironmentOperationsRoleCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: AssociateEnvironmentOperationsRoleCommandInput;
            constructor(input: AssociateEnvironmentOperationsRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateEnvironmentOperationsRoleCommandInput, AssociateEnvironmentOperationsRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CheckDNSAvailabilityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { CheckDNSAvailabilityMessage, CheckDNSAvailabilityResultMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface CheckDNSAvailabilityCommandInput extends CheckDNSAvailabilityMessage {
    }
    export interface CheckDNSAvailabilityCommandOutput extends CheckDNSAvailabilityResultMessage, __MetadataBearer {
    }
    /**
        * <p>Checks if the specified CNAME is available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, CheckDNSAvailabilityCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, CheckDNSAvailabilityCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new CheckDNSAvailabilityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CheckDNSAvailabilityCommandInput} for command's `input` shape.
        * @see {@link CheckDNSAvailabilityCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class CheckDNSAvailabilityCommand extends $Command<CheckDNSAvailabilityCommandInput, CheckDNSAvailabilityCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: CheckDNSAvailabilityCommandInput;
            constructor(input: CheckDNSAvailabilityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CheckDNSAvailabilityCommandInput, CheckDNSAvailabilityCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ComposeEnvironmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ComposeEnvironmentsMessage, EnvironmentDescriptionsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface ComposeEnvironmentsCommandInput extends ComposeEnvironmentsMessage {
    }
    export interface ComposeEnvironmentsCommandOutput extends EnvironmentDescriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Create or update a group of environments that each run a separate component of a single
        *       application. Takes a list of version labels that specify application source bundles for each
        *       of the environments to create or update. The name of each environment and other required
        *       information must be included in the source bundles in an environment manifest named
        *       <code>env.yaml</code>. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html">Compose Environments</a>
        *       for details.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, ComposeEnvironmentsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, ComposeEnvironmentsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new ComposeEnvironmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ComposeEnvironmentsCommandInput} for command's `input` shape.
        * @see {@link ComposeEnvironmentsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class ComposeEnvironmentsCommand extends $Command<ComposeEnvironmentsCommandInput, ComposeEnvironmentsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: ComposeEnvironmentsCommandInput;
            constructor(input: ComposeEnvironmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ComposeEnvironmentsCommandInput, ComposeEnvironmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplicationDescriptionMessage, CreateApplicationMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface CreateApplicationCommandInput extends CreateApplicationMessage {
    }
    export interface CreateApplicationCommandOutput extends ApplicationDescriptionMessage, __MetadataBearer {
    }
    /**
        * <p>Creates an application that has one configuration template named <code>default</code>
        *       and no application versions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, CreateApplicationCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, CreateApplicationCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new CreateApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApplicationCommandInput} for command's `input` shape.
        * @see {@link CreateApplicationCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class CreateApplicationCommand extends $Command<CreateApplicationCommandInput, CreateApplicationCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: CreateApplicationCommandInput;
            constructor(input: CreateApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApplicationCommandInput, CreateApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateApplicationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplicationVersionDescriptionMessage, CreateApplicationVersionMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface CreateApplicationVersionCommandInput extends CreateApplicationVersionMessage {
    }
    export interface CreateApplicationVersionCommandOutput extends ApplicationVersionDescriptionMessage, __MetadataBearer {
    }
    /**
        * <p>Creates an application version for the specified application. You can create an
        *       application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the
        *       output of an AWS CodeBuild build as follows:</p>
        *          <p>Specify a commit in an AWS CodeCommit repository with
        *         <code>SourceBuildInformation</code>.</p>
        *          <p>Specify a build in an AWS CodeBuild with <code>SourceBuildInformation</code> and
        *         <code>BuildConfiguration</code>.</p>
        *          <p>Specify a source bundle in S3 with <code>SourceBundle</code>
        *          </p>
        *          <p>Omit both <code>SourceBuildInformation</code> and <code>SourceBundle</code> to use the
        *       default sample application.</p>
        *          <note>
        *             <p>After you create an application version with a specified Amazon S3 bucket and key
        *         location, you can't change that Amazon S3 location. If you change the Amazon S3 location,
        *         you receive an exception when you attempt to launch an environment from the application
        *         version.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, CreateApplicationVersionCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, CreateApplicationVersionCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new CreateApplicationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApplicationVersionCommandInput} for command's `input` shape.
        * @see {@link CreateApplicationVersionCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class CreateApplicationVersionCommand extends $Command<CreateApplicationVersionCommandInput, CreateApplicationVersionCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: CreateApplicationVersionCommandInput;
            constructor(input: CreateApplicationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApplicationVersionCommandInput, CreateApplicationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ConfigurationSettingsDescription, CreateConfigurationTemplateMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface CreateConfigurationTemplateCommandInput extends CreateConfigurationTemplateMessage {
    }
    export interface CreateConfigurationTemplateCommandOutput extends ConfigurationSettingsDescription, __MetadataBearer {
    }
    /**
        * <p>Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk
        *       application. You define application configuration settings in a configuration template. You
        *       can then use the configuration template to deploy different versions of the application with
        *       the same configuration settings.</p>
        *          <p>Templates aren't associated with any environment. The <code>EnvironmentName</code>
        *       response element is always <code>null</code>.</p>
        *          <p>Related Topics</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>DescribeConfigurationOptions</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeConfigurationSettings</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListAvailableSolutionStacks</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, CreateConfigurationTemplateCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, CreateConfigurationTemplateCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new CreateConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class CreateConfigurationTemplateCommand extends $Command<CreateConfigurationTemplateCommandInput, CreateConfigurationTemplateCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: CreateConfigurationTemplateCommandInput;
            constructor(input: CreateConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationTemplateCommandInput, CreateConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { CreateEnvironmentMessage, EnvironmentDescription } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface CreateEnvironmentCommandInput extends CreateEnvironmentMessage {
    }
    export interface CreateEnvironmentCommandOutput extends EnvironmentDescription, __MetadataBearer {
    }
    /**
        * <p>Launches an AWS Elastic Beanstalk environment for the specified application using the specified
        *       configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, CreateEnvironmentCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, CreateEnvironmentCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new CreateEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEnvironmentCommandInput} for command's `input` shape.
        * @see {@link CreateEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class CreateEnvironmentCommand extends $Command<CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: CreateEnvironmentCommandInput;
            constructor(input: CreateEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreatePlatformVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { CreatePlatformVersionRequest, CreatePlatformVersionResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface CreatePlatformVersionCommandInput extends CreatePlatformVersionRequest {
    }
    export interface CreatePlatformVersionCommandOutput extends CreatePlatformVersionResult, __MetadataBearer {
    }
    /**
        * <p>Create a new version of your custom platform.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, CreatePlatformVersionCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, CreatePlatformVersionCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new CreatePlatformVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePlatformVersionCommandInput} for command's `input` shape.
        * @see {@link CreatePlatformVersionCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class CreatePlatformVersionCommand extends $Command<CreatePlatformVersionCommandInput, CreatePlatformVersionCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: CreatePlatformVersionCommandInput;
            constructor(input: CreatePlatformVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePlatformVersionCommandInput, CreatePlatformVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateStorageLocationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { CreateStorageLocationResultMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface CreateStorageLocationCommandInput {
    }
    export interface CreateStorageLocationCommandOutput extends CreateStorageLocationResultMessage, __MetadataBearer {
    }
    /**
        * <p>Creates a bucket in Amazon S3 to store application versions, logs, and other files used
        *       by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the
        *       first time you create an environment in a region. If the storage location already exists,
        *         <code>CreateStorageLocation</code> still returns the bucket name but does not create a new
        *       bucket.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, CreateStorageLocationCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, CreateStorageLocationCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new CreateStorageLocationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStorageLocationCommandInput} for command's `input` shape.
        * @see {@link CreateStorageLocationCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class CreateStorageLocationCommand extends $Command<CreateStorageLocationCommandInput, CreateStorageLocationCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: CreateStorageLocationCommandInput;
            constructor(input: CreateStorageLocationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStorageLocationCommandInput, CreateStorageLocationCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DeleteApplicationMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DeleteApplicationCommandInput extends DeleteApplicationMessage {
    }
    export interface DeleteApplicationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified application along with all associated versions and
        *       configurations. The application versions will not be deleted from your Amazon S3
        *       bucket.</p>
        *          <note>
        *             <p>You cannot delete an application that has a running environment.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DeleteApplicationCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DeleteApplicationCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DeleteApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApplicationCommandInput} for command's `input` shape.
        * @see {@link DeleteApplicationCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DeleteApplicationCommand extends $Command<DeleteApplicationCommandInput, DeleteApplicationCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DeleteApplicationCommandInput;
            constructor(input: DeleteApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApplicationCommandInput, DeleteApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteApplicationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DeleteApplicationVersionMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DeleteApplicationVersionCommandInput extends DeleteApplicationVersionMessage {
    }
    export interface DeleteApplicationVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified version from the specified application.</p>
        *          <note>
        *             <p>You cannot delete an application version that is associated with a running
        *         environment.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DeleteApplicationVersionCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DeleteApplicationVersionCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DeleteApplicationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApplicationVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteApplicationVersionCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DeleteApplicationVersionCommand extends $Command<DeleteApplicationVersionCommandInput, DeleteApplicationVersionCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DeleteApplicationVersionCommandInput;
            constructor(input: DeleteApplicationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApplicationVersionCommandInput, DeleteApplicationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DeleteConfigurationTemplateMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DeleteConfigurationTemplateCommandInput extends DeleteConfigurationTemplateMessage {
    }
    export interface DeleteConfigurationTemplateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified configuration template.</p>
        *          <note>
        *             <p>When you launch an environment using a configuration template, the environment gets a
        *         copy of the template. You can delete or modify the environment's copy of the template
        *         without affecting the running environment.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DeleteConfigurationTemplateCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DeleteConfigurationTemplateCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DeleteConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DeleteConfigurationTemplateCommand extends $Command<DeleteConfigurationTemplateCommandInput, DeleteConfigurationTemplateCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DeleteConfigurationTemplateCommandInput;
            constructor(input: DeleteConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationTemplateCommandInput, DeleteConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteEnvironmentConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DeleteEnvironmentConfigurationMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DeleteEnvironmentConfigurationCommandInput extends DeleteEnvironmentConfigurationMessage {
    }
    export interface DeleteEnvironmentConfigurationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the draft configuration associated with the running environment.</p>
        *          <p>Updating a running environment with any configuration changes creates a draft
        *       configuration set. You can get the draft configuration using <a>DescribeConfigurationSettings</a> while the update is in progress or if the update
        *       fails. The <code>DeploymentStatus</code> for the draft configuration indicates whether the
        *       deployment is in process or has failed. The draft configuration remains in existence until it
        *       is deleted with this action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DeleteEnvironmentConfigurationCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DeleteEnvironmentConfigurationCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DeleteEnvironmentConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEnvironmentConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteEnvironmentConfigurationCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DeleteEnvironmentConfigurationCommand extends $Command<DeleteEnvironmentConfigurationCommandInput, DeleteEnvironmentConfigurationCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DeleteEnvironmentConfigurationCommandInput;
            constructor(input: DeleteEnvironmentConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEnvironmentConfigurationCommandInput, DeleteEnvironmentConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeletePlatformVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DeletePlatformVersionRequest, DeletePlatformVersionResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DeletePlatformVersionCommandInput extends DeletePlatformVersionRequest {
    }
    export interface DeletePlatformVersionCommandOutput extends DeletePlatformVersionResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified version of a custom platform.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DeletePlatformVersionCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DeletePlatformVersionCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DeletePlatformVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePlatformVersionCommandInput} for command's `input` shape.
        * @see {@link DeletePlatformVersionCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DeletePlatformVersionCommand extends $Command<DeletePlatformVersionCommandInput, DeletePlatformVersionCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DeletePlatformVersionCommandInput;
            constructor(input: DeletePlatformVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePlatformVersionCommandInput, DeletePlatformVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeAccountAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeAccountAttributesResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeAccountAttributesCommandInput {
    }
    export interface DescribeAccountAttributesCommandOutput extends DescribeAccountAttributesResult, __MetadataBearer {
    }
    /**
        * <p>Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS
        *       account.</p>
        *          <p>The result currently has one set of attributes—resource quotas.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeAccountAttributesCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeAccountAttributesCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeAccountAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountAttributesCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeAccountAttributesCommand extends $Command<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeAccountAttributesCommandInput;
            constructor(input: DescribeAccountAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeApplicationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplicationDescriptionsMessage, DescribeApplicationsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeApplicationsCommandInput extends DescribeApplicationsMessage {
    }
    export interface DescribeApplicationsCommandOutput extends ApplicationDescriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns the descriptions of existing applications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeApplicationsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeApplicationsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeApplicationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApplicationsCommandInput} for command's `input` shape.
        * @see {@link DescribeApplicationsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeApplicationsCommand extends $Command<DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeApplicationsCommandInput;
            constructor(input: DescribeApplicationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeApplicationVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplicationVersionDescriptionsMessage, DescribeApplicationVersionsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeApplicationVersionsCommandInput extends DescribeApplicationVersionsMessage {
    }
    export interface DescribeApplicationVersionsCommandOutput extends ApplicationVersionDescriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Retrieve a list of application versions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeApplicationVersionsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeApplicationVersionsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeApplicationVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApplicationVersionsCommandInput} for command's `input` shape.
        * @see {@link DescribeApplicationVersionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeApplicationVersionsCommand extends $Command<DescribeApplicationVersionsCommandInput, DescribeApplicationVersionsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeApplicationVersionsCommandInput;
            constructor(input: DescribeApplicationVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApplicationVersionsCommandInput, DescribeApplicationVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeConfigurationOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ConfigurationOptionsDescription, DescribeConfigurationOptionsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeConfigurationOptionsCommandInput extends DescribeConfigurationOptionsMessage {
    }
    export interface DescribeConfigurationOptionsCommandOutput extends ConfigurationOptionsDescription, __MetadataBearer {
    }
    /**
        * <p>Describes the configuration options that are used in a particular configuration
        *       template or environment, or that a specified solution stack defines. The description includes
        *       the values the options, their default values, and an indication of the required action on a
        *       running environment if an option value is changed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeConfigurationOptionsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeConfigurationOptionsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeConfigurationOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationOptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationOptionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeConfigurationOptionsCommand extends $Command<DescribeConfigurationOptionsCommandInput, DescribeConfigurationOptionsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeConfigurationOptionsCommandInput;
            constructor(input: DescribeConfigurationOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationOptionsCommandInput, DescribeConfigurationOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeConfigurationSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ConfigurationSettingsDescriptions, DescribeConfigurationSettingsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeConfigurationSettingsCommandInput extends DescribeConfigurationSettingsMessage {
    }
    export interface DescribeConfigurationSettingsCommandOutput extends ConfigurationSettingsDescriptions, __MetadataBearer {
    }
    /**
        * <p>Returns a description of the settings for the specified configuration set, that is,
        *       either a configuration template or the configuration set associated with a running
        *       environment.</p>
        *          <p>When describing the settings for the configuration set associated with a running
        *       environment, it is possible to receive two sets of setting descriptions. One is the deployed
        *       configuration set, and the other is a draft configuration of an environment that is either in
        *       the process of deployment or that failed to deploy.</p>
        *          <p>Related Topics</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>DeleteEnvironmentConfiguration</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeConfigurationSettingsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeConfigurationSettingsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeConfigurationSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationSettingsCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationSettingsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeConfigurationSettingsCommand extends $Command<DescribeConfigurationSettingsCommandInput, DescribeConfigurationSettingsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeConfigurationSettingsCommandInput;
            constructor(input: DescribeConfigurationSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationSettingsCommandInput, DescribeConfigurationSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentHealthCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeEnvironmentHealthRequest, DescribeEnvironmentHealthResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeEnvironmentHealthCommandInput extends DescribeEnvironmentHealthRequest {
    }
    export interface DescribeEnvironmentHealthCommandOutput extends DescribeEnvironmentHealthResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the overall health of the specified environment. The
        *         <b>DescribeEnvironmentHealth</b> operation is only available with
        *       AWS Elastic Beanstalk Enhanced Health.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeEnvironmentHealthCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeEnvironmentHealthCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeEnvironmentHealthCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEnvironmentHealthCommandInput} for command's `input` shape.
        * @see {@link DescribeEnvironmentHealthCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeEnvironmentHealthCommand extends $Command<DescribeEnvironmentHealthCommandInput, DescribeEnvironmentHealthCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeEnvironmentHealthCommandInput;
            constructor(input: DescribeEnvironmentHealthCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEnvironmentHealthCommandInput, DescribeEnvironmentHealthCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentManagedActionHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeEnvironmentManagedActionHistoryRequest, DescribeEnvironmentManagedActionHistoryResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeEnvironmentManagedActionHistoryCommandInput extends DescribeEnvironmentManagedActionHistoryRequest {
    }
    export interface DescribeEnvironmentManagedActionHistoryCommandOutput extends DescribeEnvironmentManagedActionHistoryResult, __MetadataBearer {
    }
    /**
        * <p>Lists an environment's completed and failed managed actions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeEnvironmentManagedActionHistoryCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeEnvironmentManagedActionHistoryCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeEnvironmentManagedActionHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEnvironmentManagedActionHistoryCommandInput} for command's `input` shape.
        * @see {@link DescribeEnvironmentManagedActionHistoryCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeEnvironmentManagedActionHistoryCommand extends $Command<DescribeEnvironmentManagedActionHistoryCommandInput, DescribeEnvironmentManagedActionHistoryCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeEnvironmentManagedActionHistoryCommandInput;
            constructor(input: DescribeEnvironmentManagedActionHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEnvironmentManagedActionHistoryCommandInput, DescribeEnvironmentManagedActionHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentManagedActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeEnvironmentManagedActionsRequest, DescribeEnvironmentManagedActionsResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeEnvironmentManagedActionsCommandInput extends DescribeEnvironmentManagedActionsRequest {
    }
    export interface DescribeEnvironmentManagedActionsCommandOutput extends DescribeEnvironmentManagedActionsResult, __MetadataBearer {
    }
    /**
        * <p>Lists an environment's upcoming and in-progress managed actions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeEnvironmentManagedActionsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeEnvironmentManagedActionsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeEnvironmentManagedActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEnvironmentManagedActionsCommandInput} for command's `input` shape.
        * @see {@link DescribeEnvironmentManagedActionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeEnvironmentManagedActionsCommand extends $Command<DescribeEnvironmentManagedActionsCommandInput, DescribeEnvironmentManagedActionsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeEnvironmentManagedActionsCommandInput;
            constructor(input: DescribeEnvironmentManagedActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEnvironmentManagedActionsCommandInput, DescribeEnvironmentManagedActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeEnvironmentResourcesMessage, EnvironmentResourceDescriptionsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeEnvironmentResourcesCommandInput extends DescribeEnvironmentResourcesMessage {
    }
    export interface DescribeEnvironmentResourcesCommandOutput extends EnvironmentResourceDescriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns AWS resources for this environment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeEnvironmentResourcesCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeEnvironmentResourcesCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeEnvironmentResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEnvironmentResourcesCommandInput} for command's `input` shape.
        * @see {@link DescribeEnvironmentResourcesCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeEnvironmentResourcesCommand extends $Command<DescribeEnvironmentResourcesCommandInput, DescribeEnvironmentResourcesCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeEnvironmentResourcesCommandInput;
            constructor(input: DescribeEnvironmentResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEnvironmentResourcesCommandInput, DescribeEnvironmentResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeEnvironmentsMessage, EnvironmentDescriptionsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeEnvironmentsCommandInput extends DescribeEnvironmentsMessage {
    }
    export interface DescribeEnvironmentsCommandOutput extends EnvironmentDescriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns descriptions for existing environments.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeEnvironmentsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeEnvironmentsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeEnvironmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEnvironmentsCommandInput} for command's `input` shape.
        * @see {@link DescribeEnvironmentsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeEnvironmentsCommand extends $Command<DescribeEnvironmentsCommandInput, DescribeEnvironmentsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeEnvironmentsCommandInput;
            constructor(input: DescribeEnvironmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEnvironmentsCommandInput, DescribeEnvironmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeEventsMessage, EventDescriptionsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeEventsCommandInput extends DescribeEventsMessage {
    }
    export interface DescribeEventsCommandOutput extends EventDescriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns list of event descriptions matching criteria up to the last 6 weeks.</p>
        *          <note>
        *             <p>This action returns the most recent 1,000 events from the specified
        *           <code>NextToken</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeEventsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeEventsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeEventsCommand extends $Command<DescribeEventsCommandInput, DescribeEventsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeEventsCommandInput;
            constructor(input: DescribeEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventsCommandInput, DescribeEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeInstancesHealthCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribeInstancesHealthRequest, DescribeInstancesHealthResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribeInstancesHealthCommandInput extends DescribeInstancesHealthRequest {
    }
    export interface DescribeInstancesHealthCommandOutput extends DescribeInstancesHealthResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves detailed information about the health of instances in your AWS Elastic
        *       Beanstalk. This operation requires <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html">enhanced health
        *       reporting</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribeInstancesHealthCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribeInstancesHealthCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribeInstancesHealthCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInstancesHealthCommandInput} for command's `input` shape.
        * @see {@link DescribeInstancesHealthCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribeInstancesHealthCommand extends $Command<DescribeInstancesHealthCommandInput, DescribeInstancesHealthCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribeInstancesHealthCommandInput;
            constructor(input: DescribeInstancesHealthCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInstancesHealthCommandInput, DescribeInstancesHealthCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribePlatformVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DescribePlatformVersionRequest, DescribePlatformVersionResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DescribePlatformVersionCommandInput extends DescribePlatformVersionRequest {
    }
    export interface DescribePlatformVersionCommandOutput extends DescribePlatformVersionResult, __MetadataBearer {
    }
    /**
        * <p>Describes a platform version. Provides full details. Compare to <a>ListPlatformVersions</a>, which provides summary information about a list of
        *       platform versions.</p>
        *          <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
        *         Platforms Glossary</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DescribePlatformVersionCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DescribePlatformVersionCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DescribePlatformVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePlatformVersionCommandInput} for command's `input` shape.
        * @see {@link DescribePlatformVersionCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DescribePlatformVersionCommand extends $Command<DescribePlatformVersionCommandInput, DescribePlatformVersionCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DescribePlatformVersionCommandInput;
            constructor(input: DescribePlatformVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePlatformVersionCommandInput, DescribePlatformVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DisassociateEnvironmentOperationsRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { DisassociateEnvironmentOperationsRoleMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface DisassociateEnvironmentOperationsRoleCommandInput extends DisassociateEnvironmentOperationsRoleMessage {
    }
    export interface DisassociateEnvironmentOperationsRoleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses
        *       the caller's permissions for permissions to downstream services during subsequent calls acting
        *       on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
        *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, DisassociateEnvironmentOperationsRoleCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, DisassociateEnvironmentOperationsRoleCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new DisassociateEnvironmentOperationsRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateEnvironmentOperationsRoleCommandInput} for command's `input` shape.
        * @see {@link DisassociateEnvironmentOperationsRoleCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class DisassociateEnvironmentOperationsRoleCommand extends $Command<DisassociateEnvironmentOperationsRoleCommandInput, DisassociateEnvironmentOperationsRoleCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: DisassociateEnvironmentOperationsRoleCommandInput;
            constructor(input: DisassociateEnvironmentOperationsRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateEnvironmentOperationsRoleCommandInput, DisassociateEnvironmentOperationsRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListAvailableSolutionStacksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ListAvailableSolutionStacksResultMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface ListAvailableSolutionStacksCommandInput {
    }
    export interface ListAvailableSolutionStacksCommandOutput extends ListAvailableSolutionStacksResultMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the available solution stack names, with the public version first and
        *       then in reverse chronological order.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, ListAvailableSolutionStacksCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, ListAvailableSolutionStacksCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new ListAvailableSolutionStacksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAvailableSolutionStacksCommandInput} for command's `input` shape.
        * @see {@link ListAvailableSolutionStacksCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class ListAvailableSolutionStacksCommand extends $Command<ListAvailableSolutionStacksCommandInput, ListAvailableSolutionStacksCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: ListAvailableSolutionStacksCommandInput;
            constructor(input: ListAvailableSolutionStacksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAvailableSolutionStacksCommandInput, ListAvailableSolutionStacksCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListPlatformBranchesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ListPlatformBranchesRequest, ListPlatformBranchesResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface ListPlatformBranchesCommandInput extends ListPlatformBranchesRequest {
    }
    export interface ListPlatformBranchesCommandOutput extends ListPlatformBranchesResult, __MetadataBearer {
    }
    /**
        * <p>Lists the platform branches available for your account in an AWS Region. Provides
        *       summary information about each platform branch.</p>
        *          <p>For definitions of platform branch and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
        *         Platforms Glossary</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, ListPlatformBranchesCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, ListPlatformBranchesCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new ListPlatformBranchesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPlatformBranchesCommandInput} for command's `input` shape.
        * @see {@link ListPlatformBranchesCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class ListPlatformBranchesCommand extends $Command<ListPlatformBranchesCommandInput, ListPlatformBranchesCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: ListPlatformBranchesCommandInput;
            constructor(input: ListPlatformBranchesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPlatformBranchesCommandInput, ListPlatformBranchesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListPlatformVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ListPlatformVersionsRequest, ListPlatformVersionsResult } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface ListPlatformVersionsCommandInput extends ListPlatformVersionsRequest {
    }
    export interface ListPlatformVersionsCommandOutput extends ListPlatformVersionsResult, __MetadataBearer {
    }
    /**
        * <p>Lists the platform versions available for your account in an AWS Region. Provides
        *       summary information about each platform version. Compare to <a>DescribePlatformVersion</a>, which provides full details about a single platform
        *       version.</p>
        *          <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
        *         Platforms Glossary</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, ListPlatformVersionsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, ListPlatformVersionsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new ListPlatformVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPlatformVersionsCommandInput} for command's `input` shape.
        * @see {@link ListPlatformVersionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class ListPlatformVersionsCommand extends $Command<ListPlatformVersionsCommandInput, ListPlatformVersionsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: ListPlatformVersionsCommandInput;
            constructor(input: ListPlatformVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPlatformVersionsCommandInput, ListPlatformVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ListTagsForResourceMessage, ResourceTagsDescriptionMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceMessage {
    }
    export interface ListTagsForResourceCommandOutput extends ResourceTagsDescriptionMessage, __MetadataBearer {
    }
    /**
        * <p>Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.</p>
        *          <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
        *         <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
        *         Resources</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, ListTagsForResourceCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, ListTagsForResourceCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RebuildEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { RebuildEnvironmentMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface RebuildEnvironmentCommandInput extends RebuildEnvironmentMessage {
    }
    export interface RebuildEnvironmentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes and recreates all of the AWS resources (for example: the Auto Scaling group,
        *       load balancer, etc.) for a specified environment and forces a restart.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, RebuildEnvironmentCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, RebuildEnvironmentCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new RebuildEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebuildEnvironmentCommandInput} for command's `input` shape.
        * @see {@link RebuildEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class RebuildEnvironmentCommand extends $Command<RebuildEnvironmentCommandInput, RebuildEnvironmentCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: RebuildEnvironmentCommandInput;
            constructor(input: RebuildEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebuildEnvironmentCommandInput, RebuildEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RequestEnvironmentInfoCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { RequestEnvironmentInfoMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface RequestEnvironmentInfoCommandInput extends RequestEnvironmentInfoMessage {
    }
    export interface RequestEnvironmentInfoCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Initiates a request to compile the specified type of information of the deployed
        *       environment.</p>
        *          <p> Setting the <code>InfoType</code> to <code>tail</code> compiles the last lines from
        *       the application server log files of every Amazon EC2 instance in your environment. </p>
        *          <p> Setting the <code>InfoType</code> to <code>bundle</code> compresses the application
        *       server log files for every Amazon EC2 instance into a <code>.zip</code> file. Legacy and .NET
        *       containers do not support bundle logs. </p>
        *          <p> Use <a>RetrieveEnvironmentInfo</a> to obtain the set of logs. </p>
        *          <p>Related Topics</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>RetrieveEnvironmentInfo</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, RequestEnvironmentInfoCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, RequestEnvironmentInfoCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new RequestEnvironmentInfoCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RequestEnvironmentInfoCommandInput} for command's `input` shape.
        * @see {@link RequestEnvironmentInfoCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class RequestEnvironmentInfoCommand extends $Command<RequestEnvironmentInfoCommandInput, RequestEnvironmentInfoCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: RequestEnvironmentInfoCommandInput;
            constructor(input: RequestEnvironmentInfoCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RequestEnvironmentInfoCommandInput, RequestEnvironmentInfoCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RestartAppServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { RestartAppServerMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface RestartAppServerCommandInput extends RestartAppServerMessage {
    }
    export interface RestartAppServerCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Causes the environment to restart the application container server running on each
        *       Amazon EC2 instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, RestartAppServerCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, RestartAppServerCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new RestartAppServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestartAppServerCommandInput} for command's `input` shape.
        * @see {@link RestartAppServerCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class RestartAppServerCommand extends $Command<RestartAppServerCommandInput, RestartAppServerCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: RestartAppServerCommandInput;
            constructor(input: RestartAppServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestartAppServerCommandInput, RestartAppServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RetrieveEnvironmentInfoCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { RetrieveEnvironmentInfoMessage, RetrieveEnvironmentInfoResultMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface RetrieveEnvironmentInfoCommandInput extends RetrieveEnvironmentInfoMessage {
    }
    export interface RetrieveEnvironmentInfoCommandOutput extends RetrieveEnvironmentInfoResultMessage, __MetadataBearer {
    }
    /**
        * <p>Retrieves the compiled information from a <a>RequestEnvironmentInfo</a>
        *       request.</p>
        *          <p>Related Topics</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>RequestEnvironmentInfo</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, RetrieveEnvironmentInfoCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, RetrieveEnvironmentInfoCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new RetrieveEnvironmentInfoCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RetrieveEnvironmentInfoCommandInput} for command's `input` shape.
        * @see {@link RetrieveEnvironmentInfoCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class RetrieveEnvironmentInfoCommand extends $Command<RetrieveEnvironmentInfoCommandInput, RetrieveEnvironmentInfoCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: RetrieveEnvironmentInfoCommandInput;
            constructor(input: RetrieveEnvironmentInfoCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RetrieveEnvironmentInfoCommandInput, RetrieveEnvironmentInfoCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/SwapEnvironmentCNAMEsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { SwapEnvironmentCNAMEsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface SwapEnvironmentCNAMEsCommandInput extends SwapEnvironmentCNAMEsMessage {
    }
    export interface SwapEnvironmentCNAMEsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Swaps the CNAMEs of two environments.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, SwapEnvironmentCNAMEsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, SwapEnvironmentCNAMEsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new SwapEnvironmentCNAMEsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SwapEnvironmentCNAMEsCommandInput} for command's `input` shape.
        * @see {@link SwapEnvironmentCNAMEsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class SwapEnvironmentCNAMEsCommand extends $Command<SwapEnvironmentCNAMEsCommandInput, SwapEnvironmentCNAMEsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: SwapEnvironmentCNAMEsCommandInput;
            constructor(input: SwapEnvironmentCNAMEsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SwapEnvironmentCNAMEsCommandInput, SwapEnvironmentCNAMEsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/TerminateEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { EnvironmentDescription, TerminateEnvironmentMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface TerminateEnvironmentCommandInput extends TerminateEnvironmentMessage {
    }
    export interface TerminateEnvironmentCommandOutput extends EnvironmentDescription, __MetadataBearer {
    }
    /**
        * <p>Terminates the specified environment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, TerminateEnvironmentCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, TerminateEnvironmentCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new TerminateEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TerminateEnvironmentCommandInput} for command's `input` shape.
        * @see {@link TerminateEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class TerminateEnvironmentCommand extends $Command<TerminateEnvironmentCommandInput, TerminateEnvironmentCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: TerminateEnvironmentCommandInput;
            constructor(input: TerminateEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TerminateEnvironmentCommandInput, TerminateEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplicationDescriptionMessage, UpdateApplicationMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface UpdateApplicationCommandInput extends UpdateApplicationMessage {
    }
    export interface UpdateApplicationCommandOutput extends ApplicationDescriptionMessage, __MetadataBearer {
    }
    /**
        * <p>Updates the specified application to have the specified properties.</p>
        *          <note>
        *             <p>If a property (for example, <code>description</code>) is not provided, the value
        *         remains unchanged. To clear these properties, specify an empty string.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, UpdateApplicationCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, UpdateApplicationCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new UpdateApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApplicationCommandInput} for command's `input` shape.
        * @see {@link UpdateApplicationCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class UpdateApplicationCommand extends $Command<UpdateApplicationCommandInput, UpdateApplicationCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: UpdateApplicationCommandInput;
            constructor(input: UpdateApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApplicationCommandInput, UpdateApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationResourceLifecycleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplicationResourceLifecycleDescriptionMessage, UpdateApplicationResourceLifecycleMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface UpdateApplicationResourceLifecycleCommandInput extends UpdateApplicationResourceLifecycleMessage {
    }
    export interface UpdateApplicationResourceLifecycleCommandOutput extends ApplicationResourceLifecycleDescriptionMessage, __MetadataBearer {
    }
    /**
        * <p>Modifies lifecycle settings for an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, UpdateApplicationResourceLifecycleCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, UpdateApplicationResourceLifecycleCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new UpdateApplicationResourceLifecycleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApplicationResourceLifecycleCommandInput} for command's `input` shape.
        * @see {@link UpdateApplicationResourceLifecycleCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class UpdateApplicationResourceLifecycleCommand extends $Command<UpdateApplicationResourceLifecycleCommandInput, UpdateApplicationResourceLifecycleCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: UpdateApplicationResourceLifecycleCommandInput;
            constructor(input: UpdateApplicationResourceLifecycleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApplicationResourceLifecycleCommandInput, UpdateApplicationResourceLifecycleCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ApplicationVersionDescriptionMessage, UpdateApplicationVersionMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface UpdateApplicationVersionCommandInput extends UpdateApplicationVersionMessage {
    }
    export interface UpdateApplicationVersionCommandOutput extends ApplicationVersionDescriptionMessage, __MetadataBearer {
    }
    /**
        * <p>Updates the specified application version to have the specified properties.</p>
        *          <note>
        *             <p>If a property (for example, <code>description</code>) is not provided, the value
        *         remains unchanged. To clear properties, specify an empty string.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, UpdateApplicationVersionCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, UpdateApplicationVersionCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new UpdateApplicationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApplicationVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateApplicationVersionCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class UpdateApplicationVersionCommand extends $Command<UpdateApplicationVersionCommandInput, UpdateApplicationVersionCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: UpdateApplicationVersionCommandInput;
            constructor(input: UpdateApplicationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApplicationVersionCommandInput, UpdateApplicationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateConfigurationTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ConfigurationSettingsDescription, UpdateConfigurationTemplateMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface UpdateConfigurationTemplateCommandInput extends UpdateConfigurationTemplateMessage {
    }
    export interface UpdateConfigurationTemplateCommandOutput extends ConfigurationSettingsDescription, __MetadataBearer {
    }
    /**
        * <p>Updates the specified configuration template to have the specified properties or
        *       configuration option values.</p>
        *          <note>
        *             <p>If a property (for example, <code>ApplicationName</code>) is not provided, its value
        *         remains unchanged. To clear such properties, specify an empty string.</p>
        *          </note>
        *          <p>Related Topics</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>DescribeConfigurationOptions</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, UpdateConfigurationTemplateCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, UpdateConfigurationTemplateCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new UpdateConfigurationTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationTemplateCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class UpdateConfigurationTemplateCommand extends $Command<UpdateConfigurationTemplateCommandInput, UpdateConfigurationTemplateCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: UpdateConfigurationTemplateCommandInput;
            constructor(input: UpdateConfigurationTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationTemplateCommandInput, UpdateConfigurationTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { EnvironmentDescription, UpdateEnvironmentMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface UpdateEnvironmentCommandInput extends UpdateEnvironmentMessage {
    }
    export interface UpdateEnvironmentCommandOutput extends EnvironmentDescription, __MetadataBearer {
    }
    /**
        * <p>Updates the environment description, deploys a new application version, updates the
        *       configuration settings to an entirely new configuration template, or updates select
        *       configuration option values in the running environment.</p>
        *          <p> Attempting to update both the release and configuration is not allowed and AWS Elastic
        *       Beanstalk returns an <code>InvalidParameterCombination</code> error. </p>
        *          <p> When updating the configuration settings to a new template or individual settings, a
        *       draft configuration is created and <a>DescribeConfigurationSettings</a> for this
        *       environment returns two setting descriptions with different <code>DeploymentStatus</code>
        *       values. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, UpdateEnvironmentCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, UpdateEnvironmentCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new UpdateEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEnvironmentCommandInput} for command's `input` shape.
        * @see {@link UpdateEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class UpdateEnvironmentCommand extends $Command<UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: UpdateEnvironmentCommandInput;
            constructor(input: UpdateEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { UpdateTagsForResourceMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface UpdateTagsForResourceCommandInput extends UpdateTagsForResourceMessage {
    }
    export interface UpdateTagsForResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: <code>TagsToAdd</code>
        *       for tags to add or update, and <code>TagsToRemove</code>.</p>
        *          <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
        *       <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
        *         Resources</a>.</p>
        *          <p>If you create a custom IAM user policy to control permission to this operation, specify
        *       one of the following two virtual actions (or both) instead of the API operation name:</p>
        *          <dl>
        *             <dt>elasticbeanstalk:AddTags</dt>
        *             <dd>
        *                <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tags to add in the <code>TagsToAdd</code>
        *           parameter.</p>
        *             </dd>
        *             <dt>elasticbeanstalk:RemoveTags</dt>
        *             <dd>
        *                <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tag keys to remove in the <code>TagsToRemove</code>
        *           parameter.</p>
        *             </dd>
        *          </dl>
        *          <p>For details about creating a custom user policy, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies">Creating a Custom User Policy</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, UpdateTagsForResourceCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, UpdateTagsForResourceCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new UpdateTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link UpdateTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class UpdateTagsForResourceCommand extends $Command<UpdateTagsForResourceCommandInput, UpdateTagsForResourceCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: UpdateTagsForResourceCommandInput;
            constructor(input: UpdateTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTagsForResourceCommandInput, UpdateTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ValidateConfigurationSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient";
    import { ConfigurationSettingsValidationMessages, ValidateConfigurationSettingsMessage } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0";
    export interface ValidateConfigurationSettingsCommandInput extends ValidateConfigurationSettingsMessage {
    }
    export interface ValidateConfigurationSettingsCommandOutput extends ConfigurationSettingsValidationMessages, __MetadataBearer {
    }
    /**
        * <p>Takes a set of configuration settings and either a configuration template or
        *       environment, and determines whether those values are valid.</p>
        *          <p>This action returns a list of messages indicating any errors or warnings associated
        *       with the selection of option values.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticBeanstalkClient, ValidateConfigurationSettingsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
        * // const { ElasticBeanstalkClient, ValidateConfigurationSettingsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
        * const client = new ElasticBeanstalkClient(config);
        * const command = new ValidateConfigurationSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ValidateConfigurationSettingsCommandInput} for command's `input` shape.
        * @see {@link ValidateConfigurationSettingsCommandOutput} for command's `response` shape.
        * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
        *
        */
    export class ValidateConfigurationSettingsCommand extends $Command<ValidateConfigurationSettingsCommandInput, ValidateConfigurationSettingsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
            readonly input: ValidateConfigurationSettingsCommandInput;
            constructor(input: ValidateConfigurationSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ValidateConfigurationSettingsCommandInput, ValidateConfigurationSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/ElasticBeanstalkClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AbortEnvironmentUpdateCommandInput, AbortEnvironmentUpdateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/AbortEnvironmentUpdateCommand";
    import { ApplyEnvironmentManagedActionCommandInput, ApplyEnvironmentManagedActionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ApplyEnvironmentManagedActionCommand";
    import { AssociateEnvironmentOperationsRoleCommandInput, AssociateEnvironmentOperationsRoleCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/AssociateEnvironmentOperationsRoleCommand";
    import { CheckDNSAvailabilityCommandInput, CheckDNSAvailabilityCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CheckDNSAvailabilityCommand";
    import { ComposeEnvironmentsCommandInput, ComposeEnvironmentsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ComposeEnvironmentsCommand";
    import { CreateApplicationCommandInput, CreateApplicationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateApplicationCommand";
    import { CreateApplicationVersionCommandInput, CreateApplicationVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateApplicationVersionCommand";
    import { CreateConfigurationTemplateCommandInput, CreateConfigurationTemplateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateConfigurationTemplateCommand";
    import { CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateEnvironmentCommand";
    import { CreatePlatformVersionCommandInput, CreatePlatformVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreatePlatformVersionCommand";
    import { CreateStorageLocationCommandInput, CreateStorageLocationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/CreateStorageLocationCommand";
    import { DeleteApplicationCommandInput, DeleteApplicationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteApplicationCommand";
    import { DeleteApplicationVersionCommandInput, DeleteApplicationVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteApplicationVersionCommand";
    import { DeleteConfigurationTemplateCommandInput, DeleteConfigurationTemplateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteConfigurationTemplateCommand";
    import { DeleteEnvironmentConfigurationCommandInput, DeleteEnvironmentConfigurationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeleteEnvironmentConfigurationCommand";
    import { DeletePlatformVersionCommandInput, DeletePlatformVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DeletePlatformVersionCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeApplicationsCommandInput, DescribeApplicationsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeApplicationsCommand";
    import { DescribeApplicationVersionsCommandInput, DescribeApplicationVersionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeApplicationVersionsCommand";
    import { DescribeConfigurationOptionsCommandInput, DescribeConfigurationOptionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeConfigurationOptionsCommand";
    import { DescribeConfigurationSettingsCommandInput, DescribeConfigurationSettingsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeConfigurationSettingsCommand";
    import { DescribeEnvironmentHealthCommandInput, DescribeEnvironmentHealthCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentHealthCommand";
    import { DescribeEnvironmentManagedActionHistoryCommandInput, DescribeEnvironmentManagedActionHistoryCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentManagedActionHistoryCommand";
    import { DescribeEnvironmentManagedActionsCommandInput, DescribeEnvironmentManagedActionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentManagedActionsCommand";
    import { DescribeEnvironmentResourcesCommandInput, DescribeEnvironmentResourcesCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentResourcesCommand";
    import { DescribeEnvironmentsCommandInput, DescribeEnvironmentsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEnvironmentsCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeEventsCommand";
    import { DescribeInstancesHealthCommandInput, DescribeInstancesHealthCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribeInstancesHealthCommand";
    import { DescribePlatformVersionCommandInput, DescribePlatformVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DescribePlatformVersionCommand";
    import { DisassociateEnvironmentOperationsRoleCommandInput, DisassociateEnvironmentOperationsRoleCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/DisassociateEnvironmentOperationsRoleCommand";
    import { ListAvailableSolutionStacksCommandInput, ListAvailableSolutionStacksCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListAvailableSolutionStacksCommand";
    import { ListPlatformBranchesCommandInput, ListPlatformBranchesCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListPlatformBranchesCommand";
    import { ListPlatformVersionsCommandInput, ListPlatformVersionsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListPlatformVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ListTagsForResourceCommand";
    import { RebuildEnvironmentCommandInput, RebuildEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RebuildEnvironmentCommand";
    import { RequestEnvironmentInfoCommandInput, RequestEnvironmentInfoCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RequestEnvironmentInfoCommand";
    import { RestartAppServerCommandInput, RestartAppServerCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RestartAppServerCommand";
    import { RetrieveEnvironmentInfoCommandInput, RetrieveEnvironmentInfoCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/RetrieveEnvironmentInfoCommand";
    import { SwapEnvironmentCNAMEsCommandInput, SwapEnvironmentCNAMEsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/SwapEnvironmentCNAMEsCommand";
    import { TerminateEnvironmentCommandInput, TerminateEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/TerminateEnvironmentCommand";
    import { UpdateApplicationCommandInput, UpdateApplicationCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationCommand";
    import { UpdateApplicationResourceLifecycleCommandInput, UpdateApplicationResourceLifecycleCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationResourceLifecycleCommand";
    import { UpdateApplicationVersionCommandInput, UpdateApplicationVersionCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateApplicationVersionCommand";
    import { UpdateConfigurationTemplateCommandInput, UpdateConfigurationTemplateCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateConfigurationTemplateCommand";
    import { UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateEnvironmentCommand";
    import { UpdateTagsForResourceCommandInput, UpdateTagsForResourceCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/UpdateTagsForResourceCommand";
    import { ValidateConfigurationSettingsCommandInput, ValidateConfigurationSettingsCommandOutput } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/commands/ValidateConfigurationSettingsCommand";
    export type ServiceInputTypes = AbortEnvironmentUpdateCommandInput | ApplyEnvironmentManagedActionCommandInput | AssociateEnvironmentOperationsRoleCommandInput | CheckDNSAvailabilityCommandInput | ComposeEnvironmentsCommandInput | CreateApplicationCommandInput | CreateApplicationVersionCommandInput | CreateConfigurationTemplateCommandInput | CreateEnvironmentCommandInput | CreatePlatformVersionCommandInput | CreateStorageLocationCommandInput | DeleteApplicationCommandInput | DeleteApplicationVersionCommandInput | DeleteConfigurationTemplateCommandInput | DeleteEnvironmentConfigurationCommandInput | DeletePlatformVersionCommandInput | DescribeAccountAttributesCommandInput | DescribeApplicationVersionsCommandInput | DescribeApplicationsCommandInput | DescribeConfigurationOptionsCommandInput | DescribeConfigurationSettingsCommandInput | DescribeEnvironmentHealthCommandInput | DescribeEnvironmentManagedActionHistoryCommandInput | DescribeEnvironmentManagedActionsCommandInput | DescribeEnvironmentResourcesCommandInput | DescribeEnvironmentsCommandInput | DescribeEventsCommandInput | DescribeInstancesHealthCommandInput | DescribePlatformVersionCommandInput | DisassociateEnvironmentOperationsRoleCommandInput | ListAvailableSolutionStacksCommandInput | ListPlatformBranchesCommandInput | ListPlatformVersionsCommandInput | ListTagsForResourceCommandInput | RebuildEnvironmentCommandInput | RequestEnvironmentInfoCommandInput | RestartAppServerCommandInput | RetrieveEnvironmentInfoCommandInput | SwapEnvironmentCNAMEsCommandInput | TerminateEnvironmentCommandInput | UpdateApplicationCommandInput | UpdateApplicationResourceLifecycleCommandInput | UpdateApplicationVersionCommandInput | UpdateConfigurationTemplateCommandInput | UpdateEnvironmentCommandInput | UpdateTagsForResourceCommandInput | ValidateConfigurationSettingsCommandInput;
    export type ServiceOutputTypes = AbortEnvironmentUpdateCommandOutput | ApplyEnvironmentManagedActionCommandOutput | AssociateEnvironmentOperationsRoleCommandOutput | CheckDNSAvailabilityCommandOutput | ComposeEnvironmentsCommandOutput | CreateApplicationCommandOutput | CreateApplicationVersionCommandOutput | CreateConfigurationTemplateCommandOutput | CreateEnvironmentCommandOutput | CreatePlatformVersionCommandOutput | CreateStorageLocationCommandOutput | DeleteApplicationCommandOutput | DeleteApplicationVersionCommandOutput | DeleteConfigurationTemplateCommandOutput | DeleteEnvironmentConfigurationCommandOutput | DeletePlatformVersionCommandOutput | DescribeAccountAttributesCommandOutput | DescribeApplicationVersionsCommandOutput | DescribeApplicationsCommandOutput | DescribeConfigurationOptionsCommandOutput | DescribeConfigurationSettingsCommandOutput | DescribeEnvironmentHealthCommandOutput | DescribeEnvironmentManagedActionHistoryCommandOutput | DescribeEnvironmentManagedActionsCommandOutput | DescribeEnvironmentResourcesCommandOutput | DescribeEnvironmentsCommandOutput | DescribeEventsCommandOutput | DescribeInstancesHealthCommandOutput | DescribePlatformVersionCommandOutput | DisassociateEnvironmentOperationsRoleCommandOutput | ListAvailableSolutionStacksCommandOutput | ListPlatformBranchesCommandOutput | ListPlatformVersionsCommandOutput | ListTagsForResourceCommandOutput | RebuildEnvironmentCommandOutput | RequestEnvironmentInfoCommandOutput | RestartAppServerCommandOutput | RetrieveEnvironmentInfoCommandOutput | SwapEnvironmentCNAMEsCommandOutput | TerminateEnvironmentCommandOutput | UpdateApplicationCommandOutput | UpdateApplicationResourceLifecycleCommandOutput | UpdateApplicationVersionCommandOutput | UpdateConfigurationTemplateCommandOutput | UpdateEnvironmentCommandOutput | UpdateTagsForResourceCommandOutput | ValidateConfigurationSettingsCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ElasticBeanstalkClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ElasticBeanstalkClient class constructor that set the region, credentials and other options.
        */
    export interface ElasticBeanstalkClientConfig extends ElasticBeanstalkClientConfigType {
    }
    type ElasticBeanstalkClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ElasticBeanstalkClient class. This is resolved and normalized from the {@link ElasticBeanstalkClientConfig | constructor configuration interface}.
        */
    export interface ElasticBeanstalkClientResolvedConfig extends ElasticBeanstalkClientResolvedConfigType {
    }
    /**
        * <fullname>AWS Elastic Beanstalk</fullname>
        *
        *
        *          <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable,
        *       fault-tolerant applications running on the Amazon Web Services cloud.</p>
        *          <p>For more information about this product, go to the <a href="http://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a> details page. The location of the
        *       latest AWS Elastic Beanstalk WSDL is <a href="https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>.
        *       To install the Software Development Kits (SDKs), Integrated Development Environment (IDE)
        *       Toolkits, and command line tools that enable you to access the API, go to <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
        *          <p>
        *             <b>Endpoints</b>
        *          </p>
        *          <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to
        *         <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region">Regions and Endpoints</a> in the <i>Amazon Web Services
        *       Glossary</i>.</p>
        */
    export class ElasticBeanstalkClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ElasticBeanstalkClientResolvedConfig> {
            /**
                * The resolved configuration of ElasticBeanstalkClient class. This is resolved and normalized from the {@link ElasticBeanstalkClientConfig | constructor configuration interface}.
                */
            readonly config: ElasticBeanstalkClientResolvedConfig;
            constructor(configuration: ElasticBeanstalkClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ElasticBeanstalkServiceException as __BaseException } from "@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/ElasticBeanstalkServiceException";
    /**
        * <p></p>
        */
    export interface AbortEnvironmentUpdateMessage {
            /**
                * <p>This specifies the ID of the environment with the in-progress update that you want to
                *       cancel.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>This specifies the name of the environment with the in-progress update that you want to
                *       cancel.</p>
                */
            EnvironmentName?: string;
    }
    export namespace AbortEnvironmentUpdateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AbortEnvironmentUpdateMessage) => any;
    }
    /**
        * <p>The specified account does not have sufficient privileges for one or more AWS
        *       services.</p>
        */
    export class InsufficientPrivilegesException extends __BaseException {
            readonly name: "InsufficientPrivilegesException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientPrivilegesException, __BaseException>);
    }
    export type ActionHistoryStatus = "Completed" | "Failed" | "Unknown";
    export type ActionStatus = "Pending" | "Running" | "Scheduled" | "Unknown";
    export type ActionType = "InstanceRefresh" | "PlatformUpdate" | "Unknown";
    /**
        * <p>A lifecycle rule that deletes application versions after the specified number of
        *       days.</p>
        */
    export interface MaxAgeRule {
            /**
                * <p>Specify <code>true</code> to apply the rule, or <code>false</code> to disable
                *       it.</p>
                */
            Enabled: boolean | undefined;
            /**
                * <p>Specify the number of days to retain an application versions.</p>
                */
            MaxAgeInDays?: number;
            /**
                * <p>Set to <code>true</code> to delete a version's source bundle from Amazon S3 when
                *       Elastic Beanstalk deletes the application version.</p>
                */
            DeleteSourceFromS3?: boolean;
    }
    export namespace MaxAgeRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaxAgeRule) => any;
    }
    /**
        * <p>A lifecycle rule that deletes the oldest application version when the maximum count is
        *       exceeded.</p>
        */
    export interface MaxCountRule {
            /**
                * <p>Specify <code>true</code> to apply the rule, or <code>false</code> to disable
                *       it.</p>
                */
            Enabled: boolean | undefined;
            /**
                * <p>Specify the maximum number of application versions to retain.</p>
                */
            MaxCount?: number;
            /**
                * <p>Set to <code>true</code> to delete a version's source bundle from Amazon S3 when
                *       Elastic Beanstalk deletes the application version.</p>
                */
            DeleteSourceFromS3?: boolean;
    }
    export namespace MaxCountRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaxCountRule) => any;
    }
    /**
        * <p>The application version lifecycle settings for an application. Defines the rules that
        *       Elastic Beanstalk applies to an application's versions in order to avoid hitting the
        *       per-region limit for application versions.</p>
        *          <p>When Elastic Beanstalk deletes an application version from its database, you can no
        *       longer deploy that version to an environment. The source bundle remains in S3 unless you
        *       configure the rule to delete it.</p>
        */
    export interface ApplicationVersionLifecycleConfig {
            /**
                * <p>Specify a max count rule to restrict the number of application versions that are
                *       retained for an application.</p>
                */
            MaxCountRule?: MaxCountRule;
            /**
                * <p>Specify a max age rule to restrict the length of time that application versions are
                *       retained for an application.</p>
                */
            MaxAgeRule?: MaxAgeRule;
    }
    export namespace ApplicationVersionLifecycleConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationVersionLifecycleConfig) => any;
    }
    /**
        * <p>The resource lifecycle configuration for an application. Defines lifecycle settings for
        *       resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes
        *       in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle
        *       settings for application versions.</p>
        */
    export interface ApplicationResourceLifecycleConfig {
            /**
                * <p>The ARN of an IAM service role that Elastic Beanstalk has permission to
                *       assume.</p>
                *          <p>The <code>ServiceRole</code> property is required the first time that you provide a
                *         <code>VersionLifecycleConfig</code> for the application in one of the supporting calls
                *         (<code>CreateApplication</code> or <code>UpdateApplicationResourceLifecycle</code>). After
                *       you provide it once, in either one of the calls, Elastic Beanstalk persists the Service Role with the
                *       application, and you don't need to specify it again in subsequent
                *         <code>UpdateApplicationResourceLifecycle</code> calls. You can, however, specify it in
                *       subsequent calls to change the Service Role to another value.</p>
                */
            ServiceRole?: string;
            /**
                * <p>Defines lifecycle settings for application versions.</p>
                */
            VersionLifecycleConfig?: ApplicationVersionLifecycleConfig;
    }
    export namespace ApplicationResourceLifecycleConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationResourceLifecycleConfig) => any;
    }
    /**
        * <p>Describes the properties of an application.</p>
        */
    export interface ApplicationDescription {
            /**
                * <p>The Amazon Resource Name (ARN) of the application.</p>
                */
            ApplicationArn?: string;
            /**
                * <p>The name of the application.</p>
                */
            ApplicationName?: string;
            /**
                * <p>User-defined description of the application.</p>
                */
            Description?: string;
            /**
                * <p>The date when the application was created.</p>
                */
            DateCreated?: Date;
            /**
                * <p>The date when the application was last modified.</p>
                */
            DateUpdated?: Date;
            /**
                * <p>The names of the versions for this application.</p>
                */
            Versions?: string[];
            /**
                * <p>The names of the configuration templates associated with this application.</p>
                */
            ConfigurationTemplates?: string[];
            /**
                * <p>The lifecycle settings for the application.</p>
                */
            ResourceLifecycleConfig?: ApplicationResourceLifecycleConfig;
    }
    export namespace ApplicationDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationDescription) => any;
    }
    /**
        * <p>Result message containing a single description of an application.</p>
        */
    export interface ApplicationDescriptionMessage {
            /**
                * <p> The <a>ApplicationDescription</a> of the application. </p>
                */
            Application?: ApplicationDescription;
    }
    export namespace ApplicationDescriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationDescriptionMessage) => any;
    }
    /**
        * <p>Result message containing a list of application descriptions.</p>
        */
    export interface ApplicationDescriptionsMessage {
            /**
                * <p>This parameter contains a list of <a>ApplicationDescription</a>.</p>
                */
            Applications?: ApplicationDescription[];
    }
    export namespace ApplicationDescriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationDescriptionsMessage) => any;
    }
    /**
        * <p>Represents the average latency for the slowest X percent of requests over the last 10
        *       seconds.</p>
        */
    export interface Latency {
            /**
                * <p>The average latency for the slowest 0.1 percent of requests over the last 10
                *       seconds.</p>
                */
            P999?: number;
            /**
                * <p>The average latency for the slowest 1 percent of requests over the last 10
                *       seconds.</p>
                */
            P99?: number;
            /**
                * <p>The average latency for the slowest 5 percent of requests over the last 10
                *       seconds.</p>
                */
            P95?: number;
            /**
                * <p>The average latency for the slowest 10 percent of requests over the last 10
                *       seconds.</p>
                */
            P90?: number;
            /**
                * <p>The average latency for the slowest 15 percent of requests over the last 10
                *       seconds.</p>
                */
            P85?: number;
            /**
                * <p>The average latency for the slowest 25 percent of requests over the last 10
                *       seconds.</p>
                */
            P75?: number;
            /**
                * <p>The average latency for the slowest 50 percent of requests over the last 10
                *       seconds.</p>
                */
            P50?: number;
            /**
                * <p>The average latency for the slowest 90 percent of requests over the last 10
                *       seconds.</p>
                */
            P10?: number;
    }
    export namespace Latency {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Latency) => any;
    }
    /**
        * <p>Represents the percentage of requests over the last 10 seconds that resulted in each
        *       type of status code response. For more information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">Status Code
        *       Definitions</a>.</p>
        */
    export interface StatusCodes {
            /**
                * <p>The percentage of requests over the last 10 seconds that resulted in a 2xx (200, 201,
                *       etc.) status code.</p>
                */
            Status2xx?: number;
            /**
                * <p>The percentage of requests over the last 10 seconds that resulted in a 3xx (300, 301,
                *       etc.) status code.</p>
                */
            Status3xx?: number;
            /**
                * <p>The percentage of requests over the last 10 seconds that resulted in a 4xx (400, 401,
                *       etc.) status code.</p>
                */
            Status4xx?: number;
            /**
                * <p>The percentage of requests over the last 10 seconds that resulted in a 5xx (500, 501,
                *       etc.) status code.</p>
                */
            Status5xx?: number;
    }
    export namespace StatusCodes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatusCodes) => any;
    }
    /**
        * <p>Application request metrics for an AWS Elastic Beanstalk environment.</p>
        */
    export interface ApplicationMetrics {
            /**
                * <p>The amount of time that the metrics cover (usually 10 seconds). For example, you might
                *       have 5 requests (<code>request_count</code>) within the most recent time slice of 10 seconds
                *         (<code>duration</code>).</p>
                */
            Duration?: number;
            /**
                * <p>Average number of requests handled by the web server per second over the last 10
                *       seconds.</p>
                */
            RequestCount?: number;
            /**
                * <p>Represents the percentage of requests over the last 10 seconds that resulted in each
                *       type of status code response.</p>
                */
            StatusCodes?: StatusCodes;
            /**
                * <p>Represents the average latency for the slowest X percent of requests over the last 10
                *       seconds. Latencies are in seconds with one millisecond resolution.</p>
                */
            Latency?: Latency;
    }
    export namespace ApplicationMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationMetrics) => any;
    }
    export interface ApplicationResourceLifecycleDescriptionMessage {
            /**
                * <p>The name of the application.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The lifecycle configuration.</p>
                */
            ResourceLifecycleConfig?: ApplicationResourceLifecycleConfig;
    }
    export namespace ApplicationResourceLifecycleDescriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationResourceLifecycleDescriptionMessage) => any;
    }
    export type SourceRepository = "CodeCommit" | "S3";
    export type SourceType = "Git" | "Zip";
    /**
        * <p>Location of the source code for an application version.</p>
        */
    export interface SourceBuildInformation {
            /**
                * <p>The type of repository.</p>
                *          <ul>
                *             <li>
                * 	              <p>
                *                   <code>Git</code>
                *                </p>
                *             </li>
                *             <li>
                * 	              <p>
                *                   <code>Zip</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            SourceType: SourceType | string | undefined;
            /**
                * <p>Location where the repository is stored.</p>
                *          <ul>
                *             <li>
                * 	              <p>
                *                   <code>CodeCommit</code>
                *                </p>
                *             </li>
                *             <li>
                * 	              <p>
                *                   <code>S3</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            SourceRepository: SourceRepository | string | undefined;
            /**
                * <p>The location of the source code, as a formatted string, depending on the value of <code>SourceRepository</code>
                *          </p>
                *         <ul>
                *             <li>
                * 	              <p>For <code>CodeCommit</code>,
                * 	the format is the repository name and commit ID, separated by a forward slash.
                * 	For example,
                * 	<code>my-git-repo/265cfa0cf6af46153527f55d6503ec030551f57a</code>.</p>
                *             </li>
                *             <li>
                * 	              <p>For <code>S3</code>,
                * 	the format is the S3 bucket name and object key, separated by a forward slash.
                * 	For example,
                * 	<code>my-s3-bucket/Folders/my-source-file</code>.</p>
                *             </li>
                *          </ul>
                */
            SourceLocation: string | undefined;
    }
    export namespace SourceBuildInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceBuildInformation) => any;
    }
    /**
        * <p>The bucket and key of an item stored in Amazon S3.</p>
        */
    export interface S3Location {
            /**
                * <p>The Amazon S3 bucket where the data is located.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The Amazon S3 key where the data is located.</p>
                */
            S3Key?: string;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    export type ApplicationVersionStatus = "Building" | "Failed" | "Processed" | "Processing" | "Unprocessed";
    /**
        * <p>Describes the properties of an application version.</p>
        */
    export interface ApplicationVersionDescription {
            /**
                * <p>The Amazon Resource Name (ARN) of the application version.</p>
                */
            ApplicationVersionArn?: string;
            /**
                * <p>The name of the application to which the application version belongs.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The description of the application version.</p>
                */
            Description?: string;
            /**
                * <p>A unique identifier for the application version.</p>
                */
            VersionLabel?: string;
            /**
                * <p>If the version's source code was retrieved from AWS CodeCommit, the location of the
                *       source code for the application version.</p>
                */
            SourceBuildInformation?: SourceBuildInformation;
            /**
                * <p>Reference to the artifact from the AWS CodeBuild build.</p>
                */
            BuildArn?: string;
            /**
                * <p>The storage location of the application version's source bundle in Amazon S3.</p>
                */
            SourceBundle?: S3Location;
            /**
                * <p>The creation date of the application version.</p>
                */
            DateCreated?: Date;
            /**
                * <p>The last modified date of the application version.</p>
                */
            DateUpdated?: Date;
            /**
                * <p>The processing status of the application version. Reflects the state of the application
                *       version during its creation. Many of the values are only applicable if you specified
                *         <code>True</code> for the <code>Process</code> parameter of the
                *         <code>CreateApplicationVersion</code> action. The following list describes the possible
                *       values.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Unprocessed</code> – Application version wasn't pre-processed or validated.
                *           Elastic Beanstalk will validate configuration files during deployment of the application version to an
                *         environment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Processing</code> – Elastic Beanstalk is currently processing the application version.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Building</code> – Application version is currently undergoing an AWS CodeBuild build.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Processed</code> – Elastic Beanstalk was successfully pre-processed and validated.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Failed</code> – Either the AWS CodeBuild build failed or configuration files didn't
                *           pass validation. This application version isn't usable.</p>
                *             </li>
                *          </ul>
                */
            Status?: ApplicationVersionStatus | string;
    }
    export namespace ApplicationVersionDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationVersionDescription) => any;
    }
    /**
        * <p>Result message wrapping a single description of an application version.</p>
        */
    export interface ApplicationVersionDescriptionMessage {
            /**
                * <p> The <a>ApplicationVersionDescription</a> of the application version.
                *     </p>
                */
            ApplicationVersion?: ApplicationVersionDescription;
    }
    export namespace ApplicationVersionDescriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationVersionDescriptionMessage) => any;
    }
    /**
        * <p>Result message wrapping a list of application version descriptions.</p>
        */
    export interface ApplicationVersionDescriptionsMessage {
            /**
                * <p>List of <code>ApplicationVersionDescription</code> objects sorted in order of
                *       creation.</p>
                */
            ApplicationVersions?: ApplicationVersionDescription[];
            /**
                * <p>In a paginated request, the token that you can pass in a subsequent request to get the
                *       next response page.</p>
                */
            NextToken?: string;
    }
    export namespace ApplicationVersionDescriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationVersionDescriptionsMessage) => any;
    }
    /**
        * <p>Request to execute a scheduled managed action immediately.</p>
        */
    export interface ApplyEnvironmentManagedActionRequest {
            /**
                * <p>The name of the target environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The environment ID of the target environment.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>The action ID of the scheduled managed action to execute.</p>
                */
            ActionId: string | undefined;
    }
    export namespace ApplyEnvironmentManagedActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyEnvironmentManagedActionRequest) => any;
    }
    /**
        * <p>The result message containing information about the managed action.</p>
        */
    export interface ApplyEnvironmentManagedActionResult {
            /**
                * <p>The action ID of the managed action.</p>
                */
            ActionId?: string;
            /**
                * <p>A description of the managed action.</p>
                */
            ActionDescription?: string;
            /**
                * <p>The type of managed action.</p>
                */
            ActionType?: ActionType | string;
            /**
                * <p>The status of the managed action.</p>
                */
            Status?: string;
    }
    export namespace ApplyEnvironmentManagedActionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyEnvironmentManagedActionResult) => any;
    }
    /**
        * <p>A generic service exception has occurred.</p>
        */
    export class ElasticBeanstalkServiceException extends __BaseException {
            readonly name: "ElasticBeanstalkServiceException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ElasticBeanstalkServiceException, __BaseException>);
    }
    /**
        * <p>Cannot modify the managed action in its current state.</p>
        */
    export class ManagedActionInvalidStateException extends __BaseException {
            readonly name: "ManagedActionInvalidStateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ManagedActionInvalidStateException, __BaseException>);
    }
    /**
        * <p>Request to add or change the operations role used by an environment.</p>
        */
    export interface AssociateEnvironmentOperationsRoleMessage {
            /**
                * <p>The name of the environment to which to set the operations role.</p>
                */
            EnvironmentName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's
                *       operations role.</p>
                */
            OperationsRole: string | undefined;
    }
    export namespace AssociateEnvironmentOperationsRoleMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateEnvironmentOperationsRoleMessage) => any;
    }
    /**
        * <p>Describes an Auto Scaling launch configuration.</p>
        */
    export interface AutoScalingGroup {
            /**
                * <p>The name of the <code>AutoScalingGroup</code> . </p>
                */
            Name?: string;
    }
    export namespace AutoScalingGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoScalingGroup) => any;
    }
    /**
        * <p>Describes the solution stack.</p>
        */
    export interface SolutionStackDescription {
            /**
                * <p>The name of the solution stack.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The permitted file types allowed for a solution stack.</p>
                */
            PermittedFileTypes?: string[];
    }
    export namespace SolutionStackDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SolutionStackDescription) => any;
    }
    /**
        * <p>Results message indicating whether a CNAME is available.</p>
        */
    export interface CheckDNSAvailabilityMessage {
            /**
                * <p>The prefix used when this CNAME is reserved.</p>
                */
            CNAMEPrefix: string | undefined;
    }
    export namespace CheckDNSAvailabilityMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckDNSAvailabilityMessage) => any;
    }
    /**
        * <p>Indicates if the specified CNAME is available.</p>
        */
    export interface CheckDNSAvailabilityResultMessage {
            /**
                * <p>Indicates if the specified CNAME is available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>true</code> : The CNAME is available.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>false</code> : The CNAME is not available.</p>
                *             </li>
                *          </ul>
                */
            Available?: boolean;
            /**
                * <p>The fully qualified CNAME to reserve when <a>CreateEnvironment</a> is called
                *       with the provided prefix.</p>
                */
            FullyQualifiedCNAME?: string;
    }
    export namespace CheckDNSAvailabilityResultMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckDNSAvailabilityResultMessage) => any;
    }
    /**
        * <p>Request to create or update a group of environments.</p>
        */
    export interface ComposeEnvironmentsMessage {
            /**
                * <p>The name of the application to which the specified source bundles belong.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The name of the group to which the target environments belong. Specify a group name
                *       only if the environment name defined in each target environment's manifest ends with a +
                *       (plus) character. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest
                *         (env.yaml)</a> for details.</p>
                */
            GroupName?: string;
            /**
                * <p>A list of version labels, specifying one or more application source bundles that belong
                *       to the target application. Each source bundle must include an environment manifest that
                *       specifies the name of the environment and the name of the solution stack to use, and
                *       optionally can specify environment links to create.</p>
                */
            VersionLabels?: string[];
    }
    export namespace ComposeEnvironmentsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComposeEnvironmentsMessage) => any;
    }
    /**
        * <p>A link to another environment, defined in the environment's manifest. Links provide
        *       connection information in system properties that can be used to connect to another environment
        *       in the same group. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest
        *         (env.yaml)</a> for details.</p>
        */
    export interface EnvironmentLink {
            /**
                * <p>The name of the link.</p>
                */
            LinkName?: string;
            /**
                * <p>The name of the linked environment (the dependency).</p>
                */
            EnvironmentName?: string;
    }
    export namespace EnvironmentLink {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentLink) => any;
    }
    export type EnvironmentHealth = "Green" | "Grey" | "Red" | "Yellow";
    export type EnvironmentHealthStatus = "Degraded" | "Info" | "NoData" | "Ok" | "Pending" | "Severe" | "Suspended" | "Unknown" | "Warning";
    /**
        * <p>Describes the properties of a Listener for the LoadBalancer.</p>
        */
    export interface Listener {
            /**
                * <p>The protocol that is used by the Listener.</p>
                */
            Protocol?: string;
            /**
                * <p>The port that is used by the Listener.</p>
                */
            Port?: number;
    }
    export namespace Listener {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Listener) => any;
    }
    /**
        * <p>Describes the details of a LoadBalancer.</p>
        */
    export interface LoadBalancerDescription {
            /**
                * <p>The name of the LoadBalancer.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>The domain name of the LoadBalancer.</p>
                */
            Domain?: string;
            /**
                * <p>A list of Listeners used by the LoadBalancer.</p>
                */
            Listeners?: Listener[];
    }
    export namespace LoadBalancerDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerDescription) => any;
    }
    /**
        * <p>Describes the AWS resources in use by this environment. This data is not live
        *       data.</p>
        */
    export interface EnvironmentResourcesDescription {
            /**
                * <p>Describes the LoadBalancer.</p>
                */
            LoadBalancer?: LoadBalancerDescription;
    }
    export namespace EnvironmentResourcesDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentResourcesDescription) => any;
    }
    export type EnvironmentStatus = "Aborting" | "Launching" | "LinkingFrom" | "LinkingTo" | "Ready" | "Terminated" | "Terminating" | "Updating";
    /**
        * <p>Describes the properties of an environment tier</p>
        */
    export interface EnvironmentTier {
            /**
                * <p>The name of this environment tier.</p>
                *          <p>Valid values:</p>
                *          <ul>
                *             <li>
                *                <p>For <i>Web server tier</i> – <code>WebServer</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For <i>Worker tier</i> – <code>Worker</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Name?: string;
            /**
                * <p>The type of this environment tier.</p>
                *          <p>Valid values:</p>
                *          <ul>
                *             <li>
                *                <p>For <i>Web server tier</i> – <code>Standard</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For <i>Worker tier</i> – <code>SQS/HTTP</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Type?: string;
            /**
                * <p>The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the
                *       latest compatible worker tier version.</p>
                *          <note>
                *             <p>This member is deprecated. Any specific version that you set may become out of date.
                *         We recommend leaving it unspecified.</p>
                *          </note>
                */
            Version?: string;
    }
    export namespace EnvironmentTier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentTier) => any;
    }
    /**
        * <p>Describes the properties of an environment.</p>
        */
    export interface EnvironmentDescription {
            /**
                * <p>The name of this environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The ID of this environment.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the application associated with this environment.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The application version deployed in this environment.</p>
                */
            VersionLabel?: string;
            /**
                * <p> The name of the <code>SolutionStack</code> deployed with this environment. </p>
                */
            SolutionStackName?: string;
            /**
                * <p>The ARN of the platform version.</p>
                */
            PlatformArn?: string;
            /**
                * <p>The name of the configuration template used to originally launch this
                *       environment.</p>
                */
            TemplateName?: string;
            /**
                * <p>Describes this environment.</p>
                */
            Description?: string;
            /**
                * <p>For load-balanced, autoscaling environments, the URL to the LoadBalancer. For
                *       single-instance environments, the IP address of the instance.</p>
                */
            EndpointURL?: string;
            /**
                * <p>The URL to the CNAME for this environment.</p>
                */
            CNAME?: string;
            /**
                * <p>The creation date for this environment.</p>
                */
            DateCreated?: Date;
            /**
                * <p>The last modified date for this environment.</p>
                */
            DateUpdated?: Date;
            /**
                * <p>The current operational status of the environment:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Launching</code>: Environment is in the process of initial deployment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Updating</code>: Environment is in the process of updating its configuration
                *           settings or application version.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Ready</code>: Environment is available to have an action performed on it, such as
                *           update or terminate.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Terminating</code>: Environment is in the shut-down process.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Terminated</code>: Environment is not running.</p>
                *             </li>
                *          </ul>
                */
            Status?: EnvironmentStatus | string;
            /**
                * <p>Indicates if there is an in-progress environment configuration update or application
                *       version deployment that you can cancel.</p>
                *          <p>
                *             <code>true:</code> There is an update in progress. </p>
                *          <p>
                *             <code>false:</code> There are no updates currently in progress. </p>
                */
            AbortableOperationInProgress?: boolean;
            /**
                * <p>Describes the health status of the environment. AWS Elastic Beanstalk indicates the
                *       failure levels for a running environment:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Red</code>: Indicates the environment is not responsive. Occurs when three or more
                *           consecutive failures occur for an environment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Yellow</code>: Indicates that something is wrong. Occurs when two consecutive
                *           failures occur for an environment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Green</code>: Indicates the environment is healthy and fully functional.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Grey</code>: Default health for a new environment. The environment is not fully
                *           launched and health checks have not started or health checks are suspended during an
                *             <code>UpdateEnvironment</code> or <code>RestartEnvironment</code> request.</p>
                *             </li>
                *          </ul>
                *          <p> Default: <code>Grey</code>
                *          </p>
                */
            Health?: EnvironmentHealth | string;
            /**
                * <p>Returns the health status of the application running in your environment. For more
                *       information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and
                *         Statuses</a>.</p>
                */
            HealthStatus?: EnvironmentHealthStatus | string;
            /**
                * <p>The description of the AWS resources used by this environment.</p>
                */
            Resources?: EnvironmentResourcesDescription;
            /**
                * <p>Describes the current tier of this environment.</p>
                */
            Tier?: EnvironmentTier;
            /**
                * <p>A list of links to other environments in the same group.</p>
                */
            EnvironmentLinks?: EnvironmentLink[];
            /**
                * <p>The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.</p>
                */
            EnvironmentArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the environment's operations role. For more information,
                *       see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                */
            OperationsRole?: string;
    }
    export namespace EnvironmentDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentDescription) => any;
    }
    /**
        * <p>Result message containing a list of environment descriptions.</p>
        */
    export interface EnvironmentDescriptionsMessage {
            /**
                * <p> Returns an <a>EnvironmentDescription</a> list. </p>
                */
            Environments?: EnvironmentDescription[];
            /**
                * <p>In a paginated request, the token that you can pass in a subsequent request to get the
                *       next response page.</p>
                */
            NextToken?: string;
    }
    export namespace EnvironmentDescriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentDescriptionsMessage) => any;
    }
    /**
        * <p>The specified account has reached its limit of environments.</p>
        */
    export class TooManyEnvironmentsException extends __BaseException {
            readonly name: "TooManyEnvironmentsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyEnvironmentsException, __BaseException>);
    }
    /**
        * <p>Describes a tag applied to a resource in an environment.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag.</p>
                */
            Key?: string;
            /**
                * <p>The value of the tag.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Request to create an application.</p>
        */
    export interface CreateApplicationMessage {
            /**
                * <p>The name of the application. Must be unique within your account.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>Your description of the application.</p>
                */
            Description?: string;
            /**
                * <p>Specifies an application resource lifecycle configuration to prevent your application
                *       from accumulating too many versions.</p>
                */
            ResourceLifecycleConfig?: ApplicationResourceLifecycleConfig;
            /**
                * <p>Specifies the tags applied to the application.</p>
                *          <p>Elastic Beanstalk applies these tags only to the application. Environments that you create in the
                *       application don't inherit the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateApplicationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApplicationMessage) => any;
    }
    /**
        * <p>The specified account has reached its limit of applications.</p>
        */
    export class TooManyApplicationsException extends __BaseException {
            readonly name: "TooManyApplicationsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyApplicationsException, __BaseException>);
    }
    /**
        * <p>AWS CodeBuild is not available in the specified region.</p>
        */
    export class CodeBuildNotInServiceRegionException extends __BaseException {
            readonly name: "CodeBuildNotInServiceRegionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CodeBuildNotInServiceRegionException, __BaseException>);
    }
    export enum ComputeType {
            BUILD_GENERAL1_LARGE = "BUILD_GENERAL1_LARGE",
            BUILD_GENERAL1_MEDIUM = "BUILD_GENERAL1_MEDIUM",
            BUILD_GENERAL1_SMALL = "BUILD_GENERAL1_SMALL"
    }
    /**
        * <p>Settings for an AWS CodeBuild build.</p>
        */
    export interface BuildConfiguration {
            /**
                * <p>The name of the artifact of the CodeBuild build.
                *     If provided, Elastic Beanstalk stores the build artifact in the S3 location
                *     <i>S3-bucket</i>/resources/<i>application-name</i>/codebuild/codebuild-<i>version-label</i>-<i>artifact-name</i>.zip.
                *     If not provided, Elastic Beanstalk stores the build artifact in the S3 location
                *     <i>S3-bucket</i>/resources/<i>application-name</i>/codebuild/codebuild-<i>version-label</i>.zip.
                *     </p>
                */
            ArtifactName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.</p>
                */
            CodeBuildServiceRole: string | undefined;
            /**
                * <p>Information about the compute resources the build project will use.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds</code>
                *                </p>
                *             </li>
                *             <li>
                * 	              <p>
                *                   <code>BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds</code>
                *                </p>
                *             </li>
                *             <li>
                * 	              <p>
                *                   <code>BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ComputeType?: ComputeType | string;
            /**
                * <p>The ID of the Docker image to use for this build project.</p>
                */
            Image: string | undefined;
            /**
                * <p>How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.</p>
                */
            TimeoutInMinutes?: number;
    }
    export namespace BuildConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BuildConfiguration) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateApplicationVersionMessage {
            /**
                * <p> The name of the application. If no application is found with this name, and
                *         <code>AutoCreateApplication</code> is <code>false</code>, returns an
                *         <code>InvalidParameterValue</code> error. </p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>A label identifying this version.</p>
                *          <p>Constraint: Must be unique per application. If an application version already exists
                *       with this label for the specified application, AWS Elastic Beanstalk returns an
                *         <code>InvalidParameterValue</code> error. </p>
                */
            VersionLabel: string | undefined;
            /**
                * <p>A description of this application version.</p>
                */
            Description?: string;
            /**
                * <p>Specify a commit in an AWS CodeCommit Git repository to use as the source code for the
                *       application version.</p>
                */
            SourceBuildInformation?: SourceBuildInformation;
            /**
                * <p>The Amazon S3 bucket and key that identify the location of the source bundle for this
                *       version.</p>
                *          <note>
                *             <p>The Amazon S3 bucket must be in the same region as the
                *       environment.</p>
                *          </note>
                *          <p>Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with
                *         <code>SourceBuildInformation</code>), but not both. If neither <code>SourceBundle</code> nor
                *         <code>SourceBuildInformation</code> are provided, Elastic Beanstalk uses a sample
                *       application.</p>
                */
            SourceBundle?: S3Location;
            /**
                * <p>Settings for an AWS CodeBuild build.</p>
                */
            BuildConfiguration?: BuildConfiguration;
            /**
                * <p>Set to <code>true</code> to create an application with the specified name if it doesn't
                *       already exist.</p>
                */
            AutoCreateApplication?: boolean;
            /**
                * <p>Pre-processes and validates the environment manifest (<code>env.yaml</code>) and
                *       configuration files (<code>*.config</code> files in the <code>.ebextensions</code> folder) in
                *       the source bundle. Validating configuration files can identify issues prior to deploying the
                *       application version to an environment.</p>
                *          <p>You must turn processing on for application versions that you create using AWS
                *       CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3,
                *       processing is optional.</p>
                *          <note>
                *             <p>The <code>Process</code> option validates Elastic Beanstalk configuration files. It
                *       doesn't validate your application's configuration files, like proxy server or Docker
                *       configuration.</p>
                *          </note>
                */
            Process?: boolean;
            /**
                * <p>Specifies the tags applied to the application version.</p>
                *          <p>Elastic Beanstalk applies these tags only to the application version. Environments that use the
                *       application version don't inherit the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateApplicationVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApplicationVersionMessage) => any;
    }
    /**
        * <p>The specified S3 bucket does not belong to the S3 region in which the service is
        *       running. The following regions are supported:</p>
        *          <ul>
        *             <li>
        * 	              <p>IAD/us-east-1</p>
        * 	           </li>
        *             <li>
        * 	              <p>PDX/us-west-2</p>
        * 	           </li>
        *             <li>
        * 	              <p>DUB/eu-west-1</p>
        * 	           </li>
        *          </ul>
        */
    export class S3LocationNotInServiceRegionException extends __BaseException {
            readonly name: "S3LocationNotInServiceRegionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<S3LocationNotInServiceRegionException, __BaseException>);
    }
    /**
        * <p>The specified account has reached its limit of application versions.</p>
        */
    export class TooManyApplicationVersionsException extends __BaseException {
            readonly name: "TooManyApplicationVersionsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyApplicationVersionsException, __BaseException>);
    }
    export type ConfigurationDeploymentStatus = "deployed" | "failed" | "pending";
    /**
        * <p>A specification identifying an individual configuration option along with its current
        *       value. For a list of possible namespaces and option values, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">Option Values</a> in the
        *       <i>AWS Elastic Beanstalk Developer Guide</i>. </p>
        */
    export interface ConfigurationOptionSetting {
            /**
                * <p>A unique resource name for the option setting. Use it for a time–based scaling configuration option.</p>
                */
            ResourceName?: string;
            /**
                * <p>A unique namespace that identifies the option's associated AWS resource.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the configuration option.</p>
                */
            OptionName?: string;
            /**
                * <p>The current value for the configuration option.</p>
                */
            Value?: string;
    }
    export namespace ConfigurationOptionSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationOptionSetting) => any;
    }
    /**
        * <p>Describes the settings for a configuration set.</p>
        */
    export interface ConfigurationSettingsDescription {
            /**
                * <p>The name of the solution stack this configuration set uses.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The ARN of the platform version.</p>
                */
            PlatformArn?: string;
            /**
                * <p>The name of the application associated with this configuration set.</p>
                */
            ApplicationName?: string;
            /**
                * <p> If not <code>null</code>, the name of the configuration template for this
                *       configuration set. </p>
                */
            TemplateName?: string;
            /**
                * <p>Describes this configuration set.</p>
                */
            Description?: string;
            /**
                * <p> If not <code>null</code>, the name of the environment for this configuration set.
                *     </p>
                */
            EnvironmentName?: string;
            /**
                * <p> If this configuration set is associated with an environment, the
                *         <code>DeploymentStatus</code> parameter indicates the deployment status of this
                *       configuration set: </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>null</code>: This configuration is not associated with a running
                *           environment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>pending</code>: This is a draft configuration that is not deployed to the associated
                *           environment but is in the process of deploying.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>deployed</code>: This is the configuration that is currently deployed to the
                *           associated running environment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>failed</code>: This is a draft configuration that failed to successfully
                *           deploy.</p>
                *             </li>
                *          </ul>
                */
            DeploymentStatus?: ConfigurationDeploymentStatus | string;
            /**
                * <p>The date (in UTC time) when this configuration set was created.</p>
                */
            DateCreated?: Date;
            /**
                * <p>The date (in UTC time) when this configuration set was last modified.</p>
                */
            DateUpdated?: Date;
            /**
                * <p>A list of the configuration options and their values in this configuration
                *       set.</p>
                */
            OptionSettings?: ConfigurationOptionSetting[];
    }
    export namespace ConfigurationSettingsDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationSettingsDescription) => any;
    }
    /**
        * <p>A specification for an environment configuration.</p>
        */
    export interface SourceConfiguration {
            /**
                * <p>The name of the application associated with the configuration.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The name of the configuration template.</p>
                */
            TemplateName?: string;
    }
    export namespace SourceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceConfiguration) => any;
    }
    /**
        * <p>Request to create a configuration template.</p>
        */
    export interface CreateConfigurationTemplateMessage {
            /**
                * <p>The name of the Elastic Beanstalk application to associate with this configuration
                *       template.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The name of the configuration template.</p>
                *          <p>Constraint: This name must be unique per application.</p>
                */
            TemplateName: string | undefined;
            /**
                * <p>The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For
                *       example, <code>64bit Amazon Linux 2013.09 running Tomcat 7 Java 7</code>. A solution stack
                *       specifies the operating system, runtime, and application server for a configuration template.
                *       It also determines the set of configuration options as well as the possible and default
                *       values. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html">Supported Platforms</a> in the
                *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                *          <p>You must specify <code>SolutionStackName</code> if you don't specify
                *         <code>PlatformArn</code>, <code>EnvironmentId</code>, or
                *       <code>SourceConfiguration</code>.</p>
                *          <p>Use the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html">
                *                <code>ListAvailableSolutionStacks</code>
                *             </a> API to obtain a list of available
                *       solution stacks.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the custom platform. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html"> Custom
                *         Platforms</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                *          <note>
                *
                *             <p>If you specify <code>PlatformArn</code>, then don't specify
                *           <code>SolutionStackName</code>.</p>
                *          </note>
                */
            PlatformArn?: string;
            /**
                * <p>An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified
                *       configuration template to create a new configuration.</p>
                *          <p>Values specified in <code>OptionSettings</code> override any values obtained from the
                *         <code>SourceConfiguration</code>.</p>
                *          <p>You must specify <code>SourceConfiguration</code> if you don't specify
                *         <code>PlatformArn</code>, <code>EnvironmentId</code>, or
                *       <code>SolutionStackName</code>.</p>
                *          <p>Constraint: If both solution stack name and source configuration are specified, the
                *       solution stack of the source configuration template must match the specified solution stack
                *       name.</p>
                */
            SourceConfiguration?: SourceConfiguration;
            /**
                * <p>The ID of an environment whose settings you want to use to create the configuration
                *       template. You must specify <code>EnvironmentId</code> if you don't specify
                *         <code>PlatformArn</code>, <code>SolutionStackName</code>, or
                *         <code>SourceConfiguration</code>.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>An optional description for this configuration.</p>
                */
            Description?: string;
            /**
                * <p>Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these
                *       values override the values obtained from the solution stack or the source configuration
                *       template. For a complete list of Elastic Beanstalk configuration options, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">Option Values</a> in the
                *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                */
            OptionSettings?: ConfigurationOptionSetting[];
            /**
                * <p>Specifies the tags applied to the configuration template.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateConfigurationTemplateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationTemplateMessage) => any;
    }
    /**
        * <p>The specified account has reached its limit of Amazon S3 buckets.</p>
        */
    export class TooManyBucketsException extends __BaseException {
            readonly name: "TooManyBucketsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyBucketsException, __BaseException>);
    }
    /**
        * <p>The specified account has reached its limit of configuration templates.</p>
        */
    export class TooManyConfigurationTemplatesException extends __BaseException {
            readonly name: "TooManyConfigurationTemplatesException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyConfigurationTemplatesException, __BaseException>);
    }
    /**
        * <p>A specification identifying an individual configuration option.</p>
        */
    export interface OptionSpecification {
            /**
                * <p>A unique resource name for a time-based scaling configuration option.</p>
                */
            ResourceName?: string;
            /**
                * <p>A unique namespace identifying the option's associated AWS resource.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the configuration option.</p>
                */
            OptionName?: string;
    }
    export namespace OptionSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionSpecification) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateEnvironmentMessage {
            /**
                * <p>The name of the application that is associated with this environment.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>A unique name for the environment.</p>
                *          <p>Constraint: Must be from 4 to 40 characters in length. The name can contain only
                *       letters, numbers, and hyphens. It can't start or end with a hyphen. This name must be unique
                *       within a region in your account. If the specified name already exists in the region, Elastic Beanstalk returns an
                *         <code>InvalidParameterValue</code> error. </p>
                *          <p>If you don't specify the <code>CNAMEPrefix</code> parameter, the environment name becomes part of
                *       the CNAME, and therefore part of the visible URL for your application.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The name of the group to which the target environment belongs. Specify a group name
                *       only if the environment's name is specified in an environment manifest and not with the
                *       environment name parameter. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest
                *         (env.yaml)</a> for details.</p>
                */
            GroupName?: string;
            /**
                * <p>Your description for this environment.</p>
                */
            Description?: string;
            /**
                * <p>If specified, the environment attempts to use this value as the prefix for the CNAME in
                *       your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by
                *       appending a random alphanumeric string to the environment name.</p>
                */
            CNAMEPrefix?: string;
            /**
                * <p>Specifies the tier to use in creating this environment. The environment tier that you
                *       choose determines whether Elastic Beanstalk provisions resources to support a web application that handles
                *       HTTP(S) requests or a web application that handles background-processing tasks.</p>
                */
            Tier?: EnvironmentTier;
            /**
                * <p>Specifies the tags applied to resources in the environment.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The name of the application version to deploy.</p>
                *          <p>Default: If not specified, Elastic Beanstalk attempts to deploy the sample application.</p>
                */
            VersionLabel?: string;
            /**
                * <p>The name of the Elastic Beanstalk configuration template to use with the environment.</p>
                *          <note>
                *             <p>If you specify <code>TemplateName</code>, then don't specify
                *           <code>SolutionStackName</code>.</p>
                *          </note>
                */
            TemplateName?: string;
            /**
                * <p>The name of an Elastic Beanstalk solution stack (platform version) to use with the environment. If
                *       specified, Elastic Beanstalk sets the configuration values to the default values associated with the
                *       specified solution stack. For a list of current solution stacks, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html">Elastic Beanstalk Supported Platforms</a> in the <i>AWS Elastic Beanstalk
                *         Platforms</i> guide.</p>
                *          <note>
                *             <p>If you specify <code>SolutionStackName</code>, don't specify <code>PlatformArn</code> or
                *           <code>TemplateName</code>.</p>
                *          </note>
                */
            SolutionStackName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the custom platform to use with the environment. For
                *       more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html">Custom Platforms</a> in the
                *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                *          <note>
                *
                *             <p>If you specify <code>PlatformArn</code>, don't specify
                *         <code>SolutionStackName</code>.</p>
                *          </note>
                */
            PlatformArn?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk sets the specified configuration options to the
                *       requested value in the configuration set for the new environment. These override the values
                *       obtained from the solution stack or the configuration template.</p>
                */
            OptionSettings?: ConfigurationOptionSetting[];
            /**
                * <p>A list of custom user-defined configuration options to remove from the configuration
                *       set for this new environment.</p>
                */
            OptionsToRemove?: OptionSpecification[];
            /**
                * <p>The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's
                *       operations role. If specified, Elastic Beanstalk uses the operations role for permissions to downstream
                *       services during this call and during subsequent calls acting on this environment. To specify
                *       an operations role, you must have the <code>iam:PassRole</code> permission for the role. For
                *       more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
                *         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
                */
            OperationsRole?: string;
    }
    export namespace CreateEnvironmentMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEnvironmentMessage) => any;
    }
    /**
        * <p>Request to create a new platform version.</p>
        */
    export interface CreatePlatformVersionRequest {
            /**
                * <p>The name of your custom platform.</p>
                */
            PlatformName: string | undefined;
            /**
                * <p>The number, such as 1.0.2, for the new platform version.</p>
                */
            PlatformVersion: string | undefined;
            /**
                * <p>The location of the platform definition archive in Amazon S3.</p>
                */
            PlatformDefinitionBundle: S3Location | undefined;
            /**
                * <p>The name of the builder environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The configuration option settings to apply to the builder environment.</p>
                */
            OptionSettings?: ConfigurationOptionSetting[];
            /**
                * <p>Specifies the tags applied to the new platform version.</p>
                *          <p>Elastic Beanstalk applies these tags only to the platform version. Environments that you create using
                *       the platform version don't inherit the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreatePlatformVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePlatformVersionRequest) => any;
    }
    /**
        * <p>The builder used to build the custom platform.</p>
        */
    export interface Builder {
            /**
                * <p>The ARN of the builder.</p>
                */
            ARN?: string;
    }
    export namespace Builder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Builder) => any;
    }
    export type PlatformStatus = "Creating" | "Deleted" | "Deleting" | "Failed" | "Ready";
    /**
        * <p>Summary information about a platform version.</p>
        */
    export interface PlatformSummary {
            /**
                * <p>The ARN of the platform version.</p>
                */
            PlatformArn?: string;
            /**
                * <p>The AWS account ID of the person who created the platform version.</p>
                */
            PlatformOwner?: string;
            /**
                * <p>The status of the platform version. You can create an environment from the platform
                *       version once it is ready.</p>
                */
            PlatformStatus?: PlatformStatus | string;
            /**
                * <p>The category of platform version.</p>
                */
            PlatformCategory?: string;
            /**
                * <p>The operating system used by the platform version.</p>
                */
            OperatingSystemName?: string;
            /**
                * <p>The version of the operating system used by the platform version.</p>
                */
            OperatingSystemVersion?: string;
            /**
                * <p>The tiers in which the platform version runs.</p>
                */
            SupportedTierList?: string[];
            /**
                * <p>The additions associated with the platform version.</p>
                */
            SupportedAddonList?: string[];
            /**
                * <p>The state of the platform version in its lifecycle.</p>
                *          <p>Possible values: <code>recommended</code> | empty</p>
                *          <p>If an empty value is returned, the platform version is supported but isn't the recommended
                *     one for its branch.</p>
                */
            PlatformLifecycleState?: string;
            /**
                * <p>The version string of the platform version.</p>
                */
            PlatformVersion?: string;
            /**
                * <p>The platform branch to which the platform version belongs.</p>
                */
            PlatformBranchName?: string;
            /**
                * <p>The state of the platform version's branch in its lifecycle.</p>
                *          <p>Possible values: <code>beta</code> | <code>supported</code> | <code>deprecated</code> |
                *         <code>retired</code>
                *          </p>
                */
            PlatformBranchLifecycleState?: string;
    }
    export namespace PlatformSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlatformSummary) => any;
    }
    export interface CreatePlatformVersionResult {
            /**
                * <p>Detailed information about the new version of the custom platform.</p>
                */
            PlatformSummary?: PlatformSummary;
            /**
                * <p>The builder used to create the custom platform.</p>
                */
            Builder?: Builder;
    }
    export namespace CreatePlatformVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePlatformVersionResult) => any;
    }
    /**
        * <p>You have exceeded the maximum number of allowed platforms associated with the account.</p>
        */
    export class TooManyPlatformsException extends __BaseException {
            readonly name: "TooManyPlatformsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyPlatformsException, __BaseException>);
    }
    /**
        * <p>Results of a <a>CreateStorageLocationResult</a> call.</p>
        */
    export interface CreateStorageLocationResultMessage {
            /**
                * <p>The name of the Amazon S3 bucket created.</p>
                */
            S3Bucket?: string;
    }
    export namespace CreateStorageLocationResultMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStorageLocationResultMessage) => any;
    }
    /**
        * <p>The specified account does not have a subscription to Amazon S3.</p>
        */
    export class S3SubscriptionRequiredException extends __BaseException {
            readonly name: "S3SubscriptionRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<S3SubscriptionRequiredException, __BaseException>);
    }
    /**
        * <p>Request to delete an application.</p>
        */
    export interface DeleteApplicationMessage {
            /**
                * <p>The name of the application to delete.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>When set to true, running environments will be terminated before deleting the
                *       application.</p>
                */
            TerminateEnvByForce?: boolean;
    }
    export namespace DeleteApplicationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApplicationMessage) => any;
    }
    /**
        * <p>Unable to perform the specified operation because another operation that effects an
        *       element in this activity is already in progress.</p>
        */
    export class OperationInProgressException extends __BaseException {
            readonly name: "OperationInProgressException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationInProgressException, __BaseException>);
    }
    /**
        * <p>Request to delete an application version.</p>
        */
    export interface DeleteApplicationVersionMessage {
            /**
                * <p>The name of the application to which the version belongs.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The label of the version to delete.</p>
                */
            VersionLabel: string | undefined;
            /**
                * <p>Set to <code>true</code> to delete the source bundle from your storage bucket.
                *       Otherwise, the application version is deleted only from Elastic Beanstalk and the source
                *       bundle remains in Amazon S3.</p>
                */
            DeleteSourceBundle?: boolean;
    }
    export namespace DeleteApplicationVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApplicationVersionMessage) => any;
    }
    /**
        * <p>Unable to delete the Amazon S3 source bundle associated with the application version.
        *       The application version was deleted successfully.</p>
        */
    export class SourceBundleDeletionException extends __BaseException {
            readonly name: "SourceBundleDeletionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SourceBundleDeletionException, __BaseException>);
    }
    /**
        * <p>Request to delete a configuration template.</p>
        */
    export interface DeleteConfigurationTemplateMessage {
            /**
                * <p>The name of the application to delete the configuration template from.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The name of the configuration template to delete.</p>
                */
            TemplateName: string | undefined;
    }
    export namespace DeleteConfigurationTemplateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationTemplateMessage) => any;
    }
    /**
        * <p>Request to delete a draft environment configuration.</p>
        */
    export interface DeleteEnvironmentConfigurationMessage {
            /**
                * <p>The name of the application the environment is associated with.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The name of the environment to delete the draft configuration from.</p>
                */
            EnvironmentName: string | undefined;
    }
    export namespace DeleteEnvironmentConfigurationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEnvironmentConfigurationMessage) => any;
    }
    export interface DeletePlatformVersionRequest {
            /**
                * <p>The ARN of the version of the custom platform.</p>
                */
            PlatformArn?: string;
    }
    export namespace DeletePlatformVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePlatformVersionRequest) => any;
    }
    export interface DeletePlatformVersionResult {
            /**
                * <p>Detailed information about the version of the custom platform.</p>
                */
            PlatformSummary?: PlatformSummary;
    }
    export namespace DeletePlatformVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePlatformVersionResult) => any;
    }
    /**
        * <p>You cannot delete the platform version because there are still environments running on it.</p>
        */
    export class PlatformVersionStillReferencedException extends __BaseException {
            readonly name: "PlatformVersionStillReferencedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PlatformVersionStillReferencedException, __BaseException>);
    }
    /**
        * <p>The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It
        *       reflects the resource's limits for this account.</p>
        */
    export interface ResourceQuota {
            /**
                * <p>The maximum number of instances of this Elastic Beanstalk resource type that an AWS account can
                *       use.</p>
                */
            Maximum?: number;
    }
    export namespace ResourceQuota {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceQuota) => any;
    }
    /**
        * <p>A set of per-resource AWS Elastic Beanstalk quotas associated with an AWS account. They reflect
        *       Elastic Beanstalk resource limits for this account.</p>
        */
    export interface ResourceQuotas {
            /**
                * <p>The quota for applications in the AWS account.</p>
                */
            ApplicationQuota?: ResourceQuota;
            /**
                * <p>The quota for application versions in the AWS account.</p>
                */
            ApplicationVersionQuota?: ResourceQuota;
            /**
                * <p>The quota for environments in the AWS account.</p>
                */
            EnvironmentQuota?: ResourceQuota;
            /**
                * <p>The quota for configuration templates in the AWS account.</p>
                */
            ConfigurationTemplateQuota?: ResourceQuota;
            /**
                * <p>The quota for custom platforms in the AWS account.</p>
                */
            CustomPlatformQuota?: ResourceQuota;
    }
    export namespace ResourceQuotas {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceQuotas) => any;
    }
    export interface DescribeAccountAttributesResult {
            /**
                * <p>The Elastic Beanstalk resource quotas associated with the calling AWS account.</p>
                */
            ResourceQuotas?: ResourceQuotas;
    }
    export namespace DescribeAccountAttributesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountAttributesResult) => any;
    }
    /**
        * <p>Request to describe one or more applications.</p>
        */
    export interface DescribeApplicationsMessage {
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include
                *       those with the specified names.</p>
                */
            ApplicationNames?: string[];
    }
    export namespace DescribeApplicationsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationsMessage) => any;
    }
    /**
        * <p>Request to describe application versions.</p>
        */
    export interface DescribeApplicationVersionsMessage {
            /**
                * <p>Specify an application name to show only application versions for that
                *       application.</p>
                */
            ApplicationName?: string;
            /**
                * <p>Specify a version label to show a specific application version.</p>
                */
            VersionLabels?: string[];
            /**
                * <p>For a paginated request. Specify a maximum number of application versions to include in
                *       each response.</p>
                *          <p>If no <code>MaxRecords</code> is specified, all available application versions are
                *       retrieved in a single response.</p>
                */
            MaxRecords?: number;
            /**
                * <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other
                *       parameter values must be identical to the ones specified in the initial request.</p>
                *          <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeApplicationVersionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationVersionsMessage) => any;
    }
    /**
        * <p>A regular expression representing a restriction on a string configuration option
        *       value.</p>
        */
    export interface OptionRestrictionRegex {
            /**
                * <p>The regular expression pattern that a string configuration option value with this
                *       restriction must match.</p>
                */
            Pattern?: string;
            /**
                * <p>A unique name representing this regular expression.</p>
                */
            Label?: string;
    }
    export namespace OptionRestrictionRegex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionRestrictionRegex) => any;
    }
    export type ConfigurationOptionValueType = "List" | "Scalar";
    /**
        * <p>Describes the possible values for a configuration option.</p>
        */
    export interface ConfigurationOptionDescription {
            /**
                * <p>A unique namespace identifying the option's associated AWS resource.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the configuration option.</p>
                */
            Name?: string;
            /**
                * <p>The default value for this configuration option.</p>
                */
            DefaultValue?: string;
            /**
                * <p>An indication of which action is required if the value for this configuration option
                *       changes:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>NoInterruption</code> : There is no interruption to the environment or application
                *           availability.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RestartEnvironment</code> : The environment is entirely restarted, all AWS resources
                *           are deleted and recreated, and the environment is unavailable during the
                *           process.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RestartApplicationServer</code> : The environment is available the entire time.
                *           However, a short application outage occurs when the application servers on the running
                *           Amazon EC2 instances are restarted.</p>
                *             </li>
                *          </ul>
                */
            ChangeSeverity?: string;
            /**
                * <p>An indication of whether the user defined this configuration option:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>true</code> : This configuration option was defined by the user. It is a valid
                *           choice for specifying if this as an <code>Option to Remove</code> when updating
                *           configuration settings. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>false</code> : This configuration was not defined by the user.</p>
                *             </li>
                *          </ul>
                *          <p> Constraint: You can remove only <code>UserDefined</code> options from a configuration. </p>
                *          <p> Valid Values: <code>true</code> | <code>false</code>
                *          </p>
                */
            UserDefined?: boolean;
            /**
                * <p>An indication of which type of values this option has and whether it is allowable to
                *       select one or more than one of the possible values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Scalar</code> : Values for this option are a single selection from the possible
                *           values, or an unformatted string, or numeric value governed by the
                *           <code>MIN/MAX/Regex</code> constraints.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>List</code> : Values for this option are multiple selections from the possible
                *           values.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Boolean</code> : Values for this option are either <code>true</code> or
                *           <code>false</code> .</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Json</code> : Values for this option are a JSON representation of a
                *           <code>ConfigDocument</code>.</p>
                *             </li>
                *          </ul>
                */
            ValueType?: ConfigurationOptionValueType | string;
            /**
                * <p>If specified, values for the configuration option are selected from this
                *       list.</p>
                */
            ValueOptions?: string[];
            /**
                * <p>If specified, the configuration option must be a numeric value greater than this
                *       value.</p>
                */
            MinValue?: number;
            /**
                * <p>If specified, the configuration option must be a numeric value less than this
                *       value.</p>
                */
            MaxValue?: number;
            /**
                * <p>If specified, the configuration option must be a string value no longer than this
                *       value.</p>
                */
            MaxLength?: number;
            /**
                * <p>If specified, the configuration option must be a string value that satisfies this
                *       regular expression.</p>
                */
            Regex?: OptionRestrictionRegex;
    }
    export namespace ConfigurationOptionDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationOptionDescription) => any;
    }
    /**
        * <p>Describes the settings for a specified configuration set.</p>
        */
    export interface ConfigurationOptionsDescription {
            /**
                * <p>The name of the solution stack these configuration options belong to.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The ARN of the platform version.</p>
                */
            PlatformArn?: string;
            /**
                * <p> A list of <a>ConfigurationOptionDescription</a>. </p>
                */
            Options?: ConfigurationOptionDescription[];
    }
    export namespace ConfigurationOptionsDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationOptionsDescription) => any;
    }
    /**
        * <p>Result message containing a list of application version descriptions.</p>
        */
    export interface DescribeConfigurationOptionsMessage {
            /**
                * <p>The name of the application associated with the configuration template or environment.
                *       Only needed if you want to describe the configuration options associated with either the
                *       configuration template or environment.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The name of the configuration template whose configuration options you want to
                *       describe.</p>
                */
            TemplateName?: string;
            /**
                * <p>The name of the environment whose configuration options you want to describe.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The name of the solution stack whose configuration options you want to
                *       describe.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The ARN of the custom platform.</p>
                */
            PlatformArn?: string;
            /**
                * <p>If specified, restricts the descriptions to only the specified options.</p>
                */
            Options?: OptionSpecification[];
    }
    export namespace DescribeConfigurationOptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationOptionsMessage) => any;
    }
    /**
        * <p>The results from a request to change the configuration settings of an
        *       environment.</p>
        */
    export interface ConfigurationSettingsDescriptions {
            /**
                * <p> A list of <a>ConfigurationSettingsDescription</a>. </p>
                */
            ConfigurationSettings?: ConfigurationSettingsDescription[];
    }
    export namespace ConfigurationSettingsDescriptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationSettingsDescriptions) => any;
    }
    /**
        * <p>Result message containing all of the configuration settings for a specified solution
        *       stack or configuration template.</p>
        */
    export interface DescribeConfigurationSettingsMessage {
            /**
                * <p>The application for the environment or configuration template.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The name of the configuration template to describe.</p>
                *          <p> Conditional: You must specify either this parameter or an EnvironmentName, but not
                *       both. If you specify both, AWS Elastic Beanstalk returns an
                *         <code>InvalidParameterCombination</code> error. If you do not specify either, AWS Elastic
                *       Beanstalk returns a <code>MissingRequiredParameter</code> error. </p>
                */
            TemplateName?: string;
            /**
                * <p>The name of the environment to describe.</p>
                *          <p> Condition: You must specify either this or a TemplateName, but not both. If you
                *       specify both, AWS Elastic Beanstalk returns an <code>InvalidParameterCombination</code> error.
                *       If you do not specify either, AWS Elastic Beanstalk returns
                *         <code>MissingRequiredParameter</code> error. </p>
                */
            EnvironmentName?: string;
    }
    export namespace DescribeConfigurationSettingsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationSettingsMessage) => any;
    }
    export enum EnvironmentHealthAttribute {
            All = "All",
            ApplicationMetrics = "ApplicationMetrics",
            Causes = "Causes",
            Color = "Color",
            HealthStatus = "HealthStatus",
            InstancesHealth = "InstancesHealth",
            RefreshedAt = "RefreshedAt",
            Status = "Status"
    }
    /**
        * <p>See the example below to learn how to create a request body.</p>
        */
    export interface DescribeEnvironmentHealthRequest {
            /**
                * <p>Specify the environment by name.</p>
                *          <p>You must specify either this or an EnvironmentName, or both.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>Specify the environment by ID.</p>
                *          <p>You must specify either this or an EnvironmentName, or both.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>Specify the response elements to return. To retrieve all attributes, set to
                *         <code>All</code>. If no attribute names are specified, returns the name of the
                *       environment.</p>
                */
            AttributeNames?: (EnvironmentHealthAttribute | string)[];
    }
    export namespace DescribeEnvironmentHealthRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentHealthRequest) => any;
    }
    /**
        * <p>Represents summary information about the health of an instance. For more information,
        *       see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.</p>
        */
    export interface InstanceHealthSummary {
            /**
                * <p>
                *             <b>Grey.</b> AWS Elastic Beanstalk and the health agent are
                *       reporting no data on an instance.</p>
                */
            NoData?: number;
            /**
                * <p>
                *             <b>Grey.</b> AWS Elastic Beanstalk and the health agent are
                *       reporting an insufficient amount of data on an instance.</p>
                */
            Unknown?: number;
            /**
                * <p>
                *             <b>Grey.</b> An operation is in progress on an instance within the
                *       command timeout.</p>
                */
            Pending?: number;
            /**
                * <p>
                *             <b>Green.</b> An instance is passing health checks and the health
                *       agent is not reporting any problems.</p>
                */
            Ok?: number;
            /**
                * <p>
                *             <b>Green.</b> An operation is in progress on an instance.</p>
                */
            Info?: number;
            /**
                * <p>
                *             <b>Yellow.</b> The health agent is reporting a moderate number of
                *       request failures or other issues for an instance or environment.</p>
                */
            Warning?: number;
            /**
                * <p>
                *             <b>Red.</b> The health agent is reporting a high number of request
                *       failures or other issues for an instance or environment.</p>
                */
            Degraded?: number;
            /**
                * <p>
                *             <b>Red.</b> The health agent is reporting a very high number of
                *       request failures or other issues for an instance or environment.</p>
                */
            Severe?: number;
    }
    export namespace InstanceHealthSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceHealthSummary) => any;
    }
    /**
        * <p>Health details for an AWS Elastic Beanstalk environment.</p>
        */
    export interface DescribeEnvironmentHealthResult {
            /**
                * <p>The environment's name.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health status</a> of the
                *       environment. For example, <code>Ok</code>.</p>
                */
            HealthStatus?: string;
            /**
                * <p>The environment's operational status. <code>Ready</code>, <code>Launching</code>,
                *         <code>Updating</code>, <code>Terminating</code>, or <code>Terminated</code>.</p>
                */
            Status?: EnvironmentHealth | string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health color</a> of the
                *       environment.</p>
                */
            Color?: string;
            /**
                * <p>Descriptions of the data that contributed to the environment's current health
                *       status.</p>
                */
            Causes?: string[];
            /**
                * <p>Application request metrics for the environment.</p>
                */
            ApplicationMetrics?: ApplicationMetrics;
            /**
                * <p>Summary health information for the instances in the environment.</p>
                */
            InstancesHealth?: InstanceHealthSummary;
            /**
                * <p>The date and time that the health information was retrieved.</p>
                */
            RefreshedAt?: Date;
    }
    export namespace DescribeEnvironmentHealthResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentHealthResult) => any;
    }
    /**
        * <p>One or more input parameters is not valid. Please correct the input parameters and try
        *       the operation again.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>Request to list completed and failed managed actions.</p>
        */
    export interface DescribeEnvironmentManagedActionHistoryRequest {
            /**
                * <p>The environment ID of the target environment.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the target environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The pagination token returned by a previous request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for a single request.</p>
                */
            MaxItems?: number;
    }
    export namespace DescribeEnvironmentManagedActionHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentManagedActionHistoryRequest) => any;
    }
    export type FailureType = "CancellationFailed" | "InternalFailure" | "InvalidEnvironmentState" | "PermissionsError" | "RollbackFailed" | "RollbackSuccessful" | "UpdateCancelled";
    /**
        * <p>The record of a completed or failed managed action.</p>
        */
    export interface ManagedActionHistoryItem {
            /**
                * <p>A unique identifier for the managed action.</p>
                */
            ActionId?: string;
            /**
                * <p>The type of the managed action.</p>
                */
            ActionType?: ActionType | string;
            /**
                * <p>A description of the managed action.</p>
                */
            ActionDescription?: string;
            /**
                * <p>If the action failed, the type of failure.</p>
                */
            FailureType?: FailureType | string;
            /**
                * <p>The status of the action.</p>
                */
            Status?: ActionHistoryStatus | string;
            /**
                * <p>If the action failed, a description of the failure.</p>
                */
            FailureDescription?: string;
            /**
                * <p>The date and time that the action started executing.</p>
                */
            ExecutedTime?: Date;
            /**
                * <p>The date and time that the action finished executing.</p>
                */
            FinishedTime?: Date;
    }
    export namespace ManagedActionHistoryItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedActionHistoryItem) => any;
    }
    /**
        * <p>A result message containing a list of completed and failed managed actions.</p>
        */
    export interface DescribeEnvironmentManagedActionHistoryResult {
            /**
                * <p>A list of completed and failed managed actions.</p>
                */
            ManagedActionHistoryItems?: ManagedActionHistoryItem[];
            /**
                * <p>A pagination token that you pass to <a>DescribeEnvironmentManagedActionHistory</a> to get the next page of
                *       results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEnvironmentManagedActionHistoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentManagedActionHistoryResult) => any;
    }
    /**
        * <p>Request to list an environment's upcoming and in-progress managed actions.</p>
        */
    export interface DescribeEnvironmentManagedActionsRequest {
            /**
                * <p>The name of the target environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The environment ID of the target environment.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>To show only actions with a particular status, specify a status.</p>
                */
            Status?: ActionStatus | string;
    }
    export namespace DescribeEnvironmentManagedActionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentManagedActionsRequest) => any;
    }
    /**
        * <p>The record of an upcoming or in-progress managed action.</p>
        */
    export interface ManagedAction {
            /**
                * <p>A unique identifier for the managed action.</p>
                */
            ActionId?: string;
            /**
                * <p>A description of the managed action.</p>
                */
            ActionDescription?: string;
            /**
                * <p>The type of managed action.</p>
                */
            ActionType?: ActionType | string;
            /**
                * <p>The status of the managed action. If the action is <code>Scheduled</code>, you can
                *       apply it immediately with <a>ApplyEnvironmentManagedAction</a>.</p>
                */
            Status?: ActionStatus | string;
            /**
                * <p>The start time of the maintenance window in which the managed action will
                *       execute.</p>
                */
            WindowStartTime?: Date;
    }
    export namespace ManagedAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedAction) => any;
    }
    /**
        * <p>The result message containing a list of managed actions.</p>
        */
    export interface DescribeEnvironmentManagedActionsResult {
            /**
                * <p>A list of upcoming and in-progress managed actions.</p>
                */
            ManagedActions?: ManagedAction[];
    }
    export namespace DescribeEnvironmentManagedActionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentManagedActionsResult) => any;
    }
    /**
        * <p>Request to describe the resources in an environment.</p>
        */
    export interface DescribeEnvironmentResourcesMessage {
            /**
                * <p>The ID of the environment to retrieve AWS resource usage data.</p>
                *          <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the environment to retrieve AWS resource usage data.</p>
                *          <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentName?: string;
    }
    export namespace DescribeEnvironmentResourcesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentResourcesMessage) => any;
    }
    /**
        * <p>The description of an Amazon EC2 instance.</p>
        */
    export interface Instance {
            /**
                * <p>The ID of the Amazon EC2 instance.</p>
                */
            Id?: string;
    }
    export namespace Instance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Instance) => any;
    }
    /**
        * <p>Describes an Auto Scaling launch configuration.</p>
        */
    export interface LaunchConfiguration {
            /**
                * <p>The name of the launch configuration.</p>
                */
            Name?: string;
    }
    export namespace LaunchConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchConfiguration) => any;
    }
    /**
        * <p>Describes an Amazon EC2 launch template.</p>
        */
    export interface LaunchTemplate {
            /**
                * <p>The ID of the launch template.</p>
                */
            Id?: string;
    }
    export namespace LaunchTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchTemplate) => any;
    }
    /**
        * <p>Describes a LoadBalancer.</p>
        */
    export interface LoadBalancer {
            /**
                * <p>The name of the LoadBalancer.</p>
                */
            Name?: string;
    }
    export namespace LoadBalancer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancer) => any;
    }
    /**
        * <p>Describes a queue.</p>
        */
    export interface Queue {
            /**
                * <p>The name of the queue.</p>
                */
            Name?: string;
            /**
                * <p>The URL of the queue.</p>
                */
            URL?: string;
    }
    export namespace Queue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Queue) => any;
    }
    /**
        * <p>Describes a trigger.</p>
        */
    export interface Trigger {
            /**
                * <p>The name of the trigger.</p>
                */
            Name?: string;
    }
    export namespace Trigger {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Trigger) => any;
    }
    /**
        * <p>Describes the AWS resources in use by this environment. This data is live.</p>
        */
    export interface EnvironmentResourceDescription {
            /**
                * <p>The name of the environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p> The <code>AutoScalingGroups</code> used by this environment. </p>
                */
            AutoScalingGroups?: AutoScalingGroup[];
            /**
                * <p>The Amazon EC2 instances used by this environment.</p>
                */
            Instances?: Instance[];
            /**
                * <p>The Auto Scaling launch configurations in use by this environment.</p>
                */
            LaunchConfigurations?: LaunchConfiguration[];
            /**
                * <p>The Amazon EC2 launch templates in use by this environment.</p>
                */
            LaunchTemplates?: LaunchTemplate[];
            /**
                * <p>The LoadBalancers in use by this environment.</p>
                */
            LoadBalancers?: LoadBalancer[];
            /**
                * <p>The <code>AutoScaling</code> triggers in use by this environment. </p>
                */
            Triggers?: Trigger[];
            /**
                * <p>The queues used by this environment.</p>
                */
            Queues?: Queue[];
    }
    export namespace EnvironmentResourceDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentResourceDescription) => any;
    }
    /**
        * <p>Result message containing a list of environment resource descriptions.</p>
        */
    export interface EnvironmentResourceDescriptionsMessage {
            /**
                * <p> A list of <a>EnvironmentResourceDescription</a>. </p>
                */
            EnvironmentResources?: EnvironmentResourceDescription;
    }
    export namespace EnvironmentResourceDescriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentResourceDescriptionsMessage) => any;
    }
    /**
        * <p>Request to describe one or more environments.</p>
        */
    export interface DescribeEnvironmentsMessage {
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only
                *       those that are associated with this application.</p>
                */
            ApplicationName?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only
                *       those that are associated with this application version.</p>
                */
            VersionLabel?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only
                *       those that have the specified IDs.</p>
                */
            EnvironmentIds?: string[];
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only
                *       those that have the specified names.</p>
                */
            EnvironmentNames?: string[];
            /**
                * <p>Indicates whether to include deleted environments:</p>
                *          <p>
                *             <code>true</code>: Environments that have been deleted after
                *       <code>IncludedDeletedBackTo</code> are displayed.</p>
                *          <p>
                *             <code>false</code>: Do not include deleted environments.</p>
                */
            IncludeDeleted?: boolean;
            /**
                * <p> If specified when <code>IncludeDeleted</code> is set to <code>true</code>, then
                *       environments deleted after this date are displayed. </p>
                */
            IncludedDeletedBackTo?: Date;
            /**
                * <p>For a paginated request. Specify a maximum number of environments to include in
                *       each response.</p>
                *          <p>If no <code>MaxRecords</code> is specified, all available environments are
                *       retrieved in a single response.</p>
                */
            MaxRecords?: number;
            /**
                * <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other
                *       parameter values must be identical to the ones specified in the initial request.</p>
                *          <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEnvironmentsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEnvironmentsMessage) => any;
    }
    export type EventSeverity = "DEBUG" | "ERROR" | "FATAL" | "INFO" | "TRACE" | "WARN";
    /**
        * <p>Request to retrieve a list of events for an environment.</p>
        */
    export interface DescribeEventsMessage {
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only
                *       those associated with this application.</p>
                */
            ApplicationName?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to those
                *       associated with this application version.</p>
                */
            VersionLabel?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that
                *       are associated with this environment configuration.</p>
                */
            TemplateName?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to those
                *       associated with this environment.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to those
                *       associated with this environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the
                *       returned descriptions to those associated with this custom platform version.</p>
                */
            PlatformArn?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the described events to include only
                *       those associated with this request ID.</p>
                */
            RequestId?: string;
            /**
                * <p>If specified, limits the events returned from this call to include only those with the
                *       specified severity or higher.</p>
                */
            Severity?: EventSeverity | string;
            /**
                * <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that
                *       occur on or after this time.</p>
                */
            StartTime?: Date;
            /**
                * <p> If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that
                *       occur up to, but not including, the <code>EndTime</code>. </p>
                */
            EndTime?: Date;
            /**
                * <p>Specifies the maximum number of events that can be returned, beginning with the most
                *       recent event.</p>
                */
            MaxRecords?: number;
            /**
                * <p>Pagination token. If specified, the events return the next batch of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEventsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsMessage) => any;
    }
    /**
        * <p>Describes an event.</p>
        */
    export interface EventDescription {
            /**
                * <p>The date when the event occurred.</p>
                */
            EventDate?: Date;
            /**
                * <p>The event message.</p>
                */
            Message?: string;
            /**
                * <p>The application associated with the event.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The release label for the application version associated with this event.</p>
                */
            VersionLabel?: string;
            /**
                * <p>The name of the configuration associated with this event.</p>
                */
            TemplateName?: string;
            /**
                * <p>The name of the environment associated with this event.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The ARN of the platform version.</p>
                */
            PlatformArn?: string;
            /**
                * <p>The web service request ID for the activity of this event.</p>
                */
            RequestId?: string;
            /**
                * <p>The severity level of this event.</p>
                */
            Severity?: EventSeverity | string;
    }
    export namespace EventDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventDescription) => any;
    }
    /**
        * <p>Result message wrapping a list of event descriptions.</p>
        */
    export interface EventDescriptionsMessage {
            /**
                * <p> A list of <a>EventDescription</a>. </p>
                */
            Events?: EventDescription[];
            /**
                * <p> If returned, this indicates that there are more results to obtain. Use this token in
                *       the next <a>DescribeEvents</a> call to get the next batch of events. </p>
                */
            NextToken?: string;
    }
    export namespace EventDescriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventDescriptionsMessage) => any;
    }
    export enum InstancesHealthAttribute {
            All = "All",
            ApplicationMetrics = "ApplicationMetrics",
            AvailabilityZone = "AvailabilityZone",
            Causes = "Causes",
            Color = "Color",
            Deployment = "Deployment",
            HealthStatus = "HealthStatus",
            InstanceType = "InstanceType",
            LaunchedAt = "LaunchedAt",
            RefreshedAt = "RefreshedAt",
            System = "System"
    }
    /**
        * <p>Parameters for a call to <code>DescribeInstancesHealth</code>.</p>
        */
    export interface DescribeInstancesHealthRequest {
            /**
                * <p>Specify the AWS Elastic Beanstalk environment by name.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>Specify the AWS Elastic Beanstalk environment by ID.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>Specifies the response elements you wish to receive. To retrieve all attributes, set to
                *         <code>All</code>. If no attribute names are specified, returns a list of
                *       instances.</p>
                */
            AttributeNames?: (InstancesHealthAttribute | string)[];
            /**
                * <p>Specify the pagination token returned by a previous call.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstancesHealthRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancesHealthRequest) => any;
    }
    /**
        * <p>Information about an application version deployment.</p>
        */
    export interface Deployment {
            /**
                * <p>The version label of the application version in the deployment.</p>
                */
            VersionLabel?: string;
            /**
                * <p>The ID of the deployment. This number increases by one each time that you deploy source
                *       code or change instance configuration settings.</p>
                */
            DeploymentId?: number;
            /**
                * <p>The status of the deployment:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>In Progress</code> : The deployment is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Deployed</code> : The deployment succeeded.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Failed</code> : The deployment failed.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>For in-progress deployments, the time that the deployment started.</p>
                *          <p>For completed deployments, the time that the deployment ended.</p>
                */
            DeploymentTime?: Date;
    }
    export namespace Deployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployment) => any;
    }
    /**
        * <p>CPU utilization metrics for an instance.</p>
        */
    export interface CPUUtilization {
            /**
                * <p>Percentage of time that the CPU has spent in the <code>User</code> state over the last
                *       10 seconds.</p>
                */
            User?: number;
            /**
                * <p>Available on Linux environments only.</p>
                *          <p>Percentage of time that the CPU has spent in the <code>Nice</code> state over the last
                *       10 seconds.</p>
                */
            Nice?: number;
            /**
                * <p>Available on Linux environments only.</p>
                *          <p>Percentage of time that the CPU has spent in the <code>System</code> state over the
                *       last 10 seconds.</p>
                */
            System?: number;
            /**
                * <p>Percentage of time that the CPU has spent in the <code>Idle</code> state over the last
                *       10 seconds.</p>
                */
            Idle?: number;
            /**
                * <p>Available on Linux environments only.</p>
                *          <p>Percentage of time that the CPU has spent in the <code>I/O Wait</code> state over the
                *       last 10 seconds.</p>
                */
            IOWait?: number;
            /**
                * <p>Available on Linux environments only.</p>
                *          <p>Percentage of time that the CPU has spent in the <code>IRQ</code> state over the last
                *       10 seconds.</p>
                */
            IRQ?: number;
            /**
                * <p>Available on Linux environments only.</p>
                *          <p>Percentage of time that the CPU has spent in the <code>SoftIRQ</code> state over the
                *       last 10 seconds.</p>
                */
            SoftIRQ?: number;
            /**
                * <p>Available on Windows environments only.</p>
                *          <p>Percentage of time that the CPU has spent in the <code>Privileged</code> state over the
                *       last 10 seconds.</p>
                */
            Privileged?: number;
    }
    export namespace CPUUtilization {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CPUUtilization) => any;
    }
    /**
        * <p>CPU utilization and load average metrics for an Amazon EC2 instance.</p>
        */
    export interface SystemStatus {
            /**
                * <p>CPU utilization metrics for the instance.</p>
                */
            CPUUtilization?: CPUUtilization;
            /**
                * <p>Load average in the last 1-minute, 5-minute, and 15-minute periods.
                *       For more information, see
                *         <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-metrics.html#health-enhanced-metrics-os">Operating System Metrics</a>.</p>
                */
            LoadAverage?: number[];
    }
    export namespace SystemStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SystemStatus) => any;
    }
    /**
        * <p>Detailed health information about an Amazon EC2 instance in your Elastic Beanstalk
        *       environment.</p>
        */
    export interface SingleInstanceHealth {
            /**
                * <p>The ID of the Amazon EC2 instance.</p>
                */
            InstanceId?: string;
            /**
                * <p>Returns the health status of the specified instance. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health
                *         Colors and Statuses</a>.</p>
                */
            HealthStatus?: string;
            /**
                * <p>Represents the color indicator that gives you information about the health of the EC2
                *       instance. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and
                *         Statuses</a>.</p>
                */
            Color?: string;
            /**
                * <p>Represents the causes, which provide more information about the current health
                *       status.</p>
                */
            Causes?: string[];
            /**
                * <p>The time at which the EC2 instance was launched.</p>
                */
            LaunchedAt?: Date;
            /**
                * <p>Request metrics from your application.</p>
                */
            ApplicationMetrics?: ApplicationMetrics;
            /**
                * <p>Operating system metrics from the instance.</p>
                */
            System?: SystemStatus;
            /**
                * <p>Information about the most recent deployment to an instance.</p>
                */
            Deployment?: Deployment;
            /**
                * <p>The availability zone in which the instance runs.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The instance's type.</p>
                */
            InstanceType?: string;
    }
    export namespace SingleInstanceHealth {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SingleInstanceHealth) => any;
    }
    /**
        * <p>Detailed health information about the Amazon EC2 instances in an AWS Elastic Beanstalk
        *       environment.</p>
        */
    export interface DescribeInstancesHealthResult {
            /**
                * <p>Detailed health information about each instance.</p>
                *          <p>The output differs slightly between Linux and Windows environments. There is a difference
                *       in the members that are supported under the <code><CPUUtilization></code> type.</p>
                */
            InstanceHealthList?: SingleInstanceHealth[];
            /**
                * <p>The date and time that the health information was retrieved.</p>
                */
            RefreshedAt?: Date;
            /**
                * <p>Pagination token for the next page of results, if available.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstancesHealthResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancesHealthResult) => any;
    }
    export interface DescribePlatformVersionRequest {
            /**
                * <p>The ARN of the platform version.</p>
                */
            PlatformArn?: string;
    }
    export namespace DescribePlatformVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePlatformVersionRequest) => any;
    }
    /**
        * <p>A custom AMI available to platforms.</p>
        */
    export interface CustomAmi {
            /**
                * <p>The type of virtualization used to create the custom AMI.</p>
                */
            VirtualizationType?: string;
            /**
                * <p>THe ID of the image used to create the custom AMI.</p>
                */
            ImageId?: string;
    }
    export namespace CustomAmi {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomAmi) => any;
    }
    /**
        * <p>A framework supported by the platform.</p>
        */
    export interface PlatformFramework {
            /**
                * <p>The name of the framework.</p>
                */
            Name?: string;
            /**
                * <p>The version of the framework.</p>
                */
            Version?: string;
    }
    export namespace PlatformFramework {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlatformFramework) => any;
    }
    /**
        * <p>A programming language supported by the platform.</p>
        */
    export interface PlatformProgrammingLanguage {
            /**
                * <p>The name of the programming language.</p>
                */
            Name?: string;
            /**
                * <p>The version of the programming language.</p>
                */
            Version?: string;
    }
    export namespace PlatformProgrammingLanguage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlatformProgrammingLanguage) => any;
    }
    /**
        * <p>Detailed information about a platform version.</p>
        */
    export interface PlatformDescription {
            /**
                * <p>The ARN of the platform version.</p>
                */
            PlatformArn?: string;
            /**
                * <p>The AWS account ID of the person who created the platform version.</p>
                */
            PlatformOwner?: string;
            /**
                * <p>The name of the platform version.</p>
                */
            PlatformName?: string;
            /**
                * <p>The version of the platform version.</p>
                */
            PlatformVersion?: string;
            /**
                * <p>The name of the solution stack used by the platform version.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The status of the platform version.</p>
                */
            PlatformStatus?: PlatformStatus | string;
            /**
                * <p>The date when the platform version was created.</p>
                */
            DateCreated?: Date;
            /**
                * <p>The date when the platform version was last updated.</p>
                */
            DateUpdated?: Date;
            /**
                * <p>The category of the platform version.</p>
                */
            PlatformCategory?: string;
            /**
                * <p>The description of the platform version.</p>
                */
            Description?: string;
            /**
                * <p>Information about the maintainer of the platform version.</p>
                */
            Maintainer?: string;
            /**
                * <p>The operating system used by the platform version.</p>
                */
            OperatingSystemName?: string;
            /**
                * <p>The version of the operating system used by the platform version.</p>
                */
            OperatingSystemVersion?: string;
            /**
                * <p>The programming languages supported by the platform version.</p>
                */
            ProgrammingLanguages?: PlatformProgrammingLanguage[];
            /**
                * <p>The frameworks supported by the platform version.</p>
                */
            Frameworks?: PlatformFramework[];
            /**
                * <p>The custom AMIs supported by the platform version.</p>
                */
            CustomAmiList?: CustomAmi[];
            /**
                * <p>The tiers supported by the platform version.</p>
                */
            SupportedTierList?: string[];
            /**
                * <p>The additions supported by the platform version.</p>
                */
            SupportedAddonList?: string[];
            /**
                * <p>The state of the platform version in its lifecycle.</p>
                *          <p>Possible values: <code>Recommended</code> | <code>null</code>
                *          </p>
                *          <p>If a null value is returned, the platform version isn't the recommended one for its
                *       branch. Each platform branch has a single recommended platform version, typically the most
                *       recent one.</p>
                */
            PlatformLifecycleState?: string;
            /**
                * <p>The platform branch to which the platform version belongs.</p>
                */
            PlatformBranchName?: string;
            /**
                * <p>The state of the platform version's branch in its lifecycle.</p>
                *          <p>Possible values: <code>Beta</code> | <code>Supported</code> | <code>Deprecated</code> |
                *       <code>Retired</code>
                *          </p>
                */
            PlatformBranchLifecycleState?: string;
    }
    export namespace PlatformDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlatformDescription) => any;
    }
    export interface DescribePlatformVersionResult {
            /**
                * <p>Detailed information about the platform version.</p>
                */
            PlatformDescription?: PlatformDescription;
    }
    export namespace DescribePlatformVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePlatformVersionResult) => any;
    }
    /**
        * <p>Request to disassociate the operations role from an environment.</p>
        */
    export interface DisassociateEnvironmentOperationsRoleMessage {
            /**
                * <p>The name of the environment from which to disassociate the operations role.</p>
                */
            EnvironmentName: string | undefined;
    }
    export namespace DisassociateEnvironmentOperationsRoleMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateEnvironmentOperationsRoleMessage) => any;
    }
    /**
        * <p>A list of available AWS Elastic Beanstalk solution stacks.</p>
        */
    export interface ListAvailableSolutionStacksResultMessage {
            /**
                * <p>A list of available solution stacks.</p>
                */
            SolutionStacks?: string[];
            /**
                * <p> A list of available solution stacks and their <a>SolutionStackDescription</a>. </p>
                */
            SolutionStackDetails?: SolutionStackDescription[];
    }
    export namespace ListAvailableSolutionStacksResultMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAvailableSolutionStacksResultMessage) => any;
    }
    /**
        * <p>Describes criteria to restrict a list of results.</p>
        *          <p>For operators that apply a single value to the attribute, the filter is evaluated as
        *       follows: <code>Attribute Operator Values[1]</code>
        *          </p>
        *          <p>Some operators, e.g. <code>in</code>, can apply multiple values. In this case, the filter
        *       is evaluated as a logical union (OR) of applications of the operator to the attribute with
        *       each one of the values: <code>(Attribute Operator Values[1]) OR (Attribute Operator Values[2])
        *         OR ...</code>
        *          </p>
        *          <p>The valid values for attributes of <code>SearchFilter</code> depend on the API action. For
        *       valid values, see the reference page for the API action you're calling that takes a
        *         <code>SearchFilter</code> parameter.</p>
        */
    export interface SearchFilter {
            /**
                * <p>The result attribute to which the filter values are applied. Valid values vary by API
                *       action.</p>
                */
            Attribute?: string;
            /**
                * <p>The operator to apply to the <code>Attribute</code> with each of the <code>Values</code>.
                *       Valid values vary by <code>Attribute</code>.</p>
                */
            Operator?: string;
            /**
                * <p>The list of values applied to the <code>Attribute</code> and <code>Operator</code>
                *       attributes. Number of values and valid values vary by <code>Attribute</code>.</p>
                */
            Values?: string[];
    }
    export namespace SearchFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchFilter) => any;
    }
    export interface ListPlatformBranchesRequest {
            /**
                * <p>Criteria for restricting the resulting list of platform branches. The filter is evaluated
                *       as a logical conjunction (AND) of the separate <code>SearchFilter</code> terms.</p>
                *          <p>The following list shows valid attribute values for each of the <code>SearchFilter</code>
                *       terms. Most operators take a single value. The <code>in</code> and <code>not_in</code>
                *       operators can take multiple values.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Attribute = BranchName</code>:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code>
                *               | <code>ends_with</code> | <code>contains</code> | <code>in</code> |
                *                 <code>not_in</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Attribute = LifecycleState</code>:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>in</code> |
                *                 <code>not_in</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Values</code>: <code>beta</code> | <code>supported</code> |
                *                 <code>deprecated</code> | <code>retired</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Attribute = PlatformName</code>:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code>
                *               | <code>ends_with</code> | <code>contains</code> | <code>in</code> |
                *               <code>not_in</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Attribute = TierType</code>:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Operator</code>: <code>=</code> | <code>!=</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Values</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                *          <p>Array size: limited to 10 <code>SearchFilter</code> objects.</p>
                *          <p>Within each <code>SearchFilter</code> item, the <code>Values</code> array is limited to 10
                *       items.</p>
                */
            Filters?: SearchFilter[];
            /**
                * <p>The maximum number of platform branch values returned in one call.</p>
                */
            MaxRecords?: number;
            /**
                * <p>For a paginated request. Specify a token from a previous response page to retrieve the
                *       next response page. All other parameter values must be identical to the ones specified in the
                *       initial request.</p>
                *          <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlatformBranchesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlatformBranchesRequest) => any;
    }
    /**
        * <p>Summary information about a platform branch.</p>
        */
    export interface PlatformBranchSummary {
            /**
                * <p>The name of the platform to which this platform branch belongs.</p>
                */
            PlatformName?: string;
            /**
                * <p>The name of the platform branch.</p>
                */
            BranchName?: string;
            /**
                * <p>The support life cycle state of the platform branch.</p>
                *          <p>Possible values: <code>beta</code> | <code>supported</code> | <code>deprecated</code> |
                *       <code>retired</code>
                *          </p>
                */
            LifecycleState?: string;
            /**
                * <p>An ordinal number that designates the order in which platform branches have been added to
                *       a platform. This can be helpful, for example, if your code calls the
                *         <code>ListPlatformBranches</code> action and then displays a list of platform
                *       branches.</p>
                *          <p>A larger <code>BranchOrder</code> value designates a newer platform branch within the
                *       platform.</p>
                */
            BranchOrder?: number;
            /**
                * <p>The environment tiers that platform versions in this branch support.</p>
                *          <p>Possible values: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code>
                *          </p>
                */
            SupportedTierList?: string[];
    }
    export namespace PlatformBranchSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlatformBranchSummary) => any;
    }
    export interface ListPlatformBranchesResult {
            /**
                * <p>Summary information about the platform branches.</p>
                */
            PlatformBranchSummaryList?: PlatformBranchSummary[];
            /**
                * <p>In a paginated request, if this value isn't <code>null</code>, it's the token that you can
                *       pass in a subsequent request to get the next response page.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlatformBranchesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlatformBranchesResult) => any;
    }
    /**
        * <p>Describes criteria to restrict the results when listing platform versions.</p>
        *          <p>The filter is evaluated as follows: <code>Type Operator Values[1]</code>
        *          </p>
        */
    export interface PlatformFilter {
            /**
                * <p>The platform version attribute to which the filter values are applied.</p>
                *          <p>Valid values: <code>PlatformName</code> | <code>PlatformVersion</code> |
                *         <code>PlatformStatus</code> | <code>PlatformBranchName</code> |
                *         <code>PlatformLifecycleState</code> | <code>PlatformOwner</code> |
                *         <code>SupportedTier</code> | <code>SupportedAddon</code> |
                *         <code>ProgrammingLanguageName</code> | <code>OperatingSystemName</code>
                *          </p>
                */
            Type?: string;
            /**
                * <p>The operator to apply to the <code>Type</code> with each of the
                *       <code>Values</code>.</p>
                *          <p>Valid values: <code>=</code> | <code>!=</code> |
                *         <code><</code> | <code><=</code> |
                *         <code>></code> | <code>>=</code> |
                *         <code>contains</code> | <code>begins_with</code> | <code>ends_with</code>
                *          </p>
                */
            Operator?: string;
            /**
                * <p>The list of values applied to the filtering platform version attribute. Only one value is supported
                *       for all current operators.</p>
                *          <p>The following list shows valid filter values for some filter attributes.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PlatformStatus</code>: <code>Creating</code> | <code>Failed</code> |
                *             <code>Ready</code> | <code>Deleting</code> | <code>Deleted</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PlatformLifecycleState</code>: <code>recommended</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SupportedTier</code>: <code>WebServer/Standard</code> |
                *             <code>Worker/SQS/HTTP</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SupportedAddon</code>: <code>Log/S3</code> | <code>Monitoring/Healthd</code> |
                *             <code>WorkerDaemon/SQSD</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Values?: string[];
    }
    export namespace PlatformFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlatformFilter) => any;
    }
    export interface ListPlatformVersionsRequest {
            /**
                * <p>Criteria for restricting the resulting list of platform versions. The filter is
                *       interpreted as a logical conjunction (AND) of the separate <code>PlatformFilter</code>
                *       terms.</p>
                */
            Filters?: PlatformFilter[];
            /**
                * <p>The maximum number of platform version values returned in one call.</p>
                */
            MaxRecords?: number;
            /**
                * <p>For a paginated request. Specify a token from a previous response page to retrieve the
                *       next response page. All other parameter values must be identical to the ones specified in the
                *       initial request.</p>
                *          <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlatformVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlatformVersionsRequest) => any;
    }
    export interface ListPlatformVersionsResult {
            /**
                * <p>Summary information about the platform versions.</p>
                */
            PlatformSummaryList?: PlatformSummary[];
            /**
                * <p>In a paginated request, if this value isn't <code>null</code>, it's the token that you can
                *       pass in a subsequent request to get the next response page.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlatformVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlatformVersionsResult) => any;
    }
    export interface ListTagsForResourceMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the resouce for which a tag list is requested.</p>
                *          <p>Must be the ARN of an Elastic Beanstalk resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceMessage) => any;
    }
    /**
        * <p>A resource doesn't exist for the specified Amazon Resource Name (ARN).</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface ResourceTagsDescriptionMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource for which a tag list was requested.</p>
                */
            ResourceArn?: string;
            /**
                * <p>A list of tag key-value pairs.</p>
                */
            ResourceTags?: Tag[];
    }
    export namespace ResourceTagsDescriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceTagsDescriptionMessage) => any;
    }
    /**
        * <p>The type of the specified Amazon Resource Name (ARN) isn't supported for this operation.</p>
        */
    export class ResourceTypeNotSupportedException extends __BaseException {
            readonly name: "ResourceTypeNotSupportedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceTypeNotSupportedException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface RebuildEnvironmentMessage {
            /**
                * <p>The ID of the environment to rebuild.</p>
                *          <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the environment to rebuild.</p>
                *          <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentName?: string;
    }
    export namespace RebuildEnvironmentMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebuildEnvironmentMessage) => any;
    }
    export type EnvironmentInfoType = "bundle" | "tail";
    /**
        * <p>Request to retrieve logs from an environment and store them in your Elastic Beanstalk
        *       storage bucket.</p>
        */
    export interface RequestEnvironmentInfoMessage {
            /**
                * <p>The ID of the environment of the requested data.</p>
                *          <p>If no such environment is found, <code>RequestEnvironmentInfo</code> returns an
                *       <code>InvalidParameterValue</code> error. </p>
                *          <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the environment of the requested data.</p>
                *          <p>If no such environment is found, <code>RequestEnvironmentInfo</code> returns an
                *       <code>InvalidParameterValue</code> error. </p>
                *          <p>Condition: You must specify either this or an EnvironmentId, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentName?: string;
            /**
                * <p>The type of information to request.</p>
                */
            InfoType: EnvironmentInfoType | string | undefined;
    }
    export namespace RequestEnvironmentInfoMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RequestEnvironmentInfoMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface RestartAppServerMessage {
            /**
                * <p>The ID of the environment to restart the server for.</p>
                *          <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the environment to restart the server for.</p>
                *          <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentName?: string;
    }
    export namespace RestartAppServerMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestartAppServerMessage) => any;
    }
    /**
        * <p>Request to download logs retrieved with <a>RequestEnvironmentInfo</a>.</p>
        */
    export interface RetrieveEnvironmentInfoMessage {
            /**
                * <p>The ID of the data's environment.</p>
                *          <p>If no such environment is found, returns an <code>InvalidParameterValue</code>
                *       error.</p>
                *          <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code>
                *       error.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the data's environment.</p>
                *          <p> If no such environment is found, returns an <code>InvalidParameterValue</code> error. </p>
                *          <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentName?: string;
            /**
                * <p>The type of information to retrieve.</p>
                */
            InfoType: EnvironmentInfoType | string | undefined;
    }
    export namespace RetrieveEnvironmentInfoMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetrieveEnvironmentInfoMessage) => any;
    }
    /**
        * <p>The information retrieved from the Amazon EC2 instances.</p>
        */
    export interface EnvironmentInfoDescription {
            /**
                * <p>The type of information retrieved.</p>
                */
            InfoType?: EnvironmentInfoType | string;
            /**
                * <p>The Amazon EC2 Instance ID for this information.</p>
                */
            Ec2InstanceId?: string;
            /**
                * <p>The time stamp when this information was retrieved.</p>
                */
            SampleTimestamp?: Date;
            /**
                * <p>The retrieved information. Currently contains a presigned Amazon S3 URL. The files are
                *       deleted after 15 minutes.</p>
                *          <p>Anyone in possession of this URL can access the files before they are deleted. Make the
                *       URL available only to trusted parties.</p>
                */
            Message?: string;
    }
    export namespace EnvironmentInfoDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentInfoDescription) => any;
    }
    /**
        * <p>Result message containing a description of the requested environment info.</p>
        */
    export interface RetrieveEnvironmentInfoResultMessage {
            /**
                * <p> The <a>EnvironmentInfoDescription</a> of the environment. </p>
                */
            EnvironmentInfo?: EnvironmentInfoDescription[];
    }
    export namespace RetrieveEnvironmentInfoResultMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetrieveEnvironmentInfoResultMessage) => any;
    }
    /**
        * <p>Swaps the CNAMEs of two environments.</p>
        */
    export interface SwapEnvironmentCNAMEsMessage {
            /**
                * <p>The ID of the source environment.</p>
                *          <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the
                *       <code>SourceEnvironmentName</code>. You may also specify both. If you specify the
                *       <code>SourceEnvironmentId</code>, you must specify the
                *       <code>DestinationEnvironmentId</code>. </p>
                */
            SourceEnvironmentId?: string;
            /**
                * <p>The name of the source environment.</p>
                *          <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the
                *       <code>SourceEnvironmentName</code>. You may also specify both. If you specify the
                *       <code>SourceEnvironmentName</code>, you must specify the
                *       <code>DestinationEnvironmentName</code>. </p>
                */
            SourceEnvironmentName?: string;
            /**
                * <p>The ID of the destination environment.</p>
                *          <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the
                *       <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the
                *       <code>SourceEnvironmentId</code> with the <code>DestinationEnvironmentId</code>. </p>
                */
            DestinationEnvironmentId?: string;
            /**
                * <p>The name of the destination environment.</p>
                *          <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the
                *       <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the
                *       <code>SourceEnvironmentName</code> with the <code>DestinationEnvironmentName</code>.
                *     </p>
                */
            DestinationEnvironmentName?: string;
    }
    export namespace SwapEnvironmentCNAMEsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SwapEnvironmentCNAMEsMessage) => any;
    }
    /**
        * <p>Request to terminate an environment.</p>
        */
    export interface TerminateEnvironmentMessage {
            /**
                * <p>The ID of the environment to terminate.</p>
                *          <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the environment to terminate.</p>
                *          <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentName?: string;
            /**
                * <p>Indicates whether the associated AWS resources should shut down when the environment is
                *       terminated:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>true</code>: The specified environment as well as the associated AWS resources, such
                *           as Auto Scaling group and LoadBalancer, are terminated.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>false</code>: AWS Elastic Beanstalk resource management is removed from the
                *           environment, but the AWS resources continue to operate.</p>
                *             </li>
                *          </ul>
                *          <p> For more information, see the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/"> AWS Elastic Beanstalk User Guide. </a>
                *          </p>
                *          <p> Default: <code>true</code>
                *          </p>
                *          <p> Valid Values: <code>true</code> | <code>false</code>
                *          </p>
                */
            TerminateResources?: boolean;
            /**
                * <p>Terminates the target environment even if another environment in the same group is
                *       dependent on it.</p>
                */
            ForceTerminate?: boolean;
    }
    export namespace TerminateEnvironmentMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateEnvironmentMessage) => any;
    }
    /**
        * <p>Request to update an application.</p>
        */
    export interface UpdateApplicationMessage {
            /**
                * <p>The name of the application to update. If no such application is found,
                *         <code>UpdateApplication</code> returns an <code>InvalidParameterValue</code> error.
                *     </p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>A new description for the application.</p>
                *          <p>Default: If not specified, AWS Elastic Beanstalk does not update the
                *       description.</p>
                */
            Description?: string;
    }
    export namespace UpdateApplicationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApplicationMessage) => any;
    }
    export interface UpdateApplicationResourceLifecycleMessage {
            /**
                * <p>The name of the application.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The lifecycle configuration.</p>
                */
            ResourceLifecycleConfig: ApplicationResourceLifecycleConfig | undefined;
    }
    export namespace UpdateApplicationResourceLifecycleMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApplicationResourceLifecycleMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface UpdateApplicationVersionMessage {
            /**
                * <p>The name of the application associated with this version.</p>
                *          <p> If no application is found with this name, <code>UpdateApplication</code> returns an
                *         <code>InvalidParameterValue</code> error.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The name of the version to update.</p>
                *          <p>If no application version is found with this label, <code>UpdateApplication</code>
                *       returns an <code>InvalidParameterValue</code> error. </p>
                */
            VersionLabel: string | undefined;
            /**
                * <p>A new description for this version.</p>
                */
            Description?: string;
    }
    export namespace UpdateApplicationVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApplicationVersionMessage) => any;
    }
    /**
        * <p>The result message containing the options for the specified solution stack.</p>
        */
    export interface UpdateConfigurationTemplateMessage {
            /**
                * <p>The name of the application associated with the configuration template to
                *       update.</p>
                *          <p> If no application is found with this name, <code>UpdateConfigurationTemplate</code>
                *       returns an <code>InvalidParameterValue</code> error. </p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The name of the configuration template to update.</p>
                *          <p> If no configuration template is found with this name,
                *         <code>UpdateConfigurationTemplate</code> returns an <code>InvalidParameterValue</code>
                *       error. </p>
                */
            TemplateName: string | undefined;
            /**
                * <p>A new description for the configuration.</p>
                */
            Description?: string;
            /**
                * <p>A list of configuration option settings to update with the new specified option
                *       value.</p>
                */
            OptionSettings?: ConfigurationOptionSetting[];
            /**
                * <p>A list of configuration options to remove from the configuration set.</p>
                *          <p> Constraint: You can remove only <code>UserDefined</code> configuration options.
                *     </p>
                */
            OptionsToRemove?: OptionSpecification[];
    }
    export namespace UpdateConfigurationTemplateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationTemplateMessage) => any;
    }
    /**
        * <p>Request to update an environment.</p>
        */
    export interface UpdateEnvironmentMessage {
            /**
                * <p>The name of the application with which the environment is associated.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The ID of the environment to update.</p>
                *          <p>If no environment with this ID exists, AWS Elastic Beanstalk returns an
                *         <code>InvalidParameterValue</code> error.</p>
                *          <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentId?: string;
            /**
                * <p>The name of the environment to update. If no environment with this name exists, AWS
                *       Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p>
                *          <p>Condition: You must specify either this or an EnvironmentId, or both. If you do not
                *       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
                *     </p>
                */
            EnvironmentName?: string;
            /**
                * <p>The name of the group to which the target environment belongs. Specify a group name
                *       only if the environment's name is specified in an environment manifest and not with the
                *       environment name or environment ID parameters. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest
                *         (env.yaml)</a> for details.</p>
                */
            GroupName?: string;
            /**
                * <p>If this parameter is specified, AWS Elastic Beanstalk updates the description of this
                *       environment.</p>
                */
            Description?: string;
            /**
                * <p>This specifies the tier to use to update the environment.</p>
                *          <p>Condition: At this time, if you change the tier version, name, or type, AWS Elastic
                *       Beanstalk returns <code>InvalidParameterValue</code> error. </p>
                */
            Tier?: EnvironmentTier;
            /**
                * <p>If this parameter is specified, AWS Elastic Beanstalk deploys the named application
                *       version to the environment. If no such application version is found, returns an
                *         <code>InvalidParameterValue</code> error. </p>
                */
            VersionLabel?: string;
            /**
                * <p>If this parameter is specified, AWS Elastic Beanstalk deploys this configuration
                *       template to the environment. If no such configuration template is found, AWS Elastic Beanstalk
                *       returns an <code>InvalidParameterValue</code> error. </p>
                */
            TemplateName?: string;
            /**
                * <p>This specifies the platform version that the environment will run after the environment
                *       is updated.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The ARN of the platform, if used.</p>
                */
            PlatformArn?: string;
            /**
                * <p>If specified, AWS Elastic Beanstalk updates the configuration set associated with the
                *       running environment and sets the specified configuration options to the requested
                *       value.</p>
                */
            OptionSettings?: ConfigurationOptionSetting[];
            /**
                * <p>A list of custom user-defined configuration options to remove from the configuration
                *       set for this environment.</p>
                */
            OptionsToRemove?: OptionSpecification[];
    }
    export namespace UpdateEnvironmentMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEnvironmentMessage) => any;
    }
    /**
        * <p>The number of tags in the resource would exceed the number of tags that each resource
        *       can have.</p>
        *          <p>To calculate this, the operation considers both the number of tags the resource already has
        *       and the tags this operation would add if it succeeded.</p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    export interface UpdateTagsForResourceMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
                *          <p>Must be the ARN of an Elastic Beanstalk resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is
                *       updated.</p>
                *          <p>Specify at least one of these parameters: <code>TagsToAdd</code>,
                *         <code>TagsToRemove</code>.</p>
                */
            TagsToAdd?: Tag[];
            /**
                * <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
                *          <p>Specify at least one of these parameters: <code>TagsToAdd</code>,
                *       <code>TagsToRemove</code>.</p>
                */
            TagsToRemove?: string[];
    }
    export namespace UpdateTagsForResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTagsForResourceMessage) => any;
    }
    export type ValidationSeverity = "error" | "warning";
    /**
        * <p>An error or warning for a desired configuration option value.</p>
        */
    export interface ValidationMessage {
            /**
                * <p>A message describing the error or warning.</p>
                */
            Message?: string;
            /**
                * <p>An indication of the severity of this message:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>error</code>: This message indicates that this is not a valid setting for an
                *           option.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>warning</code>: This message is providing information you should take into
                *           account.</p>
                *             </li>
                *          </ul>
                */
            Severity?: ValidationSeverity | string;
            /**
                * <p>The namespace to which the option belongs.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the option.</p>
                */
            OptionName?: string;
    }
    export namespace ValidationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationMessage) => any;
    }
    /**
        * <p>Provides a list of validation messages.</p>
        */
    export interface ConfigurationSettingsValidationMessages {
            /**
                * <p> A list of <a>ValidationMessage</a>. </p>
                */
            Messages?: ValidationMessage[];
    }
    export namespace ConfigurationSettingsValidationMessages {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationSettingsValidationMessages) => any;
    }
    /**
        * <p>A list of validation messages for a specified configuration template.</p>
        */
    export interface ValidateConfigurationSettingsMessage {
            /**
                * <p>The name of the application that the configuration template or environment belongs
                *       to.</p>
                */
            ApplicationName: string | undefined;
            /**
                * <p>The name of the configuration template to validate the settings against.</p>
                *          <p>Condition: You cannot specify both this and an environment name.</p>
                */
            TemplateName?: string;
            /**
                * <p>The name of the environment to validate the settings against.</p>
                *          <p>Condition: You cannot specify both this and a configuration template name.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>A list of the options and desired values to evaluate.</p>
                */
            OptionSettings: ConfigurationOptionSetting[] | undefined;
    }
    export namespace ValidateConfigurationSettingsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidateConfigurationSettingsMessage) => any;
    }
}

declare module '@aws-sdk/client-elastic-beanstalk/node_modules/@aws-sdk/client-elastic-beanstalk/dist-types/models/ElasticBeanstalkServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ElasticBeanstalk service.
        */
    export class ElasticBeanstalkServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

