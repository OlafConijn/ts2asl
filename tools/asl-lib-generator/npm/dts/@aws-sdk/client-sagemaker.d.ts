// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-sagemaker' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddAssociationCommandInput, AddAssociationCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AddAssociationCommand";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AddTagsCommand";
    import { AssociateTrialComponentCommandInput, AssociateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AssociateTrialComponentCommand";
    import { BatchDescribeModelPackageCommandInput, BatchDescribeModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/BatchDescribeModelPackageCommand";
    import { CreateActionCommandInput, CreateActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateActionCommand";
    import { CreateAlgorithmCommandInput, CreateAlgorithmCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAlgorithmCommand";
    import { CreateAppCommandInput, CreateAppCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAppCommand";
    import { CreateAppImageConfigCommandInput, CreateAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAppImageConfigCommand";
    import { CreateArtifactCommandInput, CreateArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateArtifactCommand";
    import { CreateAutoMLJobCommandInput, CreateAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAutoMLJobCommand";
    import { CreateCodeRepositoryCommandInput, CreateCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateCodeRepositoryCommand";
    import { CreateCompilationJobCommandInput, CreateCompilationJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateCompilationJobCommand";
    import { CreateContextCommandInput, CreateContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateContextCommand";
    import { CreateDataQualityJobDefinitionCommandInput, CreateDataQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDataQualityJobDefinitionCommand";
    import { CreateDeviceFleetCommandInput, CreateDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDeviceFleetCommand";
    import { CreateDomainCommandInput, CreateDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDomainCommand";
    import { CreateEdgeDeploymentPlanCommandInput, CreateEdgeDeploymentPlanCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgeDeploymentPlanCommand";
    import { CreateEdgeDeploymentStageCommandInput, CreateEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgeDeploymentStageCommand";
    import { CreateEdgePackagingJobCommandInput, CreateEdgePackagingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgePackagingJobCommand";
    import { CreateEndpointCommandInput, CreateEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEndpointCommand";
    import { CreateEndpointConfigCommandInput, CreateEndpointConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEndpointConfigCommand";
    import { CreateExperimentCommandInput, CreateExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateExperimentCommand";
    import { CreateFeatureGroupCommandInput, CreateFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateFeatureGroupCommand";
    import { CreateFlowDefinitionCommandInput, CreateFlowDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateFlowDefinitionCommand";
    import { CreateHumanTaskUiCommandInput, CreateHumanTaskUiCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateHumanTaskUiCommand";
    import { CreateHyperParameterTuningJobCommandInput, CreateHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateHyperParameterTuningJobCommand";
    import { CreateImageCommandInput, CreateImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateImageCommand";
    import { CreateImageVersionCommandInput, CreateImageVersionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateImageVersionCommand";
    import { CreateInferenceRecommendationsJobCommandInput, CreateInferenceRecommendationsJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateInferenceRecommendationsJobCommand";
    import { CreateLabelingJobCommandInput, CreateLabelingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateLabelingJobCommand";
    import { CreateModelBiasJobDefinitionCommandInput, CreateModelBiasJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelBiasJobDefinitionCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelCommand";
    import { CreateModelExplainabilityJobDefinitionCommandInput, CreateModelExplainabilityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelExplainabilityJobDefinitionCommand";
    import { CreateModelPackageCommandInput, CreateModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelPackageCommand";
    import { CreateModelPackageGroupCommandInput, CreateModelPackageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelPackageGroupCommand";
    import { CreateModelQualityJobDefinitionCommandInput, CreateModelQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelQualityJobDefinitionCommand";
    import { CreateMonitoringScheduleCommandInput, CreateMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateMonitoringScheduleCommand";
    import { CreateNotebookInstanceCommandInput, CreateNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateNotebookInstanceCommand";
    import { CreateNotebookInstanceLifecycleConfigCommandInput, CreateNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateNotebookInstanceLifecycleConfigCommand";
    import { CreatePipelineCommandInput, CreatePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePipelineCommand";
    import { CreatePresignedDomainUrlCommandInput, CreatePresignedDomainUrlCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePresignedDomainUrlCommand";
    import { CreatePresignedNotebookInstanceUrlCommandInput, CreatePresignedNotebookInstanceUrlCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePresignedNotebookInstanceUrlCommand";
    import { CreateProcessingJobCommandInput, CreateProcessingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateProcessingJobCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateProjectCommand";
    import { CreateStudioLifecycleConfigCommandInput, CreateStudioLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateStudioLifecycleConfigCommand";
    import { CreateTrainingJobCommandInput, CreateTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrainingJobCommand";
    import { CreateTransformJobCommandInput, CreateTransformJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTransformJobCommand";
    import { CreateTrialCommandInput, CreateTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrialCommand";
    import { CreateTrialComponentCommandInput, CreateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrialComponentCommand";
    import { CreateUserProfileCommandInput, CreateUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateUserProfileCommand";
    import { CreateWorkforceCommandInput, CreateWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateWorkforceCommand";
    import { CreateWorkteamCommandInput, CreateWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateWorkteamCommand";
    import { DeleteActionCommandInput, DeleteActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteActionCommand";
    import { DeleteAlgorithmCommandInput, DeleteAlgorithmCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAlgorithmCommand";
    import { DeleteAppCommandInput, DeleteAppCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAppCommand";
    import { DeleteAppImageConfigCommandInput, DeleteAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAppImageConfigCommand";
    import { DeleteArtifactCommandInput, DeleteArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteArtifactCommand";
    import { DeleteAssociationCommandInput, DeleteAssociationCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAssociationCommand";
    import { DeleteCodeRepositoryCommandInput, DeleteCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteCodeRepositoryCommand";
    import { DeleteContextCommandInput, DeleteContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteContextCommand";
    import { DeleteDataQualityJobDefinitionCommandInput, DeleteDataQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDataQualityJobDefinitionCommand";
    import { DeleteDeviceFleetCommandInput, DeleteDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDeviceFleetCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDomainCommand";
    import { DeleteEdgeDeploymentPlanCommandInput, DeleteEdgeDeploymentPlanCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEdgeDeploymentPlanCommand";
    import { DeleteEdgeDeploymentStageCommandInput, DeleteEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEdgeDeploymentStageCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEndpointCommand";
    import { DeleteEndpointConfigCommandInput, DeleteEndpointConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEndpointConfigCommand";
    import { DeleteExperimentCommandInput, DeleteExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteExperimentCommand";
    import { DeleteFeatureGroupCommandInput, DeleteFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteFeatureGroupCommand";
    import { DeleteFlowDefinitionCommandInput, DeleteFlowDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteFlowDefinitionCommand";
    import { DeleteHumanTaskUiCommandInput, DeleteHumanTaskUiCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteHumanTaskUiCommand";
    import { DeleteImageCommandInput, DeleteImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteImageCommand";
    import { DeleteImageVersionCommandInput, DeleteImageVersionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteImageVersionCommand";
    import { DeleteModelBiasJobDefinitionCommandInput, DeleteModelBiasJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelBiasJobDefinitionCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelCommand";
    import { DeleteModelExplainabilityJobDefinitionCommandInput, DeleteModelExplainabilityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelExplainabilityJobDefinitionCommand";
    import { DeleteModelPackageCommandInput, DeleteModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageCommand";
    import { DeleteModelPackageGroupCommandInput, DeleteModelPackageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageGroupCommand";
    import { DeleteModelPackageGroupPolicyCommandInput, DeleteModelPackageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageGroupPolicyCommand";
    import { DeleteModelQualityJobDefinitionCommandInput, DeleteModelQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelQualityJobDefinitionCommand";
    import { DeleteMonitoringScheduleCommandInput, DeleteMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteMonitoringScheduleCommand";
    import { DeleteNotebookInstanceCommandInput, DeleteNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteNotebookInstanceCommand";
    import { DeleteNotebookInstanceLifecycleConfigCommandInput, DeleteNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteNotebookInstanceLifecycleConfigCommand";
    import { DeletePipelineCommandInput, DeletePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeletePipelineCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteProjectCommand";
    import { DeleteStudioLifecycleConfigCommandInput, DeleteStudioLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteStudioLifecycleConfigCommand";
    import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTagsCommand";
    import { DeleteTrialCommandInput, DeleteTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTrialCommand";
    import { DeleteTrialComponentCommandInput, DeleteTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTrialComponentCommand";
    import { DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteUserProfileCommand";
    import { DeleteWorkforceCommandInput, DeleteWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteWorkforceCommand";
    import { DeleteWorkteamCommandInput, DeleteWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteWorkteamCommand";
    import { DeregisterDevicesCommandInput, DeregisterDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeregisterDevicesCommand";
    import { DescribeActionCommandInput, DescribeActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeActionCommand";
    import { DescribeAlgorithmCommandInput, DescribeAlgorithmCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAlgorithmCommand";
    import { DescribeAppCommandInput, DescribeAppCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAppCommand";
    import { DescribeAppImageConfigCommandInput, DescribeAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAppImageConfigCommand";
    import { DescribeArtifactCommandInput, DescribeArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeArtifactCommand";
    import { DescribeAutoMLJobCommandInput, DescribeAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAutoMLJobCommand";
    import { DescribeCodeRepositoryCommandInput, DescribeCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeCodeRepositoryCommand";
    import { DescribeCompilationJobCommandInput, DescribeCompilationJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeCompilationJobCommand";
    import { DescribeContextCommandInput, DescribeContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeContextCommand";
    import { DescribeDataQualityJobDefinitionCommandInput, DescribeDataQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDataQualityJobDefinitionCommand";
    import { DescribeDeviceCommandInput, DescribeDeviceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDeviceCommand";
    import { DescribeDeviceFleetCommandInput, DescribeDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDeviceFleetCommand";
    import { DescribeDomainCommandInput, DescribeDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDomainCommand";
    import { DescribeEdgeDeploymentPlanCommandInput, DescribeEdgeDeploymentPlanCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEdgeDeploymentPlanCommand";
    import { DescribeEdgePackagingJobCommandInput, DescribeEdgePackagingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEdgePackagingJobCommand";
    import { DescribeEndpointCommandInput, DescribeEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEndpointCommand";
    import { DescribeEndpointConfigCommandInput, DescribeEndpointConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEndpointConfigCommand";
    import { DescribeExperimentCommandInput, DescribeExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeExperimentCommand";
    import { DescribeFeatureGroupCommandInput, DescribeFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFeatureGroupCommand";
    import { DescribeFeatureMetadataCommandInput, DescribeFeatureMetadataCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFeatureMetadataCommand";
    import { DescribeFlowDefinitionCommandInput, DescribeFlowDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFlowDefinitionCommand";
    import { DescribeHumanTaskUiCommandInput, DescribeHumanTaskUiCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeHumanTaskUiCommand";
    import { DescribeHyperParameterTuningJobCommandInput, DescribeHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeHyperParameterTuningJobCommand";
    import { DescribeImageCommandInput, DescribeImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeImageCommand";
    import { DescribeImageVersionCommandInput, DescribeImageVersionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeImageVersionCommand";
    import { DescribeInferenceRecommendationsJobCommandInput, DescribeInferenceRecommendationsJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeInferenceRecommendationsJobCommand";
    import { DescribeLabelingJobCommandInput, DescribeLabelingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeLabelingJobCommand";
    import { DescribeLineageGroupCommandInput, DescribeLineageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeLineageGroupCommand";
    import { DescribeModelBiasJobDefinitionCommandInput, DescribeModelBiasJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelBiasJobDefinitionCommand";
    import { DescribeModelCommandInput, DescribeModelCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelCommand";
    import { DescribeModelExplainabilityJobDefinitionCommandInput, DescribeModelExplainabilityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelExplainabilityJobDefinitionCommand";
    import { DescribeModelPackageCommandInput, DescribeModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelPackageCommand";
    import { DescribeModelPackageGroupCommandInput, DescribeModelPackageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelPackageGroupCommand";
    import { DescribeModelQualityJobDefinitionCommandInput, DescribeModelQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelQualityJobDefinitionCommand";
    import { DescribeMonitoringScheduleCommandInput, DescribeMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeMonitoringScheduleCommand";
    import { DescribeNotebookInstanceCommandInput, DescribeNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeNotebookInstanceCommand";
    import { DescribeNotebookInstanceLifecycleConfigCommandInput, DescribeNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeNotebookInstanceLifecycleConfigCommand";
    import { DescribePipelineCommandInput, DescribePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineCommand";
    import { DescribePipelineDefinitionForExecutionCommandInput, DescribePipelineDefinitionForExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineDefinitionForExecutionCommand";
    import { DescribePipelineExecutionCommandInput, DescribePipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineExecutionCommand";
    import { DescribeProcessingJobCommandInput, DescribeProcessingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeProcessingJobCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeProjectCommand";
    import { DescribeStudioLifecycleConfigCommandInput, DescribeStudioLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeStudioLifecycleConfigCommand";
    import { DescribeSubscribedWorkteamCommandInput, DescribeSubscribedWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeSubscribedWorkteamCommand";
    import { DescribeTrainingJobCommandInput, DescribeTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrainingJobCommand";
    import { DescribeTransformJobCommandInput, DescribeTransformJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTransformJobCommand";
    import { DescribeTrialCommandInput, DescribeTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrialCommand";
    import { DescribeTrialComponentCommandInput, DescribeTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrialComponentCommand";
    import { DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeUserProfileCommand";
    import { DescribeWorkforceCommandInput, DescribeWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeWorkforceCommand";
    import { DescribeWorkteamCommandInput, DescribeWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeWorkteamCommand";
    import { DisableSagemakerServicecatalogPortfolioCommandInput, DisableSagemakerServicecatalogPortfolioCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DisableSagemakerServicecatalogPortfolioCommand";
    import { DisassociateTrialComponentCommandInput, DisassociateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DisassociateTrialComponentCommand";
    import { EnableSagemakerServicecatalogPortfolioCommandInput, EnableSagemakerServicecatalogPortfolioCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/EnableSagemakerServicecatalogPortfolioCommand";
    import { GetDeviceFleetReportCommandInput, GetDeviceFleetReportCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetDeviceFleetReportCommand";
    import { GetLineageGroupPolicyCommandInput, GetLineageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetLineageGroupPolicyCommand";
    import { GetModelPackageGroupPolicyCommandInput, GetModelPackageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetModelPackageGroupPolicyCommand";
    import { GetSagemakerServicecatalogPortfolioStatusCommandInput, GetSagemakerServicecatalogPortfolioStatusCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetSagemakerServicecatalogPortfolioStatusCommand";
    import { GetSearchSuggestionsCommandInput, GetSearchSuggestionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetSearchSuggestionsCommand";
    import { ListActionsCommandInput, ListActionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListActionsCommand";
    import { ListAlgorithmsCommandInput, ListAlgorithmsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAlgorithmsCommand";
    import { ListAppImageConfigsCommandInput, ListAppImageConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAppImageConfigsCommand";
    import { ListAppsCommandInput, ListAppsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAppsCommand";
    import { ListArtifactsCommandInput, ListArtifactsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListArtifactsCommand";
    import { ListAssociationsCommandInput, ListAssociationsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAssociationsCommand";
    import { ListAutoMLJobsCommandInput, ListAutoMLJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAutoMLJobsCommand";
    import { ListCandidatesForAutoMLJobCommandInput, ListCandidatesForAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCandidatesForAutoMLJobCommand";
    import { ListCodeRepositoriesCommandInput, ListCodeRepositoriesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCodeRepositoriesCommand";
    import { ListCompilationJobsCommandInput, ListCompilationJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCompilationJobsCommand";
    import { ListContextsCommandInput, ListContextsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListContextsCommand";
    import { ListDataQualityJobDefinitionsCommandInput, ListDataQualityJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDataQualityJobDefinitionsCommand";
    import { ListDeviceFleetsCommandInput, ListDeviceFleetsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDeviceFleetsCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDevicesCommand";
    import { ListDomainsCommandInput, ListDomainsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDomainsCommand";
    import { ListEdgeDeploymentPlansCommandInput, ListEdgeDeploymentPlansCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEdgeDeploymentPlansCommand";
    import { ListEdgePackagingJobsCommandInput, ListEdgePackagingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEdgePackagingJobsCommand";
    import { ListEndpointConfigsCommandInput, ListEndpointConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEndpointConfigsCommand";
    import { ListEndpointsCommandInput, ListEndpointsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEndpointsCommand";
    import { ListExperimentsCommandInput, ListExperimentsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListExperimentsCommand";
    import { ListFeatureGroupsCommandInput, ListFeatureGroupsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListFeatureGroupsCommand";
    import { ListFlowDefinitionsCommandInput, ListFlowDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListFlowDefinitionsCommand";
    import { ListHumanTaskUisCommandInput, ListHumanTaskUisCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListHumanTaskUisCommand";
    import { ListHyperParameterTuningJobsCommandInput, ListHyperParameterTuningJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListHyperParameterTuningJobsCommand";
    import { ListImagesCommandInput, ListImagesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListImagesCommand";
    import { ListImageVersionsCommandInput, ListImageVersionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListImageVersionsCommand";
    import { ListInferenceRecommendationsJobsCommandInput, ListInferenceRecommendationsJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListInferenceRecommendationsJobsCommand";
    import { ListLabelingJobsCommandInput, ListLabelingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLabelingJobsCommand";
    import { ListLabelingJobsForWorkteamCommandInput, ListLabelingJobsForWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLabelingJobsForWorkteamCommand";
    import { ListLineageGroupsCommandInput, ListLineageGroupsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLineageGroupsCommand";
    import { ListModelBiasJobDefinitionsCommandInput, ListModelBiasJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelBiasJobDefinitionsCommand";
    import { ListModelExplainabilityJobDefinitionsCommandInput, ListModelExplainabilityJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelExplainabilityJobDefinitionsCommand";
    import { ListModelMetadataCommandInput, ListModelMetadataCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelMetadataCommand";
    import { ListModelPackageGroupsCommandInput, ListModelPackageGroupsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelPackageGroupsCommand";
    import { ListModelPackagesCommandInput, ListModelPackagesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelPackagesCommand";
    import { ListModelQualityJobDefinitionsCommandInput, ListModelQualityJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelQualityJobDefinitionsCommand";
    import { ListModelsCommandInput, ListModelsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelsCommand";
    import { ListMonitoringExecutionsCommandInput, ListMonitoringExecutionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListMonitoringExecutionsCommand";
    import { ListMonitoringSchedulesCommandInput, ListMonitoringSchedulesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListMonitoringSchedulesCommand";
    import { ListNotebookInstanceLifecycleConfigsCommandInput, ListNotebookInstanceLifecycleConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListNotebookInstanceLifecycleConfigsCommand";
    import { ListNotebookInstancesCommandInput, ListNotebookInstancesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListNotebookInstancesCommand";
    import { ListPipelineExecutionsCommandInput, ListPipelineExecutionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineExecutionsCommand";
    import { ListPipelineExecutionStepsCommandInput, ListPipelineExecutionStepsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineExecutionStepsCommand";
    import { ListPipelineParametersForExecutionCommandInput, ListPipelineParametersForExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineParametersForExecutionCommand";
    import { ListPipelinesCommandInput, ListPipelinesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelinesCommand";
    import { ListProcessingJobsCommandInput, ListProcessingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListProcessingJobsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListProjectsCommand";
    import { ListStageDevicesCommandInput, ListStageDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListStageDevicesCommand";
    import { ListStudioLifecycleConfigsCommandInput, ListStudioLifecycleConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListStudioLifecycleConfigsCommand";
    import { ListSubscribedWorkteamsCommandInput, ListSubscribedWorkteamsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListSubscribedWorkteamsCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTagsCommand";
    import { ListTrainingJobsCommandInput, ListTrainingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrainingJobsCommand";
    import { ListTrainingJobsForHyperParameterTuningJobCommandInput, ListTrainingJobsForHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrainingJobsForHyperParameterTuningJobCommand";
    import { ListTransformJobsCommandInput, ListTransformJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTransformJobsCommand";
    import { ListTrialComponentsCommandInput, ListTrialComponentsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrialComponentsCommand";
    import { ListTrialsCommandInput, ListTrialsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrialsCommand";
    import { ListUserProfilesCommandInput, ListUserProfilesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListUserProfilesCommand";
    import { ListWorkforcesCommandInput, ListWorkforcesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListWorkforcesCommand";
    import { ListWorkteamsCommandInput, ListWorkteamsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListWorkteamsCommand";
    import { PutModelPackageGroupPolicyCommandInput, PutModelPackageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/PutModelPackageGroupPolicyCommand";
    import { QueryLineageCommandInput, QueryLineageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/QueryLineageCommand";
    import { RegisterDevicesCommandInput, RegisterDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RegisterDevicesCommand";
    import { RenderUiTemplateCommandInput, RenderUiTemplateCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RenderUiTemplateCommand";
    import { RetryPipelineExecutionCommandInput, RetryPipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RetryPipelineExecutionCommand";
    import { SearchCommandInput, SearchCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SearchCommand";
    import { SendPipelineExecutionStepFailureCommandInput, SendPipelineExecutionStepFailureCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SendPipelineExecutionStepFailureCommand";
    import { SendPipelineExecutionStepSuccessCommandInput, SendPipelineExecutionStepSuccessCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SendPipelineExecutionStepSuccessCommand";
    import { StartEdgeDeploymentStageCommandInput, StartEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartEdgeDeploymentStageCommand";
    import { StartMonitoringScheduleCommandInput, StartMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartMonitoringScheduleCommand";
    import { StartNotebookInstanceCommandInput, StartNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartNotebookInstanceCommand";
    import { StartPipelineExecutionCommandInput, StartPipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartPipelineExecutionCommand";
    import { StopAutoMLJobCommandInput, StopAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopAutoMLJobCommand";
    import { StopCompilationJobCommandInput, StopCompilationJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopCompilationJobCommand";
    import { StopEdgeDeploymentStageCommandInput, StopEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopEdgeDeploymentStageCommand";
    import { StopEdgePackagingJobCommandInput, StopEdgePackagingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopEdgePackagingJobCommand";
    import { StopHyperParameterTuningJobCommandInput, StopHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopHyperParameterTuningJobCommand";
    import { StopInferenceRecommendationsJobCommandInput, StopInferenceRecommendationsJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopInferenceRecommendationsJobCommand";
    import { StopLabelingJobCommandInput, StopLabelingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopLabelingJobCommand";
    import { StopMonitoringScheduleCommandInput, StopMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopMonitoringScheduleCommand";
    import { StopNotebookInstanceCommandInput, StopNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopNotebookInstanceCommand";
    import { StopPipelineExecutionCommandInput, StopPipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopPipelineExecutionCommand";
    import { StopProcessingJobCommandInput, StopProcessingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopProcessingJobCommand";
    import { StopTrainingJobCommandInput, StopTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopTrainingJobCommand";
    import { StopTransformJobCommandInput, StopTransformJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopTransformJobCommand";
    import { UpdateActionCommandInput, UpdateActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateActionCommand";
    import { UpdateAppImageConfigCommandInput, UpdateAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateAppImageConfigCommand";
    import { UpdateArtifactCommandInput, UpdateArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateArtifactCommand";
    import { UpdateCodeRepositoryCommandInput, UpdateCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateCodeRepositoryCommand";
    import { UpdateContextCommandInput, UpdateContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateContextCommand";
    import { UpdateDeviceFleetCommandInput, UpdateDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDeviceFleetCommand";
    import { UpdateDevicesCommandInput, UpdateDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDevicesCommand";
    import { UpdateDomainCommandInput, UpdateDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDomainCommand";
    import { UpdateEndpointCommandInput, UpdateEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateEndpointCommand";
    import { UpdateEndpointWeightsAndCapacitiesCommandInput, UpdateEndpointWeightsAndCapacitiesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateEndpointWeightsAndCapacitiesCommand";
    import { UpdateExperimentCommandInput, UpdateExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateExperimentCommand";
    import { UpdateFeatureGroupCommandInput, UpdateFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateFeatureGroupCommand";
    import { UpdateFeatureMetadataCommandInput, UpdateFeatureMetadataCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateFeatureMetadataCommand";
    import { UpdateImageCommandInput, UpdateImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateImageCommand";
    import { UpdateModelPackageCommandInput, UpdateModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateModelPackageCommand";
    import { UpdateMonitoringScheduleCommandInput, UpdateMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateMonitoringScheduleCommand";
    import { UpdateNotebookInstanceCommandInput, UpdateNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateNotebookInstanceCommand";
    import { UpdateNotebookInstanceLifecycleConfigCommandInput, UpdateNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateNotebookInstanceLifecycleConfigCommand";
    import { UpdatePipelineCommandInput, UpdatePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdatePipelineCommand";
    import { UpdatePipelineExecutionCommandInput, UpdatePipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdatePipelineExecutionCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateProjectCommand";
    import { UpdateTrainingJobCommandInput, UpdateTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrainingJobCommand";
    import { UpdateTrialCommandInput, UpdateTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrialCommand";
    import { UpdateTrialComponentCommandInput, UpdateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrialComponentCommand";
    import { UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateUserProfileCommand";
    import { UpdateWorkforceCommandInput, UpdateWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateWorkforceCommand";
    import { UpdateWorkteamCommandInput, UpdateWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateWorkteamCommand";
    import { SageMakerClient } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    /**
        * <p>Provides APIs for creating and managing SageMaker resources. </p>
        *         <p>Other Resources:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user">SageMaker Developer
        *                         Guide</a>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html">Amazon Augmented AI
        *                         Runtime API Reference</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class SageMaker extends SageMakerClient {
            /**
                * <p>Creates an <i>association</i> between the source and the destination. A
                *         source can be associated with multiple destinations, and a destination can be associated
                *         with multiple sources. An association is a lineage tracking entity. For more information, see
                *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
                *           ML Lineage Tracking</a>.</p>
                */
            addAssociation(args: AddAssociationCommandInput, options?: __HttpHandlerOptions): Promise<AddAssociationCommandOutput>;
            addAssociation(args: AddAssociationCommandInput, cb: (err: any, data?: AddAssociationCommandOutput) => void): void;
            addAssociation(args: AddAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddAssociationCommandOutput) => void): void;
            /**
                * <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add
                *             tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform
                *             jobs, models, labeling jobs, work teams, endpoint configurations, and
                *             endpoints.</p>
                *         <p>Each tag consists of a key and an optional value. Tag keys must be unique per
                *             resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon Web Services
                *                 Tagging Strategies</a>.</p>
                *         <note>
                *             <p>Tags that you add to a hyperparameter tuning job by calling this API are also
                *                 added to any training jobs that the hyperparameter tuning job launches after you
                *                 call this API, but not to training jobs that the hyperparameter tuning job launched
                *                 before you called this API. To make sure that the tags associated with a
                *                 hyperparameter tuning job are also added to all training jobs that the
                *                 hyperparameter tuning job launches, add the tags when you first create the tuning
                *                 job by specifying them in the <code>Tags</code> parameter of <a>CreateHyperParameterTuningJob</a>
                *             </p>
                *         </note>
                *         <note>
                *             <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API
                *                 are also added to any Apps that the Domain or User Profile launches after you call
                *                 this API, but not to Apps that the Domain or User Profile launched before you called
                *                 this API. To make sure that the tags associated with a Domain or User Profile are
                *                 also added to all Apps that the Domain or User Profile launches, add the tags when
                *                 you first create the Domain or User Profile by specifying them in the
                *                     <code>Tags</code> parameter of <a>CreateDomain</a> or <a>CreateUserProfile</a>.</p>
                *         </note>
                */
            addTags(args: AddTagsCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsCommandOutput>;
            addTags(args: AddTagsCommandInput, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            addTags(args: AddTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            /**
                * <p>Associates a trial component with a trial. A trial component can be associated with
                *       multiple trials. To disassociate a trial component from a trial, call the <a>DisassociateTrialComponent</a> API.</p>
                */
            associateTrialComponent(args: AssociateTrialComponentCommandInput, options?: __HttpHandlerOptions): Promise<AssociateTrialComponentCommandOutput>;
            associateTrialComponent(args: AssociateTrialComponentCommandInput, cb: (err: any, data?: AssociateTrialComponentCommandOutput) => void): void;
            associateTrialComponent(args: AssociateTrialComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateTrialComponentCommandOutput) => void): void;
            /**
                * <p>This action batch describes a list of versioned model packages</p>
                */
            batchDescribeModelPackage(args: BatchDescribeModelPackageCommandInput, options?: __HttpHandlerOptions): Promise<BatchDescribeModelPackageCommandOutput>;
            batchDescribeModelPackage(args: BatchDescribeModelPackageCommandInput, cb: (err: any, data?: BatchDescribeModelPackageCommandOutput) => void): void;
            batchDescribeModelPackage(args: BatchDescribeModelPackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDescribeModelPackageCommandOutput) => void): void;
            /**
                * <p>Creates an <i>action</i>. An action is a lineage tracking entity that
                *         represents an action or activity. For example, a model deployment or an HPO job.
                *         Generally, an action involves at least one input or output artifact. For more information, see
                *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
                *           ML Lineage Tracking</a>.</p>
                */
            createAction(args: CreateActionCommandInput, options?: __HttpHandlerOptions): Promise<CreateActionCommandOutput>;
            createAction(args: CreateActionCommandInput, cb: (err: any, data?: CreateActionCommandOutput) => void): void;
            createAction(args: CreateActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateActionCommandOutput) => void): void;
            /**
                * <p>Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services
                *             Marketplace.</p>
                */
            createAlgorithm(args: CreateAlgorithmCommandInput, options?: __HttpHandlerOptions): Promise<CreateAlgorithmCommandOutput>;
            createAlgorithm(args: CreateAlgorithmCommandInput, cb: (err: any, data?: CreateAlgorithmCommandOutput) => void): void;
            createAlgorithm(args: CreateAlgorithmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAlgorithmCommandOutput) => void): void;
            /**
                * <p>Creates a running app for the specified UserProfile. Supported apps are
                *       <code>JupyterServer</code> and <code>KernelGateway</code>. This operation is automatically
                *       invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel
                *       configurations are selected by the user. A user may have multiple Apps active simultaneously.</p>
                */
            createApp(args: CreateAppCommandInput, options?: __HttpHandlerOptions): Promise<CreateAppCommandOutput>;
            createApp(args: CreateAppCommandInput, cb: (err: any, data?: CreateAppCommandOutput) => void): void;
            createApp(args: CreateAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAppCommandOutput) => void): void;
            /**
                * <p>Creates a configuration for running a SageMaker image as a KernelGateway app. The
                *         configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the
                *         kernels in the image.</p>
                */
            createAppImageConfig(args: CreateAppImageConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateAppImageConfigCommandOutput>;
            createAppImageConfig(args: CreateAppImageConfigCommandInput, cb: (err: any, data?: CreateAppImageConfigCommandOutput) => void): void;
            createAppImageConfig(args: CreateAppImageConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAppImageConfigCommandOutput) => void): void;
            /**
                * <p>Creates an <i>artifact</i>. An artifact is a lineage tracking entity that
                *         represents a URI addressable object or data. Some examples are the S3 URI of a dataset and
                *         the ECR registry path of an image. For more information, see
                *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
                *           ML Lineage Tracking</a>.</p>
                */
            createArtifact(args: CreateArtifactCommandInput, options?: __HttpHandlerOptions): Promise<CreateArtifactCommandOutput>;
            createArtifact(args: CreateArtifactCommandInput, cb: (err: any, data?: CreateArtifactCommandOutput) => void): void;
            createArtifact(args: CreateArtifactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateArtifactCommandOutput) => void): void;
            /**
                * <p>Creates an Autopilot job.</p>
                *          <p>Find the best-performing model after you run an Autopilot job by calling .</p>
                *          <p>For information about how to use Autopilot, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html">Automate Model
                *             Development with Amazon SageMaker Autopilot</a>.</p>
                */
            createAutoMLJob(args: CreateAutoMLJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateAutoMLJobCommandOutput>;
            createAutoMLJob(args: CreateAutoMLJobCommandInput, cb: (err: any, data?: CreateAutoMLJobCommandOutput) => void): void;
            createAutoMLJob(args: CreateAutoMLJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAutoMLJobCommandOutput) => void): void;
            /**
                * <p>Creates a Git repository as a resource in your SageMaker account. You can associate the
                *             repository with notebook instances so that you can use Git source control for the
                *             notebooks you create. The Git repository is a resource in your SageMaker account, so it can
                *             be associated with more than one notebook instance, and it persists independently from
                *             the lifecycle of any notebook instances it is associated with.</p>
                *         <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository.</p>
                */
            createCodeRepository(args: CreateCodeRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<CreateCodeRepositoryCommandOutput>;
            createCodeRepository(args: CreateCodeRepositoryCommandInput, cb: (err: any, data?: CreateCodeRepositoryCommandOutput) => void): void;
            createCodeRepository(args: CreateCodeRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCodeRepositoryCommandOutput) => void): void;
            /**
                * <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the
                *             resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p>
                *         <p>If
                *             you choose to host your model using Amazon SageMaker hosting services, you can use the resulting
                *             model artifacts as part of the model. You can also use the artifacts with
                *             Amazon Web Services
                *             IoT Greengrass. In that case, deploy them as an ML
                *             resource.</p>
                *         <p>In the request body, you provide the following:</p>
                *         <ul>
                *             <li>
                *                 <p>A name for the compilation job</p>
                *             </li>
                *             <li>
                *                 <p> Information about the input model artifacts </p>
                *             </li>
                *             <li>
                *                 <p>The output location for the compiled model and the device (target) that the
                *                     model runs on </p>
                *             </li>
                *             <li>
                *                 <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform
                *                     the model compilation job. </p>
                *             </li>
                *          </ul>
                *         <p>You can also provide a <code>Tag</code> to track the model compilation job's resource
                *             use and costs. The response body contains the
                *                 <code>CompilationJobArn</code>
                *             for the compiled job.</p>
                *         <p>To stop a model compilation job, use <a>StopCompilationJob</a>. To get
                *             information about a particular model compilation job, use <a>DescribeCompilationJob</a>. To get information about multiple model
                *             compilation jobs, use <a>ListCompilationJobs</a>.</p>
                */
            createCompilationJob(args: CreateCompilationJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateCompilationJobCommandOutput>;
            createCompilationJob(args: CreateCompilationJobCommandInput, cb: (err: any, data?: CreateCompilationJobCommandOutput) => void): void;
            createCompilationJob(args: CreateCompilationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCompilationJobCommandOutput) => void): void;
            /**
                * <p>Creates a <i>context</i>. A context is a lineage tracking entity that
                *         represents a logical grouping of other tracking or experiment entities. Some examples are
                *         an endpoint and a model package. For more information, see
                *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
                *           ML Lineage Tracking</a>.</p>
                */
            createContext(args: CreateContextCommandInput, options?: __HttpHandlerOptions): Promise<CreateContextCommandOutput>;
            createContext(args: CreateContextCommandInput, cb: (err: any, data?: CreateContextCommandOutput) => void): void;
            createContext(args: CreateContextCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContextCommandOutput) => void): void;
            /**
                * <p>Creates a definition for a job that monitors data quality and drift. For information
                *          about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
                */
            createDataQualityJobDefinition(args: CreateDataQualityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataQualityJobDefinitionCommandOutput>;
            createDataQualityJobDefinition(args: CreateDataQualityJobDefinitionCommandInput, cb: (err: any, data?: CreateDataQualityJobDefinitionCommandOutput) => void): void;
            createDataQualityJobDefinition(args: CreateDataQualityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataQualityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Creates a device fleet.</p>
                */
            createDeviceFleet(args: CreateDeviceFleetCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeviceFleetCommandOutput>;
            createDeviceFleet(args: CreateDeviceFleetCommandInput, cb: (err: any, data?: CreateDeviceFleetCommandOutput) => void): void;
            createDeviceFleet(args: CreateDeviceFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeviceFleetCommandOutput) => void): void;
            /**
                * <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated
                *     Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application,
                *     policy, and Amazon Virtual Private Cloud (VPC) configurations. An Amazon Web Services account is limited to one domain per region.
                *     Users within a domain can share notebook files and other artifacts with each other.</p>
                *
                *          <p>
                *             <b>EFS storage</b>
                *          </p>
                *          <p>When a domain is created, an EFS volume is created for use by all of the users within the
                *     domain. Each user receives a private home directory within the EFS volume for notebooks,
                *     Git repositories, and data files.</p>
                *          <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with
                *      an Amazon Web Services managed key by default. For more control, you can specify a
                *      customer managed key. For more information, see
                *     <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at
                *       Rest Using Encryption</a>.</p>
                *
                *          <p>
                *             <b>VPC configuration</b>
                *          </p>
                *          <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified
                *     VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code>
                *     parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you
                *     choose when you onboard to Studio. The following options are available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by
                *         Amazon SageMaker, which allows internet access. This is the default value.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets.
                *         Internet access is disabled by default. To allow internet access, you must specify a
                *         NAT gateway.</p>
                *                <p>When internet access is disabled, you won't be able to run a Studio notebook or to
                *         train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime
                *         or a NAT gateway and your security groups allow outbound connections.</p>
                *             </li>
                *          </ul>
                *          <important>
                *             <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules
                *       in order to launch a SageMaker Studio app successfully.</p>
                *          </important>
                *          <p>For more information, see
                *     <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect
                *        SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
                */
            createDomain(args: CreateDomainCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainCommandOutput>;
            createDomain(args: CreateDomainCommandInput, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
            createDomain(args: CreateDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
            /**
                * <p>Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.</p>
                */
            createEdgeDeploymentPlan(args: CreateEdgeDeploymentPlanCommandInput, options?: __HttpHandlerOptions): Promise<CreateEdgeDeploymentPlanCommandOutput>;
            createEdgeDeploymentPlan(args: CreateEdgeDeploymentPlanCommandInput, cb: (err: any, data?: CreateEdgeDeploymentPlanCommandOutput) => void): void;
            createEdgeDeploymentPlan(args: CreateEdgeDeploymentPlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEdgeDeploymentPlanCommandOutput) => void): void;
            /**
                * <p>Creates a new stage in an existing edge deployment plan.</p>
                */
            createEdgeDeploymentStage(args: CreateEdgeDeploymentStageCommandInput, options?: __HttpHandlerOptions): Promise<CreateEdgeDeploymentStageCommandOutput>;
            createEdgeDeploymentStage(args: CreateEdgeDeploymentStageCommandInput, cb: (err: any, data?: CreateEdgeDeploymentStageCommandOutput) => void): void;
            createEdgeDeploymentStage(args: CreateEdgeDeploymentStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEdgeDeploymentStageCommandOutput) => void): void;
            /**
                * <p>Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.</p>
                */
            createEdgePackagingJob(args: CreateEdgePackagingJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateEdgePackagingJobCommandOutput>;
            createEdgePackagingJob(args: CreateEdgePackagingJobCommandInput, cb: (err: any, data?: CreateEdgePackagingJobCommandOutput) => void): void;
            createEdgePackagingJob(args: CreateEdgePackagingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEdgePackagingJobCommandOutput) => void): void;
            /**
                * <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker
                *             uses the endpoint to provision resources and deploy models. You create the endpoint
                *             configuration with the <a>CreateEndpointConfig</a> API. </p>
                *         <p> Use this API to deploy models using SageMaker hosting services. </p>
                *         <p>For an example that calls this method when deploying a model to SageMaker hosting services,
                *             see the <a href="https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb">Create Endpoint example notebook.</a>
                *          </p>
                *         <note>
                *             <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint
                *                 that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
                *                 operations are being performed on the endpoint. To update an endpoint, you must
                *                 create a new <code>EndpointConfig</code>.</p>
                *         </note>
                *         <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p>
                *         <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML
                *             compute instances), and deploys the model(s) on them. </p>
                *
                *         <note>
                *             <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
                *                 verify that your endpoint configuration exists. When you read data from a DynamoDB
                *                 table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
                *                   <code>Eventually Consistent Reads</code>
                *                </a>, the response might not
                *                 reflect the results of a recently completed write operation. The response might
                *                 include some stale data. If the dependent entities are not yet in DynamoDB, this
                *                 causes a validation error. If you repeat your read request after a short time, the
                *                 response should return the latest data. So retry logic is recommended to handle
                *                 these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
                *         </note>
                *         <p>When SageMaker receives the request, it sets the endpoint status to
                *                 <code>Creating</code>. After it creates the endpoint, it sets the status to
                *                 <code>InService</code>. SageMaker can then process incoming requests for inferences. To
                *             check the status of an endpoint, use the <a>DescribeEndpoint</a>
                *             API.</p>
                *         <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location,
                *             SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you
                *             provided. Amazon Web Services STS is activated in your IAM user account by default. If you previously
                *             deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For
                *             more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
                *                 Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User
                *                 Guide</i>.</p>
                *         <note>
                *             <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose
                *                 Roles in the left navigation pane. Search the IAM role that you want to grant
                *                 access to use the <a>CreateEndpoint</a> and <a>CreateEndpointConfig</a> API operations, add the following policies to
                *                 the role. </p>
                *             <ul>
                *                <li>
                *                     <p>Option 1: For a full SageMaker access, search and attach the
                *                             <code>AmazonSageMakerFullAccess</code> policy.</p>
                *                 </li>
                *                <li>
                *                     <p>Option 2: For granting a limited access to an IAM role, paste the
                *                         following Action elements manually into the JSON file of the IAM role: </p>
                *                     <p>
                *                      <code>"Action": ["sagemaker:CreateEndpoint",
                *                             "sagemaker:CreateEndpointConfig"]</code>
                *                   </p>
                *                     <p>
                *                      <code>"Resource": [</code>
                *                   </p>
                *                     <p>
                *                      <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code>
                *                   </p>
                *                     <p>
                *                      <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code>
                *                   </p>
                *                     <p>
                *                      <code>]</code>
                *                   </p>
                *                     <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker API
                *                             Permissions: Actions, Permissions, and Resources
                *                         Reference</a>.</p>
                *                 </li>
                *             </ul>
                *
                *         </note>
                */
            createEndpoint(args: CreateEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreateEndpointCommandOutput>;
            createEndpoint(args: CreateEndpointCommandInput, cb: (err: any, data?: CreateEndpointCommandOutput) => void): void;
            createEndpoint(args: CreateEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEndpointCommandOutput) => void): void;
            /**
                * <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In
                *             the configuration, you identify one or more models, created using the
                *                 <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to
                *             provision. Then you call the <a>CreateEndpoint</a> API.</p>
                *         <note>
                *             <p> Use this API if you want to use SageMaker hosting services to deploy models into
                *                 production. </p>
                *         </note>
                *         <p>In the request, you define a <code>ProductionVariant</code>, for each model that you
                *             want to deploy. Each <code>ProductionVariant</code> parameter also describes the
                *             resources that you want SageMaker to provision. This includes the number and type of ML
                *             compute instances to deploy. </p>
                *         <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to
                *             specify how much traffic you want to allocate to each model. For example, suppose that
                *             you want to host two models, A and B, and you assign traffic weight 2 for model A and 1
                *             for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to
                *             model B. </p>
                *         <note>
                *             <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
                *                 verify that your endpoint configuration exists. When you read data from a DynamoDB
                *                 table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
                *                   <code>Eventually Consistent Reads</code>
                *                </a>, the response might not
                *                 reflect the results of a recently completed write operation. The response might
                *                 include some stale data. If the dependent entities are not yet in DynamoDB, this
                *                 causes a validation error. If you repeat your read request after a short time, the
                *                 response should return the latest data. So retry logic is recommended to handle
                *                 these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
                *         </note>
                */
            createEndpointConfig(args: CreateEndpointConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateEndpointConfigCommandOutput>;
            createEndpointConfig(args: CreateEndpointConfigCommandInput, cb: (err: any, data?: CreateEndpointConfigCommandOutput) => void): void;
            createEndpointConfig(args: CreateEndpointConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEndpointConfigCommandOutput) => void): void;
            /**
                * <p>Creates an SageMaker <i>experiment</i>. An experiment is a collection of
                *         <i>trials</i> that are observed, compared and evaluated as a group. A trial is
                *       a set of steps, called <i>trial components</i>, that produce a machine learning
                *       model.</p>
                *          <p>The goal of an experiment is to determine the components that produce the best model.
                *       Multiple trials are performed, each one isolating and measuring the impact of a change to one
                *       or more inputs, while keeping the remaining inputs constant.</p>
                *          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
                *       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
                *       must use the logging APIs provided by the SDK.</p>
                *          <p>You can add tags to experiments, trials, trial components and then use the <a>Search</a> API to search for the tags.</p>
                *          <p>To add a description to an experiment, specify the optional <code>Description</code>
                *       parameter. To add a description later, or to change the description, call the <a>UpdateExperiment</a> API.</p>
                *          <p>To get a list of all your experiments, call the <a>ListExperiments</a> API. To
                *       view an experiment's properties, call the <a>DescribeExperiment</a> API. To get a
                *       list of all the trials associated with an experiment, call the <a>ListTrials</a>
                *       API. To create a trial call the <a>CreateTrial</a> API.</p>
                */
            createExperiment(args: CreateExperimentCommandInput, options?: __HttpHandlerOptions): Promise<CreateExperimentCommandOutput>;
            createExperiment(args: CreateExperimentCommandInput, cb: (err: any, data?: CreateExperimentCommandOutput) => void): void;
            createExperiment(args: CreateExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExperimentCommandOutput) => void): void;
            /**
                * <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of
                *             <code>Features</code> defined in the <code>FeatureStore</code> to describe a
                *             <code>Record</code>. </p>
                *          <p>The <code>FeatureGroup</code> defines the schema and features contained in the
                *          FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of
                *             <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an
                *             <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code>
                *          and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Web Services service quotas</a> to see
                *          the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p>
                *          <important>
                *             <p>You must include at least one of <code>OnlineStoreConfig</code> and
                *                <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p>
                *          </important>
                */
            createFeatureGroup(args: CreateFeatureGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateFeatureGroupCommandOutput>;
            createFeatureGroup(args: CreateFeatureGroupCommandInput, cb: (err: any, data?: CreateFeatureGroupCommandOutput) => void): void;
            createFeatureGroup(args: CreateFeatureGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFeatureGroupCommandOutput) => void): void;
            /**
                * <p>Creates a flow definition.</p>
                */
            createFlowDefinition(args: CreateFlowDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateFlowDefinitionCommandOutput>;
            createFlowDefinition(args: CreateFlowDefinitionCommandInput, cb: (err: any, data?: CreateFlowDefinitionCommandOutput) => void): void;
            createFlowDefinition(args: CreateFlowDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFlowDefinitionCommandOutput) => void): void;
            /**
                * <p>Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.</p>
                */
            createHumanTaskUi(args: CreateHumanTaskUiCommandInput, options?: __HttpHandlerOptions): Promise<CreateHumanTaskUiCommandOutput>;
            createHumanTaskUi(args: CreateHumanTaskUiCommandInput, cb: (err: any, data?: CreateHumanTaskUiCommandOutput) => void): void;
            createHumanTaskUi(args: CreateHumanTaskUiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHumanTaskUiCommandOutput) => void): void;
            /**
                * <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version
                *             of a model by running many training jobs on your dataset using the algorithm you choose
                *             and values for hyperparameters within ranges that you specify. It then chooses the
                *             hyperparameter values that result in a model that performs the best, as measured by an
                *             objective metric that you choose.</p>
                */
            createHyperParameterTuningJob(args: CreateHyperParameterTuningJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateHyperParameterTuningJobCommandOutput>;
            createHyperParameterTuningJob(args: CreateHyperParameterTuningJobCommandInput, cb: (err: any, data?: CreateHyperParameterTuningJobCommandOutput) => void): void;
            createHyperParameterTuningJob(args: CreateHyperParameterTuningJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHyperParameterTuningJobCommandOutput) => void): void;
            /**
                * <p>Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image
                *         version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see
                *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.</p>
                */
            createImage(args: CreateImageCommandInput, options?: __HttpHandlerOptions): Promise<CreateImageCommandOutput>;
            createImage(args: CreateImageCommandInput, cb: (err: any, data?: CreateImageCommandOutput) => void): void;
            createImage(args: CreateImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateImageCommandOutput) => void): void;
            /**
                * <p>Creates a version of the SageMaker image specified by <code>ImageName</code>. The version
                *         represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.</p>
                */
            createImageVersion(args: CreateImageVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateImageVersionCommandOutput>;
            createImageVersion(args: CreateImageVersionCommandInput, cb: (err: any, data?: CreateImageVersionCommandOutput) => void): void;
            createImageVersion(args: CreateImageVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateImageVersionCommandOutput) => void): void;
            /**
                * <p>Starts a recommendation job. You can create either an instance
                *           recommendation or load test job.</p>
                */
            createInferenceRecommendationsJob(args: CreateInferenceRecommendationsJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateInferenceRecommendationsJobCommandOutput>;
            createInferenceRecommendationsJob(args: CreateInferenceRecommendationsJobCommandInput, cb: (err: any, data?: CreateInferenceRecommendationsJobCommandOutput) => void): void;
            createInferenceRecommendationsJob(args: CreateInferenceRecommendationsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateInferenceRecommendationsJobCommandOutput) => void): void;
            /**
                * <p>Creates a job that uses workers to label the data objects in your input dataset. You
                *             can use the labeled data to train machine learning models. </p>
                *         <p>You can select your workforce from one of three providers:</p>
                *         <ul>
                *             <li>
                *                 <p>A private workforce that you create. It can include employees, contractors,
                *                     and outside experts. Use a private workforce when want the data to stay within
                *                     your organization or when a specific set of skills is required.</p>
                *             </li>
                *             <li>
                *                 <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide
                *                     expertise in specific areas. </p>
                *             </li>
                *             <li>
                *                 <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it
                *                     should only be used for public data or data that has been stripped of any
                *                     personally identifiable information.</p>
                *             </li>
                *          </ul>
                *         <p>You can also use <i>automated data labeling</i> to reduce the number of
                *             data objects that need to be labeled by a human. Automated data labeling uses
                *                 <i>active learning</i> to determine if a data object can be labeled by
                *             machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using
                *                 Automated Data Labeling</a>.</p>
                *         <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a
                *                 <i>manifest file</i> that describes the location of each object. For
                *             more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p>
                *         <p>The output can be used as the manifest file for another labeling job or as training
                *             data for your machine learning models.</p>
                *         <p>You can use this operation to create a static labeling job or a streaming labeling
                *             job. A static labeling job stops if all data objects in the input manifest file
                *             identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job
                *             runs perpetually until it is manually stopped, or remains idle for 10 days. You can send
                *             new data objects to an active (<code>InProgress</code>) streaming labeling job in real
                *             time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job
                *                 (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming
                *             labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling
                *                 Job</a>.</p>
                */
            createLabelingJob(args: CreateLabelingJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateLabelingJobCommandOutput>;
            createLabelingJob(args: CreateLabelingJobCommandInput, cb: (err: any, data?: CreateLabelingJobCommandOutput) => void): void;
            createLabelingJob(args: CreateLabelingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLabelingJobCommandOutput) => void): void;
            /**
                * <p>Creates a model in SageMaker. In the request, you name the model and describe a primary
                *             container. For the primary container, you specify the Docker image that
                *             contains inference code, artifacts (from prior training), and a custom environment map
                *             that the inference code uses when you deploy the model for predictions.</p>
                *         <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch
                *             transform job.</p>
                *         <p>To host your model, you create an endpoint configuration with the
                *                 <code>CreateEndpointConfig</code> API, and then create an endpoint with the
                *                 <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you
                *             defined for the model in the hosting environment. </p>
                *         <p>For an example that calls this method when deploying a model to SageMaker hosting services,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model">Create a Model (Amazon Web Services SDK for Python (Boto
                *             3)).</a>
                *          </p>
                *         <p>To run a batch transform using your model, you start a job with the
                *                 <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get
                *             inferences which are then saved to a specified S3 location.</p>
                *         <p>In the request, you also provide an IAM role that SageMaker can assume to access model
                *             artifacts and docker image for deployment on ML compute hosting instances or for batch
                *             transform jobs. In addition, you also use the IAM role to manage permissions the
                *             inference code needs. For example, if the inference code access any other Amazon Web Services resources,
                *             you grant necessary permissions via this role.</p>
                */
            createModel(args: CreateModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelCommandOutput>;
            createModel(args: CreateModelCommandInput, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            createModel(args: CreateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            /**
                * <p>Creates the definition for a model bias job.</p>
                */
            createModelBiasJobDefinition(args: CreateModelBiasJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelBiasJobDefinitionCommandOutput>;
            createModelBiasJobDefinition(args: CreateModelBiasJobDefinitionCommandInput, cb: (err: any, data?: CreateModelBiasJobDefinitionCommandOutput) => void): void;
            createModelBiasJobDefinition(args: CreateModelBiasJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelBiasJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Creates the definition for a model explainability job.</p>
                */
            createModelExplainabilityJobDefinition(args: CreateModelExplainabilityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelExplainabilityJobDefinitionCommandOutput>;
            createModelExplainabilityJobDefinition(args: CreateModelExplainabilityJobDefinitionCommandInput, cb: (err: any, data?: CreateModelExplainabilityJobDefinitionCommandOutput) => void): void;
            createModelExplainabilityJobDefinition(args: CreateModelExplainabilityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelExplainabilityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services
                *             Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to
                *             model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
                *         <p>To create a model package by specifying a Docker container that contains your
                *             inference code and the Amazon S3 location of your model artifacts, provide values for
                *             <code>InferenceSpecification</code>. To create a model from an algorithm resource
                *             that you created or subscribed to in Amazon Web Services Marketplace, provide a value for
                *             <code>SourceAlgorithmSpecification</code>.</p>
                *         <note>
                *             <p>There are two types of model packages:</p>
                *             <ul>
                *                <li>
                *                     <p>Versioned - a model that is part of a model group in the model
                *                         registry.</p>
                *                 </li>
                *                <li>
                *                     <p>Unversioned - a model package that is not part of a model group.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            createModelPackage(args: CreateModelPackageCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelPackageCommandOutput>;
            createModelPackage(args: CreateModelPackageCommandInput, cb: (err: any, data?: CreateModelPackageCommandOutput) => void): void;
            createModelPackage(args: CreateModelPackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelPackageCommandOutput) => void): void;
            /**
                * <p>Creates a model group. A model group contains a group of model versions.</p>
                */
            createModelPackageGroup(args: CreateModelPackageGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelPackageGroupCommandOutput>;
            createModelPackageGroup(args: CreateModelPackageGroupCommandInput, cb: (err: any, data?: CreateModelPackageGroupCommandOutput) => void): void;
            createModelPackageGroup(args: CreateModelPackageGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelPackageGroupCommandOutput) => void): void;
            /**
                * <p>Creates a definition for a job that monitors model quality and drift. For information
                *          about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
                */
            createModelQualityJobDefinition(args: CreateModelQualityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelQualityJobDefinitionCommandOutput>;
            createModelQualityJobDefinition(args: CreateModelQualityJobDefinitionCommandInput, cb: (err: any, data?: CreateModelQualityJobDefinitionCommandOutput) => void): void;
            createModelQualityJobDefinition(args: CreateModelQualityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelQualityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data
                *          captured for an Amazon SageMaker Endoint.</p>
                */
            createMonitoringSchedule(args: CreateMonitoringScheduleCommandInput, options?: __HttpHandlerOptions): Promise<CreateMonitoringScheduleCommandOutput>;
            createMonitoringSchedule(args: CreateMonitoringScheduleCommandInput, cb: (err: any, data?: CreateMonitoringScheduleCommandOutput) => void): void;
            createMonitoringSchedule(args: CreateMonitoringScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMonitoringScheduleCommandOutput) => void): void;
            /**
                * <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML)
                *             compute instance running on a Jupyter notebook. </p>
                *         <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute
                *             instance that you want to run. SageMaker launches the instance, installs common libraries
                *             that you can use to explore datasets for model training, and attaches an ML storage
                *             volume to the notebook instance. </p>
                *         <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to
                *             use SageMaker with a specific algorithm or with a machine learning framework. </p>
                *         <p>After receiving the request, SageMaker does the following:</p>
                *         <ol>
                *             <li>
                *                 <p>Creates a network interface in the SageMaker VPC.</p>
                *             </li>
                *             <li>
                *                 <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network
                *                     interface in your own VPC, which is inferred from the subnet ID that you provide
                *                     in the input. When creating this network interface, SageMaker attaches the security
                *                     group that you specified in the request to the network interface that it creates
                *                     in your VPC.</p>
                *
                *             </li>
                *             <li>
                *                 <p>Launches an EC2 instance of the type specified in the request in the SageMaker
                *                     VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both
                *                     network interfaces when launching this instance. This enables inbound traffic
                *                     from your own VPC to the notebook instance, assuming that the security groups
                *                     allow it.</p>
                *             </li>
                *          </ol>
                *
                *         <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN).
                *             You can't change the name of a notebook instance after you create it.</p>
                *         <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and
                *             work in Jupyter notebooks. For example, you can write code to explore a dataset that you
                *             can use for model training, train a model, host models by creating SageMaker endpoints, and
                *             validate hosted models. </p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
                */
            createNotebookInstance(args: CreateNotebookInstanceCommandInput, options?: __HttpHandlerOptions): Promise<CreateNotebookInstanceCommandOutput>;
            createNotebookInstance(args: CreateNotebookInstanceCommandInput, cb: (err: any, data?: CreateNotebookInstanceCommandOutput) => void): void;
            createNotebookInstance(args: CreateNotebookInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNotebookInstanceCommandOutput) => void): void;
            /**
                * <p>Creates a lifecycle configuration that you can associate with a notebook instance. A
                *                 <i>lifecycle configuration</i> is a collection of shell scripts that
                *             run when you create or start a notebook instance.</p>
                *         <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
                *         <p>The value of the <code>$PATH</code> environment variable that is available to both
                *             scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
                *         <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group
                *                 <code>/aws/sagemaker/NotebookInstances</code> in log stream
                *                 <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
                *         <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs
                *             for longer than 5 minutes, it fails and the notebook instance is not created or
                *             started.</p>
                *         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
                *                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
                */
            createNotebookInstanceLifecycleConfig(args: CreateNotebookInstanceLifecycleConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateNotebookInstanceLifecycleConfigCommandOutput>;
            createNotebookInstanceLifecycleConfig(args: CreateNotebookInstanceLifecycleConfigCommandInput, cb: (err: any, data?: CreateNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            createNotebookInstanceLifecycleConfig(args: CreateNotebookInstanceLifecycleConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            /**
                * <p>Creates a pipeline using a JSON pipeline definition.</p>
                */
            createPipeline(args: CreatePipelineCommandInput, options?: __HttpHandlerOptions): Promise<CreatePipelineCommandOutput>;
            createPipeline(args: CreatePipelineCommandInput, cb: (err: any, data?: CreatePipelineCommandOutput) => void): void;
            createPipeline(args: CreatePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePipelineCommandOutput) => void): void;
            /**
                * <p>Creates a URL for a specified UserProfile in a Domain.  When accessed in a web browser,
                *        the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of
                *        the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume.
                *        This operation can only be called when the authentication mode equals IAM.
                *    </p>
                *          <p>The IAM role or user used to call this API defines the permissions to access the app. Once
                *       the presigned URL is created, no additional permission is required to access this URL. IAM
                *          authorization policies for this API are also enforced for every HTTP request and WebSocket
                *          frame that attempts to connect to the app.</p>
                *          <p>You can restrict access to this API and to the
                *       URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more
                *       information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a>
                *          .</p>
                *          <note>
                *             <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you
                *           are directed to the Amazon Web Services console sign-in page.</p>
                *          </note>
                */
            createPresignedDomainUrl(args: CreatePresignedDomainUrlCommandInput, options?: __HttpHandlerOptions): Promise<CreatePresignedDomainUrlCommandOutput>;
            createPresignedDomainUrl(args: CreatePresignedDomainUrlCommandInput, cb: (err: any, data?: CreatePresignedDomainUrlCommandOutput) => void): void;
            createPresignedDomainUrl(args: CreatePresignedDomainUrlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePresignedDomainUrlCommandOutput) => void): void;
            /**
                * <p>Returns a URL that you can use to connect to the Jupyter server from a notebook
                *             instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook
                *             instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook
                *             instance. The console uses this API to get the URL and show the page.</p>
                *         <p> The IAM role or user used to call this API defines the permissions to access the
                *             notebook instance. Once the presigned URL is created, no additional permission is
                *             required to access this URL. IAM authorization policies for this API are also enforced
                *             for every HTTP request and WebSocket frame that attempts to connect to the notebook
                *             instance.</p>
                *         <p>You can restrict access to this API and to the URL that it returns to a list of IP
                *             addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the
                *                 <code>aws:SourceIP</code> condition context key to specify the list of IP addresses
                *             that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p>
                *         <note>
                *             <p>The URL that you get from a call to <a>CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If
                *                 you try to use the URL after the 5-minute limit expires, you are directed to the
                *                 Amazon Web Services console sign-in page.</p>
                *         </note>
                */
            createPresignedNotebookInstanceUrl(args: CreatePresignedNotebookInstanceUrlCommandInput, options?: __HttpHandlerOptions): Promise<CreatePresignedNotebookInstanceUrlCommandOutput>;
            createPresignedNotebookInstanceUrl(args: CreatePresignedNotebookInstanceUrlCommandInput, cb: (err: any, data?: CreatePresignedNotebookInstanceUrlCommandOutput) => void): void;
            createPresignedNotebookInstanceUrl(args: CreatePresignedNotebookInstanceUrlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePresignedNotebookInstanceUrlCommandOutput) => void): void;
            /**
                * <p>Creates a processing job.</p>
                */
            createProcessingJob(args: CreateProcessingJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateProcessingJobCommandOutput>;
            createProcessingJob(args: CreateProcessingJobCommandInput, cb: (err: any, data?: CreateProcessingJobCommandOutput) => void): void;
            createProcessingJob(args: CreateProcessingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProcessingJobCommandOutput) => void): void;
            /**
                * <p>Creates a machine learning (ML) project that can contain one or more templates that set
                *             up an ML pipeline from training to deploying an approved model.</p>
                */
            createProject(args: CreateProjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateProjectCommandOutput>;
            createProject(args: CreateProjectCommandInput, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            createProject(args: CreateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            /**
                * <p>Creates a new Studio Lifecycle Configuration.</p>
                */
            createStudioLifecycleConfig(args: CreateStudioLifecycleConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateStudioLifecycleConfigCommandOutput>;
            createStudioLifecycleConfig(args: CreateStudioLifecycleConfigCommandInput, cb: (err: any, data?: CreateStudioLifecycleConfigCommandOutput) => void): void;
            createStudioLifecycleConfig(args: CreateStudioLifecycleConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStudioLifecycleConfigCommandOutput) => void): void;
            /**
                * <p>Starts a model training job. After training completes, SageMaker saves the resulting
                *             model artifacts to an Amazon S3 location that you specify. </p>
                *         <p>If you choose to host your model using SageMaker hosting services, you can use the
                *             resulting model artifacts as part of the model. You can also use the artifacts in a
                *             machine learning service other than SageMaker, provided that you know how to use them for
                *             inference.
                *         </p>
                *         <p>In the request body, you provide the following: </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>AlgorithmSpecification</code> - Identifies the training algorithm to
                *                     use.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>HyperParameters</code> - Specify these algorithm-specific parameters to
                *                     enable the estimation of model parameters during training. Hyperparameters can
                *                     be tuned to optimize this learning process. For a list of hyperparameters for
                *                     each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InputDataConfig</code> - Describes the training dataset and the Amazon S3,
                *                     EFS, or FSx location where it is stored.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want
                *                     SageMaker to save the results of model training. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ResourceConfig</code> - Identifies the resources, ML compute
                *                     instances, and ML storage volumes to deploy for model training. In distributed
                *                     training, you specify more than one instance. </p>
                *
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine
                *                     learning models by up to 80% by using Amazon EC2 Spot instances. For more
                *                     information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot
                *                         Training</a>. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on
                *                     your behalf during model training.
                *
                *                     You must grant this role the necessary permissions so that SageMaker can successfully
                *                     complete model training. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>StoppingCondition</code> - To help cap training costs, use
                *                         <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use
                *                         <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot
                *                     training job has to complete. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Environment</code> - The environment variables to set in the Docker
                *                     container.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RetryStrategy</code> - The number of times to retry the job when the job
                *                     fails due to an <code>InternalServerError</code>.</p>
                *             </li>
                *          </ul>
                *         <p> For more information about SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
                */
            createTrainingJob(args: CreateTrainingJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateTrainingJobCommandOutput>;
            createTrainingJob(args: CreateTrainingJobCommandInput, cb: (err: any, data?: CreateTrainingJobCommandOutput) => void): void;
            createTrainingJob(args: CreateTrainingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTrainingJobCommandOutput) => void): void;
            /**
                * <p>Starts a transform job. A transform job uses a trained model to get inferences on a
                *             dataset and saves these results to an Amazon S3 location that you specify.</p>
                *         <p>To perform batch transformations, you create a transform job and use the data that you
                *             have readily available.</p>
                *         <p>In the request body, you provide the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>TransformJobName</code> - Identifies the transform job. The name must be
                *                     unique within an Amazon Web Services Region in an Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ModelName</code> - Identifies the model to use. <code>ModelName</code>
                *                     must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services
                * 		    account. For information on creating a model, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TransformInput</code> - Describes the dataset to be transformed and the
                *                     Amazon S3 location where it is stored.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TransformOutput</code> - Identifies the Amazon S3 location where you want
                *                     Amazon SageMaker to save the results from the transform job.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TransformResources</code> - Identifies the ML compute instances for the
                *                     transform job.</p>
                *             </li>
                *          </ul>
                *         <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch
                *                 Transform</a>.</p>
                */
            createTransformJob(args: CreateTransformJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateTransformJobCommandOutput>;
            createTransformJob(args: CreateTransformJobCommandInput, cb: (err: any, data?: CreateTransformJobCommandOutput) => void): void;
            createTransformJob(args: CreateTransformJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTransformJobCommandOutput) => void): void;
            /**
                * <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called
                *         <i>trial components</i> that produce a machine learning model. A trial is part
                *       of a single SageMaker <i>experiment</i>.</p>
                *          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
                *       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
                *       must use the logging APIs provided by the SDK.</p>
                *          <p>You can add tags to a trial and then use the <a>Search</a> API to search for
                *       the tags.</p>
                *          <p>To get a list of all your trials, call the <a>ListTrials</a> API. To view a
                *       trial's properties, call the <a>DescribeTrial</a> API. To create a trial component,
                *       call the <a>CreateTrialComponent</a> API.</p>
                */
            createTrial(args: CreateTrialCommandInput, options?: __HttpHandlerOptions): Promise<CreateTrialCommandOutput>;
            createTrial(args: CreateTrialCommandInput, cb: (err: any, data?: CreateTrialCommandOutput) => void): void;
            createTrial(args: CreateTrialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTrialCommandOutput) => void): void;
            /**
                * <p>Creates a <i>trial component</i>, which is a stage of a machine learning
                *         <i>trial</i>. A trial is composed of one or more trial components. A trial
                *       component can be used in multiple trials.</p>
                *          <p>Trial components include pre-processing jobs, training jobs, and batch transform
                *       jobs.</p>
                *          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
                *       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
                *       must use the logging APIs provided by the SDK.</p>
                *          <p>You can add tags to a trial component and then use the <a>Search</a> API to
                *       search for the tags.</p>
                */
            createTrialComponent(args: CreateTrialComponentCommandInput, options?: __HttpHandlerOptions): Promise<CreateTrialComponentCommandOutput>;
            createTrialComponent(args: CreateTrialComponentCommandInput, cb: (err: any, data?: CreateTrialComponentCommandOutput) => void): void;
            createTrialComponent(args: CreateTrialComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTrialComponentCommandOutput) => void): void;
            /**
                * <p>Creates a user profile. A user profile represents a single user within a domain, and is
                *      the main way to reference a "person" for the purposes of sharing, reporting, and other
                *      user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an
                *      administrator invites a person by email or imports them from SSO, a user profile is
                *      automatically created. A user profile is the primary holder of settings for an individual
                *      user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
                *    </p>
                */
            createUserProfile(args: CreateUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserProfileCommandOutput>;
            createUserProfile(args: CreateUserProfileCommandInput, cb: (err: any, data?: CreateUserProfileCommandOutput) => void): void;
            createUserProfile(args: CreateUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserProfileCommandOutput) => void): void;
            /**
                * <p>Use this operation to create a workforce. This operation will return an error
                *           if a workforce already exists in the Amazon Web Services Region that you specify. You can only
                *           create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p>
                *
                *         <p>If you want to create a new workforce in an Amazon Web Services Region where
                *       a workforce already exists, use the  API
                *       operation to delete the existing workforce and then use <code>CreateWorkforce</code>
                *       to create a new workforce.</p>
                *
                *          <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool
                *     in <code>CognitoConfig</code>.
                *     You can also create an Amazon Cognito workforce using the Amazon SageMaker console.
                *     For more information, see
                *       <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">
                *       Create a Private Workforce (Amazon Cognito)</a>.</p>
                *
                *          <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP
                *       configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i>
                *       because groups are used by Ground Truth and Amazon A2I to create work teams.
                *       For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html">
                *       Create a Private Workforce (OIDC IdP)</a>.</p>
                */
            createWorkforce(args: CreateWorkforceCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkforceCommandOutput>;
            createWorkforce(args: CreateWorkforceCommandInput, cb: (err: any, data?: CreateWorkforceCommandOutput) => void): void;
            createWorkforce(args: CreateWorkforceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkforceCommandOutput) => void): void;
            /**
                * <p>Creates a new work team for labeling your data. A work team is defined by one or more
                *             Amazon Cognito user pools. You must first create the user pools before you can create a work
                *             team.</p>
                *         <p>You cannot create more than 25 work teams in an account and region.</p>
                */
            createWorkteam(args: CreateWorkteamCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkteamCommandOutput>;
            createWorkteam(args: CreateWorkteamCommandInput, cb: (err: any, data?: CreateWorkteamCommandOutput) => void): void;
            createWorkteam(args: CreateWorkteamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkteamCommandOutput) => void): void;
            /**
                * <p>Deletes an action.</p>
                */
            deleteAction(args: DeleteActionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteActionCommandOutput>;
            deleteAction(args: DeleteActionCommandInput, cb: (err: any, data?: DeleteActionCommandOutput) => void): void;
            deleteAction(args: DeleteActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteActionCommandOutput) => void): void;
            /**
                * <p>Removes the specified algorithm from your account.</p>
                */
            deleteAlgorithm(args: DeleteAlgorithmCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAlgorithmCommandOutput>;
            deleteAlgorithm(args: DeleteAlgorithmCommandInput, cb: (err: any, data?: DeleteAlgorithmCommandOutput) => void): void;
            deleteAlgorithm(args: DeleteAlgorithmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAlgorithmCommandOutput) => void): void;
            /**
                * <p>Used to stop and delete an app.</p>
                */
            deleteApp(args: DeleteAppCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppCommandOutput>;
            deleteApp(args: DeleteAppCommandInput, cb: (err: any, data?: DeleteAppCommandOutput) => void): void;
            deleteApp(args: DeleteAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppCommandOutput) => void): void;
            /**
                * <p>Deletes an AppImageConfig.</p>
                */
            deleteAppImageConfig(args: DeleteAppImageConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppImageConfigCommandOutput>;
            deleteAppImageConfig(args: DeleteAppImageConfigCommandInput, cb: (err: any, data?: DeleteAppImageConfigCommandOutput) => void): void;
            deleteAppImageConfig(args: DeleteAppImageConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppImageConfigCommandOutput) => void): void;
            /**
                * <p>Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be
                *         specified.</p>
                */
            deleteArtifact(args: DeleteArtifactCommandInput, options?: __HttpHandlerOptions): Promise<DeleteArtifactCommandOutput>;
            deleteArtifact(args: DeleteArtifactCommandInput, cb: (err: any, data?: DeleteArtifactCommandOutput) => void): void;
            deleteArtifact(args: DeleteArtifactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteArtifactCommandOutput) => void): void;
            /**
                * <p>Deletes an association.</p>
                */
            deleteAssociation(args: DeleteAssociationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssociationCommandOutput>;
            deleteAssociation(args: DeleteAssociationCommandInput, cb: (err: any, data?: DeleteAssociationCommandOutput) => void): void;
            deleteAssociation(args: DeleteAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssociationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified Git repository from your account.</p>
                */
            deleteCodeRepository(args: DeleteCodeRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCodeRepositoryCommandOutput>;
            deleteCodeRepository(args: DeleteCodeRepositoryCommandInput, cb: (err: any, data?: DeleteCodeRepositoryCommandOutput) => void): void;
            deleteCodeRepository(args: DeleteCodeRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCodeRepositoryCommandOutput) => void): void;
            /**
                * <p>Deletes an context.</p>
                */
            deleteContext(args: DeleteContextCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContextCommandOutput>;
            deleteContext(args: DeleteContextCommandInput, cb: (err: any, data?: DeleteContextCommandOutput) => void): void;
            deleteContext(args: DeleteContextCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContextCommandOutput) => void): void;
            /**
                * <p>Deletes a data quality monitoring job definition.</p>
                */
            deleteDataQualityJobDefinition(args: DeleteDataQualityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataQualityJobDefinitionCommandOutput>;
            deleteDataQualityJobDefinition(args: DeleteDataQualityJobDefinitionCommandInput, cb: (err: any, data?: DeleteDataQualityJobDefinitionCommandOutput) => void): void;
            deleteDataQualityJobDefinition(args: DeleteDataQualityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataQualityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Deletes a fleet.</p>
                */
            deleteDeviceFleet(args: DeleteDeviceFleetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeviceFleetCommandOutput>;
            deleteDeviceFleet(args: DeleteDeviceFleetCommandInput, cb: (err: any, data?: DeleteDeviceFleetCommandOutput) => void): void;
            deleteDeviceFleet(args: DeleteDeviceFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeviceFleetCommandOutput) => void): void;
            /**
                * <p>Used to delete a domain.
                *      If you onboarded with IAM mode, you will need to delete your domain to onboard again using SSO.
                *      Use with caution. All of the members of the domain will lose access to their EFS volume,
                *      including data, notebooks, and other artifacts.
                *    </p>
                */
            deleteDomain(args: DeleteDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainCommandOutput>;
            deleteDomain(args: DeleteDomainCommandInput, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            deleteDomain(args: DeleteDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            /**
                * <p>Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.</p>
                */
            deleteEdgeDeploymentPlan(args: DeleteEdgeDeploymentPlanCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEdgeDeploymentPlanCommandOutput>;
            deleteEdgeDeploymentPlan(args: DeleteEdgeDeploymentPlanCommandInput, cb: (err: any, data?: DeleteEdgeDeploymentPlanCommandOutput) => void): void;
            deleteEdgeDeploymentPlan(args: DeleteEdgeDeploymentPlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEdgeDeploymentPlanCommandOutput) => void): void;
            /**
                * <p>Delete a stage in an edge deployment plan if (and only if) the stage is inactive.</p>
                */
            deleteEdgeDeploymentStage(args: DeleteEdgeDeploymentStageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEdgeDeploymentStageCommandOutput>;
            deleteEdgeDeploymentStage(args: DeleteEdgeDeploymentStageCommandInput, cb: (err: any, data?: DeleteEdgeDeploymentStageCommandOutput) => void): void;
            deleteEdgeDeploymentStage(args: DeleteEdgeDeploymentStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEdgeDeploymentStageCommandOutput) => void): void;
            /**
                * <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the
                *             endpoint was created. </p>
                *         <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't
                *             need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p>
                *         <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants.
                *             You might still see these resources in your account for a few minutes after deleting your endpoint.
                *             Do not delete or revoke the permissions for your
                *             <code>
                *                <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a>
                *             </code>,
                *             otherwise SageMaker cannot delete these resources.</p>
                */
            deleteEndpoint(args: DeleteEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEndpointCommandOutput>;
            deleteEndpoint(args: DeleteEndpointCommandInput, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            deleteEndpoint(args: DeleteEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            /**
                * <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API
                *             deletes only the specified configuration. It does not delete endpoints created using the
                *             configuration. </p>
                *         <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
                *             live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations
                *             are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an
                *             endpoint that is active or being created or updated you may lose visibility into the
                *             instance type the endpoint is using. The endpoint must be deleted in order to stop
                *             incurring charges.</p>
                */
            deleteEndpointConfig(args: DeleteEndpointConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEndpointConfigCommandOutput>;
            deleteEndpointConfig(args: DeleteEndpointConfigCommandInput, cb: (err: any, data?: DeleteEndpointConfigCommandOutput) => void): void;
            deleteEndpointConfig(args: DeleteEndpointConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEndpointConfigCommandOutput) => void): void;
            /**
                * <p>Deletes an SageMaker experiment. All trials associated with the experiment must be deleted
                *       first. Use the <a>ListTrials</a> API to get a list of the trials associated with
                *       the experiment.</p>
                */
            deleteExperiment(args: DeleteExperimentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExperimentCommandOutput>;
            deleteExperiment(args: DeleteExperimentCommandInput, cb: (err: any, data?: DeleteExperimentCommandOutput) => void): void;
            deleteExperiment(args: DeleteExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExperimentCommandOutput) => void): void;
            /**
                * <p>Delete the <code>FeatureGroup</code> and any data that was written to the
                *             <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from
                *          the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p>
                *          <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue
                *          database and tables that are automatically created for your <code>OfflineStore</code> are
                *          not deleted. </p>
                */
            deleteFeatureGroup(args: DeleteFeatureGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFeatureGroupCommandOutput>;
            deleteFeatureGroup(args: DeleteFeatureGroupCommandInput, cb: (err: any, data?: DeleteFeatureGroupCommandOutput) => void): void;
            deleteFeatureGroup(args: DeleteFeatureGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFeatureGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified flow definition.</p>
                */
            deleteFlowDefinition(args: DeleteFlowDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFlowDefinitionCommandOutput>;
            deleteFlowDefinition(args: DeleteFlowDefinitionCommandInput, cb: (err: any, data?: DeleteFlowDefinitionCommandOutput) => void): void;
            deleteFlowDefinition(args: DeleteFlowDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFlowDefinitionCommandOutput) => void): void;
            /**
                * <p>Use this operation to delete a human task user interface (worker task template).</p>
                *          <p>
                *       To see a list of human task user interfaces
                *       (work task templates) in your account, use .
                *       When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
                */
            deleteHumanTaskUi(args: DeleteHumanTaskUiCommandInput, options?: __HttpHandlerOptions): Promise<DeleteHumanTaskUiCommandOutput>;
            deleteHumanTaskUi(args: DeleteHumanTaskUiCommandInput, cb: (err: any, data?: DeleteHumanTaskUiCommandOutput) => void): void;
            deleteHumanTaskUi(args: DeleteHumanTaskUiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteHumanTaskUiCommandOutput) => void): void;
            /**
                * <p>Deletes a SageMaker image and all versions of the image. The container images aren't
                *         deleted.</p>
                */
            deleteImage(args: DeleteImageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteImageCommandOutput>;
            deleteImage(args: DeleteImageCommandInput, cb: (err: any, data?: DeleteImageCommandOutput) => void): void;
            deleteImage(args: DeleteImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteImageCommandOutput) => void): void;
            /**
                * <p>Deletes a version of a SageMaker image. The container image the version represents isn't
                *         deleted.</p>
                */
            deleteImageVersion(args: DeleteImageVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteImageVersionCommandOutput>;
            deleteImageVersion(args: DeleteImageVersionCommandInput, cb: (err: any, data?: DeleteImageVersionCommandOutput) => void): void;
            deleteImageVersion(args: DeleteImageVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteImageVersionCommandOutput) => void): void;
            /**
                * <p>Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that
                *             was created in SageMaker when you called the <code>CreateModel</code> API. It does not
                *             delete model artifacts, inference code, or the IAM role that you specified when
                *             creating the model. </p>
                */
            deleteModel(args: DeleteModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelCommandOutput>;
            deleteModel(args: DeleteModelCommandInput, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            deleteModel(args: DeleteModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon SageMaker model bias job definition.</p>
                */
            deleteModelBiasJobDefinition(args: DeleteModelBiasJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelBiasJobDefinitionCommandOutput>;
            deleteModelBiasJobDefinition(args: DeleteModelBiasJobDefinitionCommandInput, cb: (err: any, data?: DeleteModelBiasJobDefinitionCommandOutput) => void): void;
            deleteModelBiasJobDefinition(args: DeleteModelBiasJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelBiasJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon SageMaker model explainability job definition.</p>
                */
            deleteModelExplainabilityJobDefinition(args: DeleteModelExplainabilityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelExplainabilityJobDefinitionCommandOutput>;
            deleteModelExplainabilityJobDefinition(args: DeleteModelExplainabilityJobDefinitionCommandInput, cb: (err: any, data?: DeleteModelExplainabilityJobDefinitionCommandOutput) => void): void;
            deleteModelExplainabilityJobDefinition(args: DeleteModelExplainabilityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelExplainabilityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Deletes a model package.</p>
                *         <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can
                *             subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
                */
            deleteModelPackage(args: DeleteModelPackageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelPackageCommandOutput>;
            deleteModelPackage(args: DeleteModelPackageCommandInput, cb: (err: any, data?: DeleteModelPackageCommandOutput) => void): void;
            deleteModelPackage(args: DeleteModelPackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelPackageCommandOutput) => void): void;
            /**
                * <p>Deletes the specified model group.</p>
                */
            deleteModelPackageGroup(args: DeleteModelPackageGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelPackageGroupCommandOutput>;
            deleteModelPackageGroup(args: DeleteModelPackageGroupCommandInput, cb: (err: any, data?: DeleteModelPackageGroupCommandOutput) => void): void;
            deleteModelPackageGroup(args: DeleteModelPackageGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelPackageGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a model group resource policy.</p>
                */
            deleteModelPackageGroupPolicy(args: DeleteModelPackageGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelPackageGroupPolicyCommandOutput>;
            deleteModelPackageGroupPolicy(args: DeleteModelPackageGroupPolicyCommandInput, cb: (err: any, data?: DeleteModelPackageGroupPolicyCommandOutput) => void): void;
            deleteModelPackageGroupPolicy(args: DeleteModelPackageGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelPackageGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the secified model quality monitoring job definition.</p>
                */
            deleteModelQualityJobDefinition(args: DeleteModelQualityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelQualityJobDefinitionCommandOutput>;
            deleteModelQualityJobDefinition(args: DeleteModelQualityJobDefinitionCommandInput, cb: (err: any, data?: DeleteModelQualityJobDefinitionCommandOutput) => void): void;
            deleteModelQualityJobDefinition(args: DeleteModelQualityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelQualityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Deletes a monitoring schedule. Also stops the schedule had not already been stopped.
                *          This does not delete the job execution history of the monitoring schedule. </p>
                */
            deleteMonitoringSchedule(args: DeleteMonitoringScheduleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMonitoringScheduleCommandOutput>;
            deleteMonitoringSchedule(args: DeleteMonitoringScheduleCommandInput, cb: (err: any, data?: DeleteMonitoringScheduleCommandOutput) => void): void;
            deleteMonitoringSchedule(args: DeleteMonitoringScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMonitoringScheduleCommandOutput) => void): void;
            /**
                * <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you
                *             must call the <code>StopNotebookInstance</code> API. </p>
                *         <important>
                *             <p>When you delete a notebook instance, you lose all of your data. SageMaker removes
                *                 the ML compute instance, and deletes the ML storage volume and the network interface
                *                 associated with the notebook instance. </p>
                *         </important>
                */
            deleteNotebookInstance(args: DeleteNotebookInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNotebookInstanceCommandOutput>;
            deleteNotebookInstance(args: DeleteNotebookInstanceCommandInput, cb: (err: any, data?: DeleteNotebookInstanceCommandOutput) => void): void;
            deleteNotebookInstance(args: DeleteNotebookInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNotebookInstanceCommandOutput) => void): void;
            /**
                * <p>Deletes a notebook instance lifecycle configuration.</p>
                */
            deleteNotebookInstanceLifecycleConfig(args: DeleteNotebookInstanceLifecycleConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNotebookInstanceLifecycleConfigCommandOutput>;
            deleteNotebookInstanceLifecycleConfig(args: DeleteNotebookInstanceLifecycleConfigCommandInput, cb: (err: any, data?: DeleteNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            deleteNotebookInstanceLifecycleConfig(args: DeleteNotebookInstanceLifecycleConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            /**
                * <p>Deletes a pipeline if there are no running instances of the pipeline. To delete a
                *         pipeline, you must stop all running instances of the pipeline using the
                *         <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the
                *         pipeline are deleted.</p>
                */
            deletePipeline(args: DeletePipelineCommandInput, options?: __HttpHandlerOptions): Promise<DeletePipelineCommandOutput>;
            deletePipeline(args: DeletePipelineCommandInput, cb: (err: any, data?: DeletePipelineCommandOutput) => void): void;
            deletePipeline(args: DeletePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePipelineCommandOutput) => void): void;
            /**
                * <p>Delete the specified project.</p>
                */
            deleteProject(args: DeleteProjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProjectCommandOutput>;
            deleteProject(args: DeleteProjectCommandInput, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            deleteProject(args: DeleteProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            /**
                * <p>Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.</p>
                */
            deleteStudioLifecycleConfig(args: DeleteStudioLifecycleConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStudioLifecycleConfigCommandOutput>;
            deleteStudioLifecycleConfig(args: DeleteStudioLifecycleConfigCommandInput, cb: (err: any, data?: DeleteStudioLifecycleConfigCommandOutput) => void): void;
            deleteStudioLifecycleConfig(args: DeleteStudioLifecycleConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStudioLifecycleConfigCommandOutput) => void): void;
            /**
                * <p>Deletes the specified tags from an SageMaker resource.</p>
                *         <p>To list a resource's tags, use the <code>ListTags</code> API. </p>
                *         <note>
                *             <p>When you call this API to delete tags from a hyperparameter tuning job, the
                *                 deleted tags are not removed from training jobs that the hyperparameter tuning job
                *                 launched before you called this API.</p>
                *         </note>
                *         <note>
                *             <p>When you call this API to delete tags from a SageMaker Studio Domain or User
                *                 Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain
                *                 or User Profile launched before you called this API.</p>
                *         </note>
                */
            deleteTags(args: DeleteTagsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTagsCommandOutput>;
            deleteTags(args: DeleteTagsCommandInput, cb: (err: any, data?: DeleteTagsCommandOutput) => void): void;
            deleteTags(args: DeleteTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTagsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified trial. All trial components that make up the trial must be deleted
                *       first. Use the <a>DescribeTrialComponent</a> API to get the list of trial
                *       components.</p>
                */
            deleteTrial(args: DeleteTrialCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTrialCommandOutput>;
            deleteTrial(args: DeleteTrialCommandInput, cb: (err: any, data?: DeleteTrialCommandOutput) => void): void;
            deleteTrial(args: DeleteTrialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTrialCommandOutput) => void): void;
            /**
                * <p>Deletes the specified trial component. A trial component must be disassociated from all
                *       trials before the trial component can be deleted. To disassociate a trial component from a
                *       trial, call the <a>DisassociateTrialComponent</a> API.</p>
                */
            deleteTrialComponent(args: DeleteTrialComponentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTrialComponentCommandOutput>;
            deleteTrialComponent(args: DeleteTrialComponentCommandInput, cb: (err: any, data?: DeleteTrialComponentCommandOutput) => void): void;
            deleteTrialComponent(args: DeleteTrialComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTrialComponentCommandOutput) => void): void;
            /**
                * <p>Deletes a user profile. When a user profile is deleted, the user loses access to their EFS
                *      volume, including data, notebooks, and other artifacts.</p>
                */
            deleteUserProfile(args: DeleteUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserProfileCommandOutput>;
            deleteUserProfile(args: DeleteUserProfileCommandInput, cb: (err: any, data?: DeleteUserProfileCommandOutput) => void): void;
            deleteUserProfile(args: DeleteUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserProfileCommandOutput) => void): void;
            /**
                * <p>Use this operation to delete a workforce.</p>
                *
                *          <p>If you want to create a new workforce in an Amazon Web Services Region where
                *       a workforce already exists, use this operation to delete the
                *       existing workforce and then use
                *       to create a new workforce.</p>
                *          <important>
                *             <p>If a private workforce contains one or more work teams, you must use
                *             the
                *             operation to delete all work teams before you delete the workforce.
                *             If you try to delete a workforce that contains one or more work teams,
                *             you will recieve a <code>ResourceInUse</code> error.</p>
                *         </important>
                */
            deleteWorkforce(args: DeleteWorkforceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkforceCommandOutput>;
            deleteWorkforce(args: DeleteWorkforceCommandInput, cb: (err: any, data?: DeleteWorkforceCommandOutput) => void): void;
            deleteWorkforce(args: DeleteWorkforceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkforceCommandOutput) => void): void;
            /**
                * <p>Deletes an existing work team. This operation can't be undone.</p>
                */
            deleteWorkteam(args: DeleteWorkteamCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkteamCommandOutput>;
            deleteWorkteam(args: DeleteWorkteamCommandInput, cb: (err: any, data?: DeleteWorkteamCommandOutput) => void): void;
            deleteWorkteam(args: DeleteWorkteamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkteamCommandOutput) => void): void;
            /**
                * <p>Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.</p>
                */
            deregisterDevices(args: DeregisterDevicesCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterDevicesCommandOutput>;
            deregisterDevices(args: DeregisterDevicesCommandInput, cb: (err: any, data?: DeregisterDevicesCommandOutput) => void): void;
            deregisterDevices(args: DeregisterDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterDevicesCommandOutput) => void): void;
            /**
                * <p>Describes an action.</p>
                */
            describeAction(args: DescribeActionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeActionCommandOutput>;
            describeAction(args: DescribeActionCommandInput, cb: (err: any, data?: DescribeActionCommandOutput) => void): void;
            describeAction(args: DescribeActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeActionCommandOutput) => void): void;
            /**
                * <p>Returns a description of the specified algorithm that is in your account.</p>
                */
            describeAlgorithm(args: DescribeAlgorithmCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAlgorithmCommandOutput>;
            describeAlgorithm(args: DescribeAlgorithmCommandInput, cb: (err: any, data?: DescribeAlgorithmCommandOutput) => void): void;
            describeAlgorithm(args: DescribeAlgorithmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAlgorithmCommandOutput) => void): void;
            /**
                * <p>Describes the app.</p>
                */
            describeApp(args: DescribeAppCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAppCommandOutput>;
            describeApp(args: DescribeAppCommandInput, cb: (err: any, data?: DescribeAppCommandOutput) => void): void;
            describeApp(args: DescribeAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAppCommandOutput) => void): void;
            /**
                * <p>Describes an AppImageConfig.</p>
                */
            describeAppImageConfig(args: DescribeAppImageConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAppImageConfigCommandOutput>;
            describeAppImageConfig(args: DescribeAppImageConfigCommandInput, cb: (err: any, data?: DescribeAppImageConfigCommandOutput) => void): void;
            describeAppImageConfig(args: DescribeAppImageConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAppImageConfigCommandOutput) => void): void;
            /**
                * <p>Describes an artifact.</p>
                */
            describeArtifact(args: DescribeArtifactCommandInput, options?: __HttpHandlerOptions): Promise<DescribeArtifactCommandOutput>;
            describeArtifact(args: DescribeArtifactCommandInput, cb: (err: any, data?: DescribeArtifactCommandOutput) => void): void;
            describeArtifact(args: DescribeArtifactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeArtifactCommandOutput) => void): void;
            /**
                * <p>Returns information about an Amazon SageMaker AutoML job.</p>
                */
            describeAutoMLJob(args: DescribeAutoMLJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAutoMLJobCommandOutput>;
            describeAutoMLJob(args: DescribeAutoMLJobCommandInput, cb: (err: any, data?: DescribeAutoMLJobCommandOutput) => void): void;
            describeAutoMLJob(args: DescribeAutoMLJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAutoMLJobCommandOutput) => void): void;
            /**
                * <p>Gets details about the specified Git repository.</p>
                */
            describeCodeRepository(args: DescribeCodeRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCodeRepositoryCommandOutput>;
            describeCodeRepository(args: DescribeCodeRepositoryCommandInput, cb: (err: any, data?: DescribeCodeRepositoryCommandOutput) => void): void;
            describeCodeRepository(args: DescribeCodeRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCodeRepositoryCommandOutput) => void): void;
            /**
                * <p>Returns information about a model compilation job.</p>
                *         <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
                *             information about multiple model compilation jobs, use <a>ListCompilationJobs</a>.</p>
                */
            describeCompilationJob(args: DescribeCompilationJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCompilationJobCommandOutput>;
            describeCompilationJob(args: DescribeCompilationJobCommandInput, cb: (err: any, data?: DescribeCompilationJobCommandOutput) => void): void;
            describeCompilationJob(args: DescribeCompilationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCompilationJobCommandOutput) => void): void;
            /**
                * <p>Describes a context.</p>
                */
            describeContext(args: DescribeContextCommandInput, options?: __HttpHandlerOptions): Promise<DescribeContextCommandOutput>;
            describeContext(args: DescribeContextCommandInput, cb: (err: any, data?: DescribeContextCommandOutput) => void): void;
            describeContext(args: DescribeContextCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeContextCommandOutput) => void): void;
            /**
                * <p>Gets the details of a data quality monitoring job definition.</p>
                */
            describeDataQualityJobDefinition(args: DescribeDataQualityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDataQualityJobDefinitionCommandOutput>;
            describeDataQualityJobDefinition(args: DescribeDataQualityJobDefinitionCommandInput, cb: (err: any, data?: DescribeDataQualityJobDefinitionCommandOutput) => void): void;
            describeDataQualityJobDefinition(args: DescribeDataQualityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDataQualityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Describes the device.</p>
                */
            describeDevice(args: DescribeDeviceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDeviceCommandOutput>;
            describeDevice(args: DescribeDeviceCommandInput, cb: (err: any, data?: DescribeDeviceCommandOutput) => void): void;
            describeDevice(args: DescribeDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDeviceCommandOutput) => void): void;
            /**
                * <p>A description of the fleet the device belongs to.</p>
                */
            describeDeviceFleet(args: DescribeDeviceFleetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDeviceFleetCommandOutput>;
            describeDeviceFleet(args: DescribeDeviceFleetCommandInput, cb: (err: any, data?: DescribeDeviceFleetCommandOutput) => void): void;
            describeDeviceFleet(args: DescribeDeviceFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDeviceFleetCommandOutput) => void): void;
            /**
                * <p>The description of the domain.</p>
                */
            describeDomain(args: DescribeDomainCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainCommandOutput>;
            describeDomain(args: DescribeDomainCommandInput, cb: (err: any, data?: DescribeDomainCommandOutput) => void): void;
            describeDomain(args: DescribeDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainCommandOutput) => void): void;
            /**
                * <p>Describes an edge deployment plan with deployment status per stage.</p>
                */
            describeEdgeDeploymentPlan(args: DescribeEdgeDeploymentPlanCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEdgeDeploymentPlanCommandOutput>;
            describeEdgeDeploymentPlan(args: DescribeEdgeDeploymentPlanCommandInput, cb: (err: any, data?: DescribeEdgeDeploymentPlanCommandOutput) => void): void;
            describeEdgeDeploymentPlan(args: DescribeEdgeDeploymentPlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEdgeDeploymentPlanCommandOutput) => void): void;
            /**
                * <p>A description of edge packaging jobs.</p>
                */
            describeEdgePackagingJob(args: DescribeEdgePackagingJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEdgePackagingJobCommandOutput>;
            describeEdgePackagingJob(args: DescribeEdgePackagingJobCommandInput, cb: (err: any, data?: DescribeEdgePackagingJobCommandOutput) => void): void;
            describeEdgePackagingJob(args: DescribeEdgePackagingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEdgePackagingJobCommandOutput) => void): void;
            /**
                * <p>Returns the description of an endpoint.</p>
                */
            describeEndpoint(args: DescribeEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEndpointCommandOutput>;
            describeEndpoint(args: DescribeEndpointCommandInput, cb: (err: any, data?: DescribeEndpointCommandOutput) => void): void;
            describeEndpoint(args: DescribeEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEndpointCommandOutput) => void): void;
            /**
                * <p>Returns the description of an endpoint configuration created using the
                *                 <code>CreateEndpointConfig</code> API.</p>
                */
            describeEndpointConfig(args: DescribeEndpointConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEndpointConfigCommandOutput>;
            describeEndpointConfig(args: DescribeEndpointConfigCommandInput, cb: (err: any, data?: DescribeEndpointConfigCommandOutput) => void): void;
            describeEndpointConfig(args: DescribeEndpointConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEndpointConfigCommandOutput) => void): void;
            /**
                * <p>Provides a list of an experiment's properties.</p>
                */
            describeExperiment(args: DescribeExperimentCommandInput, options?: __HttpHandlerOptions): Promise<DescribeExperimentCommandOutput>;
            describeExperiment(args: DescribeExperimentCommandInput, cb: (err: any, data?: DescribeExperimentCommandOutput) => void): void;
            describeExperiment(args: DescribeExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeExperimentCommandOutput) => void): void;
            /**
                * <p>Use this operation to describe a <code>FeatureGroup</code>. The response includes
                *          information on the creation time, <code>FeatureGroup</code> name, the unique identifier for
                *          each <code>FeatureGroup</code>, and more.</p>
                */
            describeFeatureGroup(args: DescribeFeatureGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFeatureGroupCommandOutput>;
            describeFeatureGroup(args: DescribeFeatureGroupCommandInput, cb: (err: any, data?: DescribeFeatureGroupCommandOutput) => void): void;
            describeFeatureGroup(args: DescribeFeatureGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFeatureGroupCommandOutput) => void): void;
            /**
                * <p>Shows the metadata for a feature within a feature group.</p>
                */
            describeFeatureMetadata(args: DescribeFeatureMetadataCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFeatureMetadataCommandOutput>;
            describeFeatureMetadata(args: DescribeFeatureMetadataCommandInput, cb: (err: any, data?: DescribeFeatureMetadataCommandOutput) => void): void;
            describeFeatureMetadata(args: DescribeFeatureMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFeatureMetadataCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified flow definition.</p>
                */
            describeFlowDefinition(args: DescribeFlowDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFlowDefinitionCommandOutput>;
            describeFlowDefinition(args: DescribeFlowDefinitionCommandInput, cb: (err: any, data?: DescribeFlowDefinitionCommandOutput) => void): void;
            describeFlowDefinition(args: DescribeFlowDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFlowDefinitionCommandOutput) => void): void;
            /**
                * <p>Returns information about the requested human task user interface (worker task template).</p>
                */
            describeHumanTaskUi(args: DescribeHumanTaskUiCommandInput, options?: __HttpHandlerOptions): Promise<DescribeHumanTaskUiCommandOutput>;
            describeHumanTaskUi(args: DescribeHumanTaskUiCommandInput, cb: (err: any, data?: DescribeHumanTaskUiCommandOutput) => void): void;
            describeHumanTaskUi(args: DescribeHumanTaskUiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeHumanTaskUiCommandOutput) => void): void;
            /**
                * <p>Gets
                *             a description of a hyperparameter tuning job.</p>
                */
            describeHyperParameterTuningJob(args: DescribeHyperParameterTuningJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeHyperParameterTuningJobCommandOutput>;
            describeHyperParameterTuningJob(args: DescribeHyperParameterTuningJobCommandInput, cb: (err: any, data?: DescribeHyperParameterTuningJobCommandOutput) => void): void;
            describeHyperParameterTuningJob(args: DescribeHyperParameterTuningJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeHyperParameterTuningJobCommandOutput) => void): void;
            /**
                * <p>Describes a SageMaker image.</p>
                */
            describeImage(args: DescribeImageCommandInput, options?: __HttpHandlerOptions): Promise<DescribeImageCommandOutput>;
            describeImage(args: DescribeImageCommandInput, cb: (err: any, data?: DescribeImageCommandOutput) => void): void;
            describeImage(args: DescribeImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeImageCommandOutput) => void): void;
            /**
                * <p>Describes a version of a SageMaker image.</p>
                */
            describeImageVersion(args: DescribeImageVersionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeImageVersionCommandOutput>;
            describeImageVersion(args: DescribeImageVersionCommandInput, cb: (err: any, data?: DescribeImageVersionCommandOutput) => void): void;
            describeImageVersion(args: DescribeImageVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeImageVersionCommandOutput) => void): void;
            /**
                * <p>Provides the results of the Inference Recommender job.
                *           One or more recommendation jobs are returned.</p>
                */
            describeInferenceRecommendationsJob(args: DescribeInferenceRecommendationsJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInferenceRecommendationsJobCommandOutput>;
            describeInferenceRecommendationsJob(args: DescribeInferenceRecommendationsJobCommandInput, cb: (err: any, data?: DescribeInferenceRecommendationsJobCommandOutput) => void): void;
            describeInferenceRecommendationsJob(args: DescribeInferenceRecommendationsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInferenceRecommendationsJobCommandOutput) => void): void;
            /**
                * <p>Gets information about a labeling job.</p>
                */
            describeLabelingJob(args: DescribeLabelingJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLabelingJobCommandOutput>;
            describeLabelingJob(args: DescribeLabelingJobCommandInput, cb: (err: any, data?: DescribeLabelingJobCommandOutput) => void): void;
            describeLabelingJob(args: DescribeLabelingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLabelingJobCommandOutput) => void): void;
            /**
                * <p>Provides a list of properties for the requested lineage group.
                *          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
                *             Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
                */
            describeLineageGroup(args: DescribeLineageGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLineageGroupCommandOutput>;
            describeLineageGroup(args: DescribeLineageGroupCommandInput, cb: (err: any, data?: DescribeLineageGroupCommandOutput) => void): void;
            describeLineageGroup(args: DescribeLineageGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLineageGroupCommandOutput) => void): void;
            /**
                * <p>Describes a model that you created using the <code>CreateModel</code>
                *             API.</p>
                */
            describeModel(args: DescribeModelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelCommandOutput>;
            describeModel(args: DescribeModelCommandInput, cb: (err: any, data?: DescribeModelCommandOutput) => void): void;
            describeModel(args: DescribeModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelCommandOutput) => void): void;
            /**
                * <p>Returns a description of a model bias job definition.</p>
                */
            describeModelBiasJobDefinition(args: DescribeModelBiasJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelBiasJobDefinitionCommandOutput>;
            describeModelBiasJobDefinition(args: DescribeModelBiasJobDefinitionCommandInput, cb: (err: any, data?: DescribeModelBiasJobDefinitionCommandOutput) => void): void;
            describeModelBiasJobDefinition(args: DescribeModelBiasJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelBiasJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Returns a description of a model explainability job definition.</p>
                */
            describeModelExplainabilityJobDefinition(args: DescribeModelExplainabilityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelExplainabilityJobDefinitionCommandOutput>;
            describeModelExplainabilityJobDefinition(args: DescribeModelExplainabilityJobDefinitionCommandInput, cb: (err: any, data?: DescribeModelExplainabilityJobDefinitionCommandOutput) => void): void;
            describeModelExplainabilityJobDefinition(args: DescribeModelExplainabilityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelExplainabilityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Returns a description of the specified model package, which is used to create SageMaker
                *             models or list them on Amazon Web Services Marketplace.</p>
                *         <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services
                *             Marketplace.</p>
                */
            describeModelPackage(args: DescribeModelPackageCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelPackageCommandOutput>;
            describeModelPackage(args: DescribeModelPackageCommandInput, cb: (err: any, data?: DescribeModelPackageCommandOutput) => void): void;
            describeModelPackage(args: DescribeModelPackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelPackageCommandOutput) => void): void;
            /**
                * <p>Gets a description for the specified model group.</p>
                */
            describeModelPackageGroup(args: DescribeModelPackageGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelPackageGroupCommandOutput>;
            describeModelPackageGroup(args: DescribeModelPackageGroupCommandInput, cb: (err: any, data?: DescribeModelPackageGroupCommandOutput) => void): void;
            describeModelPackageGroup(args: DescribeModelPackageGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelPackageGroupCommandOutput) => void): void;
            /**
                * <p>Returns a description of a model quality job definition.</p>
                */
            describeModelQualityJobDefinition(args: DescribeModelQualityJobDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelQualityJobDefinitionCommandOutput>;
            describeModelQualityJobDefinition(args: DescribeModelQualityJobDefinitionCommandInput, cb: (err: any, data?: DescribeModelQualityJobDefinitionCommandOutput) => void): void;
            describeModelQualityJobDefinition(args: DescribeModelQualityJobDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelQualityJobDefinitionCommandOutput) => void): void;
            /**
                * <p>Describes the schedule for a monitoring job.</p>
                */
            describeMonitoringSchedule(args: DescribeMonitoringScheduleCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMonitoringScheduleCommandOutput>;
            describeMonitoringSchedule(args: DescribeMonitoringScheduleCommandInput, cb: (err: any, data?: DescribeMonitoringScheduleCommandOutput) => void): void;
            describeMonitoringSchedule(args: DescribeMonitoringScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMonitoringScheduleCommandOutput) => void): void;
            /**
                * <p>Returns information about a notebook instance.</p>
                */
            describeNotebookInstance(args: DescribeNotebookInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNotebookInstanceCommandOutput>;
            describeNotebookInstance(args: DescribeNotebookInstanceCommandInput, cb: (err: any, data?: DescribeNotebookInstanceCommandOutput) => void): void;
            describeNotebookInstance(args: DescribeNotebookInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNotebookInstanceCommandOutput) => void): void;
            /**
                * <p>Returns a description of a notebook instance lifecycle configuration.</p>
                *         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
                *                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
                */
            describeNotebookInstanceLifecycleConfig(args: DescribeNotebookInstanceLifecycleConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNotebookInstanceLifecycleConfigCommandOutput>;
            describeNotebookInstanceLifecycleConfig(args: DescribeNotebookInstanceLifecycleConfigCommandInput, cb: (err: any, data?: DescribeNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            describeNotebookInstanceLifecycleConfig(args: DescribeNotebookInstanceLifecycleConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            /**
                * <p>Describes the details of a pipeline.</p>
                */
            describePipeline(args: DescribePipelineCommandInput, options?: __HttpHandlerOptions): Promise<DescribePipelineCommandOutput>;
            describePipeline(args: DescribePipelineCommandInput, cb: (err: any, data?: DescribePipelineCommandOutput) => void): void;
            describePipeline(args: DescribePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePipelineCommandOutput) => void): void;
            /**
                * <p>Describes the details of an execution's pipeline definition.</p>
                */
            describePipelineDefinitionForExecution(args: DescribePipelineDefinitionForExecutionCommandInput, options?: __HttpHandlerOptions): Promise<DescribePipelineDefinitionForExecutionCommandOutput>;
            describePipelineDefinitionForExecution(args: DescribePipelineDefinitionForExecutionCommandInput, cb: (err: any, data?: DescribePipelineDefinitionForExecutionCommandOutput) => void): void;
            describePipelineDefinitionForExecution(args: DescribePipelineDefinitionForExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePipelineDefinitionForExecutionCommandOutput) => void): void;
            /**
                * <p>Describes the details of a pipeline execution.</p>
                */
            describePipelineExecution(args: DescribePipelineExecutionCommandInput, options?: __HttpHandlerOptions): Promise<DescribePipelineExecutionCommandOutput>;
            describePipelineExecution(args: DescribePipelineExecutionCommandInput, cb: (err: any, data?: DescribePipelineExecutionCommandOutput) => void): void;
            describePipelineExecution(args: DescribePipelineExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePipelineExecutionCommandOutput) => void): void;
            /**
                * <p>Returns a description of a processing job.</p>
                */
            describeProcessingJob(args: DescribeProcessingJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProcessingJobCommandOutput>;
            describeProcessingJob(args: DescribeProcessingJobCommandInput, cb: (err: any, data?: DescribeProcessingJobCommandOutput) => void): void;
            describeProcessingJob(args: DescribeProcessingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProcessingJobCommandOutput) => void): void;
            /**
                * <p>Describes the details of a project.</p>
                */
            describeProject(args: DescribeProjectCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProjectCommandOutput>;
            describeProject(args: DescribeProjectCommandInput, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            describeProject(args: DescribeProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            /**
                * <p>Describes the Studio Lifecycle Configuration.</p>
                */
            describeStudioLifecycleConfig(args: DescribeStudioLifecycleConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStudioLifecycleConfigCommandOutput>;
            describeStudioLifecycleConfig(args: DescribeStudioLifecycleConfigCommandInput, cb: (err: any, data?: DescribeStudioLifecycleConfigCommandOutput) => void): void;
            describeStudioLifecycleConfig(args: DescribeStudioLifecycleConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStudioLifecycleConfigCommandOutput) => void): void;
            /**
                * <p>Gets information about a work team provided by a vendor. It returns details about the
                *             subscription with a vendor in the Amazon Web Services Marketplace.</p>
                */
            describeSubscribedWorkteam(args: DescribeSubscribedWorkteamCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSubscribedWorkteamCommandOutput>;
            describeSubscribedWorkteam(args: DescribeSubscribedWorkteamCommandInput, cb: (err: any, data?: DescribeSubscribedWorkteamCommandOutput) => void): void;
            describeSubscribedWorkteam(args: DescribeSubscribedWorkteamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSubscribedWorkteamCommandOutput) => void): void;
            /**
                * <p>Returns information about a training job. </p>
                *         <p>Some of the attributes below only appear if the training job successfully starts.
                *             If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and,
                *             depending on the <code>FailureReason</code>, attributes like
                *                 <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>,
                *                 <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be
                *             present in the response.</p>
                */
            describeTrainingJob(args: DescribeTrainingJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTrainingJobCommandOutput>;
            describeTrainingJob(args: DescribeTrainingJobCommandInput, cb: (err: any, data?: DescribeTrainingJobCommandOutput) => void): void;
            describeTrainingJob(args: DescribeTrainingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTrainingJobCommandOutput) => void): void;
            /**
                * <p>Returns information about a transform job.</p>
                */
            describeTransformJob(args: DescribeTransformJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTransformJobCommandOutput>;
            describeTransformJob(args: DescribeTransformJobCommandInput, cb: (err: any, data?: DescribeTransformJobCommandOutput) => void): void;
            describeTransformJob(args: DescribeTransformJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTransformJobCommandOutput) => void): void;
            /**
                * <p>Provides a list of a trial's properties.</p>
                */
            describeTrial(args: DescribeTrialCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTrialCommandOutput>;
            describeTrial(args: DescribeTrialCommandInput, cb: (err: any, data?: DescribeTrialCommandOutput) => void): void;
            describeTrial(args: DescribeTrialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTrialCommandOutput) => void): void;
            /**
                * <p>Provides a list of a trials component's properties.</p>
                */
            describeTrialComponent(args: DescribeTrialComponentCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTrialComponentCommandOutput>;
            describeTrialComponent(args: DescribeTrialComponentCommandInput, cb: (err: any, data?: DescribeTrialComponentCommandOutput) => void): void;
            describeTrialComponent(args: DescribeTrialComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTrialComponentCommandOutput) => void): void;
            /**
                * <p>Describes a user profile. For more information, see <code>CreateUserProfile</code>.</p>
                */
            describeUserProfile(args: DescribeUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserProfileCommandOutput>;
            describeUserProfile(args: DescribeUserProfileCommandInput, cb: (err: any, data?: DescribeUserProfileCommandOutput) => void): void;
            describeUserProfile(args: DescribeUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserProfileCommandOutput) => void): void;
            /**
                * <p>Lists private workforce information, including workforce name, Amazon Resource Name
                *             (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address
                *             ranges are the IP addresses that workers can use to access tasks. </p>
                *         <important>
                *             <p>This operation applies only to private workforces.</p>
                *         </important>
                */
            describeWorkforce(args: DescribeWorkforceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkforceCommandOutput>;
            describeWorkforce(args: DescribeWorkforceCommandInput, cb: (err: any, data?: DescribeWorkforceCommandOutput) => void): void;
            describeWorkforce(args: DescribeWorkforceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkforceCommandOutput) => void): void;
            /**
                * <p>Gets information about a specific work team. You can see information such as the
                *             create date, the last updated date, membership information, and the work team's Amazon
                *             Resource Name (ARN).</p>
                */
            describeWorkteam(args: DescribeWorkteamCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkteamCommandOutput>;
            describeWorkteam(args: DescribeWorkteamCommandInput, cb: (err: any, data?: DescribeWorkteamCommandOutput) => void): void;
            describeWorkteam(args: DescribeWorkteamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkteamCommandOutput) => void): void;
            /**
                * <p>Disables using Service Catalog in SageMaker. Service Catalog is used to create
                *             SageMaker projects.</p>
                */
            disableSagemakerServicecatalogPortfolio(args: DisableSagemakerServicecatalogPortfolioCommandInput, options?: __HttpHandlerOptions): Promise<DisableSagemakerServicecatalogPortfolioCommandOutput>;
            disableSagemakerServicecatalogPortfolio(args: DisableSagemakerServicecatalogPortfolioCommandInput, cb: (err: any, data?: DisableSagemakerServicecatalogPortfolioCommandOutput) => void): void;
            disableSagemakerServicecatalogPortfolio(args: DisableSagemakerServicecatalogPortfolioCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableSagemakerServicecatalogPortfolioCommandOutput) => void): void;
            /**
                * <p>Disassociates a trial component from a trial. This doesn't effect other trials the
                *       component is associated with. Before you can delete a component, you must disassociate the
                *       component from all trials it is associated with. To associate a trial component with a trial,
                *       call the <a>AssociateTrialComponent</a> API.</p>
                *          <p>To get a list of the trials a component is associated with, use the <a>Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter.
                *       The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
                */
            disassociateTrialComponent(args: DisassociateTrialComponentCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateTrialComponentCommandOutput>;
            disassociateTrialComponent(args: DisassociateTrialComponentCommandInput, cb: (err: any, data?: DisassociateTrialComponentCommandOutput) => void): void;
            disassociateTrialComponent(args: DisassociateTrialComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateTrialComponentCommandOutput) => void): void;
            /**
                * <p>Enables using Service Catalog in SageMaker. Service Catalog is used to create
                *             SageMaker projects.</p>
                */
            enableSagemakerServicecatalogPortfolio(args: EnableSagemakerServicecatalogPortfolioCommandInput, options?: __HttpHandlerOptions): Promise<EnableSagemakerServicecatalogPortfolioCommandOutput>;
            enableSagemakerServicecatalogPortfolio(args: EnableSagemakerServicecatalogPortfolioCommandInput, cb: (err: any, data?: EnableSagemakerServicecatalogPortfolioCommandOutput) => void): void;
            enableSagemakerServicecatalogPortfolio(args: EnableSagemakerServicecatalogPortfolioCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableSagemakerServicecatalogPortfolioCommandOutput) => void): void;
            /**
                * <p>Describes a fleet.</p>
                */
            getDeviceFleetReport(args: GetDeviceFleetReportCommandInput, options?: __HttpHandlerOptions): Promise<GetDeviceFleetReportCommandOutput>;
            getDeviceFleetReport(args: GetDeviceFleetReportCommandInput, cb: (err: any, data?: GetDeviceFleetReportCommandOutput) => void): void;
            getDeviceFleetReport(args: GetDeviceFleetReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeviceFleetReportCommandOutput) => void): void;
            /**
                * <p>The resource policy for the lineage group.</p>
                */
            getLineageGroupPolicy(args: GetLineageGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetLineageGroupPolicyCommandOutput>;
            getLineageGroupPolicy(args: GetLineageGroupPolicyCommandInput, cb: (err: any, data?: GetLineageGroupPolicyCommandOutput) => void): void;
            getLineageGroupPolicy(args: GetLineageGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLineageGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Gets a resource policy that manages access for a model group. For information about
                *             resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
                *                 policies and resource-based policies</a> in the <i>Amazon Web Services Identity and
                *                     Access Management User Guide.</i>.</p>
                */
            getModelPackageGroupPolicy(args: GetModelPackageGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetModelPackageGroupPolicyCommandOutput>;
            getModelPackageGroupPolicy(args: GetModelPackageGroupPolicyCommandInput, cb: (err: any, data?: GetModelPackageGroupPolicyCommandOutput) => void): void;
            getModelPackageGroupPolicy(args: GetModelPackageGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelPackageGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Gets the status of Service Catalog in SageMaker. Service Catalog is used to create
                *             SageMaker projects.</p>
                */
            getSagemakerServicecatalogPortfolioStatus(args: GetSagemakerServicecatalogPortfolioStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetSagemakerServicecatalogPortfolioStatusCommandOutput>;
            getSagemakerServicecatalogPortfolioStatus(args: GetSagemakerServicecatalogPortfolioStatusCommandInput, cb: (err: any, data?: GetSagemakerServicecatalogPortfolioStatusCommandOutput) => void): void;
            getSagemakerServicecatalogPortfolioStatus(args: GetSagemakerServicecatalogPortfolioStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSagemakerServicecatalogPortfolioStatusCommandOutput) => void): void;
            /**
                * <p>An auto-complete API for the search functionality in the Amazon SageMaker console. It returns
                *       suggestions of possible matches for the property name to use in <code>Search</code>
                *       queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and
                *       <code>Metrics</code>.</p>
                */
            getSearchSuggestions(args: GetSearchSuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<GetSearchSuggestionsCommandOutput>;
            getSearchSuggestions(args: GetSearchSuggestionsCommandInput, cb: (err: any, data?: GetSearchSuggestionsCommandOutput) => void): void;
            getSearchSuggestions(args: GetSearchSuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSearchSuggestionsCommandOutput) => void): void;
            /**
                * <p>Lists the actions in your account and their properties.</p>
                */
            listActions(args: ListActionsCommandInput, options?: __HttpHandlerOptions): Promise<ListActionsCommandOutput>;
            listActions(args: ListActionsCommandInput, cb: (err: any, data?: ListActionsCommandOutput) => void): void;
            listActions(args: ListActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListActionsCommandOutput) => void): void;
            /**
                * <p>Lists the machine learning algorithms that have been created.</p>
                */
            listAlgorithms(args: ListAlgorithmsCommandInput, options?: __HttpHandlerOptions): Promise<ListAlgorithmsCommandOutput>;
            listAlgorithms(args: ListAlgorithmsCommandInput, cb: (err: any, data?: ListAlgorithmsCommandOutput) => void): void;
            listAlgorithms(args: ListAlgorithmsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAlgorithmsCommandOutput) => void): void;
            /**
                * <p>Lists the AppImageConfigs in your account and their properties. The list can be
                *         filtered by creation time or modified time, and whether the AppImageConfig name contains
                *         a specified string.</p>
                */
            listAppImageConfigs(args: ListAppImageConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListAppImageConfigsCommandOutput>;
            listAppImageConfigs(args: ListAppImageConfigsCommandInput, cb: (err: any, data?: ListAppImageConfigsCommandOutput) => void): void;
            listAppImageConfigs(args: ListAppImageConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAppImageConfigsCommandOutput) => void): void;
            /**
                * <p>Lists apps.</p>
                */
            listApps(args: ListAppsCommandInput, options?: __HttpHandlerOptions): Promise<ListAppsCommandOutput>;
            listApps(args: ListAppsCommandInput, cb: (err: any, data?: ListAppsCommandOutput) => void): void;
            listApps(args: ListAppsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAppsCommandOutput) => void): void;
            /**
                * <p>Lists the artifacts in your account and their properties.</p>
                */
            listArtifacts(args: ListArtifactsCommandInput, options?: __HttpHandlerOptions): Promise<ListArtifactsCommandOutput>;
            listArtifacts(args: ListArtifactsCommandInput, cb: (err: any, data?: ListArtifactsCommandOutput) => void): void;
            listArtifacts(args: ListArtifactsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListArtifactsCommandOutput) => void): void;
            /**
                * <p>Lists the associations in your account and their properties.</p>
                */
            listAssociations(args: ListAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssociationsCommandOutput>;
            listAssociations(args: ListAssociationsCommandInput, cb: (err: any, data?: ListAssociationsCommandOutput) => void): void;
            listAssociations(args: ListAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssociationsCommandOutput) => void): void;
            /**
                * <p>Request a list of jobs.</p>
                */
            listAutoMLJobs(args: ListAutoMLJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListAutoMLJobsCommandOutput>;
            listAutoMLJobs(args: ListAutoMLJobsCommandInput, cb: (err: any, data?: ListAutoMLJobsCommandOutput) => void): void;
            listAutoMLJobs(args: ListAutoMLJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAutoMLJobsCommandOutput) => void): void;
            /**
                * <p>List the candidates created for the job.</p>
                */
            listCandidatesForAutoMLJob(args: ListCandidatesForAutoMLJobCommandInput, options?: __HttpHandlerOptions): Promise<ListCandidatesForAutoMLJobCommandOutput>;
            listCandidatesForAutoMLJob(args: ListCandidatesForAutoMLJobCommandInput, cb: (err: any, data?: ListCandidatesForAutoMLJobCommandOutput) => void): void;
            listCandidatesForAutoMLJob(args: ListCandidatesForAutoMLJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCandidatesForAutoMLJobCommandOutput) => void): void;
            /**
                * <p>Gets a list of the Git repositories in your account.</p>
                */
            listCodeRepositories(args: ListCodeRepositoriesCommandInput, options?: __HttpHandlerOptions): Promise<ListCodeRepositoriesCommandOutput>;
            listCodeRepositories(args: ListCodeRepositoriesCommandInput, cb: (err: any, data?: ListCodeRepositoriesCommandOutput) => void): void;
            listCodeRepositories(args: ListCodeRepositoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCodeRepositoriesCommandOutput) => void): void;
            /**
                * <p>Lists model compilation jobs that satisfy various filters.</p>
                *         <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
                *             information about a particular model compilation job you have created, use <a>DescribeCompilationJob</a>.</p>
                */
            listCompilationJobs(args: ListCompilationJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListCompilationJobsCommandOutput>;
            listCompilationJobs(args: ListCompilationJobsCommandInput, cb: (err: any, data?: ListCompilationJobsCommandOutput) => void): void;
            listCompilationJobs(args: ListCompilationJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCompilationJobsCommandOutput) => void): void;
            /**
                * <p>Lists the contexts in your account and their properties.</p>
                */
            listContexts(args: ListContextsCommandInput, options?: __HttpHandlerOptions): Promise<ListContextsCommandOutput>;
            listContexts(args: ListContextsCommandInput, cb: (err: any, data?: ListContextsCommandOutput) => void): void;
            listContexts(args: ListContextsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListContextsCommandOutput) => void): void;
            /**
                * <p>Lists the data quality job definitions in your account.</p>
                */
            listDataQualityJobDefinitions(args: ListDataQualityJobDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListDataQualityJobDefinitionsCommandOutput>;
            listDataQualityJobDefinitions(args: ListDataQualityJobDefinitionsCommandInput, cb: (err: any, data?: ListDataQualityJobDefinitionsCommandOutput) => void): void;
            listDataQualityJobDefinitions(args: ListDataQualityJobDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataQualityJobDefinitionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of devices in the fleet.</p>
                */
            listDeviceFleets(args: ListDeviceFleetsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeviceFleetsCommandOutput>;
            listDeviceFleets(args: ListDeviceFleetsCommandInput, cb: (err: any, data?: ListDeviceFleetsCommandOutput) => void): void;
            listDeviceFleets(args: ListDeviceFleetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeviceFleetsCommandOutput) => void): void;
            /**
                * <p>A list of devices.</p>
                */
            listDevices(args: ListDevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicesCommandOutput>;
            listDevices(args: ListDevicesCommandInput, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            listDevices(args: ListDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            /**
                * <p>Lists the domains.</p>
                */
            listDomains(args: ListDomainsCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainsCommandOutput>;
            listDomains(args: ListDomainsCommandInput, cb: (err: any, data?: ListDomainsCommandOutput) => void): void;
            listDomains(args: ListDomainsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainsCommandOutput) => void): void;
            /**
                * <p>Lists all edge deployment plans.</p>
                */
            listEdgeDeploymentPlans(args: ListEdgeDeploymentPlansCommandInput, options?: __HttpHandlerOptions): Promise<ListEdgeDeploymentPlansCommandOutput>;
            listEdgeDeploymentPlans(args: ListEdgeDeploymentPlansCommandInput, cb: (err: any, data?: ListEdgeDeploymentPlansCommandOutput) => void): void;
            listEdgeDeploymentPlans(args: ListEdgeDeploymentPlansCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEdgeDeploymentPlansCommandOutput) => void): void;
            /**
                * <p>Returns a list of edge packaging jobs.</p>
                */
            listEdgePackagingJobs(args: ListEdgePackagingJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListEdgePackagingJobsCommandOutput>;
            listEdgePackagingJobs(args: ListEdgePackagingJobsCommandInput, cb: (err: any, data?: ListEdgePackagingJobsCommandOutput) => void): void;
            listEdgePackagingJobs(args: ListEdgePackagingJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEdgePackagingJobsCommandOutput) => void): void;
            /**
                * <p>Lists endpoint configurations.</p>
                */
            listEndpointConfigs(args: ListEndpointConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListEndpointConfigsCommandOutput>;
            listEndpointConfigs(args: ListEndpointConfigsCommandInput, cb: (err: any, data?: ListEndpointConfigsCommandOutput) => void): void;
            listEndpointConfigs(args: ListEndpointConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEndpointConfigsCommandOutput) => void): void;
            /**
                * <p>Lists endpoints.</p>
                */
            listEndpoints(args: ListEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<ListEndpointsCommandOutput>;
            listEndpoints(args: ListEndpointsCommandInput, cb: (err: any, data?: ListEndpointsCommandOutput) => void): void;
            listEndpoints(args: ListEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEndpointsCommandOutput) => void): void;
            /**
                * <p>Lists all the experiments in your account. The list can be filtered to show only
                *       experiments that were created in a specific time range. The list can be sorted by experiment
                *       name or creation time.</p>
                */
            listExperiments(args: ListExperimentsCommandInput, options?: __HttpHandlerOptions): Promise<ListExperimentsCommandOutput>;
            listExperiments(args: ListExperimentsCommandInput, cb: (err: any, data?: ListExperimentsCommandOutput) => void): void;
            listExperiments(args: ListExperimentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperimentsCommandOutput) => void): void;
            /**
                * <p>List <code>FeatureGroup</code>s based on given filter and order.</p>
                */
            listFeatureGroups(args: ListFeatureGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListFeatureGroupsCommandOutput>;
            listFeatureGroups(args: ListFeatureGroupsCommandInput, cb: (err: any, data?: ListFeatureGroupsCommandOutput) => void): void;
            listFeatureGroups(args: ListFeatureGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFeatureGroupsCommandOutput) => void): void;
            /**
                * <p>Returns information about the flow definitions in your account.</p>
                */
            listFlowDefinitions(args: ListFlowDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListFlowDefinitionsCommandOutput>;
            listFlowDefinitions(args: ListFlowDefinitionsCommandInput, cb: (err: any, data?: ListFlowDefinitionsCommandOutput) => void): void;
            listFlowDefinitions(args: ListFlowDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFlowDefinitionsCommandOutput) => void): void;
            /**
                * <p>Returns information about the human task user interfaces in your account.</p>
                */
            listHumanTaskUis(args: ListHumanTaskUisCommandInput, options?: __HttpHandlerOptions): Promise<ListHumanTaskUisCommandOutput>;
            listHumanTaskUis(args: ListHumanTaskUisCommandInput, cb: (err: any, data?: ListHumanTaskUisCommandOutput) => void): void;
            listHumanTaskUis(args: ListHumanTaskUisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListHumanTaskUisCommandOutput) => void): void;
            /**
                * <p>Gets a list of <a>HyperParameterTuningJobSummary</a> objects that
                *             describe
                *             the hyperparameter tuning jobs launched in your account.</p>
                */
            listHyperParameterTuningJobs(args: ListHyperParameterTuningJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListHyperParameterTuningJobsCommandOutput>;
            listHyperParameterTuningJobs(args: ListHyperParameterTuningJobsCommandInput, cb: (err: any, data?: ListHyperParameterTuningJobsCommandOutput) => void): void;
            listHyperParameterTuningJobs(args: ListHyperParameterTuningJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListHyperParameterTuningJobsCommandOutput) => void): void;
            /**
                * <p>Lists the images in your account and their properties. The list can be filtered by
                *         creation time or modified time, and whether the image name contains a specified string.</p>
                */
            listImages(args: ListImagesCommandInput, options?: __HttpHandlerOptions): Promise<ListImagesCommandOutput>;
            listImages(args: ListImagesCommandInput, cb: (err: any, data?: ListImagesCommandOutput) => void): void;
            listImages(args: ListImagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListImagesCommandOutput) => void): void;
            /**
                * <p>Lists the versions of a specified image and their properties. The list can be filtered
                *         by creation time or modified time.</p>
                */
            listImageVersions(args: ListImageVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListImageVersionsCommandOutput>;
            listImageVersions(args: ListImageVersionsCommandInput, cb: (err: any, data?: ListImageVersionsCommandOutput) => void): void;
            listImageVersions(args: ListImageVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListImageVersionsCommandOutput) => void): void;
            /**
                * <p>Lists recommendation jobs that satisfy various filters.</p>
                */
            listInferenceRecommendationsJobs(args: ListInferenceRecommendationsJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListInferenceRecommendationsJobsCommandOutput>;
            listInferenceRecommendationsJobs(args: ListInferenceRecommendationsJobsCommandInput, cb: (err: any, data?: ListInferenceRecommendationsJobsCommandOutput) => void): void;
            listInferenceRecommendationsJobs(args: ListInferenceRecommendationsJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInferenceRecommendationsJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of labeling jobs.</p>
                */
            listLabelingJobs(args: ListLabelingJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListLabelingJobsCommandOutput>;
            listLabelingJobs(args: ListLabelingJobsCommandInput, cb: (err: any, data?: ListLabelingJobsCommandOutput) => void): void;
            listLabelingJobs(args: ListLabelingJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLabelingJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of labeling jobs assigned to a specified work team.</p>
                */
            listLabelingJobsForWorkteam(args: ListLabelingJobsForWorkteamCommandInput, options?: __HttpHandlerOptions): Promise<ListLabelingJobsForWorkteamCommandOutput>;
            listLabelingJobsForWorkteam(args: ListLabelingJobsForWorkteamCommandInput, cb: (err: any, data?: ListLabelingJobsForWorkteamCommandOutput) => void): void;
            listLabelingJobsForWorkteam(args: ListLabelingJobsForWorkteamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLabelingJobsForWorkteamCommandOutput) => void): void;
            /**
                * <p>A list of lineage groups shared with your Amazon Web Services account.
                *          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
                *             Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
                */
            listLineageGroups(args: ListLineageGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListLineageGroupsCommandOutput>;
            listLineageGroups(args: ListLineageGroupsCommandInput, cb: (err: any, data?: ListLineageGroupsCommandOutput) => void): void;
            listLineageGroups(args: ListLineageGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLineageGroupsCommandOutput) => void): void;
            /**
                * <p>Lists model bias jobs definitions that satisfy various filters.</p>
                */
            listModelBiasJobDefinitions(args: ListModelBiasJobDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListModelBiasJobDefinitionsCommandOutput>;
            listModelBiasJobDefinitions(args: ListModelBiasJobDefinitionsCommandInput, cb: (err: any, data?: ListModelBiasJobDefinitionsCommandOutput) => void): void;
            listModelBiasJobDefinitions(args: ListModelBiasJobDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelBiasJobDefinitionsCommandOutput) => void): void;
            /**
                * <p>Lists model explainability job definitions that satisfy various filters.</p>
                */
            listModelExplainabilityJobDefinitions(args: ListModelExplainabilityJobDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListModelExplainabilityJobDefinitionsCommandOutput>;
            listModelExplainabilityJobDefinitions(args: ListModelExplainabilityJobDefinitionsCommandInput, cb: (err: any, data?: ListModelExplainabilityJobDefinitionsCommandOutput) => void): void;
            listModelExplainabilityJobDefinitions(args: ListModelExplainabilityJobDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelExplainabilityJobDefinitionsCommandOutput) => void): void;
            /**
                * <p>Lists the domain, framework, task, and model name of standard
                *           machine learning models found in common model zoos.</p>
                */
            listModelMetadata(args: ListModelMetadataCommandInput, options?: __HttpHandlerOptions): Promise<ListModelMetadataCommandOutput>;
            listModelMetadata(args: ListModelMetadataCommandInput, cb: (err: any, data?: ListModelMetadataCommandOutput) => void): void;
            listModelMetadata(args: ListModelMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelMetadataCommandOutput) => void): void;
            /**
                * <p>Gets a list of the model groups in your Amazon Web Services account.</p>
                */
            listModelPackageGroups(args: ListModelPackageGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListModelPackageGroupsCommandOutput>;
            listModelPackageGroups(args: ListModelPackageGroupsCommandInput, cb: (err: any, data?: ListModelPackageGroupsCommandOutput) => void): void;
            listModelPackageGroups(args: ListModelPackageGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelPackageGroupsCommandOutput) => void): void;
            /**
                * <p>Lists the model packages that have been created.</p>
                */
            listModelPackages(args: ListModelPackagesCommandInput, options?: __HttpHandlerOptions): Promise<ListModelPackagesCommandOutput>;
            listModelPackages(args: ListModelPackagesCommandInput, cb: (err: any, data?: ListModelPackagesCommandOutput) => void): void;
            listModelPackages(args: ListModelPackagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelPackagesCommandOutput) => void): void;
            /**
                * <p>Gets a list of model quality monitoring job definitions in your account.</p>
                */
            listModelQualityJobDefinitions(args: ListModelQualityJobDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListModelQualityJobDefinitionsCommandOutput>;
            listModelQualityJobDefinitions(args: ListModelQualityJobDefinitionsCommandInput, cb: (err: any, data?: ListModelQualityJobDefinitionsCommandOutput) => void): void;
            listModelQualityJobDefinitions(args: ListModelQualityJobDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelQualityJobDefinitionsCommandOutput) => void): void;
            /**
                * <p>Lists models created with the <code>CreateModel</code> API.</p>
                */
            listModels(args: ListModelsCommandInput, options?: __HttpHandlerOptions): Promise<ListModelsCommandOutput>;
            listModels(args: ListModelsCommandInput, cb: (err: any, data?: ListModelsCommandOutput) => void): void;
            listModels(args: ListModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListModelsCommandOutput) => void): void;
            /**
                * <p>Returns list of all monitoring job executions.</p>
                */
            listMonitoringExecutions(args: ListMonitoringExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<ListMonitoringExecutionsCommandOutput>;
            listMonitoringExecutions(args: ListMonitoringExecutionsCommandInput, cb: (err: any, data?: ListMonitoringExecutionsCommandOutput) => void): void;
            listMonitoringExecutions(args: ListMonitoringExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMonitoringExecutionsCommandOutput) => void): void;
            /**
                * <p>Returns list of all monitoring schedules.</p>
                */
            listMonitoringSchedules(args: ListMonitoringSchedulesCommandInput, options?: __HttpHandlerOptions): Promise<ListMonitoringSchedulesCommandOutput>;
            listMonitoringSchedules(args: ListMonitoringSchedulesCommandInput, cb: (err: any, data?: ListMonitoringSchedulesCommandOutput) => void): void;
            listMonitoringSchedules(args: ListMonitoringSchedulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMonitoringSchedulesCommandOutput) => void): void;
            /**
                * <p>Lists notebook instance lifestyle configurations created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
                */
            listNotebookInstanceLifecycleConfigs(args: ListNotebookInstanceLifecycleConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListNotebookInstanceLifecycleConfigsCommandOutput>;
            listNotebookInstanceLifecycleConfigs(args: ListNotebookInstanceLifecycleConfigsCommandInput, cb: (err: any, data?: ListNotebookInstanceLifecycleConfigsCommandOutput) => void): void;
            listNotebookInstanceLifecycleConfigs(args: ListNotebookInstanceLifecycleConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNotebookInstanceLifecycleConfigsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services
                *             Region. </p>
                */
            listNotebookInstances(args: ListNotebookInstancesCommandInput, options?: __HttpHandlerOptions): Promise<ListNotebookInstancesCommandOutput>;
            listNotebookInstances(args: ListNotebookInstancesCommandInput, cb: (err: any, data?: ListNotebookInstancesCommandOutput) => void): void;
            listNotebookInstances(args: ListNotebookInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNotebookInstancesCommandOutput) => void): void;
            /**
                * <p>Gets a list of the pipeline executions.</p>
                */
            listPipelineExecutions(args: ListPipelineExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<ListPipelineExecutionsCommandOutput>;
            listPipelineExecutions(args: ListPipelineExecutionsCommandInput, cb: (err: any, data?: ListPipelineExecutionsCommandOutput) => void): void;
            listPipelineExecutions(args: ListPipelineExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPipelineExecutionsCommandOutput) => void): void;
            /**
                * <p>Gets a list of <code>PipeLineExecutionStep</code> objects.</p>
                */
            listPipelineExecutionSteps(args: ListPipelineExecutionStepsCommandInput, options?: __HttpHandlerOptions): Promise<ListPipelineExecutionStepsCommandOutput>;
            listPipelineExecutionSteps(args: ListPipelineExecutionStepsCommandInput, cb: (err: any, data?: ListPipelineExecutionStepsCommandOutput) => void): void;
            listPipelineExecutionSteps(args: ListPipelineExecutionStepsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPipelineExecutionStepsCommandOutput) => void): void;
            /**
                * <p>Gets a list of parameters for a pipeline execution.</p>
                */
            listPipelineParametersForExecution(args: ListPipelineParametersForExecutionCommandInput, options?: __HttpHandlerOptions): Promise<ListPipelineParametersForExecutionCommandOutput>;
            listPipelineParametersForExecution(args: ListPipelineParametersForExecutionCommandInput, cb: (err: any, data?: ListPipelineParametersForExecutionCommandOutput) => void): void;
            listPipelineParametersForExecution(args: ListPipelineParametersForExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPipelineParametersForExecutionCommandOutput) => void): void;
            /**
                * <p>Gets a list of pipelines.</p>
                */
            listPipelines(args: ListPipelinesCommandInput, options?: __HttpHandlerOptions): Promise<ListPipelinesCommandOutput>;
            listPipelines(args: ListPipelinesCommandInput, cb: (err: any, data?: ListPipelinesCommandOutput) => void): void;
            listPipelines(args: ListPipelinesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPipelinesCommandOutput) => void): void;
            /**
                * <p>Lists processing jobs that satisfy various filters.</p>
                */
            listProcessingJobs(args: ListProcessingJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListProcessingJobsCommandOutput>;
            listProcessingJobs(args: ListProcessingJobsCommandInput, cb: (err: any, data?: ListProcessingJobsCommandOutput) => void): void;
            listProcessingJobs(args: ListProcessingJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProcessingJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of the projects in an Amazon Web Services account.</p>
                */
            listProjects(args: ListProjectsCommandInput, options?: __HttpHandlerOptions): Promise<ListProjectsCommandOutput>;
            listProjects(args: ListProjectsCommandInput, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            listProjects(args: ListProjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            /**
                * <p>Lists devices allocated to the stage, containing detailed device information and deployment status.</p>
                */
            listStageDevices(args: ListStageDevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListStageDevicesCommandOutput>;
            listStageDevices(args: ListStageDevicesCommandInput, cb: (err: any, data?: ListStageDevicesCommandOutput) => void): void;
            listStageDevices(args: ListStageDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStageDevicesCommandOutput) => void): void;
            /**
                * <p>Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.</p>
                */
            listStudioLifecycleConfigs(args: ListStudioLifecycleConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListStudioLifecycleConfigsCommandOutput>;
            listStudioLifecycleConfigs(args: ListStudioLifecycleConfigsCommandInput, cb: (err: any, data?: ListStudioLifecycleConfigsCommandOutput) => void): void;
            listStudioLifecycleConfigs(args: ListStudioLifecycleConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStudioLifecycleConfigsCommandOutput) => void): void;
            /**
                * <p>Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The
                *             list may be empty if no work team satisfies the filter specified in the
                *                 <code>NameContains</code> parameter.</p>
                */
            listSubscribedWorkteams(args: ListSubscribedWorkteamsCommandInput, options?: __HttpHandlerOptions): Promise<ListSubscribedWorkteamsCommandOutput>;
            listSubscribedWorkteams(args: ListSubscribedWorkteamsCommandInput, cb: (err: any, data?: ListSubscribedWorkteamsCommandOutput) => void): void;
            listSubscribedWorkteams(args: ListSubscribedWorkteamsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSubscribedWorkteamsCommandOutput) => void): void;
            /**
                * <p>Returns the tags for the specified SageMaker resource.</p>
                */
            listTags(args: ListTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsCommandOutput>;
            listTags(args: ListTagsCommandInput, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            listTags(args: ListTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            /**
                * <p>Lists training jobs.</p>
                *         <note>
                *             <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same
                *                 time, the <code>MaxResults</code> number of training jobs are first retrieved
                *                 ignoring the <code>StatusEquals</code> parameter and then they are filtered by the
                *                     <code>StatusEquals</code> parameter, which is returned as a response.</p>
                *             <p>For example, if <code>ListTrainingJobs</code> is invoked with the following
                *                 parameters:</p>
                *             <p>
                *                <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code>
                *             </p>
                *             <p>First, 100 trainings jobs with any status, including those other than
                *                     <code>InProgress</code>, are selected (sorted according to the creation time,
                *                 from the most current to the oldest). Next, those with a status of
                *                     <code>InProgress</code> are returned.</p>
                *             <p>You can quickly test the API using the following Amazon Web Services CLI code.</p>
                *             <p>
                *                <code>aws sagemaker list-training-jobs --max-results 100 --status-equals
                *                     InProgress</code>
                *             </p>
                *         </note>
                */
            listTrainingJobs(args: ListTrainingJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListTrainingJobsCommandOutput>;
            listTrainingJobs(args: ListTrainingJobsCommandInput, cb: (err: any, data?: ListTrainingJobsCommandOutput) => void): void;
            listTrainingJobs(args: ListTrainingJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrainingJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of <a>TrainingJobSummary</a> objects that describe the training
                *             jobs that a hyperparameter tuning job launched.</p>
                */
            listTrainingJobsForHyperParameterTuningJob(args: ListTrainingJobsForHyperParameterTuningJobCommandInput, options?: __HttpHandlerOptions): Promise<ListTrainingJobsForHyperParameterTuningJobCommandOutput>;
            listTrainingJobsForHyperParameterTuningJob(args: ListTrainingJobsForHyperParameterTuningJobCommandInput, cb: (err: any, data?: ListTrainingJobsForHyperParameterTuningJobCommandOutput) => void): void;
            listTrainingJobsForHyperParameterTuningJob(args: ListTrainingJobsForHyperParameterTuningJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrainingJobsForHyperParameterTuningJobCommandOutput) => void): void;
            /**
                * <p>Lists transform jobs.</p>
                */
            listTransformJobs(args: ListTransformJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListTransformJobsCommandOutput>;
            listTransformJobs(args: ListTransformJobsCommandInput, cb: (err: any, data?: ListTransformJobsCommandOutput) => void): void;
            listTransformJobs(args: ListTransformJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTransformJobsCommandOutput) => void): void;
            /**
                * <p>Lists the trial components in your account. You can sort the list by trial component name
                *       or creation time. You can filter the list to show only components that were created in a
                *       specific time range. You can also filter on one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ExperimentName</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SourceArn</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TrialName</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            listTrialComponents(args: ListTrialComponentsCommandInput, options?: __HttpHandlerOptions): Promise<ListTrialComponentsCommandOutput>;
            listTrialComponents(args: ListTrialComponentsCommandInput, cb: (err: any, data?: ListTrialComponentsCommandOutput) => void): void;
            listTrialComponents(args: ListTrialComponentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrialComponentsCommandOutput) => void): void;
            /**
                * <p>Lists the trials in your account. Specify an experiment name to limit the list to the
                *       trials that are part of that experiment. Specify a trial component name to limit the list to
                *       the trials that associated with that trial component. The list can be filtered to show only
                *       trials that were created in a specific time range. The list can be sorted by trial name or
                *       creation time.</p>
                */
            listTrials(args: ListTrialsCommandInput, options?: __HttpHandlerOptions): Promise<ListTrialsCommandOutput>;
            listTrials(args: ListTrialsCommandInput, cb: (err: any, data?: ListTrialsCommandOutput) => void): void;
            listTrials(args: ListTrialsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrialsCommandOutput) => void): void;
            /**
                * <p>Lists user profiles.</p>
                */
            listUserProfiles(args: ListUserProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListUserProfilesCommandOutput>;
            listUserProfiles(args: ListUserProfilesCommandInput, cb: (err: any, data?: ListUserProfilesCommandOutput) => void): void;
            listUserProfiles(args: ListUserProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserProfilesCommandOutput) => void): void;
            /**
                * <p>Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only
                *            have one private workforce per Amazon Web Services Region.</p>
                */
            listWorkforces(args: ListWorkforcesCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkforcesCommandOutput>;
            listWorkforces(args: ListWorkforcesCommandInput, cb: (err: any, data?: ListWorkforcesCommandOutput) => void): void;
            listWorkforces(args: ListWorkforcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkforcesCommandOutput) => void): void;
            /**
                * <p>Gets a list of private work teams that you have defined in a region. The list may be empty if
                *             no work team satisfies the filter specified in the <code>NameContains</code>
                *             parameter.</p>
                */
            listWorkteams(args: ListWorkteamsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkteamsCommandOutput>;
            listWorkteams(args: ListWorkteamsCommandInput, cb: (err: any, data?: ListWorkteamsCommandOutput) => void): void;
            listWorkteams(args: ListWorkteamsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkteamsCommandOutput) => void): void;
            /**
                * <p>Adds a resouce policy to control access to a model group. For information about
                *             resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
                *                 policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.</p>
                */
            putModelPackageGroupPolicy(args: PutModelPackageGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutModelPackageGroupPolicyCommandOutput>;
            putModelPackageGroupPolicy(args: PutModelPackageGroupPolicyCommandInput, cb: (err: any, data?: PutModelPackageGroupPolicyCommandOutput) => void): void;
            putModelPackageGroupPolicy(args: PutModelPackageGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutModelPackageGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Use this action to inspect your lineage and discover relationships between entities.
                *          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html">
                *             Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
                */
            queryLineage(args: QueryLineageCommandInput, options?: __HttpHandlerOptions): Promise<QueryLineageCommandOutput>;
            queryLineage(args: QueryLineageCommandInput, cb: (err: any, data?: QueryLineageCommandOutput) => void): void;
            queryLineage(args: QueryLineageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: QueryLineageCommandOutput) => void): void;
            /**
                * <p>Register devices.</p>
                */
            registerDevices(args: RegisterDevicesCommandInput, options?: __HttpHandlerOptions): Promise<RegisterDevicesCommandOutput>;
            registerDevices(args: RegisterDevicesCommandInput, cb: (err: any, data?: RegisterDevicesCommandOutput) => void): void;
            registerDevices(args: RegisterDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterDevicesCommandOutput) => void): void;
            /**
                * <p>Renders the UI template so that you can preview the worker's experience. </p>
                */
            renderUiTemplate(args: RenderUiTemplateCommandInput, options?: __HttpHandlerOptions): Promise<RenderUiTemplateCommandOutput>;
            renderUiTemplate(args: RenderUiTemplateCommandInput, cb: (err: any, data?: RenderUiTemplateCommandOutput) => void): void;
            renderUiTemplate(args: RenderUiTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RenderUiTemplateCommandOutput) => void): void;
            /**
                * <p>Retry the execution of the pipeline.</p>
                */
            retryPipelineExecution(args: RetryPipelineExecutionCommandInput, options?: __HttpHandlerOptions): Promise<RetryPipelineExecutionCommandOutput>;
            retryPipelineExecution(args: RetryPipelineExecutionCommandInput, cb: (err: any, data?: RetryPipelineExecutionCommandOutput) => void): void;
            retryPipelineExecution(args: RetryPipelineExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RetryPipelineExecutionCommandOutput) => void): void;
            /**
                * <p>Finds Amazon SageMaker resources that match a search query. Matching resources are returned
                *       as a list of <code>SearchRecord</code> objects in the response. You can sort the search
                *       results by any resource property in a ascending or descending order.</p>
                *          <p>You can query against the following value types: numeric, text, Boolean, and
                *       timestamp.</p>
                */
            search(args: SearchCommandInput, options?: __HttpHandlerOptions): Promise<SearchCommandOutput>;
            search(args: SearchCommandInput, cb: (err: any, data?: SearchCommandOutput) => void): void;
            search(args: SearchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchCommandOutput) => void): void;
            /**
                * <p>Notifies the pipeline that the execution of a callback step failed, along with a
                *         message describing why. When a callback step is run, the pipeline generates a callback
                *         token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
                */
            sendPipelineExecutionStepFailure(args: SendPipelineExecutionStepFailureCommandInput, options?: __HttpHandlerOptions): Promise<SendPipelineExecutionStepFailureCommandOutput>;
            sendPipelineExecutionStepFailure(args: SendPipelineExecutionStepFailureCommandInput, cb: (err: any, data?: SendPipelineExecutionStepFailureCommandOutput) => void): void;
            sendPipelineExecutionStepFailure(args: SendPipelineExecutionStepFailureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendPipelineExecutionStepFailureCommandOutput) => void): void;
            /**
                * <p>Notifies the pipeline that the execution of a callback step succeeded and provides a
                *         list of the step's output parameters. When a callback step is run, the pipeline generates
                *         a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
                */
            sendPipelineExecutionStepSuccess(args: SendPipelineExecutionStepSuccessCommandInput, options?: __HttpHandlerOptions): Promise<SendPipelineExecutionStepSuccessCommandOutput>;
            sendPipelineExecutionStepSuccess(args: SendPipelineExecutionStepSuccessCommandInput, cb: (err: any, data?: SendPipelineExecutionStepSuccessCommandOutput) => void): void;
            sendPipelineExecutionStepSuccess(args: SendPipelineExecutionStepSuccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendPipelineExecutionStepSuccessCommandOutput) => void): void;
            /**
                * <p>Starts a stage in an edge deployment plan.</p>
                */
            startEdgeDeploymentStage(args: StartEdgeDeploymentStageCommandInput, options?: __HttpHandlerOptions): Promise<StartEdgeDeploymentStageCommandOutput>;
            startEdgeDeploymentStage(args: StartEdgeDeploymentStageCommandInput, cb: (err: any, data?: StartEdgeDeploymentStageCommandOutput) => void): void;
            startEdgeDeploymentStage(args: StartEdgeDeploymentStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartEdgeDeploymentStageCommandOutput) => void): void;
            /**
                * <p>Starts a previously stopped monitoring schedule.</p>
                *          <note>
                *             <p>By default, when you successfully create a new schedule, the status of a monitoring
                *             schedule is <code>scheduled</code>.</p>
                *          </note>
                */
            startMonitoringSchedule(args: StartMonitoringScheduleCommandInput, options?: __HttpHandlerOptions): Promise<StartMonitoringScheduleCommandOutput>;
            startMonitoringSchedule(args: StartMonitoringScheduleCommandInput, cb: (err: any, data?: StartMonitoringScheduleCommandOutput) => void): void;
            startMonitoringSchedule(args: StartMonitoringScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMonitoringScheduleCommandOutput) => void): void;
            /**
                * <p>Launches an ML compute instance with the latest version of the libraries and
                *             attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the
                *             notebook instance status to <code>InService</code>. A notebook instance's status must be
                *                 <code>InService</code> before you can connect to your Jupyter notebook. </p>
                */
            startNotebookInstance(args: StartNotebookInstanceCommandInput, options?: __HttpHandlerOptions): Promise<StartNotebookInstanceCommandOutput>;
            startNotebookInstance(args: StartNotebookInstanceCommandInput, cb: (err: any, data?: StartNotebookInstanceCommandOutput) => void): void;
            startNotebookInstance(args: StartNotebookInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartNotebookInstanceCommandOutput) => void): void;
            /**
                * <p>Starts a pipeline execution.</p>
                */
            startPipelineExecution(args: StartPipelineExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartPipelineExecutionCommandOutput>;
            startPipelineExecution(args: StartPipelineExecutionCommandInput, cb: (err: any, data?: StartPipelineExecutionCommandOutput) => void): void;
            startPipelineExecution(args: StartPipelineExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartPipelineExecutionCommandOutput) => void): void;
            /**
                * <p>A method for forcing the termination of a running job.</p>
                */
            stopAutoMLJob(args: StopAutoMLJobCommandInput, options?: __HttpHandlerOptions): Promise<StopAutoMLJobCommandOutput>;
            stopAutoMLJob(args: StopAutoMLJobCommandInput, cb: (err: any, data?: StopAutoMLJobCommandOutput) => void): void;
            stopAutoMLJob(args: StopAutoMLJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopAutoMLJobCommandOutput) => void): void;
            /**
                * <p>Stops a model compilation job.</p>
                *         <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the
                *             job down. If the job hasn't stopped, it sends the SIGKILL signal.</p>
                *         <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <a>CompilationJobSummary$CompilationJobStatus</a> of the job to
                *             <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <a>CompilationJobSummary$CompilationJobStatus</a> to <code>Stopped</code>.
                *         </p>
                */
            stopCompilationJob(args: StopCompilationJobCommandInput, options?: __HttpHandlerOptions): Promise<StopCompilationJobCommandOutput>;
            stopCompilationJob(args: StopCompilationJobCommandInput, cb: (err: any, data?: StopCompilationJobCommandOutput) => void): void;
            stopCompilationJob(args: StopCompilationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopCompilationJobCommandOutput) => void): void;
            /**
                * <p>Stops a stage in an edge deployment plan.</p>
                */
            stopEdgeDeploymentStage(args: StopEdgeDeploymentStageCommandInput, options?: __HttpHandlerOptions): Promise<StopEdgeDeploymentStageCommandOutput>;
            stopEdgeDeploymentStage(args: StopEdgeDeploymentStageCommandInput, cb: (err: any, data?: StopEdgeDeploymentStageCommandOutput) => void): void;
            stopEdgeDeploymentStage(args: StopEdgeDeploymentStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopEdgeDeploymentStageCommandOutput) => void): void;
            /**
                * <p>Request to stop an edge packaging job.</p>
                */
            stopEdgePackagingJob(args: StopEdgePackagingJobCommandInput, options?: __HttpHandlerOptions): Promise<StopEdgePackagingJobCommandOutput>;
            stopEdgePackagingJob(args: StopEdgePackagingJobCommandInput, cb: (err: any, data?: StopEdgePackagingJobCommandOutput) => void): void;
            stopEdgePackagingJob(args: StopEdgePackagingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopEdgePackagingJobCommandOutput) => void): void;
            /**
                * <p>Stops a running hyperparameter tuning job and all running training jobs that the
                *             tuning job launched.</p>
                *         <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All
                *             data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the
                *             tuning job moves to the <code>Stopped</code> state, it releases all
                *             reserved
                *             resources for the tuning job.</p>
                */
            stopHyperParameterTuningJob(args: StopHyperParameterTuningJobCommandInput, options?: __HttpHandlerOptions): Promise<StopHyperParameterTuningJobCommandOutput>;
            stopHyperParameterTuningJob(args: StopHyperParameterTuningJobCommandInput, cb: (err: any, data?: StopHyperParameterTuningJobCommandOutput) => void): void;
            stopHyperParameterTuningJob(args: StopHyperParameterTuningJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopHyperParameterTuningJobCommandOutput) => void): void;
            /**
                * <p>Stops an Inference Recommender job.</p>
                */
            stopInferenceRecommendationsJob(args: StopInferenceRecommendationsJobCommandInput, options?: __HttpHandlerOptions): Promise<StopInferenceRecommendationsJobCommandOutput>;
            stopInferenceRecommendationsJob(args: StopInferenceRecommendationsJobCommandInput, cb: (err: any, data?: StopInferenceRecommendationsJobCommandOutput) => void): void;
            stopInferenceRecommendationsJob(args: StopInferenceRecommendationsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopInferenceRecommendationsJobCommandOutput) => void): void;
            /**
                * <p>Stops a running labeling job. A job that is stopped cannot be restarted. Any results
                *             obtained before the job is stopped are placed in the Amazon S3 output bucket.</p>
                */
            stopLabelingJob(args: StopLabelingJobCommandInput, options?: __HttpHandlerOptions): Promise<StopLabelingJobCommandOutput>;
            stopLabelingJob(args: StopLabelingJobCommandInput, cb: (err: any, data?: StopLabelingJobCommandOutput) => void): void;
            stopLabelingJob(args: StopLabelingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopLabelingJobCommandOutput) => void): void;
            /**
                * <p>Stops a previously started monitoring schedule.</p>
                */
            stopMonitoringSchedule(args: StopMonitoringScheduleCommandInput, options?: __HttpHandlerOptions): Promise<StopMonitoringScheduleCommandOutput>;
            stopMonitoringSchedule(args: StopMonitoringScheduleCommandInput, cb: (err: any, data?: StopMonitoringScheduleCommandOutput) => void): void;
            stopMonitoringSchedule(args: StopMonitoringScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopMonitoringScheduleCommandOutput) => void): void;
            /**
                * <p>Terminates the ML compute instance. Before terminating the instance, SageMaker
                *             disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker
                *             stops charging you for the ML compute instance when you call
                *                 <code>StopNotebookInstance</code>.</p>
                *         <p>To access data on the ML storage volume for a notebook instance that has been
                *             terminated, call the <code>StartNotebookInstance</code> API.
                *                 <code>StartNotebookInstance</code> launches another ML compute instance, configures
                *             it, and attaches the preserved ML storage volume so you can continue your work.
                *         </p>
                */
            stopNotebookInstance(args: StopNotebookInstanceCommandInput, options?: __HttpHandlerOptions): Promise<StopNotebookInstanceCommandOutput>;
            stopNotebookInstance(args: StopNotebookInstanceCommandInput, cb: (err: any, data?: StopNotebookInstanceCommandOutput) => void): void;
            stopNotebookInstance(args: StopNotebookInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopNotebookInstanceCommandOutput) => void): void;
            /**
                * <p>Stops a pipeline execution.</p>
                *
                *          <p>
                *             <b>Callback Step</b>
                *          </p>
                *          <p>A pipeline execution won't stop while a callback step is running.
                *         When you call <code>StopPipelineExecution</code>
                *         on a pipeline execution with a running callback step, SageMaker Pipelines sends an
                *         additional Amazon SQS message to the specified SQS queue. The body of the SQS message
                *         contains a "Status" field which is set to "Stopping".</p>
                *          <p>You should add logic to your Amazon SQS message consumer to take any needed action (for
                *         example, resource cleanup) upon receipt of the message followed by a call to
                *         <code>SendPipelineExecutionStepSuccess</code> or
                *         <code>SendPipelineExecutionStepFailure</code>.</p>
                *          <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p>
                *
                *          <p>
                *             <b>Lambda Step</b>
                *          </p>
                *          <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda
                *         function invoked by the lambda step can't be stopped. If you attempt to stop the execution
                *         while the Lambda function is running, the pipeline waits for the Lambda function to finish
                *         or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function
                *         finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit
                *         the pipeline execution status is <code>Failed</code>.</p>
                */
            stopPipelineExecution(args: StopPipelineExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StopPipelineExecutionCommandOutput>;
            stopPipelineExecution(args: StopPipelineExecutionCommandInput, cb: (err: any, data?: StopPipelineExecutionCommandOutput) => void): void;
            stopPipelineExecution(args: StopPipelineExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopPipelineExecutionCommandOutput) => void): void;
            /**
                * <p>Stops a processing job.</p>
                */
            stopProcessingJob(args: StopProcessingJobCommandInput, options?: __HttpHandlerOptions): Promise<StopProcessingJobCommandOutput>;
            stopProcessingJob(args: StopProcessingJobCommandInput, cb: (err: any, data?: StopProcessingJobCommandOutput) => void): void;
            stopProcessingJob(args: StopProcessingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopProcessingJobCommandOutput) => void): void;
            /**
                * <p>Stops a training job. To stop a job, SageMaker sends the algorithm the
                *                 <code>SIGTERM</code> signal, which delays job termination for 120 seconds.
                *             Algorithms might use this 120-second window to save the model artifacts, so the results
                *             of the training is not lost. </p>
                *         <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of
                *             the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to
                *                 <code>Stopped</code>.</p>
                */
            stopTrainingJob(args: StopTrainingJobCommandInput, options?: __HttpHandlerOptions): Promise<StopTrainingJobCommandOutput>;
            stopTrainingJob(args: StopTrainingJobCommandInput, cb: (err: any, data?: StopTrainingJobCommandOutput) => void): void;
            stopTrainingJob(args: StopTrainingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopTrainingJobCommandOutput) => void): void;
            /**
                * <p>Stops a batch transform job.</p>
                *         <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job
                *             changes to <code>Stopping</code>. After Amazon SageMaker
                *             stops
                *             the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before
                *             it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
                */
            stopTransformJob(args: StopTransformJobCommandInput, options?: __HttpHandlerOptions): Promise<StopTransformJobCommandOutput>;
            stopTransformJob(args: StopTransformJobCommandInput, cb: (err: any, data?: StopTransformJobCommandOutput) => void): void;
            stopTransformJob(args: StopTransformJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopTransformJobCommandOutput) => void): void;
            /**
                * <p>Updates an action.</p>
                */
            updateAction(args: UpdateActionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateActionCommandOutput>;
            updateAction(args: UpdateActionCommandInput, cb: (err: any, data?: UpdateActionCommandOutput) => void): void;
            updateAction(args: UpdateActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateActionCommandOutput) => void): void;
            /**
                * <p>Updates the properties of an AppImageConfig.</p>
                */
            updateAppImageConfig(args: UpdateAppImageConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAppImageConfigCommandOutput>;
            updateAppImageConfig(args: UpdateAppImageConfigCommandInput, cb: (err: any, data?: UpdateAppImageConfigCommandOutput) => void): void;
            updateAppImageConfig(args: UpdateAppImageConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAppImageConfigCommandOutput) => void): void;
            /**
                * <p>Updates an artifact.</p>
                */
            updateArtifact(args: UpdateArtifactCommandInput, options?: __HttpHandlerOptions): Promise<UpdateArtifactCommandOutput>;
            updateArtifact(args: UpdateArtifactCommandInput, cb: (err: any, data?: UpdateArtifactCommandOutput) => void): void;
            updateArtifact(args: UpdateArtifactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateArtifactCommandOutput) => void): void;
            /**
                * <p>Updates the specified Git repository with the specified values.</p>
                */
            updateCodeRepository(args: UpdateCodeRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCodeRepositoryCommandOutput>;
            updateCodeRepository(args: UpdateCodeRepositoryCommandInput, cb: (err: any, data?: UpdateCodeRepositoryCommandOutput) => void): void;
            updateCodeRepository(args: UpdateCodeRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCodeRepositoryCommandOutput) => void): void;
            /**
                * <p>Updates a context.</p>
                */
            updateContext(args: UpdateContextCommandInput, options?: __HttpHandlerOptions): Promise<UpdateContextCommandOutput>;
            updateContext(args: UpdateContextCommandInput, cb: (err: any, data?: UpdateContextCommandOutput) => void): void;
            updateContext(args: UpdateContextCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateContextCommandOutput) => void): void;
            /**
                * <p>Updates a fleet of devices.</p>
                */
            updateDeviceFleet(args: UpdateDeviceFleetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeviceFleetCommandOutput>;
            updateDeviceFleet(args: UpdateDeviceFleetCommandInput, cb: (err: any, data?: UpdateDeviceFleetCommandOutput) => void): void;
            updateDeviceFleet(args: UpdateDeviceFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeviceFleetCommandOutput) => void): void;
            /**
                * <p>Updates one or more devices in a fleet.</p>
                */
            updateDevices(args: UpdateDevicesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDevicesCommandOutput>;
            updateDevices(args: UpdateDevicesCommandInput, cb: (err: any, data?: UpdateDevicesCommandOutput) => void): void;
            updateDevices(args: UpdateDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDevicesCommandOutput) => void): void;
            /**
                * <p>Updates the default settings for new user profiles in the domain.</p>
                */
            updateDomain(args: UpdateDomainCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainCommandOutput>;
            updateDomain(args: UpdateDomainCommandInput, cb: (err: any, data?: UpdateDomainCommandOutput) => void): void;
            updateDomain(args: UpdateDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainCommandOutput) => void): void;
            /**
                * <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to
                *             using newly created endpoint, and then deletes resources provisioned for the endpoint
                *             using the previous <code>EndpointConfig</code> (there is no availability loss). </p>
                *         <p>When SageMaker receives the request, it sets the endpoint status to
                *                 <code>Updating</code>. After updating the endpoint, it sets the status to
                *                 <code>InService</code>. To check the status of an endpoint, use the <a>DescribeEndpoint</a> API.
                *
                *         </p>
                *         <note>
                *             <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
                *                 live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
                *                 operations are being performed on the endpoint. To update an endpoint, you must
                *                 create a new <code>EndpointConfig</code>.</p>
                *             <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or
                *                 being created or updated you may lose visibility into the instance type the endpoint
                *                 is using. The endpoint must be deleted in order to stop incurring charges.</p>
                *         </note>
                */
            updateEndpoint(args: UpdateEndpointCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEndpointCommandOutput>;
            updateEndpoint(args: UpdateEndpointCommandInput, cb: (err: any, data?: UpdateEndpointCommandOutput) => void): void;
            updateEndpoint(args: UpdateEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEndpointCommandOutput) => void): void;
            /**
                * <p>Updates variant weight of one or more variants associated with an existing
                *             endpoint, or capacity of one variant associated with an existing endpoint. When it
                *             receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After
                *             updating the endpoint, it sets the status to <code>InService</code>. To check the status
                *             of an endpoint, use the <a>DescribeEndpoint</a> API. </p>
                */
            updateEndpointWeightsAndCapacities(args: UpdateEndpointWeightsAndCapacitiesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEndpointWeightsAndCapacitiesCommandOutput>;
            updateEndpointWeightsAndCapacities(args: UpdateEndpointWeightsAndCapacitiesCommandInput, cb: (err: any, data?: UpdateEndpointWeightsAndCapacitiesCommandOutput) => void): void;
            updateEndpointWeightsAndCapacities(args: UpdateEndpointWeightsAndCapacitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEndpointWeightsAndCapacitiesCommandOutput) => void): void;
            /**
                * <p>Adds, updates, or removes the description of an experiment. Updates the display name of an
                *       experiment.</p>
                */
            updateExperiment(args: UpdateExperimentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExperimentCommandOutput>;
            updateExperiment(args: UpdateExperimentCommandInput, cb: (err: any, data?: UpdateExperimentCommandOutput) => void): void;
            updateExperiment(args: UpdateExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExperimentCommandOutput) => void): void;
            /**
                * <p>Updates the feature group.</p>
                */
            updateFeatureGroup(args: UpdateFeatureGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFeatureGroupCommandOutput>;
            updateFeatureGroup(args: UpdateFeatureGroupCommandInput, cb: (err: any, data?: UpdateFeatureGroupCommandOutput) => void): void;
            updateFeatureGroup(args: UpdateFeatureGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFeatureGroupCommandOutput) => void): void;
            /**
                * <p>Updates the description and parameters of the feature group.</p>
                */
            updateFeatureMetadata(args: UpdateFeatureMetadataCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFeatureMetadataCommandOutput>;
            updateFeatureMetadata(args: UpdateFeatureMetadataCommandInput, cb: (err: any, data?: UpdateFeatureMetadataCommandOutput) => void): void;
            updateFeatureMetadata(args: UpdateFeatureMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFeatureMetadataCommandOutput) => void): void;
            /**
                * <p>Updates the properties of a SageMaker image. To change the image's tags, use the
                *         <a>AddTags</a> and <a>DeleteTags</a> APIs.</p>
                */
            updateImage(args: UpdateImageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateImageCommandOutput>;
            updateImage(args: UpdateImageCommandInput, cb: (err: any, data?: UpdateImageCommandOutput) => void): void;
            updateImage(args: UpdateImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateImageCommandOutput) => void): void;
            /**
                * <p>Updates a versioned model.</p>
                */
            updateModelPackage(args: UpdateModelPackageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateModelPackageCommandOutput>;
            updateModelPackage(args: UpdateModelPackageCommandInput, cb: (err: any, data?: UpdateModelPackageCommandOutput) => void): void;
            updateModelPackage(args: UpdateModelPackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateModelPackageCommandOutput) => void): void;
            /**
                * <p>Updates a previously created schedule.</p>
                */
            updateMonitoringSchedule(args: UpdateMonitoringScheduleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMonitoringScheduleCommandOutput>;
            updateMonitoringSchedule(args: UpdateMonitoringScheduleCommandInput, cb: (err: any, data?: UpdateMonitoringScheduleCommandOutput) => void): void;
            updateMonitoringSchedule(args: UpdateMonitoringScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMonitoringScheduleCommandOutput) => void): void;
            /**
                * <p>Updates a notebook instance. NotebookInstance updates include upgrading or
                *             downgrading the ML compute instance used for your notebook instance to accommodate
                *             changes in your workload requirements.</p>
                */
            updateNotebookInstance(args: UpdateNotebookInstanceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNotebookInstanceCommandOutput>;
            updateNotebookInstance(args: UpdateNotebookInstanceCommandInput, cb: (err: any, data?: UpdateNotebookInstanceCommandOutput) => void): void;
            updateNotebookInstance(args: UpdateNotebookInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNotebookInstanceCommandOutput) => void): void;
            /**
                * <p>Updates a notebook instance lifecycle configuration created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
                */
            updateNotebookInstanceLifecycleConfig(args: UpdateNotebookInstanceLifecycleConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNotebookInstanceLifecycleConfigCommandOutput>;
            updateNotebookInstanceLifecycleConfig(args: UpdateNotebookInstanceLifecycleConfigCommandInput, cb: (err: any, data?: UpdateNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            updateNotebookInstanceLifecycleConfig(args: UpdateNotebookInstanceLifecycleConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNotebookInstanceLifecycleConfigCommandOutput) => void): void;
            /**
                * <p>Updates a pipeline.</p>
                */
            updatePipeline(args: UpdatePipelineCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePipelineCommandOutput>;
            updatePipeline(args: UpdatePipelineCommandInput, cb: (err: any, data?: UpdatePipelineCommandOutput) => void): void;
            updatePipeline(args: UpdatePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePipelineCommandOutput) => void): void;
            /**
                * <p>Updates a pipeline execution.</p>
                */
            updatePipelineExecution(args: UpdatePipelineExecutionCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePipelineExecutionCommandOutput>;
            updatePipelineExecution(args: UpdatePipelineExecutionCommandInput, cb: (err: any, data?: UpdatePipelineExecutionCommandOutput) => void): void;
            updatePipelineExecution(args: UpdatePipelineExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePipelineExecutionCommandOutput) => void): void;
            /**
                * <p>Updates a machine learning (ML) project that is created from a template that
                *             sets up an ML pipeline from training to deploying an approved model.</p>
                *         <note>
                *             <p>You must not update a project that is in use. If you update the
                *                     <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active
                *                 or being created, or updated, you may lose resources already created by the
                *                 project.</p>
                *             </note>
                */
            updateProject(args: UpdateProjectCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProjectCommandOutput>;
            updateProject(args: UpdateProjectCommandInput, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            updateProject(args: UpdateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            /**
                * <p>Update a model training job to request a new Debugger profiling configuration.</p>
                */
            updateTrainingJob(args: UpdateTrainingJobCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTrainingJobCommandOutput>;
            updateTrainingJob(args: UpdateTrainingJobCommandInput, cb: (err: any, data?: UpdateTrainingJobCommandOutput) => void): void;
            updateTrainingJob(args: UpdateTrainingJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTrainingJobCommandOutput) => void): void;
            /**
                * <p>Updates the display name of a trial.</p>
                */
            updateTrial(args: UpdateTrialCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTrialCommandOutput>;
            updateTrial(args: UpdateTrialCommandInput, cb: (err: any, data?: UpdateTrialCommandOutput) => void): void;
            updateTrial(args: UpdateTrialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTrialCommandOutput) => void): void;
            /**
                * <p>Updates one or more properties of a trial component.</p>
                */
            updateTrialComponent(args: UpdateTrialComponentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTrialComponentCommandOutput>;
            updateTrialComponent(args: UpdateTrialComponentCommandInput, cb: (err: any, data?: UpdateTrialComponentCommandOutput) => void): void;
            updateTrialComponent(args: UpdateTrialComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTrialComponentCommandOutput) => void): void;
            /**
                * <p>Updates a user profile.</p>
                */
            updateUserProfile(args: UpdateUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserProfileCommandOutput>;
            updateUserProfile(args: UpdateUserProfileCommandInput, cb: (err: any, data?: UpdateUserProfileCommandOutput) => void): void;
            updateUserProfile(args: UpdateUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserProfileCommandOutput) => void): void;
            /**
                * <p>Use this operation to update your workforce. You can use this operation to
                *         require that workers use specific IP addresses to work on tasks
                *         and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p>
                *         <p>The worker portal is now supported in VPC and public internet.</p>
                *
                *
                *         <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses.
                *         You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>.
                *         By default, a workforce isn't restricted to specific IP addresses. If you specify a
                *             range of IP addresses, workers who attempt to access tasks using any IP address outside
                *             the specified range are denied and get a <code>Not Found</code> error message on
                *             the worker portal.</p>
                *          <p>To restrict access to all the workers in public internet, add the <code>SourceIpConfig</code> CIDR value as "0.0.0.0/0".</p>
                *         <important>
                *             <p>Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.</p>
                *         </important>
                *         <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using
                *             your own OIDC IdP. </p>
                *         <important>
                *             <p>You can only update your OIDC IdP configuration when there are no work teams
                *                 associated with your workforce. You can delete work teams using the  operation.</p>
                *         </important>
                *         <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you
                *         can view details about your update workforce using the
                *             operation.</p>
                *         <important>
                *             <p>This operation only applies to private workforces.</p>
                *         </important>
                */
            updateWorkforce(args: UpdateWorkforceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkforceCommandOutput>;
            updateWorkforce(args: UpdateWorkforceCommandInput, cb: (err: any, data?: UpdateWorkforceCommandOutput) => void): void;
            updateWorkforce(args: UpdateWorkforceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkforceCommandOutput) => void): void;
            /**
                * <p>Updates an existing work team with new member definitions or description.</p>
                */
            updateWorkteam(args: UpdateWorkteamCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkteamCommandOutput>;
            updateWorkteam(args: UpdateWorkteamCommandInput, cb: (err: any, data?: UpdateWorkteamCommandOutput) => void): void;
            updateWorkteam(args: UpdateWorkteamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkteamCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AddAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddAssociationRequest, AddAssociationResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface AddAssociationCommandInput extends AddAssociationRequest {
    }
    export interface AddAssociationCommandOutput extends AddAssociationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an <i>association</i> between the source and the destination. A
        *         source can be associated with multiple destinations, and a destination can be associated
        *         with multiple sources. An association is a lineage tracking entity. For more information, see
        *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
        *           ML Lineage Tracking</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, AddAssociationCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, AddAssociationCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new AddAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddAssociationCommandInput} for command's `input` shape.
        * @see {@link AddAssociationCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class AddAssociationCommand extends $Command<AddAssociationCommandInput, AddAssociationCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: AddAssociationCommandInput;
            constructor(input: AddAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddAssociationCommandInput, AddAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AddTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddTagsInput, AddTagsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface AddTagsCommandInput extends AddTagsInput {
    }
    export interface AddTagsCommandOutput extends AddTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add
        *             tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform
        *             jobs, models, labeling jobs, work teams, endpoint configurations, and
        *             endpoints.</p>
        *         <p>Each tag consists of a key and an optional value. Tag keys must be unique per
        *             resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon Web Services
        *                 Tagging Strategies</a>.</p>
        *         <note>
        *             <p>Tags that you add to a hyperparameter tuning job by calling this API are also
        *                 added to any training jobs that the hyperparameter tuning job launches after you
        *                 call this API, but not to training jobs that the hyperparameter tuning job launched
        *                 before you called this API. To make sure that the tags associated with a
        *                 hyperparameter tuning job are also added to all training jobs that the
        *                 hyperparameter tuning job launches, add the tags when you first create the tuning
        *                 job by specifying them in the <code>Tags</code> parameter of <a>CreateHyperParameterTuningJob</a>
        *             </p>
        *         </note>
        *         <note>
        *             <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API
        *                 are also added to any Apps that the Domain or User Profile launches after you call
        *                 this API, but not to Apps that the Domain or User Profile launched before you called
        *                 this API. To make sure that the tags associated with a Domain or User Profile are
        *                 also added to all Apps that the Domain or User Profile launches, add the tags when
        *                 you first create the Domain or User Profile by specifying them in the
        *                     <code>Tags</code> parameter of <a>CreateDomain</a> or <a>CreateUserProfile</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, AddTagsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, AddTagsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new AddTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsCommandInput} for command's `input` shape.
        * @see {@link AddTagsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class AddTagsCommand extends $Command<AddTagsCommandInput, AddTagsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: AddTagsCommandInput;
            constructor(input: AddTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsCommandInput, AddTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AssociateTrialComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateTrialComponentRequest, AssociateTrialComponentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface AssociateTrialComponentCommandInput extends AssociateTrialComponentRequest {
    }
    export interface AssociateTrialComponentCommandOutput extends AssociateTrialComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a trial component with a trial. A trial component can be associated with
        *       multiple trials. To disassociate a trial component from a trial, call the <a>DisassociateTrialComponent</a> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, AssociateTrialComponentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, AssociateTrialComponentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new AssociateTrialComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateTrialComponentCommandInput} for command's `input` shape.
        * @see {@link AssociateTrialComponentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class AssociateTrialComponentCommand extends $Command<AssociateTrialComponentCommandInput, AssociateTrialComponentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: AssociateTrialComponentCommandInput;
            constructor(input: AssociateTrialComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateTrialComponentCommandInput, AssociateTrialComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/BatchDescribeModelPackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchDescribeModelPackageInput, BatchDescribeModelPackageOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface BatchDescribeModelPackageCommandInput extends BatchDescribeModelPackageInput {
    }
    export interface BatchDescribeModelPackageCommandOutput extends BatchDescribeModelPackageOutput, __MetadataBearer {
    }
    /**
        * <p>This action batch describes a list of versioned model packages</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, BatchDescribeModelPackageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, BatchDescribeModelPackageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new BatchDescribeModelPackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDescribeModelPackageCommandInput} for command's `input` shape.
        * @see {@link BatchDescribeModelPackageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class BatchDescribeModelPackageCommand extends $Command<BatchDescribeModelPackageCommandInput, BatchDescribeModelPackageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: BatchDescribeModelPackageCommandInput;
            constructor(input: BatchDescribeModelPackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDescribeModelPackageCommandInput, BatchDescribeModelPackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateActionRequest, CreateActionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateActionCommandInput extends CreateActionRequest {
    }
    export interface CreateActionCommandOutput extends CreateActionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an <i>action</i>. An action is a lineage tracking entity that
        *         represents an action or activity. For example, a model deployment or an HPO job.
        *         Generally, an action involves at least one input or output artifact. For more information, see
        *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
        *           ML Lineage Tracking</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateActionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateActionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateActionCommandInput} for command's `input` shape.
        * @see {@link CreateActionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateActionCommand extends $Command<CreateActionCommandInput, CreateActionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateActionCommandInput;
            constructor(input: CreateActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateActionCommandInput, CreateActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAlgorithmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAlgorithmInput, CreateAlgorithmOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateAlgorithmCommandInput extends CreateAlgorithmInput {
    }
    export interface CreateAlgorithmCommandOutput extends CreateAlgorithmOutput, __MetadataBearer {
    }
    /**
        * <p>Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services
        *             Marketplace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateAlgorithmCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateAlgorithmCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateAlgorithmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAlgorithmCommandInput} for command's `input` shape.
        * @see {@link CreateAlgorithmCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateAlgorithmCommand extends $Command<CreateAlgorithmCommandInput, CreateAlgorithmCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateAlgorithmCommandInput;
            constructor(input: CreateAlgorithmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAlgorithmCommandInput, CreateAlgorithmCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAppRequest, CreateAppResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateAppCommandInput extends CreateAppRequest {
    }
    export interface CreateAppCommandOutput extends CreateAppResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a running app for the specified UserProfile. Supported apps are
        *       <code>JupyterServer</code> and <code>KernelGateway</code>. This operation is automatically
        *       invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel
        *       configurations are selected by the user. A user may have multiple Apps active simultaneously.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateAppCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateAppCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAppCommandInput} for command's `input` shape.
        * @see {@link CreateAppCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateAppCommand extends $Command<CreateAppCommandInput, CreateAppCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateAppCommandInput;
            constructor(input: CreateAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAppCommandInput, CreateAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAppImageConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAppImageConfigRequest, CreateAppImageConfigResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateAppImageConfigCommandInput extends CreateAppImageConfigRequest {
    }
    export interface CreateAppImageConfigCommandOutput extends CreateAppImageConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a configuration for running a SageMaker image as a KernelGateway app. The
        *         configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the
        *         kernels in the image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateAppImageConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateAppImageConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateAppImageConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAppImageConfigCommandInput} for command's `input` shape.
        * @see {@link CreateAppImageConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateAppImageConfigCommand extends $Command<CreateAppImageConfigCommandInput, CreateAppImageConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateAppImageConfigCommandInput;
            constructor(input: CreateAppImageConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAppImageConfigCommandInput, CreateAppImageConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateArtifactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateArtifactRequest, CreateArtifactResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateArtifactCommandInput extends CreateArtifactRequest {
    }
    export interface CreateArtifactCommandOutput extends CreateArtifactResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an <i>artifact</i>. An artifact is a lineage tracking entity that
        *         represents a URI addressable object or data. Some examples are the S3 URI of a dataset and
        *         the ECR registry path of an image. For more information, see
        *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
        *           ML Lineage Tracking</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateArtifactCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateArtifactCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateArtifactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateArtifactCommandInput} for command's `input` shape.
        * @see {@link CreateArtifactCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateArtifactCommand extends $Command<CreateArtifactCommandInput, CreateArtifactCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateArtifactCommandInput;
            constructor(input: CreateArtifactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateArtifactCommandInput, CreateArtifactCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAutoMLJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAutoMLJobRequest, CreateAutoMLJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateAutoMLJobCommandInput extends CreateAutoMLJobRequest {
    }
    export interface CreateAutoMLJobCommandOutput extends CreateAutoMLJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Autopilot job.</p>
        *          <p>Find the best-performing model after you run an Autopilot job by calling .</p>
        *          <p>For information about how to use Autopilot, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html">Automate Model
        *             Development with Amazon SageMaker Autopilot</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateAutoMLJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateAutoMLJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateAutoMLJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAutoMLJobCommandInput} for command's `input` shape.
        * @see {@link CreateAutoMLJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateAutoMLJobCommand extends $Command<CreateAutoMLJobCommandInput, CreateAutoMLJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateAutoMLJobCommandInput;
            constructor(input: CreateAutoMLJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAutoMLJobCommandInput, CreateAutoMLJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateCodeRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCodeRepositoryInput, CreateCodeRepositoryOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateCodeRepositoryCommandInput extends CreateCodeRepositoryInput {
    }
    export interface CreateCodeRepositoryCommandOutput extends CreateCodeRepositoryOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a Git repository as a resource in your SageMaker account. You can associate the
        *             repository with notebook instances so that you can use Git source control for the
        *             notebooks you create. The Git repository is a resource in your SageMaker account, so it can
        *             be associated with more than one notebook instance, and it persists independently from
        *             the lifecycle of any notebook instances it is associated with.</p>
        *         <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
        *             other Git repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateCodeRepositoryCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateCodeRepositoryCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateCodeRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCodeRepositoryCommandInput} for command's `input` shape.
        * @see {@link CreateCodeRepositoryCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateCodeRepositoryCommand extends $Command<CreateCodeRepositoryCommandInput, CreateCodeRepositoryCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateCodeRepositoryCommandInput;
            constructor(input: CreateCodeRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCodeRepositoryCommandInput, CreateCodeRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateCompilationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCompilationJobRequest, CreateCompilationJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateCompilationJobCommandInput extends CreateCompilationJobRequest {
    }
    export interface CreateCompilationJobCommandOutput extends CreateCompilationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the
        *             resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p>
        *         <p>If
        *             you choose to host your model using Amazon SageMaker hosting services, you can use the resulting
        *             model artifacts as part of the model. You can also use the artifacts with
        *             Amazon Web Services
        *             IoT Greengrass. In that case, deploy them as an ML
        *             resource.</p>
        *         <p>In the request body, you provide the following:</p>
        *         <ul>
        *             <li>
        *                 <p>A name for the compilation job</p>
        *             </li>
        *             <li>
        *                 <p> Information about the input model artifacts </p>
        *             </li>
        *             <li>
        *                 <p>The output location for the compiled model and the device (target) that the
        *                     model runs on </p>
        *             </li>
        *             <li>
        *                 <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform
        *                     the model compilation job. </p>
        *             </li>
        *          </ul>
        *         <p>You can also provide a <code>Tag</code> to track the model compilation job's resource
        *             use and costs. The response body contains the
        *                 <code>CompilationJobArn</code>
        *             for the compiled job.</p>
        *         <p>To stop a model compilation job, use <a>StopCompilationJob</a>. To get
        *             information about a particular model compilation job, use <a>DescribeCompilationJob</a>. To get information about multiple model
        *             compilation jobs, use <a>ListCompilationJobs</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateCompilationJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateCompilationJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateCompilationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCompilationJobCommandInput} for command's `input` shape.
        * @see {@link CreateCompilationJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateCompilationJobCommand extends $Command<CreateCompilationJobCommandInput, CreateCompilationJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateCompilationJobCommandInput;
            constructor(input: CreateCompilationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCompilationJobCommandInput, CreateCompilationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateContextCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateContextRequest, CreateContextResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateContextCommandInput extends CreateContextRequest {
    }
    export interface CreateContextCommandOutput extends CreateContextResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <i>context</i>. A context is a lineage tracking entity that
        *         represents a logical grouping of other tracking or experiment entities. Some examples are
        *         an endpoint and a model package. For more information, see
        *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
        *           ML Lineage Tracking</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateContextCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateContextCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateContextCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateContextCommandInput} for command's `input` shape.
        * @see {@link CreateContextCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateContextCommand extends $Command<CreateContextCommandInput, CreateContextCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateContextCommandInput;
            constructor(input: CreateContextCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateContextCommandInput, CreateContextCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDataQualityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDataQualityJobDefinitionRequest, CreateDataQualityJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateDataQualityJobDefinitionCommandInput extends CreateDataQualityJobDefinitionRequest {
    }
    export interface CreateDataQualityJobDefinitionCommandOutput extends CreateDataQualityJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a definition for a job that monitors data quality and drift. For information
        *          about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateDataQualityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateDataQualityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateDataQualityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataQualityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateDataQualityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateDataQualityJobDefinitionCommand extends $Command<CreateDataQualityJobDefinitionCommandInput, CreateDataQualityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateDataQualityJobDefinitionCommandInput;
            constructor(input: CreateDataQualityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataQualityJobDefinitionCommandInput, CreateDataQualityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDeviceFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDeviceFleetRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateDeviceFleetCommandInput extends CreateDeviceFleetRequest {
    }
    export interface CreateDeviceFleetCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates a device fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateDeviceFleetCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateDeviceFleetCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateDeviceFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeviceFleetCommandInput} for command's `input` shape.
        * @see {@link CreateDeviceFleetCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateDeviceFleetCommand extends $Command<CreateDeviceFleetCommandInput, CreateDeviceFleetCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateDeviceFleetCommandInput;
            constructor(input: CreateDeviceFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeviceFleetCommandInput, CreateDeviceFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDomainRequest, CreateDomainResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateDomainCommandInput extends CreateDomainRequest {
    }
    export interface CreateDomainCommandOutput extends CreateDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated
        *     Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application,
        *     policy, and Amazon Virtual Private Cloud (VPC) configurations. An Amazon Web Services account is limited to one domain per region.
        *     Users within a domain can share notebook files and other artifacts with each other.</p>
        *
        *          <p>
        *             <b>EFS storage</b>
        *          </p>
        *          <p>When a domain is created, an EFS volume is created for use by all of the users within the
        *     domain. Each user receives a private home directory within the EFS volume for notebooks,
        *     Git repositories, and data files.</p>
        *          <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with
        *      an Amazon Web Services managed key by default. For more control, you can specify a
        *      customer managed key. For more information, see
        *     <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at
        *       Rest Using Encryption</a>.</p>
        *
        *          <p>
        *             <b>VPC configuration</b>
        *          </p>
        *          <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified
        *     VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code>
        *     parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you
        *     choose when you onboard to Studio. The following options are available:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by
        *         Amazon SageMaker, which allows internet access. This is the default value.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets.
        *         Internet access is disabled by default. To allow internet access, you must specify a
        *         NAT gateway.</p>
        *                <p>When internet access is disabled, you won't be able to run a Studio notebook or to
        *         train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime
        *         or a NAT gateway and your security groups allow outbound connections.</p>
        *             </li>
        *          </ul>
        *          <important>
        *             <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules
        *       in order to launch a SageMaker Studio app successfully.</p>
        *          </important>
        *          <p>For more information, see
        *     <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect
        *        SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateDomainCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateDomainCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDomainCommandInput} for command's `input` shape.
        * @see {@link CreateDomainCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateDomainCommand extends $Command<CreateDomainCommandInput, CreateDomainCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateDomainCommandInput;
            constructor(input: CreateDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDomainCommandInput, CreateDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgeDeploymentPlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEdgeDeploymentPlanRequest, CreateEdgeDeploymentPlanResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateEdgeDeploymentPlanCommandInput extends CreateEdgeDeploymentPlanRequest {
    }
    export interface CreateEdgeDeploymentPlanCommandOutput extends CreateEdgeDeploymentPlanResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateEdgeDeploymentPlanCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateEdgeDeploymentPlanCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateEdgeDeploymentPlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEdgeDeploymentPlanCommandInput} for command's `input` shape.
        * @see {@link CreateEdgeDeploymentPlanCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateEdgeDeploymentPlanCommand extends $Command<CreateEdgeDeploymentPlanCommandInput, CreateEdgeDeploymentPlanCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateEdgeDeploymentPlanCommandInput;
            constructor(input: CreateEdgeDeploymentPlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEdgeDeploymentPlanCommandInput, CreateEdgeDeploymentPlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgeDeploymentStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEdgeDeploymentStageRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateEdgeDeploymentStageCommandInput extends CreateEdgeDeploymentStageRequest {
    }
    export interface CreateEdgeDeploymentStageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates a new stage in an existing edge deployment plan.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateEdgeDeploymentStageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateEdgeDeploymentStageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateEdgeDeploymentStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEdgeDeploymentStageCommandInput} for command's `input` shape.
        * @see {@link CreateEdgeDeploymentStageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateEdgeDeploymentStageCommand extends $Command<CreateEdgeDeploymentStageCommandInput, CreateEdgeDeploymentStageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateEdgeDeploymentStageCommandInput;
            constructor(input: CreateEdgeDeploymentStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEdgeDeploymentStageCommandInput, CreateEdgeDeploymentStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgePackagingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEdgePackagingJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateEdgePackagingJobCommandInput extends CreateEdgePackagingJobRequest {
    }
    export interface CreateEdgePackagingJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateEdgePackagingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateEdgePackagingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateEdgePackagingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEdgePackagingJobCommandInput} for command's `input` shape.
        * @see {@link CreateEdgePackagingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateEdgePackagingJobCommand extends $Command<CreateEdgePackagingJobCommandInput, CreateEdgePackagingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateEdgePackagingJobCommandInput;
            constructor(input: CreateEdgePackagingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEdgePackagingJobCommandInput, CreateEdgePackagingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEndpointInput, CreateEndpointOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateEndpointCommandInput extends CreateEndpointInput {
    }
    export interface CreateEndpointCommandOutput extends CreateEndpointOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker
        *             uses the endpoint to provision resources and deploy models. You create the endpoint
        *             configuration with the <a>CreateEndpointConfig</a> API. </p>
        *         <p> Use this API to deploy models using SageMaker hosting services. </p>
        *         <p>For an example that calls this method when deploying a model to SageMaker hosting services,
        *             see the <a href="https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb">Create Endpoint example notebook.</a>
        *          </p>
        *         <note>
        *             <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint
        *                 that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
        *                 operations are being performed on the endpoint. To update an endpoint, you must
        *                 create a new <code>EndpointConfig</code>.</p>
        *         </note>
        *         <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p>
        *         <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML
        *             compute instances), and deploys the model(s) on them. </p>
        *
        *         <note>
        *             <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
        *                 verify that your endpoint configuration exists. When you read data from a DynamoDB
        *                 table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
        *                   <code>Eventually Consistent Reads</code>
        *                </a>, the response might not
        *                 reflect the results of a recently completed write operation. The response might
        *                 include some stale data. If the dependent entities are not yet in DynamoDB, this
        *                 causes a validation error. If you repeat your read request after a short time, the
        *                 response should return the latest data. So retry logic is recommended to handle
        *                 these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
        *         </note>
        *         <p>When SageMaker receives the request, it sets the endpoint status to
        *                 <code>Creating</code>. After it creates the endpoint, it sets the status to
        *                 <code>InService</code>. SageMaker can then process incoming requests for inferences. To
        *             check the status of an endpoint, use the <a>DescribeEndpoint</a>
        *             API.</p>
        *         <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location,
        *             SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you
        *             provided. Amazon Web Services STS is activated in your IAM user account by default. If you previously
        *             deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For
        *             more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
        *                 Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User
        *                 Guide</i>.</p>
        *         <note>
        *             <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose
        *                 Roles in the left navigation pane. Search the IAM role that you want to grant
        *                 access to use the <a>CreateEndpoint</a> and <a>CreateEndpointConfig</a> API operations, add the following policies to
        *                 the role. </p>
        *             <ul>
        *                <li>
        *                     <p>Option 1: For a full SageMaker access, search and attach the
        *                             <code>AmazonSageMakerFullAccess</code> policy.</p>
        *                 </li>
        *                <li>
        *                     <p>Option 2: For granting a limited access to an IAM role, paste the
        *                         following Action elements manually into the JSON file of the IAM role: </p>
        *                     <p>
        *                      <code>"Action": ["sagemaker:CreateEndpoint",
        *                             "sagemaker:CreateEndpointConfig"]</code>
        *                   </p>
        *                     <p>
        *                      <code>"Resource": [</code>
        *                   </p>
        *                     <p>
        *                      <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code>
        *                   </p>
        *                     <p>
        *                      <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code>
        *                   </p>
        *                     <p>
        *                      <code>]</code>
        *                   </p>
        *                     <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker API
        *                             Permissions: Actions, Permissions, and Resources
        *                         Reference</a>.</p>
        *                 </li>
        *             </ul>
        *
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateEndpointCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateEndpointCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEndpointCommandInput} for command's `input` shape.
        * @see {@link CreateEndpointCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateEndpointCommand extends $Command<CreateEndpointCommandInput, CreateEndpointCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateEndpointCommandInput;
            constructor(input: CreateEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEndpointCommandInput, CreateEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEndpointConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEndpointConfigInput, CreateEndpointConfigOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateEndpointConfigCommandInput extends CreateEndpointConfigInput {
    }
    export interface CreateEndpointConfigCommandOutput extends CreateEndpointConfigOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In
        *             the configuration, you identify one or more models, created using the
        *                 <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to
        *             provision. Then you call the <a>CreateEndpoint</a> API.</p>
        *         <note>
        *             <p> Use this API if you want to use SageMaker hosting services to deploy models into
        *                 production. </p>
        *         </note>
        *         <p>In the request, you define a <code>ProductionVariant</code>, for each model that you
        *             want to deploy. Each <code>ProductionVariant</code> parameter also describes the
        *             resources that you want SageMaker to provision. This includes the number and type of ML
        *             compute instances to deploy. </p>
        *         <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to
        *             specify how much traffic you want to allocate to each model. For example, suppose that
        *             you want to host two models, A and B, and you assign traffic weight 2 for model A and 1
        *             for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to
        *             model B. </p>
        *         <note>
        *             <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
        *                 verify that your endpoint configuration exists. When you read data from a DynamoDB
        *                 table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
        *                   <code>Eventually Consistent Reads</code>
        *                </a>, the response might not
        *                 reflect the results of a recently completed write operation. The response might
        *                 include some stale data. If the dependent entities are not yet in DynamoDB, this
        *                 causes a validation error. If you repeat your read request after a short time, the
        *                 response should return the latest data. So retry logic is recommended to handle
        *                 these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateEndpointConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateEndpointConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateEndpointConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEndpointConfigCommandInput} for command's `input` shape.
        * @see {@link CreateEndpointConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateEndpointConfigCommand extends $Command<CreateEndpointConfigCommandInput, CreateEndpointConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateEndpointConfigCommandInput;
            constructor(input: CreateEndpointConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEndpointConfigCommandInput, CreateEndpointConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateExperimentRequest, CreateExperimentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateExperimentCommandInput extends CreateExperimentRequest {
    }
    export interface CreateExperimentCommandOutput extends CreateExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an SageMaker <i>experiment</i>. An experiment is a collection of
        *         <i>trials</i> that are observed, compared and evaluated as a group. A trial is
        *       a set of steps, called <i>trial components</i>, that produce a machine learning
        *       model.</p>
        *          <p>The goal of an experiment is to determine the components that produce the best model.
        *       Multiple trials are performed, each one isolating and measuring the impact of a change to one
        *       or more inputs, while keeping the remaining inputs constant.</p>
        *          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
        *       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
        *       must use the logging APIs provided by the SDK.</p>
        *          <p>You can add tags to experiments, trials, trial components and then use the <a>Search</a> API to search for the tags.</p>
        *          <p>To add a description to an experiment, specify the optional <code>Description</code>
        *       parameter. To add a description later, or to change the description, call the <a>UpdateExperiment</a> API.</p>
        *          <p>To get a list of all your experiments, call the <a>ListExperiments</a> API. To
        *       view an experiment's properties, call the <a>DescribeExperiment</a> API. To get a
        *       list of all the trials associated with an experiment, call the <a>ListTrials</a>
        *       API. To create a trial call the <a>CreateTrial</a> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateExperimentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateExperimentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateExperimentCommandInput} for command's `input` shape.
        * @see {@link CreateExperimentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateExperimentCommand extends $Command<CreateExperimentCommandInput, CreateExperimentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateExperimentCommandInput;
            constructor(input: CreateExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateExperimentCommandInput, CreateExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateFeatureGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFeatureGroupRequest, CreateFeatureGroupResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateFeatureGroupCommandInput extends CreateFeatureGroupRequest {
    }
    export interface CreateFeatureGroupCommandOutput extends CreateFeatureGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of
        *             <code>Features</code> defined in the <code>FeatureStore</code> to describe a
        *             <code>Record</code>. </p>
        *          <p>The <code>FeatureGroup</code> defines the schema and features contained in the
        *          FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of
        *             <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an
        *             <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code>
        *          and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Web Services service quotas</a> to see
        *          the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p>
        *          <important>
        *             <p>You must include at least one of <code>OnlineStoreConfig</code> and
        *                <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateFeatureGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateFeatureGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateFeatureGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFeatureGroupCommandInput} for command's `input` shape.
        * @see {@link CreateFeatureGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateFeatureGroupCommand extends $Command<CreateFeatureGroupCommandInput, CreateFeatureGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateFeatureGroupCommandInput;
            constructor(input: CreateFeatureGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFeatureGroupCommandInput, CreateFeatureGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateFlowDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFlowDefinitionRequest, CreateFlowDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateFlowDefinitionCommandInput extends CreateFlowDefinitionRequest {
    }
    export interface CreateFlowDefinitionCommandOutput extends CreateFlowDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a flow definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateFlowDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateFlowDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateFlowDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFlowDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateFlowDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateFlowDefinitionCommand extends $Command<CreateFlowDefinitionCommandInput, CreateFlowDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateFlowDefinitionCommandInput;
            constructor(input: CreateFlowDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFlowDefinitionCommandInput, CreateFlowDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateHumanTaskUiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateHumanTaskUiRequest, CreateHumanTaskUiResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateHumanTaskUiCommandInput extends CreateHumanTaskUiRequest {
    }
    export interface CreateHumanTaskUiCommandOutput extends CreateHumanTaskUiResponse, __MetadataBearer {
    }
    /**
        * <p>Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateHumanTaskUiCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateHumanTaskUiCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateHumanTaskUiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateHumanTaskUiCommandInput} for command's `input` shape.
        * @see {@link CreateHumanTaskUiCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateHumanTaskUiCommand extends $Command<CreateHumanTaskUiCommandInput, CreateHumanTaskUiCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateHumanTaskUiCommandInput;
            constructor(input: CreateHumanTaskUiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHumanTaskUiCommandInput, CreateHumanTaskUiCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateHyperParameterTuningJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateHyperParameterTuningJobRequest, CreateHyperParameterTuningJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateHyperParameterTuningJobCommandInput extends CreateHyperParameterTuningJobRequest {
    }
    export interface CreateHyperParameterTuningJobCommandOutput extends CreateHyperParameterTuningJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version
        *             of a model by running many training jobs on your dataset using the algorithm you choose
        *             and values for hyperparameters within ranges that you specify. It then chooses the
        *             hyperparameter values that result in a model that performs the best, as measured by an
        *             objective metric that you choose.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateHyperParameterTuningJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateHyperParameterTuningJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateHyperParameterTuningJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateHyperParameterTuningJobCommandInput} for command's `input` shape.
        * @see {@link CreateHyperParameterTuningJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateHyperParameterTuningJobCommand extends $Command<CreateHyperParameterTuningJobCommandInput, CreateHyperParameterTuningJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateHyperParameterTuningJobCommandInput;
            constructor(input: CreateHyperParameterTuningJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHyperParameterTuningJobCommandInput, CreateHyperParameterTuningJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateImageRequest, CreateImageResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateImageCommandInput extends CreateImageRequest {
    }
    export interface CreateImageCommandOutput extends CreateImageResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image
        *         version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see
        *         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateImageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateImageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateImageCommandInput} for command's `input` shape.
        * @see {@link CreateImageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateImageCommand extends $Command<CreateImageCommandInput, CreateImageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateImageCommandInput;
            constructor(input: CreateImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateImageCommandInput, CreateImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateImageVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateImageVersionRequest, CreateImageVersionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateImageVersionCommandInput extends CreateImageVersionRequest {
    }
    export interface CreateImageVersionCommandOutput extends CreateImageVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a version of the SageMaker image specified by <code>ImageName</code>. The version
        *         represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateImageVersionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateImageVersionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateImageVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateImageVersionCommandInput} for command's `input` shape.
        * @see {@link CreateImageVersionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateImageVersionCommand extends $Command<CreateImageVersionCommandInput, CreateImageVersionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateImageVersionCommandInput;
            constructor(input: CreateImageVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateImageVersionCommandInput, CreateImageVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateInferenceRecommendationsJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateInferenceRecommendationsJobRequest, CreateInferenceRecommendationsJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateInferenceRecommendationsJobCommandInput extends CreateInferenceRecommendationsJobRequest {
    }
    export interface CreateInferenceRecommendationsJobCommandOutput extends CreateInferenceRecommendationsJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a recommendation job. You can create either an instance
        *           recommendation or load test job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateInferenceRecommendationsJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateInferenceRecommendationsJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateInferenceRecommendationsJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateInferenceRecommendationsJobCommandInput} for command's `input` shape.
        * @see {@link CreateInferenceRecommendationsJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateInferenceRecommendationsJobCommand extends $Command<CreateInferenceRecommendationsJobCommandInput, CreateInferenceRecommendationsJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateInferenceRecommendationsJobCommandInput;
            constructor(input: CreateInferenceRecommendationsJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateInferenceRecommendationsJobCommandInput, CreateInferenceRecommendationsJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateLabelingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLabelingJobRequest, CreateLabelingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateLabelingJobCommandInput extends CreateLabelingJobRequest {
    }
    export interface CreateLabelingJobCommandOutput extends CreateLabelingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a job that uses workers to label the data objects in your input dataset. You
        *             can use the labeled data to train machine learning models. </p>
        *         <p>You can select your workforce from one of three providers:</p>
        *         <ul>
        *             <li>
        *                 <p>A private workforce that you create. It can include employees, contractors,
        *                     and outside experts. Use a private workforce when want the data to stay within
        *                     your organization or when a specific set of skills is required.</p>
        *             </li>
        *             <li>
        *                 <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide
        *                     expertise in specific areas. </p>
        *             </li>
        *             <li>
        *                 <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it
        *                     should only be used for public data or data that has been stripped of any
        *                     personally identifiable information.</p>
        *             </li>
        *          </ul>
        *         <p>You can also use <i>automated data labeling</i> to reduce the number of
        *             data objects that need to be labeled by a human. Automated data labeling uses
        *                 <i>active learning</i> to determine if a data object can be labeled by
        *             machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using
        *                 Automated Data Labeling</a>.</p>
        *         <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a
        *                 <i>manifest file</i> that describes the location of each object. For
        *             more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p>
        *         <p>The output can be used as the manifest file for another labeling job or as training
        *             data for your machine learning models.</p>
        *         <p>You can use this operation to create a static labeling job or a streaming labeling
        *             job. A static labeling job stops if all data objects in the input manifest file
        *             identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job
        *             runs perpetually until it is manually stopped, or remains idle for 10 days. You can send
        *             new data objects to an active (<code>InProgress</code>) streaming labeling job in real
        *             time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job
        *                 (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming
        *             labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling
        *                 Job</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateLabelingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateLabelingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateLabelingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLabelingJobCommandInput} for command's `input` shape.
        * @see {@link CreateLabelingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateLabelingJobCommand extends $Command<CreateLabelingJobCommandInput, CreateLabelingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateLabelingJobCommandInput;
            constructor(input: CreateLabelingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLabelingJobCommandInput, CreateLabelingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelBiasJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateModelBiasJobDefinitionRequest, CreateModelBiasJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateModelBiasJobDefinitionCommandInput extends CreateModelBiasJobDefinitionRequest {
    }
    export interface CreateModelBiasJobDefinitionCommandOutput extends CreateModelBiasJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the definition for a model bias job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateModelBiasJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateModelBiasJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateModelBiasJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelBiasJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateModelBiasJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateModelBiasJobDefinitionCommand extends $Command<CreateModelBiasJobDefinitionCommandInput, CreateModelBiasJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateModelBiasJobDefinitionCommandInput;
            constructor(input: CreateModelBiasJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelBiasJobDefinitionCommandInput, CreateModelBiasJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateModelInput, CreateModelOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateModelCommandInput extends CreateModelInput {
    }
    export interface CreateModelCommandOutput extends CreateModelOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a model in SageMaker. In the request, you name the model and describe a primary
        *             container. For the primary container, you specify the Docker image that
        *             contains inference code, artifacts (from prior training), and a custom environment map
        *             that the inference code uses when you deploy the model for predictions.</p>
        *         <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch
        *             transform job.</p>
        *         <p>To host your model, you create an endpoint configuration with the
        *                 <code>CreateEndpointConfig</code> API, and then create an endpoint with the
        *                 <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you
        *             defined for the model in the hosting environment. </p>
        *         <p>For an example that calls this method when deploying a model to SageMaker hosting services,
        *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model">Create a Model (Amazon Web Services SDK for Python (Boto
        *             3)).</a>
        *          </p>
        *         <p>To run a batch transform using your model, you start a job with the
        *                 <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get
        *             inferences which are then saved to a specified S3 location.</p>
        *         <p>In the request, you also provide an IAM role that SageMaker can assume to access model
        *             artifacts and docker image for deployment on ML compute hosting instances or for batch
        *             transform jobs. In addition, you also use the IAM role to manage permissions the
        *             inference code needs. For example, if the inference code access any other Amazon Web Services resources,
        *             you grant necessary permissions via this role.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateModelCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateModelCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelCommandInput} for command's `input` shape.
        * @see {@link CreateModelCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateModelCommand extends $Command<CreateModelCommandInput, CreateModelCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateModelCommandInput;
            constructor(input: CreateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelCommandInput, CreateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelExplainabilityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateModelExplainabilityJobDefinitionRequest, CreateModelExplainabilityJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateModelExplainabilityJobDefinitionCommandInput extends CreateModelExplainabilityJobDefinitionRequest {
    }
    export interface CreateModelExplainabilityJobDefinitionCommandOutput extends CreateModelExplainabilityJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the definition for a model explainability job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateModelExplainabilityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateModelExplainabilityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateModelExplainabilityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelExplainabilityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateModelExplainabilityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateModelExplainabilityJobDefinitionCommand extends $Command<CreateModelExplainabilityJobDefinitionCommandInput, CreateModelExplainabilityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateModelExplainabilityJobDefinitionCommandInput;
            constructor(input: CreateModelExplainabilityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelExplainabilityJobDefinitionCommandInput, CreateModelExplainabilityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelPackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateModelPackageInput, CreateModelPackageOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateModelPackageCommandInput extends CreateModelPackageInput {
    }
    export interface CreateModelPackageCommandOutput extends CreateModelPackageOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services
        *             Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to
        *             model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
        *         <p>To create a model package by specifying a Docker container that contains your
        *             inference code and the Amazon S3 location of your model artifacts, provide values for
        *             <code>InferenceSpecification</code>. To create a model from an algorithm resource
        *             that you created or subscribed to in Amazon Web Services Marketplace, provide a value for
        *             <code>SourceAlgorithmSpecification</code>.</p>
        *         <note>
        *             <p>There are two types of model packages:</p>
        *             <ul>
        *                <li>
        *                     <p>Versioned - a model that is part of a model group in the model
        *                         registry.</p>
        *                 </li>
        *                <li>
        *                     <p>Unversioned - a model package that is not part of a model group.</p>
        *                 </li>
        *             </ul>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateModelPackageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateModelPackageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateModelPackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelPackageCommandInput} for command's `input` shape.
        * @see {@link CreateModelPackageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateModelPackageCommand extends $Command<CreateModelPackageCommandInput, CreateModelPackageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateModelPackageCommandInput;
            constructor(input: CreateModelPackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelPackageCommandInput, CreateModelPackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelPackageGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateModelPackageGroupInput, CreateModelPackageGroupOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateModelPackageGroupCommandInput extends CreateModelPackageGroupInput {
    }
    export interface CreateModelPackageGroupCommandOutput extends CreateModelPackageGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a model group. A model group contains a group of model versions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateModelPackageGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateModelPackageGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateModelPackageGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelPackageGroupCommandInput} for command's `input` shape.
        * @see {@link CreateModelPackageGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateModelPackageGroupCommand extends $Command<CreateModelPackageGroupCommandInput, CreateModelPackageGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateModelPackageGroupCommandInput;
            constructor(input: CreateModelPackageGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelPackageGroupCommandInput, CreateModelPackageGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelQualityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateModelQualityJobDefinitionRequest, CreateModelQualityJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateModelQualityJobDefinitionCommandInput extends CreateModelQualityJobDefinitionRequest {
    }
    export interface CreateModelQualityJobDefinitionCommandOutput extends CreateModelQualityJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a definition for a job that monitors model quality and drift. For information
        *          about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateModelQualityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateModelQualityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateModelQualityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelQualityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateModelQualityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateModelQualityJobDefinitionCommand extends $Command<CreateModelQualityJobDefinitionCommandInput, CreateModelQualityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateModelQualityJobDefinitionCommandInput;
            constructor(input: CreateModelQualityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelQualityJobDefinitionCommandInput, CreateModelQualityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateMonitoringScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateMonitoringScheduleRequest, CreateMonitoringScheduleResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateMonitoringScheduleCommandInput extends CreateMonitoringScheduleRequest {
    }
    export interface CreateMonitoringScheduleCommandOutput extends CreateMonitoringScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data
        *          captured for an Amazon SageMaker Endoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateMonitoringScheduleCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateMonitoringScheduleCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateMonitoringScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMonitoringScheduleCommandInput} for command's `input` shape.
        * @see {@link CreateMonitoringScheduleCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateMonitoringScheduleCommand extends $Command<CreateMonitoringScheduleCommandInput, CreateMonitoringScheduleCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateMonitoringScheduleCommandInput;
            constructor(input: CreateMonitoringScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMonitoringScheduleCommandInput, CreateMonitoringScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateNotebookInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateNotebookInstanceInput, CreateNotebookInstanceOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateNotebookInstanceCommandInput extends CreateNotebookInstanceInput {
    }
    export interface CreateNotebookInstanceCommandOutput extends CreateNotebookInstanceOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML)
        *             compute instance running on a Jupyter notebook. </p>
        *         <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute
        *             instance that you want to run. SageMaker launches the instance, installs common libraries
        *             that you can use to explore datasets for model training, and attaches an ML storage
        *             volume to the notebook instance. </p>
        *         <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to
        *             use SageMaker with a specific algorithm or with a machine learning framework. </p>
        *         <p>After receiving the request, SageMaker does the following:</p>
        *         <ol>
        *             <li>
        *                 <p>Creates a network interface in the SageMaker VPC.</p>
        *             </li>
        *             <li>
        *                 <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network
        *                     interface in your own VPC, which is inferred from the subnet ID that you provide
        *                     in the input. When creating this network interface, SageMaker attaches the security
        *                     group that you specified in the request to the network interface that it creates
        *                     in your VPC.</p>
        *
        *             </li>
        *             <li>
        *                 <p>Launches an EC2 instance of the type specified in the request in the SageMaker
        *                     VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both
        *                     network interfaces when launching this instance. This enables inbound traffic
        *                     from your own VPC to the notebook instance, assuming that the security groups
        *                     allow it.</p>
        *             </li>
        *          </ol>
        *
        *         <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN).
        *             You can't change the name of a notebook instance after you create it.</p>
        *         <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and
        *             work in Jupyter notebooks. For example, you can write code to explore a dataset that you
        *             can use for model training, train a model, host models by creating SageMaker endpoints, and
        *             validate hosted models. </p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateNotebookInstanceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateNotebookInstanceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateNotebookInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNotebookInstanceCommandInput} for command's `input` shape.
        * @see {@link CreateNotebookInstanceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateNotebookInstanceCommand extends $Command<CreateNotebookInstanceCommandInput, CreateNotebookInstanceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateNotebookInstanceCommandInput;
            constructor(input: CreateNotebookInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNotebookInstanceCommandInput, CreateNotebookInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateNotebookInstanceLifecycleConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateNotebookInstanceLifecycleConfigInput, CreateNotebookInstanceLifecycleConfigOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateNotebookInstanceLifecycleConfigCommandInput extends CreateNotebookInstanceLifecycleConfigInput {
    }
    export interface CreateNotebookInstanceLifecycleConfigCommandOutput extends CreateNotebookInstanceLifecycleConfigOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a lifecycle configuration that you can associate with a notebook instance. A
        *                 <i>lifecycle configuration</i> is a collection of shell scripts that
        *             run when you create or start a notebook instance.</p>
        *         <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
        *         <p>The value of the <code>$PATH</code> environment variable that is available to both
        *             scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
        *         <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group
        *                 <code>/aws/sagemaker/NotebookInstances</code> in log stream
        *                 <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
        *         <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs
        *             for longer than 5 minutes, it fails and the notebook instance is not created or
        *             started.</p>
        *         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
        *                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateNotebookInstanceLifecycleConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateNotebookInstanceLifecycleConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateNotebookInstanceLifecycleConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNotebookInstanceLifecycleConfigCommandInput} for command's `input` shape.
        * @see {@link CreateNotebookInstanceLifecycleConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateNotebookInstanceLifecycleConfigCommand extends $Command<CreateNotebookInstanceLifecycleConfigCommandInput, CreateNotebookInstanceLifecycleConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateNotebookInstanceLifecycleConfigCommandInput;
            constructor(input: CreateNotebookInstanceLifecycleConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNotebookInstanceLifecycleConfigCommandInput, CreateNotebookInstanceLifecycleConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreatePipelineRequest, CreatePipelineResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreatePipelineCommandInput extends CreatePipelineRequest {
    }
    export interface CreatePipelineCommandOutput extends CreatePipelineResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a pipeline using a JSON pipeline definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreatePipelineCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreatePipelineCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreatePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePipelineCommandInput} for command's `input` shape.
        * @see {@link CreatePipelineCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreatePipelineCommand extends $Command<CreatePipelineCommandInput, CreatePipelineCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreatePipelineCommandInput;
            constructor(input: CreatePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePipelineCommandInput, CreatePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePresignedDomainUrlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreatePresignedDomainUrlRequest, CreatePresignedDomainUrlResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreatePresignedDomainUrlCommandInput extends CreatePresignedDomainUrlRequest {
    }
    export interface CreatePresignedDomainUrlCommandOutput extends CreatePresignedDomainUrlResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a URL for a specified UserProfile in a Domain.  When accessed in a web browser,
        *        the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of
        *        the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume.
        *        This operation can only be called when the authentication mode equals IAM.
        *    </p>
        *          <p>The IAM role or user used to call this API defines the permissions to access the app. Once
        *       the presigned URL is created, no additional permission is required to access this URL. IAM
        *          authorization policies for this API are also enforced for every HTTP request and WebSocket
        *          frame that attempts to connect to the app.</p>
        *          <p>You can restrict access to this API and to the
        *       URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more
        *       information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a>
        *          .</p>
        *          <note>
        *             <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you
        *           are directed to the Amazon Web Services console sign-in page.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreatePresignedDomainUrlCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreatePresignedDomainUrlCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreatePresignedDomainUrlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePresignedDomainUrlCommandInput} for command's `input` shape.
        * @see {@link CreatePresignedDomainUrlCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreatePresignedDomainUrlCommand extends $Command<CreatePresignedDomainUrlCommandInput, CreatePresignedDomainUrlCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreatePresignedDomainUrlCommandInput;
            constructor(input: CreatePresignedDomainUrlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePresignedDomainUrlCommandInput, CreatePresignedDomainUrlCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePresignedNotebookInstanceUrlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreatePresignedNotebookInstanceUrlInput, CreatePresignedNotebookInstanceUrlOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreatePresignedNotebookInstanceUrlCommandInput extends CreatePresignedNotebookInstanceUrlInput {
    }
    export interface CreatePresignedNotebookInstanceUrlCommandOutput extends CreatePresignedNotebookInstanceUrlOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a URL that you can use to connect to the Jupyter server from a notebook
        *             instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook
        *             instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook
        *             instance. The console uses this API to get the URL and show the page.</p>
        *         <p> The IAM role or user used to call this API defines the permissions to access the
        *             notebook instance. Once the presigned URL is created, no additional permission is
        *             required to access this URL. IAM authorization policies for this API are also enforced
        *             for every HTTP request and WebSocket frame that attempts to connect to the notebook
        *             instance.</p>
        *         <p>You can restrict access to this API and to the URL that it returns to a list of IP
        *             addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the
        *                 <code>aws:SourceIP</code> condition context key to specify the list of IP addresses
        *             that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p>
        *         <note>
        *             <p>The URL that you get from a call to <a>CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If
        *                 you try to use the URL after the 5-minute limit expires, you are directed to the
        *                 Amazon Web Services console sign-in page.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreatePresignedNotebookInstanceUrlCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreatePresignedNotebookInstanceUrlCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreatePresignedNotebookInstanceUrlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePresignedNotebookInstanceUrlCommandInput} for command's `input` shape.
        * @see {@link CreatePresignedNotebookInstanceUrlCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreatePresignedNotebookInstanceUrlCommand extends $Command<CreatePresignedNotebookInstanceUrlCommandInput, CreatePresignedNotebookInstanceUrlCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreatePresignedNotebookInstanceUrlCommandInput;
            constructor(input: CreatePresignedNotebookInstanceUrlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePresignedNotebookInstanceUrlCommandInput, CreatePresignedNotebookInstanceUrlCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateProcessingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateProcessingJobRequest, CreateProcessingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateProcessingJobCommandInput extends CreateProcessingJobRequest {
    }
    export interface CreateProcessingJobCommandOutput extends CreateProcessingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a processing job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateProcessingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateProcessingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateProcessingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProcessingJobCommandInput} for command's `input` shape.
        * @see {@link CreateProcessingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateProcessingJobCommand extends $Command<CreateProcessingJobCommandInput, CreateProcessingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateProcessingJobCommandInput;
            constructor(input: CreateProcessingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProcessingJobCommandInput, CreateProcessingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateProjectInput, CreateProjectOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateProjectCommandInput extends CreateProjectInput {
    }
    export interface CreateProjectCommandOutput extends CreateProjectOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a machine learning (ML) project that can contain one or more templates that set
        *             up an ML pipeline from training to deploying an approved model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateProjectCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateProjectCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProjectCommandInput} for command's `input` shape.
        * @see {@link CreateProjectCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateProjectCommand extends $Command<CreateProjectCommandInput, CreateProjectCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateProjectCommandInput;
            constructor(input: CreateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProjectCommandInput, CreateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateStudioLifecycleConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateStudioLifecycleConfigRequest, CreateStudioLifecycleConfigResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateStudioLifecycleConfigCommandInput extends CreateStudioLifecycleConfigRequest {
    }
    export interface CreateStudioLifecycleConfigCommandOutput extends CreateStudioLifecycleConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new Studio Lifecycle Configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateStudioLifecycleConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateStudioLifecycleConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateStudioLifecycleConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStudioLifecycleConfigCommandInput} for command's `input` shape.
        * @see {@link CreateStudioLifecycleConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateStudioLifecycleConfigCommand extends $Command<CreateStudioLifecycleConfigCommandInput, CreateStudioLifecycleConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateStudioLifecycleConfigCommandInput;
            constructor(input: CreateStudioLifecycleConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStudioLifecycleConfigCommandInput, CreateStudioLifecycleConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrainingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTrainingJobRequest, CreateTrainingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateTrainingJobCommandInput extends CreateTrainingJobRequest {
    }
    export interface CreateTrainingJobCommandOutput extends CreateTrainingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a model training job. After training completes, SageMaker saves the resulting
        *             model artifacts to an Amazon S3 location that you specify. </p>
        *         <p>If you choose to host your model using SageMaker hosting services, you can use the
        *             resulting model artifacts as part of the model. You can also use the artifacts in a
        *             machine learning service other than SageMaker, provided that you know how to use them for
        *             inference.
        *         </p>
        *         <p>In the request body, you provide the following: </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>AlgorithmSpecification</code> - Identifies the training algorithm to
        *                     use.
        *                     </p>
        *             </li>
        *             <li>
        *                 <p>
        *                     <code>HyperParameters</code> - Specify these algorithm-specific parameters to
        *                     enable the estimation of model parameters during training. Hyperparameters can
        *                     be tuned to optimize this learning process. For a list of hyperparameters for
        *                     each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>InputDataConfig</code> - Describes the training dataset and the Amazon S3,
        *                     EFS, or FSx location where it is stored.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want
        *                     SageMaker to save the results of model training. </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ResourceConfig</code> - Identifies the resources, ML compute
        *                     instances, and ML storage volumes to deploy for model training. In distributed
        *                     training, you specify more than one instance. </p>
        *
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine
        *                     learning models by up to 80% by using Amazon EC2 Spot instances. For more
        *                     information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot
        *                         Training</a>. </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on
        *                     your behalf during model training.
        *
        *                     You must grant this role the necessary permissions so that SageMaker can successfully
        *                     complete model training. </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>StoppingCondition</code> - To help cap training costs, use
        *                         <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use
        *                         <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot
        *                     training job has to complete. </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Environment</code> - The environment variables to set in the Docker
        *                     container.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RetryStrategy</code> - The number of times to retry the job when the job
        *                     fails due to an <code>InternalServerError</code>.</p>
        *             </li>
        *          </ul>
        *         <p> For more information about SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateTrainingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateTrainingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateTrainingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTrainingJobCommandInput} for command's `input` shape.
        * @see {@link CreateTrainingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateTrainingJobCommand extends $Command<CreateTrainingJobCommandInput, CreateTrainingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateTrainingJobCommandInput;
            constructor(input: CreateTrainingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTrainingJobCommandInput, CreateTrainingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTransformJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTransformJobRequest, CreateTransformJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateTransformJobCommandInput extends CreateTransformJobRequest {
    }
    export interface CreateTransformJobCommandOutput extends CreateTransformJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a transform job. A transform job uses a trained model to get inferences on a
        *             dataset and saves these results to an Amazon S3 location that you specify.</p>
        *         <p>To perform batch transformations, you create a transform job and use the data that you
        *             have readily available.</p>
        *         <p>In the request body, you provide the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>TransformJobName</code> - Identifies the transform job. The name must be
        *                     unique within an Amazon Web Services Region in an Amazon Web Services account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ModelName</code> - Identifies the model to use. <code>ModelName</code>
        *                     must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services
        * 		    account. For information on creating a model, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>TransformInput</code> - Describes the dataset to be transformed and the
        *                     Amazon S3 location where it is stored.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>TransformOutput</code> - Identifies the Amazon S3 location where you want
        *                     Amazon SageMaker to save the results from the transform job.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>TransformResources</code> - Identifies the ML compute instances for the
        *                     transform job.</p>
        *             </li>
        *          </ul>
        *         <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch
        *                 Transform</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateTransformJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateTransformJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateTransformJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTransformJobCommandInput} for command's `input` shape.
        * @see {@link CreateTransformJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateTransformJobCommand extends $Command<CreateTransformJobCommandInput, CreateTransformJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateTransformJobCommandInput;
            constructor(input: CreateTransformJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTransformJobCommandInput, CreateTransformJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTrialRequest, CreateTrialResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateTrialCommandInput extends CreateTrialRequest {
    }
    export interface CreateTrialCommandOutput extends CreateTrialResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called
        *         <i>trial components</i> that produce a machine learning model. A trial is part
        *       of a single SageMaker <i>experiment</i>.</p>
        *          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
        *       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
        *       must use the logging APIs provided by the SDK.</p>
        *          <p>You can add tags to a trial and then use the <a>Search</a> API to search for
        *       the tags.</p>
        *          <p>To get a list of all your trials, call the <a>ListTrials</a> API. To view a
        *       trial's properties, call the <a>DescribeTrial</a> API. To create a trial component,
        *       call the <a>CreateTrialComponent</a> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateTrialCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateTrialCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateTrialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTrialCommandInput} for command's `input` shape.
        * @see {@link CreateTrialCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateTrialCommand extends $Command<CreateTrialCommandInput, CreateTrialCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateTrialCommandInput;
            constructor(input: CreateTrialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTrialCommandInput, CreateTrialCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrialComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTrialComponentRequest, CreateTrialComponentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateTrialComponentCommandInput extends CreateTrialComponentRequest {
    }
    export interface CreateTrialComponentCommandOutput extends CreateTrialComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <i>trial component</i>, which is a stage of a machine learning
        *         <i>trial</i>. A trial is composed of one or more trial components. A trial
        *       component can be used in multiple trials.</p>
        *          <p>Trial components include pre-processing jobs, training jobs, and batch transform
        *       jobs.</p>
        *          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
        *       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
        *       must use the logging APIs provided by the SDK.</p>
        *          <p>You can add tags to a trial component and then use the <a>Search</a> API to
        *       search for the tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateTrialComponentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateTrialComponentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateTrialComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTrialComponentCommandInput} for command's `input` shape.
        * @see {@link CreateTrialComponentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateTrialComponentCommand extends $Command<CreateTrialComponentCommandInput, CreateTrialComponentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateTrialComponentCommandInput;
            constructor(input: CreateTrialComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTrialComponentCommandInput, CreateTrialComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateUserProfileRequest, CreateUserProfileResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateUserProfileCommandInput extends CreateUserProfileRequest {
    }
    export interface CreateUserProfileCommandOutput extends CreateUserProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a user profile. A user profile represents a single user within a domain, and is
        *      the main way to reference a "person" for the purposes of sharing, reporting, and other
        *      user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an
        *      administrator invites a person by email or imports them from SSO, a user profile is
        *      automatically created. A user profile is the primary holder of settings for an individual
        *      user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
        *    </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateUserProfileCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateUserProfileCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserProfileCommandInput} for command's `input` shape.
        * @see {@link CreateUserProfileCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateUserProfileCommand extends $Command<CreateUserProfileCommandInput, CreateUserProfileCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateUserProfileCommandInput;
            constructor(input: CreateUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserProfileCommandInput, CreateUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateWorkforceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorkforceRequest, CreateWorkforceResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateWorkforceCommandInput extends CreateWorkforceRequest {
    }
    export interface CreateWorkforceCommandOutput extends CreateWorkforceResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to create a workforce. This operation will return an error
        *           if a workforce already exists in the Amazon Web Services Region that you specify. You can only
        *           create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p>
        *
        *         <p>If you want to create a new workforce in an Amazon Web Services Region where
        *       a workforce already exists, use the  API
        *       operation to delete the existing workforce and then use <code>CreateWorkforce</code>
        *       to create a new workforce.</p>
        *
        *          <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool
        *     in <code>CognitoConfig</code>.
        *     You can also create an Amazon Cognito workforce using the Amazon SageMaker console.
        *     For more information, see
        *       <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">
        *       Create a Private Workforce (Amazon Cognito)</a>.</p>
        *
        *          <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP
        *       configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i>
        *       because groups are used by Ground Truth and Amazon A2I to create work teams.
        *       For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html">
        *       Create a Private Workforce (OIDC IdP)</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateWorkforceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateWorkforceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateWorkforceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkforceCommandInput} for command's `input` shape.
        * @see {@link CreateWorkforceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateWorkforceCommand extends $Command<CreateWorkforceCommandInput, CreateWorkforceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateWorkforceCommandInput;
            constructor(input: CreateWorkforceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkforceCommandInput, CreateWorkforceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateWorkteamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorkteamRequest, CreateWorkteamResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface CreateWorkteamCommandInput extends CreateWorkteamRequest {
    }
    export interface CreateWorkteamCommandOutput extends CreateWorkteamResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new work team for labeling your data. A work team is defined by one or more
        *             Amazon Cognito user pools. You must first create the user pools before you can create a work
        *             team.</p>
        *         <p>You cannot create more than 25 work teams in an account and region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, CreateWorkteamCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, CreateWorkteamCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new CreateWorkteamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkteamCommandInput} for command's `input` shape.
        * @see {@link CreateWorkteamCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class CreateWorkteamCommand extends $Command<CreateWorkteamCommandInput, CreateWorkteamCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: CreateWorkteamCommandInput;
            constructor(input: CreateWorkteamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkteamCommandInput, CreateWorkteamCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteActionRequest, DeleteActionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteActionCommandInput extends DeleteActionRequest {
    }
    export interface DeleteActionCommandOutput extends DeleteActionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteActionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteActionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteActionCommandInput} for command's `input` shape.
        * @see {@link DeleteActionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteActionCommand extends $Command<DeleteActionCommandInput, DeleteActionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteActionCommandInput;
            constructor(input: DeleteActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteActionCommandInput, DeleteActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAlgorithmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAlgorithmInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteAlgorithmCommandInput extends DeleteAlgorithmInput {
    }
    export interface DeleteAlgorithmCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified algorithm from your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteAlgorithmCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteAlgorithmCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteAlgorithmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAlgorithmCommandInput} for command's `input` shape.
        * @see {@link DeleteAlgorithmCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteAlgorithmCommand extends $Command<DeleteAlgorithmCommandInput, DeleteAlgorithmCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteAlgorithmCommandInput;
            constructor(input: DeleteAlgorithmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAlgorithmCommandInput, DeleteAlgorithmCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAppRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteAppCommandInput extends DeleteAppRequest {
    }
    export interface DeleteAppCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Used to stop and delete an app.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteAppCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteAppCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppCommandInput} for command's `input` shape.
        * @see {@link DeleteAppCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteAppCommand extends $Command<DeleteAppCommandInput, DeleteAppCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteAppCommandInput;
            constructor(input: DeleteAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppCommandInput, DeleteAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAppImageConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAppImageConfigRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteAppImageConfigCommandInput extends DeleteAppImageConfigRequest {
    }
    export interface DeleteAppImageConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an AppImageConfig.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteAppImageConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteAppImageConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteAppImageConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppImageConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteAppImageConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteAppImageConfigCommand extends $Command<DeleteAppImageConfigCommandInput, DeleteAppImageConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteAppImageConfigCommandInput;
            constructor(input: DeleteAppImageConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppImageConfigCommandInput, DeleteAppImageConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteArtifactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteArtifactRequest, DeleteArtifactResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteArtifactCommandInput extends DeleteArtifactRequest {
    }
    export interface DeleteArtifactCommandOutput extends DeleteArtifactResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be
        *         specified.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteArtifactCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteArtifactCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteArtifactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteArtifactCommandInput} for command's `input` shape.
        * @see {@link DeleteArtifactCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteArtifactCommand extends $Command<DeleteArtifactCommandInput, DeleteArtifactCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteArtifactCommandInput;
            constructor(input: DeleteArtifactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteArtifactCommandInput, DeleteArtifactCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAssociationRequest, DeleteAssociationResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteAssociationCommandInput extends DeleteAssociationRequest {
    }
    export interface DeleteAssociationCommandOutput extends DeleteAssociationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an association.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteAssociationCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteAssociationCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssociationCommandInput} for command's `input` shape.
        * @see {@link DeleteAssociationCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteAssociationCommand extends $Command<DeleteAssociationCommandInput, DeleteAssociationCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteAssociationCommandInput;
            constructor(input: DeleteAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssociationCommandInput, DeleteAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteCodeRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCodeRepositoryInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteCodeRepositoryCommandInput extends DeleteCodeRepositoryInput {
    }
    export interface DeleteCodeRepositoryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified Git repository from your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteCodeRepositoryCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteCodeRepositoryCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteCodeRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCodeRepositoryCommandInput} for command's `input` shape.
        * @see {@link DeleteCodeRepositoryCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteCodeRepositoryCommand extends $Command<DeleteCodeRepositoryCommandInput, DeleteCodeRepositoryCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteCodeRepositoryCommandInput;
            constructor(input: DeleteCodeRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCodeRepositoryCommandInput, DeleteCodeRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteContextCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteContextRequest, DeleteContextResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteContextCommandInput extends DeleteContextRequest {
    }
    export interface DeleteContextCommandOutput extends DeleteContextResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an context.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteContextCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteContextCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteContextCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteContextCommandInput} for command's `input` shape.
        * @see {@link DeleteContextCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteContextCommand extends $Command<DeleteContextCommandInput, DeleteContextCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteContextCommandInput;
            constructor(input: DeleteContextCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteContextCommandInput, DeleteContextCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDataQualityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDataQualityJobDefinitionRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteDataQualityJobDefinitionCommandInput extends DeleteDataQualityJobDefinitionRequest {
    }
    export interface DeleteDataQualityJobDefinitionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a data quality monitoring job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteDataQualityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteDataQualityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteDataQualityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataQualityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteDataQualityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteDataQualityJobDefinitionCommand extends $Command<DeleteDataQualityJobDefinitionCommandInput, DeleteDataQualityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteDataQualityJobDefinitionCommandInput;
            constructor(input: DeleteDataQualityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataQualityJobDefinitionCommandInput, DeleteDataQualityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDeviceFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDeviceFleetRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteDeviceFleetCommandInput extends DeleteDeviceFleetRequest {
    }
    export interface DeleteDeviceFleetCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteDeviceFleetCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteDeviceFleetCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteDeviceFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeviceFleetCommandInput} for command's `input` shape.
        * @see {@link DeleteDeviceFleetCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteDeviceFleetCommand extends $Command<DeleteDeviceFleetCommandInput, DeleteDeviceFleetCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteDeviceFleetCommandInput;
            constructor(input: DeleteDeviceFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeviceFleetCommandInput, DeleteDeviceFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDomainRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteDomainCommandInput extends DeleteDomainRequest {
    }
    export interface DeleteDomainCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Used to delete a domain.
        *      If you onboarded with IAM mode, you will need to delete your domain to onboard again using SSO.
        *      Use with caution. All of the members of the domain will lose access to their EFS volume,
        *      including data, notebooks, and other artifacts.
        *    </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteDomainCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteDomainCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteDomainCommand extends $Command<DeleteDomainCommandInput, DeleteDomainCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteDomainCommandInput;
            constructor(input: DeleteDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainCommandInput, DeleteDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEdgeDeploymentPlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteEdgeDeploymentPlanRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteEdgeDeploymentPlanCommandInput extends DeleteEdgeDeploymentPlanRequest {
    }
    export interface DeleteEdgeDeploymentPlanCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteEdgeDeploymentPlanCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteEdgeDeploymentPlanCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteEdgeDeploymentPlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEdgeDeploymentPlanCommandInput} for command's `input` shape.
        * @see {@link DeleteEdgeDeploymentPlanCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteEdgeDeploymentPlanCommand extends $Command<DeleteEdgeDeploymentPlanCommandInput, DeleteEdgeDeploymentPlanCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteEdgeDeploymentPlanCommandInput;
            constructor(input: DeleteEdgeDeploymentPlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEdgeDeploymentPlanCommandInput, DeleteEdgeDeploymentPlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEdgeDeploymentStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteEdgeDeploymentStageRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteEdgeDeploymentStageCommandInput extends DeleteEdgeDeploymentStageRequest {
    }
    export interface DeleteEdgeDeploymentStageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete a stage in an edge deployment plan if (and only if) the stage is inactive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteEdgeDeploymentStageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteEdgeDeploymentStageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteEdgeDeploymentStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEdgeDeploymentStageCommandInput} for command's `input` shape.
        * @see {@link DeleteEdgeDeploymentStageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteEdgeDeploymentStageCommand extends $Command<DeleteEdgeDeploymentStageCommandInput, DeleteEdgeDeploymentStageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteEdgeDeploymentStageCommandInput;
            constructor(input: DeleteEdgeDeploymentStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEdgeDeploymentStageCommandInput, DeleteEdgeDeploymentStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteEndpointInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteEndpointCommandInput extends DeleteEndpointInput {
    }
    export interface DeleteEndpointCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the
        *             endpoint was created. </p>
        *         <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't
        *             need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p>
        *         <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants.
        *             You might still see these resources in your account for a few minutes after deleting your endpoint.
        *             Do not delete or revoke the permissions for your
        *             <code>
        *                <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a>
        *             </code>,
        *             otherwise SageMaker cannot delete these resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteEndpointCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteEndpointCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteEndpointCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteEndpointCommand extends $Command<DeleteEndpointCommandInput, DeleteEndpointCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteEndpointCommandInput;
            constructor(input: DeleteEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEndpointCommandInput, DeleteEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEndpointConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteEndpointConfigInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteEndpointConfigCommandInput extends DeleteEndpointConfigInput {
    }
    export interface DeleteEndpointConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API
        *             deletes only the specified configuration. It does not delete endpoints created using the
        *             configuration. </p>
        *         <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
        *             live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations
        *             are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an
        *             endpoint that is active or being created or updated you may lose visibility into the
        *             instance type the endpoint is using. The endpoint must be deleted in order to stop
        *             incurring charges.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteEndpointConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteEndpointConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteEndpointConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEndpointConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteEndpointConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteEndpointConfigCommand extends $Command<DeleteEndpointConfigCommandInput, DeleteEndpointConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteEndpointConfigCommandInput;
            constructor(input: DeleteEndpointConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEndpointConfigCommandInput, DeleteEndpointConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteExperimentRequest, DeleteExperimentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteExperimentCommandInput extends DeleteExperimentRequest {
    }
    export interface DeleteExperimentCommandOutput extends DeleteExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an SageMaker experiment. All trials associated with the experiment must be deleted
        *       first. Use the <a>ListTrials</a> API to get a list of the trials associated with
        *       the experiment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteExperimentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteExperimentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteExperimentCommandInput} for command's `input` shape.
        * @see {@link DeleteExperimentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteExperimentCommand extends $Command<DeleteExperimentCommandInput, DeleteExperimentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteExperimentCommandInput;
            constructor(input: DeleteExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteExperimentCommandInput, DeleteExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteFeatureGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFeatureGroupRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteFeatureGroupCommandInput extends DeleteFeatureGroupRequest {
    }
    export interface DeleteFeatureGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete the <code>FeatureGroup</code> and any data that was written to the
        *             <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from
        *          the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p>
        *          <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue
        *          database and tables that are automatically created for your <code>OfflineStore</code> are
        *          not deleted. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteFeatureGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteFeatureGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteFeatureGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFeatureGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteFeatureGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteFeatureGroupCommand extends $Command<DeleteFeatureGroupCommandInput, DeleteFeatureGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteFeatureGroupCommandInput;
            constructor(input: DeleteFeatureGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFeatureGroupCommandInput, DeleteFeatureGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteFlowDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFlowDefinitionRequest, DeleteFlowDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteFlowDefinitionCommandInput extends DeleteFlowDefinitionRequest {
    }
    export interface DeleteFlowDefinitionCommandOutput extends DeleteFlowDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified flow definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteFlowDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteFlowDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteFlowDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFlowDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteFlowDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteFlowDefinitionCommand extends $Command<DeleteFlowDefinitionCommandInput, DeleteFlowDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteFlowDefinitionCommandInput;
            constructor(input: DeleteFlowDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFlowDefinitionCommandInput, DeleteFlowDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteHumanTaskUiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteHumanTaskUiRequest, DeleteHumanTaskUiResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteHumanTaskUiCommandInput extends DeleteHumanTaskUiRequest {
    }
    export interface DeleteHumanTaskUiCommandOutput extends DeleteHumanTaskUiResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to delete a human task user interface (worker task template).</p>
        *          <p>
        *       To see a list of human task user interfaces
        *       (work task templates) in your account, use .
        *       When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteHumanTaskUiCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteHumanTaskUiCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteHumanTaskUiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteHumanTaskUiCommandInput} for command's `input` shape.
        * @see {@link DeleteHumanTaskUiCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteHumanTaskUiCommand extends $Command<DeleteHumanTaskUiCommandInput, DeleteHumanTaskUiCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteHumanTaskUiCommandInput;
            constructor(input: DeleteHumanTaskUiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteHumanTaskUiCommandInput, DeleteHumanTaskUiCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteImageRequest, DeleteImageResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteImageCommandInput extends DeleteImageRequest {
    }
    export interface DeleteImageCommandOutput extends DeleteImageResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a SageMaker image and all versions of the image. The container images aren't
        *         deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteImageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteImageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteImageCommandInput} for command's `input` shape.
        * @see {@link DeleteImageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteImageCommand extends $Command<DeleteImageCommandInput, DeleteImageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteImageCommandInput;
            constructor(input: DeleteImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteImageCommandInput, DeleteImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteImageVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteImageVersionRequest, DeleteImageVersionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteImageVersionCommandInput extends DeleteImageVersionRequest {
    }
    export interface DeleteImageVersionCommandOutput extends DeleteImageVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a version of a SageMaker image. The container image the version represents isn't
        *         deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteImageVersionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteImageVersionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteImageVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteImageVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteImageVersionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteImageVersionCommand extends $Command<DeleteImageVersionCommandInput, DeleteImageVersionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteImageVersionCommandInput;
            constructor(input: DeleteImageVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteImageVersionCommandInput, DeleteImageVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelBiasJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteModelBiasJobDefinitionRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteModelBiasJobDefinitionCommandInput extends DeleteModelBiasJobDefinitionRequest {
    }
    export interface DeleteModelBiasJobDefinitionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon SageMaker model bias job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteModelBiasJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteModelBiasJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteModelBiasJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelBiasJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteModelBiasJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteModelBiasJobDefinitionCommand extends $Command<DeleteModelBiasJobDefinitionCommandInput, DeleteModelBiasJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteModelBiasJobDefinitionCommandInput;
            constructor(input: DeleteModelBiasJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelBiasJobDefinitionCommandInput, DeleteModelBiasJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteModelInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteModelCommandInput extends DeleteModelInput {
    }
    export interface DeleteModelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that
        *             was created in SageMaker when you called the <code>CreateModel</code> API. It does not
        *             delete model artifacts, inference code, or the IAM role that you specified when
        *             creating the model. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteModelCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteModelCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelCommandInput} for command's `input` shape.
        * @see {@link DeleteModelCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteModelCommand extends $Command<DeleteModelCommandInput, DeleteModelCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteModelCommandInput;
            constructor(input: DeleteModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelCommandInput, DeleteModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelExplainabilityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteModelExplainabilityJobDefinitionRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteModelExplainabilityJobDefinitionCommandInput extends DeleteModelExplainabilityJobDefinitionRequest {
    }
    export interface DeleteModelExplainabilityJobDefinitionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon SageMaker model explainability job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteModelExplainabilityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteModelExplainabilityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteModelExplainabilityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelExplainabilityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteModelExplainabilityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteModelExplainabilityJobDefinitionCommand extends $Command<DeleteModelExplainabilityJobDefinitionCommandInput, DeleteModelExplainabilityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteModelExplainabilityJobDefinitionCommandInput;
            constructor(input: DeleteModelExplainabilityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelExplainabilityJobDefinitionCommandInput, DeleteModelExplainabilityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteModelPackageInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteModelPackageCommandInput extends DeleteModelPackageInput {
    }
    export interface DeleteModelPackageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a model package.</p>
        *         <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can
        *             subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteModelPackageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteModelPackageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteModelPackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelPackageCommandInput} for command's `input` shape.
        * @see {@link DeleteModelPackageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteModelPackageCommand extends $Command<DeleteModelPackageCommandInput, DeleteModelPackageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteModelPackageCommandInput;
            constructor(input: DeleteModelPackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelPackageCommandInput, DeleteModelPackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteModelPackageGroupInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteModelPackageGroupCommandInput extends DeleteModelPackageGroupInput {
    }
    export interface DeleteModelPackageGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified model group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteModelPackageGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteModelPackageGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteModelPackageGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelPackageGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteModelPackageGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteModelPackageGroupCommand extends $Command<DeleteModelPackageGroupCommandInput, DeleteModelPackageGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteModelPackageGroupCommandInput;
            constructor(input: DeleteModelPackageGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelPackageGroupCommandInput, DeleteModelPackageGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteModelPackageGroupPolicyInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteModelPackageGroupPolicyCommandInput extends DeleteModelPackageGroupPolicyInput {
    }
    export interface DeleteModelPackageGroupPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a model group resource policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteModelPackageGroupPolicyCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteModelPackageGroupPolicyCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteModelPackageGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelPackageGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteModelPackageGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteModelPackageGroupPolicyCommand extends $Command<DeleteModelPackageGroupPolicyCommandInput, DeleteModelPackageGroupPolicyCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteModelPackageGroupPolicyCommandInput;
            constructor(input: DeleteModelPackageGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelPackageGroupPolicyCommandInput, DeleteModelPackageGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelQualityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteModelQualityJobDefinitionRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteModelQualityJobDefinitionCommandInput extends DeleteModelQualityJobDefinitionRequest {
    }
    export interface DeleteModelQualityJobDefinitionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the secified model quality monitoring job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteModelQualityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteModelQualityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteModelQualityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelQualityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteModelQualityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteModelQualityJobDefinitionCommand extends $Command<DeleteModelQualityJobDefinitionCommandInput, DeleteModelQualityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteModelQualityJobDefinitionCommandInput;
            constructor(input: DeleteModelQualityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelQualityJobDefinitionCommandInput, DeleteModelQualityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteMonitoringScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteMonitoringScheduleRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteMonitoringScheduleCommandInput extends DeleteMonitoringScheduleRequest {
    }
    export interface DeleteMonitoringScheduleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a monitoring schedule. Also stops the schedule had not already been stopped.
        *          This does not delete the job execution history of the monitoring schedule. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteMonitoringScheduleCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteMonitoringScheduleCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteMonitoringScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMonitoringScheduleCommandInput} for command's `input` shape.
        * @see {@link DeleteMonitoringScheduleCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteMonitoringScheduleCommand extends $Command<DeleteMonitoringScheduleCommandInput, DeleteMonitoringScheduleCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteMonitoringScheduleCommandInput;
            constructor(input: DeleteMonitoringScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMonitoringScheduleCommandInput, DeleteMonitoringScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteNotebookInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteNotebookInstanceInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteNotebookInstanceCommandInput extends DeleteNotebookInstanceInput {
    }
    export interface DeleteNotebookInstanceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you
        *             must call the <code>StopNotebookInstance</code> API. </p>
        *         <important>
        *             <p>When you delete a notebook instance, you lose all of your data. SageMaker removes
        *                 the ML compute instance, and deletes the ML storage volume and the network interface
        *                 associated with the notebook instance. </p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteNotebookInstanceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteNotebookInstanceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteNotebookInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNotebookInstanceCommandInput} for command's `input` shape.
        * @see {@link DeleteNotebookInstanceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteNotebookInstanceCommand extends $Command<DeleteNotebookInstanceCommandInput, DeleteNotebookInstanceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteNotebookInstanceCommandInput;
            constructor(input: DeleteNotebookInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNotebookInstanceCommandInput, DeleteNotebookInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteNotebookInstanceLifecycleConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteNotebookInstanceLifecycleConfigInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteNotebookInstanceLifecycleConfigCommandInput extends DeleteNotebookInstanceLifecycleConfigInput {
    }
    export interface DeleteNotebookInstanceLifecycleConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a notebook instance lifecycle configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteNotebookInstanceLifecycleConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteNotebookInstanceLifecycleConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteNotebookInstanceLifecycleConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNotebookInstanceLifecycleConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteNotebookInstanceLifecycleConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteNotebookInstanceLifecycleConfigCommand extends $Command<DeleteNotebookInstanceLifecycleConfigCommandInput, DeleteNotebookInstanceLifecycleConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteNotebookInstanceLifecycleConfigCommandInput;
            constructor(input: DeleteNotebookInstanceLifecycleConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNotebookInstanceLifecycleConfigCommandInput, DeleteNotebookInstanceLifecycleConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeletePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeletePipelineRequest, DeletePipelineResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeletePipelineCommandInput extends DeletePipelineRequest {
    }
    export interface DeletePipelineCommandOutput extends DeletePipelineResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a pipeline if there are no running instances of the pipeline. To delete a
        *         pipeline, you must stop all running instances of the pipeline using the
        *         <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the
        *         pipeline are deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeletePipelineCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeletePipelineCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeletePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePipelineCommandInput} for command's `input` shape.
        * @see {@link DeletePipelineCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeletePipelineCommand extends $Command<DeletePipelineCommandInput, DeletePipelineCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeletePipelineCommandInput;
            constructor(input: DeletePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePipelineCommandInput, DeletePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteProjectInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteProjectCommandInput extends DeleteProjectInput {
    }
    export interface DeleteProjectCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete the specified project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteProjectCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteProjectCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProjectCommandInput} for command's `input` shape.
        * @see {@link DeleteProjectCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteProjectCommand extends $Command<DeleteProjectCommandInput, DeleteProjectCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteProjectCommandInput;
            constructor(input: DeleteProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProjectCommandInput, DeleteProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteStudioLifecycleConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteStudioLifecycleConfigRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteStudioLifecycleConfigCommandInput extends DeleteStudioLifecycleConfigRequest {
    }
    export interface DeleteStudioLifecycleConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteStudioLifecycleConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteStudioLifecycleConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteStudioLifecycleConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStudioLifecycleConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteStudioLifecycleConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteStudioLifecycleConfigCommand extends $Command<DeleteStudioLifecycleConfigCommandInput, DeleteStudioLifecycleConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteStudioLifecycleConfigCommandInput;
            constructor(input: DeleteStudioLifecycleConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStudioLifecycleConfigCommandInput, DeleteStudioLifecycleConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTagsInput, DeleteTagsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteTagsCommandInput extends DeleteTagsInput {
    }
    export interface DeleteTagsCommandOutput extends DeleteTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified tags from an SageMaker resource.</p>
        *         <p>To list a resource's tags, use the <code>ListTags</code> API. </p>
        *         <note>
        *             <p>When you call this API to delete tags from a hyperparameter tuning job, the
        *                 deleted tags are not removed from training jobs that the hyperparameter tuning job
        *                 launched before you called this API.</p>
        *         </note>
        *         <note>
        *             <p>When you call this API to delete tags from a SageMaker Studio Domain or User
        *                 Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain
        *                 or User Profile launched before you called this API.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteTagsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteTagsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTagsCommandInput} for command's `input` shape.
        * @see {@link DeleteTagsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteTagsCommand extends $Command<DeleteTagsCommandInput, DeleteTagsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteTagsCommandInput;
            constructor(input: DeleteTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTagsCommandInput, DeleteTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTrialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTrialRequest, DeleteTrialResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteTrialCommandInput extends DeleteTrialRequest {
    }
    export interface DeleteTrialCommandOutput extends DeleteTrialResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified trial. All trial components that make up the trial must be deleted
        *       first. Use the <a>DescribeTrialComponent</a> API to get the list of trial
        *       components.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteTrialCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteTrialCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteTrialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTrialCommandInput} for command's `input` shape.
        * @see {@link DeleteTrialCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteTrialCommand extends $Command<DeleteTrialCommandInput, DeleteTrialCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteTrialCommandInput;
            constructor(input: DeleteTrialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTrialCommandInput, DeleteTrialCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTrialComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTrialComponentRequest, DeleteTrialComponentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteTrialComponentCommandInput extends DeleteTrialComponentRequest {
    }
    export interface DeleteTrialComponentCommandOutput extends DeleteTrialComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified trial component. A trial component must be disassociated from all
        *       trials before the trial component can be deleted. To disassociate a trial component from a
        *       trial, call the <a>DisassociateTrialComponent</a> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteTrialComponentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteTrialComponentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteTrialComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTrialComponentCommandInput} for command's `input` shape.
        * @see {@link DeleteTrialComponentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteTrialComponentCommand extends $Command<DeleteTrialComponentCommandInput, DeleteTrialComponentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteTrialComponentCommandInput;
            constructor(input: DeleteTrialComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTrialComponentCommandInput, DeleteTrialComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteUserProfileRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteUserProfileCommandInput extends DeleteUserProfileRequest {
    }
    export interface DeleteUserProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a user profile. When a user profile is deleted, the user loses access to their EFS
        *      volume, including data, notebooks, and other artifacts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteUserProfileCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteUserProfileCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteUserProfileCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteUserProfileCommand extends $Command<DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteUserProfileCommandInput;
            constructor(input: DeleteUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteWorkforceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorkforceRequest, DeleteWorkforceResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteWorkforceCommandInput extends DeleteWorkforceRequest {
    }
    export interface DeleteWorkforceCommandOutput extends DeleteWorkforceResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to delete a workforce.</p>
        *
        *          <p>If you want to create a new workforce in an Amazon Web Services Region where
        *       a workforce already exists, use this operation to delete the
        *       existing workforce and then use
        *       to create a new workforce.</p>
        *          <important>
        *             <p>If a private workforce contains one or more work teams, you must use
        *             the
        *             operation to delete all work teams before you delete the workforce.
        *             If you try to delete a workforce that contains one or more work teams,
        *             you will recieve a <code>ResourceInUse</code> error.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteWorkforceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteWorkforceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteWorkforceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkforceCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkforceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteWorkforceCommand extends $Command<DeleteWorkforceCommandInput, DeleteWorkforceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteWorkforceCommandInput;
            constructor(input: DeleteWorkforceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkforceCommandInput, DeleteWorkforceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteWorkteamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorkteamRequest, DeleteWorkteamResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeleteWorkteamCommandInput extends DeleteWorkteamRequest {
    }
    export interface DeleteWorkteamCommandOutput extends DeleteWorkteamResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing work team. This operation can't be undone.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeleteWorkteamCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeleteWorkteamCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeleteWorkteamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkteamCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkteamCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeleteWorkteamCommand extends $Command<DeleteWorkteamCommandInput, DeleteWorkteamCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeleteWorkteamCommandInput;
            constructor(input: DeleteWorkteamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkteamCommandInput, DeleteWorkteamCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeregisterDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterDevicesRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DeregisterDevicesCommandInput extends DeregisterDevicesRequest {
    }
    export interface DeregisterDevicesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DeregisterDevicesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DeregisterDevicesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DeregisterDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterDevicesCommandInput} for command's `input` shape.
        * @see {@link DeregisterDevicesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DeregisterDevicesCommand extends $Command<DeregisterDevicesCommandInput, DeregisterDevicesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DeregisterDevicesCommandInput;
            constructor(input: DeregisterDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterDevicesCommandInput, DeregisterDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeActionRequest, DescribeActionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeActionCommandInput extends DescribeActionRequest {
    }
    export interface DescribeActionCommandOutput extends DescribeActionResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeActionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeActionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeActionCommandInput} for command's `input` shape.
        * @see {@link DescribeActionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeActionCommand extends $Command<DescribeActionCommandInput, DescribeActionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeActionCommandInput;
            constructor(input: DescribeActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeActionCommandInput, DescribeActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAlgorithmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAlgorithmInput, DescribeAlgorithmOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeAlgorithmCommandInput extends DescribeAlgorithmInput {
    }
    export interface DescribeAlgorithmCommandOutput extends DescribeAlgorithmOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a description of the specified algorithm that is in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeAlgorithmCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeAlgorithmCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeAlgorithmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAlgorithmCommandInput} for command's `input` shape.
        * @see {@link DescribeAlgorithmCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeAlgorithmCommand extends $Command<DescribeAlgorithmCommandInput, DescribeAlgorithmCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeAlgorithmCommandInput;
            constructor(input: DescribeAlgorithmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAlgorithmCommandInput, DescribeAlgorithmCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAppRequest, DescribeAppResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeAppCommandInput extends DescribeAppRequest {
    }
    export interface DescribeAppCommandOutput extends DescribeAppResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the app.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeAppCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeAppCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAppCommandInput} for command's `input` shape.
        * @see {@link DescribeAppCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeAppCommand extends $Command<DescribeAppCommandInput, DescribeAppCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeAppCommandInput;
            constructor(input: DescribeAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAppCommandInput, DescribeAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAppImageConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAppImageConfigRequest, DescribeAppImageConfigResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeAppImageConfigCommandInput extends DescribeAppImageConfigRequest {
    }
    export interface DescribeAppImageConfigCommandOutput extends DescribeAppImageConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an AppImageConfig.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeAppImageConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeAppImageConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeAppImageConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAppImageConfigCommandInput} for command's `input` shape.
        * @see {@link DescribeAppImageConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeAppImageConfigCommand extends $Command<DescribeAppImageConfigCommandInput, DescribeAppImageConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeAppImageConfigCommandInput;
            constructor(input: DescribeAppImageConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAppImageConfigCommandInput, DescribeAppImageConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeArtifactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeArtifactRequest, DescribeArtifactResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeArtifactCommandInput extends DescribeArtifactRequest {
    }
    export interface DescribeArtifactCommandOutput extends DescribeArtifactResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an artifact.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeArtifactCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeArtifactCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeArtifactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeArtifactCommandInput} for command's `input` shape.
        * @see {@link DescribeArtifactCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeArtifactCommand extends $Command<DescribeArtifactCommandInput, DescribeArtifactCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeArtifactCommandInput;
            constructor(input: DescribeArtifactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeArtifactCommandInput, DescribeArtifactCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAutoMLJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAutoMLJobRequest, DescribeAutoMLJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeAutoMLJobCommandInput extends DescribeAutoMLJobRequest {
    }
    export interface DescribeAutoMLJobCommandOutput extends DescribeAutoMLJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about an Amazon SageMaker AutoML job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeAutoMLJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeAutoMLJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeAutoMLJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAutoMLJobCommandInput} for command's `input` shape.
        * @see {@link DescribeAutoMLJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeAutoMLJobCommand extends $Command<DescribeAutoMLJobCommandInput, DescribeAutoMLJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeAutoMLJobCommandInput;
            constructor(input: DescribeAutoMLJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAutoMLJobCommandInput, DescribeAutoMLJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeCodeRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeCodeRepositoryInput, DescribeCodeRepositoryOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeCodeRepositoryCommandInput extends DescribeCodeRepositoryInput {
    }
    export interface DescribeCodeRepositoryCommandOutput extends DescribeCodeRepositoryOutput, __MetadataBearer {
    }
    /**
        * <p>Gets details about the specified Git repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeCodeRepositoryCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeCodeRepositoryCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeCodeRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCodeRepositoryCommandInput} for command's `input` shape.
        * @see {@link DescribeCodeRepositoryCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeCodeRepositoryCommand extends $Command<DescribeCodeRepositoryCommandInput, DescribeCodeRepositoryCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeCodeRepositoryCommandInput;
            constructor(input: DescribeCodeRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCodeRepositoryCommandInput, DescribeCodeRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeCompilationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeCompilationJobRequest, DescribeCompilationJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeCompilationJobCommandInput extends DescribeCompilationJobRequest {
    }
    export interface DescribeCompilationJobCommandOutput extends DescribeCompilationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a model compilation job.</p>
        *         <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
        *             information about multiple model compilation jobs, use <a>ListCompilationJobs</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeCompilationJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeCompilationJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeCompilationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCompilationJobCommandInput} for command's `input` shape.
        * @see {@link DescribeCompilationJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeCompilationJobCommand extends $Command<DescribeCompilationJobCommandInput, DescribeCompilationJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeCompilationJobCommandInput;
            constructor(input: DescribeCompilationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCompilationJobCommandInput, DescribeCompilationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeContextCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeContextRequest, DescribeContextResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeContextCommandInput extends DescribeContextRequest {
    }
    export interface DescribeContextCommandOutput extends DescribeContextResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a context.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeContextCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeContextCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeContextCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeContextCommandInput} for command's `input` shape.
        * @see {@link DescribeContextCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeContextCommand extends $Command<DescribeContextCommandInput, DescribeContextCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeContextCommandInput;
            constructor(input: DescribeContextCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeContextCommandInput, DescribeContextCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDataQualityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDataQualityJobDefinitionRequest, DescribeDataQualityJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeDataQualityJobDefinitionCommandInput extends DescribeDataQualityJobDefinitionRequest {
    }
    export interface DescribeDataQualityJobDefinitionCommandOutput extends DescribeDataQualityJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the details of a data quality monitoring job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeDataQualityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeDataQualityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeDataQualityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDataQualityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DescribeDataQualityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeDataQualityJobDefinitionCommand extends $Command<DescribeDataQualityJobDefinitionCommandInput, DescribeDataQualityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeDataQualityJobDefinitionCommandInput;
            constructor(input: DescribeDataQualityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDataQualityJobDefinitionCommandInput, DescribeDataQualityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDeviceRequest, DescribeDeviceResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeDeviceCommandInput extends DescribeDeviceRequest {
    }
    export interface DescribeDeviceCommandOutput extends DescribeDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeDeviceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeDeviceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDeviceCommandInput} for command's `input` shape.
        * @see {@link DescribeDeviceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeDeviceCommand extends $Command<DescribeDeviceCommandInput, DescribeDeviceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeDeviceCommandInput;
            constructor(input: DescribeDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDeviceCommandInput, DescribeDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDeviceFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDeviceFleetRequest, DescribeDeviceFleetResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeDeviceFleetCommandInput extends DescribeDeviceFleetRequest {
    }
    export interface DescribeDeviceFleetCommandOutput extends DescribeDeviceFleetResponse, __MetadataBearer {
    }
    /**
        * <p>A description of the fleet the device belongs to.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeDeviceFleetCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeDeviceFleetCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeDeviceFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDeviceFleetCommandInput} for command's `input` shape.
        * @see {@link DescribeDeviceFleetCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeDeviceFleetCommand extends $Command<DescribeDeviceFleetCommandInput, DescribeDeviceFleetCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeDeviceFleetCommandInput;
            constructor(input: DescribeDeviceFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDeviceFleetCommandInput, DescribeDeviceFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDomainRequest, DescribeDomainResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeDomainCommandInput extends DescribeDomainRequest {
    }
    export interface DescribeDomainCommandOutput extends DescribeDomainResponse, __MetadataBearer {
    }
    /**
        * <p>The description of the domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeDomainCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeDomainCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDomainCommandInput} for command's `input` shape.
        * @see {@link DescribeDomainCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeDomainCommand extends $Command<DescribeDomainCommandInput, DescribeDomainCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeDomainCommandInput;
            constructor(input: DescribeDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDomainCommandInput, DescribeDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEdgeDeploymentPlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEdgeDeploymentPlanRequest, DescribeEdgeDeploymentPlanResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeEdgeDeploymentPlanCommandInput extends DescribeEdgeDeploymentPlanRequest {
    }
    export interface DescribeEdgeDeploymentPlanCommandOutput extends DescribeEdgeDeploymentPlanResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an edge deployment plan with deployment status per stage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeEdgeDeploymentPlanCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeEdgeDeploymentPlanCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeEdgeDeploymentPlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEdgeDeploymentPlanCommandInput} for command's `input` shape.
        * @see {@link DescribeEdgeDeploymentPlanCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeEdgeDeploymentPlanCommand extends $Command<DescribeEdgeDeploymentPlanCommandInput, DescribeEdgeDeploymentPlanCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeEdgeDeploymentPlanCommandInput;
            constructor(input: DescribeEdgeDeploymentPlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEdgeDeploymentPlanCommandInput, DescribeEdgeDeploymentPlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEdgePackagingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEdgePackagingJobRequest, DescribeEdgePackagingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeEdgePackagingJobCommandInput extends DescribeEdgePackagingJobRequest {
    }
    export interface DescribeEdgePackagingJobCommandOutput extends DescribeEdgePackagingJobResponse, __MetadataBearer {
    }
    /**
        * <p>A description of edge packaging jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeEdgePackagingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeEdgePackagingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeEdgePackagingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEdgePackagingJobCommandInput} for command's `input` shape.
        * @see {@link DescribeEdgePackagingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeEdgePackagingJobCommand extends $Command<DescribeEdgePackagingJobCommandInput, DescribeEdgePackagingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeEdgePackagingJobCommandInput;
            constructor(input: DescribeEdgePackagingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEdgePackagingJobCommandInput, DescribeEdgePackagingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEndpointInput, DescribeEndpointOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeEndpointCommandInput extends DescribeEndpointInput {
    }
    export interface DescribeEndpointCommandOutput extends DescribeEndpointOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the description of an endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeEndpointCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeEndpointCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEndpointCommandInput} for command's `input` shape.
        * @see {@link DescribeEndpointCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeEndpointCommand extends $Command<DescribeEndpointCommandInput, DescribeEndpointCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeEndpointCommandInput;
            constructor(input: DescribeEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEndpointCommandInput, DescribeEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEndpointConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEndpointConfigInput, DescribeEndpointConfigOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeEndpointConfigCommandInput extends DescribeEndpointConfigInput {
    }
    export interface DescribeEndpointConfigCommandOutput extends DescribeEndpointConfigOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the description of an endpoint configuration created using the
        *                 <code>CreateEndpointConfig</code> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeEndpointConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeEndpointConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeEndpointConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEndpointConfigCommandInput} for command's `input` shape.
        * @see {@link DescribeEndpointConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeEndpointConfigCommand extends $Command<DescribeEndpointConfigCommandInput, DescribeEndpointConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeEndpointConfigCommandInput;
            constructor(input: DescribeEndpointConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEndpointConfigCommandInput, DescribeEndpointConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeExperimentRequest, DescribeExperimentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeExperimentCommandInput extends DescribeExperimentRequest {
    }
    export interface DescribeExperimentCommandOutput extends DescribeExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of an experiment's properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeExperimentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeExperimentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeExperimentCommandInput} for command's `input` shape.
        * @see {@link DescribeExperimentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeExperimentCommand extends $Command<DescribeExperimentCommandInput, DescribeExperimentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeExperimentCommandInput;
            constructor(input: DescribeExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeExperimentCommandInput, DescribeExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFeatureGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFeatureGroupRequest, DescribeFeatureGroupResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeFeatureGroupCommandInput extends DescribeFeatureGroupRequest {
    }
    export interface DescribeFeatureGroupCommandOutput extends DescribeFeatureGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to describe a <code>FeatureGroup</code>. The response includes
        *          information on the creation time, <code>FeatureGroup</code> name, the unique identifier for
        *          each <code>FeatureGroup</code>, and more.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeFeatureGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeFeatureGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeFeatureGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFeatureGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeFeatureGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeFeatureGroupCommand extends $Command<DescribeFeatureGroupCommandInput, DescribeFeatureGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeFeatureGroupCommandInput;
            constructor(input: DescribeFeatureGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFeatureGroupCommandInput, DescribeFeatureGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFeatureMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFeatureMetadataRequest, DescribeFeatureMetadataResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeFeatureMetadataCommandInput extends DescribeFeatureMetadataRequest {
    }
    export interface DescribeFeatureMetadataCommandOutput extends DescribeFeatureMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Shows the metadata for a feature within a feature group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeFeatureMetadataCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeFeatureMetadataCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeFeatureMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFeatureMetadataCommandInput} for command's `input` shape.
        * @see {@link DescribeFeatureMetadataCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeFeatureMetadataCommand extends $Command<DescribeFeatureMetadataCommandInput, DescribeFeatureMetadataCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeFeatureMetadataCommandInput;
            constructor(input: DescribeFeatureMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFeatureMetadataCommandInput, DescribeFeatureMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFlowDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFlowDefinitionRequest, DescribeFlowDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeFlowDefinitionCommandInput extends DescribeFlowDefinitionRequest {
    }
    export interface DescribeFlowDefinitionCommandOutput extends DescribeFlowDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified flow definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeFlowDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeFlowDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeFlowDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFlowDefinitionCommandInput} for command's `input` shape.
        * @see {@link DescribeFlowDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeFlowDefinitionCommand extends $Command<DescribeFlowDefinitionCommandInput, DescribeFlowDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeFlowDefinitionCommandInput;
            constructor(input: DescribeFlowDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFlowDefinitionCommandInput, DescribeFlowDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeHumanTaskUiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeHumanTaskUiRequest, DescribeHumanTaskUiResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeHumanTaskUiCommandInput extends DescribeHumanTaskUiRequest {
    }
    export interface DescribeHumanTaskUiCommandOutput extends DescribeHumanTaskUiResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the requested human task user interface (worker task template).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeHumanTaskUiCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeHumanTaskUiCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeHumanTaskUiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeHumanTaskUiCommandInput} for command's `input` shape.
        * @see {@link DescribeHumanTaskUiCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeHumanTaskUiCommand extends $Command<DescribeHumanTaskUiCommandInput, DescribeHumanTaskUiCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeHumanTaskUiCommandInput;
            constructor(input: DescribeHumanTaskUiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeHumanTaskUiCommandInput, DescribeHumanTaskUiCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeHyperParameterTuningJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeHyperParameterTuningJobRequest, DescribeHyperParameterTuningJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeHyperParameterTuningJobCommandInput extends DescribeHyperParameterTuningJobRequest {
    }
    export interface DescribeHyperParameterTuningJobCommandOutput extends DescribeHyperParameterTuningJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets
        *             a description of a hyperparameter tuning job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeHyperParameterTuningJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeHyperParameterTuningJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeHyperParameterTuningJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeHyperParameterTuningJobCommandInput} for command's `input` shape.
        * @see {@link DescribeHyperParameterTuningJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeHyperParameterTuningJobCommand extends $Command<DescribeHyperParameterTuningJobCommandInput, DescribeHyperParameterTuningJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeHyperParameterTuningJobCommandInput;
            constructor(input: DescribeHyperParameterTuningJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeHyperParameterTuningJobCommandInput, DescribeHyperParameterTuningJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeImageRequest, DescribeImageResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeImageCommandInput extends DescribeImageRequest {
    }
    export interface DescribeImageCommandOutput extends DescribeImageResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a SageMaker image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeImageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeImageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeImageCommandInput} for command's `input` shape.
        * @see {@link DescribeImageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeImageCommand extends $Command<DescribeImageCommandInput, DescribeImageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeImageCommandInput;
            constructor(input: DescribeImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeImageCommandInput, DescribeImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeImageVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeImageVersionRequest, DescribeImageVersionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeImageVersionCommandInput extends DescribeImageVersionRequest {
    }
    export interface DescribeImageVersionCommandOutput extends DescribeImageVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a version of a SageMaker image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeImageVersionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeImageVersionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeImageVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeImageVersionCommandInput} for command's `input` shape.
        * @see {@link DescribeImageVersionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeImageVersionCommand extends $Command<DescribeImageVersionCommandInput, DescribeImageVersionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeImageVersionCommandInput;
            constructor(input: DescribeImageVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeImageVersionCommandInput, DescribeImageVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeInferenceRecommendationsJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeInferenceRecommendationsJobRequest, DescribeInferenceRecommendationsJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeInferenceRecommendationsJobCommandInput extends DescribeInferenceRecommendationsJobRequest {
    }
    export interface DescribeInferenceRecommendationsJobCommandOutput extends DescribeInferenceRecommendationsJobResponse, __MetadataBearer {
    }
    /**
        * <p>Provides the results of the Inference Recommender job.
        *           One or more recommendation jobs are returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeInferenceRecommendationsJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeInferenceRecommendationsJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeInferenceRecommendationsJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInferenceRecommendationsJobCommandInput} for command's `input` shape.
        * @see {@link DescribeInferenceRecommendationsJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeInferenceRecommendationsJobCommand extends $Command<DescribeInferenceRecommendationsJobCommandInput, DescribeInferenceRecommendationsJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeInferenceRecommendationsJobCommandInput;
            constructor(input: DescribeInferenceRecommendationsJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInferenceRecommendationsJobCommandInput, DescribeInferenceRecommendationsJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeLabelingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeLabelingJobRequest, DescribeLabelingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeLabelingJobCommandInput extends DescribeLabelingJobRequest {
    }
    export interface DescribeLabelingJobCommandOutput extends DescribeLabelingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a labeling job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeLabelingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeLabelingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeLabelingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLabelingJobCommandInput} for command's `input` shape.
        * @see {@link DescribeLabelingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeLabelingJobCommand extends $Command<DescribeLabelingJobCommandInput, DescribeLabelingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeLabelingJobCommandInput;
            constructor(input: DescribeLabelingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLabelingJobCommandInput, DescribeLabelingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeLineageGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeLineageGroupRequest, DescribeLineageGroupResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeLineageGroupCommandInput extends DescribeLineageGroupRequest {
    }
    export interface DescribeLineageGroupCommandOutput extends DescribeLineageGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of properties for the requested lineage group.
        *          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
        *             Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeLineageGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeLineageGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeLineageGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLineageGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeLineageGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeLineageGroupCommand extends $Command<DescribeLineageGroupCommandInput, DescribeLineageGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeLineageGroupCommandInput;
            constructor(input: DescribeLineageGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLineageGroupCommandInput, DescribeLineageGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelBiasJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeModelBiasJobDefinitionRequest, DescribeModelBiasJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeModelBiasJobDefinitionCommandInput extends DescribeModelBiasJobDefinitionRequest {
    }
    export interface DescribeModelBiasJobDefinitionCommandOutput extends DescribeModelBiasJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of a model bias job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeModelBiasJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeModelBiasJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeModelBiasJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelBiasJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DescribeModelBiasJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeModelBiasJobDefinitionCommand extends $Command<DescribeModelBiasJobDefinitionCommandInput, DescribeModelBiasJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeModelBiasJobDefinitionCommandInput;
            constructor(input: DescribeModelBiasJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelBiasJobDefinitionCommandInput, DescribeModelBiasJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeModelInput, DescribeModelOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeModelCommandInput extends DescribeModelInput {
    }
    export interface DescribeModelCommandOutput extends DescribeModelOutput, __MetadataBearer {
    }
    /**
        * <p>Describes a model that you created using the <code>CreateModel</code>
        *             API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeModelCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeModelCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelCommandInput} for command's `input` shape.
        * @see {@link DescribeModelCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeModelCommand extends $Command<DescribeModelCommandInput, DescribeModelCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeModelCommandInput;
            constructor(input: DescribeModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelCommandInput, DescribeModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelExplainabilityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeModelExplainabilityJobDefinitionRequest, DescribeModelExplainabilityJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeModelExplainabilityJobDefinitionCommandInput extends DescribeModelExplainabilityJobDefinitionRequest {
    }
    export interface DescribeModelExplainabilityJobDefinitionCommandOutput extends DescribeModelExplainabilityJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of a model explainability job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeModelExplainabilityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeModelExplainabilityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeModelExplainabilityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelExplainabilityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DescribeModelExplainabilityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeModelExplainabilityJobDefinitionCommand extends $Command<DescribeModelExplainabilityJobDefinitionCommandInput, DescribeModelExplainabilityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeModelExplainabilityJobDefinitionCommandInput;
            constructor(input: DescribeModelExplainabilityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelExplainabilityJobDefinitionCommandInput, DescribeModelExplainabilityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelPackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeModelPackageInput, DescribeModelPackageOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeModelPackageCommandInput extends DescribeModelPackageInput {
    }
    export interface DescribeModelPackageCommandOutput extends DescribeModelPackageOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a description of the specified model package, which is used to create SageMaker
        *             models or list them on Amazon Web Services Marketplace.</p>
        *         <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services
        *             Marketplace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeModelPackageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeModelPackageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeModelPackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelPackageCommandInput} for command's `input` shape.
        * @see {@link DescribeModelPackageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeModelPackageCommand extends $Command<DescribeModelPackageCommandInput, DescribeModelPackageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeModelPackageCommandInput;
            constructor(input: DescribeModelPackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelPackageCommandInput, DescribeModelPackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelPackageGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeModelPackageGroupInput, DescribeModelPackageGroupOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeModelPackageGroupCommandInput extends DescribeModelPackageGroupInput {
    }
    export interface DescribeModelPackageGroupCommandOutput extends DescribeModelPackageGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Gets a description for the specified model group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeModelPackageGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeModelPackageGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeModelPackageGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelPackageGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeModelPackageGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeModelPackageGroupCommand extends $Command<DescribeModelPackageGroupCommandInput, DescribeModelPackageGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeModelPackageGroupCommandInput;
            constructor(input: DescribeModelPackageGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelPackageGroupCommandInput, DescribeModelPackageGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelQualityJobDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeModelQualityJobDefinitionRequest, DescribeModelQualityJobDefinitionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeModelQualityJobDefinitionCommandInput extends DescribeModelQualityJobDefinitionRequest {
    }
    export interface DescribeModelQualityJobDefinitionCommandOutput extends DescribeModelQualityJobDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of a model quality job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeModelQualityJobDefinitionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeModelQualityJobDefinitionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeModelQualityJobDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelQualityJobDefinitionCommandInput} for command's `input` shape.
        * @see {@link DescribeModelQualityJobDefinitionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeModelQualityJobDefinitionCommand extends $Command<DescribeModelQualityJobDefinitionCommandInput, DescribeModelQualityJobDefinitionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeModelQualityJobDefinitionCommandInput;
            constructor(input: DescribeModelQualityJobDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelQualityJobDefinitionCommandInput, DescribeModelQualityJobDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeMonitoringScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMonitoringScheduleRequest, DescribeMonitoringScheduleResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeMonitoringScheduleCommandInput extends DescribeMonitoringScheduleRequest {
    }
    export interface DescribeMonitoringScheduleCommandOutput extends DescribeMonitoringScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the schedule for a monitoring job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeMonitoringScheduleCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeMonitoringScheduleCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeMonitoringScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMonitoringScheduleCommandInput} for command's `input` shape.
        * @see {@link DescribeMonitoringScheduleCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeMonitoringScheduleCommand extends $Command<DescribeMonitoringScheduleCommandInput, DescribeMonitoringScheduleCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeMonitoringScheduleCommandInput;
            constructor(input: DescribeMonitoringScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMonitoringScheduleCommandInput, DescribeMonitoringScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeNotebookInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeNotebookInstanceInput, DescribeNotebookInstanceOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeNotebookInstanceCommandInput extends DescribeNotebookInstanceInput {
    }
    export interface DescribeNotebookInstanceCommandOutput extends DescribeNotebookInstanceOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a notebook instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeNotebookInstanceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeNotebookInstanceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeNotebookInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNotebookInstanceCommandInput} for command's `input` shape.
        * @see {@link DescribeNotebookInstanceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeNotebookInstanceCommand extends $Command<DescribeNotebookInstanceCommandInput, DescribeNotebookInstanceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeNotebookInstanceCommandInput;
            constructor(input: DescribeNotebookInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNotebookInstanceCommandInput, DescribeNotebookInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeNotebookInstanceLifecycleConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeNotebookInstanceLifecycleConfigInput, DescribeNotebookInstanceLifecycleConfigOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeNotebookInstanceLifecycleConfigCommandInput extends DescribeNotebookInstanceLifecycleConfigInput {
    }
    export interface DescribeNotebookInstanceLifecycleConfigCommandOutput extends DescribeNotebookInstanceLifecycleConfigOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a description of a notebook instance lifecycle configuration.</p>
        *         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
        *                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeNotebookInstanceLifecycleConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeNotebookInstanceLifecycleConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeNotebookInstanceLifecycleConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNotebookInstanceLifecycleConfigCommandInput} for command's `input` shape.
        * @see {@link DescribeNotebookInstanceLifecycleConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeNotebookInstanceLifecycleConfigCommand extends $Command<DescribeNotebookInstanceLifecycleConfigCommandInput, DescribeNotebookInstanceLifecycleConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeNotebookInstanceLifecycleConfigCommandInput;
            constructor(input: DescribeNotebookInstanceLifecycleConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNotebookInstanceLifecycleConfigCommandInput, DescribeNotebookInstanceLifecycleConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePipelineRequest, DescribePipelineResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribePipelineCommandInput extends DescribePipelineRequest {
    }
    export interface DescribePipelineCommandOutput extends DescribePipelineResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the details of a pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribePipelineCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribePipelineCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePipelineCommandInput} for command's `input` shape.
        * @see {@link DescribePipelineCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribePipelineCommand extends $Command<DescribePipelineCommandInput, DescribePipelineCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribePipelineCommandInput;
            constructor(input: DescribePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePipelineCommandInput, DescribePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineDefinitionForExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePipelineDefinitionForExecutionRequest, DescribePipelineDefinitionForExecutionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribePipelineDefinitionForExecutionCommandInput extends DescribePipelineDefinitionForExecutionRequest {
    }
    export interface DescribePipelineDefinitionForExecutionCommandOutput extends DescribePipelineDefinitionForExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the details of an execution's pipeline definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribePipelineDefinitionForExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribePipelineDefinitionForExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribePipelineDefinitionForExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePipelineDefinitionForExecutionCommandInput} for command's `input` shape.
        * @see {@link DescribePipelineDefinitionForExecutionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribePipelineDefinitionForExecutionCommand extends $Command<DescribePipelineDefinitionForExecutionCommandInput, DescribePipelineDefinitionForExecutionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribePipelineDefinitionForExecutionCommandInput;
            constructor(input: DescribePipelineDefinitionForExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePipelineDefinitionForExecutionCommandInput, DescribePipelineDefinitionForExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePipelineExecutionRequest, DescribePipelineExecutionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribePipelineExecutionCommandInput extends DescribePipelineExecutionRequest {
    }
    export interface DescribePipelineExecutionCommandOutput extends DescribePipelineExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the details of a pipeline execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribePipelineExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribePipelineExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribePipelineExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePipelineExecutionCommandInput} for command's `input` shape.
        * @see {@link DescribePipelineExecutionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribePipelineExecutionCommand extends $Command<DescribePipelineExecutionCommandInput, DescribePipelineExecutionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribePipelineExecutionCommandInput;
            constructor(input: DescribePipelineExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePipelineExecutionCommandInput, DescribePipelineExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeProcessingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeProcessingJobRequest, DescribeProcessingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeProcessingJobCommandInput extends DescribeProcessingJobRequest {
    }
    export interface DescribeProcessingJobCommandOutput extends DescribeProcessingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of a processing job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeProcessingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeProcessingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeProcessingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProcessingJobCommandInput} for command's `input` shape.
        * @see {@link DescribeProcessingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeProcessingJobCommand extends $Command<DescribeProcessingJobCommandInput, DescribeProcessingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeProcessingJobCommandInput;
            constructor(input: DescribeProcessingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProcessingJobCommandInput, DescribeProcessingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeProjectInput, DescribeProjectOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeProjectCommandInput extends DescribeProjectInput {
    }
    export interface DescribeProjectCommandOutput extends DescribeProjectOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the details of a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeProjectCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeProjectCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProjectCommandInput} for command's `input` shape.
        * @see {@link DescribeProjectCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeProjectCommand extends $Command<DescribeProjectCommandInput, DescribeProjectCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeProjectCommandInput;
            constructor(input: DescribeProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProjectCommandInput, DescribeProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeStudioLifecycleConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeStudioLifecycleConfigRequest, DescribeStudioLifecycleConfigResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeStudioLifecycleConfigCommandInput extends DescribeStudioLifecycleConfigRequest {
    }
    export interface DescribeStudioLifecycleConfigCommandOutput extends DescribeStudioLifecycleConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the Studio Lifecycle Configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeStudioLifecycleConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeStudioLifecycleConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeStudioLifecycleConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeStudioLifecycleConfigCommandInput} for command's `input` shape.
        * @see {@link DescribeStudioLifecycleConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeStudioLifecycleConfigCommand extends $Command<DescribeStudioLifecycleConfigCommandInput, DescribeStudioLifecycleConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeStudioLifecycleConfigCommandInput;
            constructor(input: DescribeStudioLifecycleConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeStudioLifecycleConfigCommandInput, DescribeStudioLifecycleConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeSubscribedWorkteamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSubscribedWorkteamRequest, DescribeSubscribedWorkteamResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeSubscribedWorkteamCommandInput extends DescribeSubscribedWorkteamRequest {
    }
    export interface DescribeSubscribedWorkteamCommandOutput extends DescribeSubscribedWorkteamResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a work team provided by a vendor. It returns details about the
        *             subscription with a vendor in the Amazon Web Services Marketplace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeSubscribedWorkteamCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeSubscribedWorkteamCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeSubscribedWorkteamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSubscribedWorkteamCommandInput} for command's `input` shape.
        * @see {@link DescribeSubscribedWorkteamCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeSubscribedWorkteamCommand extends $Command<DescribeSubscribedWorkteamCommandInput, DescribeSubscribedWorkteamCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeSubscribedWorkteamCommandInput;
            constructor(input: DescribeSubscribedWorkteamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSubscribedWorkteamCommandInput, DescribeSubscribedWorkteamCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrainingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTrainingJobRequest, DescribeTrainingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeTrainingJobCommandInput extends DescribeTrainingJobRequest {
    }
    export interface DescribeTrainingJobCommandOutput extends DescribeTrainingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a training job. </p>
        *         <p>Some of the attributes below only appear if the training job successfully starts.
        *             If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and,
        *             depending on the <code>FailureReason</code>, attributes like
        *                 <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>,
        *                 <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be
        *             present in the response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeTrainingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeTrainingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeTrainingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTrainingJobCommandInput} for command's `input` shape.
        * @see {@link DescribeTrainingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeTrainingJobCommand extends $Command<DescribeTrainingJobCommandInput, DescribeTrainingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeTrainingJobCommandInput;
            constructor(input: DescribeTrainingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTrainingJobCommandInput, DescribeTrainingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTransformJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTransformJobRequest, DescribeTransformJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeTransformJobCommandInput extends DescribeTransformJobRequest {
    }
    export interface DescribeTransformJobCommandOutput extends DescribeTransformJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a transform job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeTransformJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeTransformJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeTransformJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTransformJobCommandInput} for command's `input` shape.
        * @see {@link DescribeTransformJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeTransformJobCommand extends $Command<DescribeTransformJobCommandInput, DescribeTransformJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeTransformJobCommandInput;
            constructor(input: DescribeTransformJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTransformJobCommandInput, DescribeTransformJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTrialRequest, DescribeTrialResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeTrialCommandInput extends DescribeTrialRequest {
    }
    export interface DescribeTrialCommandOutput extends DescribeTrialResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of a trial's properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeTrialCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeTrialCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeTrialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTrialCommandInput} for command's `input` shape.
        * @see {@link DescribeTrialCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeTrialCommand extends $Command<DescribeTrialCommandInput, DescribeTrialCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeTrialCommandInput;
            constructor(input: DescribeTrialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTrialCommandInput, DescribeTrialCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrialComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTrialComponentRequest, DescribeTrialComponentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeTrialComponentCommandInput extends DescribeTrialComponentRequest {
    }
    export interface DescribeTrialComponentCommandOutput extends DescribeTrialComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of a trials component's properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeTrialComponentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeTrialComponentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeTrialComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTrialComponentCommandInput} for command's `input` shape.
        * @see {@link DescribeTrialComponentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeTrialComponentCommand extends $Command<DescribeTrialComponentCommandInput, DescribeTrialComponentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeTrialComponentCommandInput;
            constructor(input: DescribeTrialComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTrialComponentCommandInput, DescribeTrialComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeUserProfileRequest, DescribeUserProfileResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeUserProfileCommandInput extends DescribeUserProfileRequest {
    }
    export interface DescribeUserProfileCommandOutput extends DescribeUserProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a user profile. For more information, see <code>CreateUserProfile</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeUserProfileCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeUserProfileCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserProfileCommandInput} for command's `input` shape.
        * @see {@link DescribeUserProfileCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeUserProfileCommand extends $Command<DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeUserProfileCommandInput;
            constructor(input: DescribeUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeWorkforceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkforceRequest, DescribeWorkforceResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeWorkforceCommandInput extends DescribeWorkforceRequest {
    }
    export interface DescribeWorkforceCommandOutput extends DescribeWorkforceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists private workforce information, including workforce name, Amazon Resource Name
        *             (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address
        *             ranges are the IP addresses that workers can use to access tasks. </p>
        *         <important>
        *             <p>This operation applies only to private workforces.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeWorkforceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeWorkforceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeWorkforceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkforceCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkforceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeWorkforceCommand extends $Command<DescribeWorkforceCommandInput, DescribeWorkforceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeWorkforceCommandInput;
            constructor(input: DescribeWorkforceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkforceCommandInput, DescribeWorkforceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeWorkteamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkteamRequest, DescribeWorkteamResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DescribeWorkteamCommandInput extends DescribeWorkteamRequest {
    }
    export interface DescribeWorkteamCommandOutput extends DescribeWorkteamResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a specific work team. You can see information such as the
        *             create date, the last updated date, membership information, and the work team's Amazon
        *             Resource Name (ARN).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DescribeWorkteamCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DescribeWorkteamCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DescribeWorkteamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkteamCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkteamCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DescribeWorkteamCommand extends $Command<DescribeWorkteamCommandInput, DescribeWorkteamCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DescribeWorkteamCommandInput;
            constructor(input: DescribeWorkteamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkteamCommandInput, DescribeWorkteamCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DisableSagemakerServicecatalogPortfolioCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisableSagemakerServicecatalogPortfolioInput, DisableSagemakerServicecatalogPortfolioOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DisableSagemakerServicecatalogPortfolioCommandInput extends DisableSagemakerServicecatalogPortfolioInput {
    }
    export interface DisableSagemakerServicecatalogPortfolioCommandOutput extends DisableSagemakerServicecatalogPortfolioOutput, __MetadataBearer {
    }
    /**
        * <p>Disables using Service Catalog in SageMaker. Service Catalog is used to create
        *             SageMaker projects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DisableSagemakerServicecatalogPortfolioCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DisableSagemakerServicecatalogPortfolioCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DisableSagemakerServicecatalogPortfolioCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableSagemakerServicecatalogPortfolioCommandInput} for command's `input` shape.
        * @see {@link DisableSagemakerServicecatalogPortfolioCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DisableSagemakerServicecatalogPortfolioCommand extends $Command<DisableSagemakerServicecatalogPortfolioCommandInput, DisableSagemakerServicecatalogPortfolioCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DisableSagemakerServicecatalogPortfolioCommandInput;
            constructor(input: DisableSagemakerServicecatalogPortfolioCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableSagemakerServicecatalogPortfolioCommandInput, DisableSagemakerServicecatalogPortfolioCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DisassociateTrialComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateTrialComponentRequest, DisassociateTrialComponentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface DisassociateTrialComponentCommandInput extends DisassociateTrialComponentRequest {
    }
    export interface DisassociateTrialComponentCommandOutput extends DisassociateTrialComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates a trial component from a trial. This doesn't effect other trials the
        *       component is associated with. Before you can delete a component, you must disassociate the
        *       component from all trials it is associated with. To associate a trial component with a trial,
        *       call the <a>AssociateTrialComponent</a> API.</p>
        *          <p>To get a list of the trials a component is associated with, use the <a>Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter.
        *       The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, DisassociateTrialComponentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, DisassociateTrialComponentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new DisassociateTrialComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateTrialComponentCommandInput} for command's `input` shape.
        * @see {@link DisassociateTrialComponentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class DisassociateTrialComponentCommand extends $Command<DisassociateTrialComponentCommandInput, DisassociateTrialComponentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: DisassociateTrialComponentCommandInput;
            constructor(input: DisassociateTrialComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateTrialComponentCommandInput, DisassociateTrialComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/EnableSagemakerServicecatalogPortfolioCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EnableSagemakerServicecatalogPortfolioInput, EnableSagemakerServicecatalogPortfolioOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface EnableSagemakerServicecatalogPortfolioCommandInput extends EnableSagemakerServicecatalogPortfolioInput {
    }
    export interface EnableSagemakerServicecatalogPortfolioCommandOutput extends EnableSagemakerServicecatalogPortfolioOutput, __MetadataBearer {
    }
    /**
        * <p>Enables using Service Catalog in SageMaker. Service Catalog is used to create
        *             SageMaker projects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, EnableSagemakerServicecatalogPortfolioCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, EnableSagemakerServicecatalogPortfolioCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new EnableSagemakerServicecatalogPortfolioCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableSagemakerServicecatalogPortfolioCommandInput} for command's `input` shape.
        * @see {@link EnableSagemakerServicecatalogPortfolioCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class EnableSagemakerServicecatalogPortfolioCommand extends $Command<EnableSagemakerServicecatalogPortfolioCommandInput, EnableSagemakerServicecatalogPortfolioCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: EnableSagemakerServicecatalogPortfolioCommandInput;
            constructor(input: EnableSagemakerServicecatalogPortfolioCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableSagemakerServicecatalogPortfolioCommandInput, EnableSagemakerServicecatalogPortfolioCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetDeviceFleetReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDeviceFleetReportRequest, GetDeviceFleetReportResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface GetDeviceFleetReportCommandInput extends GetDeviceFleetReportRequest {
    }
    export interface GetDeviceFleetReportCommandOutput extends GetDeviceFleetReportResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, GetDeviceFleetReportCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, GetDeviceFleetReportCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new GetDeviceFleetReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeviceFleetReportCommandInput} for command's `input` shape.
        * @see {@link GetDeviceFleetReportCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class GetDeviceFleetReportCommand extends $Command<GetDeviceFleetReportCommandInput, GetDeviceFleetReportCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: GetDeviceFleetReportCommandInput;
            constructor(input: GetDeviceFleetReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeviceFleetReportCommandInput, GetDeviceFleetReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetLineageGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLineageGroupPolicyRequest, GetLineageGroupPolicyResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface GetLineageGroupPolicyCommandInput extends GetLineageGroupPolicyRequest {
    }
    export interface GetLineageGroupPolicyCommandOutput extends GetLineageGroupPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>The resource policy for the lineage group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, GetLineageGroupPolicyCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, GetLineageGroupPolicyCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new GetLineageGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLineageGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link GetLineageGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class GetLineageGroupPolicyCommand extends $Command<GetLineageGroupPolicyCommandInput, GetLineageGroupPolicyCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: GetLineageGroupPolicyCommandInput;
            constructor(input: GetLineageGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLineageGroupPolicyCommandInput, GetLineageGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetModelPackageGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetModelPackageGroupPolicyInput, GetModelPackageGroupPolicyOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface GetModelPackageGroupPolicyCommandInput extends GetModelPackageGroupPolicyInput {
    }
    export interface GetModelPackageGroupPolicyCommandOutput extends GetModelPackageGroupPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Gets a resource policy that manages access for a model group. For information about
        *             resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
        *                 policies and resource-based policies</a> in the <i>Amazon Web Services Identity and
        *                     Access Management User Guide.</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, GetModelPackageGroupPolicyCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, GetModelPackageGroupPolicyCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new GetModelPackageGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelPackageGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link GetModelPackageGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class GetModelPackageGroupPolicyCommand extends $Command<GetModelPackageGroupPolicyCommandInput, GetModelPackageGroupPolicyCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: GetModelPackageGroupPolicyCommandInput;
            constructor(input: GetModelPackageGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelPackageGroupPolicyCommandInput, GetModelPackageGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetSagemakerServicecatalogPortfolioStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSagemakerServicecatalogPortfolioStatusInput, GetSagemakerServicecatalogPortfolioStatusOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface GetSagemakerServicecatalogPortfolioStatusCommandInput extends GetSagemakerServicecatalogPortfolioStatusInput {
    }
    export interface GetSagemakerServicecatalogPortfolioStatusCommandOutput extends GetSagemakerServicecatalogPortfolioStatusOutput, __MetadataBearer {
    }
    /**
        * <p>Gets the status of Service Catalog in SageMaker. Service Catalog is used to create
        *             SageMaker projects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, GetSagemakerServicecatalogPortfolioStatusCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, GetSagemakerServicecatalogPortfolioStatusCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new GetSagemakerServicecatalogPortfolioStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSagemakerServicecatalogPortfolioStatusCommandInput} for command's `input` shape.
        * @see {@link GetSagemakerServicecatalogPortfolioStatusCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class GetSagemakerServicecatalogPortfolioStatusCommand extends $Command<GetSagemakerServicecatalogPortfolioStatusCommandInput, GetSagemakerServicecatalogPortfolioStatusCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: GetSagemakerServicecatalogPortfolioStatusCommandInput;
            constructor(input: GetSagemakerServicecatalogPortfolioStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSagemakerServicecatalogPortfolioStatusCommandInput, GetSagemakerServicecatalogPortfolioStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetSearchSuggestionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSearchSuggestionsRequest, GetSearchSuggestionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface GetSearchSuggestionsCommandInput extends GetSearchSuggestionsRequest {
    }
    export interface GetSearchSuggestionsCommandOutput extends GetSearchSuggestionsResponse, __MetadataBearer {
    }
    /**
        * <p>An auto-complete API for the search functionality in the Amazon SageMaker console. It returns
        *       suggestions of possible matches for the property name to use in <code>Search</code>
        *       queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and
        *       <code>Metrics</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, GetSearchSuggestionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, GetSearchSuggestionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new GetSearchSuggestionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSearchSuggestionsCommandInput} for command's `input` shape.
        * @see {@link GetSearchSuggestionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class GetSearchSuggestionsCommand extends $Command<GetSearchSuggestionsCommandInput, GetSearchSuggestionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: GetSearchSuggestionsCommandInput;
            constructor(input: GetSearchSuggestionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSearchSuggestionsCommandInput, GetSearchSuggestionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListActionsRequest, ListActionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListActionsCommandInput extends ListActionsRequest {
    }
    export interface ListActionsCommandOutput extends ListActionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the actions in your account and their properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListActionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListActionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListActionsCommandInput} for command's `input` shape.
        * @see {@link ListActionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListActionsCommand extends $Command<ListActionsCommandInput, ListActionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListActionsCommandInput;
            constructor(input: ListActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListActionsCommandInput, ListActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAlgorithmsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAlgorithmsInput, ListAlgorithmsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListAlgorithmsCommandInput extends ListAlgorithmsInput {
    }
    export interface ListAlgorithmsCommandOutput extends ListAlgorithmsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the machine learning algorithms that have been created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListAlgorithmsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListAlgorithmsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListAlgorithmsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAlgorithmsCommandInput} for command's `input` shape.
        * @see {@link ListAlgorithmsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListAlgorithmsCommand extends $Command<ListAlgorithmsCommandInput, ListAlgorithmsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListAlgorithmsCommandInput;
            constructor(input: ListAlgorithmsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAlgorithmsCommandInput, ListAlgorithmsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAppImageConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAppImageConfigsRequest, ListAppImageConfigsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListAppImageConfigsCommandInput extends ListAppImageConfigsRequest {
    }
    export interface ListAppImageConfigsCommandOutput extends ListAppImageConfigsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the AppImageConfigs in your account and their properties. The list can be
        *         filtered by creation time or modified time, and whether the AppImageConfig name contains
        *         a specified string.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListAppImageConfigsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListAppImageConfigsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListAppImageConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAppImageConfigsCommandInput} for command's `input` shape.
        * @see {@link ListAppImageConfigsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListAppImageConfigsCommand extends $Command<ListAppImageConfigsCommandInput, ListAppImageConfigsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListAppImageConfigsCommandInput;
            constructor(input: ListAppImageConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAppImageConfigsCommandInput, ListAppImageConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAppsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAppsRequest, ListAppsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListAppsCommandInput extends ListAppsRequest {
    }
    export interface ListAppsCommandOutput extends ListAppsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists apps.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListAppsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListAppsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListAppsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAppsCommandInput} for command's `input` shape.
        * @see {@link ListAppsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListAppsCommand extends $Command<ListAppsCommandInput, ListAppsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListAppsCommandInput;
            constructor(input: ListAppsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAppsCommandInput, ListAppsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListArtifactsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListArtifactsRequest, ListArtifactsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListArtifactsCommandInput extends ListArtifactsRequest {
    }
    export interface ListArtifactsCommandOutput extends ListArtifactsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the artifacts in your account and their properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListArtifactsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListArtifactsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListArtifactsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListArtifactsCommandInput} for command's `input` shape.
        * @see {@link ListArtifactsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListArtifactsCommand extends $Command<ListArtifactsCommandInput, ListArtifactsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListArtifactsCommandInput;
            constructor(input: ListArtifactsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListArtifactsCommandInput, ListArtifactsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssociationsRequest, ListAssociationsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListAssociationsCommandInput extends ListAssociationsRequest {
    }
    export interface ListAssociationsCommandOutput extends ListAssociationsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the associations in your account and their properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListAssociationsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListAssociationsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssociationsCommandInput} for command's `input` shape.
        * @see {@link ListAssociationsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListAssociationsCommand extends $Command<ListAssociationsCommandInput, ListAssociationsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListAssociationsCommandInput;
            constructor(input: ListAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssociationsCommandInput, ListAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAutoMLJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAutoMLJobsRequest, ListAutoMLJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListAutoMLJobsCommandInput extends ListAutoMLJobsRequest {
    }
    export interface ListAutoMLJobsCommandOutput extends ListAutoMLJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Request a list of jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListAutoMLJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListAutoMLJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListAutoMLJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAutoMLJobsCommandInput} for command's `input` shape.
        * @see {@link ListAutoMLJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListAutoMLJobsCommand extends $Command<ListAutoMLJobsCommandInput, ListAutoMLJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListAutoMLJobsCommandInput;
            constructor(input: ListAutoMLJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAutoMLJobsCommandInput, ListAutoMLJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCandidatesForAutoMLJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCandidatesForAutoMLJobRequest, ListCandidatesForAutoMLJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListCandidatesForAutoMLJobCommandInput extends ListCandidatesForAutoMLJobRequest {
    }
    export interface ListCandidatesForAutoMLJobCommandOutput extends ListCandidatesForAutoMLJobResponse, __MetadataBearer {
    }
    /**
        * <p>List the candidates created for the job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListCandidatesForAutoMLJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListCandidatesForAutoMLJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListCandidatesForAutoMLJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCandidatesForAutoMLJobCommandInput} for command's `input` shape.
        * @see {@link ListCandidatesForAutoMLJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListCandidatesForAutoMLJobCommand extends $Command<ListCandidatesForAutoMLJobCommandInput, ListCandidatesForAutoMLJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListCandidatesForAutoMLJobCommandInput;
            constructor(input: ListCandidatesForAutoMLJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCandidatesForAutoMLJobCommandInput, ListCandidatesForAutoMLJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCodeRepositoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCodeRepositoriesInput, ListCodeRepositoriesOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListCodeRepositoriesCommandInput extends ListCodeRepositoriesInput {
    }
    export interface ListCodeRepositoriesCommandOutput extends ListCodeRepositoriesOutput, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the Git repositories in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListCodeRepositoriesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListCodeRepositoriesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListCodeRepositoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCodeRepositoriesCommandInput} for command's `input` shape.
        * @see {@link ListCodeRepositoriesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListCodeRepositoriesCommand extends $Command<ListCodeRepositoriesCommandInput, ListCodeRepositoriesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListCodeRepositoriesCommandInput;
            constructor(input: ListCodeRepositoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCodeRepositoriesCommandInput, ListCodeRepositoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCompilationJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCompilationJobsRequest, ListCompilationJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListCompilationJobsCommandInput extends ListCompilationJobsRequest {
    }
    export interface ListCompilationJobsCommandOutput extends ListCompilationJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists model compilation jobs that satisfy various filters.</p>
        *         <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
        *             information about a particular model compilation job you have created, use <a>DescribeCompilationJob</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListCompilationJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListCompilationJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListCompilationJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCompilationJobsCommandInput} for command's `input` shape.
        * @see {@link ListCompilationJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListCompilationJobsCommand extends $Command<ListCompilationJobsCommandInput, ListCompilationJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListCompilationJobsCommandInput;
            constructor(input: ListCompilationJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCompilationJobsCommandInput, ListCompilationJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListContextsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListContextsRequest, ListContextsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListContextsCommandInput extends ListContextsRequest {
    }
    export interface ListContextsCommandOutput extends ListContextsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the contexts in your account and their properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListContextsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListContextsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListContextsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListContextsCommandInput} for command's `input` shape.
        * @see {@link ListContextsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListContextsCommand extends $Command<ListContextsCommandInput, ListContextsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListContextsCommandInput;
            constructor(input: ListContextsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListContextsCommandInput, ListContextsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDataQualityJobDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDataQualityJobDefinitionsRequest, ListDataQualityJobDefinitionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListDataQualityJobDefinitionsCommandInput extends ListDataQualityJobDefinitionsRequest {
    }
    export interface ListDataQualityJobDefinitionsCommandOutput extends ListDataQualityJobDefinitionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the data quality job definitions in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListDataQualityJobDefinitionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListDataQualityJobDefinitionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListDataQualityJobDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataQualityJobDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListDataQualityJobDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListDataQualityJobDefinitionsCommand extends $Command<ListDataQualityJobDefinitionsCommandInput, ListDataQualityJobDefinitionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListDataQualityJobDefinitionsCommandInput;
            constructor(input: ListDataQualityJobDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataQualityJobDefinitionsCommandInput, ListDataQualityJobDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDeviceFleetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDeviceFleetsRequest, ListDeviceFleetsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListDeviceFleetsCommandInput extends ListDeviceFleetsRequest {
    }
    export interface ListDeviceFleetsCommandOutput extends ListDeviceFleetsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of devices in the fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListDeviceFleetsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListDeviceFleetsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListDeviceFleetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeviceFleetsCommandInput} for command's `input` shape.
        * @see {@link ListDeviceFleetsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListDeviceFleetsCommand extends $Command<ListDeviceFleetsCommandInput, ListDeviceFleetsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListDeviceFleetsCommandInput;
            constructor(input: ListDeviceFleetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeviceFleetsCommandInput, ListDeviceFleetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDevicesRequest, ListDevicesResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListDevicesCommandInput extends ListDevicesRequest {
    }
    export interface ListDevicesCommandOutput extends ListDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>A list of devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListDevicesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListDevicesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevicesCommandInput} for command's `input` shape.
        * @see {@link ListDevicesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListDevicesCommand extends $Command<ListDevicesCommandInput, ListDevicesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListDevicesCommandInput;
            constructor(input: ListDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevicesCommandInput, ListDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDomainsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDomainsRequest, ListDomainsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListDomainsCommandInput extends ListDomainsRequest {
    }
    export interface ListDomainsCommandOutput extends ListDomainsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the domains.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListDomainsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListDomainsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListDomainsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDomainsCommandInput} for command's `input` shape.
        * @see {@link ListDomainsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListDomainsCommand extends $Command<ListDomainsCommandInput, ListDomainsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListDomainsCommandInput;
            constructor(input: ListDomainsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDomainsCommandInput, ListDomainsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEdgeDeploymentPlansCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEdgeDeploymentPlansRequest, ListEdgeDeploymentPlansResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListEdgeDeploymentPlansCommandInput extends ListEdgeDeploymentPlansRequest {
    }
    export interface ListEdgeDeploymentPlansCommandOutput extends ListEdgeDeploymentPlansResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all edge deployment plans.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListEdgeDeploymentPlansCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListEdgeDeploymentPlansCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListEdgeDeploymentPlansCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEdgeDeploymentPlansCommandInput} for command's `input` shape.
        * @see {@link ListEdgeDeploymentPlansCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListEdgeDeploymentPlansCommand extends $Command<ListEdgeDeploymentPlansCommandInput, ListEdgeDeploymentPlansCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListEdgeDeploymentPlansCommandInput;
            constructor(input: ListEdgeDeploymentPlansCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEdgeDeploymentPlansCommandInput, ListEdgeDeploymentPlansCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEdgePackagingJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEdgePackagingJobsRequest, ListEdgePackagingJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListEdgePackagingJobsCommandInput extends ListEdgePackagingJobsRequest {
    }
    export interface ListEdgePackagingJobsCommandOutput extends ListEdgePackagingJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of edge packaging jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListEdgePackagingJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListEdgePackagingJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListEdgePackagingJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEdgePackagingJobsCommandInput} for command's `input` shape.
        * @see {@link ListEdgePackagingJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListEdgePackagingJobsCommand extends $Command<ListEdgePackagingJobsCommandInput, ListEdgePackagingJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListEdgePackagingJobsCommandInput;
            constructor(input: ListEdgePackagingJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEdgePackagingJobsCommandInput, ListEdgePackagingJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEndpointConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEndpointConfigsInput, ListEndpointConfigsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListEndpointConfigsCommandInput extends ListEndpointConfigsInput {
    }
    export interface ListEndpointConfigsCommandOutput extends ListEndpointConfigsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists endpoint configurations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListEndpointConfigsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListEndpointConfigsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListEndpointConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEndpointConfigsCommandInput} for command's `input` shape.
        * @see {@link ListEndpointConfigsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListEndpointConfigsCommand extends $Command<ListEndpointConfigsCommandInput, ListEndpointConfigsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListEndpointConfigsCommandInput;
            constructor(input: ListEndpointConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEndpointConfigsCommandInput, ListEndpointConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEndpointsInput, ListEndpointsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListEndpointsCommandInput extends ListEndpointsInput {
    }
    export interface ListEndpointsCommandOutput extends ListEndpointsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists endpoints.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListEndpointsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListEndpointsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEndpointsCommandInput} for command's `input` shape.
        * @see {@link ListEndpointsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListEndpointsCommand extends $Command<ListEndpointsCommandInput, ListEndpointsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListEndpointsCommandInput;
            constructor(input: ListEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEndpointsCommandInput, ListEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListExperimentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListExperimentsRequest, ListExperimentsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListExperimentsCommandInput extends ListExperimentsRequest {
    }
    export interface ListExperimentsCommandOutput extends ListExperimentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the experiments in your account. The list can be filtered to show only
        *       experiments that were created in a specific time range. The list can be sorted by experiment
        *       name or creation time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListExperimentsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListExperimentsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListExperimentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExperimentsCommandInput} for command's `input` shape.
        * @see {@link ListExperimentsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListExperimentsCommand extends $Command<ListExperimentsCommandInput, ListExperimentsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListExperimentsCommandInput;
            constructor(input: ListExperimentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExperimentsCommandInput, ListExperimentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListFeatureGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFeatureGroupsRequest, ListFeatureGroupsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListFeatureGroupsCommandInput extends ListFeatureGroupsRequest {
    }
    export interface ListFeatureGroupsCommandOutput extends ListFeatureGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>List <code>FeatureGroup</code>s based on given filter and order.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListFeatureGroupsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListFeatureGroupsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListFeatureGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFeatureGroupsCommandInput} for command's `input` shape.
        * @see {@link ListFeatureGroupsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListFeatureGroupsCommand extends $Command<ListFeatureGroupsCommandInput, ListFeatureGroupsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListFeatureGroupsCommandInput;
            constructor(input: ListFeatureGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFeatureGroupsCommandInput, ListFeatureGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListFlowDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFlowDefinitionsRequest, ListFlowDefinitionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListFlowDefinitionsCommandInput extends ListFlowDefinitionsRequest {
    }
    export interface ListFlowDefinitionsCommandOutput extends ListFlowDefinitionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the flow definitions in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListFlowDefinitionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListFlowDefinitionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListFlowDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFlowDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListFlowDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListFlowDefinitionsCommand extends $Command<ListFlowDefinitionsCommandInput, ListFlowDefinitionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListFlowDefinitionsCommandInput;
            constructor(input: ListFlowDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFlowDefinitionsCommandInput, ListFlowDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListHumanTaskUisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListHumanTaskUisRequest, ListHumanTaskUisResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListHumanTaskUisCommandInput extends ListHumanTaskUisRequest {
    }
    export interface ListHumanTaskUisCommandOutput extends ListHumanTaskUisResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the human task user interfaces in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListHumanTaskUisCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListHumanTaskUisCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListHumanTaskUisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListHumanTaskUisCommandInput} for command's `input` shape.
        * @see {@link ListHumanTaskUisCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListHumanTaskUisCommand extends $Command<ListHumanTaskUisCommandInput, ListHumanTaskUisCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListHumanTaskUisCommandInput;
            constructor(input: ListHumanTaskUisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListHumanTaskUisCommandInput, ListHumanTaskUisCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListHyperParameterTuningJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListHyperParameterTuningJobsRequest, ListHyperParameterTuningJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListHyperParameterTuningJobsCommandInput extends ListHyperParameterTuningJobsRequest {
    }
    export interface ListHyperParameterTuningJobsCommandOutput extends ListHyperParameterTuningJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of <a>HyperParameterTuningJobSummary</a> objects that
        *             describe
        *             the hyperparameter tuning jobs launched in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListHyperParameterTuningJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListHyperParameterTuningJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListHyperParameterTuningJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListHyperParameterTuningJobsCommandInput} for command's `input` shape.
        * @see {@link ListHyperParameterTuningJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListHyperParameterTuningJobsCommand extends $Command<ListHyperParameterTuningJobsCommandInput, ListHyperParameterTuningJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListHyperParameterTuningJobsCommandInput;
            constructor(input: ListHyperParameterTuningJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListHyperParameterTuningJobsCommandInput, ListHyperParameterTuningJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListImagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListImagesRequest, ListImagesResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListImagesCommandInput extends ListImagesRequest {
    }
    export interface ListImagesCommandOutput extends ListImagesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the images in your account and their properties. The list can be filtered by
        *         creation time or modified time, and whether the image name contains a specified string.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListImagesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListImagesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListImagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListImagesCommandInput} for command's `input` shape.
        * @see {@link ListImagesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListImagesCommand extends $Command<ListImagesCommandInput, ListImagesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListImagesCommandInput;
            constructor(input: ListImagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListImagesCommandInput, ListImagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListImageVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListImageVersionsRequest, ListImageVersionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListImageVersionsCommandInput extends ListImageVersionsRequest {
    }
    export interface ListImageVersionsCommandOutput extends ListImageVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the versions of a specified image and their properties. The list can be filtered
        *         by creation time or modified time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListImageVersionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListImageVersionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListImageVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListImageVersionsCommandInput} for command's `input` shape.
        * @see {@link ListImageVersionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListImageVersionsCommand extends $Command<ListImageVersionsCommandInput, ListImageVersionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListImageVersionsCommandInput;
            constructor(input: ListImageVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListImageVersionsCommandInput, ListImageVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListInferenceRecommendationsJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListInferenceRecommendationsJobsRequest, ListInferenceRecommendationsJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListInferenceRecommendationsJobsCommandInput extends ListInferenceRecommendationsJobsRequest {
    }
    export interface ListInferenceRecommendationsJobsCommandOutput extends ListInferenceRecommendationsJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists recommendation jobs that satisfy various filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListInferenceRecommendationsJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListInferenceRecommendationsJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListInferenceRecommendationsJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInferenceRecommendationsJobsCommandInput} for command's `input` shape.
        * @see {@link ListInferenceRecommendationsJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListInferenceRecommendationsJobsCommand extends $Command<ListInferenceRecommendationsJobsCommandInput, ListInferenceRecommendationsJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListInferenceRecommendationsJobsCommandInput;
            constructor(input: ListInferenceRecommendationsJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInferenceRecommendationsJobsCommandInput, ListInferenceRecommendationsJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLabelingJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLabelingJobsRequest, ListLabelingJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListLabelingJobsCommandInput extends ListLabelingJobsRequest {
    }
    export interface ListLabelingJobsCommandOutput extends ListLabelingJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of labeling jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListLabelingJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListLabelingJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListLabelingJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLabelingJobsCommandInput} for command's `input` shape.
        * @see {@link ListLabelingJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListLabelingJobsCommand extends $Command<ListLabelingJobsCommandInput, ListLabelingJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListLabelingJobsCommandInput;
            constructor(input: ListLabelingJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLabelingJobsCommandInput, ListLabelingJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLabelingJobsForWorkteamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLabelingJobsForWorkteamRequest, ListLabelingJobsForWorkteamResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListLabelingJobsForWorkteamCommandInput extends ListLabelingJobsForWorkteamRequest {
    }
    export interface ListLabelingJobsForWorkteamCommandOutput extends ListLabelingJobsForWorkteamResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of labeling jobs assigned to a specified work team.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListLabelingJobsForWorkteamCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListLabelingJobsForWorkteamCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListLabelingJobsForWorkteamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLabelingJobsForWorkteamCommandInput} for command's `input` shape.
        * @see {@link ListLabelingJobsForWorkteamCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListLabelingJobsForWorkteamCommand extends $Command<ListLabelingJobsForWorkteamCommandInput, ListLabelingJobsForWorkteamCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListLabelingJobsForWorkteamCommandInput;
            constructor(input: ListLabelingJobsForWorkteamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLabelingJobsForWorkteamCommandInput, ListLabelingJobsForWorkteamCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLineageGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLineageGroupsRequest, ListLineageGroupsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListLineageGroupsCommandInput extends ListLineageGroupsRequest {
    }
    export interface ListLineageGroupsCommandOutput extends ListLineageGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>A list of lineage groups shared with your Amazon Web Services account.
        *          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
        *             Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListLineageGroupsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListLineageGroupsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListLineageGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLineageGroupsCommandInput} for command's `input` shape.
        * @see {@link ListLineageGroupsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListLineageGroupsCommand extends $Command<ListLineageGroupsCommandInput, ListLineageGroupsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListLineageGroupsCommandInput;
            constructor(input: ListLineageGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLineageGroupsCommandInput, ListLineageGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelBiasJobDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListModelBiasJobDefinitionsRequest, ListModelBiasJobDefinitionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListModelBiasJobDefinitionsCommandInput extends ListModelBiasJobDefinitionsRequest {
    }
    export interface ListModelBiasJobDefinitionsCommandOutput extends ListModelBiasJobDefinitionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists model bias jobs definitions that satisfy various filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListModelBiasJobDefinitionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListModelBiasJobDefinitionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListModelBiasJobDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelBiasJobDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListModelBiasJobDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListModelBiasJobDefinitionsCommand extends $Command<ListModelBiasJobDefinitionsCommandInput, ListModelBiasJobDefinitionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListModelBiasJobDefinitionsCommandInput;
            constructor(input: ListModelBiasJobDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelBiasJobDefinitionsCommandInput, ListModelBiasJobDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelExplainabilityJobDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListModelExplainabilityJobDefinitionsRequest, ListModelExplainabilityJobDefinitionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListModelExplainabilityJobDefinitionsCommandInput extends ListModelExplainabilityJobDefinitionsRequest {
    }
    export interface ListModelExplainabilityJobDefinitionsCommandOutput extends ListModelExplainabilityJobDefinitionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists model explainability job definitions that satisfy various filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListModelExplainabilityJobDefinitionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListModelExplainabilityJobDefinitionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListModelExplainabilityJobDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelExplainabilityJobDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListModelExplainabilityJobDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListModelExplainabilityJobDefinitionsCommand extends $Command<ListModelExplainabilityJobDefinitionsCommandInput, ListModelExplainabilityJobDefinitionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListModelExplainabilityJobDefinitionsCommandInput;
            constructor(input: ListModelExplainabilityJobDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelExplainabilityJobDefinitionsCommandInput, ListModelExplainabilityJobDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListModelMetadataRequest, ListModelMetadataResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListModelMetadataCommandInput extends ListModelMetadataRequest {
    }
    export interface ListModelMetadataCommandOutput extends ListModelMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the domain, framework, task, and model name of standard
        *           machine learning models found in common model zoos.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListModelMetadataCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListModelMetadataCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListModelMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelMetadataCommandInput} for command's `input` shape.
        * @see {@link ListModelMetadataCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListModelMetadataCommand extends $Command<ListModelMetadataCommandInput, ListModelMetadataCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListModelMetadataCommandInput;
            constructor(input: ListModelMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelMetadataCommandInput, ListModelMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelPackageGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListModelPackageGroupsInput, ListModelPackageGroupsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListModelPackageGroupsCommandInput extends ListModelPackageGroupsInput {
    }
    export interface ListModelPackageGroupsCommandOutput extends ListModelPackageGroupsOutput, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the model groups in your Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListModelPackageGroupsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListModelPackageGroupsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListModelPackageGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelPackageGroupsCommandInput} for command's `input` shape.
        * @see {@link ListModelPackageGroupsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListModelPackageGroupsCommand extends $Command<ListModelPackageGroupsCommandInput, ListModelPackageGroupsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListModelPackageGroupsCommandInput;
            constructor(input: ListModelPackageGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelPackageGroupsCommandInput, ListModelPackageGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelPackagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListModelPackagesInput, ListModelPackagesOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListModelPackagesCommandInput extends ListModelPackagesInput {
    }
    export interface ListModelPackagesCommandOutput extends ListModelPackagesOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the model packages that have been created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListModelPackagesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListModelPackagesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListModelPackagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelPackagesCommandInput} for command's `input` shape.
        * @see {@link ListModelPackagesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListModelPackagesCommand extends $Command<ListModelPackagesCommandInput, ListModelPackagesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListModelPackagesCommandInput;
            constructor(input: ListModelPackagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelPackagesCommandInput, ListModelPackagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelQualityJobDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListModelQualityJobDefinitionsRequest, ListModelQualityJobDefinitionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListModelQualityJobDefinitionsCommandInput extends ListModelQualityJobDefinitionsRequest {
    }
    export interface ListModelQualityJobDefinitionsCommandOutput extends ListModelQualityJobDefinitionsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of model quality monitoring job definitions in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListModelQualityJobDefinitionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListModelQualityJobDefinitionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListModelQualityJobDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelQualityJobDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListModelQualityJobDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListModelQualityJobDefinitionsCommand extends $Command<ListModelQualityJobDefinitionsCommandInput, ListModelQualityJobDefinitionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListModelQualityJobDefinitionsCommandInput;
            constructor(input: ListModelQualityJobDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelQualityJobDefinitionsCommandInput, ListModelQualityJobDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListModelsInput, ListModelsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListModelsCommandInput extends ListModelsInput {
    }
    export interface ListModelsCommandOutput extends ListModelsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists models created with the <code>CreateModel</code> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListModelsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListModelsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListModelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListModelsCommandInput} for command's `input` shape.
        * @see {@link ListModelsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListModelsCommand extends $Command<ListModelsCommandInput, ListModelsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListModelsCommandInput;
            constructor(input: ListModelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListModelsCommandInput, ListModelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListMonitoringExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListMonitoringExecutionsRequest, ListMonitoringExecutionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListMonitoringExecutionsCommandInput extends ListMonitoringExecutionsRequest {
    }
    export interface ListMonitoringExecutionsCommandOutput extends ListMonitoringExecutionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns list of all monitoring job executions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListMonitoringExecutionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListMonitoringExecutionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListMonitoringExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMonitoringExecutionsCommandInput} for command's `input` shape.
        * @see {@link ListMonitoringExecutionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListMonitoringExecutionsCommand extends $Command<ListMonitoringExecutionsCommandInput, ListMonitoringExecutionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListMonitoringExecutionsCommandInput;
            constructor(input: ListMonitoringExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMonitoringExecutionsCommandInput, ListMonitoringExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListMonitoringSchedulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListMonitoringSchedulesRequest, ListMonitoringSchedulesResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListMonitoringSchedulesCommandInput extends ListMonitoringSchedulesRequest {
    }
    export interface ListMonitoringSchedulesCommandOutput extends ListMonitoringSchedulesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns list of all monitoring schedules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListMonitoringSchedulesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListMonitoringSchedulesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListMonitoringSchedulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMonitoringSchedulesCommandInput} for command's `input` shape.
        * @see {@link ListMonitoringSchedulesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListMonitoringSchedulesCommand extends $Command<ListMonitoringSchedulesCommandInput, ListMonitoringSchedulesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListMonitoringSchedulesCommandInput;
            constructor(input: ListMonitoringSchedulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMonitoringSchedulesCommandInput, ListMonitoringSchedulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListNotebookInstanceLifecycleConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListNotebookInstanceLifecycleConfigsInput, ListNotebookInstanceLifecycleConfigsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListNotebookInstanceLifecycleConfigsCommandInput extends ListNotebookInstanceLifecycleConfigsInput {
    }
    export interface ListNotebookInstanceLifecycleConfigsCommandOutput extends ListNotebookInstanceLifecycleConfigsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists notebook instance lifestyle configurations created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListNotebookInstanceLifecycleConfigsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListNotebookInstanceLifecycleConfigsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListNotebookInstanceLifecycleConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNotebookInstanceLifecycleConfigsCommandInput} for command's `input` shape.
        * @see {@link ListNotebookInstanceLifecycleConfigsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListNotebookInstanceLifecycleConfigsCommand extends $Command<ListNotebookInstanceLifecycleConfigsCommandInput, ListNotebookInstanceLifecycleConfigsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListNotebookInstanceLifecycleConfigsCommandInput;
            constructor(input: ListNotebookInstanceLifecycleConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNotebookInstanceLifecycleConfigsCommandInput, ListNotebookInstanceLifecycleConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListNotebookInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListNotebookInstancesInput, ListNotebookInstancesOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListNotebookInstancesCommandInput extends ListNotebookInstancesInput {
    }
    export interface ListNotebookInstancesCommandOutput extends ListNotebookInstancesOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services
        *             Region. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListNotebookInstancesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListNotebookInstancesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListNotebookInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNotebookInstancesCommandInput} for command's `input` shape.
        * @see {@link ListNotebookInstancesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListNotebookInstancesCommand extends $Command<ListNotebookInstancesCommandInput, ListNotebookInstancesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListNotebookInstancesCommandInput;
            constructor(input: ListNotebookInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNotebookInstancesCommandInput, ListNotebookInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPipelineExecutionsRequest, ListPipelineExecutionsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListPipelineExecutionsCommandInput extends ListPipelineExecutionsRequest {
    }
    export interface ListPipelineExecutionsCommandOutput extends ListPipelineExecutionsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the pipeline executions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListPipelineExecutionsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListPipelineExecutionsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListPipelineExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPipelineExecutionsCommandInput} for command's `input` shape.
        * @see {@link ListPipelineExecutionsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListPipelineExecutionsCommand extends $Command<ListPipelineExecutionsCommandInput, ListPipelineExecutionsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListPipelineExecutionsCommandInput;
            constructor(input: ListPipelineExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPipelineExecutionsCommandInput, ListPipelineExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineExecutionStepsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPipelineExecutionStepsRequest, ListPipelineExecutionStepsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListPipelineExecutionStepsCommandInput extends ListPipelineExecutionStepsRequest {
    }
    export interface ListPipelineExecutionStepsCommandOutput extends ListPipelineExecutionStepsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of <code>PipeLineExecutionStep</code> objects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListPipelineExecutionStepsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListPipelineExecutionStepsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListPipelineExecutionStepsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPipelineExecutionStepsCommandInput} for command's `input` shape.
        * @see {@link ListPipelineExecutionStepsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListPipelineExecutionStepsCommand extends $Command<ListPipelineExecutionStepsCommandInput, ListPipelineExecutionStepsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListPipelineExecutionStepsCommandInput;
            constructor(input: ListPipelineExecutionStepsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPipelineExecutionStepsCommandInput, ListPipelineExecutionStepsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineParametersForExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPipelineParametersForExecutionRequest, ListPipelineParametersForExecutionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListPipelineParametersForExecutionCommandInput extends ListPipelineParametersForExecutionRequest {
    }
    export interface ListPipelineParametersForExecutionCommandOutput extends ListPipelineParametersForExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of parameters for a pipeline execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListPipelineParametersForExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListPipelineParametersForExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListPipelineParametersForExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPipelineParametersForExecutionCommandInput} for command's `input` shape.
        * @see {@link ListPipelineParametersForExecutionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListPipelineParametersForExecutionCommand extends $Command<ListPipelineParametersForExecutionCommandInput, ListPipelineParametersForExecutionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListPipelineParametersForExecutionCommandInput;
            constructor(input: ListPipelineParametersForExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPipelineParametersForExecutionCommandInput, ListPipelineParametersForExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelinesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPipelinesRequest, ListPipelinesResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListPipelinesCommandInput extends ListPipelinesRequest {
    }
    export interface ListPipelinesCommandOutput extends ListPipelinesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of pipelines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListPipelinesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListPipelinesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListPipelinesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPipelinesCommandInput} for command's `input` shape.
        * @see {@link ListPipelinesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListPipelinesCommand extends $Command<ListPipelinesCommandInput, ListPipelinesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListPipelinesCommandInput;
            constructor(input: ListPipelinesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPipelinesCommandInput, ListPipelinesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListProcessingJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListProcessingJobsRequest, ListProcessingJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListProcessingJobsCommandInput extends ListProcessingJobsRequest {
    }
    export interface ListProcessingJobsCommandOutput extends ListProcessingJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists processing jobs that satisfy various filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListProcessingJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListProcessingJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListProcessingJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProcessingJobsCommandInput} for command's `input` shape.
        * @see {@link ListProcessingJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListProcessingJobsCommand extends $Command<ListProcessingJobsCommandInput, ListProcessingJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListProcessingJobsCommandInput;
            constructor(input: ListProcessingJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProcessingJobsCommandInput, ListProcessingJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListProjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListProjectsInput, ListProjectsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListProjectsCommandInput extends ListProjectsInput {
    }
    export interface ListProjectsCommandOutput extends ListProjectsOutput, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the projects in an Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListProjectsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListProjectsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListProjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProjectsCommandInput} for command's `input` shape.
        * @see {@link ListProjectsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListProjectsCommand extends $Command<ListProjectsCommandInput, ListProjectsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListProjectsCommandInput;
            constructor(input: ListProjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProjectsCommandInput, ListProjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListStageDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStageDevicesRequest, ListStageDevicesResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListStageDevicesCommandInput extends ListStageDevicesRequest {
    }
    export interface ListStageDevicesCommandOutput extends ListStageDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists devices allocated to the stage, containing detailed device information and deployment status.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListStageDevicesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListStageDevicesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListStageDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStageDevicesCommandInput} for command's `input` shape.
        * @see {@link ListStageDevicesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListStageDevicesCommand extends $Command<ListStageDevicesCommandInput, ListStageDevicesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListStageDevicesCommandInput;
            constructor(input: ListStageDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStageDevicesCommandInput, ListStageDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListStudioLifecycleConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStudioLifecycleConfigsRequest, ListStudioLifecycleConfigsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListStudioLifecycleConfigsCommandInput extends ListStudioLifecycleConfigsRequest {
    }
    export interface ListStudioLifecycleConfigsCommandOutput extends ListStudioLifecycleConfigsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListStudioLifecycleConfigsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListStudioLifecycleConfigsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListStudioLifecycleConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStudioLifecycleConfigsCommandInput} for command's `input` shape.
        * @see {@link ListStudioLifecycleConfigsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListStudioLifecycleConfigsCommand extends $Command<ListStudioLifecycleConfigsCommandInput, ListStudioLifecycleConfigsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListStudioLifecycleConfigsCommandInput;
            constructor(input: ListStudioLifecycleConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStudioLifecycleConfigsCommandInput, ListStudioLifecycleConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListSubscribedWorkteamsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSubscribedWorkteamsRequest, ListSubscribedWorkteamsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListSubscribedWorkteamsCommandInput extends ListSubscribedWorkteamsRequest {
    }
    export interface ListSubscribedWorkteamsCommandOutput extends ListSubscribedWorkteamsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The
        *             list may be empty if no work team satisfies the filter specified in the
        *                 <code>NameContains</code> parameter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListSubscribedWorkteamsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListSubscribedWorkteamsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListSubscribedWorkteamsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSubscribedWorkteamsCommandInput} for command's `input` shape.
        * @see {@link ListSubscribedWorkteamsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListSubscribedWorkteamsCommand extends $Command<ListSubscribedWorkteamsCommandInput, ListSubscribedWorkteamsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListSubscribedWorkteamsCommandInput;
            constructor(input: ListSubscribedWorkteamsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSubscribedWorkteamsCommandInput, ListSubscribedWorkteamsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsInput, ListTagsOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListTagsCommandInput extends ListTagsInput {
    }
    export interface ListTagsCommandOutput extends ListTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the tags for the specified SageMaker resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListTagsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListTagsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsCommandInput} for command's `input` shape.
        * @see {@link ListTagsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListTagsCommand extends $Command<ListTagsCommandInput, ListTagsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListTagsCommandInput;
            constructor(input: ListTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsCommandInput, ListTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrainingJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTrainingJobsRequest, ListTrainingJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListTrainingJobsCommandInput extends ListTrainingJobsRequest {
    }
    export interface ListTrainingJobsCommandOutput extends ListTrainingJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists training jobs.</p>
        *         <note>
        *             <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same
        *                 time, the <code>MaxResults</code> number of training jobs are first retrieved
        *                 ignoring the <code>StatusEquals</code> parameter and then they are filtered by the
        *                     <code>StatusEquals</code> parameter, which is returned as a response.</p>
        *             <p>For example, if <code>ListTrainingJobs</code> is invoked with the following
        *                 parameters:</p>
        *             <p>
        *                <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code>
        *             </p>
        *             <p>First, 100 trainings jobs with any status, including those other than
        *                     <code>InProgress</code>, are selected (sorted according to the creation time,
        *                 from the most current to the oldest). Next, those with a status of
        *                     <code>InProgress</code> are returned.</p>
        *             <p>You can quickly test the API using the following Amazon Web Services CLI code.</p>
        *             <p>
        *                <code>aws sagemaker list-training-jobs --max-results 100 --status-equals
        *                     InProgress</code>
        *             </p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListTrainingJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListTrainingJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListTrainingJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTrainingJobsCommandInput} for command's `input` shape.
        * @see {@link ListTrainingJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListTrainingJobsCommand extends $Command<ListTrainingJobsCommandInput, ListTrainingJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListTrainingJobsCommandInput;
            constructor(input: ListTrainingJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTrainingJobsCommandInput, ListTrainingJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrainingJobsForHyperParameterTuningJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTrainingJobsForHyperParameterTuningJobRequest, ListTrainingJobsForHyperParameterTuningJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListTrainingJobsForHyperParameterTuningJobCommandInput extends ListTrainingJobsForHyperParameterTuningJobRequest {
    }
    export interface ListTrainingJobsForHyperParameterTuningJobCommandOutput extends ListTrainingJobsForHyperParameterTuningJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of <a>TrainingJobSummary</a> objects that describe the training
        *             jobs that a hyperparameter tuning job launched.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListTrainingJobsForHyperParameterTuningJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListTrainingJobsForHyperParameterTuningJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListTrainingJobsForHyperParameterTuningJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTrainingJobsForHyperParameterTuningJobCommandInput} for command's `input` shape.
        * @see {@link ListTrainingJobsForHyperParameterTuningJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListTrainingJobsForHyperParameterTuningJobCommand extends $Command<ListTrainingJobsForHyperParameterTuningJobCommandInput, ListTrainingJobsForHyperParameterTuningJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListTrainingJobsForHyperParameterTuningJobCommandInput;
            constructor(input: ListTrainingJobsForHyperParameterTuningJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTrainingJobsForHyperParameterTuningJobCommandInput, ListTrainingJobsForHyperParameterTuningJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTransformJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTransformJobsRequest, ListTransformJobsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListTransformJobsCommandInput extends ListTransformJobsRequest {
    }
    export interface ListTransformJobsCommandOutput extends ListTransformJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists transform jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListTransformJobsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListTransformJobsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListTransformJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTransformJobsCommandInput} for command's `input` shape.
        * @see {@link ListTransformJobsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListTransformJobsCommand extends $Command<ListTransformJobsCommandInput, ListTransformJobsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListTransformJobsCommandInput;
            constructor(input: ListTransformJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTransformJobsCommandInput, ListTransformJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrialComponentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTrialComponentsRequest, ListTrialComponentsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListTrialComponentsCommandInput extends ListTrialComponentsRequest {
    }
    export interface ListTrialComponentsCommandOutput extends ListTrialComponentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the trial components in your account. You can sort the list by trial component name
        *       or creation time. You can filter the list to show only components that were created in a
        *       specific time range. You can also filter on one of the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>ExperimentName</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>SourceArn</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>TrialName</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListTrialComponentsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListTrialComponentsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListTrialComponentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTrialComponentsCommandInput} for command's `input` shape.
        * @see {@link ListTrialComponentsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListTrialComponentsCommand extends $Command<ListTrialComponentsCommandInput, ListTrialComponentsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListTrialComponentsCommandInput;
            constructor(input: ListTrialComponentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTrialComponentsCommandInput, ListTrialComponentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrialsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTrialsRequest, ListTrialsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListTrialsCommandInput extends ListTrialsRequest {
    }
    export interface ListTrialsCommandOutput extends ListTrialsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the trials in your account. Specify an experiment name to limit the list to the
        *       trials that are part of that experiment. Specify a trial component name to limit the list to
        *       the trials that associated with that trial component. The list can be filtered to show only
        *       trials that were created in a specific time range. The list can be sorted by trial name or
        *       creation time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListTrialsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListTrialsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListTrialsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTrialsCommandInput} for command's `input` shape.
        * @see {@link ListTrialsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListTrialsCommand extends $Command<ListTrialsCommandInput, ListTrialsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListTrialsCommandInput;
            constructor(input: ListTrialsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTrialsCommandInput, ListTrialsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListUserProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListUserProfilesRequest, ListUserProfilesResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListUserProfilesCommandInput extends ListUserProfilesRequest {
    }
    export interface ListUserProfilesCommandOutput extends ListUserProfilesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists user profiles.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListUserProfilesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListUserProfilesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListUserProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserProfilesCommandInput} for command's `input` shape.
        * @see {@link ListUserProfilesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListUserProfilesCommand extends $Command<ListUserProfilesCommandInput, ListUserProfilesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListUserProfilesCommandInput;
            constructor(input: ListUserProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserProfilesCommandInput, ListUserProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListWorkforcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorkforcesRequest, ListWorkforcesResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListWorkforcesCommandInput extends ListWorkforcesRequest {
    }
    export interface ListWorkforcesCommandOutput extends ListWorkforcesResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only
        *            have one private workforce per Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListWorkforcesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListWorkforcesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListWorkforcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkforcesCommandInput} for command's `input` shape.
        * @see {@link ListWorkforcesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListWorkforcesCommand extends $Command<ListWorkforcesCommandInput, ListWorkforcesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListWorkforcesCommandInput;
            constructor(input: ListWorkforcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkforcesCommandInput, ListWorkforcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListWorkteamsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorkteamsRequest, ListWorkteamsResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface ListWorkteamsCommandInput extends ListWorkteamsRequest {
    }
    export interface ListWorkteamsCommandOutput extends ListWorkteamsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of private work teams that you have defined in a region. The list may be empty if
        *             no work team satisfies the filter specified in the <code>NameContains</code>
        *             parameter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, ListWorkteamsCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, ListWorkteamsCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new ListWorkteamsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkteamsCommandInput} for command's `input` shape.
        * @see {@link ListWorkteamsCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class ListWorkteamsCommand extends $Command<ListWorkteamsCommandInput, ListWorkteamsCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: ListWorkteamsCommandInput;
            constructor(input: ListWorkteamsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkteamsCommandInput, ListWorkteamsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/PutModelPackageGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutModelPackageGroupPolicyInput, PutModelPackageGroupPolicyOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface PutModelPackageGroupPolicyCommandInput extends PutModelPackageGroupPolicyInput {
    }
    export interface PutModelPackageGroupPolicyCommandOutput extends PutModelPackageGroupPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Adds a resouce policy to control access to a model group. For information about
        *             resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
        *                 policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, PutModelPackageGroupPolicyCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, PutModelPackageGroupPolicyCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new PutModelPackageGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutModelPackageGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link PutModelPackageGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class PutModelPackageGroupPolicyCommand extends $Command<PutModelPackageGroupPolicyCommandInput, PutModelPackageGroupPolicyCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: PutModelPackageGroupPolicyCommandInput;
            constructor(input: PutModelPackageGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutModelPackageGroupPolicyCommandInput, PutModelPackageGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/QueryLineageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { QueryLineageRequest, QueryLineageResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface QueryLineageCommandInput extends QueryLineageRequest {
    }
    export interface QueryLineageCommandOutput extends QueryLineageResponse, __MetadataBearer {
    }
    /**
        * <p>Use this action to inspect your lineage and discover relationships between entities.
        *          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html">
        *             Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, QueryLineageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, QueryLineageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new QueryLineageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link QueryLineageCommandInput} for command's `input` shape.
        * @see {@link QueryLineageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class QueryLineageCommand extends $Command<QueryLineageCommandInput, QueryLineageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: QueryLineageCommandInput;
            constructor(input: QueryLineageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<QueryLineageCommandInput, QueryLineageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RegisterDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterDevicesRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface RegisterDevicesCommandInput extends RegisterDevicesRequest {
    }
    export interface RegisterDevicesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Register devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, RegisterDevicesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, RegisterDevicesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new RegisterDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterDevicesCommandInput} for command's `input` shape.
        * @see {@link RegisterDevicesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class RegisterDevicesCommand extends $Command<RegisterDevicesCommandInput, RegisterDevicesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: RegisterDevicesCommandInput;
            constructor(input: RegisterDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterDevicesCommandInput, RegisterDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RenderUiTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RenderUiTemplateRequest, RenderUiTemplateResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface RenderUiTemplateCommandInput extends RenderUiTemplateRequest {
    }
    export interface RenderUiTemplateCommandOutput extends RenderUiTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Renders the UI template so that you can preview the worker's experience. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, RenderUiTemplateCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, RenderUiTemplateCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new RenderUiTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RenderUiTemplateCommandInput} for command's `input` shape.
        * @see {@link RenderUiTemplateCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class RenderUiTemplateCommand extends $Command<RenderUiTemplateCommandInput, RenderUiTemplateCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: RenderUiTemplateCommandInput;
            constructor(input: RenderUiTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RenderUiTemplateCommandInput, RenderUiTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RetryPipelineExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RetryPipelineExecutionRequest, RetryPipelineExecutionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface RetryPipelineExecutionCommandInput extends RetryPipelineExecutionRequest {
    }
    export interface RetryPipelineExecutionCommandOutput extends RetryPipelineExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Retry the execution of the pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, RetryPipelineExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, RetryPipelineExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new RetryPipelineExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RetryPipelineExecutionCommandInput} for command's `input` shape.
        * @see {@link RetryPipelineExecutionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class RetryPipelineExecutionCommand extends $Command<RetryPipelineExecutionCommandInput, RetryPipelineExecutionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: RetryPipelineExecutionCommandInput;
            constructor(input: RetryPipelineExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RetryPipelineExecutionCommandInput, RetryPipelineExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SearchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchRequest, SearchResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface SearchCommandInput extends SearchRequest {
    }
    export interface SearchCommandOutput extends SearchResponse, __MetadataBearer {
    }
    /**
        * <p>Finds Amazon SageMaker resources that match a search query. Matching resources are returned
        *       as a list of <code>SearchRecord</code> objects in the response. You can sort the search
        *       results by any resource property in a ascending or descending order.</p>
        *          <p>You can query against the following value types: numeric, text, Boolean, and
        *       timestamp.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, SearchCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, SearchCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new SearchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchCommandInput} for command's `input` shape.
        * @see {@link SearchCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class SearchCommand extends $Command<SearchCommandInput, SearchCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: SearchCommandInput;
            constructor(input: SearchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchCommandInput, SearchCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SendPipelineExecutionStepFailureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendPipelineExecutionStepFailureRequest, SendPipelineExecutionStepFailureResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface SendPipelineExecutionStepFailureCommandInput extends SendPipelineExecutionStepFailureRequest {
    }
    export interface SendPipelineExecutionStepFailureCommandOutput extends SendPipelineExecutionStepFailureResponse, __MetadataBearer {
    }
    /**
        * <p>Notifies the pipeline that the execution of a callback step failed, along with a
        *         message describing why. When a callback step is run, the pipeline generates a callback
        *         token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, SendPipelineExecutionStepFailureCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, SendPipelineExecutionStepFailureCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new SendPipelineExecutionStepFailureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendPipelineExecutionStepFailureCommandInput} for command's `input` shape.
        * @see {@link SendPipelineExecutionStepFailureCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class SendPipelineExecutionStepFailureCommand extends $Command<SendPipelineExecutionStepFailureCommandInput, SendPipelineExecutionStepFailureCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: SendPipelineExecutionStepFailureCommandInput;
            constructor(input: SendPipelineExecutionStepFailureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendPipelineExecutionStepFailureCommandInput, SendPipelineExecutionStepFailureCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SendPipelineExecutionStepSuccessCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendPipelineExecutionStepSuccessRequest, SendPipelineExecutionStepSuccessResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface SendPipelineExecutionStepSuccessCommandInput extends SendPipelineExecutionStepSuccessRequest {
    }
    export interface SendPipelineExecutionStepSuccessCommandOutput extends SendPipelineExecutionStepSuccessResponse, __MetadataBearer {
    }
    /**
        * <p>Notifies the pipeline that the execution of a callback step succeeded and provides a
        *         list of the step's output parameters. When a callback step is run, the pipeline generates
        *         a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, SendPipelineExecutionStepSuccessCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, SendPipelineExecutionStepSuccessCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new SendPipelineExecutionStepSuccessCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendPipelineExecutionStepSuccessCommandInput} for command's `input` shape.
        * @see {@link SendPipelineExecutionStepSuccessCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class SendPipelineExecutionStepSuccessCommand extends $Command<SendPipelineExecutionStepSuccessCommandInput, SendPipelineExecutionStepSuccessCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: SendPipelineExecutionStepSuccessCommandInput;
            constructor(input: SendPipelineExecutionStepSuccessCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendPipelineExecutionStepSuccessCommandInput, SendPipelineExecutionStepSuccessCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartEdgeDeploymentStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartEdgeDeploymentStageRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StartEdgeDeploymentStageCommandInput extends StartEdgeDeploymentStageRequest {
    }
    export interface StartEdgeDeploymentStageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Starts a stage in an edge deployment plan.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StartEdgeDeploymentStageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StartEdgeDeploymentStageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StartEdgeDeploymentStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartEdgeDeploymentStageCommandInput} for command's `input` shape.
        * @see {@link StartEdgeDeploymentStageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StartEdgeDeploymentStageCommand extends $Command<StartEdgeDeploymentStageCommandInput, StartEdgeDeploymentStageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StartEdgeDeploymentStageCommandInput;
            constructor(input: StartEdgeDeploymentStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartEdgeDeploymentStageCommandInput, StartEdgeDeploymentStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartMonitoringScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartMonitoringScheduleRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StartMonitoringScheduleCommandInput extends StartMonitoringScheduleRequest {
    }
    export interface StartMonitoringScheduleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Starts a previously stopped monitoring schedule.</p>
        *          <note>
        *             <p>By default, when you successfully create a new schedule, the status of a monitoring
        *             schedule is <code>scheduled</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StartMonitoringScheduleCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StartMonitoringScheduleCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StartMonitoringScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartMonitoringScheduleCommandInput} for command's `input` shape.
        * @see {@link StartMonitoringScheduleCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StartMonitoringScheduleCommand extends $Command<StartMonitoringScheduleCommandInput, StartMonitoringScheduleCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StartMonitoringScheduleCommandInput;
            constructor(input: StartMonitoringScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartMonitoringScheduleCommandInput, StartMonitoringScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartNotebookInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartNotebookInstanceInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StartNotebookInstanceCommandInput extends StartNotebookInstanceInput {
    }
    export interface StartNotebookInstanceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Launches an ML compute instance with the latest version of the libraries and
        *             attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the
        *             notebook instance status to <code>InService</code>. A notebook instance's status must be
        *                 <code>InService</code> before you can connect to your Jupyter notebook. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StartNotebookInstanceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StartNotebookInstanceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StartNotebookInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartNotebookInstanceCommandInput} for command's `input` shape.
        * @see {@link StartNotebookInstanceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StartNotebookInstanceCommand extends $Command<StartNotebookInstanceCommandInput, StartNotebookInstanceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StartNotebookInstanceCommandInput;
            constructor(input: StartNotebookInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartNotebookInstanceCommandInput, StartNotebookInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartPipelineExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartPipelineExecutionRequest, StartPipelineExecutionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StartPipelineExecutionCommandInput extends StartPipelineExecutionRequest {
    }
    export interface StartPipelineExecutionCommandOutput extends StartPipelineExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a pipeline execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StartPipelineExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StartPipelineExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StartPipelineExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartPipelineExecutionCommandInput} for command's `input` shape.
        * @see {@link StartPipelineExecutionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StartPipelineExecutionCommand extends $Command<StartPipelineExecutionCommandInput, StartPipelineExecutionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StartPipelineExecutionCommandInput;
            constructor(input: StartPipelineExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartPipelineExecutionCommandInput, StartPipelineExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopAutoMLJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopAutoMLJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopAutoMLJobCommandInput extends StopAutoMLJobRequest {
    }
    export interface StopAutoMLJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>A method for forcing the termination of a running job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopAutoMLJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopAutoMLJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopAutoMLJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopAutoMLJobCommandInput} for command's `input` shape.
        * @see {@link StopAutoMLJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopAutoMLJobCommand extends $Command<StopAutoMLJobCommandInput, StopAutoMLJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopAutoMLJobCommandInput;
            constructor(input: StopAutoMLJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopAutoMLJobCommandInput, StopAutoMLJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopCompilationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopCompilationJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopCompilationJobCommandInput extends StopCompilationJobRequest {
    }
    export interface StopCompilationJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a model compilation job.</p>
        *         <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the
        *             job down. If the job hasn't stopped, it sends the SIGKILL signal.</p>
        *         <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <a>CompilationJobSummary$CompilationJobStatus</a> of the job to
        *             <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <a>CompilationJobSummary$CompilationJobStatus</a> to <code>Stopped</code>.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopCompilationJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopCompilationJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopCompilationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopCompilationJobCommandInput} for command's `input` shape.
        * @see {@link StopCompilationJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopCompilationJobCommand extends $Command<StopCompilationJobCommandInput, StopCompilationJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopCompilationJobCommandInput;
            constructor(input: StopCompilationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopCompilationJobCommandInput, StopCompilationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopEdgeDeploymentStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopEdgeDeploymentStageRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopEdgeDeploymentStageCommandInput extends StopEdgeDeploymentStageRequest {
    }
    export interface StopEdgeDeploymentStageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a stage in an edge deployment plan.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopEdgeDeploymentStageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopEdgeDeploymentStageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopEdgeDeploymentStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopEdgeDeploymentStageCommandInput} for command's `input` shape.
        * @see {@link StopEdgeDeploymentStageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopEdgeDeploymentStageCommand extends $Command<StopEdgeDeploymentStageCommandInput, StopEdgeDeploymentStageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopEdgeDeploymentStageCommandInput;
            constructor(input: StopEdgeDeploymentStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopEdgeDeploymentStageCommandInput, StopEdgeDeploymentStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopEdgePackagingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopEdgePackagingJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopEdgePackagingJobCommandInput extends StopEdgePackagingJobRequest {
    }
    export interface StopEdgePackagingJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Request to stop an edge packaging job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopEdgePackagingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopEdgePackagingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopEdgePackagingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopEdgePackagingJobCommandInput} for command's `input` shape.
        * @see {@link StopEdgePackagingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopEdgePackagingJobCommand extends $Command<StopEdgePackagingJobCommandInput, StopEdgePackagingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopEdgePackagingJobCommandInput;
            constructor(input: StopEdgePackagingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopEdgePackagingJobCommandInput, StopEdgePackagingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopHyperParameterTuningJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopHyperParameterTuningJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopHyperParameterTuningJobCommandInput extends StopHyperParameterTuningJobRequest {
    }
    export interface StopHyperParameterTuningJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a running hyperparameter tuning job and all running training jobs that the
        *             tuning job launched.</p>
        *         <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All
        *             data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the
        *             tuning job moves to the <code>Stopped</code> state, it releases all
        *             reserved
        *             resources for the tuning job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopHyperParameterTuningJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopHyperParameterTuningJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopHyperParameterTuningJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopHyperParameterTuningJobCommandInput} for command's `input` shape.
        * @see {@link StopHyperParameterTuningJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopHyperParameterTuningJobCommand extends $Command<StopHyperParameterTuningJobCommandInput, StopHyperParameterTuningJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopHyperParameterTuningJobCommandInput;
            constructor(input: StopHyperParameterTuningJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopHyperParameterTuningJobCommandInput, StopHyperParameterTuningJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopInferenceRecommendationsJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopInferenceRecommendationsJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopInferenceRecommendationsJobCommandInput extends StopInferenceRecommendationsJobRequest {
    }
    export interface StopInferenceRecommendationsJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops an Inference Recommender job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopInferenceRecommendationsJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopInferenceRecommendationsJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopInferenceRecommendationsJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopInferenceRecommendationsJobCommandInput} for command's `input` shape.
        * @see {@link StopInferenceRecommendationsJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopInferenceRecommendationsJobCommand extends $Command<StopInferenceRecommendationsJobCommandInput, StopInferenceRecommendationsJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopInferenceRecommendationsJobCommandInput;
            constructor(input: StopInferenceRecommendationsJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopInferenceRecommendationsJobCommandInput, StopInferenceRecommendationsJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopLabelingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopLabelingJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopLabelingJobCommandInput extends StopLabelingJobRequest {
    }
    export interface StopLabelingJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a running labeling job. A job that is stopped cannot be restarted. Any results
        *             obtained before the job is stopped are placed in the Amazon S3 output bucket.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopLabelingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopLabelingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopLabelingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopLabelingJobCommandInput} for command's `input` shape.
        * @see {@link StopLabelingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopLabelingJobCommand extends $Command<StopLabelingJobCommandInput, StopLabelingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopLabelingJobCommandInput;
            constructor(input: StopLabelingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopLabelingJobCommandInput, StopLabelingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopMonitoringScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopMonitoringScheduleRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopMonitoringScheduleCommandInput extends StopMonitoringScheduleRequest {
    }
    export interface StopMonitoringScheduleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a previously started monitoring schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopMonitoringScheduleCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopMonitoringScheduleCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopMonitoringScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopMonitoringScheduleCommandInput} for command's `input` shape.
        * @see {@link StopMonitoringScheduleCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopMonitoringScheduleCommand extends $Command<StopMonitoringScheduleCommandInput, StopMonitoringScheduleCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopMonitoringScheduleCommandInput;
            constructor(input: StopMonitoringScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopMonitoringScheduleCommandInput, StopMonitoringScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopNotebookInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopNotebookInstanceInput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopNotebookInstanceCommandInput extends StopNotebookInstanceInput {
    }
    export interface StopNotebookInstanceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Terminates the ML compute instance. Before terminating the instance, SageMaker
        *             disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker
        *             stops charging you for the ML compute instance when you call
        *                 <code>StopNotebookInstance</code>.</p>
        *         <p>To access data on the ML storage volume for a notebook instance that has been
        *             terminated, call the <code>StartNotebookInstance</code> API.
        *                 <code>StartNotebookInstance</code> launches another ML compute instance, configures
        *             it, and attaches the preserved ML storage volume so you can continue your work.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopNotebookInstanceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopNotebookInstanceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopNotebookInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopNotebookInstanceCommandInput} for command's `input` shape.
        * @see {@link StopNotebookInstanceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopNotebookInstanceCommand extends $Command<StopNotebookInstanceCommandInput, StopNotebookInstanceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopNotebookInstanceCommandInput;
            constructor(input: StopNotebookInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopNotebookInstanceCommandInput, StopNotebookInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopPipelineExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopPipelineExecutionRequest, StopPipelineExecutionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopPipelineExecutionCommandInput extends StopPipelineExecutionRequest {
    }
    export interface StopPipelineExecutionCommandOutput extends StopPipelineExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a pipeline execution.</p>
        *
        *          <p>
        *             <b>Callback Step</b>
        *          </p>
        *          <p>A pipeline execution won't stop while a callback step is running.
        *         When you call <code>StopPipelineExecution</code>
        *         on a pipeline execution with a running callback step, SageMaker Pipelines sends an
        *         additional Amazon SQS message to the specified SQS queue. The body of the SQS message
        *         contains a "Status" field which is set to "Stopping".</p>
        *          <p>You should add logic to your Amazon SQS message consumer to take any needed action (for
        *         example, resource cleanup) upon receipt of the message followed by a call to
        *         <code>SendPipelineExecutionStepSuccess</code> or
        *         <code>SendPipelineExecutionStepFailure</code>.</p>
        *          <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p>
        *
        *          <p>
        *             <b>Lambda Step</b>
        *          </p>
        *          <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda
        *         function invoked by the lambda step can't be stopped. If you attempt to stop the execution
        *         while the Lambda function is running, the pipeline waits for the Lambda function to finish
        *         or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function
        *         finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit
        *         the pipeline execution status is <code>Failed</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopPipelineExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopPipelineExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopPipelineExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopPipelineExecutionCommandInput} for command's `input` shape.
        * @see {@link StopPipelineExecutionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopPipelineExecutionCommand extends $Command<StopPipelineExecutionCommandInput, StopPipelineExecutionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopPipelineExecutionCommandInput;
            constructor(input: StopPipelineExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopPipelineExecutionCommandInput, StopPipelineExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopProcessingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopProcessingJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopProcessingJobCommandInput extends StopProcessingJobRequest {
    }
    export interface StopProcessingJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a processing job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopProcessingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopProcessingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopProcessingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopProcessingJobCommandInput} for command's `input` shape.
        * @see {@link StopProcessingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopProcessingJobCommand extends $Command<StopProcessingJobCommandInput, StopProcessingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopProcessingJobCommandInput;
            constructor(input: StopProcessingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopProcessingJobCommandInput, StopProcessingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopTrainingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopTrainingJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopTrainingJobCommandInput extends StopTrainingJobRequest {
    }
    export interface StopTrainingJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a training job. To stop a job, SageMaker sends the algorithm the
        *                 <code>SIGTERM</code> signal, which delays job termination for 120 seconds.
        *             Algorithms might use this 120-second window to save the model artifacts, so the results
        *             of the training is not lost. </p>
        *         <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of
        *             the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to
        *                 <code>Stopped</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopTrainingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopTrainingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopTrainingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopTrainingJobCommandInput} for command's `input` shape.
        * @see {@link StopTrainingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopTrainingJobCommand extends $Command<StopTrainingJobCommandInput, StopTrainingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopTrainingJobCommandInput;
            constructor(input: StopTrainingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopTrainingJobCommandInput, StopTrainingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopTransformJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopTransformJobRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface StopTransformJobCommandInput extends StopTransformJobRequest {
    }
    export interface StopTransformJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a batch transform job.</p>
        *         <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job
        *             changes to <code>Stopping</code>. After Amazon SageMaker
        *             stops
        *             the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before
        *             it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, StopTransformJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, StopTransformJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new StopTransformJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopTransformJobCommandInput} for command's `input` shape.
        * @see {@link StopTransformJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class StopTransformJobCommand extends $Command<StopTransformJobCommandInput, StopTransformJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: StopTransformJobCommandInput;
            constructor(input: StopTransformJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopTransformJobCommandInput, StopTransformJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateActionRequest, UpdateActionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateActionCommandInput extends UpdateActionRequest {
    }
    export interface UpdateActionCommandOutput extends UpdateActionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateActionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateActionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateActionCommandInput} for command's `input` shape.
        * @see {@link UpdateActionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateActionCommand extends $Command<UpdateActionCommandInput, UpdateActionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateActionCommandInput;
            constructor(input: UpdateActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateActionCommandInput, UpdateActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateAppImageConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAppImageConfigRequest, UpdateAppImageConfigResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateAppImageConfigCommandInput extends UpdateAppImageConfigRequest {
    }
    export interface UpdateAppImageConfigCommandOutput extends UpdateAppImageConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the properties of an AppImageConfig.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateAppImageConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateAppImageConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateAppImageConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAppImageConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateAppImageConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateAppImageConfigCommand extends $Command<UpdateAppImageConfigCommandInput, UpdateAppImageConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateAppImageConfigCommandInput;
            constructor(input: UpdateAppImageConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAppImageConfigCommandInput, UpdateAppImageConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateArtifactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateArtifactRequest, UpdateArtifactResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateArtifactCommandInput extends UpdateArtifactRequest {
    }
    export interface UpdateArtifactCommandOutput extends UpdateArtifactResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an artifact.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateArtifactCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateArtifactCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateArtifactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateArtifactCommandInput} for command's `input` shape.
        * @see {@link UpdateArtifactCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateArtifactCommand extends $Command<UpdateArtifactCommandInput, UpdateArtifactCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateArtifactCommandInput;
            constructor(input: UpdateArtifactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateArtifactCommandInput, UpdateArtifactCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateCodeRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateCodeRepositoryInput, UpdateCodeRepositoryOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateCodeRepositoryCommandInput extends UpdateCodeRepositoryInput {
    }
    export interface UpdateCodeRepositoryCommandOutput extends UpdateCodeRepositoryOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the specified Git repository with the specified values.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateCodeRepositoryCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateCodeRepositoryCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateCodeRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCodeRepositoryCommandInput} for command's `input` shape.
        * @see {@link UpdateCodeRepositoryCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateCodeRepositoryCommand extends $Command<UpdateCodeRepositoryCommandInput, UpdateCodeRepositoryCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateCodeRepositoryCommandInput;
            constructor(input: UpdateCodeRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCodeRepositoryCommandInput, UpdateCodeRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateContextCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateContextRequest, UpdateContextResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateContextCommandInput extends UpdateContextRequest {
    }
    export interface UpdateContextCommandOutput extends UpdateContextResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a context.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateContextCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateContextCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateContextCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateContextCommandInput} for command's `input` shape.
        * @see {@link UpdateContextCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateContextCommand extends $Command<UpdateContextCommandInput, UpdateContextCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateContextCommandInput;
            constructor(input: UpdateContextCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateContextCommandInput, UpdateContextCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDeviceFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDeviceFleetRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateDeviceFleetCommandInput extends UpdateDeviceFleetRequest {
    }
    export interface UpdateDeviceFleetCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates a fleet of devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateDeviceFleetCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateDeviceFleetCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateDeviceFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeviceFleetCommandInput} for command's `input` shape.
        * @see {@link UpdateDeviceFleetCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateDeviceFleetCommand extends $Command<UpdateDeviceFleetCommandInput, UpdateDeviceFleetCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateDeviceFleetCommandInput;
            constructor(input: UpdateDeviceFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeviceFleetCommandInput, UpdateDeviceFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDevicesRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateDevicesCommandInput extends UpdateDevicesRequest {
    }
    export interface UpdateDevicesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates one or more devices in a fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateDevicesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateDevicesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDevicesCommandInput} for command's `input` shape.
        * @see {@link UpdateDevicesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateDevicesCommand extends $Command<UpdateDevicesCommandInput, UpdateDevicesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateDevicesCommandInput;
            constructor(input: UpdateDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDevicesCommandInput, UpdateDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDomainRequest, UpdateDomainResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateDomainCommandInput extends UpdateDomainRequest {
    }
    export interface UpdateDomainCommandOutput extends UpdateDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the default settings for new user profiles in the domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateDomainCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateDomainCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateDomainCommand extends $Command<UpdateDomainCommandInput, UpdateDomainCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateDomainCommandInput;
            constructor(input: UpdateDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainCommandInput, UpdateDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateEndpointInput, UpdateEndpointOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateEndpointCommandInput extends UpdateEndpointInput {
    }
    export interface UpdateEndpointCommandOutput extends UpdateEndpointOutput, __MetadataBearer {
    }
    /**
        * <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to
        *             using newly created endpoint, and then deletes resources provisioned for the endpoint
        *             using the previous <code>EndpointConfig</code> (there is no availability loss). </p>
        *         <p>When SageMaker receives the request, it sets the endpoint status to
        *                 <code>Updating</code>. After updating the endpoint, it sets the status to
        *                 <code>InService</code>. To check the status of an endpoint, use the <a>DescribeEndpoint</a> API.
        *
        *         </p>
        *         <note>
        *             <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
        *                 live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
        *                 operations are being performed on the endpoint. To update an endpoint, you must
        *                 create a new <code>EndpointConfig</code>.</p>
        *             <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or
        *                 being created or updated you may lose visibility into the instance type the endpoint
        *                 is using. The endpoint must be deleted in order to stop incurring charges.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateEndpointCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateEndpointCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEndpointCommandInput} for command's `input` shape.
        * @see {@link UpdateEndpointCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateEndpointCommand extends $Command<UpdateEndpointCommandInput, UpdateEndpointCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateEndpointCommandInput;
            constructor(input: UpdateEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEndpointCommandInput, UpdateEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateEndpointWeightsAndCapacitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateEndpointWeightsAndCapacitiesInput, UpdateEndpointWeightsAndCapacitiesOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateEndpointWeightsAndCapacitiesCommandInput extends UpdateEndpointWeightsAndCapacitiesInput {
    }
    export interface UpdateEndpointWeightsAndCapacitiesCommandOutput extends UpdateEndpointWeightsAndCapacitiesOutput, __MetadataBearer {
    }
    /**
        * <p>Updates variant weight of one or more variants associated with an existing
        *             endpoint, or capacity of one variant associated with an existing endpoint. When it
        *             receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After
        *             updating the endpoint, it sets the status to <code>InService</code>. To check the status
        *             of an endpoint, use the <a>DescribeEndpoint</a> API. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateEndpointWeightsAndCapacitiesCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateEndpointWeightsAndCapacitiesCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateEndpointWeightsAndCapacitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEndpointWeightsAndCapacitiesCommandInput} for command's `input` shape.
        * @see {@link UpdateEndpointWeightsAndCapacitiesCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateEndpointWeightsAndCapacitiesCommand extends $Command<UpdateEndpointWeightsAndCapacitiesCommandInput, UpdateEndpointWeightsAndCapacitiesCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateEndpointWeightsAndCapacitiesCommandInput;
            constructor(input: UpdateEndpointWeightsAndCapacitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEndpointWeightsAndCapacitiesCommandInput, UpdateEndpointWeightsAndCapacitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateExperimentRequest, UpdateExperimentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateExperimentCommandInput extends UpdateExperimentRequest {
    }
    export interface UpdateExperimentCommandOutput extends UpdateExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Adds, updates, or removes the description of an experiment. Updates the display name of an
        *       experiment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateExperimentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateExperimentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateExperimentCommandInput} for command's `input` shape.
        * @see {@link UpdateExperimentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateExperimentCommand extends $Command<UpdateExperimentCommandInput, UpdateExperimentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateExperimentCommandInput;
            constructor(input: UpdateExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateExperimentCommandInput, UpdateExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateFeatureGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFeatureGroupRequest, UpdateFeatureGroupResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateFeatureGroupCommandInput extends UpdateFeatureGroupRequest {
    }
    export interface UpdateFeatureGroupCommandOutput extends UpdateFeatureGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the feature group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateFeatureGroupCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateFeatureGroupCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateFeatureGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFeatureGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateFeatureGroupCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateFeatureGroupCommand extends $Command<UpdateFeatureGroupCommandInput, UpdateFeatureGroupCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateFeatureGroupCommandInput;
            constructor(input: UpdateFeatureGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFeatureGroupCommandInput, UpdateFeatureGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateFeatureMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFeatureMetadataRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateFeatureMetadataCommandInput extends UpdateFeatureMetadataRequest {
    }
    export interface UpdateFeatureMetadataCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the description and parameters of the feature group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateFeatureMetadataCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateFeatureMetadataCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateFeatureMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFeatureMetadataCommandInput} for command's `input` shape.
        * @see {@link UpdateFeatureMetadataCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateFeatureMetadataCommand extends $Command<UpdateFeatureMetadataCommandInput, UpdateFeatureMetadataCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateFeatureMetadataCommandInput;
            constructor(input: UpdateFeatureMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFeatureMetadataCommandInput, UpdateFeatureMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateImageRequest, UpdateImageResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateImageCommandInput extends UpdateImageRequest {
    }
    export interface UpdateImageCommandOutput extends UpdateImageResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the properties of a SageMaker image. To change the image's tags, use the
        *         <a>AddTags</a> and <a>DeleteTags</a> APIs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateImageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateImageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateImageCommandInput} for command's `input` shape.
        * @see {@link UpdateImageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateImageCommand extends $Command<UpdateImageCommandInput, UpdateImageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateImageCommandInput;
            constructor(input: UpdateImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateImageCommandInput, UpdateImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateModelPackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateModelPackageInput, UpdateModelPackageOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateModelPackageCommandInput extends UpdateModelPackageInput {
    }
    export interface UpdateModelPackageCommandOutput extends UpdateModelPackageOutput, __MetadataBearer {
    }
    /**
        * <p>Updates a versioned model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateModelPackageCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateModelPackageCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateModelPackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateModelPackageCommandInput} for command's `input` shape.
        * @see {@link UpdateModelPackageCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateModelPackageCommand extends $Command<UpdateModelPackageCommandInput, UpdateModelPackageCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateModelPackageCommandInput;
            constructor(input: UpdateModelPackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateModelPackageCommandInput, UpdateModelPackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateMonitoringScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateMonitoringScheduleRequest, UpdateMonitoringScheduleResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateMonitoringScheduleCommandInput extends UpdateMonitoringScheduleRequest {
    }
    export interface UpdateMonitoringScheduleCommandOutput extends UpdateMonitoringScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a previously created schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateMonitoringScheduleCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateMonitoringScheduleCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateMonitoringScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMonitoringScheduleCommandInput} for command's `input` shape.
        * @see {@link UpdateMonitoringScheduleCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateMonitoringScheduleCommand extends $Command<UpdateMonitoringScheduleCommandInput, UpdateMonitoringScheduleCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateMonitoringScheduleCommandInput;
            constructor(input: UpdateMonitoringScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMonitoringScheduleCommandInput, UpdateMonitoringScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateNotebookInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateNotebookInstanceInput, UpdateNotebookInstanceOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateNotebookInstanceCommandInput extends UpdateNotebookInstanceInput {
    }
    export interface UpdateNotebookInstanceCommandOutput extends UpdateNotebookInstanceOutput, __MetadataBearer {
    }
    /**
        * <p>Updates a notebook instance. NotebookInstance updates include upgrading or
        *             downgrading the ML compute instance used for your notebook instance to accommodate
        *             changes in your workload requirements.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateNotebookInstanceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateNotebookInstanceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateNotebookInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNotebookInstanceCommandInput} for command's `input` shape.
        * @see {@link UpdateNotebookInstanceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateNotebookInstanceCommand extends $Command<UpdateNotebookInstanceCommandInput, UpdateNotebookInstanceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateNotebookInstanceCommandInput;
            constructor(input: UpdateNotebookInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNotebookInstanceCommandInput, UpdateNotebookInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateNotebookInstanceLifecycleConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateNotebookInstanceLifecycleConfigInput, UpdateNotebookInstanceLifecycleConfigOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateNotebookInstanceLifecycleConfigCommandInput extends UpdateNotebookInstanceLifecycleConfigInput {
    }
    export interface UpdateNotebookInstanceLifecycleConfigCommandOutput extends UpdateNotebookInstanceLifecycleConfigOutput, __MetadataBearer {
    }
    /**
        * <p>Updates a notebook instance lifecycle configuration created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateNotebookInstanceLifecycleConfigCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateNotebookInstanceLifecycleConfigCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateNotebookInstanceLifecycleConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNotebookInstanceLifecycleConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateNotebookInstanceLifecycleConfigCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateNotebookInstanceLifecycleConfigCommand extends $Command<UpdateNotebookInstanceLifecycleConfigCommandInput, UpdateNotebookInstanceLifecycleConfigCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateNotebookInstanceLifecycleConfigCommandInput;
            constructor(input: UpdateNotebookInstanceLifecycleConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNotebookInstanceLifecycleConfigCommandInput, UpdateNotebookInstanceLifecycleConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdatePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdatePipelineRequest, UpdatePipelineResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdatePipelineCommandInput extends UpdatePipelineRequest {
    }
    export interface UpdatePipelineCommandOutput extends UpdatePipelineResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdatePipelineCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdatePipelineCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdatePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePipelineCommandInput} for command's `input` shape.
        * @see {@link UpdatePipelineCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdatePipelineCommand extends $Command<UpdatePipelineCommandInput, UpdatePipelineCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdatePipelineCommandInput;
            constructor(input: UpdatePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePipelineCommandInput, UpdatePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdatePipelineExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdatePipelineExecutionRequest, UpdatePipelineExecutionResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdatePipelineExecutionCommandInput extends UpdatePipelineExecutionRequest {
    }
    export interface UpdatePipelineExecutionCommandOutput extends UpdatePipelineExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a pipeline execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdatePipelineExecutionCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdatePipelineExecutionCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdatePipelineExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePipelineExecutionCommandInput} for command's `input` shape.
        * @see {@link UpdatePipelineExecutionCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdatePipelineExecutionCommand extends $Command<UpdatePipelineExecutionCommandInput, UpdatePipelineExecutionCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdatePipelineExecutionCommandInput;
            constructor(input: UpdatePipelineExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePipelineExecutionCommandInput, UpdatePipelineExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateProjectInput, UpdateProjectOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateProjectCommandInput extends UpdateProjectInput {
    }
    export interface UpdateProjectCommandOutput extends UpdateProjectOutput, __MetadataBearer {
    }
    /**
        * <p>Updates a machine learning (ML) project that is created from a template that
        *             sets up an ML pipeline from training to deploying an approved model.</p>
        *         <note>
        *             <p>You must not update a project that is in use. If you update the
        *                     <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active
        *                 or being created, or updated, you may lose resources already created by the
        *                 project.</p>
        *             </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateProjectCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateProjectCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProjectCommandInput} for command's `input` shape.
        * @see {@link UpdateProjectCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateProjectCommand extends $Command<UpdateProjectCommandInput, UpdateProjectCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateProjectCommandInput;
            constructor(input: UpdateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProjectCommandInput, UpdateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrainingJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTrainingJobRequest, UpdateTrainingJobResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateTrainingJobCommandInput extends UpdateTrainingJobRequest {
    }
    export interface UpdateTrainingJobCommandOutput extends UpdateTrainingJobResponse, __MetadataBearer {
    }
    /**
        * <p>Update a model training job to request a new Debugger profiling configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateTrainingJobCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateTrainingJobCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateTrainingJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTrainingJobCommandInput} for command's `input` shape.
        * @see {@link UpdateTrainingJobCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateTrainingJobCommand extends $Command<UpdateTrainingJobCommandInput, UpdateTrainingJobCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateTrainingJobCommandInput;
            constructor(input: UpdateTrainingJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTrainingJobCommandInput, UpdateTrainingJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTrialRequest, UpdateTrialResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateTrialCommandInput extends UpdateTrialRequest {
    }
    export interface UpdateTrialCommandOutput extends UpdateTrialResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the display name of a trial.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateTrialCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateTrialCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateTrialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTrialCommandInput} for command's `input` shape.
        * @see {@link UpdateTrialCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateTrialCommand extends $Command<UpdateTrialCommandInput, UpdateTrialCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateTrialCommandInput;
            constructor(input: UpdateTrialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTrialCommandInput, UpdateTrialCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrialComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTrialComponentRequest, UpdateTrialComponentResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateTrialComponentCommandInput extends UpdateTrialComponentRequest {
    }
    export interface UpdateTrialComponentCommandOutput extends UpdateTrialComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates one or more properties of a trial component.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateTrialComponentCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateTrialComponentCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateTrialComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTrialComponentCommandInput} for command's `input` shape.
        * @see {@link UpdateTrialComponentCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateTrialComponentCommand extends $Command<UpdateTrialComponentCommandInput, UpdateTrialComponentCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateTrialComponentCommandInput;
            constructor(input: UpdateTrialComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTrialComponentCommandInput, UpdateTrialComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateUserProfileRequest, UpdateUserProfileResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateUserProfileCommandInput extends UpdateUserProfileRequest {
    }
    export interface UpdateUserProfileCommandOutput extends UpdateUserProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a user profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateUserProfileCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateUserProfileCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateUserProfileCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateUserProfileCommand extends $Command<UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateUserProfileCommandInput;
            constructor(input: UpdateUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateWorkforceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWorkforceRequest, UpdateWorkforceResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateWorkforceCommandInput extends UpdateWorkforceRequest {
    }
    export interface UpdateWorkforceCommandOutput extends UpdateWorkforceResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to update your workforce. You can use this operation to
        *         require that workers use specific IP addresses to work on tasks
        *         and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p>
        *         <p>The worker portal is now supported in VPC and public internet.</p>
        *
        *
        *         <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses.
        *         You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>.
        *         By default, a workforce isn't restricted to specific IP addresses. If you specify a
        *             range of IP addresses, workers who attempt to access tasks using any IP address outside
        *             the specified range are denied and get a <code>Not Found</code> error message on
        *             the worker portal.</p>
        *          <p>To restrict access to all the workers in public internet, add the <code>SourceIpConfig</code> CIDR value as "0.0.0.0/0".</p>
        *         <important>
        *             <p>Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.</p>
        *         </important>
        *         <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using
        *             your own OIDC IdP. </p>
        *         <important>
        *             <p>You can only update your OIDC IdP configuration when there are no work teams
        *                 associated with your workforce. You can delete work teams using the  operation.</p>
        *         </important>
        *         <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you
        *         can view details about your update workforce using the
        *             operation.</p>
        *         <important>
        *             <p>This operation only applies to private workforces.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateWorkforceCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateWorkforceCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateWorkforceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkforceCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkforceCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateWorkforceCommand extends $Command<UpdateWorkforceCommandInput, UpdateWorkforceCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateWorkforceCommandInput;
            constructor(input: UpdateWorkforceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkforceCommandInput, UpdateWorkforceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateWorkteamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWorkteamRequest, UpdateWorkteamResponse } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3";
    import { SageMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient";
    export interface UpdateWorkteamCommandInput extends UpdateWorkteamRequest {
    }
    export interface UpdateWorkteamCommandOutput extends UpdateWorkteamResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing work team with new member definitions or description.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerClient, UpdateWorkteamCommand } from "@aws-sdk/client-sagemaker"; // ES Modules import
        * // const { SageMakerClient, UpdateWorkteamCommand } = require("@aws-sdk/client-sagemaker"); // CommonJS import
        * const client = new SageMakerClient(config);
        * const command = new UpdateWorkteamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkteamCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkteamCommandOutput} for command's `response` shape.
        * @see {@link SageMakerClientResolvedConfig | config} for SageMakerClient's `config` shape.
        *
        */
    export class UpdateWorkteamCommand extends $Command<UpdateWorkteamCommandInput, UpdateWorkteamCommandOutput, SageMakerClientResolvedConfig> {
            readonly input: UpdateWorkteamCommandInput;
            constructor(input: UpdateWorkteamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkteamCommandInput, UpdateWorkteamCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/SageMakerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddAssociationCommandInput, AddAssociationCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AddAssociationCommand";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AddTagsCommand";
    import { AssociateTrialComponentCommandInput, AssociateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/AssociateTrialComponentCommand";
    import { BatchDescribeModelPackageCommandInput, BatchDescribeModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/BatchDescribeModelPackageCommand";
    import { CreateActionCommandInput, CreateActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateActionCommand";
    import { CreateAlgorithmCommandInput, CreateAlgorithmCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAlgorithmCommand";
    import { CreateAppCommandInput, CreateAppCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAppCommand";
    import { CreateAppImageConfigCommandInput, CreateAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAppImageConfigCommand";
    import { CreateArtifactCommandInput, CreateArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateArtifactCommand";
    import { CreateAutoMLJobCommandInput, CreateAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateAutoMLJobCommand";
    import { CreateCodeRepositoryCommandInput, CreateCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateCodeRepositoryCommand";
    import { CreateCompilationJobCommandInput, CreateCompilationJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateCompilationJobCommand";
    import { CreateContextCommandInput, CreateContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateContextCommand";
    import { CreateDataQualityJobDefinitionCommandInput, CreateDataQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDataQualityJobDefinitionCommand";
    import { CreateDeviceFleetCommandInput, CreateDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDeviceFleetCommand";
    import { CreateDomainCommandInput, CreateDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateDomainCommand";
    import { CreateEdgeDeploymentPlanCommandInput, CreateEdgeDeploymentPlanCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgeDeploymentPlanCommand";
    import { CreateEdgeDeploymentStageCommandInput, CreateEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgeDeploymentStageCommand";
    import { CreateEdgePackagingJobCommandInput, CreateEdgePackagingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEdgePackagingJobCommand";
    import { CreateEndpointCommandInput, CreateEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEndpointCommand";
    import { CreateEndpointConfigCommandInput, CreateEndpointConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateEndpointConfigCommand";
    import { CreateExperimentCommandInput, CreateExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateExperimentCommand";
    import { CreateFeatureGroupCommandInput, CreateFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateFeatureGroupCommand";
    import { CreateFlowDefinitionCommandInput, CreateFlowDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateFlowDefinitionCommand";
    import { CreateHumanTaskUiCommandInput, CreateHumanTaskUiCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateHumanTaskUiCommand";
    import { CreateHyperParameterTuningJobCommandInput, CreateHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateHyperParameterTuningJobCommand";
    import { CreateImageCommandInput, CreateImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateImageCommand";
    import { CreateImageVersionCommandInput, CreateImageVersionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateImageVersionCommand";
    import { CreateInferenceRecommendationsJobCommandInput, CreateInferenceRecommendationsJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateInferenceRecommendationsJobCommand";
    import { CreateLabelingJobCommandInput, CreateLabelingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateLabelingJobCommand";
    import { CreateModelBiasJobDefinitionCommandInput, CreateModelBiasJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelBiasJobDefinitionCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelCommand";
    import { CreateModelExplainabilityJobDefinitionCommandInput, CreateModelExplainabilityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelExplainabilityJobDefinitionCommand";
    import { CreateModelPackageCommandInput, CreateModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelPackageCommand";
    import { CreateModelPackageGroupCommandInput, CreateModelPackageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelPackageGroupCommand";
    import { CreateModelQualityJobDefinitionCommandInput, CreateModelQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateModelQualityJobDefinitionCommand";
    import { CreateMonitoringScheduleCommandInput, CreateMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateMonitoringScheduleCommand";
    import { CreateNotebookInstanceCommandInput, CreateNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateNotebookInstanceCommand";
    import { CreateNotebookInstanceLifecycleConfigCommandInput, CreateNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateNotebookInstanceLifecycleConfigCommand";
    import { CreatePipelineCommandInput, CreatePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePipelineCommand";
    import { CreatePresignedDomainUrlCommandInput, CreatePresignedDomainUrlCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePresignedDomainUrlCommand";
    import { CreatePresignedNotebookInstanceUrlCommandInput, CreatePresignedNotebookInstanceUrlCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreatePresignedNotebookInstanceUrlCommand";
    import { CreateProcessingJobCommandInput, CreateProcessingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateProcessingJobCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateProjectCommand";
    import { CreateStudioLifecycleConfigCommandInput, CreateStudioLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateStudioLifecycleConfigCommand";
    import { CreateTrainingJobCommandInput, CreateTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrainingJobCommand";
    import { CreateTransformJobCommandInput, CreateTransformJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTransformJobCommand";
    import { CreateTrialCommandInput, CreateTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrialCommand";
    import { CreateTrialComponentCommandInput, CreateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateTrialComponentCommand";
    import { CreateUserProfileCommandInput, CreateUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateUserProfileCommand";
    import { CreateWorkforceCommandInput, CreateWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateWorkforceCommand";
    import { CreateWorkteamCommandInput, CreateWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/CreateWorkteamCommand";
    import { DeleteActionCommandInput, DeleteActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteActionCommand";
    import { DeleteAlgorithmCommandInput, DeleteAlgorithmCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAlgorithmCommand";
    import { DeleteAppCommandInput, DeleteAppCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAppCommand";
    import { DeleteAppImageConfigCommandInput, DeleteAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAppImageConfigCommand";
    import { DeleteArtifactCommandInput, DeleteArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteArtifactCommand";
    import { DeleteAssociationCommandInput, DeleteAssociationCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteAssociationCommand";
    import { DeleteCodeRepositoryCommandInput, DeleteCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteCodeRepositoryCommand";
    import { DeleteContextCommandInput, DeleteContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteContextCommand";
    import { DeleteDataQualityJobDefinitionCommandInput, DeleteDataQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDataQualityJobDefinitionCommand";
    import { DeleteDeviceFleetCommandInput, DeleteDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDeviceFleetCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteDomainCommand";
    import { DeleteEdgeDeploymentPlanCommandInput, DeleteEdgeDeploymentPlanCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEdgeDeploymentPlanCommand";
    import { DeleteEdgeDeploymentStageCommandInput, DeleteEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEdgeDeploymentStageCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEndpointCommand";
    import { DeleteEndpointConfigCommandInput, DeleteEndpointConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteEndpointConfigCommand";
    import { DeleteExperimentCommandInput, DeleteExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteExperimentCommand";
    import { DeleteFeatureGroupCommandInput, DeleteFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteFeatureGroupCommand";
    import { DeleteFlowDefinitionCommandInput, DeleteFlowDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteFlowDefinitionCommand";
    import { DeleteHumanTaskUiCommandInput, DeleteHumanTaskUiCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteHumanTaskUiCommand";
    import { DeleteImageCommandInput, DeleteImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteImageCommand";
    import { DeleteImageVersionCommandInput, DeleteImageVersionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteImageVersionCommand";
    import { DeleteModelBiasJobDefinitionCommandInput, DeleteModelBiasJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelBiasJobDefinitionCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelCommand";
    import { DeleteModelExplainabilityJobDefinitionCommandInput, DeleteModelExplainabilityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelExplainabilityJobDefinitionCommand";
    import { DeleteModelPackageCommandInput, DeleteModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageCommand";
    import { DeleteModelPackageGroupCommandInput, DeleteModelPackageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageGroupCommand";
    import { DeleteModelPackageGroupPolicyCommandInput, DeleteModelPackageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelPackageGroupPolicyCommand";
    import { DeleteModelQualityJobDefinitionCommandInput, DeleteModelQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteModelQualityJobDefinitionCommand";
    import { DeleteMonitoringScheduleCommandInput, DeleteMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteMonitoringScheduleCommand";
    import { DeleteNotebookInstanceCommandInput, DeleteNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteNotebookInstanceCommand";
    import { DeleteNotebookInstanceLifecycleConfigCommandInput, DeleteNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteNotebookInstanceLifecycleConfigCommand";
    import { DeletePipelineCommandInput, DeletePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeletePipelineCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteProjectCommand";
    import { DeleteStudioLifecycleConfigCommandInput, DeleteStudioLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteStudioLifecycleConfigCommand";
    import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTagsCommand";
    import { DeleteTrialCommandInput, DeleteTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTrialCommand";
    import { DeleteTrialComponentCommandInput, DeleteTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteTrialComponentCommand";
    import { DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteUserProfileCommand";
    import { DeleteWorkforceCommandInput, DeleteWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteWorkforceCommand";
    import { DeleteWorkteamCommandInput, DeleteWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeleteWorkteamCommand";
    import { DeregisterDevicesCommandInput, DeregisterDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DeregisterDevicesCommand";
    import { DescribeActionCommandInput, DescribeActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeActionCommand";
    import { DescribeAlgorithmCommandInput, DescribeAlgorithmCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAlgorithmCommand";
    import { DescribeAppCommandInput, DescribeAppCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAppCommand";
    import { DescribeAppImageConfigCommandInput, DescribeAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAppImageConfigCommand";
    import { DescribeArtifactCommandInput, DescribeArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeArtifactCommand";
    import { DescribeAutoMLJobCommandInput, DescribeAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeAutoMLJobCommand";
    import { DescribeCodeRepositoryCommandInput, DescribeCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeCodeRepositoryCommand";
    import { DescribeCompilationJobCommandInput, DescribeCompilationJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeCompilationJobCommand";
    import { DescribeContextCommandInput, DescribeContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeContextCommand";
    import { DescribeDataQualityJobDefinitionCommandInput, DescribeDataQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDataQualityJobDefinitionCommand";
    import { DescribeDeviceCommandInput, DescribeDeviceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDeviceCommand";
    import { DescribeDeviceFleetCommandInput, DescribeDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDeviceFleetCommand";
    import { DescribeDomainCommandInput, DescribeDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeDomainCommand";
    import { DescribeEdgeDeploymentPlanCommandInput, DescribeEdgeDeploymentPlanCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEdgeDeploymentPlanCommand";
    import { DescribeEdgePackagingJobCommandInput, DescribeEdgePackagingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEdgePackagingJobCommand";
    import { DescribeEndpointCommandInput, DescribeEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEndpointCommand";
    import { DescribeEndpointConfigCommandInput, DescribeEndpointConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeEndpointConfigCommand";
    import { DescribeExperimentCommandInput, DescribeExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeExperimentCommand";
    import { DescribeFeatureGroupCommandInput, DescribeFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFeatureGroupCommand";
    import { DescribeFeatureMetadataCommandInput, DescribeFeatureMetadataCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFeatureMetadataCommand";
    import { DescribeFlowDefinitionCommandInput, DescribeFlowDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeFlowDefinitionCommand";
    import { DescribeHumanTaskUiCommandInput, DescribeHumanTaskUiCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeHumanTaskUiCommand";
    import { DescribeHyperParameterTuningJobCommandInput, DescribeHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeHyperParameterTuningJobCommand";
    import { DescribeImageCommandInput, DescribeImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeImageCommand";
    import { DescribeImageVersionCommandInput, DescribeImageVersionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeImageVersionCommand";
    import { DescribeInferenceRecommendationsJobCommandInput, DescribeInferenceRecommendationsJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeInferenceRecommendationsJobCommand";
    import { DescribeLabelingJobCommandInput, DescribeLabelingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeLabelingJobCommand";
    import { DescribeLineageGroupCommandInput, DescribeLineageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeLineageGroupCommand";
    import { DescribeModelBiasJobDefinitionCommandInput, DescribeModelBiasJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelBiasJobDefinitionCommand";
    import { DescribeModelCommandInput, DescribeModelCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelCommand";
    import { DescribeModelExplainabilityJobDefinitionCommandInput, DescribeModelExplainabilityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelExplainabilityJobDefinitionCommand";
    import { DescribeModelPackageCommandInput, DescribeModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelPackageCommand";
    import { DescribeModelPackageGroupCommandInput, DescribeModelPackageGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelPackageGroupCommand";
    import { DescribeModelQualityJobDefinitionCommandInput, DescribeModelQualityJobDefinitionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeModelQualityJobDefinitionCommand";
    import { DescribeMonitoringScheduleCommandInput, DescribeMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeMonitoringScheduleCommand";
    import { DescribeNotebookInstanceCommandInput, DescribeNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeNotebookInstanceCommand";
    import { DescribeNotebookInstanceLifecycleConfigCommandInput, DescribeNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeNotebookInstanceLifecycleConfigCommand";
    import { DescribePipelineCommandInput, DescribePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineCommand";
    import { DescribePipelineDefinitionForExecutionCommandInput, DescribePipelineDefinitionForExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineDefinitionForExecutionCommand";
    import { DescribePipelineExecutionCommandInput, DescribePipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribePipelineExecutionCommand";
    import { DescribeProcessingJobCommandInput, DescribeProcessingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeProcessingJobCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeProjectCommand";
    import { DescribeStudioLifecycleConfigCommandInput, DescribeStudioLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeStudioLifecycleConfigCommand";
    import { DescribeSubscribedWorkteamCommandInput, DescribeSubscribedWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeSubscribedWorkteamCommand";
    import { DescribeTrainingJobCommandInput, DescribeTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrainingJobCommand";
    import { DescribeTransformJobCommandInput, DescribeTransformJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTransformJobCommand";
    import { DescribeTrialCommandInput, DescribeTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrialCommand";
    import { DescribeTrialComponentCommandInput, DescribeTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeTrialComponentCommand";
    import { DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeUserProfileCommand";
    import { DescribeWorkforceCommandInput, DescribeWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeWorkforceCommand";
    import { DescribeWorkteamCommandInput, DescribeWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DescribeWorkteamCommand";
    import { DisableSagemakerServicecatalogPortfolioCommandInput, DisableSagemakerServicecatalogPortfolioCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DisableSagemakerServicecatalogPortfolioCommand";
    import { DisassociateTrialComponentCommandInput, DisassociateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/DisassociateTrialComponentCommand";
    import { EnableSagemakerServicecatalogPortfolioCommandInput, EnableSagemakerServicecatalogPortfolioCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/EnableSagemakerServicecatalogPortfolioCommand";
    import { GetDeviceFleetReportCommandInput, GetDeviceFleetReportCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetDeviceFleetReportCommand";
    import { GetLineageGroupPolicyCommandInput, GetLineageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetLineageGroupPolicyCommand";
    import { GetModelPackageGroupPolicyCommandInput, GetModelPackageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetModelPackageGroupPolicyCommand";
    import { GetSagemakerServicecatalogPortfolioStatusCommandInput, GetSagemakerServicecatalogPortfolioStatusCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetSagemakerServicecatalogPortfolioStatusCommand";
    import { GetSearchSuggestionsCommandInput, GetSearchSuggestionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/GetSearchSuggestionsCommand";
    import { ListActionsCommandInput, ListActionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListActionsCommand";
    import { ListAlgorithmsCommandInput, ListAlgorithmsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAlgorithmsCommand";
    import { ListAppImageConfigsCommandInput, ListAppImageConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAppImageConfigsCommand";
    import { ListAppsCommandInput, ListAppsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAppsCommand";
    import { ListArtifactsCommandInput, ListArtifactsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListArtifactsCommand";
    import { ListAssociationsCommandInput, ListAssociationsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAssociationsCommand";
    import { ListAutoMLJobsCommandInput, ListAutoMLJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListAutoMLJobsCommand";
    import { ListCandidatesForAutoMLJobCommandInput, ListCandidatesForAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCandidatesForAutoMLJobCommand";
    import { ListCodeRepositoriesCommandInput, ListCodeRepositoriesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCodeRepositoriesCommand";
    import { ListCompilationJobsCommandInput, ListCompilationJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListCompilationJobsCommand";
    import { ListContextsCommandInput, ListContextsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListContextsCommand";
    import { ListDataQualityJobDefinitionsCommandInput, ListDataQualityJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDataQualityJobDefinitionsCommand";
    import { ListDeviceFleetsCommandInput, ListDeviceFleetsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDeviceFleetsCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDevicesCommand";
    import { ListDomainsCommandInput, ListDomainsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListDomainsCommand";
    import { ListEdgeDeploymentPlansCommandInput, ListEdgeDeploymentPlansCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEdgeDeploymentPlansCommand";
    import { ListEdgePackagingJobsCommandInput, ListEdgePackagingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEdgePackagingJobsCommand";
    import { ListEndpointConfigsCommandInput, ListEndpointConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEndpointConfigsCommand";
    import { ListEndpointsCommandInput, ListEndpointsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListEndpointsCommand";
    import { ListExperimentsCommandInput, ListExperimentsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListExperimentsCommand";
    import { ListFeatureGroupsCommandInput, ListFeatureGroupsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListFeatureGroupsCommand";
    import { ListFlowDefinitionsCommandInput, ListFlowDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListFlowDefinitionsCommand";
    import { ListHumanTaskUisCommandInput, ListHumanTaskUisCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListHumanTaskUisCommand";
    import { ListHyperParameterTuningJobsCommandInput, ListHyperParameterTuningJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListHyperParameterTuningJobsCommand";
    import { ListImagesCommandInput, ListImagesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListImagesCommand";
    import { ListImageVersionsCommandInput, ListImageVersionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListImageVersionsCommand";
    import { ListInferenceRecommendationsJobsCommandInput, ListInferenceRecommendationsJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListInferenceRecommendationsJobsCommand";
    import { ListLabelingJobsCommandInput, ListLabelingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLabelingJobsCommand";
    import { ListLabelingJobsForWorkteamCommandInput, ListLabelingJobsForWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLabelingJobsForWorkteamCommand";
    import { ListLineageGroupsCommandInput, ListLineageGroupsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListLineageGroupsCommand";
    import { ListModelBiasJobDefinitionsCommandInput, ListModelBiasJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelBiasJobDefinitionsCommand";
    import { ListModelExplainabilityJobDefinitionsCommandInput, ListModelExplainabilityJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelExplainabilityJobDefinitionsCommand";
    import { ListModelMetadataCommandInput, ListModelMetadataCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelMetadataCommand";
    import { ListModelPackageGroupsCommandInput, ListModelPackageGroupsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelPackageGroupsCommand";
    import { ListModelPackagesCommandInput, ListModelPackagesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelPackagesCommand";
    import { ListModelQualityJobDefinitionsCommandInput, ListModelQualityJobDefinitionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelQualityJobDefinitionsCommand";
    import { ListModelsCommandInput, ListModelsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListModelsCommand";
    import { ListMonitoringExecutionsCommandInput, ListMonitoringExecutionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListMonitoringExecutionsCommand";
    import { ListMonitoringSchedulesCommandInput, ListMonitoringSchedulesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListMonitoringSchedulesCommand";
    import { ListNotebookInstanceLifecycleConfigsCommandInput, ListNotebookInstanceLifecycleConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListNotebookInstanceLifecycleConfigsCommand";
    import { ListNotebookInstancesCommandInput, ListNotebookInstancesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListNotebookInstancesCommand";
    import { ListPipelineExecutionsCommandInput, ListPipelineExecutionsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineExecutionsCommand";
    import { ListPipelineExecutionStepsCommandInput, ListPipelineExecutionStepsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineExecutionStepsCommand";
    import { ListPipelineParametersForExecutionCommandInput, ListPipelineParametersForExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelineParametersForExecutionCommand";
    import { ListPipelinesCommandInput, ListPipelinesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListPipelinesCommand";
    import { ListProcessingJobsCommandInput, ListProcessingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListProcessingJobsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListProjectsCommand";
    import { ListStageDevicesCommandInput, ListStageDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListStageDevicesCommand";
    import { ListStudioLifecycleConfigsCommandInput, ListStudioLifecycleConfigsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListStudioLifecycleConfigsCommand";
    import { ListSubscribedWorkteamsCommandInput, ListSubscribedWorkteamsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListSubscribedWorkteamsCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTagsCommand";
    import { ListTrainingJobsCommandInput, ListTrainingJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrainingJobsCommand";
    import { ListTrainingJobsForHyperParameterTuningJobCommandInput, ListTrainingJobsForHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrainingJobsForHyperParameterTuningJobCommand";
    import { ListTransformJobsCommandInput, ListTransformJobsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTransformJobsCommand";
    import { ListTrialComponentsCommandInput, ListTrialComponentsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrialComponentsCommand";
    import { ListTrialsCommandInput, ListTrialsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListTrialsCommand";
    import { ListUserProfilesCommandInput, ListUserProfilesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListUserProfilesCommand";
    import { ListWorkforcesCommandInput, ListWorkforcesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListWorkforcesCommand";
    import { ListWorkteamsCommandInput, ListWorkteamsCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/ListWorkteamsCommand";
    import { PutModelPackageGroupPolicyCommandInput, PutModelPackageGroupPolicyCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/PutModelPackageGroupPolicyCommand";
    import { QueryLineageCommandInput, QueryLineageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/QueryLineageCommand";
    import { RegisterDevicesCommandInput, RegisterDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RegisterDevicesCommand";
    import { RenderUiTemplateCommandInput, RenderUiTemplateCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RenderUiTemplateCommand";
    import { RetryPipelineExecutionCommandInput, RetryPipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/RetryPipelineExecutionCommand";
    import { SearchCommandInput, SearchCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SearchCommand";
    import { SendPipelineExecutionStepFailureCommandInput, SendPipelineExecutionStepFailureCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SendPipelineExecutionStepFailureCommand";
    import { SendPipelineExecutionStepSuccessCommandInput, SendPipelineExecutionStepSuccessCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/SendPipelineExecutionStepSuccessCommand";
    import { StartEdgeDeploymentStageCommandInput, StartEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartEdgeDeploymentStageCommand";
    import { StartMonitoringScheduleCommandInput, StartMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartMonitoringScheduleCommand";
    import { StartNotebookInstanceCommandInput, StartNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartNotebookInstanceCommand";
    import { StartPipelineExecutionCommandInput, StartPipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StartPipelineExecutionCommand";
    import { StopAutoMLJobCommandInput, StopAutoMLJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopAutoMLJobCommand";
    import { StopCompilationJobCommandInput, StopCompilationJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopCompilationJobCommand";
    import { StopEdgeDeploymentStageCommandInput, StopEdgeDeploymentStageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopEdgeDeploymentStageCommand";
    import { StopEdgePackagingJobCommandInput, StopEdgePackagingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopEdgePackagingJobCommand";
    import { StopHyperParameterTuningJobCommandInput, StopHyperParameterTuningJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopHyperParameterTuningJobCommand";
    import { StopInferenceRecommendationsJobCommandInput, StopInferenceRecommendationsJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopInferenceRecommendationsJobCommand";
    import { StopLabelingJobCommandInput, StopLabelingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopLabelingJobCommand";
    import { StopMonitoringScheduleCommandInput, StopMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopMonitoringScheduleCommand";
    import { StopNotebookInstanceCommandInput, StopNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopNotebookInstanceCommand";
    import { StopPipelineExecutionCommandInput, StopPipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopPipelineExecutionCommand";
    import { StopProcessingJobCommandInput, StopProcessingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopProcessingJobCommand";
    import { StopTrainingJobCommandInput, StopTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopTrainingJobCommand";
    import { StopTransformJobCommandInput, StopTransformJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/StopTransformJobCommand";
    import { UpdateActionCommandInput, UpdateActionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateActionCommand";
    import { UpdateAppImageConfigCommandInput, UpdateAppImageConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateAppImageConfigCommand";
    import { UpdateArtifactCommandInput, UpdateArtifactCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateArtifactCommand";
    import { UpdateCodeRepositoryCommandInput, UpdateCodeRepositoryCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateCodeRepositoryCommand";
    import { UpdateContextCommandInput, UpdateContextCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateContextCommand";
    import { UpdateDeviceFleetCommandInput, UpdateDeviceFleetCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDeviceFleetCommand";
    import { UpdateDevicesCommandInput, UpdateDevicesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDevicesCommand";
    import { UpdateDomainCommandInput, UpdateDomainCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateDomainCommand";
    import { UpdateEndpointCommandInput, UpdateEndpointCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateEndpointCommand";
    import { UpdateEndpointWeightsAndCapacitiesCommandInput, UpdateEndpointWeightsAndCapacitiesCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateEndpointWeightsAndCapacitiesCommand";
    import { UpdateExperimentCommandInput, UpdateExperimentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateExperimentCommand";
    import { UpdateFeatureGroupCommandInput, UpdateFeatureGroupCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateFeatureGroupCommand";
    import { UpdateFeatureMetadataCommandInput, UpdateFeatureMetadataCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateFeatureMetadataCommand";
    import { UpdateImageCommandInput, UpdateImageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateImageCommand";
    import { UpdateModelPackageCommandInput, UpdateModelPackageCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateModelPackageCommand";
    import { UpdateMonitoringScheduleCommandInput, UpdateMonitoringScheduleCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateMonitoringScheduleCommand";
    import { UpdateNotebookInstanceCommandInput, UpdateNotebookInstanceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateNotebookInstanceCommand";
    import { UpdateNotebookInstanceLifecycleConfigCommandInput, UpdateNotebookInstanceLifecycleConfigCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateNotebookInstanceLifecycleConfigCommand";
    import { UpdatePipelineCommandInput, UpdatePipelineCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdatePipelineCommand";
    import { UpdatePipelineExecutionCommandInput, UpdatePipelineExecutionCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdatePipelineExecutionCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateProjectCommand";
    import { UpdateTrainingJobCommandInput, UpdateTrainingJobCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrainingJobCommand";
    import { UpdateTrialCommandInput, UpdateTrialCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrialCommand";
    import { UpdateTrialComponentCommandInput, UpdateTrialComponentCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateTrialComponentCommand";
    import { UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateUserProfileCommand";
    import { UpdateWorkforceCommandInput, UpdateWorkforceCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateWorkforceCommand";
    import { UpdateWorkteamCommandInput, UpdateWorkteamCommandOutput } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/commands/UpdateWorkteamCommand";
    export type ServiceInputTypes = AddAssociationCommandInput | AddTagsCommandInput | AssociateTrialComponentCommandInput | BatchDescribeModelPackageCommandInput | CreateActionCommandInput | CreateAlgorithmCommandInput | CreateAppCommandInput | CreateAppImageConfigCommandInput | CreateArtifactCommandInput | CreateAutoMLJobCommandInput | CreateCodeRepositoryCommandInput | CreateCompilationJobCommandInput | CreateContextCommandInput | CreateDataQualityJobDefinitionCommandInput | CreateDeviceFleetCommandInput | CreateDomainCommandInput | CreateEdgeDeploymentPlanCommandInput | CreateEdgeDeploymentStageCommandInput | CreateEdgePackagingJobCommandInput | CreateEndpointCommandInput | CreateEndpointConfigCommandInput | CreateExperimentCommandInput | CreateFeatureGroupCommandInput | CreateFlowDefinitionCommandInput | CreateHumanTaskUiCommandInput | CreateHyperParameterTuningJobCommandInput | CreateImageCommandInput | CreateImageVersionCommandInput | CreateInferenceRecommendationsJobCommandInput | CreateLabelingJobCommandInput | CreateModelBiasJobDefinitionCommandInput | CreateModelCommandInput | CreateModelExplainabilityJobDefinitionCommandInput | CreateModelPackageCommandInput | CreateModelPackageGroupCommandInput | CreateModelQualityJobDefinitionCommandInput | CreateMonitoringScheduleCommandInput | CreateNotebookInstanceCommandInput | CreateNotebookInstanceLifecycleConfigCommandInput | CreatePipelineCommandInput | CreatePresignedDomainUrlCommandInput | CreatePresignedNotebookInstanceUrlCommandInput | CreateProcessingJobCommandInput | CreateProjectCommandInput | CreateStudioLifecycleConfigCommandInput | CreateTrainingJobCommandInput | CreateTransformJobCommandInput | CreateTrialCommandInput | CreateTrialComponentCommandInput | CreateUserProfileCommandInput | CreateWorkforceCommandInput | CreateWorkteamCommandInput | DeleteActionCommandInput | DeleteAlgorithmCommandInput | DeleteAppCommandInput | DeleteAppImageConfigCommandInput | DeleteArtifactCommandInput | DeleteAssociationCommandInput | DeleteCodeRepositoryCommandInput | DeleteContextCommandInput | DeleteDataQualityJobDefinitionCommandInput | DeleteDeviceFleetCommandInput | DeleteDomainCommandInput | DeleteEdgeDeploymentPlanCommandInput | DeleteEdgeDeploymentStageCommandInput | DeleteEndpointCommandInput | DeleteEndpointConfigCommandInput | DeleteExperimentCommandInput | DeleteFeatureGroupCommandInput | DeleteFlowDefinitionCommandInput | DeleteHumanTaskUiCommandInput | DeleteImageCommandInput | DeleteImageVersionCommandInput | DeleteModelBiasJobDefinitionCommandInput | DeleteModelCommandInput | DeleteModelExplainabilityJobDefinitionCommandInput | DeleteModelPackageCommandInput | DeleteModelPackageGroupCommandInput | DeleteModelPackageGroupPolicyCommandInput | DeleteModelQualityJobDefinitionCommandInput | DeleteMonitoringScheduleCommandInput | DeleteNotebookInstanceCommandInput | DeleteNotebookInstanceLifecycleConfigCommandInput | DeletePipelineCommandInput | DeleteProjectCommandInput | DeleteStudioLifecycleConfigCommandInput | DeleteTagsCommandInput | DeleteTrialCommandInput | DeleteTrialComponentCommandInput | DeleteUserProfileCommandInput | DeleteWorkforceCommandInput | DeleteWorkteamCommandInput | DeregisterDevicesCommandInput | DescribeActionCommandInput | DescribeAlgorithmCommandInput | DescribeAppCommandInput | DescribeAppImageConfigCommandInput | DescribeArtifactCommandInput | DescribeAutoMLJobCommandInput | DescribeCodeRepositoryCommandInput | DescribeCompilationJobCommandInput | DescribeContextCommandInput | DescribeDataQualityJobDefinitionCommandInput | DescribeDeviceCommandInput | DescribeDeviceFleetCommandInput | DescribeDomainCommandInput | DescribeEdgeDeploymentPlanCommandInput | DescribeEdgePackagingJobCommandInput | DescribeEndpointCommandInput | DescribeEndpointConfigCommandInput | DescribeExperimentCommandInput | DescribeFeatureGroupCommandInput | DescribeFeatureMetadataCommandInput | DescribeFlowDefinitionCommandInput | DescribeHumanTaskUiCommandInput | DescribeHyperParameterTuningJobCommandInput | DescribeImageCommandInput | DescribeImageVersionCommandInput | DescribeInferenceRecommendationsJobCommandInput | DescribeLabelingJobCommandInput | DescribeLineageGroupCommandInput | DescribeModelBiasJobDefinitionCommandInput | DescribeModelCommandInput | DescribeModelExplainabilityJobDefinitionCommandInput | DescribeModelPackageCommandInput | DescribeModelPackageGroupCommandInput | DescribeModelQualityJobDefinitionCommandInput | DescribeMonitoringScheduleCommandInput | DescribeNotebookInstanceCommandInput | DescribeNotebookInstanceLifecycleConfigCommandInput | DescribePipelineCommandInput | DescribePipelineDefinitionForExecutionCommandInput | DescribePipelineExecutionCommandInput | DescribeProcessingJobCommandInput | DescribeProjectCommandInput | DescribeStudioLifecycleConfigCommandInput | DescribeSubscribedWorkteamCommandInput | DescribeTrainingJobCommandInput | DescribeTransformJobCommandInput | DescribeTrialCommandInput | DescribeTrialComponentCommandInput | DescribeUserProfileCommandInput | DescribeWorkforceCommandInput | DescribeWorkteamCommandInput | DisableSagemakerServicecatalogPortfolioCommandInput | DisassociateTrialComponentCommandInput | EnableSagemakerServicecatalogPortfolioCommandInput | GetDeviceFleetReportCommandInput | GetLineageGroupPolicyCommandInput | GetModelPackageGroupPolicyCommandInput | GetSagemakerServicecatalogPortfolioStatusCommandInput | GetSearchSuggestionsCommandInput | ListActionsCommandInput | ListAlgorithmsCommandInput | ListAppImageConfigsCommandInput | ListAppsCommandInput | ListArtifactsCommandInput | ListAssociationsCommandInput | ListAutoMLJobsCommandInput | ListCandidatesForAutoMLJobCommandInput | ListCodeRepositoriesCommandInput | ListCompilationJobsCommandInput | ListContextsCommandInput | ListDataQualityJobDefinitionsCommandInput | ListDeviceFleetsCommandInput | ListDevicesCommandInput | ListDomainsCommandInput | ListEdgeDeploymentPlansCommandInput | ListEdgePackagingJobsCommandInput | ListEndpointConfigsCommandInput | ListEndpointsCommandInput | ListExperimentsCommandInput | ListFeatureGroupsCommandInput | ListFlowDefinitionsCommandInput | ListHumanTaskUisCommandInput | ListHyperParameterTuningJobsCommandInput | ListImageVersionsCommandInput | ListImagesCommandInput | ListInferenceRecommendationsJobsCommandInput | ListLabelingJobsCommandInput | ListLabelingJobsForWorkteamCommandInput | ListLineageGroupsCommandInput | ListModelBiasJobDefinitionsCommandInput | ListModelExplainabilityJobDefinitionsCommandInput | ListModelMetadataCommandInput | ListModelPackageGroupsCommandInput | ListModelPackagesCommandInput | ListModelQualityJobDefinitionsCommandInput | ListModelsCommandInput | ListMonitoringExecutionsCommandInput | ListMonitoringSchedulesCommandInput | ListNotebookInstanceLifecycleConfigsCommandInput | ListNotebookInstancesCommandInput | ListPipelineExecutionStepsCommandInput | ListPipelineExecutionsCommandInput | ListPipelineParametersForExecutionCommandInput | ListPipelinesCommandInput | ListProcessingJobsCommandInput | ListProjectsCommandInput | ListStageDevicesCommandInput | ListStudioLifecycleConfigsCommandInput | ListSubscribedWorkteamsCommandInput | ListTagsCommandInput | ListTrainingJobsCommandInput | ListTrainingJobsForHyperParameterTuningJobCommandInput | ListTransformJobsCommandInput | ListTrialComponentsCommandInput | ListTrialsCommandInput | ListUserProfilesCommandInput | ListWorkforcesCommandInput | ListWorkteamsCommandInput | PutModelPackageGroupPolicyCommandInput | QueryLineageCommandInput | RegisterDevicesCommandInput | RenderUiTemplateCommandInput | RetryPipelineExecutionCommandInput | SearchCommandInput | SendPipelineExecutionStepFailureCommandInput | SendPipelineExecutionStepSuccessCommandInput | StartEdgeDeploymentStageCommandInput | StartMonitoringScheduleCommandInput | StartNotebookInstanceCommandInput | StartPipelineExecutionCommandInput | StopAutoMLJobCommandInput | StopCompilationJobCommandInput | StopEdgeDeploymentStageCommandInput | StopEdgePackagingJobCommandInput | StopHyperParameterTuningJobCommandInput | StopInferenceRecommendationsJobCommandInput | StopLabelingJobCommandInput | StopMonitoringScheduleCommandInput | StopNotebookInstanceCommandInput | StopPipelineExecutionCommandInput | StopProcessingJobCommandInput | StopTrainingJobCommandInput | StopTransformJobCommandInput | UpdateActionCommandInput | UpdateAppImageConfigCommandInput | UpdateArtifactCommandInput | UpdateCodeRepositoryCommandInput | UpdateContextCommandInput | UpdateDeviceFleetCommandInput | UpdateDevicesCommandInput | UpdateDomainCommandInput | UpdateEndpointCommandInput | UpdateEndpointWeightsAndCapacitiesCommandInput | UpdateExperimentCommandInput | UpdateFeatureGroupCommandInput | UpdateFeatureMetadataCommandInput | UpdateImageCommandInput | UpdateModelPackageCommandInput | UpdateMonitoringScheduleCommandInput | UpdateNotebookInstanceCommandInput | UpdateNotebookInstanceLifecycleConfigCommandInput | UpdatePipelineCommandInput | UpdatePipelineExecutionCommandInput | UpdateProjectCommandInput | UpdateTrainingJobCommandInput | UpdateTrialCommandInput | UpdateTrialComponentCommandInput | UpdateUserProfileCommandInput | UpdateWorkforceCommandInput | UpdateWorkteamCommandInput;
    export type ServiceOutputTypes = AddAssociationCommandOutput | AddTagsCommandOutput | AssociateTrialComponentCommandOutput | BatchDescribeModelPackageCommandOutput | CreateActionCommandOutput | CreateAlgorithmCommandOutput | CreateAppCommandOutput | CreateAppImageConfigCommandOutput | CreateArtifactCommandOutput | CreateAutoMLJobCommandOutput | CreateCodeRepositoryCommandOutput | CreateCompilationJobCommandOutput | CreateContextCommandOutput | CreateDataQualityJobDefinitionCommandOutput | CreateDeviceFleetCommandOutput | CreateDomainCommandOutput | CreateEdgeDeploymentPlanCommandOutput | CreateEdgeDeploymentStageCommandOutput | CreateEdgePackagingJobCommandOutput | CreateEndpointCommandOutput | CreateEndpointConfigCommandOutput | CreateExperimentCommandOutput | CreateFeatureGroupCommandOutput | CreateFlowDefinitionCommandOutput | CreateHumanTaskUiCommandOutput | CreateHyperParameterTuningJobCommandOutput | CreateImageCommandOutput | CreateImageVersionCommandOutput | CreateInferenceRecommendationsJobCommandOutput | CreateLabelingJobCommandOutput | CreateModelBiasJobDefinitionCommandOutput | CreateModelCommandOutput | CreateModelExplainabilityJobDefinitionCommandOutput | CreateModelPackageCommandOutput | CreateModelPackageGroupCommandOutput | CreateModelQualityJobDefinitionCommandOutput | CreateMonitoringScheduleCommandOutput | CreateNotebookInstanceCommandOutput | CreateNotebookInstanceLifecycleConfigCommandOutput | CreatePipelineCommandOutput | CreatePresignedDomainUrlCommandOutput | CreatePresignedNotebookInstanceUrlCommandOutput | CreateProcessingJobCommandOutput | CreateProjectCommandOutput | CreateStudioLifecycleConfigCommandOutput | CreateTrainingJobCommandOutput | CreateTransformJobCommandOutput | CreateTrialCommandOutput | CreateTrialComponentCommandOutput | CreateUserProfileCommandOutput | CreateWorkforceCommandOutput | CreateWorkteamCommandOutput | DeleteActionCommandOutput | DeleteAlgorithmCommandOutput | DeleteAppCommandOutput | DeleteAppImageConfigCommandOutput | DeleteArtifactCommandOutput | DeleteAssociationCommandOutput | DeleteCodeRepositoryCommandOutput | DeleteContextCommandOutput | DeleteDataQualityJobDefinitionCommandOutput | DeleteDeviceFleetCommandOutput | DeleteDomainCommandOutput | DeleteEdgeDeploymentPlanCommandOutput | DeleteEdgeDeploymentStageCommandOutput | DeleteEndpointCommandOutput | DeleteEndpointConfigCommandOutput | DeleteExperimentCommandOutput | DeleteFeatureGroupCommandOutput | DeleteFlowDefinitionCommandOutput | DeleteHumanTaskUiCommandOutput | DeleteImageCommandOutput | DeleteImageVersionCommandOutput | DeleteModelBiasJobDefinitionCommandOutput | DeleteModelCommandOutput | DeleteModelExplainabilityJobDefinitionCommandOutput | DeleteModelPackageCommandOutput | DeleteModelPackageGroupCommandOutput | DeleteModelPackageGroupPolicyCommandOutput | DeleteModelQualityJobDefinitionCommandOutput | DeleteMonitoringScheduleCommandOutput | DeleteNotebookInstanceCommandOutput | DeleteNotebookInstanceLifecycleConfigCommandOutput | DeletePipelineCommandOutput | DeleteProjectCommandOutput | DeleteStudioLifecycleConfigCommandOutput | DeleteTagsCommandOutput | DeleteTrialCommandOutput | DeleteTrialComponentCommandOutput | DeleteUserProfileCommandOutput | DeleteWorkforceCommandOutput | DeleteWorkteamCommandOutput | DeregisterDevicesCommandOutput | DescribeActionCommandOutput | DescribeAlgorithmCommandOutput | DescribeAppCommandOutput | DescribeAppImageConfigCommandOutput | DescribeArtifactCommandOutput | DescribeAutoMLJobCommandOutput | DescribeCodeRepositoryCommandOutput | DescribeCompilationJobCommandOutput | DescribeContextCommandOutput | DescribeDataQualityJobDefinitionCommandOutput | DescribeDeviceCommandOutput | DescribeDeviceFleetCommandOutput | DescribeDomainCommandOutput | DescribeEdgeDeploymentPlanCommandOutput | DescribeEdgePackagingJobCommandOutput | DescribeEndpointCommandOutput | DescribeEndpointConfigCommandOutput | DescribeExperimentCommandOutput | DescribeFeatureGroupCommandOutput | DescribeFeatureMetadataCommandOutput | DescribeFlowDefinitionCommandOutput | DescribeHumanTaskUiCommandOutput | DescribeHyperParameterTuningJobCommandOutput | DescribeImageCommandOutput | DescribeImageVersionCommandOutput | DescribeInferenceRecommendationsJobCommandOutput | DescribeLabelingJobCommandOutput | DescribeLineageGroupCommandOutput | DescribeModelBiasJobDefinitionCommandOutput | DescribeModelCommandOutput | DescribeModelExplainabilityJobDefinitionCommandOutput | DescribeModelPackageCommandOutput | DescribeModelPackageGroupCommandOutput | DescribeModelQualityJobDefinitionCommandOutput | DescribeMonitoringScheduleCommandOutput | DescribeNotebookInstanceCommandOutput | DescribeNotebookInstanceLifecycleConfigCommandOutput | DescribePipelineCommandOutput | DescribePipelineDefinitionForExecutionCommandOutput | DescribePipelineExecutionCommandOutput | DescribeProcessingJobCommandOutput | DescribeProjectCommandOutput | DescribeStudioLifecycleConfigCommandOutput | DescribeSubscribedWorkteamCommandOutput | DescribeTrainingJobCommandOutput | DescribeTransformJobCommandOutput | DescribeTrialCommandOutput | DescribeTrialComponentCommandOutput | DescribeUserProfileCommandOutput | DescribeWorkforceCommandOutput | DescribeWorkteamCommandOutput | DisableSagemakerServicecatalogPortfolioCommandOutput | DisassociateTrialComponentCommandOutput | EnableSagemakerServicecatalogPortfolioCommandOutput | GetDeviceFleetReportCommandOutput | GetLineageGroupPolicyCommandOutput | GetModelPackageGroupPolicyCommandOutput | GetSagemakerServicecatalogPortfolioStatusCommandOutput | GetSearchSuggestionsCommandOutput | ListActionsCommandOutput | ListAlgorithmsCommandOutput | ListAppImageConfigsCommandOutput | ListAppsCommandOutput | ListArtifactsCommandOutput | ListAssociationsCommandOutput | ListAutoMLJobsCommandOutput | ListCandidatesForAutoMLJobCommandOutput | ListCodeRepositoriesCommandOutput | ListCompilationJobsCommandOutput | ListContextsCommandOutput | ListDataQualityJobDefinitionsCommandOutput | ListDeviceFleetsCommandOutput | ListDevicesCommandOutput | ListDomainsCommandOutput | ListEdgeDeploymentPlansCommandOutput | ListEdgePackagingJobsCommandOutput | ListEndpointConfigsCommandOutput | ListEndpointsCommandOutput | ListExperimentsCommandOutput | ListFeatureGroupsCommandOutput | ListFlowDefinitionsCommandOutput | ListHumanTaskUisCommandOutput | ListHyperParameterTuningJobsCommandOutput | ListImageVersionsCommandOutput | ListImagesCommandOutput | ListInferenceRecommendationsJobsCommandOutput | ListLabelingJobsCommandOutput | ListLabelingJobsForWorkteamCommandOutput | ListLineageGroupsCommandOutput | ListModelBiasJobDefinitionsCommandOutput | ListModelExplainabilityJobDefinitionsCommandOutput | ListModelMetadataCommandOutput | ListModelPackageGroupsCommandOutput | ListModelPackagesCommandOutput | ListModelQualityJobDefinitionsCommandOutput | ListModelsCommandOutput | ListMonitoringExecutionsCommandOutput | ListMonitoringSchedulesCommandOutput | ListNotebookInstanceLifecycleConfigsCommandOutput | ListNotebookInstancesCommandOutput | ListPipelineExecutionStepsCommandOutput | ListPipelineExecutionsCommandOutput | ListPipelineParametersForExecutionCommandOutput | ListPipelinesCommandOutput | ListProcessingJobsCommandOutput | ListProjectsCommandOutput | ListStageDevicesCommandOutput | ListStudioLifecycleConfigsCommandOutput | ListSubscribedWorkteamsCommandOutput | ListTagsCommandOutput | ListTrainingJobsCommandOutput | ListTrainingJobsForHyperParameterTuningJobCommandOutput | ListTransformJobsCommandOutput | ListTrialComponentsCommandOutput | ListTrialsCommandOutput | ListUserProfilesCommandOutput | ListWorkforcesCommandOutput | ListWorkteamsCommandOutput | PutModelPackageGroupPolicyCommandOutput | QueryLineageCommandOutput | RegisterDevicesCommandOutput | RenderUiTemplateCommandOutput | RetryPipelineExecutionCommandOutput | SearchCommandOutput | SendPipelineExecutionStepFailureCommandOutput | SendPipelineExecutionStepSuccessCommandOutput | StartEdgeDeploymentStageCommandOutput | StartMonitoringScheduleCommandOutput | StartNotebookInstanceCommandOutput | StartPipelineExecutionCommandOutput | StopAutoMLJobCommandOutput | StopCompilationJobCommandOutput | StopEdgeDeploymentStageCommandOutput | StopEdgePackagingJobCommandOutput | StopHyperParameterTuningJobCommandOutput | StopInferenceRecommendationsJobCommandOutput | StopLabelingJobCommandOutput | StopMonitoringScheduleCommandOutput | StopNotebookInstanceCommandOutput | StopPipelineExecutionCommandOutput | StopProcessingJobCommandOutput | StopTrainingJobCommandOutput | StopTransformJobCommandOutput | UpdateActionCommandOutput | UpdateAppImageConfigCommandOutput | UpdateArtifactCommandOutput | UpdateCodeRepositoryCommandOutput | UpdateContextCommandOutput | UpdateDeviceFleetCommandOutput | UpdateDevicesCommandOutput | UpdateDomainCommandOutput | UpdateEndpointCommandOutput | UpdateEndpointWeightsAndCapacitiesCommandOutput | UpdateExperimentCommandOutput | UpdateFeatureGroupCommandOutput | UpdateFeatureMetadataCommandOutput | UpdateImageCommandOutput | UpdateModelPackageCommandOutput | UpdateMonitoringScheduleCommandOutput | UpdateNotebookInstanceCommandOutput | UpdateNotebookInstanceLifecycleConfigCommandOutput | UpdatePipelineCommandOutput | UpdatePipelineExecutionCommandOutput | UpdateProjectCommandOutput | UpdateTrainingJobCommandOutput | UpdateTrialCommandOutput | UpdateTrialComponentCommandOutput | UpdateUserProfileCommandOutput | UpdateWorkforceCommandOutput | UpdateWorkteamCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SageMakerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SageMakerClient class constructor that set the region, credentials and other options.
        */
    export interface SageMakerClientConfig extends SageMakerClientConfigType {
    }
    type SageMakerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SageMakerClient class. This is resolved and normalized from the {@link SageMakerClientConfig | constructor configuration interface}.
        */
    export interface SageMakerClientResolvedConfig extends SageMakerClientResolvedConfigType {
    }
    /**
        * <p>Provides APIs for creating and managing SageMaker resources. </p>
        *         <p>Other Resources:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user">SageMaker Developer
        *                         Guide</a>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html">Amazon Augmented AI
        *                         Runtime API Reference</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class SageMakerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SageMakerClientResolvedConfig> {
            /**
                * The resolved configuration of SageMakerClient class. This is resolved and normalized from the {@link SageMakerClientConfig | constructor configuration interface}.
                */
            readonly config: SageMakerClientResolvedConfig;
            constructor(configuration: SageMakerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType, LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
    import { SageMakerServiceException as __BaseException } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/SageMakerServiceException";
    /**
        * <p>A structure describing the source of an action.</p>
        */
    export interface ActionSource {
            /**
                * <p>The URI of the source.</p>
                */
            SourceUri: string | undefined;
            /**
                * <p>The type of the source.</p>
                */
            SourceType?: string;
            /**
                * <p>The ID of the source.</p>
                */
            SourceId?: string;
    }
    export namespace ActionSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionSource) => any;
    }
    export enum ActionStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping",
            UNKNOWN = "Unknown"
    }
    /**
        * <p>Lists the properties of an <i>action</i>. An action represents an action
        *         or activity. Some examples are a workflow step and a model deployment. Generally, an
        *         action involves at least one input artifact or output artifact.</p>
        */
    export interface ActionSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the action.</p>
                */
            ActionArn?: string;
            /**
                * <p>The name of the action.</p>
                */
            ActionName?: string;
            /**
                * <p>The source of the action.</p>
                */
            Source?: ActionSource;
            /**
                * <p>The type of the action.</p>
                */
            ActionType?: string;
            /**
                * <p>The status of the action.</p>
                */
            Status?: ActionStatus | string;
            /**
                * <p>When the action was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When the action was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace ActionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionSummary) => any;
    }
    export enum AssociationEdgeType {
            ASSOCIATED_WITH = "AssociatedWith",
            CONTRIBUTED_TO = "ContributedTo",
            DERIVED_FROM = "DerivedFrom",
            PRODUCED = "Produced"
    }
    export interface AddAssociationRequest {
            /**
                * <p>The ARN of the source.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the destination.</p>
                */
            DestinationArn: string | undefined;
            /**
                * <p>The type of association. The following are suggested uses for each type. Amazon SageMaker
                *         places no restrictions on their use.</p>
                *          <ul>
                *             <li>
                *                <p>ContributedTo - The source contributed to the destination or had a part in
                *             enabling the destination. For example, the training data contributed to the training
                *             job.</p>
                *             </li>
                *             <li>
                *                <p>AssociatedWith - The source is connected to the destination. For example, an
                *             approval workflow is associated with a model deployment.</p>
                *             </li>
                *             <li>
                *                <p>DerivedFrom - The destination is a modification of the source. For example, a digest
                *             output of a channel input for a processing job is derived from the original inputs.</p>
                *             </li>
                *             <li>
                *                <p>Produced - The source generated the destination. For example, a training job
                *             produced a model artifact.</p>
                *             </li>
                *          </ul>
                */
            AssociationType?: AssociationEdgeType | string;
    }
    export namespace AddAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddAssociationRequest) => any;
    }
    export interface AddAssociationResponse {
            /**
                * <p>The ARN of the source.</p>
                */
            SourceArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the destination.</p>
                */
            DestinationArn?: string;
    }
    export namespace AddAssociationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddAssociationResponse) => any;
    }
    /**
        * <p> You have exceeded an SageMaker resource limit. For example, you might have too many
        *             training jobs created. </p>
        */
    export class ResourceLimitExceeded extends __BaseException {
            readonly name: "ResourceLimitExceeded";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceLimitExceeded, __BaseException>);
    }
    /**
        * <p>Resource being access is not found.</p>
        */
    export class ResourceNotFound extends __BaseException {
            readonly name: "ResourceNotFound";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFound, __BaseException>);
    }
    /**
        * <p>Input object for the model.</p>
        */
    export interface ModelInput {
            /**
                * <p>The input configuration object for the model.</p>
                */
            DataInputConfig: string | undefined;
    }
    export namespace ModelInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelInput) => any;
    }
    /**
        * <p>Describes the Docker container for the model package.</p>
        */
    export interface ModelPackageContainerDefinition {
            /**
                * <p>The DNS host name for the Docker container.</p>
                */
            ContainerHostname?: string;
            /**
                * <p>The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.</p>
                *         <p>If you are using your own custom algorithm instead of an algorithm provided by SageMaker,
                *             the inference code must meet SageMaker requirements. SageMaker supports both
                *             <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
                *             image path formats. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon
                *                 SageMaker</a>.</p>
                */
            Image: string | undefined;
            /**
                * <p>An MD5 hash of the training algorithm that identifies the Docker image used for
                *             training.</p>
                */
            ImageDigest?: string;
            /**
                * <p>The Amazon S3 path where the model artifacts, which result from model training, are stored.
                *             This path must point to a single <code>gzip</code> compressed tar archive
                *             (<code>.tar.gz</code> suffix).</p>
                *         <note>
                *             <p>The model artifacts must be in an S3 bucket that is in the same region as the
                *                 model package.</p>
                *         </note>
                */
            ModelDataUrl?: string;
            /**
                * <p>The Amazon Web Services Marketplace product ID of the model package.</p>
                */
            ProductId?: string;
            /**
                * <p>The environment variables to set in the Docker container. Each key and value in the
                *             <code>Environment</code> string to string map can have length of up to 1024. We
                *             support up to 16 entries in the map.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>A structure with Model Input details.</p>
                */
            ModelInput?: ModelInput;
            /**
                * <p>The machine learning framework of the model package container image.</p>
                */
            Framework?: string;
            /**
                * <p>The framework version of the Model Package Container Image.</p>
                */
            FrameworkVersion?: string;
            /**
                * <p>The name of a pre-trained machine learning benchmarked by
                *            Amazon SageMaker Inference Recommender model that matches your model.
                *            You can find a list of benchmarked models by calling <code>ListModelMetadata</code>.</p>
                */
            NearestModelName?: string;
    }
    export namespace ModelPackageContainerDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageContainerDefinition) => any;
    }
    export enum ProductionVariantInstanceType {
            ML_C4_2XLARGE = "ml.c4.2xlarge",
            ML_C4_4XLARGE = "ml.c4.4xlarge",
            ML_C4_8XLARGE = "ml.c4.8xlarge",
            ML_C4_LARGE = "ml.c4.large",
            ML_C4_XLARGE = "ml.c4.xlarge",
            ML_C5D_18XLARGE = "ml.c5d.18xlarge",
            ML_C5D_2XLARGE = "ml.c5d.2xlarge",
            ML_C5D_4XLARGE = "ml.c5d.4xlarge",
            ML_C5D_9XLARGE = "ml.c5d.9xlarge",
            ML_C5D_LARGE = "ml.c5d.large",
            ML_C5D_XLARGE = "ml.c5d.xlarge",
            ML_C5_18XLARGE = "ml.c5.18xlarge",
            ML_C5_2XLARGE = "ml.c5.2xlarge",
            ML_C5_4XLARGE = "ml.c5.4xlarge",
            ML_C5_9XLARGE = "ml.c5.9xlarge",
            ML_C5_LARGE = "ml.c5.large",
            ML_C5_XLARGE = "ml.c5.xlarge",
            ML_C6I_12XLARGE = "ml.c6i.12xlarge",
            ML_C6I_16XLARGE = "ml.c6i.16xlarge",
            ML_C6I_24XLARGE = "ml.c6i.24xlarge",
            ML_C6I_2XLARGE = "ml.c6i.2xlarge",
            ML_C6I_32XLARGE = "ml.c6i.32xlarge",
            ML_C6I_4XLARGE = "ml.c6i.4xlarge",
            ML_C6I_8XLARGE = "ml.c6i.8xlarge",
            ML_C6I_LARGE = "ml.c6i.large",
            ML_C6I_XLARGE = "ml.c6i.xlarge",
            ML_G4DN_12XLARGE = "ml.g4dn.12xlarge",
            ML_G4DN_16XLARGE = "ml.g4dn.16xlarge",
            ML_G4DN_2XLARGE = "ml.g4dn.2xlarge",
            ML_G4DN_4XLARGE = "ml.g4dn.4xlarge",
            ML_G4DN_8XLARGE = "ml.g4dn.8xlarge",
            ML_G4DN_XLARGE = "ml.g4dn.xlarge",
            ML_G5_12XLARGE = "ml.g5.12xlarge",
            ML_G5_16XLARGE = "ml.g5.16xlarge",
            ML_G5_24XLARGE = "ml.g5.24xlarge",
            ML_G5_2XLARGE = "ml.g5.2xlarge",
            ML_G5_48XLARGE = "ml.g5.48xlarge",
            ML_G5_4XLARGE = "ml.g5.4xlarge",
            ML_G5_8XLARGE = "ml.g5.8xlarge",
            ML_G5_XLARGE = "ml.g5.xlarge",
            ML_INF1_24XLARGE = "ml.inf1.24xlarge",
            ML_INF1_2XLARGE = "ml.inf1.2xlarge",
            ML_INF1_6XLARGE = "ml.inf1.6xlarge",
            ML_INF1_XLARGE = "ml.inf1.xlarge",
            ML_M4_10XLARGE = "ml.m4.10xlarge",
            ML_M4_16XLARGE = "ml.m4.16xlarge",
            ML_M4_2XLARGE = "ml.m4.2xlarge",
            ML_M4_4XLARGE = "ml.m4.4xlarge",
            ML_M4_XLARGE = "ml.m4.xlarge",
            ML_M5D_12XLARGE = "ml.m5d.12xlarge",
            ML_M5D_24XLARGE = "ml.m5d.24xlarge",
            ML_M5D_2XLARGE = "ml.m5d.2xlarge",
            ML_M5D_4XLARGE = "ml.m5d.4xlarge",
            ML_M5D_LARGE = "ml.m5d.large",
            ML_M5D_XLARGE = "ml.m5d.xlarge",
            ML_M5_12XLARGE = "ml.m5.12xlarge",
            ML_M5_24XLARGE = "ml.m5.24xlarge",
            ML_M5_2XLARGE = "ml.m5.2xlarge",
            ML_M5_4XLARGE = "ml.m5.4xlarge",
            ML_M5_LARGE = "ml.m5.large",
            ML_M5_XLARGE = "ml.m5.xlarge",
            ML_P2_16XLARGE = "ml.p2.16xlarge",
            ML_P2_8XLARGE = "ml.p2.8xlarge",
            ML_P2_XLARGE = "ml.p2.xlarge",
            ML_P3_16XLARGE = "ml.p3.16xlarge",
            ML_P3_2XLARGE = "ml.p3.2xlarge",
            ML_P3_8XLARGE = "ml.p3.8xlarge",
            ML_P4D_24XLARGE = "ml.p4d.24xlarge",
            ML_R5D_12XLARGE = "ml.r5d.12xlarge",
            ML_R5D_24XLARGE = "ml.r5d.24xlarge",
            ML_R5D_2XLARGE = "ml.r5d.2xlarge",
            ML_R5D_4XLARGE = "ml.r5d.4xlarge",
            ML_R5D_LARGE = "ml.r5d.large",
            ML_R5D_XLARGE = "ml.r5d.xlarge",
            ML_R5_12XLARGE = "ml.r5.12xlarge",
            ML_R5_24XLARGE = "ml.r5.24xlarge",
            ML_R5_2XLARGE = "ml.r5.2xlarge",
            ML_R5_4XLARGE = "ml.r5.4xlarge",
            ML_R5_LARGE = "ml.r5.large",
            ML_R5_XLARGE = "ml.r5.xlarge",
            ML_T2_2XLARGE = "ml.t2.2xlarge",
            ML_T2_LARGE = "ml.t2.large",
            ML_T2_MEDIUM = "ml.t2.medium",
            ML_T2_XLARGE = "ml.t2.xlarge"
    }
    export enum TransformInstanceType {
            ML_C4_2XLARGE = "ml.c4.2xlarge",
            ML_C4_4XLARGE = "ml.c4.4xlarge",
            ML_C4_8XLARGE = "ml.c4.8xlarge",
            ML_C4_XLARGE = "ml.c4.xlarge",
            ML_C5_18XLARGE = "ml.c5.18xlarge",
            ML_C5_2XLARGE = "ml.c5.2xlarge",
            ML_C5_4XLARGE = "ml.c5.4xlarge",
            ML_C5_9XLARGE = "ml.c5.9xlarge",
            ML_C5_XLARGE = "ml.c5.xlarge",
            ML_G4DN_12XLARGE = "ml.g4dn.12xlarge",
            ML_G4DN_16XLARGE = "ml.g4dn.16xlarge",
            ML_G4DN_2XLARGE = "ml.g4dn.2xlarge",
            ML_G4DN_4XLARGE = "ml.g4dn.4xlarge",
            ML_G4DN_8XLARGE = "ml.g4dn.8xlarge",
            ML_G4DN_XLARGE = "ml.g4dn.xlarge",
            ML_M4_10XLARGE = "ml.m4.10xlarge",
            ML_M4_16XLARGE = "ml.m4.16xlarge",
            ML_M4_2XLARGE = "ml.m4.2xlarge",
            ML_M4_4XLARGE = "ml.m4.4xlarge",
            ML_M4_XLARGE = "ml.m4.xlarge",
            ML_M5_12XLARGE = "ml.m5.12xlarge",
            ML_M5_24XLARGE = "ml.m5.24xlarge",
            ML_M5_2XLARGE = "ml.m5.2xlarge",
            ML_M5_4XLARGE = "ml.m5.4xlarge",
            ML_M5_LARGE = "ml.m5.large",
            ML_M5_XLARGE = "ml.m5.xlarge",
            ML_P2_16XLARGE = "ml.p2.16xlarge",
            ML_P2_8XLARGE = "ml.p2.8xlarge",
            ML_P2_XLARGE = "ml.p2.xlarge",
            ML_P3_16XLARGE = "ml.p3.16xlarge",
            ML_P3_2XLARGE = "ml.p3.2xlarge",
            ML_P3_8XLARGE = "ml.p3.8xlarge"
    }
    /**
        * <p>A structure of additional Inference Specification. Additional Inference Specification
        *             specifies details about inference jobs that can be run with models based on
        *             this model package</p>
        */
    export interface AdditionalInferenceSpecificationDefinition {
            /**
                * <p>A unique name to identify the additional inference specification. The name must
                *            be unique within the list of your additional inference specifications for a
                *            particular model package.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the additional Inference specification</p>
                */
            Description?: string;
            /**
                * <p>The Amazon ECR registry path of the Docker image that contains the inference code.</p>
                */
            Containers: ModelPackageContainerDefinition[] | undefined;
            /**
                * <p>A list of the instance types on which a transformation job can be run
                *            or on which an endpoint can be deployed.</p>
                */
            SupportedTransformInstanceTypes?: (TransformInstanceType | string)[];
            /**
                * <p>A list of the instance types that are used to generate inferences in real-time.</p>
                */
            SupportedRealtimeInferenceInstanceTypes?: (ProductionVariantInstanceType | string)[];
            /**
                * <p>The supported MIME types for the input data.</p>
                */
            SupportedContentTypes?: string[];
            /**
                * <p>The supported MIME types for the output data.</p>
                */
            SupportedResponseMIMETypes?: string[];
    }
    export namespace AdditionalInferenceSpecificationDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdditionalInferenceSpecificationDefinition) => any;
    }
    /**
        * <p>A tag object that consists of a key and an optional value, used to manage metadata
        *             for SageMaker Amazon Web Services resources.</p>
        *         <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs,
        *             batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and
        *             endpoints. For more information on adding tags to SageMaker resources, see <a>AddTags</a>.</p>
        *         <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see
        *             <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
        *                 resources</a>. For advice on best practices for managing Amazon Web Services resources with
        *             tagging, see <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging
        *                 Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p>
        */
    export interface Tag {
            /**
                * <p>The tag key. Tag keys must be unique per resource.</p>
                */
            Key: string | undefined;
            /**
                * <p>The tag value.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface AddTagsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to tag.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace AddTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsInput) => any;
    }
    export interface AddTagsOutput {
            /**
                * <p>A list of tags associated with the SageMaker resource.</p>
                */
            Tags?: Tag[];
    }
    export namespace AddTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsOutput) => any;
    }
    /**
        * <p>Edge Manager agent version.</p>
        */
    export interface AgentVersion {
            /**
                * <p>Version of the agent.</p>
                */
            Version: string | undefined;
            /**
                * <p>The number of Edge Manager agents.</p>
                */
            AgentCount: number | undefined;
    }
    export namespace AgentVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AgentVersion) => any;
    }
    /**
        * <p>An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.</p>
        */
    export interface Alarm {
            /**
                * <p>The name of a CloudWatch alarm in your account.</p>
                */
            AlarmName?: string;
    }
    export namespace Alarm {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Alarm) => any;
    }
    export enum AlgorithmSortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    /**
        * <p>Specifies a metric that the training algorithm
        *             writes
        *             to <code>stderr</code> or <code>stdout</code>. SageMakerhyperparameter
        *             tuning captures
        *             all
        *             defined metrics.
        *             You
        *             specify one metric that a hyperparameter tuning job uses as its
        *             objective metric to choose the best training job.</p>
        */
    export interface MetricDefinition {
            /**
                * <p>The name of the metric.</p>
                */
            Name: string | undefined;
            /**
                * <p>A regular expression that searches the output of a training job and gets the value of
                *             the metric. For more information about using regular expressions to define metrics, see
                *                 <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics.html">Defining
                *                 Objective Metrics</a>.</p>
                */
            Regex: string | undefined;
    }
    export namespace MetricDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDefinition) => any;
    }
    export enum TrainingInputMode {
            FASTFILE = "FastFile",
            FILE = "File",
            PIPE = "Pipe"
    }
    /**
        * <p>Specifies the training algorithm to use in a <a>CreateTrainingJob</a>
        *             request.</p>
        *         <p>For more information about algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For
        *             information about using your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon
        *                 SageMaker</a>. </p>
        */
    export interface AlgorithmSpecification {
            /**
                * <p>The registry path of the Docker image
                *              that contains the training algorithm.
                *             For information about docker registry paths for SageMaker built-in algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Docker Registry Paths and Example Code</a> in the <i>Amazon SageMaker developer guide</i>.
                *                 SageMaker supports both <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
                *             image path formats. For more information about using your custom training container, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon SageMaker</a>.</p>
                *         <note>
                *             <p>You must specify either the algorithm name to the <code>AlgorithmName</code> parameter
                *                 or the image URI of the algorithm container
                *                 to the <code>TrainingImage</code> parameter.</p>
                *             <p>For more information, see the note in the <code>AlgorithmName</code> parameter description.</p>
                *         </note>
                */
            TrainingImage?: string;
            /**
                * <p>The name of the algorithm resource to use for the training job. This must be an
                *             algorithm resource that you created or subscribe to on Amazon Web Services Marketplace.</p>
                *         <note>
                *             <p>You must specify either the algorithm name to the <code>AlgorithmName</code> parameter
                *                 or the image URI of the algorithm container
                *                 to the <code>TrainingImage</code> parameter.</p>
                *             <p>Note that the <code>AlgorithmName</code> parameter is mutually exclusive
                *                 with the <code>TrainingImage</code> parameter.
                *                 If you specify a value for the <code>AlgorithmName</code> parameter,
                *                 you can't specify a value for <code>TrainingImage</code>, and vice versa.</p>
                *             <p>If you specify values for both parameters, the training job might break; if you don't specify
                *                 any value for both parameters, the training job might raise a <code>null</code> error.</p>
                *         </note>
                */
            AlgorithmName?: string;
            /**
                * <p>The training input mode that the algorithm supports. For more information about input modes, see
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p>
                *
                *         <p>
                *             <b>Pipe mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly
                *             from Amazon S3 to the container.</p>
                *
                *         <p>
                *             <b>File mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>File</code> mode, SageMaker
                *             downloads the training data from S3 to the provisioned ML storage volume, and mounts the
                *             directory to the Docker volume for the training container.</p>
                *         <p>You must provision the ML storage volume with sufficient capacity
                *             to accommodate the data downloaded from S3. In addition to the training data, the ML
                *             storage volume also stores the output model. The algorithm container uses the ML storage
                *             volume to also store intermediate information, if any.</p>
                *         <p>For distributed algorithms, training data is distributed uniformly.
                *             Your training duration is predictable if the input data objects sizes are
                *             approximately the same. SageMaker does not split the files any further for model training.
                *             If the object sizes are skewed, training won't be optimal as the data distribution is also
                *             skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in
                *             training.</p>
                *
                *         <p>
                *             <b>FastFile mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly
                *             from S3 to the container with no code changes, and provides file system access to
                *             the data. Users can author their training script to interact with these files as if
                *             they were stored on disk.</p>
                *         <p>
                *             <code>FastFile</code> mode works best when the data is read sequentially.
                *             Augmented manifest files aren't supported.
                *             The startup time is lower when there are fewer files in the S3 bucket provided.</p>
                */
            TrainingInputMode: TrainingInputMode | string | undefined;
            /**
                * <p>A list of metric definition objects. Each object specifies the metric name and regular
                *             expressions used to parse algorithm logs. SageMaker publishes each metric to Amazon CloudWatch.</p>
                */
            MetricDefinitions?: MetricDefinition[];
            /**
                * <p>To generate and save time-series metrics during training, set to <code>true</code>.
                *             The default is <code>false</code> and time-series metrics aren't generated except in the
                *             following cases:</p>
                *         <ul>
                *             <li>
                *                 <p>You use one of the SageMaker built-in algorithms</p>
                *             </li>
                *             <li>
                *                 <p>You use one of the following <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html">Prebuilt SageMaker Docker Images</a>:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Tensorflow (version >= 1.15)</p>
                *                     </li>
                *                   <li>
                *                         <p>MXNet (version >= 1.6)</p>
                *                     </li>
                *                   <li>
                *                         <p>PyTorch (version >= 1.3)</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>You specify at least one <a>MetricDefinition</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            EnableSageMakerMetricsTimeSeries?: boolean;
    }
    export namespace AlgorithmSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlgorithmSpecification) => any;
    }
    export enum AlgorithmStatus {
            COMPLETED = "Completed",
            DELETING = "Deleting",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            PENDING = "Pending"
    }
    export enum DetailedAlgorithmStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            NOT_STARTED = "NotStarted"
    }
    /**
        * <p>Represents the overall status of an algorithm.</p>
        */
    export interface AlgorithmStatusItem {
            /**
                * <p>The name of the algorithm for which the overall status is being reported.</p>
                */
            Name: string | undefined;
            /**
                * <p>The current status.</p>
                */
            Status: DetailedAlgorithmStatus | string | undefined;
            /**
                * <p>if the overall status is <code>Failed</code>, the reason for the failure.</p>
                */
            FailureReason?: string;
    }
    export namespace AlgorithmStatusItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlgorithmStatusItem) => any;
    }
    /**
        * <p>Specifies the validation and image scan statuses of the algorithm.</p>
        */
    export interface AlgorithmStatusDetails {
            /**
                * <p>The status of algorithm validation.</p>
                */
            ValidationStatuses?: AlgorithmStatusItem[];
            /**
                * <p>The status of the scan of the algorithm's Docker image container.</p>
                */
            ImageScanStatuses?: AlgorithmStatusItem[];
    }
    export namespace AlgorithmStatusDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlgorithmStatusDetails) => any;
    }
    /**
        * <p>Provides summary information about an algorithm.</p>
        */
    export interface AlgorithmSummary {
            /**
                * <p>The name of the algorithm that is described by the summary.</p>
                */
            AlgorithmName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the algorithm.</p>
                */
            AlgorithmArn: string | undefined;
            /**
                * <p>A brief description of the algorithm.</p>
                */
            AlgorithmDescription?: string;
            /**
                * <p>A timestamp that shows when the algorithm was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The overall status of the algorithm.</p>
                */
            AlgorithmStatus: AlgorithmStatus | string | undefined;
    }
    export namespace AlgorithmSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlgorithmSummary) => any;
    }
    export enum CompressionType {
            GZIP = "Gzip",
            NONE = "None"
    }
    export enum FileSystemAccessMode {
            RO = "ro",
            RW = "rw"
    }
    export enum FileSystemType {
            EFS = "EFS",
            FSXLUSTRE = "FSxLustre"
    }
    /**
        * <p>Specifies a file system data source for a channel.</p>
        */
    export interface FileSystemDataSource {
            /**
                * <p>The file system id.</p>
                */
            FileSystemId: string | undefined;
            /**
                * <p>The access mode of the mount of the directory associated with the channel. A directory
                *             can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write)
                *             mode.</p>
                */
            FileSystemAccessMode: FileSystemAccessMode | string | undefined;
            /**
                * <p>The file system type. </p>
                */
            FileSystemType: FileSystemType | string | undefined;
            /**
                * <p>The full path to the directory to associate with the channel.</p>
                */
            DirectoryPath: string | undefined;
    }
    export namespace FileSystemDataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileSystemDataSource) => any;
    }
    export enum S3DataDistribution {
            FULLY_REPLICATED = "FullyReplicated",
            SHARDED_BY_S3_KEY = "ShardedByS3Key"
    }
    export enum S3DataType {
            AUGMENTED_MANIFEST_FILE = "AugmentedManifestFile",
            MANIFEST_FILE = "ManifestFile",
            S3_PREFIX = "S3Prefix"
    }
    /**
        * <p>Describes the S3 data source.</p>
        */
    export interface S3DataSource {
            /**
                * <p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix.
                *             SageMaker uses all objects that match the specified key name prefix for model training. </p>
                *         <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that
                *             is a manifest file containing a list of object keys that you want SageMaker to use for model
                *             training. </p>
                *         <p>If you choose <code>AugmentedManifestFile</code>, S3Uri identifies an object that is
                *             an augmented manifest file in JSON lines format. This file contains the data you want to
                *             use for model training. <code>AugmentedManifestFile</code> can only be used if the
                *             Channel's input mode is <code>Pipe</code>.</p>
                */
            S3DataType: S3DataType | string | undefined;
            /**
                * <p>Depending on the value specified for the <code>S3DataType</code>, identifies either
                *             a key name prefix or a manifest. For example: </p>
                *         <ul>
                *             <li>
                *                 <p> A key name prefix might look like this:
                *                         <code>s3://bucketname/exampleprefix</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p> A manifest might look like this:
                *                         <code>s3://bucketname/example.manifest</code>
                *                 </p>
                *                 <p> A manifest is an S3 object which is a JSON file consisting of an array of
                *                     elements. The first element is a prefix which is followed by one or more
                *                     suffixes. SageMaker appends the suffix elements to the prefix to get a full set
                *                     of <code>S3Uri</code>. Note that the prefix must be a valid non-empty
                *                         <code>S3Uri</code> that precludes users from specifying a manifest whose
                *                     individual <code>S3Uri</code> is sourced from different S3 buckets.</p>
                *                 <p> The following code example shows a valid manifest format: </p>
                *                 <p>
                *                     <code>[ {"prefix": "s3://customer_bucket/some/prefix/"},</code>
                *                 </p>
                *                 <p>
                *                     <code> "relative/path/to/custdata-1",</code>
                *                 </p>
                *                 <p>
                *                     <code> "relative/path/custdata-2",</code>
                *                 </p>
                *                 <p>
                *                     <code> ...</code>
                *                 </p>
                *                 <p>
                *                     <code> "relative/path/custdata-N"</code>
                *                 </p>
                *                 <p>
                *                     <code>]</code>
                *                 </p>
                *                 <p> This JSON is equivalent to the following <code>S3Uri</code>
                *                     list:</p>
                *                 <p>
                *                     <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
                *                 </p>
                *                 <p>
                *                     <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
                *                 </p>
                *                 <p>
                *                     <code>...</code>
                *                 </p>
                *                 <p>
                *                     <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
                *                 </p>
                *                 <p>The complete set of <code>S3Uri</code> in this manifest is the input data
                *                     for the channel for this data source. The object that each <code>S3Uri</code>
                *                     points to must be readable by the IAM role that SageMaker uses to perform tasks on
                *                     your behalf. </p>
                *             </li>
                *          </ul>
                */
            S3Uri: string | undefined;
            /**
                * <p>If you want SageMaker to replicate the entire dataset on each ML compute instance that
                *             is launched for model training, specify <code>FullyReplicated</code>. </p>
                *         <p>If you want SageMaker to replicate a subset of data on each ML compute instance that is
                *             launched for model training, specify <code>ShardedByS3Key</code>. If there are
                *                 <i>n</i> ML compute instances launched for a training job, each
                *             instance gets approximately 1/<i>n</i> of the number of S3 objects. In
                *             this case, model training on each machine uses only the subset of training data. </p>
                *         <p>Don't choose more ML compute instances for training than available S3 objects. If
                *             you do, some nodes won't get any data and you will pay for nodes that aren't getting any
                *             training data. This applies in both File and Pipe modes. Keep this in mind when
                *             developing algorithms. </p>
                *         <p>In distributed training, where you use multiple ML compute EC2 instances, you might
                *             choose <code>ShardedByS3Key</code>. If the algorithm requires copying training data to
                *             the ML storage volume (when <code>TrainingInputMode</code> is set to <code>File</code>),
                *             this copies 1/<i>n</i> of the number of objects. </p>
                */
            S3DataDistributionType?: S3DataDistribution | string;
            /**
                * <p>A list of one or more attribute names to use that are found in a specified augmented
                *             manifest file.</p>
                */
            AttributeNames?: string[];
            /**
                * <p>A list of names of instance groups that get data
                *             from the S3 data source.</p>
                */
            InstanceGroupNames?: string[];
    }
    export namespace S3DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3DataSource) => any;
    }
    /**
        * <p>Describes the location of the channel data.</p>
        */
    export interface DataSource {
            /**
                * <p>The S3 location of the data source that is associated with a channel.</p>
                */
            S3DataSource?: S3DataSource;
            /**
                * <p>The file system that is associated with a channel.</p>
                */
            FileSystemDataSource?: FileSystemDataSource;
    }
    export namespace DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSource) => any;
    }
    export enum RecordWrapper {
            NONE = "None",
            RECORDIO = "RecordIO"
    }
    /**
        * <p>A configuration for a shuffle option for input data in a channel. If you use
        *                 <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key prefix
        *             matches are shuffled. If you use <code>ManifestFile</code>, the order of the S3 object
        *             references in the <code>ManifestFile</code> is shuffled. If you use
        *                 <code>AugmentedManifestFile</code>, the order of the JSON lines in the
        *                 <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined
        *             using the <code>Seed</code> value.</p>
        *         <p>For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling is done at
        *             the start of every epoch. With large datasets, this ensures that the order of the
        *             training data is different for each epoch, and it helps reduce bias and possible
        *             overfitting. In a multi-node training job when <code>ShuffleConfig</code> is combined
        *             with <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data is
        *             shuffled across nodes so that the content sent to a particular node on the first epoch
        *             might be sent to a different node on the second epoch.</p>
        */
    export interface ShuffleConfig {
            /**
                * <p>Determines the shuffling order in <code>ShuffleConfig</code> value.</p>
                */
            Seed: number | undefined;
    }
    export namespace ShuffleConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ShuffleConfig) => any;
    }
    /**
        * <p>A channel is a named input source that training algorithms can consume. </p>
        */
    export interface Channel {
            /**
                * <p>The name of the channel. </p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The location of the channel data.</p>
                */
            DataSource: DataSource | undefined;
            /**
                * <p>The MIME type of the data.</p>
                */
            ContentType?: string;
            /**
                * <p>If training data is compressed, the compression type. The default value is
                *                 <code>None</code>. <code>CompressionType</code> is used only in Pipe input mode. In
                *             File mode, leave this field unset or set it to None.</p>
                */
            CompressionType?: CompressionType | string;
            /**
                * <p></p>
                *         <p>Specify RecordIO as the value when input data is in raw format but the training
                *             algorithm requires the RecordIO format. In this case, SageMaker wraps each individual S3
                *             object in a RecordIO record. If the input data is already in RecordIO format, you don't
                *             need to set this attribute. For more information, see <a href="https://mxnet.apache.org/api/architecture/note_data_loading#data-format">Create
                *                 a Dataset Using RecordIO</a>. </p>
                *         <p>In File mode, leave this field unset or set it to None.</p>
                */
            RecordWrapperType?: RecordWrapper | string;
            /**
                * <p>(Optional) The input mode to use for the data channel in a training job. If you don't
                *             set a value for <code>InputMode</code>, SageMaker uses the value set for
                *                 <code>TrainingInputMode</code>. Use this parameter to override the
                *                 <code>TrainingInputMode</code> setting in a <a>AlgorithmSpecification</a>
                *             request when you have a channel that needs a different input mode from the training
                *             job's general setting. To download the data from Amazon Simple Storage Service (Amazon S3) to the provisioned ML
                *             storage volume, and mount the directory to a Docker volume, use <code>File</code> input
                *             mode. To stream data directly from Amazon S3 to the container, choose <code>Pipe</code> input
                *             mode.</p>
                *         <p>To use a model for incremental training, choose <code>File</code> input model.</p>
                */
            InputMode?: TrainingInputMode | string;
            /**
                * <p>A configuration for a shuffle option for input data in a channel. If you use
                *                 <code>S3Prefix</code> for <code>S3DataType</code>, this shuffles the results of the
                *             S3 key prefix matches. If you use <code>ManifestFile</code>, the order of the S3 object
                *             references in the <code>ManifestFile</code> is shuffled. If you use
                *                 <code>AugmentedManifestFile</code>, the order of the JSON lines in the
                *                 <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined
                *             using the <code>Seed</code> value.</p>
                *         <p>For Pipe input mode, shuffling is done at the start of every epoch. With large
                *             datasets this ensures that the order of the training data is different for each epoch,
                *             it helps reduce bias and possible overfitting. In a multi-node training job when
                *             ShuffleConfig is combined with <code>S3DataDistributionType</code> of
                *                 <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content
                *             sent to a particular node on the first epoch might be sent to a different node on the
                *             second epoch.</p>
                */
            ShuffleConfig?: ShuffleConfig;
    }
    export namespace Channel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Channel) => any;
    }
    /**
        * <p>Provides information about how to store model training results (model
        *             artifacts).</p>
        */
    export interface OutputDataConfig {
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the model artifacts at rest using
                *             Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following
                *             formats: </p>
                *         <ul>
                *             <li>
                *                 <p>// KMS Key ID</p>
                *                 <p>
                *                     <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                *                 <p>
                *                     <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>// KMS Key Alias</p>
                *                 <p>
                *                     <code>"alias/ExampleAlias"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>// Amazon Resource Name (ARN) of a KMS Key Alias</p>
                *                 <p>
                *                     <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>If you use a KMS key ID or an alias of your KMS key, the SageMaker execution role must
                *             include permissions to call <code>kms:Encrypt</code>. If you don't provide a KMS key ID,
                *             SageMaker uses the default KMS key for Amazon S3 for your role's account. SageMaker uses server-side
                *             encryption with KMS-managed keys for <code>OutputDataConfig</code>. If you use a bucket
                *             policy with an <code>s3:PutObject</code> permission that only allows objects with
                *             server-side encryption, set the condition key of
                *                 <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For more
                *             information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">KMS-Managed Encryption
                *                 Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i>
                *          </p>
                *         <p>The KMS key policy must grant permission to the IAM role that you specify in your
                *                 <code>CreateTrainingJob</code>, <code>CreateTransformJob</code>, or
                *                 <code>CreateHyperParameterTuningJob</code> requests. For more information, see
                *                 <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
                *                     Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer
                *                 Guide</i>.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Identifies the S3 path where you want SageMaker to store the model artifacts. For
                *             example, <code>s3://bucket-name/key-name-prefix</code>. </p>
                */
            S3OutputPath: string | undefined;
    }
    export namespace OutputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputDataConfig) => any;
    }
    export enum TrainingInstanceType {
            ML_C4_2XLARGE = "ml.c4.2xlarge",
            ML_C4_4XLARGE = "ml.c4.4xlarge",
            ML_C4_8XLARGE = "ml.c4.8xlarge",
            ML_C4_XLARGE = "ml.c4.xlarge",
            ML_C5N_18XLARGE = "ml.c5n.18xlarge",
            ML_C5N_2XLARGE = "ml.c5n.2xlarge",
            ML_C5N_4XLARGE = "ml.c5n.4xlarge",
            ML_C5N_9XLARGE = "ml.c5n.9xlarge",
            ML_C5N_XLARGE = "ml.c5n.xlarge",
            ML_C5_18XLARGE = "ml.c5.18xlarge",
            ML_C5_2XLARGE = "ml.c5.2xlarge",
            ML_C5_4XLARGE = "ml.c5.4xlarge",
            ML_C5_9XLARGE = "ml.c5.9xlarge",
            ML_C5_XLARGE = "ml.c5.xlarge",
            ML_G4DN_12XLARGE = "ml.g4dn.12xlarge",
            ML_G4DN_16XLARGE = "ml.g4dn.16xlarge",
            ML_G4DN_2XLARGE = "ml.g4dn.2xlarge",
            ML_G4DN_4XLARGE = "ml.g4dn.4xlarge",
            ML_G4DN_8XLARGE = "ml.g4dn.8xlarge",
            ML_G4DN_XLARGE = "ml.g4dn.xlarge",
            ML_G5_12XLARGE = "ml.g5.12xlarge",
            ML_G5_16XLARGE = "ml.g5.16xlarge",
            ML_G5_24XLARGE = "ml.g5.24xlarge",
            ML_G5_2XLARGE = "ml.g5.2xlarge",
            ML_G5_48XLARGE = "ml.g5.48xlarge",
            ML_G5_4XLARGE = "ml.g5.4xlarge",
            ML_G5_8XLARGE = "ml.g5.8xlarge",
            ML_G5_XLARGE = "ml.g5.xlarge",
            ML_M4_10XLARGE = "ml.m4.10xlarge",
            ML_M4_16XLARGE = "ml.m4.16xlarge",
            ML_M4_2XLARGE = "ml.m4.2xlarge",
            ML_M4_4XLARGE = "ml.m4.4xlarge",
            ML_M4_XLARGE = "ml.m4.xlarge",
            ML_M5_12XLARGE = "ml.m5.12xlarge",
            ML_M5_24XLARGE = "ml.m5.24xlarge",
            ML_M5_2XLARGE = "ml.m5.2xlarge",
            ML_M5_4XLARGE = "ml.m5.4xlarge",
            ML_M5_LARGE = "ml.m5.large",
            ML_M5_XLARGE = "ml.m5.xlarge",
            ML_P2_16XLARGE = "ml.p2.16xlarge",
            ML_P2_8XLARGE = "ml.p2.8xlarge",
            ML_P2_XLARGE = "ml.p2.xlarge",
            ML_P3DN_24XLARGE = "ml.p3dn.24xlarge",
            ML_P3_16XLARGE = "ml.p3.16xlarge",
            ML_P3_2XLARGE = "ml.p3.2xlarge",
            ML_P3_8XLARGE = "ml.p3.8xlarge",
            ML_P4D_24XLARGE = "ml.p4d.24xlarge"
    }
    /**
        * <p>Defines an instance group for heterogeneous cluster training.
        *             When requesting a training job using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> API,
        *             you can configure multiple instance groups .</p>
        */
    export interface InstanceGroup {
            /**
                * <p>Specifies the instance type of the instance group.</p>
                */
            InstanceType: TrainingInstanceType | string | undefined;
            /**
                * <p>Specifies the number of instances of the instance group.</p>
                */
            InstanceCount: number | undefined;
            /**
                * <p>Specifies the name of the instance group.</p>
                */
            InstanceGroupName: string | undefined;
    }
    export namespace InstanceGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceGroup) => any;
    }
    /**
        * <p>Describes the resources, including ML compute instances and ML storage volumes, to
        *             use for model training. </p>
        */
    export interface ResourceConfig {
            /**
                * <p>The ML compute instance type. </p>
                */
            InstanceType?: TrainingInstanceType | string;
            /**
                * <p>The number of ML compute instances to use. For distributed training, provide a
                *             value greater than 1. </p>
                */
            InstanceCount?: number;
            /**
                * <p>The size of the ML storage volume that you want to provision. </p>
                *         <p>ML storage volumes store model artifacts and incremental states. Training
                *             algorithms might also use the ML storage volume for scratch space. If you want to store
                *             the training data in the ML storage volume, choose <code>File</code> as the
                *                 <code>TrainingInputMode</code> in the algorithm specification. </p>
                *         <p>You must specify sufficient ML storage for your scenario. </p>
                *         <note>
                *             <p> SageMaker supports only the General Purpose SSD (gp2) ML storage volume type.
                *             </p>
                *         </note>
                *         <note>
                *             <p>Certain Nitro-based instances include local storage with a fixed total size,
                *                 dependent on the instance type. When using these instances for training, SageMaker mounts
                *                 the local instance storage instead of Amazon EBS gp2 storage. You can't request a
                *                     <code>VolumeSizeInGB</code> greater than the total size of the local instance
                *                 storage.</p>
                *             <p>For a list of instance types that support local instance storage, including the
                *                 total size per instance type, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
                *         </note>
                */
            VolumeSizeInGB: number | undefined;
            /**
                * <p>The Amazon Web Services KMS key that SageMaker uses to encrypt data on the storage volume attached to the ML
                *             compute instance(s) that run the training job.</p>
                *         <note>
                *             <p>Certain Nitro-based instances include local storage, dependent on the instance
                *                 type. Local storage volumes are encrypted using a hardware module on the instance.
                *                 You can't request a <code>VolumeKmsKeyId</code> when using an instance type with
                *                 local storage.</p>
                *             <p>For a list of instance types that support local instance storage, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
                *             <p>For more information about local instance storage encryption, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
                *                     Instance Store Volumes</a>.</p>
                *         </note>
                *         <p>The <code>VolumeKmsKeyId</code> can be in any of the following formats:</p>
                *         <ul>
                *             <li>
                *                 <p>// KMS Key ID</p>
                *                 <p>
                *                     <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                *                 <p>
                *                     <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>The configuration of a heterogeneous cluster in JSON format.</p>
                */
            InstanceGroups?: InstanceGroup[];
    }
    export namespace ResourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceConfig) => any;
    }
    /**
        * <p>Specifies a limit to how long a model training job or model compilation job
        *             can run. It also specifies how long a managed spot training
        *             job has to complete. When the job reaches the time limit, SageMaker ends the training or
        *             compilation job. Use this API to cap model training costs.</p>
        *         <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
        *             job termination for 120 seconds. Algorithms can use this 120-second window to save the
        *             model artifacts, so the results of training are not lost. </p>
        *         <p>The training algorithms provided by SageMaker automatically save the intermediate results
        *             of a model training job when possible. This attempt to save artifacts is only a best
        *             effort case as model might not be in a state from which it can be saved. For example, if
        *             training has just started, the model might not be ready to save. When saved, this
        *             intermediate data is a valid model artifact. You can use it to create a model with
        *                 <code>CreateModel</code>.</p>
        *         <note>
        *             <p>The Neural Topic Model (NTM) currently does not support saving intermediate model
        *                 artifacts. When training NTMs, make sure that the maximum runtime is sufficient for
        *                 the training job to complete.</p>
        *         </note>
        */
    export interface StoppingCondition {
            /**
                * <p>The maximum length of time, in seconds, that a training or compilation job can run.</p>
                *         <p>For compilation jobs, if the job does not complete during this time, a <code>TimeOut</code> error
                *             is generated. We recommend starting with 900 seconds and increasing as
                *             necessary based on your model.</p>
                *         <p>For all other jobs, if the job does not complete during this time, SageMaker ends the job. When
                *             <code>RetryStrategy</code> is specified in the job request,
                *                 <code>MaxRuntimeInSeconds</code> specifies the maximum time for all of the attempts
                *             in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.</p>
                */
            MaxRuntimeInSeconds?: number;
            /**
                * <p>The maximum length of time, in seconds, that a managed Spot training job has to
                *             complete. It is the amount of time spent waiting for Spot capacity plus the amount of
                *             time the job can run. It must be equal to or greater than
                *                 <code>MaxRuntimeInSeconds</code>. If the job does not complete during this time,
                *             SageMaker ends the job.</p>
                *         <p>When <code>RetryStrategy</code> is specified in the job request,
                *                 <code>MaxWaitTimeInSeconds</code> specifies the maximum time for all of the attempts
                *             in total, not each individual attempt.</p>
                */
            MaxWaitTimeInSeconds?: number;
    }
    export namespace StoppingCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StoppingCondition) => any;
    }
    /**
        * <p>Defines the input needed to run a training job using the algorithm.</p>
        */
    export interface TrainingJobDefinition {
            /**
                * <p>The training input mode that the algorithm supports. For more information about input modes, see
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p>
                *
                *         <p>
                *             <b>Pipe mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly
                *             from Amazon S3 to the container.</p>
                *
                *         <p>
                *             <b>File mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>File</code> mode, SageMaker
                *             downloads the training data from S3 to the provisioned ML storage volume, and mounts the
                *             directory to the Docker volume for the training container.</p>
                *         <p>You must provision the ML storage volume with sufficient capacity
                *             to accommodate the data downloaded from S3. In addition to the training data, the ML
                *             storage volume also stores the output model. The algorithm container uses the ML storage
                *             volume to also store intermediate information, if any.</p>
                *         <p>For distributed algorithms, training data is distributed uniformly.
                *             Your training duration is predictable if the input data objects sizes are
                *             approximately the same. SageMaker does not split the files any further for model training.
                *             If the object sizes are skewed, training won't be optimal as the data distribution is also
                *             skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in
                *             training.</p>
                *
                *         <p>
                *             <b>FastFile mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly
                *             from S3 to the container with no code changes, and provides file system access to
                *             the data. Users can author their training script to interact with these files as if
                *             they were stored on disk.</p>
                *         <p>
                *             <code>FastFile</code> mode works best when the data is read sequentially.
                *             Augmented manifest files aren't supported.
                *             The startup time is lower when there are fewer files in the S3 bucket provided.</p>
                */
            TrainingInputMode: TrainingInputMode | string | undefined;
            /**
                * <p>The hyperparameters used for the training job.</p>
                */
            HyperParameters?: Record<string, string>;
            /**
                * <p>An array of <code>Channel</code> objects, each of which specifies an input
                *             source.</p>
                */
            InputDataConfig: Channel[] | undefined;
            /**
                * <p>the path to the S3 bucket where you want to store model artifacts. SageMaker creates
                *             subfolders for the artifacts.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The resources, including the ML compute instances and ML storage volumes, to use for
                *             model training.</p>
                */
            ResourceConfig: ResourceConfig | undefined;
            /**
                * <p>Specifies a limit to how long a model training job can run. It also specifies how long
                *             a managed Spot training job has to complete. When the job reaches the time limit, SageMaker
                *             ends the training job. Use this API to cap model training costs.</p>
                *         <p>To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job
                *             termination for 120 seconds. Algorithms can use this 120-second window to save the model
                *             artifacts.</p>
                */
            StoppingCondition: StoppingCondition | undefined;
    }
    export namespace TrainingJobDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingJobDefinition) => any;
    }
    export enum BatchStrategy {
            MULTI_RECORD = "MultiRecord",
            SINGLE_RECORD = "SingleRecord"
    }
    /**
        * <p>Describes the S3 data source.</p>
        */
    export interface TransformS3DataSource {
            /**
                * <p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix.
                *             Amazon SageMaker uses all objects with the specified key name prefix for batch transform. </p>
                *         <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that
                *             is a manifest file containing a list of object keys that you want Amazon SageMaker to use for batch
                *             transform. </p>
                *         <p>The following values are compatible: <code>ManifestFile</code>,
                *             <code>S3Prefix</code>
                *          </p>
                *         <p>The following value is not compatible: <code>AugmentedManifestFile</code>
                *          </p>
                */
            S3DataType: S3DataType | string | undefined;
            /**
                * <p>Depending on the value specified for the <code>S3DataType</code>, identifies either a
                *             key name prefix or a manifest. For example:</p>
                *         <ul>
                *             <li>
                *                 <p> A key name prefix might look like this:
                *                         <code>s3://bucketname/exampleprefix</code>. </p>
                *             </li>
                *             <li>
                *                 <p> A manifest might look like this:
                *                         <code>s3://bucketname/example.manifest</code>
                *                 </p>
                *                 <p> The manifest is an S3 object which is a JSON file with the following format: </p>
                *                 <p>
                *                     <code>[ {"prefix": "s3://customer_bucket/some/prefix/"},</code>
                *                 </p>
                *                 <p>
                *                     <code>"relative/path/to/custdata-1",</code>
                *                 </p>
                *                 <p>
                *                     <code>"relative/path/custdata-2",</code>
                *                 </p>
                *                 <p>
                *                     <code>...</code>
                *                 </p>
                *                 <p>
                *                     <code>"relative/path/custdata-N"</code>
                *                 </p>
                *                 <p>
                *                     <code>]</code>
                *                 </p>
                *                 <p> The preceding JSON matches the following <code>S3Uris</code>: </p>
                *                 <p>
                *                     <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
                *                 </p>
                *                 <p>
                *                     <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
                *                 </p>
                *                 <p>
                *                     <code>...</code>
                *                 </p>
                *                 <p>
                *                     <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
                *                 </p>
                *                 <p> The complete set of <code>S3Uris</code> in this manifest constitutes the
                *                     input data for the channel for this datasource. The object that each
                *                         <code>S3Uris</code> points to must be readable by the IAM role that Amazon SageMaker
                *                     uses to perform tasks on your behalf.</p>
                *             </li>
                *          </ul>
                */
            S3Uri: string | undefined;
    }
    export namespace TransformS3DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformS3DataSource) => any;
    }
    /**
        * <p>Describes the location of the channel data.</p>
        */
    export interface TransformDataSource {
            /**
                * <p>The S3 location of the data source that is associated with a channel.</p>
                */
            S3DataSource: TransformS3DataSource | undefined;
    }
    export namespace TransformDataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformDataSource) => any;
    }
    export enum SplitType {
            LINE = "Line",
            NONE = "None",
            RECORDIO = "RecordIO",
            TFRECORD = "TFRecord"
    }
    /**
        * <p>Describes the input source of a transform job and the way the transform job consumes
        *             it.</p>
        */
    export interface TransformInput {
            /**
                * <p>Describes the location of
                *             the
                *             channel data, which is, the S3 location of the input data that the
                *             model can consume.</p>
                */
            DataSource: TransformDataSource | undefined;
            /**
                * <p>The multipurpose internet mail extension
                *             (MIME)
                *             type of the data. Amazon SageMaker uses the MIME type with each http call to
                *             transfer data to the transform job.</p>
                */
            ContentType?: string;
            /**
                * <p>If your transform data
                *             is
                *             compressed, specify the compression type. Amazon SageMaker automatically
                *             decompresses the data for the transform job accordingly. The default value is
                *                 <code>None</code>.</p>
                */
            CompressionType?: CompressionType | string;
            /**
                * <p>The method to use to split the transform job's data files into smaller batches.
                *             Splitting is necessary when the total size of each object is too large to fit in a
                *             single request. You can also use data splitting to improve performance by processing
                *             multiple concurrent mini-batches. The default value for <code>SplitType</code> is
                *                 <code>None</code>, which indicates that input data files are not split, and request
                *             payloads contain the entire contents of an input object. Set the value of this parameter
                *             to <code>Line</code> to split records on a newline character boundary.
                *                 <code>SplitType</code> also supports a number of record-oriented binary data
                *             formats. Currently, the supported record formats are:</p>
                *         <ul>
                *             <li>
                *                 <p>RecordIO</p>
                *             </li>
                *             <li>
                *                 <p>TFRecord</p>
                *             </li>
                *          </ul>
                *         <p>When splitting is enabled, the size of a mini-batch depends on the values of the
                *                 <code>BatchStrategy</code> and <code>MaxPayloadInMB</code> parameters. When the
                *             value of <code>BatchStrategy</code> is <code>MultiRecord</code>, Amazon SageMaker sends the maximum
                *             number of records in each request, up to the <code>MaxPayloadInMB</code> limit. If the
                *             value of <code>BatchStrategy</code> is <code>SingleRecord</code>, Amazon SageMaker sends individual
                *             records in each request.</p>
                *         <note>
                *             <p>Some data formats represent a record as a binary payload wrapped with extra
                *                 padding bytes. When splitting is applied to a binary data format, padding is removed
                *                 if the value of <code>BatchStrategy</code> is set to <code>SingleRecord</code>.
                *                 Padding is not removed if the value of <code>BatchStrategy</code> is set to
                *                     <code>MultiRecord</code>.</p>
                *             <p>For more information about <code>RecordIO</code>, see <a href="https://mxnet.apache.org/api/faq/recordio">Create a Dataset Using
                *                     RecordIO</a> in the MXNet documentation. For more information about
                *                     <code>TFRecord</code>, see <a href="https://www.tensorflow.org/guide/data#consuming_tfrecord_data">Consuming TFRecord data</a> in the TensorFlow documentation.</p>
                *         </note>
                */
            SplitType?: SplitType | string;
    }
    export namespace TransformInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformInput) => any;
    }
    export enum AssemblyType {
            LINE = "Line",
            NONE = "None"
    }
    /**
        * <p>Describes the results of a transform job.</p>
        */
    export interface TransformOutput {
            /**
                * <p>The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For
                *             example, <code>s3://bucket-name/key-name-prefix</code>.</p>
                *         <p>For every S3 object used as input for the transform job, batch transform stores the
                *             transformed data with an .<code>out</code> suffix in a corresponding subfolder in the
                *             location in the output prefix. For example, for the input data stored at
                *                 <code>s3://bucket-name/input-name-prefix/dataset01/data.csv</code>, batch transform
                *             stores the transformed data at
                *                 <code>s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out</code>.
                *             Batch transform doesn't upload partially processed objects. For an input S3 object that
                *             contains multiple records, it creates an .<code>out</code> file only if the transform
                *             job succeeds on the entire file. When the input contains multiple S3 objects, the batch
                *             transform job processes the listed S3 objects and uploads only the output for
                *             successfully processed objects. If any object fails in the transform job batch transform
                *             marks the job as failed to prompt investigation.</p>
                */
            S3OutputPath: string | undefined;
            /**
                * <p>The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http
                *             call to transfer data from the transform job.</p>
                */
            Accept?: string;
            /**
                * <p>Defines how to assemble the results of the transform job as a single S3 object. Choose
                *             a format that is most convenient to you. To concatenate the results in binary format,
                *             specify <code>None</code>. To add a newline character at the end of every transformed
                *             record, specify
                *             <code>Line</code>.</p>
                */
            AssembleWith?: AssemblyType | string;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using
                *             Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following
                *             formats: </p>
                *         <ul>
                *             <li>
                *                 <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>Key ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>Alias name: <code>alias/ExampleAlias</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>Alias name ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *
                *         <p>If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your
                *             role's account. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed Encryption Keys</a> in the
                *                 <i>Amazon Simple Storage Service
                *                 Developer Guide.</i>
                *          </p>
                *         <p>The KMS key policy must grant permission to the IAM role that you specify in your
                * 	<a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>
                * 		request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
                *                     Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer
                *                 Guide</i>.</p>
                */
            KmsKeyId?: string;
    }
    export namespace TransformOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformOutput) => any;
    }
    /**
        * <p>Describes the resources, including ML instance types and ML instance count, to use for
        *             transform job.</p>
        */
    export interface TransformResources {
            /**
                * <p>The ML compute instance type for the transform job. If you are using built-in
                *             algorithms to
                *             transform
                *             moderately sized datasets, we recommend using ml.m4.xlarge or
                *             <code>ml.m5.large</code>instance types.</p>
                */
            InstanceType: TransformInstanceType | string | undefined;
            /**
                * <p>The number of
                *             ML
                *             compute instances to use in the transform job. For distributed
                *             transform jobs, specify a value greater than 1. The default value is
                *             <code>1</code>.</p>
                */
            InstanceCount: number | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume
                *             attached to the ML compute instance(s) that run the batch transform job.</p>
                *         <note>
                *             <p>Certain Nitro-based instances include local storage, dependent on the instance
                *                 type. Local storage volumes are encrypted using a hardware module on the instance.
                *                 You can't request a <code>VolumeKmsKeyId</code> when using an instance type with
                *                 local storage.</p>
                *             <p>For a list of instance types that support local instance storage, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
                *             <p>For more information about local instance storage encryption, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
                *                 Instance Store Volumes</a>.</p>
                *         </note>
                *             <p>
                *             The <code>VolumeKmsKeyId</code> can be any of the following formats:</p>
                *         <ul>
                *             <li>
                *                 <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>Key ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>Alias name: <code>alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Alias name ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
    }
    export namespace TransformResources {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformResources) => any;
    }
    /**
        * <p>Defines the input needed to run a transform job using the inference specification
        *             specified in the algorithm.</p>
        */
    export interface TransformJobDefinition {
            /**
                * <p>The maximum number of parallel requests that can be sent to each instance in a
                *             transform job. The default value is 1.</p>
                */
            MaxConcurrentTransforms?: number;
            /**
                * <p>The maximum payload size allowed, in MB. A payload is the data portion of a record
                *             (without metadata).</p>
                */
            MaxPayloadInMB?: number;
            /**
                * <p>A string that determines the number of records included in a single mini-batch.</p>
                *         <p>
                *             <code>SingleRecord</code> means only one record is used per mini-batch.
                *                 <code>MultiRecord</code> means a mini-batch is set to contain as many records that
                *             can fit within the <code>MaxPayloadInMB</code> limit.</p>
                */
            BatchStrategy?: BatchStrategy | string;
            /**
                * <p>The environment variables to set in the Docker container. We support up to 16 key and
                *             values entries in the map.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>A description of the input source and the way the transform job consumes it.</p>
                */
            TransformInput: TransformInput | undefined;
            /**
                * <p>Identifies the Amazon S3 location where you want Amazon SageMaker to save the results
                *             from the transform job.</p>
                */
            TransformOutput: TransformOutput | undefined;
            /**
                * <p>Identifies the ML compute instances for the transform job.</p>
                */
            TransformResources: TransformResources | undefined;
    }
    export namespace TransformJobDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformJobDefinition) => any;
    }
    /**
        * <p>Defines a training job and a batch transform job that SageMaker runs to validate your
        *             algorithm.</p>
        *         <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services
        *             Marketplace.</p>
        */
    export interface AlgorithmValidationProfile {
            /**
                * <p>The name of the profile for the algorithm. The name must have 1 to 63 characters.
                *             Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
                */
            ProfileName: string | undefined;
            /**
                * <p>The <code>TrainingJobDefinition</code> object that describes the training job that
                *             SageMaker runs to validate your algorithm.</p>
                */
            TrainingJobDefinition: TrainingJobDefinition | undefined;
            /**
                * <p>The <code>TransformJobDefinition</code> object that describes the transform job that
                *             SageMaker runs to validate your algorithm.</p>
                */
            TransformJobDefinition?: TransformJobDefinition;
    }
    export namespace AlgorithmValidationProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlgorithmValidationProfile) => any;
    }
    /**
        * <p>Specifies configurations for one or more training jobs that SageMaker runs to test the
        *             algorithm.</p>
        */
    export interface AlgorithmValidationSpecification {
            /**
                * <p>The IAM roles that SageMaker uses to run the training jobs.</p>
                */
            ValidationRole: string | undefined;
            /**
                * <p>An array of <code>AlgorithmValidationProfile</code> objects, each of which specifies a
                *             training job and batch transform job that SageMaker runs to validate your algorithm.</p>
                */
            ValidationProfiles: AlgorithmValidationProfile[] | undefined;
    }
    export namespace AlgorithmValidationSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlgorithmValidationSpecification) => any;
    }
    /**
        * <p>Configures how labels are consolidated across human workers and processes output data.
        *          </p>
        */
    export interface AnnotationConsolidationConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of a Lambda function implements the logic for <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html">annotation consolidation</a> and to process output data.</p>
                *         <p>This parameter is required for all labeling jobs. For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a>, use one
                *             of the following Amazon SageMaker Ground Truth Lambda function ARNs for
                *                 <code>AnnotationConsolidationLambdaArn</code>. For custom labeling workflows, see
                *                 <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-postlambda">Post-annotation Lambda</a>. </p>
                *
                *         <p>
                *             <b>Bounding box</b> - Finds the most similar boxes from
                *             different workers based on the Jaccard index of the boxes.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-BoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-BoundingBox</code>
                *                 </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Image classification</b> - Uses a variant of the
                *             Expectation Maximization approach to estimate the true class of an image based on
                *             annotations from individual workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Multi-label image classification</b> - Uses a variant of
                *             the Expectation Maximization approach to estimate the true classes of an image based on
                *             annotations from individual workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Semantic segmentation</b> - Treats each pixel in an image
                *             as a multi-class classification and treats pixel annotations from workers as "votes" for
                *             the correct label.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-SemanticSegmentation</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Text classification</b> - Uses a variant of the
                *             Expectation Maximization approach to estimate the true class of text based on
                *             annotations from individual workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClass</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Multi-label text classification</b> - Uses a variant of
                *             the Expectation Maximization approach to estimate the true classes of text based on
                *             annotations from individual workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Named entity recognition</b> - Groups similar selections
                *             and calculates aggregate boundaries, resolving to most-assigned label.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *
                *
                *         <p>
                *             <b>Video Classification</b> - Use this task type when you need workers to classify videos using
                *             predefined labels that you specify. Workers are shown videos and are asked to choose one
                *             label for each video.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoMultiClass</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Video Frame Object Detection</b> - Use this task type to
                *             have workers identify and locate objects in a sequence of video frames (images extracted
                *             from a video) using bounding boxes. For example, you can use this task to ask workers to
                *             identify and localize various objects in a series of video frames, such as cars, bikes,
                *             and pedestrians.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectDetection</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Video Frame Object Tracking</b> - Use this task type to
                *             have workers track the movement of objects in a sequence of video frames (images
                *             extracted from a video) using bounding boxes. For example, you can use this task to ask
                *             workers to track the movement of objects, such as cars, bikes, and pedestrians. </p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectTracking</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *
                *         <p>
                *             <b>3D Point Cloud Object Detection</b> - Use this task type
                *             when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids
                *             around objects. For example, you can use this task type to ask workers to identify
                *             different types of objects in a point cloud, such as cars, bikes, and
                *             pedestrians.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>3D Point Cloud Object Tracking</b> - Use this task type
                *             when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D
                *             point cloud frames. For example, you can use this task type to ask workers to track the
                *             movement of vehicles across multiple point cloud frames. </p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>3D Point Cloud Semantic Segmentation</b> - Use this task
                *             type when you want workers to create a point-level semantic segmentation masks by
                *             painting objects in a 3D point cloud using different colors where each color is assigned
                *             to one of the classes you specify.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *         <p>
                *             <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
                *          </p>
                *         <p>Use label verification and adjustment jobs to review and adjust labels. To learn more,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify and Adjust Labels </a>.</p>
                *
                *         <p>
                *             <b>Semantic Segmentation Adjustment</b> - Treats each pixel
                *             in an image as a multi-class classification and treats pixel adjusted annotations from
                *             workers as "votes" for the correct label.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentSemanticSegmentation</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>Semantic Segmentation Verification</b> - Uses a variant
                *             of the Expectation Maximization approach to estimate the true class of verification
                *             judgment for semantic segmentation labels based on annotations from individual
                *             workers.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationSemanticSegmentation</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>Bounding Box Adjustment</b> - Finds the most similar
                *             boxes from different workers based on the Jaccard index of the adjusted
                *             annotations.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentBoundingBox</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Bounding Box Verification</b> - Uses a variant of the
                *             Expectation Maximization approach to estimate the true class of verification judgement
                *             for bounding box labels based on annotations from individual workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *         <p>
                *             <b>Video Frame Object Detection Adjustment</b> -
                *             Use this task type when you want workers to adjust bounding boxes that workers have added
                *             to video frames to classify and localize objects in a sequence of video frames.</p>
                *
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectDetection</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Video Frame Object Tracking Adjustment</b> -
                *             Use this task type when you want workers to adjust bounding boxes that workers have added
                *             to video frames to track object movement across a sequence of video frames.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectTracking</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *         <p>
                *             <b>3D Point Cloud Object Detection Adjustment</b> - Use this
                *             task type when you want workers to adjust 3D cuboids around objects in a 3D point cloud. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>3D Point Cloud Object Tracking Adjustment</b> - Use this
                *             task type when you want workers to adjust 3D cuboids around objects that appear in a
                *             sequence of 3D point cloud frames.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>3D Point Cloud Semantic Segmentation Adjustment</b> - Use this task
                *             type when you want workers to adjust a point-level semantic segmentation masks using a paint tool.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            AnnotationConsolidationLambdaArn: string | undefined;
    }
    export namespace AnnotationConsolidationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnnotationConsolidationConfig) => any;
    }
    export enum AppType {
            JupyterServer = "JupyterServer",
            KernelGateway = "KernelGateway",
            RSessionGateway = "RSessionGateway",
            RStudioServerPro = "RStudioServerPro",
            TensorBoard = "TensorBoard"
    }
    export enum AppStatus {
            Deleted = "Deleted",
            Deleting = "Deleting",
            Failed = "Failed",
            InService = "InService",
            Pending = "Pending"
    }
    /**
        * <p>Details about an Amazon SageMaker app.</p>
        */
    export interface AppDetails {
            /**
                * <p>The domain ID.</p>
                */
            DomainId?: string;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName?: string;
            /**
                * <p>The type of app.</p>
                */
            AppType?: AppType | string;
            /**
                * <p>The name of the app.</p>
                */
            AppName?: string;
            /**
                * <p>The status.</p>
                */
            Status?: AppStatus | string;
            /**
                * <p>The creation time.</p>
                */
            CreationTime?: Date;
    }
    export namespace AppDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppDetails) => any;
    }
    /**
        * <p>The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.</p>
        */
    export interface FileSystemConfig {
            /**
                * <p>The path within the image to mount the user's EFS home directory. The directory
                *         should be empty. If not specified, defaults to <i>/home/sagemaker-user</i>.</p>
                */
            MountPath?: string;
            /**
                * <p>The default POSIX user ID (UID). If not specified, defaults to <code>1000</code>.</p>
                */
            DefaultUid?: number;
            /**
                * <p>The default POSIX group ID (GID). If not specified, defaults to <code>100</code>.</p>
                */
            DefaultGid?: number;
    }
    export namespace FileSystemConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileSystemConfig) => any;
    }
    /**
        * <p>The specification of a Jupyter kernel.</p>
        */
    export interface KernelSpec {
            /**
                * <p>The name of the Jupyter kernel in the image. This value is case sensitive.</p>
                */
            Name: string | undefined;
            /**
                * <p>The display name of the kernel.</p>
                */
            DisplayName?: string;
    }
    export namespace KernelSpec {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KernelSpec) => any;
    }
    /**
        * <p>The configuration for the file system and kernels in a SageMaker image running as a
        *         KernelGateway app.</p>
        */
    export interface KernelGatewayImageConfig {
            /**
                * <p>The specification of the Jupyter kernels in the image.</p>
                */
            KernelSpecs: KernelSpec[] | undefined;
            /**
                * <p>The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.</p>
                */
            FileSystemConfig?: FileSystemConfig;
    }
    export namespace KernelGatewayImageConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KernelGatewayImageConfig) => any;
    }
    /**
        * <p>The configuration for running a SageMaker image as a KernelGateway app.</p>
        */
    export interface AppImageConfigDetails {
            /**
                * <p>The Amazon Resource Name (ARN) of the AppImageConfig.</p>
                */
            AppImageConfigArn?: string;
            /**
                * <p>The name of the AppImageConfig. Must be unique to your account.</p>
                */
            AppImageConfigName?: string;
            /**
                * <p>When the AppImageConfig was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When the AppImageConfig was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The configuration for the file system and kernels in the SageMaker image.</p>
                */
            KernelGatewayImageConfig?: KernelGatewayImageConfig;
    }
    export namespace AppImageConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppImageConfigDetails) => any;
    }
    export enum AppImageConfigSortKey {
            CreationTime = "CreationTime",
            LastModifiedTime = "LastModifiedTime",
            Name = "Name"
    }
    export enum AppInstanceType {
            ML_C5_12XLARGE = "ml.c5.12xlarge",
            ML_C5_18XLARGE = "ml.c5.18xlarge",
            ML_C5_24XLARGE = "ml.c5.24xlarge",
            ML_C5_2XLARGE = "ml.c5.2xlarge",
            ML_C5_4XLARGE = "ml.c5.4xlarge",
            ML_C5_9XLARGE = "ml.c5.9xlarge",
            ML_C5_LARGE = "ml.c5.large",
            ML_C5_XLARGE = "ml.c5.xlarge",
            ML_G4DN_12XLARGE = "ml.g4dn.12xlarge",
            ML_G4DN_16XLARGE = "ml.g4dn.16xlarge",
            ML_G4DN_2XLARGE = "ml.g4dn.2xlarge",
            ML_G4DN_4XLARGE = "ml.g4dn.4xlarge",
            ML_G4DN_8XLARGE = "ml.g4dn.8xlarge",
            ML_G4DN_XLARGE = "ml.g4dn.xlarge",
            ML_G5_12XLARGE = "ml.g5.12xlarge",
            ML_G5_16XLARGE = "ml.g5.16xlarge",
            ML_G5_24XLARGE = "ml.g5.24xlarge",
            ML_G5_2XLARGE = "ml.g5.2xlarge",
            ML_G5_48XLARGE = "ml.g5.48xlarge",
            ML_G5_4XLARGE = "ml.g5.4xlarge",
            ML_G5_8XLARGE = "ml.g5.8xlarge",
            ML_G5_XLARGE = "ml.g5.xlarge",
            ML_M5D_12XLARGE = "ml.m5d.12xlarge",
            ML_M5D_16XLARGE = "ml.m5d.16xlarge",
            ML_M5D_24XLARGE = "ml.m5d.24xlarge",
            ML_M5D_2XLARGE = "ml.m5d.2xlarge",
            ML_M5D_4XLARGE = "ml.m5d.4xlarge",
            ML_M5D_8XLARGE = "ml.m5d.8xlarge",
            ML_M5D_LARGE = "ml.m5d.large",
            ML_M5D_XLARGE = "ml.m5d.xlarge",
            ML_M5_12XLARGE = "ml.m5.12xlarge",
            ML_M5_16XLARGE = "ml.m5.16xlarge",
            ML_M5_24XLARGE = "ml.m5.24xlarge",
            ML_M5_2XLARGE = "ml.m5.2xlarge",
            ML_M5_4XLARGE = "ml.m5.4xlarge",
            ML_M5_8XLARGE = "ml.m5.8xlarge",
            ML_M5_LARGE = "ml.m5.large",
            ML_M5_XLARGE = "ml.m5.xlarge",
            ML_P3DN_24XLARGE = "ml.p3dn.24xlarge",
            ML_P3_16XLARGE = "ml.p3.16xlarge",
            ML_P3_2XLARGE = "ml.p3.2xlarge",
            ML_P3_8XLARGE = "ml.p3.8xlarge",
            ML_R5_12XLARGE = "ml.r5.12xlarge",
            ML_R5_16XLARGE = "ml.r5.16xlarge",
            ML_R5_24XLARGE = "ml.r5.24xlarge",
            ML_R5_2XLARGE = "ml.r5.2xlarge",
            ML_R5_4XLARGE = "ml.r5.4xlarge",
            ML_R5_8XLARGE = "ml.r5.8xlarge",
            ML_R5_LARGE = "ml.r5.large",
            ML_R5_XLARGE = "ml.r5.xlarge",
            ML_T3_2XLARGE = "ml.t3.2xlarge",
            ML_T3_LARGE = "ml.t3.large",
            ML_T3_MEDIUM = "ml.t3.medium",
            ML_T3_MICRO = "ml.t3.micro",
            ML_T3_SMALL = "ml.t3.small",
            ML_T3_XLARGE = "ml.t3.xlarge",
            SYSTEM = "system"
    }
    export enum AppNetworkAccessType {
            PublicInternetOnly = "PublicInternetOnly",
            VpcOnly = "VpcOnly"
    }
    export enum AppSecurityGroupManagement {
            Customer = "Customer",
            Service = "Service"
    }
    export enum AppSortKey {
            CreationTime = "CreationTime"
    }
    /**
        * <p>Configuration to run a processing job in a specified container image.</p>
        */
    export interface AppSpecification {
            /**
                * <p>The container image to be run by the processing job.</p>
                */
            ImageUri: string | undefined;
            /**
                * <p>The entrypoint for a container used to run a processing job.</p>
                */
            ContainerEntrypoint?: string[];
            /**
                * <p>The arguments for a container used to run a processing job.</p>
                */
            ContainerArguments?: string[];
    }
    export namespace AppSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppSpecification) => any;
    }
    export enum ArtifactSourceIdType {
            CUSTOM = "Custom",
            MD5_HASH = "MD5Hash",
            S3_ETAG = "S3ETag",
            S3_VERSION = "S3Version"
    }
    /**
        * <p>The ID and ID type of an artifact source.</p>
        */
    export interface ArtifactSourceType {
            /**
                * <p>The type of ID.</p>
                */
            SourceIdType: ArtifactSourceIdType | string | undefined;
            /**
                * <p>The ID.</p>
                */
            Value: string | undefined;
    }
    export namespace ArtifactSourceType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ArtifactSourceType) => any;
    }
    /**
        * <p>A structure describing the source of an artifact.</p>
        */
    export interface ArtifactSource {
            /**
                * <p>The URI of the source.</p>
                */
            SourceUri: string | undefined;
            /**
                * <p>A list of source types.</p>
                */
            SourceTypes?: ArtifactSourceType[];
    }
    export namespace ArtifactSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ArtifactSource) => any;
    }
    /**
        * <p>Lists a summary of the properties of an artifact. An artifact represents a URI
        *         addressable object or data. Some examples are a dataset and a model.</p>
        */
    export interface ArtifactSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact.</p>
                */
            ArtifactArn?: string;
            /**
                * <p>The name of the artifact.</p>
                */
            ArtifactName?: string;
            /**
                * <p>The source of the artifact.</p>
                */
            Source?: ArtifactSource;
            /**
                * <p>The type of the artifact.</p>
                */
            ArtifactType?: string;
            /**
                * <p>When the artifact was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When the artifact was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace ArtifactSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ArtifactSummary) => any;
    }
    export interface AssociateTrialComponentRequest {
            /**
                * <p>The name of the component to associated with the trial.</p>
                */
            TrialComponentName: string | undefined;
            /**
                * <p>The name of the trial to associate with.</p>
                */
            TrialName: string | undefined;
    }
    export namespace AssociateTrialComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTrialComponentRequest) => any;
    }
    export interface AssociateTrialComponentResponse {
            /**
                * <p>The ARN of the trial component.</p>
                */
            TrialComponentArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the trial.</p>
                */
            TrialArn?: string;
    }
    export namespace AssociateTrialComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTrialComponentResponse) => any;
    }
    /**
        * <p>Information about the user who created or modified an experiment, trial, trial
        *       component, lineage group, or project.</p>
        */
    export interface UserContext {
            /**
                * <p>The Amazon Resource Name (ARN) of the user's profile.</p>
                */
            UserProfileArn?: string;
            /**
                * <p>The name of the user's profile.</p>
                */
            UserProfileName?: string;
            /**
                * <p>The domain associated with the user.</p>
                */
            DomainId?: string;
    }
    export namespace UserContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserContext) => any;
    }
    /**
        * <p>Lists a summary of the properties of an association. An association is an entity that
        *         links other lineage or experiment entities. An example would be an association between a
        *         training job and a model.</p>
        */
    export interface AssociationSummary {
            /**
                * <p>The ARN of the source.</p>
                */
            SourceArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the destination.</p>
                */
            DestinationArn?: string;
            /**
                * <p>The source type.</p>
                */
            SourceType?: string;
            /**
                * <p>The destination type.</p>
                */
            DestinationType?: string;
            /**
                * <p>The type of the association.</p>
                */
            AssociationType?: AssociationEdgeType | string;
            /**
                * <p>The name of the source.</p>
                */
            SourceName?: string;
            /**
                * <p>The name of the destination.</p>
                */
            DestinationName?: string;
            /**
                * <p>When the association was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
    }
    export namespace AssociationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationSummary) => any;
    }
    /**
        * <p>Configures the behavior of the client used by SageMaker to interact with the
        *             model container during asynchronous inference.</p>
        */
    export interface AsyncInferenceClientConfig {
            /**
                * <p>The maximum number of concurrent requests sent by the SageMaker client to the
                *             model container. If no value is provided, SageMaker chooses an optimal value.</p>
                */
            MaxConcurrentInvocationsPerInstance?: number;
    }
    export namespace AsyncInferenceClientConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AsyncInferenceClientConfig) => any;
    }
    /**
        * <p>Specifies the configuration for notifications of inference results for asynchronous inference.</p>
        */
    export interface AsyncInferenceNotificationConfig {
            /**
                * <p>Amazon SNS topic to post a notification to when inference completes successfully.
                *             If no topic is provided, no notification is sent on success.</p>
                */
            SuccessTopic?: string;
            /**
                * <p>Amazon SNS topic to post a notification to when inference fails.
                *             If no topic is provided, no notification is sent on failure.</p>
                */
            ErrorTopic?: string;
    }
    export namespace AsyncInferenceNotificationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AsyncInferenceNotificationConfig) => any;
    }
    /**
        * <p>Specifies the configuration for asynchronous inference invocation outputs.</p>
        */
    export interface AsyncInferenceOutputConfig {
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that
                *             SageMaker uses to encrypt the asynchronous inference output in Amazon S3.</p>
                *         <p></p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon S3 location to upload inference responses to.</p>
                */
            S3OutputPath: string | undefined;
            /**
                * <p>Specifies the configuration for notifications of inference results for asynchronous inference.</p>
                */
            NotificationConfig?: AsyncInferenceNotificationConfig;
    }
    export namespace AsyncInferenceOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AsyncInferenceOutputConfig) => any;
    }
    /**
        * <p>Specifies configuration for how an endpoint performs asynchronous inference.</p>
        */
    export interface AsyncInferenceConfig {
            /**
                * <p>Configures the behavior of the client used by SageMaker to interact
                *             with the model container during asynchronous inference.</p>
                */
            ClientConfig?: AsyncInferenceClientConfig;
            /**
                * <p>Specifies the configuration for asynchronous inference invocation outputs.</p>
                */
            OutputConfig: AsyncInferenceOutputConfig | undefined;
    }
    export namespace AsyncInferenceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AsyncInferenceConfig) => any;
    }
    export enum AthenaResultCompressionType {
            GZIP = "GZIP",
            SNAPPY = "SNAPPY",
            ZLIB = "ZLIB"
    }
    export enum AthenaResultFormat {
            AVRO = "AVRO",
            JSON = "JSON",
            ORC = "ORC",
            PARQUET = "PARQUET",
            TEXTFILE = "TEXTFILE"
    }
    /**
        * <p>Configuration for Athena Dataset Definition input.</p>
        */
    export interface AthenaDatasetDefinition {
            /**
                * <p>The name of the data catalog used in Athena query execution.</p>
                */
            Catalog: string | undefined;
            /**
                * <p>The name of the database used in the Athena query execution.</p>
                */
            Database: string | undefined;
            /**
                * <p>The SQL query statements, to be executed.</p>
                */
            QueryString: string | undefined;
            /**
                * <p>The name of the workgroup in which the Athena query is being started.</p>
                */
            WorkGroup?: string;
            /**
                * <p>The location in Amazon S3 where Athena query results are stored.</p>
                */
            OutputS3Uri: string | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data generated from
                *             an Athena query execution.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The data storage format for Athena query results.</p>
                */
            OutputFormat: AthenaResultFormat | string | undefined;
            /**
                * <p>The compression used for Athena query results.</p>
                */
            OutputCompression?: AthenaResultCompressionType | string;
    }
    export namespace AthenaDatasetDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AthenaDatasetDefinition) => any;
    }
    export enum AuthMode {
            IAM = "IAM",
            SSO = "SSO"
    }
    /**
        * <p>The location of artifacts for an AutoML candidate job.</p>
        */
    export interface CandidateArtifactLocations {
            /**
                * <p>The Amazon S3 prefix to the explainability artifacts generated for the AutoML
                *          candidate.</p>
                */
            Explainability: string | undefined;
            /**
                * <p>The Amazon S3 prefix to the model insight artifacts generated for the AutoML candidate.</p>
                */
            ModelInsights?: string;
    }
    export namespace CandidateArtifactLocations {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CandidateArtifactLocations) => any;
    }
    export enum AutoMLMetricEnum {
            ACCURACY = "Accuracy",
            AUC = "AUC",
            F1 = "F1",
            F1_MACRO = "F1macro",
            MSE = "MSE"
    }
    export enum MetricSetSource {
            TEST = "Test",
            TRAIN = "Train",
            VALIDATION = "Validation"
    }
    export enum AutoMLMetricExtendedEnum {
            ACCURACY = "Accuracy",
            AUC = "AUC",
            BALANCED_ACCURACY = "BalancedAccuracy",
            F1 = "F1",
            F1_MACRO = "F1macro",
            LogLoss = "LogLoss",
            MAE = "MAE",
            MSE = "MSE",
            PRECISION = "Precision",
            PRECISION_MACRO = "PrecisionMacro",
            R2 = "R2",
            RECALL = "Recall",
            RECALL_MACRO = "RecallMacro",
            RMSE = "RMSE"
    }
    /**
        * <p>Information about the metric for a candidate produced by an AutoML job.</p>
        */
    export interface MetricDatum {
            /**
                * <p>The name of the metric.</p>
                */
            MetricName?: AutoMLMetricEnum | string;
            /**
                * <p>The value of the metric.</p>
                */
            Value?: number;
            /**
                * <p>The dataset split from which the AutoML job produced the metric.</p>
                */
            Set?: MetricSetSource | string;
            /**
                * <p>The name of the standard metric. </p>
                *          <note>
                *             <p>For definitions of the standard metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-metrics">
                *                   <code>Autopilot candidate metrics</code>
                *                </a>.</p>
                *          </note>
                */
            StandardMetricName?: AutoMLMetricExtendedEnum | string;
    }
    export namespace MetricDatum {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDatum) => any;
    }
    /**
        * <p>The properties of an AutoML candidate job.</p>
        */
    export interface CandidateProperties {
            /**
                * <p>The Amazon S3 prefix to the artifacts generated for an AutoML candidate.</p>
                */
            CandidateArtifactLocations?: CandidateArtifactLocations;
            /**
                * <p>Information about the candidate metrics for an AutoML job.</p>
                */
            CandidateMetrics?: MetricDatum[];
    }
    export namespace CandidateProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CandidateProperties) => any;
    }
    export enum CandidateStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    export enum CandidateStepType {
            PROCESSING = "AWS::SageMaker::ProcessingJob",
            TRAINING = "AWS::SageMaker::TrainingJob",
            TRANSFORM = "AWS::SageMaker::TransformJob"
    }
    /**
        * <p>Information about the steps for a candidate and what step it is working on.</p>
        */
    export interface AutoMLCandidateStep {
            /**
                * <p>Whether the candidate is at the transform, training, or processing step.</p>
                */
            CandidateStepType: CandidateStepType | string | undefined;
            /**
                * <p>The ARN for the candidate's step.</p>
                */
            CandidateStepArn: string | undefined;
            /**
                * <p>The name for the candidate's step.</p>
                */
            CandidateStepName: string | undefined;
    }
    export namespace AutoMLCandidateStep {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLCandidateStep) => any;
    }
    export enum AutoMLJobObjectiveType {
            MAXIMIZE = "Maximize",
            MINIMIZE = "Minimize"
    }
    /**
        * <p>The best candidate result from an AutoML training job.</p>
        */
    export interface FinalAutoMLJobObjectiveMetric {
            /**
                * <p>The type of metric with the best result.</p>
                */
            Type?: AutoMLJobObjectiveType | string;
            /**
                * <p>The name of the metric with the best result. For a description of the possible objective
                *          metrics, see <a>AutoMLJobObjective$MetricName</a>.</p>
                */
            MetricName: AutoMLMetricEnum | string | undefined;
            /**
                * <p>The value of the metric with the best result.</p>
                */
            Value: number | undefined;
    }
    export namespace FinalAutoMLJobObjectiveMetric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FinalAutoMLJobObjectiveMetric) => any;
    }
    /**
        * <p>A list of container definitions that describe the different containers that make up an
        *          AutoML candidate. For more information, see .</p>
        */
    export interface AutoMLContainerDefinition {
            /**
                * <p>The Amazon Elastic Container Registry (Amazon ECR) path of the container. For more
                *          information, see .</p>
                */
            Image: string | undefined;
            /**
                * <p>The location of the model artifacts. For more information, see .</p>
                */
            ModelDataUrl: string | undefined;
            /**
                * <p>The environment variables to set in the container. For more information, see .</p>
                */
            Environment?: Record<string, string>;
    }
    export namespace AutoMLContainerDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLContainerDefinition) => any;
    }
    export enum ObjectiveStatus {
            Failed = "Failed",
            Pending = "Pending",
            Succeeded = "Succeeded"
    }
    /**
        * <p>Information about a candidate produced by an AutoML training job, including its status,
        *          steps, and other properties.</p>
        */
    export interface AutoMLCandidate {
            /**
                * <p>The name of the candidate.</p>
                */
            CandidateName: string | undefined;
            /**
                * <p>The best candidate result from an AutoML training job.</p>
                */
            FinalAutoMLJobObjectiveMetric?: FinalAutoMLJobObjectiveMetric;
            /**
                * <p>The objective's status.</p>
                */
            ObjectiveStatus: ObjectiveStatus | string | undefined;
            /**
                * <p>Information about the candidate's steps.</p>
                */
            CandidateSteps: AutoMLCandidateStep[] | undefined;
            /**
                * <p>The candidate's status.</p>
                */
            CandidateStatus: CandidateStatus | string | undefined;
            /**
                * <p>Information about the inference container definitions.</p>
                */
            InferenceContainers?: AutoMLContainerDefinition[];
            /**
                * <p>The creation time.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The end time.</p>
                */
            EndTime?: Date;
            /**
                * <p>The last modified time.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The failure reason.</p>
                */
            FailureReason?: string;
            /**
                * <p>The properties of an AutoML candidate job.</p>
                */
            CandidateProperties?: CandidateProperties;
    }
    export namespace AutoMLCandidate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLCandidate) => any;
    }
    /**
        * <p>Stores the config information for how a candidate is generated (optional).</p>
        */
    export interface AutoMLCandidateGenerationConfig {
            /**
                * <p>A URL to the Amazon S3 data source containing selected features from the input data source to
                *          run an Autopilot job (optional). This file should be in json format as shown below: </p>
                *          <p>
                *             <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.</p>
                *          <p>The key name <code>FeatureAttributeNames</code> is fixed. The values listed in
                *             <code>["col1", "col2", ...]</code> is case sensitive and should be a list of strings
                *          containing unique values that are a subset of the column names in the input data. The list
                *          of columns provided must not include the target column.</p>
                */
            FeatureSpecificationS3Uri?: string;
    }
    export namespace AutoMLCandidateGenerationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLCandidateGenerationConfig) => any;
    }
    export enum AutoMLChannelType {
            TRAINING = "training",
            VALIDATION = "validation"
    }
    export enum AutoMLS3DataType {
            MANIFEST_FILE = "ManifestFile",
            S3_PREFIX = "S3Prefix"
    }
    /**
        * <p>The Amazon S3 data source.</p>
        */
    export interface AutoMLS3DataSource {
            /**
                * <p>The data type.</p>
                *          <p>A ManifestFile should have the format shown below:</p>
                *          <p>
                *             <code>[ {"prefix": "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/DOC-EXAMPLE-PREFIX/"}, </code>
                *          </p>
                *          <p>
                *             <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-1",</code>
                *          </p>
                *          <p>
                *             <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-2",</code>
                *          </p>
                *          <p>
                *             <code>... "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-N" ]</code>
                *          </p>
                *          <p>An S3Prefix should have the following format: </p>
                *          <p>
                *             <code>s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER-OR-FILE</code>
                *          </p>
                */
            S3DataType: AutoMLS3DataType | string | undefined;
            /**
                * <p>The URL to the Amazon S3 data source.</p>
                */
            S3Uri: string | undefined;
    }
    export namespace AutoMLS3DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLS3DataSource) => any;
    }
    /**
        * <p>The data source for the Autopilot job.</p>
        */
    export interface AutoMLDataSource {
            /**
                * <p>The Amazon S3 location of the input data.</p>
                */
            S3DataSource: AutoMLS3DataSource | undefined;
    }
    export namespace AutoMLDataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLDataSource) => any;
    }
    /**
        * <p>A channel is a named input source that training algorithms can consume. The validation
        *          dataset size is limited to less than 2 GB. The training dataset size must be less than 100
        *          GB. For more information, see .</p>
        *          <note>
        *             <p>A validation dataset must contain the same headers as the training dataset.</p>
        *          </note>
        *          <p></p>
        */
    export interface AutoMLChannel {
            /**
                * <p>The data source for an AutoML channel.</p>
                */
            DataSource: AutoMLDataSource | undefined;
            /**
                * <p>You can use <code>Gzip</code> or <code>None</code>. The default value is
                *             <code>None</code>.</p>
                */
            CompressionType?: CompressionType | string;
            /**
                * <p>The name of the target variable in supervised learning, usually represented by
                *          'y'.</p>
                */
            TargetAttributeName: string | undefined;
            /**
                * <p>The content type of the data from the input source. You can use
                *             <code>text/csv;header=present</code> or <code>x-application/vnd.amazon+parquet</code>.
                *          The default value is <code>text/csv;header=present</code>.</p>
                */
            ContentType?: string;
            /**
                * <p>The channel type (optional) is an <code>enum</code> string. The default value is
                *             <code>training</code>. Channels for training and validation must share the same
                *             <code>ContentType</code> and <code>TargetAttributeName</code>. For information on
                *          specifying training and validation channel types, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-data-sources-training-or-validation">
                *                <code>How to specify training and validation datasets</code>
                *             </a>.</p>
                */
            ChannelType?: AutoMLChannelType | string;
    }
    export namespace AutoMLChannel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLChannel) => any;
    }
    /**
        * <p>This structure specifies how to split the data into train and validation datasets. The
        *          validation and training datasets must contain the same headers. The validation dataset must
        *          be less than 2 GB in size.</p>
        */
    export interface AutoMLDataSplitConfig {
            /**
                * <p>The validation fraction (optional) is a float that specifies the portion of the training
                *          dataset to be used for validation. The default value is 0.2, and values must be greater
                *          than 0 and less than 1. We recommend setting this value to be less than 0.5.</p>
                */
            ValidationFraction?: number;
    }
    export namespace AutoMLDataSplitConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLDataSplitConfig) => any;
    }
    /**
        * <p>The artifacts that are generated during an AutoML job.</p>
        */
    export interface AutoMLJobArtifacts {
            /**
                * <p>The URL of the notebook location.</p>
                */
            CandidateDefinitionNotebookLocation?: string;
            /**
                * <p>The URL of the notebook location.</p>
                */
            DataExplorationNotebookLocation?: string;
    }
    export namespace AutoMLJobArtifacts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLJobArtifacts) => any;
    }
    /**
        * <p>How long a job is allowed to run, or how many candidates a job is allowed to
        *          generate.</p>
        */
    export interface AutoMLJobCompletionCriteria {
            /**
                * <p>The maximum number of times a training job is allowed to run.</p>
                */
            MaxCandidates?: number;
            /**
                * <p>The maximum time, in seconds, that each training job is allowed to run as part of a
                *          hyperparameter tuning job. For more information, see the  used by the  action.</p>
                */
            MaxRuntimePerTrainingJobInSeconds?: number;
            /**
                * <p>The maximum runtime, in seconds, an AutoML job has to complete.</p>
                *          <p>If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its
                *          processing is ended gracefully. The AutoML job identifies the best model whose training was
                *          completed and marks it as the best-performing model. Any unfinished steps of the job, such
                *          as automatic one-click Autopilot model deployment, will not be completed. </p>
                */
            MaxAutoMLJobRuntimeInSeconds?: number;
    }
    export namespace AutoMLJobCompletionCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLJobCompletionCriteria) => any;
    }
    /**
        * <p>Specifies a VPC that your training jobs and hosted models have access to. Control
        *             access to and from your training and model containers by configuring the VPC. For more
        *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs
        *                 by Using an Amazon Virtual Private Cloud</a>. </p>
        */
    export interface VpcConfig {
            /**
                * <p>The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for
                *             the VPC that is specified in the <code>Subnets</code> field.</p>
                */
            SecurityGroupIds: string[] | undefined;
            /**
                * <p>The ID of the subnets in the VPC to which you want to connect your training job or
                *             model. For information about the availability of specific instance types, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html">Supported
                *                 Instance Types and Availability Zones</a>.</p>
                */
            Subnets: string[] | undefined;
    }
    export namespace VpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfig) => any;
    }
    /**
        * <p>Security options.</p>
        */
    export interface AutoMLSecurityConfig {
            /**
                * <p>The key used to encrypt stored data.</p>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Whether to use traffic encryption between the container layers.</p>
                */
            EnableInterContainerTrafficEncryption?: boolean;
            /**
                * <p>The VPC configuration.</p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace AutoMLSecurityConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLSecurityConfig) => any;
    }
    /**
        * <p>A collection of settings used for an AutoML job.</p>
        */
    export interface AutoMLJobConfig {
            /**
                * <p>How long an AutoML job is allowed to run, or how many candidates a job is allowed to
                *          generate.</p>
                */
            CompletionCriteria?: AutoMLJobCompletionCriteria;
            /**
                * <p>The security configuration for traffic encryption or Amazon VPC settings.</p>
                */
            SecurityConfig?: AutoMLSecurityConfig;
            /**
                * <p>The configuration for splitting the input training dataset.</p>
                *          <p>Type: AutoMLDataSplitConfig</p>
                */
            DataSplitConfig?: AutoMLDataSplitConfig;
            /**
                * <p>The configuration for generating a candidate for an AutoML job (optional). </p>
                */
            CandidateGenerationConfig?: AutoMLCandidateGenerationConfig;
    }
    export namespace AutoMLJobConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLJobConfig) => any;
    }
    /**
        * <p>Specifies a metric to minimize or maximize as the objective of a job.</p>
        */
    export interface AutoMLJobObjective {
            /**
                * <p>The name of the objective metric used to measure the predictive quality of a machine
                *          learning system. This metric is optimized during training to provide the best estimate for
                *          model parameter values from data.</p>
                *          <p>Here are the options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>MSE</code>: The mean squared error (MSE) is the average of the squared
                *                differences between the predicted and actual values. It is used for regression. MSE
                *                values are always positive: the better a model is at predicting the actual values,
                *                the smaller the MSE value is. When the data contains outliers, they tend to dominate
                *                the MSE, which might cause subpar prediction performance.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Accuracy</code>: The ratio of the number of correctly classified items to
                *                the total number of (correctly and incorrectly) classified items. It is used for
                *                binary and multiclass classification. It measures how close the predicted class
                *                values are to the actual values. Accuracy values vary between zero and one: one
                *                indicates perfect accuracy and zero indicates perfect inaccuracy.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>F1</code>: The F1 score is the harmonic mean of the precision and recall. It
                *                is used for binary classification into classes traditionally referred to as positive
                *                and negative. Predictions are said to be true when they match their actual (correct)
                *                class and false when they do not. Precision is the ratio of the true positive
                *                predictions to all positive predictions (including the false positives) in a data set
                *                and measures the quality of the prediction when it predicts the positive class.
                *                Recall (or sensitivity) is the ratio of the true positive predictions to all actual
                *                positive instances and measures how completely a model predicts the actual class
                *                members in a data set. The standard F1 score weighs precision and recall equally. But
                *                which metric is paramount typically depends on specific aspects of a problem. F1
                *                scores vary between zero and one: one indicates the best possible performance and
                *                zero the worst.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AUC</code>: The area under the curve (AUC) metric is used to compare and
                *                evaluate binary classification by algorithms such as logistic regression that return
                *                probabilities. A threshold is needed to map the probabilities into classifications.
                *                The relevant curve is the receiver operating characteristic curve that plots the true
                *                positive rate (TPR) of predictions (or recall) against the false positive rate (FPR)
                *                as a function of the threshold value, above which a prediction is considered
                *                positive. Increasing the threshold results in fewer false positives but more false
                *                negatives. AUC is the area under this receiver operating characteristic curve and so
                *                provides an aggregated measure of the model performance across all possible
                *                classification thresholds. The AUC score can also be interpreted as the probability
                *                that a randomly selected positive data point is more likely to be predicted positive
                *                than a randomly selected negative example. AUC scores vary between zero and one: a
                *                score of one indicates perfect accuracy and a score of one half indicates that the
                *                prediction is not better than a random classifier. Values under one half predict less
                *                accurately than a random predictor. But such consistently bad predictors can simply
                *                be inverted to obtain better than random predictors.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>F1macro</code>: The F1macro score applies F1 scoring to multiclass
                *                classification. In this context, you have multiple classes to predict. You just
                *                calculate the precision and recall for each class as you did for the positive class
                *                in binary classification. Then, use these values to calculate the F1 score for each
                *                class and average them to obtain the F1macro score. F1macro scores vary between zero
                *                and one: one indicates the best possible performance and zero the worst.</p>
                *             </li>
                *          </ul>
                *          <p>If you do not specify a metric explicitly, the default behavior is to automatically
                *          use:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>MSE</code>: for regression.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>F1</code>: for binary classification</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Accuracy</code>: for multiclass classification.</p>
                *             </li>
                *          </ul>
                */
            MetricName: AutoMLMetricEnum | string | undefined;
    }
    export namespace AutoMLJobObjective {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLJobObjective) => any;
    }
    export enum AutoMLJobSecondaryStatus {
            ANALYZING_DATA = "AnalyzingData",
            CANDIDATE_DEFINITIONS_GENERATED = "CandidateDefinitionsGenerated",
            COMPLETED = "Completed",
            DEPLOYING_MODEL = "DeployingModel",
            EXPLAINABILITY_ERROR = "ExplainabilityError",
            FAILED = "Failed",
            FEATURE_ENGINEERING = "FeatureEngineering",
            GENERATING_EXPLAINABILITY_REPORT = "GeneratingExplainabilityReport",
            GENERATING_MODEL_INSIGHTS_REPORT = "GeneratingModelInsightsReport",
            MAX_AUTO_ML_JOB_RUNTIME_REACHED = "MaxAutoMLJobRuntimeReached",
            MAX_CANDIDATES_REACHED = "MaxCandidatesReached",
            MODEL_DEPLOYMENT_ERROR = "ModelDeploymentError",
            MODEL_INSIGHTS_ERROR = "ModelInsightsError",
            MODEL_TUNING = "ModelTuning",
            STARTING = "Starting",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    export enum AutoMLJobStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    /**
        * <p>The reason for a partial failure of an AutoML job.</p>
        */
    export interface AutoMLPartialFailureReason {
            /**
                * <p>The message containing the reason for a partial failure of an AutoML job.</p>
                */
            PartialFailureMessage?: string;
    }
    export namespace AutoMLPartialFailureReason {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLPartialFailureReason) => any;
    }
    /**
        * <p>Provides a summary about an AutoML job.</p>
        */
    export interface AutoMLJobSummary {
            /**
                * <p>The name of the AutoML job you are requesting.</p>
                */
            AutoMLJobName: string | undefined;
            /**
                * <p>The ARN of the AutoML job.</p>
                */
            AutoMLJobArn: string | undefined;
            /**
                * <p>The status of the AutoML job.</p>
                */
            AutoMLJobStatus: AutoMLJobStatus | string | undefined;
            /**
                * <p>The secondary status of the AutoML job.</p>
                */
            AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus | string | undefined;
            /**
                * <p>When the AutoML job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The end time of an AutoML job.</p>
                */
            EndTime?: Date;
            /**
                * <p>When the AutoML job was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The failure reason of an AutoML job.</p>
                */
            FailureReason?: string;
            /**
                * <p>The list of reasons for partial failures within an AutoML job.</p>
                */
            PartialFailureReasons?: AutoMLPartialFailureReason[];
    }
    export namespace AutoMLJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLJobSummary) => any;
    }
    /**
        * <p>The output data configuration.</p>
        */
    export interface AutoMLOutputDataConfig {
            /**
                * <p>The Amazon Web Services KMS encryption key ID.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon S3 output path. Must be 128 characters or less.</p>
                */
            S3OutputPath: string | undefined;
    }
    export namespace AutoMLOutputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoMLOutputDataConfig) => any;
    }
    export enum AutoMLSortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name",
            STATUS = "Status"
    }
    export enum AutoMLSortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    /**
        * <p>Automatic rollback configuration for handling endpoint deployment failures and recovery.</p>
        */
    export interface AutoRollbackConfig {
            /**
                * <p>List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint.
                *             If any alarms are tripped during a deployment, SageMaker rolls back the deployment.</p>
                */
            Alarms?: Alarm[];
    }
    export namespace AutoRollbackConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoRollbackConfig) => any;
    }
    export enum AwsManagedHumanLoopRequestSource {
            REKOGNITION_DETECT_MODERATION_LABELS_IMAGE_V3 = "AWS/Rekognition/DetectModerationLabels/Image/V3",
            TEXTRACT_ANALYZE_DOCUMENT_FORMS_V1 = "AWS/Textract/AnalyzeDocument/Forms/V1"
    }
    export interface BatchDescribeModelPackageInput {
            /**
                * <p>The list of Amazon Resource Name (ARN) of the model package groups.</p>
                */
            ModelPackageArnList: string[] | undefined;
    }
    export namespace BatchDescribeModelPackageInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeModelPackageInput) => any;
    }
    /**
        * <p>The error code and error description associated with the resource.</p>
        */
    export interface BatchDescribeModelPackageError {
            /**
                * <p></p>
                */
            ErrorCode: string | undefined;
            /**
                * <p></p>
                */
            ErrorResponse: string | undefined;
    }
    export namespace BatchDescribeModelPackageError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeModelPackageError) => any;
    }
    /**
        * <p>Defines how to perform inference generation after a training job is run.</p>
        */
    export interface InferenceSpecification {
            /**
                * <p>The Amazon ECR registry path of the Docker image that contains the inference code.</p>
                */
            Containers: ModelPackageContainerDefinition[] | undefined;
            /**
                * <p>A list of the instance types on which a transformation job can be run or on which an
                *             endpoint can be deployed.</p>
                *         <p>This parameter is required for unversioned models, and optional for versioned
                *             models.</p>
                */
            SupportedTransformInstanceTypes?: (TransformInstanceType | string)[];
            /**
                * <p>A list of the instance types that are used to generate inferences in real-time.</p>
                *         <p>This parameter is required for unversioned models, and optional for versioned
                *             models.</p>
                */
            SupportedRealtimeInferenceInstanceTypes?: (ProductionVariantInstanceType | string)[];
            /**
                * <p>The supported MIME types for the input data.</p>
                */
            SupportedContentTypes: string[] | undefined;
            /**
                * <p>The supported MIME types for the output data.</p>
                */
            SupportedResponseMIMETypes: string[] | undefined;
    }
    export namespace InferenceSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferenceSpecification) => any;
    }
    export enum ModelApprovalStatus {
            APPROVED = "Approved",
            PENDING_MANUAL_APPROVAL = "PendingManualApproval",
            REJECTED = "Rejected"
    }
    export enum ModelPackageStatus {
            COMPLETED = "Completed",
            DELETING = "Deleting",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            PENDING = "Pending"
    }
    /**
        * <p>Provides summary information about the model package.</p>
        */
    export interface BatchDescribeModelPackageSummary {
            /**
                * <p>The group name for the model package</p>
                */
            ModelPackageGroupName: string | undefined;
            /**
                * <p>The version number of a versioned model.</p>
                */
            ModelPackageVersion?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the model package.</p>
                */
            ModelPackageArn: string | undefined;
            /**
                * <p>The description of the model package.</p>
                */
            ModelPackageDescription?: string;
            /**
                * <p>The creation time of the mortgage package summary.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Defines how to perform inference generation after a training job is run.</p>
                */
            InferenceSpecification: InferenceSpecification | undefined;
            /**
                * <p>The status of the mortgage package.</p>
                */
            ModelPackageStatus: ModelPackageStatus | string | undefined;
            /**
                * <p>The approval status of the model.</p>
                */
            ModelApprovalStatus?: ModelApprovalStatus | string;
    }
    export namespace BatchDescribeModelPackageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeModelPackageSummary) => any;
    }
    export interface BatchDescribeModelPackageOutput {
            /**
                * <p>The summaries for the model package versions</p>
                */
            ModelPackageSummaries?: Record<string, BatchDescribeModelPackageSummary>;
            /**
                * <p>A map of the resource and BatchDescribeModelPackageError objects
                *             reporting the error associated with describing the model package.</p>
                */
            BatchDescribeModelPackageErrorMap?: Record<string, BatchDescribeModelPackageError>;
    }
    export namespace BatchDescribeModelPackageOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeModelPackageOutput) => any;
    }
    /**
        * <p>Details about the metrics source.</p>
        */
    export interface MetricsSource {
            /**
                * <p>The metric source content type.</p>
                */
            ContentType: string | undefined;
            /**
                * <p>The hash key used for the metrics source.</p>
                */
            ContentDigest?: string;
            /**
                * <p>The S3 URI for the metrics source.</p>
                */
            S3Uri: string | undefined;
    }
    export namespace MetricsSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricsSource) => any;
    }
    /**
        * <p>Contains bias metrics for a model.</p>
        */
    export interface Bias {
            /**
                * <p>The bias report for a model</p>
                */
            Report?: MetricsSource;
            /**
                * <p>The pre-training bias report for a model.</p>
                */
            PreTrainingReport?: MetricsSource;
            /**
                * <p>The post-training bias report for a model.</p>
                */
            PostTrainingReport?: MetricsSource;
    }
    export namespace Bias {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Bias) => any;
    }
    export enum CapacitySizeType {
            CAPACITY_PERCENT = "CAPACITY_PERCENT",
            INSTANCE_COUNT = "INSTANCE_COUNT"
    }
    /**
        * <p>Specifies the endpoint capacity to activate for production.</p>
        */
    export interface CapacitySize {
            /**
                * <p>Specifies the endpoint capacity type.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>INSTANCE_COUNT</code>: The endpoint activates based on
                *                 the number of instances.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CAPACITY_PERCENT</code>: The endpoint activates based on
                *                 the specified percentage of capacity.</p>
                *             </li>
                *          </ul>
                */
            Type: CapacitySizeType | string | undefined;
            /**
                * <p>Defines the capacity size, either as a number of instances or a capacity percentage.</p>
                */
            Value: number | undefined;
    }
    export namespace CapacitySize {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CapacitySize) => any;
    }
    export enum TrafficRoutingConfigType {
            ALL_AT_ONCE = "ALL_AT_ONCE",
            CANARY = "CANARY",
            LINEAR = "LINEAR"
    }
    /**
        * <p>Defines the traffic routing strategy during an endpoint deployment to shift traffic from the
        *             old fleet to the new fleet.</p>
        */
    export interface TrafficRoutingConfig {
            /**
                * <p>Traffic routing strategy type.</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet
                *                 in a single step.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CANARY</code>: Endpoint traffic shifts to the new fleet
                *                 in two steps. The first step is the canary, which is a small portion of the traffic. The
                *                 second step is the remainder of the traffic.
                *             </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in
                *                 n steps of a configurable size.
                *             </p>
                *             </li>
                *          </ul>
                */
            Type: TrafficRoutingConfigType | string | undefined;
            /**
                * <p>The waiting time (in seconds) between incremental steps to turn on traffic on the
                *             new endpoint fleet.</p>
                */
            WaitIntervalInSeconds: number | undefined;
            /**
                * <p>Batch size for the first step to turn on traffic on the new endpoint fleet. <code>Value</code> must be less than
                *             or equal to 50% of the variant's total instance count.</p>
                */
            CanarySize?: CapacitySize;
            /**
                * <p>Batch size for each step to turn on traffic on the new endpoint fleet. <code>Value</code> must be
                *             10-50% of the variant's total instance count.</p>
                */
            LinearStepSize?: CapacitySize;
    }
    export namespace TrafficRoutingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrafficRoutingConfig) => any;
    }
    /**
        * <p>Update policy for a blue/green deployment. If this update policy is specified, SageMaker
        *             creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips
        *             traffic to the new fleet according to the specified traffic routing configuration. Only
        *             one update policy should be used in the deployment configuration. If no update policy is
        *             specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting
        *             by default.</p>
        */
    export interface BlueGreenUpdatePolicy {
            /**
                * <p>Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet
                *             during an endpoint deployment.</p>
                */
            TrafficRoutingConfiguration: TrafficRoutingConfig | undefined;
            /**
                * <p>Additional waiting time in seconds after the completion of an endpoint deployment
                *             before terminating the old endpoint fleet. Default is 0.</p>
                */
            TerminationWaitInSeconds?: number;
            /**
                * <p>Maximum execution timeout for the deployment. Note that the timeout value should be larger
                *             than the total waiting time specified in <code>TerminationWaitInSeconds</code> and <code>WaitIntervalInSeconds</code>.</p>
                */
            MaximumExecutionTimeoutInSeconds?: number;
    }
    export namespace BlueGreenUpdatePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BlueGreenUpdatePolicy) => any;
    }
    export enum BooleanOperator {
            AND = "And",
            OR = "Or"
    }
    /**
        * <p>Details on the cache hit of a pipeline execution step.</p>
        */
    export interface CacheHitResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            SourcePipelineExecutionArn?: string;
    }
    export namespace CacheHitResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CacheHitResult) => any;
    }
    /**
        * <p>An output parameter of a pipeline step.</p>
        */
    export interface OutputParameter {
            /**
                * <p>The name of the output parameter.</p>
                */
            Name: string | undefined;
            /**
                * <p>The value of the output parameter.</p>
                */
            Value: string | undefined;
    }
    export namespace OutputParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputParameter) => any;
    }
    /**
        * <p>Metadata about a callback step.</p>
        */
    export interface CallbackStepMetadata {
            /**
                * <p>The pipeline generated token from the Amazon SQS queue.</p>
                */
            CallbackToken?: string;
            /**
                * <p>The URL of the Amazon Simple Queue Service (Amazon SQS) queue used by the callback step.</p>
                */
            SqsQueueUrl?: string;
            /**
                * <p>A list of the output parameters of the callback step.</p>
                */
            OutputParameters?: OutputParameter[];
    }
    export namespace CallbackStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CallbackStepMetadata) => any;
    }
    export enum CandidateSortBy {
            CreationTime = "CreationTime",
            FinalObjectiveMetricValue = "FinalObjectiveMetricValue",
            Status = "Status"
    }
    /**
        * <p>Configuration specifying how to treat different headers. If no headers are specified SageMaker
        *          will by default base64 encode when capturing the data.</p>
        */
    export interface CaptureContentTypeHeader {
            /**
                * <p>The list of all content type headers that SageMaker will treat as CSV and capture accordingly.</p>
                */
            CsvContentTypes?: string[];
            /**
                * <p>The list of all content type headers that SageMaker will treat as JSON and capture accordingly.</p>
                */
            JsonContentTypes?: string[];
    }
    export namespace CaptureContentTypeHeader {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CaptureContentTypeHeader) => any;
    }
    export enum CaptureMode {
            INPUT = "Input",
            OUTPUT = "Output"
    }
    /**
        * <p>Specifies data Model Monitor will capture.</p>
        */
    export interface CaptureOption {
            /**
                * <p>Specify the boundary of data to capture.</p>
                */
            CaptureMode: CaptureMode | string | undefined;
    }
    export namespace CaptureOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CaptureOption) => any;
    }
    export enum CaptureStatus {
            STARTED = "Started",
            STOPPED = "Stopped"
    }
    /**
        * <p>Environment parameters you want to benchmark your load test against.</p>
        */
    export interface CategoricalParameter {
            /**
                * <p>The Name of the environment variable.</p>
                */
            Name: string | undefined;
            /**
                * <p>The list of values you can pass.</p>
                */
            Value: string[] | undefined;
    }
    export namespace CategoricalParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CategoricalParameter) => any;
    }
    /**
        * <p>A list of categorical hyperparameters to tune.</p>
        */
    export interface CategoricalParameterRange {
            /**
                * <p>The name of the categorical hyperparameter to tune.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of the categories
                *             for
                *             the hyperparameter.</p>
                */
            Values: string[] | undefined;
    }
    export namespace CategoricalParameterRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CategoricalParameterRange) => any;
    }
    /**
        * <p>Defines the possible values for a categorical hyperparameter.</p>
        */
    export interface CategoricalParameterRangeSpecification {
            /**
                * <p>The allowed categories for the hyperparameter.</p>
                */
            Values: string[] | undefined;
    }
    export namespace CategoricalParameterRangeSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CategoricalParameterRangeSpecification) => any;
    }
    /**
        * <p>Defines a named input source, called a channel, to be used by an algorithm.</p>
        */
    export interface ChannelSpecification {
            /**
                * <p>The name of the channel.</p>
                */
            Name: string | undefined;
            /**
                * <p>A brief description of the channel.</p>
                */
            Description?: string;
            /**
                * <p>Indicates whether the channel is required by the algorithm.</p>
                */
            IsRequired?: boolean;
            /**
                * <p>The supported MIME types for the data.</p>
                */
            SupportedContentTypes: string[] | undefined;
            /**
                * <p>The allowed compression types, if data compression is used.</p>
                */
            SupportedCompressionTypes?: (CompressionType | string)[];
            /**
                * <p>The allowed input mode, either FILE or PIPE.</p>
                *         <p>In FILE mode, Amazon SageMaker copies the data from the input source onto the local
                *             Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm.
                *             This is the most commonly used input mode.</p>
                *         <p>In PIPE mode, Amazon SageMaker streams input data from the source directly to your
                *             algorithm without using the EBS volume.</p>
                */
            SupportedInputModes: (TrainingInputMode | string)[] | undefined;
    }
    export namespace ChannelSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelSpecification) => any;
    }
    /**
        * <p>Contains information about the output location for managed spot training checkpoint
        *             data. </p>
        */
    export interface CheckpointConfig {
            /**
                * <p>Identifies the S3 path where you want SageMaker to store checkpoints. For example,
                *                 <code>s3://bucket-name/key-name-prefix</code>.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>(Optional) The local directory where checkpoints are written. The default directory is
                *                 <code>/opt/ml/checkpoints/</code>. </p>
                */
            LocalPath?: string;
    }
    export namespace CheckpointConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckpointConfig) => any;
    }
    /**
        * <p>The container for the metadata for the ClarifyCheck step. For more information,
        *             see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check">ClarifyCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.
        *         </p>
        */
    export interface ClarifyCheckStepMetadata {
            /**
                * <p>The type of the Clarify Check step</p>
                */
            CheckType?: string;
            /**
                * <p>The Amazon S3 URI of baseline constraints file to be used for the drift check.</p>
                */
            BaselineUsedForDriftCheckConstraints?: string;
            /**
                * <p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>
                */
            CalculatedBaselineConstraints?: string;
            /**
                * <p>The model package group name.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>The Amazon S3 URI of the violation report if violations are detected.</p>
                */
            ViolationReport?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.</p>
                */
            CheckJobArn?: string;
            /**
                * <p>This flag indicates if the drift check against the previous baseline will be skipped or not.
                *             If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>
                */
            SkipCheck?: boolean;
            /**
                * <p>This flag indicates if a newly calculated baseline can be accessed through step properties
                *             <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>.
                *             If it is set to <code>False</code>, the previous baseline of the configured check type must also be available.
                *             These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> property. </p>
                */
            RegisterNewBaseline?: boolean;
    }
    export namespace ClarifyCheckStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClarifyCheckStepMetadata) => any;
    }
    export enum CodeRepositorySortBy {
            CREATION_TIME = "CreationTime",
            LAST_MODIFIED_TIME = "LastModifiedTime",
            NAME = "Name"
    }
    export enum CodeRepositorySortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    /**
        * <p>Specifies configuration details for a Git repository in your Amazon Web Services account.</p>
        */
    export interface GitConfig {
            /**
                * <p>The URL where the Git repository is located.</p>
                */
            RepositoryUrl: string | undefined;
            /**
                * <p>The default branch for the Git repository.</p>
                */
            Branch?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the
                *             credentials used to access the git repository. The secret must have a staging label of
                *                 <code>AWSCURRENT</code> and must be in the following format:</p>
                *         <p>
                *             <code>{"username": <i>UserName</i>, "password":
                *                     <i>Password</i>}</code>
                *         </p>
                */
            SecretArn?: string;
    }
    export namespace GitConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GitConfig) => any;
    }
    /**
        * <p>Specifies summary information about a Git repository.</p>
        */
    export interface CodeRepositorySummary {
            /**
                * <p>The name of the Git repository.</p>
                */
            CodeRepositoryName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Git repository.</p>
                */
            CodeRepositoryArn: string | undefined;
            /**
                * <p>The date and time that the Git repository was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The date and time that the Git repository was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>Configuration details for the Git repository, including the URL where it is located
                *             and the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used to
                *             access the repository.</p>
                */
            GitConfig?: GitConfig;
    }
    export namespace CodeRepositorySummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeRepositorySummary) => any;
    }
    /**
        * <p>Use this parameter to configure your Amazon Cognito workforce.
        *       A single Cognito workforce is created using and corresponds to a single
        *       <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
        *       Amazon Cognito user pool</a>.</p>
        */
    export interface CognitoConfig {
            /**
                * <p>A <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
                *       user pool</a> is a user directory in Amazon Cognito.
                *       With a user pool, your users can sign in to your web or mobile app through Amazon Cognito.
                *       Your users can also sign in through social identity providers like
                *       Google, Facebook, Amazon, or Apple, and through SAML identity providers.</p>
                */
            UserPool: string | undefined;
            /**
                * <p>The client ID for your Amazon Cognito user pool.</p>
                */
            ClientId: string | undefined;
    }
    export namespace CognitoConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CognitoConfig) => any;
    }
    /**
        * <p>Identifies a Amazon Cognito user group. A user group can be used in on or more work
        *             teams.</p>
        */
    export interface CognitoMemberDefinition {
            /**
                * <p>An identifier for a user pool. The user pool must be in the same region as the service
                *             that you are calling.</p>
                */
            UserPool: string | undefined;
            /**
                * <p>An identifier for a user group.</p>
                */
            UserGroup: string | undefined;
            /**
                * <p>An identifier for an application client. You must create the app client ID using
                *             Amazon Cognito.</p>
                */
            ClientId: string | undefined;
    }
    export namespace CognitoMemberDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CognitoMemberDefinition) => any;
    }
    /**
        * <p>Configuration information for the Debugger output tensor collections.</p>
        */
    export interface CollectionConfiguration {
            /**
                * <p>The name of the tensor collection. The name must be unique relative to other rule configuration names.</p>
                */
            CollectionName?: string;
            /**
                * <p>Parameter values for the tensor collection. The allowed parameters are
                *                 <code>"name"</code>, <code>"include_regex"</code>, <code>"reduction_config"</code>,
                *                 <code>"save_config"</code>, <code>"tensor_names"</code>, and
                *                 <code>"save_histogram"</code>.</p>
                */
            CollectionParameters?: Record<string, string>;
    }
    export namespace CollectionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CollectionConfiguration) => any;
    }
    export enum CompilationJobStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            INPROGRESS = "INPROGRESS",
            STARTING = "STARTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING"
    }
    export enum TargetDevice {
            AISAGE = "aisage",
            AMBA_CV2 = "amba_cv2",
            AMBA_CV22 = "amba_cv22",
            AMBA_CV25 = "amba_cv25",
            COREML = "coreml",
            DEEPLENS = "deeplens",
            IMX8MPLUS = "imx8mplus",
            IMX8QM = "imx8qm",
            JACINTO_TDA4VM = "jacinto_tda4vm",
            JETSON_NANO = "jetson_nano",
            JETSON_TX1 = "jetson_tx1",
            JETSON_TX2 = "jetson_tx2",
            JETSON_XAVIER = "jetson_xavier",
            LAMBDA = "lambda",
            ML_C4 = "ml_c4",
            ML_C5 = "ml_c5",
            ML_EIA2 = "ml_eia2",
            ML_G4DN = "ml_g4dn",
            ML_INF1 = "ml_inf1",
            ML_M4 = "ml_m4",
            ML_M5 = "ml_m5",
            ML_P2 = "ml_p2",
            ML_P3 = "ml_p3",
            QCS603 = "qcs603",
            QCS605 = "qcs605",
            RASP3B = "rasp3b",
            RK3288 = "rk3288",
            RK3399 = "rk3399",
            SBE_C = "sbe_c",
            SITARA_AM57X = "sitara_am57x",
            X86_WIN32 = "x86_win32",
            X86_WIN64 = "x86_win64"
    }
    export enum TargetPlatformAccelerator {
            INTEL_GRAPHICS = "INTEL_GRAPHICS",
            MALI = "MALI",
            NNA = "NNA",
            NVIDIA = "NVIDIA"
    }
    export enum TargetPlatformArch {
            ARM64 = "ARM64",
            ARM_EABI = "ARM_EABI",
            ARM_EABIHF = "ARM_EABIHF",
            X86 = "X86",
            X86_64 = "X86_64"
    }
    export enum TargetPlatformOs {
            ANDROID = "ANDROID",
            LINUX = "LINUX"
    }
    /**
        * <p>A summary of a model compilation job.</p>
        */
    export interface CompilationJobSummary {
            /**
                * <p>The name of the model compilation job that you want a summary for.</p>
                */
            CompilationJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
                */
            CompilationJobArn: string | undefined;
            /**
                * <p>The time when the model compilation job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The time when the model compilation job started.</p>
                */
            CompilationStartTime?: Date;
            /**
                * <p>The time when the model compilation job completed.</p>
                */
            CompilationEndTime?: Date;
            /**
                * <p>The type of device that the model will run on after the compilation job has
                *             completed.</p>
                */
            CompilationTargetDevice?: TargetDevice | string;
            /**
                * <p>The type of OS that the model will run on after the compilation job has
                *             completed.</p>
                */
            CompilationTargetPlatformOs?: TargetPlatformOs | string;
            /**
                * <p>The type of architecture that the model will run on after the compilation job has
                *             completed.</p>
                */
            CompilationTargetPlatformArch?: TargetPlatformArch | string;
            /**
                * <p>The type of accelerator that the model will run on after the compilation job has
                *             completed.</p>
                */
            CompilationTargetPlatformAccelerator?: TargetPlatformAccelerator | string;
            /**
                * <p>The time when the model compilation job was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The status of the model compilation job.</p>
                */
            CompilationJobStatus: CompilationJobStatus | string | undefined;
    }
    export namespace CompilationJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompilationJobSummary) => any;
    }
    export enum ConditionOutcome {
            FALSE = "False",
            TRUE = "True"
    }
    /**
        * <p>Metadata for a Condition step.</p>
        */
    export interface ConditionStepMetadata {
            /**
                * <p>The outcome of the Condition step evaluation.</p>
                */
            Outcome?: ConditionOutcome | string;
    }
    export namespace ConditionStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConditionStepMetadata) => any;
    }
    /**
        * <p>There was a conflict when you attempted to modify a SageMaker entity such as an
        *       <code>Experiment</code> or <code>Artifact</code>.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export enum RepositoryAccessMode {
            PLATFORM = "Platform",
            VPC = "Vpc"
    }
    /**
        * <p>Specifies an authentication configuration for the private docker registry where your
        *             model image is hosted. Specify a value for this property only if you specified
        *             <code>Vpc</code> as the value for the <code>RepositoryAccessMode</code> field of the
        *             <code>ImageConfig</code> object that you passed to a call to <code>CreateModel</code>
        *             and the private Docker registry where the model image is
        *             hosted requires authentication.</p>
        */
    export interface RepositoryAuthConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function that provides credentials to
                *             authenticate to the private Docker registry where your model image is hosted. For
                *             information about how to create an Amazon Web Services Lambda function, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html">Create a Lambda function
                *                 with the console</a> in the <i>Amazon Web Services Lambda Developer
                *             Guide</i>.</p>
                */
            RepositoryCredentialsProviderArn: string | undefined;
    }
    export namespace RepositoryAuthConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryAuthConfig) => any;
    }
    /**
        * <p>Specifies whether the model container is in Amazon ECR or a private Docker registry
        *             accessible from your Amazon Virtual Private Cloud (VPC).</p>
        */
    export interface ImageConfig {
            /**
                * <p>Set this to one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Platform</code> - The model image is hosted in Amazon ECR.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Vpc</code> - The model image is hosted in a private Docker registry in
                *                     your VPC.</p>
                *             </li>
                *          </ul>
                */
            RepositoryAccessMode: RepositoryAccessMode | string | undefined;
            /**
                * <p>(Optional) Specifies an authentication configuration for the private docker registry
                *             where your model image is hosted. Specify a value for this property only if you
                *             specified <code>Vpc</code> as the value for the <code>RepositoryAccessMode</code> field,
                *             and the private Docker registry where the model image is hosted requires
                *             authentication.</p>
                */
            RepositoryAuthConfig?: RepositoryAuthConfig;
    }
    export namespace ImageConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageConfig) => any;
    }
    export enum ContainerMode {
            MULTI_MODEL = "MultiModel",
            SINGLE_MODEL = "SingleModel"
    }
    export enum ModelCacheSetting {
            DISABLED = "Disabled",
            ENABLED = "Enabled"
    }
    /**
        * <p>Specifies additional configuration for hosting multi-model endpoints.</p>
        */
    export interface MultiModelConfig {
            /**
                * <p>Whether to cache models for a multi-model endpoint. By default, multi-model endpoints
                *             cache models so that a model does not have to be loaded into memory each time it is
                *             invoked. Some use cases do not benefit from model caching. For example, if an endpoint
                *             hosts a large number of models that are each invoked infrequently, the endpoint might
                *             perform better if you disable model caching. To disable model caching, set the value of
                *             this parameter to <code>Disabled</code>.</p>
                */
            ModelCacheSetting?: ModelCacheSetting | string;
    }
    export namespace MultiModelConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MultiModelConfig) => any;
    }
    /**
        * <p>Describes the container, as part of model definition.</p>
        */
    export interface ContainerDefinition {
            /**
                * <p>This parameter is ignored for models that contain only a
                *             <code>PrimaryContainer</code>.</p>
                *         <p>When a <code>ContainerDefinition</code> is part of an inference pipeline, the value of
                *             the parameter uniquely identifies the container for the purposes of logging and metrics.
                *             For information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html">Use Logs and Metrics
                *                 to Monitor an Inference Pipeline</a>. If you don't specify a value for this
                *             parameter for a <code>ContainerDefinition</code> that is part of an inference pipeline,
                *             a unique name is automatically assigned based on the position of the
                *                 <code>ContainerDefinition</code> in the pipeline. If you specify a value for the
                *                 <code>ContainerHostName</code> for any <code>ContainerDefinition</code> that is part
                *             of an inference pipeline, you must specify a value for the
                *                 <code>ContainerHostName</code> parameter of every <code>ContainerDefinition</code>
                *             in that pipeline.</p>
                */
            ContainerHostname?: string;
            /**
                * <p>The path where inference code is stored. This can be either in Amazon EC2 Container Registry or in a
                *             Docker registry that is accessible from the same VPC that you configure for your
                *             endpoint. If you are using your own custom algorithm instead of an algorithm provided by
                *             SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both
                *                 <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
                *             image path formats. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon
                *                 SageMaker</a>
                *         </p>
                */
            Image?: string;
            /**
                * <p>Specifies whether the model container is in Amazon ECR or a private Docker registry
                *             accessible from your Amazon Virtual Private Cloud (VPC). For information about storing containers in a
                *             private Docker registry, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html">Use a
                *                 Private Docker Registry for Real-Time Inference Containers</a>
                *         </p>
                */
            ImageConfig?: ImageConfig;
            /**
                * <p>Whether the container hosts a single model or multiple models.</p>
                */
            Mode?: ContainerMode | string;
            /**
                * <p>The S3 path where the model artifacts, which result from model training, are stored.
                *             This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3
                *             path is required for SageMaker built-in algorithms, but not if you use your own algorithms.
                *             For more information on built-in algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Common
                *                 Parameters</a>. </p>
                *         <note>
                *             <p>The model artifacts must be in an S3 bucket that is in the same region as the
                *                 model or endpoint you are creating.</p>
                *         </note>
                *         <p>If you provide a value for this parameter, SageMaker uses Amazon Web Services Security Token Service to
                *             download model artifacts from the S3 path you provide. Amazon Web Services STS is activated in your
                *             IAM user account by default. If you previously deactivated Amazon Web Services STS for a region, you
                *             need to reactivate Amazon Web Services STS for that region. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
                *                 Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User
                *                 Guide</i>.</p>
                *         <important>
                *             <p>If you use a built-in algorithm to create a model, SageMaker requires that you provide
                *                 a S3 path to the model artifacts in <code>ModelDataUrl</code>.</p>
                *         </important>
                */
            ModelDataUrl?: string;
            /**
                * <p>The environment variables to set in the Docker container. Each key and value in the
                *                 <code>Environment</code> string to string map can have length of up to 1024. We
                *             support up to 16 entries in the map. </p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the model package to use to create the
                *             model.</p>
                */
            ModelPackageName?: string;
            /**
                * <p>The inference specification name in the model package version.</p>
                */
            InferenceSpecificationName?: string;
            /**
                * <p>Specifies additional configuration for multi-model endpoints.</p>
                */
            MultiModelConfig?: MultiModelConfig;
    }
    export namespace ContainerDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerDefinition) => any;
    }
    export enum ContentClassifier {
            FREE_OF_ADULT_CONTENT = "FreeOfAdultContent",
            FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION = "FreeOfPersonallyIdentifiableInformation"
    }
    /**
        * <p>A structure describing the source of a context.</p>
        */
    export interface ContextSource {
            /**
                * <p>The URI of the source.</p>
                */
            SourceUri: string | undefined;
            /**
                * <p>The type of the source.</p>
                */
            SourceType?: string;
            /**
                * <p>The ID of the source.</p>
                */
            SourceId?: string;
    }
    export namespace ContextSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContextSource) => any;
    }
    /**
        * <p>Lists a summary of the properties of a context. A context provides a logical grouping
        *         of other entities.</p>
        */
    export interface ContextSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the context.</p>
                */
            ContextArn?: string;
            /**
                * <p>The name of the context.</p>
                */
            ContextName?: string;
            /**
                * <p>The source of the context.</p>
                */
            Source?: ContextSource;
            /**
                * <p>The type of the context.</p>
                */
            ContextType?: string;
            /**
                * <p>When the context was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When the context was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace ContextSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContextSummary) => any;
    }
    export enum HyperParameterScalingType {
            AUTO = "Auto",
            LINEAR = "Linear",
            LOGARITHMIC = "Logarithmic",
            REVERSE_LOGARITHMIC = "ReverseLogarithmic"
    }
    /**
        * <p>A list of continuous hyperparameters to tune.</p>
        */
    export interface ContinuousParameterRange {
            /**
                * <p>The name of the continuous hyperparameter to tune.</p>
                */
            Name: string | undefined;
            /**
                * <p>The minimum value for the hyperparameter.
                *             The
                *             tuning job uses floating-point values between this value and <code>MaxValue</code>for
                *             tuning.</p>
                */
            MinValue: string | undefined;
            /**
                * <p>The maximum value for the hyperparameter. The tuning job uses floating-point values
                *             between <code>MinValue</code> value and this value for tuning.</p>
                */
            MaxValue: string | undefined;
            /**
                * <p>The scale that hyperparameter tuning uses to search the hyperparameter range. For
                *             information about choosing a hyperparameter scale, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
                *         <dl>
                *             <dt>Auto</dt>
                *             <dd>
                *                     <p>SageMaker hyperparameter tuning chooses the best scale for the
                *                         hyperparameter.</p>
                *                 </dd>
                *             <dt>Linear</dt>
                *             <dd>
                *                     <p>Hyperparameter tuning searches the values in the hyperparameter range by
                *                         using a linear scale.</p>
                *                 </dd>
                *             <dt>Logarithmic</dt>
                *             <dd>
                *                     <p>Hyperparameter tuning searches the values in the hyperparameter range by
                *                         using a logarithmic scale.</p>
                *                     <p>Logarithmic scaling works only for ranges that have only values greater
                *                         than 0.</p>
                *                 </dd>
                *             <dt>ReverseLogarithmic</dt>
                *             <dd>
                *                     <p>Hyperparameter tuning searches the values in the hyperparameter range by
                *                         using a reverse logarithmic scale.</p>
                *                     <p>Reverse logarithmic scaling works only for ranges that are entirely within
                *                         the range 0<=x<1.0.</p>
                *                 </dd>
                *          </dl>
                */
            ScalingType?: HyperParameterScalingType | string;
    }
    export namespace ContinuousParameterRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContinuousParameterRange) => any;
    }
    /**
        * <p>Defines the possible values for a continuous hyperparameter.</p>
        */
    export interface ContinuousParameterRangeSpecification {
            /**
                * <p>The minimum floating-point value allowed.</p>
                */
            MinValue: string | undefined;
            /**
                * <p>The maximum floating-point value allowed.</p>
                */
            MaxValue: string | undefined;
    }
    export namespace ContinuousParameterRangeSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContinuousParameterRangeSpecification) => any;
    }
    /**
        * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
        */
    export interface MetadataProperties {
            /**
                * <p>The commit ID.</p>
                */
            CommitId?: string;
            /**
                * <p>The repository.</p>
                */
            Repository?: string;
            /**
                * <p>The entity this entity was generated by.</p>
                */
            GeneratedBy?: string;
            /**
                * <p>The project ID.</p>
                */
            ProjectId?: string;
    }
    export namespace MetadataProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetadataProperties) => any;
    }
    export interface CreateActionRequest {
            /**
                * <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
                */
            ActionName: string | undefined;
            /**
                * <p>The source type, ID, and URI.</p>
                */
            Source: ActionSource | undefined;
            /**
                * <p>The action type.</p>
                */
            ActionType: string | undefined;
            /**
                * <p>The description of the action.</p>
                */
            Description?: string;
            /**
                * <p>The status of the action.</p>
                */
            Status?: ActionStatus | string;
            /**
                * <p>A list of properties to add to the action.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>A list of tags to apply to the action.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActionRequest) => any;
    }
    export interface CreateActionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the action.</p>
                */
            ActionArn?: string;
    }
    export namespace CreateActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActionResponse) => any;
    }
    /**
        * <p>Defines the possible values for an integer hyperparameter.</p>
        */
    export interface IntegerParameterRangeSpecification {
            /**
                * <p>The minimum integer value allowed.</p>
                */
            MinValue: string | undefined;
            /**
                * <p>The maximum integer value allowed.</p>
                */
            MaxValue: string | undefined;
    }
    export namespace IntegerParameterRangeSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IntegerParameterRangeSpecification) => any;
    }
    /**
        * <p>Defines the possible values for categorical, continuous, and integer hyperparameters
        *             to be used by an algorithm.</p>
        */
    export interface ParameterRange {
            /**
                * <p>A <code>IntegerParameterRangeSpecification</code> object that defines the possible
                *             values for an integer hyperparameter.</p>
                */
            IntegerParameterRangeSpecification?: IntegerParameterRangeSpecification;
            /**
                * <p>A <code>ContinuousParameterRangeSpecification</code> object that defines the possible
                *             values for a continuous hyperparameter.</p>
                */
            ContinuousParameterRangeSpecification?: ContinuousParameterRangeSpecification;
            /**
                * <p>A <code>CategoricalParameterRangeSpecification</code> object that defines the possible
                *             values for a categorical hyperparameter.</p>
                */
            CategoricalParameterRangeSpecification?: CategoricalParameterRangeSpecification;
    }
    export namespace ParameterRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterRange) => any;
    }
    export enum ParameterType {
            CATEGORICAL = "Categorical",
            CONTINUOUS = "Continuous",
            FREE_TEXT = "FreeText",
            INTEGER = "Integer"
    }
    /**
        * <p>Defines a hyperparameter to be used by an algorithm.</p>
        */
    export interface HyperParameterSpecification {
            /**
                * <p>The name of this hyperparameter. The name must be unique.</p>
                */
            Name: string | undefined;
            /**
                * <p>A brief description of the hyperparameter.</p>
                */
            Description?: string;
            /**
                * <p>The type of this hyperparameter. The valid types are <code>Integer</code>,
                *                 <code>Continuous</code>, <code>Categorical</code>, and <code>FreeText</code>.</p>
                */
            Type: ParameterType | string | undefined;
            /**
                * <p>The allowed range for this hyperparameter.</p>
                */
            Range?: ParameterRange;
            /**
                * <p>Indicates whether this hyperparameter is tunable in a hyperparameter tuning
                *             job.</p>
                */
            IsTunable?: boolean;
            /**
                * <p>Indicates whether this hyperparameter is required.</p>
                */
            IsRequired?: boolean;
            /**
                * <p>The default value for this hyperparameter. If a default value is specified, a
                *             hyperparameter cannot be required.</p>
                */
            DefaultValue?: string;
    }
    export namespace HyperParameterSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterSpecification) => any;
    }
    export enum HyperParameterTuningJobObjectiveType {
            MAXIMIZE = "Maximize",
            MINIMIZE = "Minimize"
    }
    /**
        * <p>Defines the objective metric for a hyperparameter tuning job.
        *             Hyperparameter
        *             tuning uses the value of this metric to evaluate the training jobs it launches, and
        *             returns the training job that results in either the highest or lowest value for this
        *             metric, depending on the value you specify for the <code>Type</code>
        *             parameter.</p>
        */
    export interface HyperParameterTuningJobObjective {
            /**
                * <p>Whether to
                *             minimize
                *             or maximize the objective metric.</p>
                */
            Type: HyperParameterTuningJobObjectiveType | string | undefined;
            /**
                * <p>The
                *             name of the metric to use for the objective metric.</p>
                */
            MetricName: string | undefined;
    }
    export namespace HyperParameterTuningJobObjective {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterTuningJobObjective) => any;
    }
    /**
        * <p>Defines how the algorithm is used for a training job.</p>
        */
    export interface TrainingSpecification {
            /**
                * <p>The Amazon ECR registry path of the Docker image that contains the training
                *             algorithm.</p>
                */
            TrainingImage: string | undefined;
            /**
                * <p>An MD5 hash of the training algorithm that identifies the Docker image used for
                *             training.</p>
                */
            TrainingImageDigest?: string;
            /**
                * <p>A list of the <code>HyperParameterSpecification</code> objects, that define the
                *             supported hyperparameters. This is required if the algorithm supports automatic model
                *             tuning.></p>
                */
            SupportedHyperParameters?: HyperParameterSpecification[];
            /**
                * <p>A list of the instance types that this algorithm can use for training.</p>
                */
            SupportedTrainingInstanceTypes: (TrainingInstanceType | string)[] | undefined;
            /**
                * <p>Indicates whether the algorithm supports distributed training. If set to false, buyers
                *             can't request more than one instance during training.</p>
                */
            SupportsDistributedTraining?: boolean;
            /**
                * <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics
                *             generated by the algorithm.</p>
                */
            MetricDefinitions?: MetricDefinition[];
            /**
                * <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources
                *             to be used by the algorithm.</p>
                */
            TrainingChannels: ChannelSpecification[] | undefined;
            /**
                * <p>A list of the metrics that the algorithm emits that can be used as the objective
                *             metric in a hyperparameter tuning job.</p>
                */
            SupportedTuningJobObjectiveMetrics?: HyperParameterTuningJobObjective[];
    }
    export namespace TrainingSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingSpecification) => any;
    }
    export interface CreateAlgorithmInput {
            /**
                * <p>The name of the algorithm.</p>
                */
            AlgorithmName: string | undefined;
            /**
                * <p>A description of the algorithm.</p>
                */
            AlgorithmDescription?: string;
            /**
                * <p>Specifies details about training jobs run by this algorithm, including the
                *             following:</p>
                *         <ul>
                *             <li>
                *                 <p>The Amazon ECR path of the container and the version digest of the
                *                     algorithm.</p>
                *             </li>
                *             <li>
                *                 <p>The hyperparameters that the algorithm supports.</p>
                *             </li>
                *             <li>
                *                 <p>The instance types that the algorithm supports for training.</p>
                *             </li>
                *             <li>
                *                 <p>Whether the algorithm supports distributed training.</p>
                *             </li>
                *             <li>
                *                 <p>The metrics that the algorithm emits to Amazon CloudWatch.</p>
                *             </li>
                *             <li>
                *                 <p>Which metrics that the algorithm emits can be used as the objective metric for
                *                     hyperparameter tuning jobs.</p>
                *             </li>
                *             <li>
                *                 <p>The input channels that the algorithm supports for training data. For example,
                *                     an algorithm might support <code>train</code>, <code>validation</code>, and
                *                         <code>test</code> channels.</p>
                *             </li>
                *          </ul>
                */
            TrainingSpecification: TrainingSpecification | undefined;
            /**
                * <p>Specifies details about inference jobs that the algorithm runs, including the
                *             following:</p>
                *         <ul>
                *             <li>
                *                 <p>The Amazon ECR paths of containers that contain the inference code and model
                *                     artifacts.</p>
                *             </li>
                *             <li>
                *                 <p>The instance types that the algorithm supports for transform jobs and
                *                     real-time endpoints used for inference.</p>
                *             </li>
                *             <li>
                *                 <p>The input and output content formats that the algorithm supports for
                *                     inference.</p>
                *             </li>
                *          </ul>
                */
            InferenceSpecification?: InferenceSpecification;
            /**
                * <p>Specifies configurations for one or more training jobs and that SageMaker runs to test the
                *             algorithm's training code and, optionally, one or more batch transform jobs that SageMaker
                *             runs to test the algorithm's inference code.</p>
                */
            ValidationSpecification?: AlgorithmValidationSpecification;
            /**
                * <p>Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.</p>
                */
            CertifyForMarketplace?: boolean;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateAlgorithmInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAlgorithmInput) => any;
    }
    export interface CreateAlgorithmOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the new algorithm.</p>
                */
            AlgorithmArn: string | undefined;
    }
    export namespace CreateAlgorithmOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAlgorithmOutput) => any;
    }
    /**
        * <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that
        *      the version runs on.</p>
        */
    export interface ResourceSpec {
            /**
                * <p>The ARN of the SageMaker image that the image version belongs to.</p>
                */
            SageMakerImageArn?: string;
            /**
                * <p>The ARN of the image version created on the instance.</p>
                */
            SageMakerImageVersionArn?: string;
            /**
                * <p>The instance type that the image version runs on.</p>
                *          <note>
                *             <p>
                *                <b>JupyterServer apps</b> only support the <code>system</code> value.</p>
                *             <p>For <b>KernelGateway apps</b>, the <code>system</code>
                *              value is translated to <code>ml.t3.medium</code>. KernelGateway apps also support all other values for available
                *             instance types.</p>
                *          </note>
                */
            InstanceType?: AppInstanceType | string;
            /**
                * <p> The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.</p>
                */
            LifecycleConfigArn?: string;
    }
    export namespace ResourceSpec {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceSpec) => any;
    }
    export interface CreateAppRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName: string | undefined;
            /**
                * <p>The type of app. Supported apps are <code>JupyterServer</code> and
                *         <code>KernelGateway</code>. <code>TensorBoard</code> is not supported.</p>
                */
            AppType: AppType | string | undefined;
            /**
                * <p>The name of the app.</p>
                */
            AppName: string | undefined;
            /**
                * <p>Each tag consists of a key and an optional value.
                *          Tag keys must be unique per resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
                *          <note>
                *             <p>The value of <code>InstanceType</code> passed as part of the <code>ResourceSpec</code> in the <code>CreateApp</code> call overrides the value passed as part of the <code>ResourceSpec</code> configured for
                *           the user profile or the domain. If <code>InstanceType</code> is not specified in any of those three <code>ResourceSpec</code> values for a
                *           <code>KernelGateway</code> app, the <code>CreateApp</code> call fails with a request validation error.</p>
                *          </note>
                */
            ResourceSpec?: ResourceSpec;
    }
    export namespace CreateAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppRequest) => any;
    }
    export interface CreateAppResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the app.</p>
                */
            AppArn?: string;
    }
    export namespace CreateAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppResponse) => any;
    }
    /**
        * <p>Resource being accessed is in use.</p>
        */
    export class ResourceInUse extends __BaseException {
            readonly name: "ResourceInUse";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUse, __BaseException>);
    }
    export interface CreateAppImageConfigRequest {
            /**
                * <p>The name of the AppImageConfig. Must be unique to your account.</p>
                */
            AppImageConfigName: string | undefined;
            /**
                * <p>A list of tags to apply to the AppImageConfig.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The KernelGatewayImageConfig.</p>
                */
            KernelGatewayImageConfig?: KernelGatewayImageConfig;
    }
    export namespace CreateAppImageConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppImageConfigRequest) => any;
    }
    export interface CreateAppImageConfigResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the AppImageConfig.</p>
                */
            AppImageConfigArn?: string;
    }
    export namespace CreateAppImageConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppImageConfigResponse) => any;
    }
    export interface CreateArtifactRequest {
            /**
                * <p>The name of the artifact. Must be unique to your account in an Amazon Web Services Region.</p>
                */
            ArtifactName?: string;
            /**
                * <p>The ID, ID type, and URI of the source.</p>
                */
            Source: ArtifactSource | undefined;
            /**
                * <p>The artifact type.</p>
                */
            ArtifactType: string | undefined;
            /**
                * <p>A list of properties to add to the artifact.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>A list of tags to apply to the artifact.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateArtifactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateArtifactRequest) => any;
    }
    export interface CreateArtifactResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact.</p>
                */
            ArtifactArn?: string;
    }
    export namespace CreateArtifactResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateArtifactResponse) => any;
    }
    /**
        * <p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model
        *          deployment.</p>
        */
    export interface ModelDeployConfig {
            /**
                * <p>Set to <code>True</code> to automatically generate an endpoint name for a one-click
                *          Autopilot model deployment; set to <code>False</code> otherwise. The default value is
                *             <code>False</code>.</p>
                *          <note>
                *             <p>If you set <code>AutoGenerateEndpointName</code> to <code>True</code>, do not specify
                *             the <code>EndpointName</code>; otherwise a 400 error is thrown.</p>
                *          </note>
                */
            AutoGenerateEndpointName?: boolean;
            /**
                * <p>Specifies the endpoint name to use for a one-click Autopilot model deployment if the
                *          endpoint name is not generated automatically.</p>
                *          <note>
                *             <p>Specify the <code>EndpointName</code> if and only if you set
                *                <code>AutoGenerateEndpointName</code> to <code>False</code>; otherwise a 400 error is
                *             thrown.</p>
                *          </note>
                */
            EndpointName?: string;
    }
    export namespace ModelDeployConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelDeployConfig) => any;
    }
    export enum ProblemType {
            BINARY_CLASSIFICATION = "BinaryClassification",
            MULTICLASS_CLASSIFICATION = "MulticlassClassification",
            REGRESSION = "Regression"
    }
    export interface CreateAutoMLJobRequest {
            /**
                * <p>Identifies an Autopilot job. The name must be unique to your account and is
                *          case-insensitive.</p>
                */
            AutoMLJobName: string | undefined;
            /**
                * <p>An array of channel objects that describes the input data and its location. Each channel
                *          is a named input source. Similar to <code>InputDataConfig</code> supported by . Format(s) supported: CSV, Parquet.
                *          A minimum of 500 rows is required for the training dataset. There is not a minimum number
                *          of rows required for the validation dataset.</p>
                */
            InputDataConfig: AutoMLChannel[] | undefined;
            /**
                * <p>Provides information about encryption and the Amazon S3 output path needed to store artifacts
                *          from an AutoML job. Format(s) supported: CSV.</p>
                */
            OutputDataConfig: AutoMLOutputDataConfig | undefined;
            /**
                * <p>Defines the type of supervised learning available for the candidates. For more
                *          information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html">
                *             Amazon SageMaker Autopilot problem types and algorithm support</a>.</p>
                */
            ProblemType?: ProblemType | string;
            /**
                * <p>Defines the objective metric used to measure the predictive quality of an AutoML job. You
                *          provide an <a>AutoMLJobObjective$MetricName</a> and Autopilot infers whether to
                *          minimize or maximize it.</p>
                */
            AutoMLJobObjective?: AutoMLJobObjective;
            /**
                * <p>A collection of settings used to configure an AutoML job.</p>
                */
            AutoMLJobConfig?: AutoMLJobConfig;
            /**
                * <p>The ARN of the role that is used to access the data.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Generates possible candidates without training the models. A candidate is a combination
                *          of data preprocessors, algorithms, and algorithm parameter settings.</p>
                */
            GenerateCandidateDefinitionsOnly?: boolean;
            /**
                * <p>Each tag consists of a key and an optional value. Tag keys must be unique per
                *          resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model
                *          deployment.</p>
                */
            ModelDeployConfig?: ModelDeployConfig;
    }
    export namespace CreateAutoMLJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAutoMLJobRequest) => any;
    }
    export interface CreateAutoMLJobResponse {
            /**
                * <p>The unique ARN assigned to the AutoML job when it is created.</p>
                */
            AutoMLJobArn: string | undefined;
    }
    export namespace CreateAutoMLJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAutoMLJobResponse) => any;
    }
    export interface CreateCodeRepositoryInput {
            /**
                * <p>The name of the Git repository. The name must have 1 to 63 characters. Valid
                *             characters are a-z, A-Z, 0-9, and - (hyphen).</p>
                */
            CodeRepositoryName: string | undefined;
            /**
                * <p>Specifies details about the repository, including the URL where the repository is
                *             located, the default branch, and credentials to use to access the repository.</p>
                */
            GitConfig: GitConfig | undefined;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateCodeRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCodeRepositoryInput) => any;
    }
    export interface CreateCodeRepositoryOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the new repository.</p>
                */
            CodeRepositoryArn: string | undefined;
    }
    export namespace CreateCodeRepositoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCodeRepositoryOutput) => any;
    }
    export enum Framework {
            DARKNET = "DARKNET",
            KERAS = "KERAS",
            MXNET = "MXNET",
            ONNX = "ONNX",
            PYTORCH = "PYTORCH",
            SKLEARN = "SKLEARN",
            TENSORFLOW = "TENSORFLOW",
            TFLITE = "TFLITE",
            XGBOOST = "XGBOOST"
    }
    /**
        * <p>Contains information about the location of input model artifacts, the name and
        *             shape
        *             of the expected data inputs, and the framework in which the model was trained.</p>
        */
    export interface InputConfig {
            /**
                * <p>The S3 path where the model artifacts, which result from model training, are stored.
                *             This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>Specifies the name and shape of the expected data inputs for your trained model with a
                *             JSON dictionary form. The data inputs are <a>InputConfig$Framework</a>
                *             specific. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>TensorFlow</code>: You must specify the name and shape (NHWC format) of
                *                     the expected data inputs using a dictionary format for your trained model. The
                *                     dictionary formats required for the console and CLI are different.</p>
                *                 <ul>
                *                   <li>
                *                         <p>Examples for one input:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console,
                *                                     <code>{"input":[1,1024,1024,3]}</code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI,
                *                                     <code>{\"input\":[1,1024,1024,3]}</code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                   <li>
                *                         <p>Examples for two inputs:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console, <code>{"data1": [1,28,28,1],
                *                                         "data2":[1,28,28,1]}</code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI, <code>{\"data1\": [1,28,28,1],
                *                                         \"data2\":[1,28,28,1]}</code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>KERAS</code>: You must specify the name and shape (NCHW format) of
                *                     expected data inputs using a dictionary format for your trained model. Note that
                *                     while Keras model artifacts should be uploaded in NHWC (channel-last) format,
                *                         <code>DataInputConfig</code> should be specified in NCHW (channel-first)
                *                     format. The dictionary formats required for the console and CLI are
                *                     different.</p>
                *                 <ul>
                *                   <li>
                *                         <p>Examples for one input:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console,
                *                                     <code>{"input_1":[1,3,224,224]}</code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI,
                *                                     <code>{\"input_1\":[1,3,224,224]}</code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                   <li>
                *                         <p>Examples for two inputs:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console, <code>{"input_1": [1,3,224,224],
                *                                         "input_2":[1,3,224,224]} </code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI, <code>{\"input_1\": [1,3,224,224],
                *                                         \"input_2\":[1,3,224,224]}</code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MXNET/ONNX/DARKNET</code>: You must specify the name and shape (NCHW format) of
                *                     the expected data inputs in order using a dictionary format for your trained
                *                     model. The dictionary formats required for the console and CLI are
                *                     different.</p>
                *                 <ul>
                *                   <li>
                *                         <p>Examples for one input:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console,
                *                                     <code>{"data":[1,3,1024,1024]}</code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI,
                *                                     <code>{\"data\":[1,3,1024,1024]}</code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                   <li>
                *                         <p>Examples for two inputs:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console, <code>{"var1": [1,1,28,28],
                *                                         "var2":[1,1,28,28]} </code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI, <code>{\"var1\": [1,1,28,28],
                *                                         \"var2\":[1,1,28,28]}</code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PyTorch</code>: You can either specify the name and shape (NCHW format)
                *                     of expected data inputs in order using a dictionary format for your trained
                *                     model or you can specify the shape only using a list format. The dictionary
                *                     formats required for the console and CLI are different. The list formats for the
                *                     console and CLI are the same.</p>
                *                 <ul>
                *                   <li>
                *                         <p>Examples for one input in dictionary format:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console,
                *                                     <code>{"input0":[1,3,224,224]}</code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI,
                *                                     <code>{\"input0\":[1,3,224,224]}</code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                   <li>
                *                         <p>Example for one input in list format:
                *                             <code>[[1,3,224,224]]</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Examples for two inputs in dictionary format:</p>
                *                         <ul>
                *                         <li>
                *                                 <p>If using the console, <code>{"input0":[1,3,224,224],
                *                                         "input1":[1,3,224,224]}</code>
                *                            </p>
                *                             </li>
                *                         <li>
                *                                 <p>If using the CLI, <code>{\"input0\":[1,3,224,224],
                *                                         \"input1\":[1,3,224,224]} </code>
                *                            </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                   <li>
                *                         <p>Example for two inputs in list format: <code>[[1,3,224,224],
                *                                 [1,3,224,224]]</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>XGBOOST</code>: input data name and shape are not needed.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <code>DataInputConfig</code> supports the following parameters for <code>CoreML</code>
                *             <a>OutputConfig$TargetDevice</a> (ML Model format):</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>shape</code>: Input shape, for example <code>{"input_1": {"shape": [1,224,224,3]}}</code>.
                *                     In addition to static input shapes, CoreML converter supports Flexible input shapes:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Range Dimension. You can use the Range Dimension feature if you know the input shape
                *                             will be within some specific interval in that dimension,
                *                             for example: <code>{"input_1": {"shape": ["1..10", 224, 224, 3]}}</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Enumerated shapes. Sometimes, the models are trained to work only on a select
                *                             set of inputs. You can enumerate all supported input shapes,
                *                             for example: <code>{"input_1": {"shape": [[1, 224, 224, 3], [1, 160, 160, 3]]}}</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>default_shape</code>: Default input shape. You can set a default shape during
                *                     conversion for both Range Dimension and Enumerated Shapes. For example
                *                     <code>{"input_1": {"shape": ["1..10", 224, 224, 3], "default_shape": [1, 224, 224, 3]}}</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>type</code>: Input type. Allowed values: <code>Image</code> and <code>Tensor</code>.
                *                     By default, the converter generates an ML Model with inputs of type Tensor (MultiArray).
                *                     User can set input type to be Image. Image input type requires additional input parameters
                *                     such as <code>bias</code> and <code>scale</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>bias</code>: If the input type is an Image, you need to provide the bias vector.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>scale</code>: If the input type is an Image, you need to provide a scale factor.</p>
                *             </li>
                *          </ul>
                *         <p>CoreML <code>ClassifierConfig</code> parameters can be specified using
                *             <a>OutputConfig$CompilerOptions</a>. CoreML converter supports Tensorflow and PyTorch models.
                *             CoreML conversion examples:</p>
                *         <ul>
                *             <li>
                *                 <p>Tensor type input:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>"DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape":
                *                             [1,224,224,3]}}</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>Tensor type input without input name (PyTorch):</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape":
                *                             [1,3,224,224]}]</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>Image type input:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>"DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape":
                *                             [1,224,224,3], "type": "Image", "bias": [-1,-1,-1], "scale": 0.007843137255}}</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>Image type input without input name (PyTorch):</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape":
                *                             [1,3,224,224], "type": "Image", "bias": [-1,-1,-1], "scale": 0.007843137255}]</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <p>Depending on the model format, <code>DataInputConfig</code> requires the following parameters for
                *             <code>ml_eia2</code>
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-TargetDevice">OutputConfig:TargetDevice</a>.</p>
                *         <ul>
                *             <li>
                *                <p>For TensorFlow models saved in the SavedModel format, specify the input names
                *                 from <code>signature_def_key</code> and the input model shapes for <code>DataInputConfig</code>.
                *                 Specify the <code>signature_def_key</code> in
                *                 <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions">
                *                      <code>OutputConfig:CompilerOptions</code>
                *                   </a> if
                *                 the model does not use TensorFlow's default signature def key. For example:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>"DataInputConfig": {"inputs": [1, 224, 224, 3]}</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>"CompilerOptions": {"signature_def_key": "serving_custom"}</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>For TensorFlow models saved as a frozen graph, specify the input tensor names and shapes
                *                 in <code>DataInputConfig</code> and the output tensor names for <code>output_names</code> in
                *                 <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions">
                *                      <code>OutputConfig:CompilerOptions</code>
                *                   </a>.
                *                 For example:</p>
                *                 <ul>
                *                   <li>
                *                      <p>
                *                         <code>"DataInputConfig": {"input_tensor:0": [1, 224, 224, 3]}</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>"CompilerOptions": {"output_names": ["output_tensor:0"]}</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            DataInputConfig: string | undefined;
            /**
                * <p>Identifies the framework in which the model was trained. For example:
                *             TENSORFLOW.</p>
                */
            Framework: Framework | string | undefined;
            /**
                * <p>Specifies the framework version to use. This API field is only supported for the PyTorch and TensorFlow frameworks.</p>
                *         <p>For information about framework versions supported for cloud targets and edge devices, see
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-cloud.html">Cloud Supported Instance Types and Frameworks</a> and
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-devices-edge-frameworks.html">Edge Supported Frameworks</a>.</p>
                */
            FrameworkVersion?: string;
    }
    export namespace InputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputConfig) => any;
    }
    /**
        * <p>Contains information about a target platform that you want your model to run on, such
        *             as OS, architecture, and accelerators. It is an alternative of
        *             <code>TargetDevice</code>.</p>
        */
    export interface TargetPlatform {
            /**
                * <p>Specifies a target platform OS.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>LINUX</code>: Linux-based operating systems.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ANDROID</code>: Android operating systems. Android API level can be
                *                     specified using the <code>ANDROID_PLATFORM</code> compiler option. For example,
                *                     <code>"CompilerOptions": {'ANDROID_PLATFORM': 28}</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Os: TargetPlatformOs | string | undefined;
            /**
                * <p>Specifies a target platform architecture.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>X86_64</code>: 64-bit version of the x86 instruction set.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>X86</code>: 32-bit version of the x86 instruction set.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ARM64</code>: ARMv8 64-bit CPU.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ARM_EABIHF</code>: ARMv7 32-bit, Hard Float.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ARM_EABI</code>: ARMv7 32-bit, Soft Float. Used by Android 32-bit ARM
                *                     platform.</p>
                *             </li>
                *          </ul>
                */
            Arch: TargetPlatformArch | string | undefined;
            /**
                * <p>Specifies a target platform accelerator (optional).</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>NVIDIA</code>: Nvidia graphics processing unit. It also requires
                *                     <code>gpu-code</code>, <code>trt-ver</code>, <code>cuda-ver</code> compiler
                *                     options</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MALI</code>: ARM Mali graphics processor</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>INTEL_GRAPHICS</code>: Integrated Intel graphics</p>
                *             </li>
                *          </ul>
                */
            Accelerator?: TargetPlatformAccelerator | string;
    }
    export namespace TargetPlatform {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetPlatform) => any;
    }
    /**
        * <p>Contains information about the output location for the compiled model and the target
        *             device that the model runs on. <code>TargetDevice</code> and <code>TargetPlatform</code>
        *             are mutually exclusive, so you need to choose one between the two to specify your target
        *             device or platform. If you cannot find your device you want to use from the
        *                 <code>TargetDevice</code> list, use <code>TargetPlatform</code> to describe the
        *             platform of your edge device and <code>CompilerOptions</code> if there are specific
        *             settings that are required or recommended to use for particular TargetPlatform.</p>
        */
    export interface OutputConfig {
            /**
                * <p>Identifies the S3 bucket where you want Amazon SageMaker to store the model artifacts. For
                *             example, <code>s3://bucket-name/key-name-prefix</code>.</p>
                */
            S3OutputLocation: string | undefined;
            /**
                * <p>Identifies the target device or the machine learning instance that you want to run
                *             your model on after the compilation has completed. Alternatively, you can specify OS,
                *             architecture, and accelerator using <a>TargetPlatform</a> fields. It can be
                *             used instead of <code>TargetPlatform</code>.</p>
                */
            TargetDevice?: TargetDevice | string;
            /**
                * <p>Contains information about a target platform that you want your model to run on, such
                *             as OS, architecture, and accelerators. It is an alternative of
                *             <code>TargetDevice</code>.</p>
                *         <p>The following examples show how to configure the <code>TargetPlatform</code> and
                *                 <code>CompilerOptions</code> JSON strings for popular target platforms: </p>
                *         <ul>
                *             <li>
                *                 <p>Raspberry Pi 3 Model B+</p>
                *                 <p>
                *                   <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM_EABIHF"},</code>
                *                </p>
                *                 <p>
                *                   <code> "CompilerOptions": {'mattr': ['+neon']}</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Jetson TX2</p>
                *                 <p>
                *                   <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator":
                *                         "NVIDIA"},</code>
                *                </p>
                *                 <p>
                *                   <code> "CompilerOptions": {'gpu-code': 'sm_62', 'trt-ver': '6.0.1',
                *                         'cuda-ver': '10.0'}</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>EC2 m5.2xlarge instance OS</p>
                *                 <p>
                *                   <code>"TargetPlatform": {"Os": "LINUX", "Arch": "X86_64", "Accelerator":
                *                         "NVIDIA"},</code>
                *                </p>
                *                 <p>
                *                   <code> "CompilerOptions": {'mcpu': 'skylake-avx512'}</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>RK3399</p>
                *                 <p>
                *                   <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator":
                *                         "MALI"}</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>ARMv7 phone (CPU)</p>
                *                 <p>
                *                   <code>"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM_EABI"},</code>
                *                </p>
                *                 <p>
                *                   <code> "CompilerOptions": {'ANDROID_PLATFORM': 25, 'mattr':
                *                     ['+neon']}</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>ARMv8 phone (CPU)</p>
                *                 <p>
                *                   <code>"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM64"},</code>
                *                </p>
                *                 <p>
                *                   <code> "CompilerOptions": {'ANDROID_PLATFORM': 29}</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            TargetPlatform?: TargetPlatform;
            /**
                * <p>Specifies additional parameters for compiler options in JSON format. The compiler
                *             options are <code>TargetPlatform</code> specific. It is required for NVIDIA accelerators
                *             and highly recommended for CPU compilations. For any other cases, it is optional to
                *             specify <code>CompilerOptions.</code>
                *          </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DTYPE</code>: Specifies the data type for the input. When compiling for
                *                     <code>ml_*</code> (except for <code>ml_inf</code>) instances using PyTorch
                *                     framework, provide the data type (dtype) of the model's input.
                *                         <code>"float32"</code> is used if <code>"DTYPE"</code> is not specified.
                *                     Options for data type are:</p>
                *                 <ul>
                *                   <li>
                *                      <p>float32: Use either <code>"float"</code> or <code>"float32"</code>.</p>
                *                   </li>
                *                   <li>
                *                      <p>int64: Use either <code>"int64"</code> or <code>"long"</code>.</p>
                *                   </li>
                *                </ul>
                *                 <p> For example, <code>{"dtype" : "float32"}</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>CPU</code>: Compilation for CPU supports the following compiler
                *                     options.</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>mcpu</code>: CPU micro-architecture. For example, <code>{'mcpu':
                *                                 'skylake-avx512'}</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>mattr</code>: CPU flags. For example, <code>{'mattr': ['+neon',
                *                                 '+vfpv4']}</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ARM</code>: Details of ARM CPU compilations.</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>NEON</code>: NEON is an implementation of the Advanced SIMD
                *                             extension used in ARMv7 processors.</p>
                *                         <p>For example, add <code>{'mattr': ['+neon']}</code> to the compiler
                *                             options if compiling for ARM 32-bit platform with the NEON
                *                             support.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>NVIDIA</code>: Compilation for NVIDIA GPU supports the following
                *                     compiler options.</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>gpu_code</code>: Specifies the targeted architecture.</p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>trt-ver</code>: Specifies the TensorRT versions in x.y.z.
                *                             format.</p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>cuda-ver</code>: Specifies the CUDA version in x.y
                *                             format.</p>
                *                     </li>
                *                </ul>
                *                 <p>For example, <code>{'gpu-code': 'sm_72', 'trt-ver': '6.0.1', 'cuda-ver':
                *                         '10.1'}</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ANDROID</code>: Compilation for the Android OS supports the following
                *                     compiler options:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>ANDROID_PLATFORM</code>: Specifies the Android API levels.
                *                             Available levels range from 21 to 29. For example,
                *                                 <code>{'ANDROID_PLATFORM': 28}</code>.</p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>mattr</code>: Add <code>{'mattr': ['+neon']}</code> to compiler
                *                             options if compiling for ARM 32-bit platform with NEON support.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>INFERENTIA</code>: Compilation for target ml_inf1 uses compiler options
                *                     passed in as a JSON string. For example,
                *                     <code>"CompilerOptions": "\"--verbose 1 --num-neuroncores 2 -O2\""</code>.
                *                 </p>
                *                 <p>For information about supported compiler options, see
                *                     <a href="https://github.com/aws/aws-neuron-sdk/blob/master/docs/neuron-cc/command-line-reference.md">
                *                         Neuron Compiler CLI</a>.
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>CoreML</code>: Compilation for the CoreML <a>OutputConfig$TargetDevice</a>
                *                     supports the following compiler options:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>class_labels</code>: Specifies the classification labels file
                *                             name inside input tar.gz file. For example,
                *                                 <code>{"class_labels": "imagenet_labels_1000.txt"}</code>.
                *                             Labels inside the txt file should be separated by newlines.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>EIA</code>: Compilation for the Elastic Inference Accelerator supports the following
                *                     compiler options:</p>
                *                 <ul>
                *                   <li>
                *                      <p>
                *                         <code>precision_mode</code>: Specifies the precision of compiled artifacts. Supported values
                *                         are <code>"FP16"</code> and <code>"FP32"</code>. Default is
                *                         <code>"FP32"</code>.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>signature_def_key</code>: Specifies the signature to use for models in SavedModel
                *                         format. Defaults is TensorFlow's default signature def key.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>output_names</code>: Specifies a list of output tensor names for
                *                         models in FrozenGraph format. Set at most one API field, either: <code>signature_def_key</code> or <code>output_names</code>.</p>
                *                   </li>
                *                </ul>
                *                 <p>For example:
                *                     <code>{"precision_mode": "FP32",  "output_names": ["output:0"]}</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CompilerOptions?: string;
            /**
                * <p>The Amazon Web Services Key Management Service key (Amazon Web Services KMS) that Amazon SageMaker uses to encrypt your output models with Amazon S3 server-side encryption
                *         after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
                *         For more information, see
                *         <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">KMS-Managed Encryption
                *                 Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i>
                *         </p>
                * 	        <p>The KmsKeyId can be any of the following formats: </p>
                *         <ul>
                *             <li>
                *                 <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Key ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Alias name: <code>alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Alias name ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
    }
    export namespace OutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputConfig) => any;
    }
    /**
        * <p>The <a>VpcConfig</a> configuration object that specifies the VPC that you
        *             want the compilation jobs to connect to. For more information on
        *             controlling access to your Amazon S3 buckets used for compilation job, see
        *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC</a>.</p>
        */
    export interface NeoVpcConfig {
            /**
                * <p>The VPC security group IDs. IDs have the form of <code>sg-xxxxxxxx</code>.
                *             Specify the security groups for the VPC that is specified in the <code>Subnets</code> field.</p>
                */
            SecurityGroupIds: string[] | undefined;
            /**
                * <p>The ID of the subnets in the VPC that you want to connect the
                *             compilation job to for accessing the model in Amazon S3.</p>
                */
            Subnets: string[] | undefined;
    }
    export namespace NeoVpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NeoVpcConfig) => any;
    }
    export interface CreateCompilationJobRequest {
            /**
                * <p>A name for the model compilation job. The name must be unique within the Amazon Web Services Region
                *             and within your Amazon Web Services account. </p>
                */
            CompilationJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on
                *             your behalf. </p>
                *         <p>During model compilation, Amazon SageMaker needs your permission to:</p>
                *         <ul>
                *             <li>
                *                 <p>Read input data from an S3 bucket</p>
                *             </li>
                *             <li>
                *                 <p>Write model artifacts to an S3 bucket</p>
                *             </li>
                *             <li>
                *                 <p>Write logs to Amazon CloudWatch Logs</p>
                *             </li>
                *             <li>
                *                 <p>Publish metrics to Amazon CloudWatch</p>
                *             </li>
                *          </ul>
                *         <p>You grant permissions for all of these tasks to an IAM role. To pass this role to
                *             Amazon SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission. For
                *             more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon SageMaker
                *                 Roles.</a>
                *          </p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a versioned model package. Provide either a
                *     <code>ModelPackageVersionArn</code> or an <code>InputConfig</code> object in the
                *     request syntax. The presence of both objects in the <code>CreateCompilationJob</code>
                *     request will return an exception.</p>
                */
            ModelPackageVersionArn?: string;
            /**
                * <p>Provides information about the location of input model artifacts, the name and shape
                *             of the expected data inputs, and the framework in which the model was trained.</p>
                */
            InputConfig?: InputConfig;
            /**
                * <p>Provides information about the output location for the compiled model and the target
                *             device the model runs on.</p>
                */
            OutputConfig: OutputConfig | undefined;
            /**
                * <p>A <a>VpcConfig</a> object that specifies the VPC that you want your
                *             compilation job to connect to. Control access to your models by
                *             configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon
                *                 Virtual Private Cloud</a>.</p>
                */
            VpcConfig?: NeoVpcConfig;
            /**
                * <p>Specifies a limit to how long a model compilation job can run. When the job reaches
                *             the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training
                *             costs.</p>
                */
            StoppingCondition: StoppingCondition | undefined;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateCompilationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCompilationJobRequest) => any;
    }
    export interface CreateCompilationJobResponse {
            /**
                * <p>If the action is successful, the service sends back an HTTP 200 response. Amazon SageMaker returns
                *             the following data in JSON format:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>CompilationJobArn</code>: The Amazon Resource Name (ARN) of the compiled
                *                     job.</p>
                *             </li>
                *          </ul>
                */
            CompilationJobArn: string | undefined;
    }
    export namespace CreateCompilationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCompilationJobResponse) => any;
    }
    export interface CreateContextRequest {
            /**
                * <p>The name of the context. Must be unique to your account in an Amazon Web Services Region.</p>
                */
            ContextName: string | undefined;
            /**
                * <p>The source type, ID, and URI.</p>
                */
            Source: ContextSource | undefined;
            /**
                * <p>The context type.</p>
                */
            ContextType: string | undefined;
            /**
                * <p>The description of the context.</p>
                */
            Description?: string;
            /**
                * <p>A list of properties to add to the context.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>A list of tags to apply to the context.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateContextRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContextRequest) => any;
    }
    export interface CreateContextResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the context.</p>
                */
            ContextArn?: string;
    }
    export namespace CreateContextResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContextResponse) => any;
    }
    /**
        * <p>Information about the container that a data quality monitoring job runs.</p>
        */
    export interface DataQualityAppSpecification {
            /**
                * <p>The container image that the data quality monitoring job runs.</p>
                */
            ImageUri: string | undefined;
            /**
                * <p>The entrypoint for a container used to run a monitoring job.</p>
                */
            ContainerEntrypoint?: string[];
            /**
                * <p>The arguments to send to the container that the monitoring job runs.</p>
                */
            ContainerArguments?: string[];
            /**
                * <p>An Amazon S3 URI to a script that is called per row prior to running analysis. It can
                *          base64 decode the payload and convert it into a flatted json so that the built-in container
                *          can use the converted data. Applicable only for the built-in (first party)
                *          containers.</p>
                */
            RecordPreprocessorSourceUri?: string;
            /**
                * <p>An Amazon S3 URI to a script that is called after analysis has been performed.
                *          Applicable only for the built-in (first party) containers.</p>
                */
            PostAnalyticsProcessorSourceUri?: string;
            /**
                * <p>Sets the environment variables in the container that the monitoring job runs.</p>
                */
            Environment?: Record<string, string>;
    }
    export namespace DataQualityAppSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataQualityAppSpecification) => any;
    }
    /**
        * <p>The constraints resource for a monitoring job.</p>
        */
    export interface MonitoringConstraintsResource {
            /**
                * <p>The Amazon S3 URI for the constraints resource.</p>
                */
            S3Uri?: string;
    }
    export namespace MonitoringConstraintsResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringConstraintsResource) => any;
    }
    /**
        * <p>The statistics resource for a monitoring job.</p>
        */
    export interface MonitoringStatisticsResource {
            /**
                * <p>The Amazon S3 URI for the statistics resource.</p>
                */
            S3Uri?: string;
    }
    export namespace MonitoringStatisticsResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringStatisticsResource) => any;
    }
    /**
        * <p>Configuration for monitoring constraints and monitoring statistics. These baseline
        *          resources are compared against the results of the current job from the series of jobs
        *          scheduled to collect data periodically.</p>
        */
    export interface DataQualityBaselineConfig {
            /**
                * <p>The name of the job that performs baselining for the data quality monitoring job.</p>
                */
            BaseliningJobName?: string;
            /**
                * <p>The constraints resource for a monitoring job.</p>
                */
            ConstraintsResource?: MonitoringConstraintsResource;
            /**
                * <p>The statistics resource for a monitoring job.</p>
                */
            StatisticsResource?: MonitoringStatisticsResource;
    }
    export namespace DataQualityBaselineConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataQualityBaselineConfig) => any;
    }
    export enum ProcessingS3DataDistributionType {
            FULLYREPLICATED = "FullyReplicated",
            SHARDEDBYS3KEY = "ShardedByS3Key"
    }
    export enum ProcessingS3InputMode {
            FILE = "File",
            PIPE = "Pipe"
    }
    /**
        * <p>Input object for the endpoint</p>
        */
    export interface EndpointInput {
            /**
                * <p>An endpoint in customer's account which has enabled <code>DataCaptureConfig</code>
                *          enabled.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>Path to the filesystem where the endpoint data is available to the container.</p>
                */
            LocalPath: string | undefined;
            /**
                * <p>Whether the <code>Pipe</code> or <code>File</code> is used as the input mode for
                *          transferring data for the monitoring job. <code>Pipe</code> mode is recommended for large
                *          datasets. <code>File</code> mode is useful for small files that fit in memory. Defaults to
                *             <code>File</code>.</p>
                */
            S3InputMode?: ProcessingS3InputMode | string;
            /**
                * <p>Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key.
                *          Defaults to <code>FullyReplicated</code>
                *          </p>
                */
            S3DataDistributionType?: ProcessingS3DataDistributionType | string;
            /**
                * <p>The attributes of the input data that are the input features.</p>
                */
            FeaturesAttribute?: string;
            /**
                * <p>The attribute of the input data that represents the ground truth label.</p>
                */
            InferenceAttribute?: string;
            /**
                * <p>In a classification problem, the attribute that represents the class probability.</p>
                */
            ProbabilityAttribute?: string;
            /**
                * <p>The threshold for the class probability to be evaluated as a positive result.</p>
                */
            ProbabilityThresholdAttribute?: number;
            /**
                * <p>If specified, monitoring jobs substract this time from the start time. For information
                *          about using offsets for scheduling monitoring jobs, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule Model
                *             Quality Monitoring Jobs</a>.</p>
                */
            StartTimeOffset?: string;
            /**
                * <p>If specified, monitoring jobs substract this time from the end time. For information
                *          about using offsets for scheduling monitoring jobs, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule Model
                *             Quality Monitoring Jobs</a>.</p>
                */
            EndTimeOffset?: string;
    }
    export namespace EndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointInput) => any;
    }
    /**
        * <p>The input for the data quality monitoring job. Currently endpoints are supported for
        *          input.</p>
        */
    export interface DataQualityJobInput {
            /**
                * <p>Input object for the endpoint</p>
                */
            EndpointInput: EndpointInput | undefined;
    }
    export namespace DataQualityJobInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataQualityJobInput) => any;
    }
    export enum ProcessingS3UploadMode {
            CONTINUOUS = "Continuous",
            END_OF_JOB = "EndOfJob"
    }
    /**
        * <p>Information about where and how you want to store the results of a monitoring
        *          job.</p>
        */
    export interface MonitoringS3Output {
            /**
                * <p>A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a
                *          monitoring job.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a
                *          monitoring job. LocalPath is an absolute path for the output data.</p>
                */
            LocalPath: string | undefined;
            /**
                * <p>Whether to upload the results of the monitoring job continuously or after the job
                *          completes.</p>
                */
            S3UploadMode?: ProcessingS3UploadMode | string;
    }
    export namespace MonitoringS3Output {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringS3Output) => any;
    }
    /**
        * <p>The output object for a monitoring job.</p>
        */
    export interface MonitoringOutput {
            /**
                * <p>The Amazon S3 storage location where the results of a monitoring job are saved.</p>
                */
            S3Output: MonitoringS3Output | undefined;
    }
    export namespace MonitoringOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringOutput) => any;
    }
    /**
        * <p>The output configuration for monitoring jobs.</p>
        */
    export interface MonitoringOutputConfig {
            /**
                * <p>Monitoring outputs for monitoring jobs. This is where the output of the periodic
                *          monitoring jobs is uploaded.</p>
                */
            MonitoringOutputs: MonitoringOutput[] | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model
                *          artifacts at rest using Amazon S3 server-side encryption.</p>
                */
            KmsKeyId?: string;
    }
    export namespace MonitoringOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringOutputConfig) => any;
    }
    export enum ProcessingInstanceType {
            ML_C4_2XLARGE = "ml.c4.2xlarge",
            ML_C4_4XLARGE = "ml.c4.4xlarge",
            ML_C4_8XLARGE = "ml.c4.8xlarge",
            ML_C4_XLARGE = "ml.c4.xlarge",
            ML_C5_18XLARGE = "ml.c5.18xlarge",
            ML_C5_2XLARGE = "ml.c5.2xlarge",
            ML_C5_4XLARGE = "ml.c5.4xlarge",
            ML_C5_9XLARGE = "ml.c5.9xlarge",
            ML_C5_XLARGE = "ml.c5.xlarge",
            ML_G4DN_12XLARGE = "ml.g4dn.12xlarge",
            ML_G4DN_16XLARGE = "ml.g4dn.16xlarge",
            ML_G4DN_2XLARGE = "ml.g4dn.2xlarge",
            ML_G4DN_4XLARGE = "ml.g4dn.4xlarge",
            ML_G4DN_8XLARGE = "ml.g4dn.8xlarge",
            ML_G4DN_XLARGE = "ml.g4dn.xlarge",
            ML_M4_10XLARGE = "ml.m4.10xlarge",
            ML_M4_16XLARGE = "ml.m4.16xlarge",
            ML_M4_2XLARGE = "ml.m4.2xlarge",
            ML_M4_4XLARGE = "ml.m4.4xlarge",
            ML_M4_XLARGE = "ml.m4.xlarge",
            ML_M5_12XLARGE = "ml.m5.12xlarge",
            ML_M5_24XLARGE = "ml.m5.24xlarge",
            ML_M5_2XLARGE = "ml.m5.2xlarge",
            ML_M5_4XLARGE = "ml.m5.4xlarge",
            ML_M5_LARGE = "ml.m5.large",
            ML_M5_XLARGE = "ml.m5.xlarge",
            ML_P2_16XLARGE = "ml.p2.16xlarge",
            ML_P2_8XLARGE = "ml.p2.8xlarge",
            ML_P2_XLARGE = "ml.p2.xlarge",
            ML_P3_16XLARGE = "ml.p3.16xlarge",
            ML_P3_2XLARGE = "ml.p3.2xlarge",
            ML_P3_8XLARGE = "ml.p3.8xlarge",
            ML_R5_12XLARGE = "ml.r5.12xlarge",
            ML_R5_16XLARGE = "ml.r5.16xlarge",
            ML_R5_24XLARGE = "ml.r5.24xlarge",
            ML_R5_2XLARGE = "ml.r5.2xlarge",
            ML_R5_4XLARGE = "ml.r5.4xlarge",
            ML_R5_8XLARGE = "ml.r5.8xlarge",
            ML_R5_LARGE = "ml.r5.large",
            ML_R5_XLARGE = "ml.r5.xlarge",
            ML_T3_2XLARGE = "ml.t3.2xlarge",
            ML_T3_LARGE = "ml.t3.large",
            ML_T3_MEDIUM = "ml.t3.medium",
            ML_T3_XLARGE = "ml.t3.xlarge"
    }
    /**
        * <p>Configuration for the cluster used to run model monitoring jobs.</p>
        */
    export interface MonitoringClusterConfig {
            /**
                * <p>The number of ML compute instances to use in the model monitoring job. For distributed
                *          processing jobs, specify a value greater than 1. The default value is 1.</p>
                */
            InstanceCount: number | undefined;
            /**
                * <p>The ML compute instance type for the processing job.</p>
                */
            InstanceType: ProcessingInstanceType | string | undefined;
            /**
                * <p>The size of the ML storage volume, in gigabytes, that you want to provision. You must
                *          specify sufficient ML storage for your scenario.</p>
                */
            VolumeSizeInGB: number | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data
                *          on the storage volume attached to the ML compute instance(s) that run the model monitoring
                *          job.</p>
                */
            VolumeKmsKeyId?: string;
    }
    export namespace MonitoringClusterConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringClusterConfig) => any;
    }
    /**
        * <p>Identifies the resources to deploy for a monitoring job.</p>
        */
    export interface MonitoringResources {
            /**
                * <p>The configuration for the cluster resources used to run the processing job.</p>
                */
            ClusterConfig: MonitoringClusterConfig | undefined;
    }
    export namespace MonitoringResources {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringResources) => any;
    }
    /**
        * <p>The networking configuration for the monitoring job.</p>
        */
    export interface MonitoringNetworkConfig {
            /**
                * <p>Whether to encrypt all communications between the instances used for the monitoring
                *          jobs. Choose <code>True</code> to encrypt communications. Encryption provides greater
                *          security for distributed jobs, but the processing might take longer.</p>
                */
            EnableInterContainerTrafficEncryption?: boolean;
            /**
                * <p>Whether to allow inbound and outbound network calls to and from the containers used for
                *          the monitoring job.</p>
                */
            EnableNetworkIsolation?: boolean;
            /**
                * <p>Specifies a VPC that your training jobs and hosted models have access to. Control
                *             access to and from your training and model containers by configuring the VPC. For more
                *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs
                *                 by Using an Amazon Virtual Private Cloud</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace MonitoringNetworkConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringNetworkConfig) => any;
    }
    /**
        * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
        */
    export interface MonitoringStoppingCondition {
            /**
                * <p>The maximum runtime allowed in seconds.</p>
                *          <note>
                *             <p>The <code>MaxRuntimeInSeconds</code> cannot exceed the frequency of the job. For data quality and
                *             model explainability, this can be up to 3600 seconds for an hourly schedule. For model
                *             bias and model quality hourly schedules, this can be up to 1800 seconds.</p>
                *          </note>
                */
            MaxRuntimeInSeconds: number | undefined;
    }
    export namespace MonitoringStoppingCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringStoppingCondition) => any;
    }
    export interface CreateDataQualityJobDefinitionRequest {
            /**
                * <p>The name for the monitoring job definition.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>Configures the constraints and baselines for the monitoring job.</p>
                */
            DataQualityBaselineConfig?: DataQualityBaselineConfig;
            /**
                * <p>Specifies the container that runs the monitoring job.</p>
                */
            DataQualityAppSpecification: DataQualityAppSpecification | undefined;
            /**
                * <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring
                *          inputs.</p>
                */
            DataQualityJobInput: DataQualityJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            DataQualityJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>Specifies networking configuration for the monitoring job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
                *          perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
            /**
                * <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *             User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDataQualityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataQualityJobDefinitionRequest) => any;
    }
    export interface CreateDataQualityJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the job definition.</p>
                */
            JobDefinitionArn: string | undefined;
    }
    export namespace CreateDataQualityJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataQualityJobDefinitionResponse) => any;
    }
    export enum EdgePresetDeploymentType {
            GreengrassV2Component = "GreengrassV2Component"
    }
    /**
        * <p>The output configuration.</p>
        */
    export interface EdgeOutputConfig {
            /**
                * <p>The Amazon Simple Storage (S3) bucker URI.</p>
                */
            S3OutputLocation: string | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job.
                *      If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The deployment type SageMaker Edge Manager will create.
                *       Currently only supports Amazon Web Services IoT Greengrass Version 2 components.</p>
                */
            PresetDeploymentType?: EdgePresetDeploymentType | string;
            /**
                * <p>The configuration used to create deployment artifacts.
                *       Specify configuration options with a JSON string. The available configuration options for each type are:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component. If not specified,
                *      the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager
                *      packaging job.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ComponentDescription</code> (optional) - Description of the component.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ComponentVersion</code> (optional) - The version of the component.</p>
                *                <note>
                *                   <p>Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a<i>
                *        major.minor.patch</i> number system. For example, version 1.0.0 represents the first
                *         major release for a component. For more information, see the <a href="https://semver.org/">semantic version specification</a>.</p>
                *                </note>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PlatformOS</code> (optional) - The name of the operating system for the platform.
                *      Supported platforms include Windows and Linux.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PlatformArchitecture</code> (optional) - The processor architecture for the platform. </p>
                *                <p>Supported architectures Windows include: Windows32_x86, Windows64_x64.</p>
                *                <p>Supported architectures for Linux include: Linux x86_64, Linux ARMV8.</p>
                *             </li>
                *          </ul>
                */
            PresetDeploymentConfig?: string;
    }
    export namespace EdgeOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeOutputConfig) => any;
    }
    export interface CreateDeviceFleetRequest {
            /**
                * <p>The name of the fleet that the device belongs to.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
                */
            RoleArn?: string;
            /**
                * <p>A description of the fleet.</p>
                */
            Description?: string;
            /**
                * <p>The output configuration for storing sample data collected by the fleet.</p>
                */
            OutputConfig: EdgeOutputConfig | undefined;
            /**
                * <p>Creates tags for the specified fleet.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation.
                *      The name of the role alias generated will match this pattern:
                *      "SageMakerEdge-{DeviceFleetName}".</p>
                *          <p>For example, if your device fleet is called "demo-fleet", the name of
                *      the role alias will be "SageMakerEdge-demo-fleet".</p>
                */
            EnableIotRoleAlias?: boolean;
    }
    export namespace CreateDeviceFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeviceFleetRequest) => any;
    }
    /**
        * <p>The JupyterServer app settings.</p>
        */
    export interface JupyterServerAppSettings {
            /**
                * <p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the <code>LifecycleConfigArns</code> parameter, then this parameter is also required.</p>
                */
            DefaultResourceSpec?: ResourceSpec;
            /**
                * <p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp. If you use this parameter, the <code>DefaultResourceSpec</code> parameter is also required.</p>
                *         <note>
                *             <p>To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
                *          </note>
                */
            LifecycleConfigArns?: string[];
    }
    export namespace JupyterServerAppSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JupyterServerAppSettings) => any;
    }
    /**
        * <p>A custom SageMaker image. For more information, see
        *        <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.</p>
        */
    export interface CustomImage {
            /**
                * <p>The name of the CustomImage. Must be unique to your account.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>The version number of the CustomImage.</p>
                */
            ImageVersionNumber?: number;
            /**
                * <p>The name of the AppImageConfig.</p>
                */
            AppImageConfigName: string | undefined;
    }
    export namespace CustomImage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomImage) => any;
    }
    /**
        * <p>The KernelGateway app settings.</p>
        */
    export interface KernelGatewayAppSettings {
            /**
                * <p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.</p>
                *          <note>
                *             <p>The Amazon SageMaker Studio UI does not use the default instance type value set here. The default
                *           instance type set here is used when Apps are created using the Amazon Web Services Command Line Interface or Amazon Web Services CloudFormation
                *             and the instance type parameter value is not passed.</p>
                *          </note>
                */
            DefaultResourceSpec?: ResourceSpec;
            /**
                * <p>A list of custom SageMaker images that are configured to run as a KernelGateway app.</p>
                */
            CustomImages?: CustomImage[];
            /**
                * <p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the the user profile or domain.</p>
                *         <note>
                *             <p>To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
                *          </note>
                */
            LifecycleConfigArns?: string[];
    }
    export namespace KernelGatewayAppSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KernelGatewayAppSettings) => any;
    }
    /**
        * <p>A collection of settings that apply to an <code>RSessionGateway</code> app.</p>
        */
    export interface RSessionAppSettings {
            /**
                * <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that
                *      the version runs on.</p>
                */
            DefaultResourceSpec?: ResourceSpec;
            /**
                * <p>A list of custom SageMaker images that are configured to run as a RSession app.</p>
                */
            CustomImages?: CustomImage[];
    }
    export namespace RSessionAppSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RSessionAppSettings) => any;
    }
    export enum RStudioServerProAccessStatus {
            Disabled = "DISABLED",
            Enabled = "ENABLED"
    }
    export enum RStudioServerProUserGroup {
            Admin = "R_STUDIO_ADMIN",
            User = "R_STUDIO_USER"
    }
    /**
        * <p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app. <code>RStudioServerProAppSettings</code> cannot be updated. The <code>RStudioServerPro</code> app must be deleted and a new one created to make any changes.</p>
        */
    export interface RStudioServerProAppSettings {
            /**
                * <p>Indicates whether the current user has access to the <code>RStudioServerPro</code> app.</p>
                */
            AccessStatus?: RStudioServerProAccessStatus | string;
            /**
                * <p>The level of permissions that the user has within the <code>RStudioServerPro</code> app. This value defaults to `User`. The `Admin` value allows the user access to the RStudio Administrative Dashboard.</p>
                */
            UserGroup?: RStudioServerProUserGroup | string;
    }
    export namespace RStudioServerProAppSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RStudioServerProAppSettings) => any;
    }
    export enum NotebookOutputOption {
            Allowed = "Allowed",
            Disabled = "Disabled"
    }
    /**
        * <p>Specifies options for sharing SageMaker Studio notebooks. These settings are
        *     specified as part of <code>DefaultUserSettings</code> when the <code>CreateDomain</code>
        *     API is called, and as part of <code>UserSettings</code> when the <code>CreateUserProfile</code>
        *     API is called. When <code>SharingSettings</code> is not specified, notebook sharing
        *     isn't allowed.</p>
        */
    export interface SharingSettings {
            /**
                * <p>Whether to include the notebook cell output when sharing the notebook. The default
                *          is <code>Disabled</code>.</p>
                */
            NotebookOutputOption?: NotebookOutputOption | string;
            /**
                * <p>When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon S3 bucket used
                *          to store the shared notebook snapshots.</p>
                */
            S3OutputPath?: string;
            /**
                * <p>When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon Web Services Key Management Service (KMS)
                *          encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.</p>
                */
            S3KmsKeyId?: string;
    }
    export namespace SharingSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SharingSettings) => any;
    }
    /**
        * <p>The TensorBoard app settings.</p>
        */
    export interface TensorBoardAppSettings {
            /**
                * <p>The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
                */
            DefaultResourceSpec?: ResourceSpec;
    }
    export namespace TensorBoardAppSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TensorBoardAppSettings) => any;
    }
    /**
        * <p>A collection of settings that apply to users of Amazon SageMaker Studio. These settings are
        *       specified when the <code>CreateUserProfile</code> API is called, and as <code>DefaultUserSettings</code>
        *       when the <code>CreateDomain</code> API is called.</p>
        *          <p>
        *             <code>SecurityGroups</code> is aggregated when specified in both calls. For all other
        *      settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code>
        *      take precedence over those specified in <code>CreateDomain</code>.</p>
        */
    export interface UserSettings {
            /**
                * <p>The execution role for the user.</p>
                */
            ExecutionRole?: string;
            /**
                * <p>The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
                *          <p>Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to
                *          <code>PublicInternetOnly</code>.</p>
                *          <p>Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to
                *          <code>VpcOnly</code>.</p>
                *          <p>Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the
                *          number of security groups that you can specify is one less than the maximum number shown.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>Specifies options for sharing SageMaker Studio notebooks.</p>
                */
            SharingSettings?: SharingSettings;
            /**
                * <p>The Jupyter server's app settings.</p>
                */
            JupyterServerAppSettings?: JupyterServerAppSettings;
            /**
                * <p>The kernel gateway app settings.</p>
                */
            KernelGatewayAppSettings?: KernelGatewayAppSettings;
            /**
                * <p>The TensorBoard app settings.</p>
                */
            TensorBoardAppSettings?: TensorBoardAppSettings;
            /**
                * <p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app.</p>
                */
            RStudioServerProAppSettings?: RStudioServerProAppSettings;
            /**
                * <p>A collection of settings that configure the <code>RSessionGateway</code> app.</p>
                */
            RSessionAppSettings?: RSessionAppSettings;
    }
    export namespace UserSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserSettings) => any;
    }
    /**
        * <p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>
        */
    export interface RStudioServerProDomainSettings {
            /**
                * <p>The ARN of the execution role for the <code>RStudioServerPro</code> Domain-level app.</p>
                */
            DomainExecutionRoleArn: string | undefined;
            /**
                * <p>A URL pointing to an RStudio Connect server.</p>
                */
            RStudioConnectUrl?: string;
            /**
                * <p>A URL pointing to an RStudio Package Manager server.</p>
                */
            RStudioPackageManagerUrl?: string;
            /**
                * <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that
                *      the version runs on.</p>
                */
            DefaultResourceSpec?: ResourceSpec;
    }
    export namespace RStudioServerProDomainSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RStudioServerProDomainSettings) => any;
    }
    /**
        * <p>A collection of settings that apply to the <code>SageMaker Domain</code>. These settings are specified through the <code>CreateDomain</code> API call.</p>
        */
    export interface DomainSettings {
            /**
                * <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>
                */
            RStudioServerProDomainSettings?: RStudioServerProDomainSettings;
    }
    export namespace DomainSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainSettings) => any;
    }
    export interface CreateDomainRequest {
            /**
                * <p>A name for the domain.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The mode of authentication that members use to access the domain.</p>
                */
            AuthMode: AuthMode | string | undefined;
            /**
                * <p>The default settings to use to create a user profile when <code>UserSettings</code> isn't specified
                *          in the call to the <code>CreateUserProfile</code> API.</p>
                *          <p>
                *             <code>SecurityGroups</code> is aggregated when specified in both calls. For all other
                *          settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code>
                *          take precedence over those specified in <code>CreateDomain</code>.</p>
                */
            DefaultUserSettings: UserSettings | undefined;
            /**
                * <p>The VPC subnets that Studio uses for communication.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
                */
            VpcId: string | undefined;
            /**
                * <p>Tags to associated with the Domain. Each tag consists of a key and an optional value.
                *          Tag keys must be unique per resource. Tags are searchable using the
                *          <code>Search</code> API.</p>
                *          <p>Tags that you specify for the Domain are also added to all Apps that the
                *           Domain launches.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies the VPC used for non-EFS traffic. The default value is
                *         <code>PublicInternetOnly</code>.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed by
                *             Amazon SageMaker, which allows direct internet access</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets</p>
                *             </li>
                *          </ul>
                */
            AppNetworkAccessType?: AppNetworkAccessType | string;
            /**
                * @deprecated
                *
                * <p>Use <code>KmsKeyId</code>.</p>
                */
            HomeEfsFileSystemKmsKeyId?: string;
            /**
                * <p>SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached to the domain with an Amazon Web Services managed
                *          key by default. For more control, specify a customer managed key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The entity that creates and manages the required security groups for inter-app
                *             communication in <code>VPCOnly</code> mode. Required when
                *             <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and
                *             <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is
                *             provided.</p>
                */
            AppSecurityGroupManagement?: AppSecurityGroupManagement | string;
            /**
                * <p>A collection of <code>Domain</code> settings.</p>
                */
            DomainSettings?: DomainSettings;
    }
    export namespace CreateDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainRequest) => any;
    }
    export interface CreateDomainResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the created domain.</p>
                */
            DomainArn?: string;
            /**
                * <p>The URL to the created domain.</p>
                */
            Url?: string;
    }
    export namespace CreateDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainResponse) => any;
    }
    /**
        * <p>Contains information about the configuration of a model in a deployment.</p>
        */
    export interface EdgeDeploymentModelConfig {
            /**
                * <p>The name the device application uses to reference this model.</p>
                */
            ModelHandle: string | undefined;
            /**
                * <p>The edge packaging job associated with this deployment.</p>
                */
            EdgePackagingJobName: string | undefined;
    }
    export namespace EdgeDeploymentModelConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeDeploymentModelConfig) => any;
    }
    export enum FailureHandlingPolicy {
            DoNothing = "DO_NOTHING",
            RollbackOnFailure = "ROLLBACK_ON_FAILURE"
    }
    /**
        * <p>Contains information about the configuration of a deployment.</p>
        */
    export interface EdgeDeploymentConfig {
            /**
                * <p>Toggle that determines whether to rollback to previous configuration if the current deployment fails.
                *       By default this is turned on. You may turn this off if you want to investigate the errors yourself.</p>
                */
            FailureHandlingPolicy: FailureHandlingPolicy | string | undefined;
    }
    export namespace EdgeDeploymentConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeDeploymentConfig) => any;
    }
    export enum DeviceSubsetType {
            NameContains = "NAMECONTAINS",
            Percentage = "PERCENTAGE",
            Selection = "SELECTION"
    }
    /**
        * <p>Contains information about the configurations of selected devices.</p>
        */
    export interface DeviceSelectionConfig {
            /**
                * <p>Type of device subsets to deploy to the current stage.</p>
                */
            DeviceSubsetType: DeviceSubsetType | string | undefined;
            /**
                * <p>Percentage of devices in the fleet to deploy to the current stage.</p>
                */
            Percentage?: number;
            /**
                * <p>List of devices chosen to deploy.</p>
                */
            DeviceNames?: string[];
            /**
                * <p>A filter to select devices with names containing this name.</p>
                */
            DeviceNameContains?: string;
    }
    export namespace DeviceSelectionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceSelectionConfig) => any;
    }
    /**
        * <p>Contains information about a stage in an edge deployment plan.</p>
        */
    export interface DeploymentStage {
            /**
                * <p>The name of the stage.</p>
                */
            StageName: string | undefined;
            /**
                * <p>Configuration of the devices in the stage.</p>
                */
            DeviceSelectionConfig: DeviceSelectionConfig | undefined;
            /**
                * <p>Configuration of the deployment details.</p>
                */
            DeploymentConfig?: EdgeDeploymentConfig;
    }
    export namespace DeploymentStage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentStage) => any;
    }
    export interface CreateEdgeDeploymentPlanRequest {
            /**
                * <p>The name of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>List of models associated with the edge deployment plan.</p>
                */
            ModelConfigs: EdgeDeploymentModelConfig[] | undefined;
            /**
                * <p>The device fleet used for this edge deployment plan.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>List of stages of the edge deployment plan. The number of stages is limited to 10 per deployment.</p>
                */
            Stages?: DeploymentStage[];
            /**
                * <p>List of tags with which to tag the edge deployment plan.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEdgeDeploymentPlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEdgeDeploymentPlanRequest) => any;
    }
    export interface CreateEdgeDeploymentPlanResponse {
            /**
                * <p>The ARN of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanArn: string | undefined;
    }
    export namespace CreateEdgeDeploymentPlanResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEdgeDeploymentPlanResponse) => any;
    }
    export interface CreateEdgeDeploymentStageRequest {
            /**
                * <p>The name of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>List of stages to be added to the edge deployment plan.</p>
                */
            Stages: DeploymentStage[] | undefined;
    }
    export namespace CreateEdgeDeploymentStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEdgeDeploymentStageRequest) => any;
    }
    export interface CreateEdgePackagingJobRequest {
            /**
                * <p>The name of the edge packaging job.</p>
                */
            EdgePackagingJobName: string | undefined;
            /**
                * <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
                */
            CompilationJobName: string | undefined;
            /**
                * <p>The name of the model.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The version of the model.</p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Provides information about the output location for the packaged model.</p>
                */
            OutputConfig: EdgeOutputConfig | undefined;
            /**
                * <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
                */
            ResourceKey?: string;
            /**
                * <p>Creates tags for the packaging job.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEdgePackagingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEdgePackagingJobRequest) => any;
    }
    /**
        * <p>The deployment configuration for an endpoint, which contains the desired deployment
        *             strategy and rollback configurations.</p>
        */
    export interface DeploymentConfig {
            /**
                * <p>Update policy for a blue/green deployment. If this update policy is specified, SageMaker
                *             creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips
                *             traffic to the new fleet according to the specified traffic routing configuration. Only
                *             one update policy should be used in the deployment configuration. If no update policy is
                *             specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting
                *             by default.</p>
                */
            BlueGreenUpdatePolicy: BlueGreenUpdatePolicy | undefined;
            /**
                * <p>Automatic rollback configuration for handling endpoint deployment failures and recovery.</p>
                */
            AutoRollbackConfiguration?: AutoRollbackConfig;
    }
    export namespace DeploymentConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentConfig) => any;
    }
    export interface CreateEndpointInput {
            /**
                * <p>The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services
                *             account. The name is case-insensitive in <code>CreateEndpoint</code>, but the case is
                *             preserved and must be matched in .</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The name of an endpoint configuration. For more information, see <a>CreateEndpointConfig</a>. </p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p>The deployment configuration for an endpoint, which contains the desired deployment
                *             strategy and rollback configurations.</p>
                */
            DeploymentConfig?: DeploymentConfig;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointInput) => any;
    }
    export interface CreateEndpointOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace CreateEndpointOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointOutput) => any;
    }
    /**
        * <p>Configuration to control how SageMaker captures inference data.</p>
        */
    export interface DataCaptureConfig {
            /**
                * <p>Whether data capture should be enabled or disabled (defaults to enabled).</p>
                */
            EnableCapture?: boolean;
            /**
                * <p>The percentage of requests SageMaker will capture. A lower value is recommended for
                *          Endpoints with high traffic.</p>
                */
            InitialSamplingPercentage: number | undefined;
            /**
                * <p>The Amazon S3 location used to capture the data.</p>
                */
            DestinationS3Uri: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on
                *          the storage volume attached to the ML compute instance that hosts the endpoint.</p>
                *          <p>The KmsKeyId can be any of the following formats: </p>
                *          <ul>
                *             <li>
                *                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Key ARN:
                *                <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Alias name: <code>alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Alias name ARN:
                *                <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies data Model Monitor will capture. You can configure whether to
                *          collect only input, only output, or both</p>
                */
            CaptureOptions: CaptureOption[] | undefined;
            /**
                * <p>Configuration specifying how to treat different headers. If no headers are specified SageMaker will
                *          by default base64 encode when capturing the data.</p>
                */
            CaptureContentTypeHeader?: CaptureContentTypeHeader;
    }
    export namespace DataCaptureConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCaptureConfig) => any;
    }
    export enum ProductionVariantAcceleratorType {
            ML_EIA1_LARGE = "ml.eia1.large",
            ML_EIA1_MEDIUM = "ml.eia1.medium",
            ML_EIA1_XLARGE = "ml.eia1.xlarge",
            ML_EIA2_LARGE = "ml.eia2.large",
            ML_EIA2_MEDIUM = "ml.eia2.medium",
            ML_EIA2_XLARGE = "ml.eia2.xlarge"
    }
    /**
        * <p>Specifies configuration for a core dump from the model container when the process
        *             crashes.</p>
        */
    export interface ProductionVariantCoreDumpConfig {
            /**
                * <p>The Amazon S3 bucket to send the core dump to.</p>
                */
            DestinationS3Uri: string | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using
                *             Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following
                *             formats: </p>
                *         <ul>
                *             <li>
                *                 <p>// KMS Key ID</p>
                *                 <p>
                *                     <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                *                 <p>
                *                     <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>// KMS Key Alias</p>
                *                 <p>
                *                     <code>"alias/ExampleAlias"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>// Amazon Resource Name (ARN) of a KMS Key Alias</p>
                *                 <p>
                *                     <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>If you use a KMS key ID or an alias of your KMS key, the SageMaker execution role must
                *             include permissions to call <code>kms:Encrypt</code>. If you don't provide a KMS key ID,
                *             SageMaker uses the default KMS key for Amazon S3 for your role's account. SageMaker uses server-side
                *             encryption with KMS-managed keys for <code>OutputDataConfig</code>. If you use a bucket
                *             policy with an <code>s3:PutObject</code> permission that only allows objects with
                *             server-side encryption, set the condition key of
                *                 <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For more
                *             information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed Encryption
                *                 Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i>
                *          </p>
                *         <p>The KMS key policy must grant permission to the IAM role that you specify in your
                *                 <code>CreateEndpoint</code> and <code>UpdateEndpoint</code> requests. For more
                *             information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using Key Policies in Amazon Web Services
                *                 KMS</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
                */
            KmsKeyId?: string;
    }
    export namespace ProductionVariantCoreDumpConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProductionVariantCoreDumpConfig) => any;
    }
    /**
        * <p>Specifies the serverless configuration for an endpoint variant.</p>
        */
    export interface ProductionVariantServerlessConfig {
            /**
                * <p>The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.</p>
                */
            MemorySizeInMB: number | undefined;
            /**
                * <p>The maximum number of concurrent invocations your serverless endpoint can process.</p>
                */
            MaxConcurrency: number | undefined;
    }
    export namespace ProductionVariantServerlessConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProductionVariantServerlessConfig) => any;
    }
    /**
        * <p>Identifies a model that you want to host and the resources chosen to deploy for
        *             hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic
        *             among the models by specifying variant weights. </p>
        */
    export interface ProductionVariant {
            /**
                * <p>The name of the production variant.</p>
                */
            VariantName: string | undefined;
            /**
                * <p>The name of the model that you want to host. This is the name that you specified
                *             when creating the model.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>Number of instances to launch initially.</p>
                */
            InitialInstanceCount?: number;
            /**
                * <p>The ML compute instance type.</p>
                */
            InstanceType?: ProductionVariantInstanceType | string;
            /**
                * <p>Determines initial traffic distribution among all of the models that you specify in
                *             the endpoint configuration. The traffic to a production variant is determined by the
                *             ratio of the <code>VariantWeight</code> to the sum of all <code>VariantWeight</code>
                *             values across all ProductionVariants. If unspecified, it defaults to 1.0.
                *             </p>
                */
            InitialVariantWeight?: number;
            /**
                * <p>The size of the Elastic Inference (EI) instance to use for the production variant. EI
                *             instances provide on-demand GPU computing for inference. For more information, see
                *                 <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic
                *                 Inference in Amazon SageMaker</a>.</p>
                */
            AcceleratorType?: ProductionVariantAcceleratorType | string;
            /**
                * <p>Specifies configuration for a core dump from the model container when the process
                *             crashes.</p>
                */
            CoreDumpConfig?: ProductionVariantCoreDumpConfig;
            /**
                * <p>The serverless configuration for an endpoint. Specifies a serverless endpoint configuration instead of an instance-based endpoint configuration.</p>
                */
            ServerlessConfig?: ProductionVariantServerlessConfig;
    }
    export namespace ProductionVariant {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProductionVariant) => any;
    }
    export interface CreateEndpointConfigInput {
            /**
                * <p>The name of the endpoint configuration. You specify this name in a <a>CreateEndpoint</a> request. </p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p>An list of <code>ProductionVariant</code> objects, one for each model that you want
                *             to host at this endpoint.</p>
                */
            ProductionVariants: ProductionVariant[] | undefined;
            /**
                * <p>Configuration to control how SageMaker captures inference data.</p>
                */
            DataCaptureConfig?: DataCaptureConfig;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on
                *             the storage volume attached to the ML compute instance that hosts the endpoint.</p>
                *         <p>The KmsKeyId can be any of the following formats: </p>
                *         <ul>
                *             <li>
                *                 <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Key ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Alias name: <code>alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>Alias name ARN:
                *                         <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The KMS key policy must grant permission to the IAM role that you specify in your
                *                 <code>CreateEndpoint</code>, <code>UpdateEndpoint</code> requests. For more
                *             information, refer to the Amazon Web Services Key Management Service section<a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html"> Using Key
                *                 Policies in Amazon Web Services KMS </a>
                *          </p>
                *         <note>
                *             <p>Certain Nitro-based instances include local storage, dependent on the instance
                *                 type. Local storage volumes are encrypted using a hardware module on the instance.
                *                 You can't request a <code>KmsKeyId</code> when using an instance type with local
                *                 storage. If any of the models that you specify in the
                *                     <code>ProductionVariants</code> parameter use nitro-based instances with local
                *                 storage, do not specify a value for the <code>KmsKeyId</code> parameter. If you
                *                 specify a value for <code>KmsKeyId</code> when using any nitro-based instances with
                *                 local storage, the call to <code>CreateEndpointConfig</code> fails.</p>
                *             <p>For a list of instance types that support local instance storage, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
                *             <p>For more information about local instance storage encryption, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
                *                     Instance Store Volumes</a>.</p>
                *         </note>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies configuration for how an endpoint performs asynchronous inference.
                *             This is a required field in order for your Endpoint to be invoked using
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpointAsync.html">InvokeEndpointAsync</a>.</p>
                */
            AsyncInferenceConfig?: AsyncInferenceConfig;
    }
    export namespace CreateEndpointConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointConfigInput) => any;
    }
    export interface CreateEndpointConfigOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint configuration. </p>
                */
            EndpointConfigArn: string | undefined;
    }
    export namespace CreateEndpointConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointConfigOutput) => any;
    }
    export interface CreateExperimentRequest {
            /**
                * <p>The name of the experiment. The name must be unique in your Amazon Web Services account and is not
                *       case-sensitive.</p>
                */
            ExperimentName: string | undefined;
            /**
                * <p>The name of the experiment as displayed. The name doesn't need to be unique. If you don't
                *       specify <code>DisplayName</code>, the value in <code>ExperimentName</code> is
                *       displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The description of the experiment.</p>
                */
            Description?: string;
            /**
                * <p>A list of tags to associate with the experiment. You can use <a>Search</a> API
                *       to search on the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentRequest) => any;
    }
    export interface CreateExperimentResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the experiment.</p>
                */
            ExperimentArn?: string;
    }
    export namespace CreateExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentResponse) => any;
    }
    export enum FeatureType {
            FRACTIONAL = "Fractional",
            INTEGRAL = "Integral",
            STRING = "String"
    }
    /**
        * <p>A list of features. You must include <code>FeatureName</code> and
        *             <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are
        *             <code>Integral</code>, <code>Fractional</code> and <code>String</code>. </p>
        */
    export interface FeatureDefinition {
            /**
                * <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any
                *          of the following: <code>is_deleted</code>, <code>write_time</code>,
                *             <code>api_invocation_time</code>.</p>
                */
            FeatureName?: string;
            /**
                * <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
                */
            FeatureType?: FeatureType | string;
    }
    export namespace FeatureDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FeatureDefinition) => any;
    }
    /**
        * <p>The meta data of the Glue table which serves as data catalog for the
        *             <code>OfflineStore</code>. </p>
        */
    export interface DataCatalogConfig {
            /**
                * <p>The name of the Glue table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The name of the Glue table catalog.</p>
                */
            Catalog: string | undefined;
            /**
                * <p>The name of the Glue table database.</p>
                */
            Database: string | undefined;
    }
    export namespace DataCatalogConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCatalogConfig) => any;
    }
    /**
        * <p>The Amazon Simple Storage (Amazon S3) location and and security configuration for <code>OfflineStore</code>.</p>
        */
    export interface S3StorageConfig {
            /**
                * <p>The S3 URI, or location in Amazon S3, of <code>OfflineStore</code>.</p>
                *          <p>S3 URIs have a format similar to the following: <code>s3://example-bucket/prefix/</code>.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (KMS) key ID of the key used to encrypt any objects
                *          written into the <code>OfflineStore</code> S3 location.</p>
                *          <p>The IAM <code>roleARN</code> that is passed as a parameter to
                *             <code>CreateFeatureGroup</code> must have below permissions to the
                *          <code>KmsKeyId</code>:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"kms:GenerateDataKey"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
            /**
                * <p>The S3 path where offline records are written.</p>
                */
            ResolvedOutputS3Uri?: string;
    }
    export namespace S3StorageConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3StorageConfig) => any;
    }
    /**
        * <p>The configuration of an <code>OfflineStore</code>.</p>
        *          <p>Provide an <code>OfflineStoreConfig</code> in a request to
        *             <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p>
        *          <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key
        *          Management Service (KMS) key ID, or <code>KMSKeyId</code>, in
        *          <code>S3StorageConfig</code>.</p>
        */
    export interface OfflineStoreConfig {
            /**
                * <p>The Amazon Simple Storage (Amazon S3) location of <code>OfflineStore</code>.</p>
                */
            S3StorageConfig: S3StorageConfig | undefined;
            /**
                * <p>Set to <code>True</code> to disable the automatic creation of an Amazon Web Services Glue table when
                *        configuring an <code>OfflineStore</code>.</p>
                */
            DisableGlueTableCreation?: boolean;
            /**
                * <p>The meta data of the Glue table that is autogenerated when an <code>OfflineStore</code>
                *          is created. </p>
                */
            DataCatalogConfig?: DataCatalogConfig;
    }
    export namespace OfflineStoreConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OfflineStoreConfig) => any;
    }
    /**
        * <p>The security configuration for <code>OnlineStore</code>.</p>
        */
    export interface OnlineStoreSecurityConfig {
            /**
                * <p>The ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker Feature Store uses
                *          to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.</p>
                *          <p>The caller (either IAM user or IAM role) of <code>CreateFeatureGroup</code> must have
                *          below permissions to the <code>OnlineStore</code>
                *             <code>KmsKeyId</code>:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"kms:Encrypt"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:Decrypt"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:DescribeKey"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:CreateGrant"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:RetireGrant"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:ReEncryptFrom"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:ReEncryptTo"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:GenerateDataKey"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:ListAliases"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:ListGrants"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"kms:RevokeGrant"</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>The caller (either IAM user or IAM role) to all DataPlane operations
                *             (<code>PutRecord</code>, <code>GetRecord</code>, <code>DeleteRecord</code>) must have
                *          the following permissions to the <code>KmsKeyId</code>:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"kms:Decrypt"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
    }
    export namespace OnlineStoreSecurityConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnlineStoreSecurityConfig) => any;
    }
    /**
        * <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or
        *             <code>KMSKeyId</code>, for at rest data encryption. You can turn
        *             <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag
        *          at General Assembly; the default value is <code>False</code>.</p>
        */
    export interface OnlineStoreConfig {
            /**
                * <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your
                *             <code>OnlineStore</code>.</p>
                */
            SecurityConfig?: OnlineStoreSecurityConfig;
            /**
                * <p>Turn <code>OnlineStore</code> off by specifying <code>False</code>
                *       for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code>
                *       on by specifying <code>True</code>
                *       for the <code>EnableOnlineStore</code> flag. </p>
                *          <p>The default value is <code>False</code>.</p>
                */
            EnableOnlineStore?: boolean;
    }
    export namespace OnlineStoreConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnlineStoreConfig) => any;
    }
    export interface CreateFeatureGroupRequest {
            /**
                * <p>The name of the <code>FeatureGroup</code>. The name must be unique within an Amazon Web Services Region
                *          in an Amazon Web Services account. The name:</p>
                *          <ul>
                *             <li>
                *                <p>Must start and end with an alphanumeric character.</p>
                *             </li>
                *             <li>
                *                <p>Can only contain alphanumeric character and hyphens. Spaces are not allowed.
                *             </p>
                *             </li>
                *          </ul>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>The name of the <code>Feature</code> whose value uniquely identifies a
                *             <code>Record</code> defined in the <code>FeatureStore</code>. Only the latest record per
                *          identifier value will be stored in the <code>OnlineStore</code>.
                *             <code>RecordIdentifierFeatureName</code> must be one of feature definitions'
                *          names.</p>
                *          <p>You use the <code>RecordIdentifierFeatureName</code> to access data in a
                *             <code>FeatureStore</code>.</p>
                *          <p>This name:</p>
                *          <ul>
                *             <li>
                *                <p>Must start and end with an alphanumeric character.</p>
                *             </li>
                *             <li>
                *                <p>Can only contains alphanumeric characters, hyphens, underscores. Spaces are not
                *                allowed. </p>
                *             </li>
                *          </ul>
                */
            RecordIdentifierFeatureName: string | undefined;
            /**
                * <p>The name of the feature that stores the <code>EventTime</code> of a <code>Record</code>
                *          in a <code>FeatureGroup</code>.</p>
                *          <p>An <code>EventTime</code> is a point in time when a new event occurs that corresponds to
                *          the creation or update of a <code>Record</code> in a <code>FeatureGroup</code>. All
                *             <code>Records</code> in the <code>FeatureGroup</code> must have a corresponding
                *             <code>EventTime</code>.</p>
                *          <p>An <code>EventTime</code> can be a <code>String</code> or <code>Fractional</code>. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Fractional</code>: <code>EventTime</code> feature values must be a Unix
                *                timestamp in seconds.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>String</code>: <code>EventTime</code> feature values must be an ISO-8601
                *                string in the format. The following formats are supported
                *                   <code>yyyy-MM-dd'T'HH:mm:ssZ</code> and <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code>
                *                where <code>yyyy</code>, <code>MM</code>, and <code>dd</code> represent the year,
                *                month, and day respectively and <code>HH</code>, <code>mm</code>, <code>ss</code>,
                *                and if applicable, <code>SSS</code> represent the hour, month, second and
                *                milliseconds respsectively. <code>'T'</code> and <code>Z</code> are constants.</p>
                *             </li>
                *          </ul>
                */
            EventTimeFeatureName: string | undefined;
            /**
                * <p>A list of <code>Feature</code> names and types. <code>Name</code> and <code>Type</code>
                *          is compulsory per <code>Feature</code>. </p>
                *          <p>Valid feature <code>FeatureType</code>s are <code>Integral</code>,
                *             <code>Fractional</code> and <code>String</code>.</p>
                *          <p>
                *             <code>FeatureName</code>s cannot be any of the following: <code>is_deleted</code>,
                *             <code>write_time</code>, <code>api_invocation_time</code>
                *          </p>
                *          <p>You can create up to 2,500 <code>FeatureDefinition</code>s per
                *          <code>FeatureGroup</code>.</p>
                */
            FeatureDefinitions: FeatureDefinition[] | undefined;
            /**
                * <p>You can turn the <code>OnlineStore</code> on or off by specifying <code>True</code> for
                *          the <code>EnableOnlineStore</code> flag in <code>OnlineStoreConfig</code>; the default
                *          value is <code>False</code>.</p>
                *          <p>You can also include an Amazon Web Services KMS key ID (<code>KMSKeyId</code>) for at-rest encryption of
                *          the <code>OnlineStore</code>.</p>
                */
            OnlineStoreConfig?: OnlineStoreConfig;
            /**
                * <p>Use this to configure an <code>OfflineFeatureStore</code>. This parameter allows you to
                *          specify:</p>
                *          <ul>
                *             <li>
                *                <p>The Amazon Simple Storage Service (Amazon S3) location of an
                *                   <code>OfflineStore</code>.</p>
                *             </li>
                *             <li>
                *                <p>A configuration for an Amazon Web Services Glue or Amazon Web Services Hive data catalog. </p>
                *             </li>
                *             <li>
                *                <p>An KMS encryption key to encrypt the Amazon S3 location used for
                *                <code>OfflineStore</code>. If KMS encryption key is not specified, by default we encrypt all data at rest using
                *                Amazon Web Services KMS key. By defining your <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html">bucket-level key</a> for SSE,
                *                you can reduce Amazon Web Services KMS requests costs by up to 99 percent.</p>
                *             </li>
                *          </ul>
                *          <p>To learn more about this parameter, see <a>OfflineStoreConfig</a>.</p>
                */
            OfflineStoreConfig?: OfflineStoreConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the
                *             <code>OfflineStore</code> if an <code>OfflineStoreConfig</code> is provided.</p>
                */
            RoleArn?: string;
            /**
                * <p>A free-form description of a <code>FeatureGroup</code>.</p>
                */
            Description?: string;
            /**
                * <p>Tags used to identify <code>Features</code> in each <code>FeatureGroup</code>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateFeatureGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFeatureGroupRequest) => any;
    }
    export interface CreateFeatureGroupResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>. This is a unique
                *          identifier for the feature group. </p>
                */
            FeatureGroupArn: string | undefined;
    }
    export namespace CreateFeatureGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFeatureGroupResponse) => any;
    }
    /**
        * <p>Defines under what conditions SageMaker creates a human loop. Used within . See  for the required
        *          format of activation conditions.</p>
        */
    export interface HumanLoopActivationConditionsConfig {
            /**
                * <p>JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team.
                *          The set of conditions is different for Rekognition and Textract. For more information about how to structure the JSON, see
                *          <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html">JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI</a>
                *          in the <i>Amazon SageMaker Developer Guide</i>.</p>
                */
            HumanLoopActivationConditions: __LazyJsonString | string | undefined;
    }
    export namespace HumanLoopActivationConditionsConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HumanLoopActivationConditionsConfig) => any;
    }
    /**
        * <p>Provides information about how and under what conditions SageMaker creates a human loop. If <code>HumanLoopActivationConfig</code> is not given, then all requests go to humans.</p>
        */
    export interface HumanLoopActivationConfig {
            /**
                * <p>Container structure for defining under what conditions SageMaker creates a human
                *          loop.</p>
                */
            HumanLoopActivationConditionsConfig: HumanLoopActivationConditionsConfig | undefined;
    }
    export namespace HumanLoopActivationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HumanLoopActivationConfig) => any;
    }
    /**
        * <p>Represents an amount of money in United States dollars.</p>
        */
    export interface USD {
            /**
                * <p>The whole number of dollars in the amount.</p>
                */
            Dollars?: number;
            /**
                * <p>The fractional portion, in cents, of the amount. </p>
                */
            Cents?: number;
            /**
                * <p>Fractions of a cent, in tenths.</p>
                */
            TenthFractionsOfACent?: number;
    }
    export namespace USD {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: USD) => any;
    }
    /**
        * <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p>
        *         <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and
        *             should be based on the complexity of the task; the longer it takes in your initial
        *             testing, the more you should offer.</p>
        *         <ul>
        *             <li>
        *                 <p>0.036</p>
        *             </li>
        *             <li>
        *                 <p>0.048</p>
        *             </li>
        *             <li>
        *                 <p>0.060</p>
        *             </li>
        *             <li>
        *                 <p>0.072</p>
        *             </li>
        *             <li>
        *                 <p>0.120</p>
        *             </li>
        *             <li>
        *                 <p>0.240</p>
        *             </li>
        *             <li>
        *                 <p>0.360</p>
        *             </li>
        *             <li>
        *                 <p>0.480</p>
        *             </li>
        *             <li>
        *                 <p>0.600</p>
        *             </li>
        *             <li>
        *                 <p>0.720</p>
        *             </li>
        *             <li>
        *                 <p>0.840</p>
        *             </li>
        *             <li>
        *                 <p>0.960</p>
        *             </li>
        *             <li>
        *                 <p>1.080</p>
        *             </li>
        *             <li>
        *                 <p>1.200</p>
        *             </li>
        *          </ul>
        *         <p>Use one of the following prices for image classification, text classification, and
        *             custom tasks. Prices are in US dollars.</p>
        *         <ul>
        *             <li>
        *                 <p>0.012</p>
        *             </li>
        *             <li>
        *                 <p>0.024</p>
        *             </li>
        *             <li>
        *                 <p>0.036</p>
        *             </li>
        *             <li>
        *                 <p>0.048</p>
        *             </li>
        *             <li>
        *                 <p>0.060</p>
        *             </li>
        *             <li>
        *                 <p>0.072</p>
        *             </li>
        *             <li>
        *                 <p>0.120</p>
        *             </li>
        *             <li>
        *                 <p>0.240</p>
        *             </li>
        *             <li>
        *                 <p>0.360</p>
        *             </li>
        *             <li>
        *                 <p>0.480</p>
        *             </li>
        *             <li>
        *                 <p>0.600</p>
        *             </li>
        *             <li>
        *                 <p>0.720</p>
        *             </li>
        *             <li>
        *                 <p>0.840</p>
        *             </li>
        *             <li>
        *                 <p>0.960</p>
        *             </li>
        *             <li>
        *                 <p>1.080</p>
        *             </li>
        *             <li>
        *                 <p>1.200</p>
        *             </li>
        *          </ul>
        *         <p>Use one of the following prices for semantic segmentation tasks. Prices are in US
        *             dollars.</p>
        *         <ul>
        *             <li>
        *                 <p>0.840</p>
        *             </li>
        *             <li>
        *                 <p>0.960</p>
        *             </li>
        *             <li>
        *                 <p>1.080</p>
        *             </li>
        *             <li>
        *                 <p>1.200</p>
        *             </li>
        *          </ul>
        *         <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon
        *             Augmented AI review tasks. Prices are in US dollars.</p>
        *         <ul>
        *             <li>
        *                 <p>2.400 </p>
        *             </li>
        *             <li>
        *                 <p>2.280 </p>
        *             </li>
        *             <li>
        *                 <p>2.160 </p>
        *             </li>
        *             <li>
        *                 <p>2.040 </p>
        *             </li>
        *             <li>
        *                 <p>1.920 </p>
        *             </li>
        *             <li>
        *                 <p>1.800 </p>
        *             </li>
        *             <li>
        *                 <p>1.680 </p>
        *             </li>
        *             <li>
        *                 <p>1.560 </p>
        *             </li>
        *             <li>
        *                 <p>1.440 </p>
        *             </li>
        *             <li>
        *                 <p>1.320 </p>
        *             </li>
        *             <li>
        *                 <p>1.200 </p>
        *             </li>
        *             <li>
        *                 <p>1.080 </p>
        *             </li>
        *             <li>
        *                 <p>0.960 </p>
        *             </li>
        *             <li>
        *                 <p>0.840 </p>
        *             </li>
        *             <li>
        *                 <p>0.720 </p>
        *             </li>
        *             <li>
        *                 <p>0.600 </p>
        *             </li>
        *             <li>
        *                 <p>0.480 </p>
        *             </li>
        *             <li>
        *                 <p>0.360 </p>
        *             </li>
        *             <li>
        *                 <p>0.240 </p>
        *             </li>
        *             <li>
        *                 <p>0.120 </p>
        *             </li>
        *             <li>
        *                 <p>0.072 </p>
        *             </li>
        *             <li>
        *                 <p>0.060 </p>
        *             </li>
        *             <li>
        *                 <p>0.048 </p>
        *             </li>
        *             <li>
        *                 <p>0.036 </p>
        *             </li>
        *             <li>
        *                 <p>0.024 </p>
        *             </li>
        *             <li>
        *                 <p>0.012 </p>
        *             </li>
        *          </ul>
        *         <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon
        *             Augmented AI review tasks. Prices are in US dollars.</p>
        *         <ul>
        *             <li>
        *                 <p>1.200 </p>
        *             </li>
        *             <li>
        *                 <p>1.080 </p>
        *             </li>
        *             <li>
        *                 <p>0.960 </p>
        *             </li>
        *             <li>
        *                 <p>0.840 </p>
        *             </li>
        *             <li>
        *                 <p>0.720 </p>
        *             </li>
        *             <li>
        *                 <p>0.600 </p>
        *             </li>
        *             <li>
        *                 <p>0.480 </p>
        *             </li>
        *             <li>
        *                 <p>0.360 </p>
        *             </li>
        *             <li>
        *                 <p>0.240 </p>
        *             </li>
        *             <li>
        *                 <p>0.120 </p>
        *             </li>
        *             <li>
        *                 <p>0.072 </p>
        *             </li>
        *             <li>
        *                 <p>0.060 </p>
        *             </li>
        *             <li>
        *                 <p>0.048 </p>
        *             </li>
        *             <li>
        *                 <p>0.036 </p>
        *             </li>
        *             <li>
        *                 <p>0.024 </p>
        *             </li>
        *             <li>
        *                 <p>0.012 </p>
        *             </li>
        *          </ul>
        *         <p>Use one of the following prices for Amazon Augmented AI custom human review tasks.
        *             Prices are in US dollars.</p>
        *         <ul>
        *             <li>
        *                 <p>1.200 </p>
        *             </li>
        *             <li>
        *                 <p>1.080 </p>
        *             </li>
        *             <li>
        *                 <p>0.960 </p>
        *             </li>
        *             <li>
        *                 <p>0.840 </p>
        *             </li>
        *             <li>
        *                 <p>0.720 </p>
        *             </li>
        *             <li>
        *                 <p>0.600 </p>
        *             </li>
        *             <li>
        *                 <p>0.480 </p>
        *             </li>
        *             <li>
        *                 <p>0.360 </p>
        *             </li>
        *             <li>
        *                 <p>0.240 </p>
        *             </li>
        *             <li>
        *                 <p>0.120 </p>
        *             </li>
        *             <li>
        *                 <p>0.072 </p>
        *             </li>
        *             <li>
        *                 <p>0.060 </p>
        *             </li>
        *             <li>
        *                 <p>0.048 </p>
        *             </li>
        *             <li>
        *                 <p>0.036 </p>
        *             </li>
        *             <li>
        *                 <p>0.024 </p>
        *             </li>
        *             <li>
        *                 <p>0.012 </p>
        *             </li>
        *          </ul>
        */
    export interface PublicWorkforceTaskPrice {
            /**
                * <p>Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.</p>
                */
            AmountInUsd?: USD;
    }
    export namespace PublicWorkforceTaskPrice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublicWorkforceTaskPrice) => any;
    }
    /**
        * <p>Describes the work to be performed by human workers.</p>
        */
    export interface HumanLoopConfig {
            /**
                * <p>Amazon Resource Name (ARN) of a team of workers. To learn more about the types of
                *          workforces and work teams you can create and use with Amazon A2I, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management.html">Create
                *             and Manage Workforces</a>.</p>
                */
            WorkteamArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the human task user interface.</p>
                *          <p>You can use standard HTML and Crowd HTML Elements to create a custom worker task
                *          template. You use this template to create a human task UI.</p>
                *          <p>To learn how to create a custom HTML template, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html">Create Custom Worker
                *             Task Template</a>.</p>
                *          <p>To learn how to create a human task UI, which is a worker task template that can be used
                *          in a flow definition, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-worker-template-console.html">Create and Delete a Worker Task Templates</a>.</p>
                */
            HumanTaskUiArn: string | undefined;
            /**
                * <p>A title for the human worker task.</p>
                */
            TaskTitle: string | undefined;
            /**
                * <p>A description for the human worker task.</p>
                */
            TaskDescription: string | undefined;
            /**
                * <p>The number of distinct workers who will perform the same task on each object.
                *       For example, if <code>TaskCount</code> is set to <code>3</code> for an image classification
                *       labeling job, three workers will classify each input image.
                *       Increasing <code>TaskCount</code> can improve label accuracy.</p>
                */
            TaskCount: number | undefined;
            /**
                * <p>The length of time that a task remains available for review by human workers.</p>
                */
            TaskAvailabilityLifetimeInSeconds?: number;
            /**
                * <p>The amount of time that a worker has to complete a task. The default value is 3,600
                *          seconds (1 hour).</p>
                */
            TaskTimeLimitInSeconds?: number;
            /**
                * <p>Keywords used to describe the task so that workers can discover the task.</p>
                */
            TaskKeywords?: string[];
            /**
                * <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p>
                *         <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and
                *             should be based on the complexity of the task; the longer it takes in your initial
                *             testing, the more you should offer.</p>
                *         <ul>
                *             <li>
                *                 <p>0.036</p>
                *             </li>
                *             <li>
                *                 <p>0.048</p>
                *             </li>
                *             <li>
                *                 <p>0.060</p>
                *             </li>
                *             <li>
                *                 <p>0.072</p>
                *             </li>
                *             <li>
                *                 <p>0.120</p>
                *             </li>
                *             <li>
                *                 <p>0.240</p>
                *             </li>
                *             <li>
                *                 <p>0.360</p>
                *             </li>
                *             <li>
                *                 <p>0.480</p>
                *             </li>
                *             <li>
                *                 <p>0.600</p>
                *             </li>
                *             <li>
                *                 <p>0.720</p>
                *             </li>
                *             <li>
                *                 <p>0.840</p>
                *             </li>
                *             <li>
                *                 <p>0.960</p>
                *             </li>
                *             <li>
                *                 <p>1.080</p>
                *             </li>
                *             <li>
                *                 <p>1.200</p>
                *             </li>
                *          </ul>
                *         <p>Use one of the following prices for image classification, text classification, and
                *             custom tasks. Prices are in US dollars.</p>
                *         <ul>
                *             <li>
                *                 <p>0.012</p>
                *             </li>
                *             <li>
                *                 <p>0.024</p>
                *             </li>
                *             <li>
                *                 <p>0.036</p>
                *             </li>
                *             <li>
                *                 <p>0.048</p>
                *             </li>
                *             <li>
                *                 <p>0.060</p>
                *             </li>
                *             <li>
                *                 <p>0.072</p>
                *             </li>
                *             <li>
                *                 <p>0.120</p>
                *             </li>
                *             <li>
                *                 <p>0.240</p>
                *             </li>
                *             <li>
                *                 <p>0.360</p>
                *             </li>
                *             <li>
                *                 <p>0.480</p>
                *             </li>
                *             <li>
                *                 <p>0.600</p>
                *             </li>
                *             <li>
                *                 <p>0.720</p>
                *             </li>
                *             <li>
                *                 <p>0.840</p>
                *             </li>
                *             <li>
                *                 <p>0.960</p>
                *             </li>
                *             <li>
                *                 <p>1.080</p>
                *             </li>
                *             <li>
                *                 <p>1.200</p>
                *             </li>
                *          </ul>
                *         <p>Use one of the following prices for semantic segmentation tasks. Prices are in US
                *             dollars.</p>
                *         <ul>
                *             <li>
                *                 <p>0.840</p>
                *             </li>
                *             <li>
                *                 <p>0.960</p>
                *             </li>
                *             <li>
                *                 <p>1.080</p>
                *             </li>
                *             <li>
                *                 <p>1.200</p>
                *             </li>
                *          </ul>
                *         <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon
                *             Augmented AI review tasks. Prices are in US dollars.</p>
                *         <ul>
                *             <li>
                *                 <p>2.400 </p>
                *             </li>
                *             <li>
                *                 <p>2.280 </p>
                *             </li>
                *             <li>
                *                 <p>2.160 </p>
                *             </li>
                *             <li>
                *                 <p>2.040 </p>
                *             </li>
                *             <li>
                *                 <p>1.920 </p>
                *             </li>
                *             <li>
                *                 <p>1.800 </p>
                *             </li>
                *             <li>
                *                 <p>1.680 </p>
                *             </li>
                *             <li>
                *                 <p>1.560 </p>
                *             </li>
                *             <li>
                *                 <p>1.440 </p>
                *             </li>
                *             <li>
                *                 <p>1.320 </p>
                *             </li>
                *             <li>
                *                 <p>1.200 </p>
                *             </li>
                *             <li>
                *                 <p>1.080 </p>
                *             </li>
                *             <li>
                *                 <p>0.960 </p>
                *             </li>
                *             <li>
                *                 <p>0.840 </p>
                *             </li>
                *             <li>
                *                 <p>0.720 </p>
                *             </li>
                *             <li>
                *                 <p>0.600 </p>
                *             </li>
                *             <li>
                *                 <p>0.480 </p>
                *             </li>
                *             <li>
                *                 <p>0.360 </p>
                *             </li>
                *             <li>
                *                 <p>0.240 </p>
                *             </li>
                *             <li>
                *                 <p>0.120 </p>
                *             </li>
                *             <li>
                *                 <p>0.072 </p>
                *             </li>
                *             <li>
                *                 <p>0.060 </p>
                *             </li>
                *             <li>
                *                 <p>0.048 </p>
                *             </li>
                *             <li>
                *                 <p>0.036 </p>
                *             </li>
                *             <li>
                *                 <p>0.024 </p>
                *             </li>
                *             <li>
                *                 <p>0.012 </p>
                *             </li>
                *          </ul>
                *         <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon
                *             Augmented AI review tasks. Prices are in US dollars.</p>
                *         <ul>
                *             <li>
                *                 <p>1.200 </p>
                *             </li>
                *             <li>
                *                 <p>1.080 </p>
                *             </li>
                *             <li>
                *                 <p>0.960 </p>
                *             </li>
                *             <li>
                *                 <p>0.840 </p>
                *             </li>
                *             <li>
                *                 <p>0.720 </p>
                *             </li>
                *             <li>
                *                 <p>0.600 </p>
                *             </li>
                *             <li>
                *                 <p>0.480 </p>
                *             </li>
                *             <li>
                *                 <p>0.360 </p>
                *             </li>
                *             <li>
                *                 <p>0.240 </p>
                *             </li>
                *             <li>
                *                 <p>0.120 </p>
                *             </li>
                *             <li>
                *                 <p>0.072 </p>
                *             </li>
                *             <li>
                *                 <p>0.060 </p>
                *             </li>
                *             <li>
                *                 <p>0.048 </p>
                *             </li>
                *             <li>
                *                 <p>0.036 </p>
                *             </li>
                *             <li>
                *                 <p>0.024 </p>
                *             </li>
                *             <li>
                *                 <p>0.012 </p>
                *             </li>
                *          </ul>
                *         <p>Use one of the following prices for Amazon Augmented AI custom human review tasks.
                *             Prices are in US dollars.</p>
                *         <ul>
                *             <li>
                *                 <p>1.200 </p>
                *             </li>
                *             <li>
                *                 <p>1.080 </p>
                *             </li>
                *             <li>
                *                 <p>0.960 </p>
                *             </li>
                *             <li>
                *                 <p>0.840 </p>
                *             </li>
                *             <li>
                *                 <p>0.720 </p>
                *             </li>
                *             <li>
                *                 <p>0.600 </p>
                *             </li>
                *             <li>
                *                 <p>0.480 </p>
                *             </li>
                *             <li>
                *                 <p>0.360 </p>
                *             </li>
                *             <li>
                *                 <p>0.240 </p>
                *             </li>
                *             <li>
                *                 <p>0.120 </p>
                *             </li>
                *             <li>
                *                 <p>0.072 </p>
                *             </li>
                *             <li>
                *                 <p>0.060 </p>
                *             </li>
                *             <li>
                *                 <p>0.048 </p>
                *             </li>
                *             <li>
                *                 <p>0.036 </p>
                *             </li>
                *             <li>
                *                 <p>0.024 </p>
                *             </li>
                *             <li>
                *                 <p>0.012 </p>
                *             </li>
                *          </ul>
                */
            PublicWorkforceTaskPrice?: PublicWorkforceTaskPrice;
    }
    export namespace HumanLoopConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HumanLoopConfig) => any;
    }
    /**
        * <p>Container for configuring the source of human task requests.</p>
        */
    export interface HumanLoopRequestSource {
            /**
                * <p>Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source.
                *       The default field settings and JSON parsing rules are different based on the integration source. Valid values:</p>
                */
            AwsManagedHumanLoopRequestSource: AwsManagedHumanLoopRequestSource | string | undefined;
    }
    export namespace HumanLoopRequestSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HumanLoopRequestSource) => any;
    }
    /**
        * <p>Contains information about where human output will be stored.</p>
        */
    export interface FlowDefinitionOutputConfig {
            /**
                * <p>The Amazon S3 path where the object containing human output will be made available.</p>
                *          <p>To learn more about the format of Amazon A2I output data, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-output-data.html">Amazon A2I
                *             Output Data</a>.</p>
                */
            S3OutputPath: string | undefined;
            /**
                * <p>The Amazon Key Management Service (KMS) key ID for server-side encryption.</p>
                */
            KmsKeyId?: string;
    }
    export namespace FlowDefinitionOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FlowDefinitionOutputConfig) => any;
    }
    export interface CreateFlowDefinitionRequest {
            /**
                * <p>The name of your flow definition.</p>
                */
            FlowDefinitionName: string | undefined;
            /**
                * <p>Container for configuring the source of human task requests. Use to specify if
                *       Amazon Rekognition or Amazon Textract is used as an integration source.</p>
                */
            HumanLoopRequestSource?: HumanLoopRequestSource;
            /**
                * <p>An object containing information about the events that trigger a human workflow.</p>
                */
            HumanLoopActivationConfig?: HumanLoopActivationConfig;
            /**
                * <p>An object containing information about the tasks the human reviewers will perform.</p>
                */
            HumanLoopConfig: HumanLoopConfig | undefined;
            /**
                * <p>An object containing information about where the human review results will be uploaded.</p>
                */
            OutputConfig: FlowDefinitionOutputConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateFlowDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFlowDefinitionRequest) => any;
    }
    export interface CreateFlowDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the flow definition you create.</p>
                */
            FlowDefinitionArn: string | undefined;
    }
    export namespace CreateFlowDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFlowDefinitionResponse) => any;
    }
    /**
        * <p>The Liquid template for the worker user interface.</p>
        */
    export interface UiTemplate {
            /**
                * <p>The content of the Liquid template for the worker user interface.</p>
                */
            Content: string | undefined;
    }
    export namespace UiTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UiTemplate) => any;
    }
    export interface CreateHumanTaskUiRequest {
            /**
                * <p>The name of the user interface you are creating.</p>
                */
            HumanTaskUiName: string | undefined;
            /**
                * <p>The Liquid template for the worker user interface.</p>
                */
            UiTemplate: UiTemplate | undefined;
            /**
                * <p>An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateHumanTaskUiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHumanTaskUiRequest) => any;
    }
    export interface CreateHumanTaskUiResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the human review workflow user interface you create.</p>
                */
            HumanTaskUiArn: string | undefined;
    }
    export namespace CreateHumanTaskUiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHumanTaskUiResponse) => any;
    }
    /**
        * <p>For a hyperparameter of the integer type, specifies the range
        *             that
        *             a hyperparameter tuning job searches.</p>
        */
    export interface IntegerParameterRange {
            /**
                * <p>The name of the hyperparameter to search.</p>
                */
            Name: string | undefined;
            /**
                * <p>The minimum
                *             value
                *             of the hyperparameter to search.</p>
                */
            MinValue: string | undefined;
            /**
                * <p>The maximum
                *             value
                *             of the hyperparameter to search.</p>
                */
            MaxValue: string | undefined;
            /**
                * <p>The scale that hyperparameter tuning uses to search the hyperparameter range. For
                *             information about choosing a hyperparameter scale, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
                *         <dl>
                *             <dt>Auto</dt>
                *             <dd>
                *                     <p>SageMaker hyperparameter tuning chooses the best scale for the
                *                         hyperparameter.</p>
                *                 </dd>
                *             <dt>Linear</dt>
                *             <dd>
                *                     <p>Hyperparameter tuning searches the values in the hyperparameter range by
                *                         using a linear scale.</p>
                *                 </dd>
                *             <dt>Logarithmic</dt>
                *             <dd>
                *                     <p>Hyperparameter tuning searches the values in the hyperparameter range by
                *                         using a logarithmic scale.</p>
                *                     <p>Logarithmic scaling works only for ranges that have only values greater
                *                         than 0.</p>
                *                 </dd>
                *          </dl>
                */
            ScalingType?: HyperParameterScalingType | string;
    }
    export namespace IntegerParameterRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IntegerParameterRange) => any;
    }
    /**
        * <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a
        *             hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs
        *             with hyperparameter values within these ranges to find the combination of values that
        *             result in the training job with the best performance as measured by the objective metric
        *             of the hyperparameter tuning job.</p>
        *         <note>
        *             <p>The maximum number of items specified for <code>Array Members</code> refers to
        *                 the maximum number of hyperparameters for each range and also the maximum for the
        *                 hyperparameter tuning job itself. That is, the sum of the number of hyperparameters
        *                 for all the ranges can't exceed the maximum number specified.</p>
        *         </note>
        */
    export interface ParameterRanges {
            /**
                * <p>The array of <a>IntegerParameterRange</a> objects that specify ranges of
                *             integer hyperparameters that a hyperparameter tuning job searches.</p>
                */
            IntegerParameterRanges?: IntegerParameterRange[];
            /**
                * <p>The array of <a>ContinuousParameterRange</a> objects that specify ranges of
                *             continuous hyperparameters that a hyperparameter tuning job searches.</p>
                */
            ContinuousParameterRanges?: ContinuousParameterRange[];
            /**
                * <p>The array of <a>CategoricalParameterRange</a> objects that specify ranges
                *             of categorical hyperparameters that a hyperparameter tuning job searches.</p>
                */
            CategoricalParameterRanges?: CategoricalParameterRange[];
    }
    export namespace ParameterRanges {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterRanges) => any;
    }
    /**
        * <p>Specifies the maximum number of
        *             training
        *             jobs and parallel training jobs that a hyperparameter tuning job can
        *             launch.</p>
        */
    export interface ResourceLimits {
            /**
                * <p>The
                *             maximum
                *             number of training jobs that a hyperparameter tuning job can
                *             launch.</p>
                */
            MaxNumberOfTrainingJobs: number | undefined;
            /**
                * <p>The
                *             maximum
                *             number of concurrent training jobs that a hyperparameter tuning job can
                *             launch.</p>
                */
            MaxParallelTrainingJobs: number | undefined;
    }
    export namespace ResourceLimits {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceLimits) => any;
    }
    export enum HyperParameterTuningJobStrategyType {
            BAYESIAN = "Bayesian",
            RANDOM = "Random"
    }
    export enum TrainingJobEarlyStoppingType {
            AUTO = "Auto",
            OFF = "Off"
    }
    /**
        * <p>The job completion criteria.</p>
        */
    export interface TuningJobCompletionCriteria {
            /**
                * <p>The value of the objective metric.</p>
                */
            TargetObjectiveMetricValue: number | undefined;
    }
    export namespace TuningJobCompletionCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TuningJobCompletionCriteria) => any;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1' {
    import { ActionSource, ActionStatus, AdditionalInferenceSpecificationDefinition, AlgorithmSpecification, AlgorithmStatus, AlgorithmStatusDetails, AlgorithmValidationSpecification, AnnotationConsolidationConfig, AppNetworkAccessType, AppSecurityGroupManagement, AppSpecification, AppStatus, AppType, ArtifactSource, AsyncInferenceConfig, AthenaDatasetDefinition, AuthMode, AutoMLCandidate, AutoMLChannel, AutoMLJobArtifacts, AutoMLJobCompletionCriteria, AutoMLJobConfig, AutoMLJobObjective, AutoMLJobSecondaryStatus, AutoMLJobStatus, AutoMLOutputDataConfig, AutoMLPartialFailureReason, BatchStrategy, Bias, CaptureStatus, CategoricalParameter, Channel, CheckpointConfig, CognitoConfig, CognitoMemberDefinition, CollectionConfiguration, CompilationJobStatus, ContainerDefinition, ContentClassifier, ContextSource, DataCaptureConfig, DataQualityAppSpecification, DataQualityBaselineConfig, DataQualityJobInput, DeploymentConfig, DeviceSelectionConfig, DomainSettings, EdgeDeploymentConfig, EdgeDeploymentModelConfig, EdgeOutputConfig, EdgePresetDeploymentType, EndpointInput, FeatureDefinition, FeatureType, FlowDefinitionOutputConfig, GitConfig, HumanLoopActivationConfig, HumanLoopConfig, HumanLoopRequestSource, HyperParameterTuningJobObjective, HyperParameterTuningJobStrategyType, InferenceSpecification, InputConfig, KernelGatewayImageConfig, MetadataProperties, MetricDefinition, MetricsSource, ModelApprovalStatus, ModelDeployConfig, MonitoringConstraintsResource, MonitoringNetworkConfig, MonitoringOutputConfig, MonitoringResources, MonitoringStatisticsResource, MonitoringStoppingCondition, NeoVpcConfig, OfflineStoreConfig, OnlineStoreConfig, OutputConfig, OutputDataConfig, ParameterRanges, ProblemType, ProcessingInstanceType, ProcessingS3DataDistributionType, ProcessingS3InputMode, ProcessingS3UploadMode, ProductionVariant, ProductionVariantAcceleratorType, ProductionVariantInstanceType, ProductionVariantServerlessConfig, PublicWorkforceTaskPrice, ResourceConfig, ResourceLimits, ResourceSpec, StoppingCondition, Tag, TrainingInputMode, TrainingJobEarlyStoppingType, TrainingSpecification, TransformInput, TransformJobDefinition, TransformOutput, TransformResources, TuningJobCompletionCriteria, UserContext, UserSettings, VpcConfig } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    /**
        * <p>Configures a hyperparameter tuning job.</p>
        */
    export interface HyperParameterTuningJobConfig {
            /**
                * <p>Specifies how hyperparameter tuning chooses the combinations of hyperparameter values
                *             to use for the training job it launches. To use the Bayesian search strategy, set this
                *             to <code>Bayesian</code>. To randomly search, set it to <code>Random</code>. For
                *             information about search strategies, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
                *                 Hyperparameter Tuning Works</a>.</p>
                */
            Strategy: HyperParameterTuningJobStrategyType | string | undefined;
            /**
                * <p>The <a>HyperParameterTuningJobObjective</a> object that specifies the
                *             objective
                *             metric for this tuning job.</p>
                */
            HyperParameterTuningJobObjective?: HyperParameterTuningJobObjective;
            /**
                * <p>The <a>ResourceLimits</a> object that specifies the
                *             maximum
                *             number of training jobs and parallel training jobs for this tuning
                *             job.</p>
                */
            ResourceLimits: ResourceLimits | undefined;
            /**
                * <p>The <a>ParameterRanges</a> object that specifies the ranges of
                *             hyperparameters
                *             that this tuning job searches.</p>
                */
            ParameterRanges?: ParameterRanges;
            /**
                * <p>Specifies whether to use early stopping for training jobs launched by the
                *             hyperparameter tuning job. This can be one of the following values (the default value is
                *                 <code>OFF</code>):</p>
                *         <dl>
                *             <dt>OFF</dt>
                *             <dd>
                *                     <p>Training jobs launched by the hyperparameter tuning job do not use early
                *                         stopping.</p>
                *                 </dd>
                *             <dt>AUTO</dt>
                *             <dd>
                *                     <p>SageMaker stops training jobs launched by the hyperparameter tuning job when
                *                         they are unlikely to perform better than previously completed training jobs.
                *                         For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">Stop Training Jobs Early</a>.</p>
                *                 </dd>
                *          </dl>
                */
            TrainingJobEarlyStoppingType?: TrainingJobEarlyStoppingType | string;
            /**
                * <p>The tuning job's completion criteria.</p>
                */
            TuningJobCompletionCriteria?: TuningJobCompletionCriteria;
    }
    export namespace HyperParameterTuningJobConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterTuningJobConfig) => any;
    }
    /**
        * <p>Specifies
        *             which
        *             training algorithm to use for training jobs that a hyperparameter
        *             tuning job launches and the metrics to monitor.</p>
        */
    export interface HyperParameterAlgorithmSpecification {
            /**
                * <p> The registry path of the Docker image that contains the training algorithm. For
                *             information about Docker registry paths for built-in algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Algorithms
                *                 Provided by Amazon SageMaker: Common Parameters</a>. SageMaker supports both
                *                 <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
                *             image path formats. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon
                *                 SageMaker</a>.</p>
                */
            TrainingImage?: string;
            /**
                * <p>The training input mode that the algorithm supports. For more information about input modes, see
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p>
                *
                *         <p>
                *             <b>Pipe mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly
                *             from Amazon S3 to the container.</p>
                *
                *         <p>
                *             <b>File mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>File</code> mode, SageMaker
                *             downloads the training data from S3 to the provisioned ML storage volume, and mounts the
                *             directory to the Docker volume for the training container.</p>
                *         <p>You must provision the ML storage volume with sufficient capacity
                *             to accommodate the data downloaded from S3. In addition to the training data, the ML
                *             storage volume also stores the output model. The algorithm container uses the ML storage
                *             volume to also store intermediate information, if any.</p>
                *         <p>For distributed algorithms, training data is distributed uniformly.
                *             Your training duration is predictable if the input data objects sizes are
                *             approximately the same. SageMaker does not split the files any further for model training.
                *             If the object sizes are skewed, training won't be optimal as the data distribution is also
                *             skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in
                *             training.</p>
                *
                *         <p>
                *             <b>FastFile mode</b>
                *          </p>
                *         <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly
                *             from S3 to the container with no code changes, and provides file system access to
                *             the data. Users can author their training script to interact with these files as if
                *             they were stored on disk.</p>
                *         <p>
                *             <code>FastFile</code> mode works best when the data is read sequentially.
                *             Augmented manifest files aren't supported.
                *             The startup time is lower when there are fewer files in the S3 bucket provided.</p>
                */
            TrainingInputMode: TrainingInputMode | string | undefined;
            /**
                * <p>The name of the resource algorithm to use for the hyperparameter tuning job. If you
                *             specify a value for this parameter, do not specify a value for
                *                 <code>TrainingImage</code>.</p>
                */
            AlgorithmName?: string;
            /**
                * <p>An array of <a>MetricDefinition</a> objects that specify the
                *             metrics
                *             that the algorithm emits.</p>
                */
            MetricDefinitions?: MetricDefinition[];
    }
    export namespace HyperParameterAlgorithmSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterAlgorithmSpecification) => any;
    }
    /**
        * <p>The retry strategy to use when a training job fails due to an
        *                 <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as part of
        *             the <code>CreateTrainingJob</code> and <code>CreateHyperParameterTuningJob</code>
        *             requests. You can add the <code>StoppingCondition</code> parameter to the request to
        *             limit the training time for the complete job.</p>
        */
    export interface RetryStrategy {
            /**
                * <p>The number of times to retry the job. When the job is retried, it's
                *                 <code>SecondaryStatus</code> is changed to <code>STARTING</code>.</p>
                */
            MaximumRetryAttempts: number | undefined;
    }
    export namespace RetryStrategy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetryStrategy) => any;
    }
    /**
        * <p>Defines
        *             the training jobs launched by a hyperparameter tuning job.</p>
        */
    export interface HyperParameterTrainingJobDefinition {
            /**
                * <p>The job definition name.</p>
                */
            DefinitionName?: string;
            /**
                * <p>Defines the objective metric for a hyperparameter tuning job.
                *             Hyperparameter
                *             tuning uses the value of this metric to evaluate the training jobs it launches, and
                *             returns the training job that results in either the highest or lowest value for this
                *             metric, depending on the value you specify for the <code>Type</code>
                *             parameter.</p>
                */
            TuningObjective?: HyperParameterTuningJobObjective;
            /**
                * <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a
                *             hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs
                *             with hyperparameter values within these ranges to find the combination of values that
                *             result in the training job with the best performance as measured by the objective metric
                *             of the hyperparameter tuning job.</p>
                *         <note>
                *             <p>The maximum number of items specified for <code>Array Members</code> refers to
                *                 the maximum number of hyperparameters for each range and also the maximum for the
                *                 hyperparameter tuning job itself. That is, the sum of the number of hyperparameters
                *                 for all the ranges can't exceed the maximum number specified.</p>
                *         </note>
                */
            HyperParameterRanges?: ParameterRanges;
            /**
                * <p>Specifies the values of hyperparameters
                *             that
                *             do not change for the tuning job.</p>
                */
            StaticHyperParameters?: Record<string, string>;
            /**
                * <p>The <a>HyperParameterAlgorithmSpecification</a> object that
                *             specifies
                *             the resource algorithm to use for the training jobs that the tuning
                *             job launches.</p>
                */
            AlgorithmSpecification: HyperParameterAlgorithmSpecification | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the
                *             IAM
                *             role associated with the training jobs that the tuning job
                *             launches.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>An array of <a>Channel</a> objects that specify
                *             the
                *             input for the training jobs that the tuning job launches.</p>
                */
            InputDataConfig?: Channel[];
            /**
                * <p>The <a>VpcConfig</a> object that
                *             specifies
                *             the VPC that you want the training jobs that this hyperparameter
                *             tuning job launches to connect to. Control access to and from your
                *             training
                *             container by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs
                *                 by Using an Amazon Virtual Private Cloud</a>.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Specifies the path to the Amazon S3 bucket where you
                *             store
                *             model artifacts from the training jobs that the tuning job
                *             launches.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The resources,
                *             including
                *             the compute instances and storage volumes, to use for the training
                *             jobs that the tuning job launches.</p>
                *         <p>Storage volumes store model artifacts and
                *             incremental
                *             states. Training algorithms might also use storage volumes for
                *             scratch
                *             space. If you want SageMaker to use the storage volume to store the
                *             training data, choose <code>File</code> as the <code>TrainingInputMode</code> in the
                *             algorithm specification. For distributed training algorithms, specify an instance count
                *             greater than 1.</p>
                */
            ResourceConfig: ResourceConfig | undefined;
            /**
                * <p>Specifies a limit to how long a model hyperparameter training job can run. It also
                *             specifies how long a managed spot training job has to complete. When the job reaches the
                *             time limit, SageMaker ends the training job. Use this API to cap model training costs.</p>
                */
            StoppingCondition: StoppingCondition | undefined;
            /**
                * <p>Isolates the training container. No inbound or outbound network calls can be made,
                *             except for calls between peers within a training cluster for distributed training. If
                *             network isolation is used for training jobs that are configured to use a VPC, SageMaker
                *             downloads and uploads customer data and model artifacts through the specified VPC, but
                *             the training container does not have network access.</p>
                */
            EnableNetworkIsolation?: boolean;
            /**
                * <p>To encrypt all communications between ML compute instances in distributed training,
                *             choose <code>True</code>. Encryption provides greater security for distributed training,
                *             but training might take longer. How long it takes depends on the amount of communication
                *             between compute instances, especially if you use a deep learning algorithm in
                *             distributed training.</p>
                */
            EnableInterContainerTrafficEncryption?: boolean;
            /**
                * <p>A Boolean indicating whether managed spot training is enabled (<code>True</code>) or
                *             not (<code>False</code>).</p>
                */
            EnableManagedSpotTraining?: boolean;
            /**
                * <p>Contains information about the output location for managed spot training checkpoint
                *             data. </p>
                */
            CheckpointConfig?: CheckpointConfig;
            /**
                * <p>The number of times to retry the job when the job fails due to an
                *                 <code>InternalServerError</code>.</p>
                */
            RetryStrategy?: RetryStrategy;
    }
    export namespace HyperParameterTrainingJobDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterTrainingJobDefinition) => any;
    }
    /**
        * <p>A previously completed or stopped hyperparameter tuning job to be used as a starting
        *             point for a new hyperparameter tuning job.</p>
        */
    export interface ParentHyperParameterTuningJob {
            /**
                * <p>The name of the hyperparameter tuning job to be used as a starting point for a new
                *             hyperparameter tuning job.</p>
                */
            HyperParameterTuningJobName?: string;
    }
    export namespace ParentHyperParameterTuningJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParentHyperParameterTuningJob) => any;
    }
    export enum HyperParameterTuningJobWarmStartType {
            IDENTICAL_DATA_AND_ALGORITHM = "IdenticalDataAndAlgorithm",
            TRANSFER_LEARNING = "TransferLearning"
    }
    /**
        * <p>Specifies the configuration for a hyperparameter tuning job that uses one or more
        *             previous hyperparameter tuning jobs as a starting point. The results of previous tuning
        *             jobs are used to inform which combinations of hyperparameters to search over in the new
        *             tuning job.</p>
        *         <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using
        *             the objective metric, and the training job that performs the best is compared to the
        *             best training jobs from the parent tuning jobs. From these, the training job that
        *             performs the best as measured by the objective metric is returned as the overall best
        *             training job.</p>
        *         <note>
        *             <p>All training jobs launched by parent hyperparameter tuning jobs and the new
        *                 hyperparameter tuning jobs count against the limit of training jobs for the tuning
        *                 job.</p>
        *         </note>
        */
    export interface HyperParameterTuningJobWarmStartConfig {
            /**
                * <p>An array of hyperparameter tuning jobs that are used as the starting point for the new
                *             hyperparameter tuning job. For more information about warm starting a hyperparameter
                *             tuning job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-warm-start.html">Using a Previous
                *                 Hyperparameter Tuning Job as a Starting Point</a>.</p>
                *         <p>Hyperparameter tuning jobs created before October 1, 2018 cannot be used as parent
                *             jobs for warm start tuning jobs.</p>
                */
            ParentHyperParameterTuningJobs: ParentHyperParameterTuningJob[] | undefined;
            /**
                * <p>Specifies one of the following:</p>
                *         <dl>
                *             <dt>IDENTICAL_DATA_AND_ALGORITHM</dt>
                *             <dd>
                *                     <p>The new hyperparameter tuning job uses the same input data and training
                *                         image as the parent tuning jobs. You can change the hyperparameter ranges to
                *                         search and the maximum number of training jobs that the hyperparameter
                *                         tuning job launches. You cannot use a new version of the training algorithm,
                *                         unless the changes in the new version do not affect the algorithm itself.
                *                         For example, changes that improve logging or adding support for a different
                *                         data format are allowed. You can also change hyperparameters from tunable to
                *                         static, and from static to tunable, but the total number of static plus
                *                         tunable hyperparameters must remain the same as it is in all parent jobs.
                *                         The objective metric for the new tuning job must be the same as for all
                *                         parent jobs.</p>
                *                 </dd>
                *             <dt>TRANSFER_LEARNING</dt>
                *             <dd>
                *                     <p>The new hyperparameter tuning job can include input data, hyperparameter
                *                         ranges, maximum number of concurrent training jobs, and maximum number of
                *                         training jobs that are different than those of its parent hyperparameter
                *                         tuning jobs. The training image can also be a different version from the
                *                         version used in the parent hyperparameter tuning job. You can also change
                *                         hyperparameters from tunable to static, and from static to tunable, but the
                *                         total number of static plus tunable hyperparameters must remain the same as
                *                         it is in all parent jobs. The objective metric for the new tuning job must
                *                         be the same as for all parent jobs.</p>
                *                 </dd>
                *          </dl>
                */
            WarmStartType: HyperParameterTuningJobWarmStartType | string | undefined;
    }
    export namespace HyperParameterTuningJobWarmStartConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterTuningJobWarmStartConfig) => any;
    }
    export interface CreateHyperParameterTuningJobRequest {
            /**
                * <p>The name of the tuning job. This name is the prefix for the names of all training jobs
                *             that this tuning job launches. The name must be unique within the same Amazon Web Services account and
                *             Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9,
                *             and : + = @ _ % - (hyphen). The name is not case sensitive.</p>
                */
            HyperParameterTuningJobName: string | undefined;
            /**
                * <p>The <a>HyperParameterTuningJobConfig</a> object that describes the tuning
                *             job, including the search strategy, the objective metric used to evaluate training jobs,
                *             ranges of parameters to search, and resource limits for the tuning job. For more
                *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
                *                 Hyperparameter Tuning Works</a>.</p>
                */
            HyperParameterTuningJobConfig: HyperParameterTuningJobConfig | undefined;
            /**
                * <p>The <a>HyperParameterTrainingJobDefinition</a> object that describes the
                *             training jobs that this tuning job launches, including static hyperparameters, input
                *             data configuration, output data configuration, resource configuration, and stopping
                *             condition.</p>
                */
            TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
            /**
                * <p>A list of the <a>HyperParameterTrainingJobDefinition</a> objects launched
                *             for this tuning job.</p>
                */
            TrainingJobDefinitions?: HyperParameterTrainingJobDefinition[];
            /**
                * <p>Specifies the configuration for starting the hyperparameter tuning job using one or
                *             more previous tuning jobs as a starting point. The results of previous tuning jobs are
                *             used to inform which combinations of hyperparameters to search over in the new tuning
                *             job.</p>
                *         <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using
                *             the objective metric. If you specify <code>IDENTICAL_DATA_AND_ALGORITHM</code> as the
                *                 <code>WarmStartType</code> value for the warm start configuration, the training job
                *             that performs the best in the new tuning job is compared to the best training jobs from
                *             the parent tuning jobs. From these, the training job that performs the best as measured
                *             by the objective metric is returned as the overall best training job.</p>
                *         <note>
                *             <p>All training jobs launched by parent hyperparameter tuning jobs and the new
                *                 hyperparameter tuning jobs count against the limit of training jobs for the tuning
                *                 job.</p>
                *         </note>
                */
            WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                *         <p>Tags that you specify for the tuning job are also added to all training jobs that the
                *             tuning job launches.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateHyperParameterTuningJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHyperParameterTuningJobRequest) => any;
    }
    export interface CreateHyperParameterTuningJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the tuning job. SageMaker assigns an ARN to a
                *             hyperparameter tuning job when you create it.</p>
                */
            HyperParameterTuningJobArn: string | undefined;
    }
    export namespace CreateHyperParameterTuningJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHyperParameterTuningJobResponse) => any;
    }
    export interface CreateImageRequest {
            /**
                * <p>The description of the image.</p>
                */
            Description?: string;
            /**
                * <p>The display name of the image. If not provided, <code>ImageName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The name of the image. Must be unique to your account.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A list of tags to apply to the image.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageRequest) => any;
    }
    export interface CreateImageResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the image.</p>
                */
            ImageArn?: string;
    }
    export namespace CreateImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageResponse) => any;
    }
    export interface CreateImageVersionRequest {
            /**
                * <p>The registry path of the container image to use as the starting point for this
                *         version. The path is an Amazon Elastic Container Registry (ECR) URI in the following format:</p>
                *          <p>
                *             <code><acct-id>.dkr.ecr.<region>.amazonaws.com/<repo-name[:tag] or [@digest]></code>
                *          </p>
                */
            BaseImage: string | undefined;
            /**
                * <p>A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python
                *         (Boto3), add a unique value to the call.</p>
                */
            ClientToken?: string;
            /**
                * <p>The <code>ImageName</code> of the <code>Image</code> to create a version of.</p>
                */
            ImageName: string | undefined;
    }
    export namespace CreateImageVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageVersionRequest) => any;
    }
    export interface CreateImageVersionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the image version.</p>
                */
            ImageVersionArn?: string;
    }
    export namespace CreateImageVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateImageVersionResponse) => any;
    }
    /**
        * <p>Specifies the range of environment parameters</p>
        */
    export interface EnvironmentParameterRanges {
            /**
                * <p>Specified a list of parameters for each category.</p>
                */
            CategoricalParameterRanges?: CategoricalParameter[];
    }
    export namespace EnvironmentParameterRanges {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentParameterRanges) => any;
    }
    /**
        * <p>The endpoint configuration for the load test.</p>
        */
    export interface EndpointInputConfiguration {
            /**
                * <p>The instance types to use for the load test.</p>
                */
            InstanceType: ProductionVariantInstanceType | string | undefined;
            /**
                * <p>The inference specification name in the model package version.</p>
                */
            InferenceSpecificationName?: string;
            /**
                * <p> The parameter you want to benchmark against.</p>
                */
            EnvironmentParameterRanges?: EnvironmentParameterRanges;
    }
    export namespace EndpointInputConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointInputConfiguration) => any;
    }
    /**
        * <p>Specifies the maximum number of jobs that can run in parallel
        *     and the maximum number of jobs that can run.</p>
        */
    export interface RecommendationJobResourceLimit {
            /**
                * <p>Defines the maximum number of load tests.</p>
                */
            MaxNumberOfTests?: number;
            /**
                * <p>Defines the maximum number of parallel load tests.</p>
                */
            MaxParallelOfTests?: number;
    }
    export namespace RecommendationJobResourceLimit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationJobResourceLimit) => any;
    }
    /**
        * <p>Defines the traffic pattern.</p>
        */
    export interface Phase {
            /**
                * <p>Specifies how many concurrent users to start with.</p>
                */
            InitialNumberOfUsers?: number;
            /**
                * <p>Specified how many new users to spawn in a minute.</p>
                */
            SpawnRate?: number;
            /**
                * <p>Specifies how long traffic phase should be.</p>
                */
            DurationInSeconds?: number;
    }
    export namespace Phase {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Phase) => any;
    }
    export enum TrafficType {
            PHASES = "PHASES"
    }
    /**
        * <p>Defines the traffic pattern of the load test.</p>
        */
    export interface TrafficPattern {
            /**
                * <p>Defines the traffic patterns.</p>
                */
            TrafficType?: TrafficType | string;
            /**
                * <p>Defines the phases traffic specification.</p>
                */
            Phases?: Phase[];
    }
    export namespace TrafficPattern {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrafficPattern) => any;
    }
    /**
        * <p>The input configuration of the recommendation job.</p>
        */
    export interface RecommendationJobInputConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of a versioned model package.</p>
                */
            ModelPackageVersionArn: string | undefined;
            /**
                * <p>Specifies the maximum duration of the job, in seconds.></p>
                */
            JobDurationInSeconds?: number;
            /**
                * <p>Specifies the traffic pattern of the job.</p>
                */
            TrafficPattern?: TrafficPattern;
            /**
                * <p>Defines the resource limit of the job.</p>
                */
            ResourceLimit?: RecommendationJobResourceLimit;
            /**
                * <p>Specifies the endpoint configuration to use for a job.</p>
                */
            EndpointConfigurations?: EndpointInputConfiguration[];
            /**
                * <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service (Amazon Web Services KMS) key
                *          that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.
                *          This key will be passed to SageMaker Hosting for endpoint creation. </p>
                *
                *          <p>The SageMaker execution role must have <code>kms:CreateGrant</code> permission in order to encrypt data on the storage
                *          volume of the endpoints created for inference recommendation. The inference recommendation job will fail
                *          asynchronously during endpoint configuration creation if the role passed does not have
                *          <code>kms:CreateGrant</code> permission.</p>
                *
                *          <p>The <code>KmsKeyId</code> can be any of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>// KMS Key ID</p>
                *                <p>
                *                   <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                *                <p>
                *                   <code>"arn:aws:kms:<region>:<account>:key/<key-id-12ab-34cd-56ef-1234567890ab>"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>// KMS Key Alias</p>
                *                <p>
                *                   <code>"alias/ExampleAlias"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>// Amazon Resource Name (ARN) of a KMS Key Alias</p>
                *                <p>
                *                   <code>"arn:aws:kms:<region>:<account>:alias/<ExampleAlias>"</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>For more information about key identifiers, see
                *          <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">Key identifiers (KeyID)</a> in the
                *          Amazon Web Services Key Management Service (Amazon Web Services KMS) documentation.</p>
                */
            VolumeKmsKeyId?: string;
    }
    export namespace RecommendationJobInputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationJobInputConfig) => any;
    }
    export enum RecommendationJobType {
            ADVANCED = "Advanced",
            DEFAULT = "Default"
    }
    /**
        * <p>Provides information about the output configuration for the compiled
        *          model.</p>
        */
    export interface RecommendationJobCompiledOutputConfig {
            /**
                * <p>Identifies the Amazon S3 bucket where you want SageMaker to store the
                *          compiled model artifacts.</p>
                */
            S3OutputUri?: string;
    }
    export namespace RecommendationJobCompiledOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationJobCompiledOutputConfig) => any;
    }
    /**
        * <p>Provides information about the output configuration for the compiled model.</p>
        */
    export interface RecommendationJobOutputConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service (Amazon Web Services KMS) key
                *          that Amazon SageMaker uses to encrypt your output artifacts with Amazon S3 server-side encryption.
                *          The SageMaker execution role must have <code>kms:GenerateDataKey</code> permission.</p>
                *
                *          <p>The <code>KmsKeyId</code> can be any of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>// KMS Key ID</p>
                *                <p>
                *                   <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                *                <p>
                *                   <code>"arn:aws:kms:<region>:<account>:key/<key-id-12ab-34cd-56ef-1234567890ab>"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>// KMS Key Alias</p>
                *                <p>
                *                   <code>"alias/ExampleAlias"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>// Amazon Resource Name (ARN) of a KMS Key Alias</p>
                *                <p>
                *                   <code>"arn:aws:kms:<region>:<account>:alias/<ExampleAlias>"</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>For more information about key identifiers, see
                *          <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">Key identifiers (KeyID)</a> in the
                *          Amazon Web Services Key Management Service (Amazon Web Services KMS) documentation.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Provides information about the output configuration for the compiled
                *          model.</p>
                */
            CompiledOutputConfig?: RecommendationJobCompiledOutputConfig;
    }
    export namespace RecommendationJobOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationJobOutputConfig) => any;
    }
    /**
        * <p>The model latency threshold.</p>
        */
    export interface ModelLatencyThreshold {
            /**
                * <p>The model latency percentile threshold.</p>
                */
            Percentile?: string;
            /**
                * <p>The model latency percentile value in milliseconds.</p>
                */
            ValueInMilliseconds?: number;
    }
    export namespace ModelLatencyThreshold {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelLatencyThreshold) => any;
    }
    /**
        * <p>Specifies conditions for stopping a job. When a job reaches a
        *            stopping condition limit, SageMaker ends the job.</p>
        */
    export interface RecommendationJobStoppingConditions {
            /**
                * <p>The maximum number of requests per minute expected for the endpoint.</p>
                */
            MaxInvocations?: number;
            /**
                * <p>The interval of time taken by a model to respond as viewed from SageMaker.
                *           The interval includes the local communication time taken to send the request
                *           and to fetch the response from the container of a model and the time taken to
                *           complete the inference in the container.</p>
                */
            ModelLatencyThresholds?: ModelLatencyThreshold[];
    }
    export namespace RecommendationJobStoppingConditions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationJobStoppingConditions) => any;
    }
    export interface CreateInferenceRecommendationsJobRequest {
            /**
                * <p>A name for the recommendation job. The name must be unique within
                *            the Amazon Web Services Region and within your Amazon Web Services account.</p>
                */
            JobName: string | undefined;
            /**
                * <p>Defines the type of recommendation job. Specify <code>Default</code> to initiate an instance
                *            recommendation and <code>Advanced</code> to initiate a load test. If left unspecified,
                *            Amazon SageMaker Inference Recommender will run an instance recommendation (<code>DEFAULT</code>) job.</p>
                */
            JobType: RecommendationJobType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker
                *     to perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Provides information about the versioned model package Amazon Resource Name (ARN),
                *     the traffic pattern, and endpoint configurations.</p>
                */
            InputConfig: RecommendationJobInputConfig | undefined;
            /**
                * <p>Description of the recommendation job.</p>
                */
            JobDescription?: string;
            /**
                * <p>A set of conditions for stopping a recommendation job.  If any of
                *           the conditions are met, the job is automatically stopped.</p>
                */
            StoppingConditions?: RecommendationJobStoppingConditions;
            /**
                * <p>Provides information about the output artifacts and the KMS key
                *          to use for Amazon S3 server-side encryption.</p>
                */
            OutputConfig?: RecommendationJobOutputConfig;
            /**
                * <p>The metadata that you apply to Amazon Web Services resources to help you
                *            categorize and organize them. Each tag consists of a key and a value, both of
                *            which you define. For more information, see
                *            <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>
                *            in the Amazon Web Services General Reference.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateInferenceRecommendationsJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInferenceRecommendationsJobRequest) => any;
    }
    export interface CreateInferenceRecommendationsJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the recommendation job.</p>
                */
            JobArn: string | undefined;
    }
    export namespace CreateInferenceRecommendationsJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInferenceRecommendationsJobResponse) => any;
    }
    /**
        * <p>Provided configuration information for the worker UI for a labeling job. Provide
        *             either <code>HumanTaskUiArn</code> or <code>UiTemplateS3Uri</code>.</p>
        *         <p>For named entity recognition, 3D point cloud and video frame labeling jobs, use
        *                 <code>HumanTaskUiArn</code>.</p>
        *         <p>For all other Ground Truth built-in task types and custom task types, use
        *                 <code>UiTemplateS3Uri</code> to specify the location of a worker task template in
        *             Amazon S3.</p>
        */
    export interface UiConfig {
            /**
                * <p>The Amazon S3 bucket location of the UI template, or worker task template. This is the
                *             template used to render the worker UI and tools for labeling job tasks. For more
                *             information about the contents of a UI template, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step2.html"> Creating Your Custom
                *                 Labeling Task Template</a>.</p>
                */
            UiTemplateS3Uri?: string;
            /**
                * <p>The ARN of the worker task template used to render the worker UI and tools for
                *             labeling job tasks.</p>
                *         <p>Use this parameter when you are creating a labeling job for named entity recognition,
                *             3D point cloud and video frame labeling jobs. Use your labeling job task type to select
                *             one of the following ARNs and use it with this parameter when you create a labeling job.
                *             Replace <code>aws-region</code> with the Amazon Web Services Region you are creating your labeling job
                *             in. For example, replace <code>aws-region</code> with <code>us-west-1</code> if you
                *             create a labeling job in US West (N. California).</p>
                *         <p>
                *             <b>Named Entity Recognition</b>
                *          </p>
                *         <p>Use the following <code>HumanTaskUiArn</code> for named entity recognition labeling
                *             jobs:</p>
                *         <p>
                *             <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/NamedEntityRecognition</code>
                *          </p>
                *
                *         <p>
                *             <b>3D Point Cloud HumanTaskUiArns</b>
                *          </p>
                *
                *         <p>Use this <code>HumanTaskUiArn</code> for 3D point cloud object detection and 3D point
                *             cloud object detection adjustment labeling jobs. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p> Use this <code>HumanTaskUiArn</code> for 3D point cloud object tracking and 3D point
                *             cloud object tracking adjustment labeling jobs. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectTracking</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p> Use this <code>HumanTaskUiArn</code> for 3D point cloud semantic segmentation and 3D
                *             point cloud semantic segmentation adjustment labeling jobs.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>Video Frame HumanTaskUiArns</b>
                *          </p>
                *
                *         <p>Use this <code>HumanTaskUiArn</code> for video frame object detection and video frame
                *             object detection adjustment labeling jobs. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:sagemaker:region:394669845002:human-task-ui/VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p> Use this <code>HumanTaskUiArn</code> for video frame object tracking and video frame
                *             object tracking adjustment labeling jobs. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            HumanTaskUiArn?: string;
    }
    export namespace UiConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UiConfig) => any;
    }
    /**
        * <p>Information required for human workers to complete a labeling task.</p>
        */
    export interface HumanTaskConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of the work team assigned to complete the tasks.</p>
                */
            WorkteamArn: string | undefined;
            /**
                * <p>Information about the user interface that workers use to complete the labeling
                *             task.</p>
                */
            UiConfig: UiConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a Lambda function that is run before a data object
                *             is sent to a human worker. Use this function to provide input to a custom labeling
                *             job.</p>
                *         <p>For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
                *                 task types</a>, use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for
                *                 <code>PreHumanTaskLambdaArn</code>. For custom labeling workflows, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-prelambda">Pre-annotation Lambda</a>. </p>
                *
                *
                *
                *          <p>
                *             <b>Bounding box</b> - Finds the most similar boxes from
                *                     different workers based on the Jaccard index of the boxes.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-BoundingBox</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *
                *           <p>
                *             <b>Image classification</b> - Uses a variant of the Expectation
                *                     Maximization approach to estimate the true class of an image based on
                *                     annotations from individual workers.</p>
                *
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClass</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Multi-label image classification</b> - Uses a variant of the Expectation
                *                     Maximization approach to estimate the true classes of an image based on
                *                     annotations from individual workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Semantic segmentation</b> - Treats each pixel in an image as
                *                     a multi-class classification and treats pixel annotations from workers as
                *                     "votes" for the correct label.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-SemanticSegmentation</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Text classification</b> - Uses a variant of the Expectation
                *                     Maximization approach to estimate the true class of text based on annotations
                *                     from individual workers.</p>
                *             <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClass</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Multi-label text classification</b> - Uses a variant of the
                *                     Expectation Maximization approach to estimate the true classes of text based on
                *                     annotations from individual workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClassMultiLabel</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Named entity recognition</b> - Groups similar selections and
                *                     calculates aggregate boundaries, resolving to most-assigned label.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-NamedEntityRecognition</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *
                *         <p>
                *             <b>Video Classification</b> - Use this task type when you need workers to classify videos using
                *             predefined labels that you specify. Workers are shown videos and are asked to choose one
                *             label for each video.</p>
                *
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoMultiClass</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>Video Frame Object Detection</b> - Use this task type to
                *             have workers identify and locate objects in a sequence of video frames (images extracted
                *             from a video) using bounding boxes. For example, you can use this task to ask workers to
                *             identify and localize various objects in a series of video frames, such as cars, bikes,
                *             and pedestrians.</p>
                *
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectDetection</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>Video Frame Object Tracking</b> - Use this task type to
                *             have workers track the movement of objects in a sequence of video frames (images
                *             extracted from a video) using bounding boxes. For example, you can use this task to ask
                *             workers to track the movement of objects, such as cars, bikes, and pedestrians. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectTracking</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *
                *         <p>
                *             <b>3D Point Cloud Modalities</b>
                *          </p>
                *         <p>Use the following pre-annotation lambdas for 3D point cloud labeling modality tasks.
                *             See <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-task-types.html">3D Point Cloud Task types
                *             </a> to learn more. </p>
                *
                *
                *         <p>
                *             <b>3D Point Cloud Object Detection</b> -
                *         Use this task type when you want workers to classify objects in a 3D point cloud by
                *         drawing 3D cuboids around objects. For example, you can use this task type to ask workers
                *         to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.</p>
                *                 <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectDetection</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>3D Point Cloud Object Tracking</b> -
                *         Use this task type when you want workers to draw 3D cuboids around objects
                *         that appear in a sequence of 3D point cloud frames.
                *         For example, you can use this task type to ask workers to track
                *         the movement of vehicles across multiple point cloud frames.
                *         </p>
                *                 <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectTracking</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *         <p>
                *             <b>3D Point Cloud Semantic Segmentation</b> -
                *             Use this task type when you want workers to create a point-level semantic segmentation masks by
                *             painting objects in a 3D point cloud using different colors where each color is assigned to one of
                *             the classes you specify.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
                *          </p>
                *         <p>Use label verification and adjustment jobs to review and adjust labels. To learn more,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify and Adjust Labels </a>.</p>
                *
                *             <p>
                *             <b>Bounding box verification</b> - Uses a variant of the
                *                 Expectation Maximization approach to estimate the true class of verification
                *                 judgement for bounding box labels based on annotations from individual
                *                 workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationBoundingBox</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Bounding box adjustment</b> - Finds the most similar boxes
                *                     from different workers based on the Jaccard index of the adjusted
                *                     annotations.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentBoundingBox</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Semantic segmentation verification</b> - Uses a variant of
                *                     the Expectation Maximization approach to estimate the true class of verification
                *                     judgment for semantic segmentation labels based on annotations from individual
                *                     workers.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *             <p>
                *             <b>Semantic segmentation adjustment</b> - Treats each pixel in
                *                     an image as a multi-class classification and treats pixel adjusted annotations
                *                     from workers as "votes" for the correct label.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentSemanticSegmentation</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *
                *         <p>
                *             <b>Video Frame Object Detection Adjustment</b> -
                *             Use this task type when you want workers to adjust bounding boxes that workers have added
                *             to video frames to classify and localize objects in a sequence of video frames.</p>
                *
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectDetection</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>Video Frame Object Tracking Adjustment</b> -
                *             Use this task type when you want workers to adjust bounding boxes that workers have added
                *             to video frames to track object movement across a sequence of video frames.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectTracking</code>
                *                 </p>
                *             </li>
                *          </ul>
                *
                *
                *
                *
                *         <p>
                *             <b>3D point cloud object detection adjustment</b> - Adjust
                *             3D cuboids in a point cloud frame. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectDetection</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>3D point cloud object tracking adjustment</b> - Adjust 3D
                *             cuboids across a sequence of point cloud frames. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *         <p>
                *             <b>3D point cloud semantic segmentation adjustment</b> -
                *             Adjust semantic segmentation masks in a 3D point cloud. </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            PreHumanTaskLambdaArn: string | undefined;
            /**
                * <p>Keywords used to describe the task so that workers on Amazon Mechanical Turk can
                *             discover the task.</p>
                */
            TaskKeywords?: string[];
            /**
                * <p>A title for the task for your human workers.</p>
                */
            TaskTitle: string | undefined;
            /**
                * <p>A description of the task for your human workers.</p>
                */
            TaskDescription: string | undefined;
            /**
                * <p>The number of human workers that will label an object. </p>
                */
            NumberOfHumanWorkersPerDataObject: number | undefined;
            /**
                * <p>The amount of time that a worker has to complete a task. </p>
                *         <p>If you create a custom labeling job, the maximum value for this parameter is 8 hours
                *             (28,800 seconds).</p>
                *         <p>If you create a labeling job using a <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task type</a> the maximum
                *             for this parameter depends on the task type you use:</p>
                *         <ul>
                *             <li>
                *                 <p>For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-images.html">image</a> and
                *                     <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-text.html">text</a> labeling jobs,
                *                     the maximum is 8 hours (28,800 seconds).</p>
                *             </li>
                *             <li>
                *                 <p>For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud.html">3D point cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-video.html">video frame</a> labeling jobs, the maximum is 30 days (2952,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.</p>
                *             </li>
                *          </ul>
                */
            TaskTimeLimitInSeconds: number | undefined;
            /**
                * <p>The length of time that a task remains available for labeling by human workers. The
                *             default and maximum values for this parameter depend on the type of workforce you
                *             use.</p>
                *         <ul>
                *             <li>
                *                 <p>If you choose the Amazon Mechanical Turk workforce, the maximum is 12 hours (43,200 seconds).
                *                     The default is 6 hours (21,600 seconds).</p>
                *             </li>
                *             <li>
                *                 <p>If you choose a private or vendor workforce, the default value is 30 days (2592,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.</p>
                *             </li>
                *          </ul>
                */
            TaskAvailabilityLifetimeInSeconds?: number;
            /**
                * <p>Defines the maximum number of data objects that can be labeled by human workers at the
                *             same time. Also referred to as batch size. Each object may have more than one worker at one time.
                *             The default value is 1000 objects.</p>
                */
            MaxConcurrentTaskCount?: number;
            /**
                * <p>Configures how labels are consolidated across human workers.</p>
                */
            AnnotationConsolidationConfig: AnnotationConsolidationConfig | undefined;
            /**
                * <p>The price that you pay for each task performed by an Amazon Mechanical Turk worker.</p>
                */
            PublicWorkforceTaskPrice?: PublicWorkforceTaskPrice;
    }
    export namespace HumanTaskConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HumanTaskConfig) => any;
    }
    /**
        * <p>Attributes of the data specified by the customer. Use these to describe the data to be
        *             labeled.</p>
        */
    export interface LabelingJobDataAttributes {
            /**
                * <p>Declares that your content is free of personally identifiable information or adult
                *             content. SageMaker may restrict the Amazon Mechanical Turk workers that can view your task
                *             based on this information.</p>
                */
            ContentClassifiers?: (ContentClassifier | string)[];
    }
    export namespace LabelingJobDataAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobDataAttributes) => any;
    }
    /**
        * <p>The Amazon S3 location of the input data objects.</p>
        */
    export interface LabelingJobS3DataSource {
            /**
                * <p>The Amazon S3 location of the manifest file that describes the input data objects. </p>
                *         <p>The input manifest file referenced in <code>ManifestS3Uri</code> must contain one of
                *             the following keys: <code>source-ref</code> or <code>source</code>. The value of the
                *             keys are interpreted as follows:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>source-ref</code>: The source of the object is the Amazon S3 object
                *                     specified in the value. Use this value when the object is a binary object, such
                *                     as an image.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>source</code>: The source of the object is the value. Use this
                *                     value when the object is a text value.</p>
                *             </li>
                *          </ul>
                *         <p>If you are a new user of Ground Truth, it is recommended you review <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-input-data-input-manifest.html">Use an Input Manifest File </a> in the Amazon SageMaker Developer Guide to learn how to
                *             create an input manifest file.</p>
                */
            ManifestS3Uri: string | undefined;
    }
    export namespace LabelingJobS3DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobS3DataSource) => any;
    }
    /**
        * <p>An Amazon SNS data source used for streaming labeling jobs.</p>
        */
    export interface LabelingJobSnsDataSource {
            /**
                * <p>The Amazon SNS input topic Amazon Resource Name (ARN). Specify the ARN of the input topic
                *       you will use to send new data objects to a streaming labeling job.</p>
                */
            SnsTopicArn: string | undefined;
    }
    export namespace LabelingJobSnsDataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobSnsDataSource) => any;
    }
    /**
        * <p>Provides information about the location of input data.</p>
        *
        *          <p>You must specify at least one of the following: <code>S3DataSource</code> or <code>SnsDataSource</code>.</p>
        *          <p>Use <code>SnsDataSource</code> to specify an SNS input topic
        *     for a streaming labeling job. If you do not specify
        *     and SNS input topic ARN, Ground Truth will create a one-time labeling job.</p>
        *          <p>Use <code>S3DataSource</code> to specify an input
        *     manifest file for both streaming and one-time labeling jobs.
        *     Adding an <code>S3DataSource</code> is optional if you use <code>SnsDataSource</code> to create a streaming labeling job.</p>
        */
    export interface LabelingJobDataSource {
            /**
                * <p>The Amazon S3 location of the input data objects.</p>
                */
            S3DataSource?: LabelingJobS3DataSource;
            /**
                * <p>An Amazon SNS data source used for streaming labeling jobs. To learn more, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-send-data">Send Data to a Streaming Labeling Job</a>. </p>
                */
            SnsDataSource?: LabelingJobSnsDataSource;
    }
    export namespace LabelingJobDataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobDataSource) => any;
    }
    /**
        * <p>Input configuration information for a labeling job.</p>
        */
    export interface LabelingJobInputConfig {
            /**
                * <p>The location of the input data.</p>
                */
            DataSource: LabelingJobDataSource | undefined;
            /**
                * <p>Attributes of the data specified by the customer.</p>
                */
            DataAttributes?: LabelingJobDataAttributes;
    }
    export namespace LabelingJobInputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobInputConfig) => any;
    }
    /**
        * <p>Configure encryption on the storage volume attached to the ML compute instance used to
        *             run automated data labeling model training and inference. </p>
        */
    export interface LabelingJobResourceConfig {
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume
                *             attached to the ML compute instance(s) that run the training and inference jobs used for
                *             automated data labeling. </p>
                *         <p>You can only specify a <code>VolumeKmsKeyId</code> when you create a labeling job with
                *             automated data labeling enabled using the API operation <code>CreateLabelingJob</code>.
                *             You cannot specify an Amazon Web Services KMS key to encrypt the storage volume used for
                *             automated data labeling model training and inference when you create a labeling job
                *             using the console. To learn more, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security.html">Output Data and Storage Volume
                *                 Encryption</a>.</p>
                *         <p>The <code>VolumeKmsKeyId</code> can be any of the following formats:</p>
                *         <ul>
                *             <li>
                *                 <p>KMS Key ID</p>
                *                 <p>
                *                     <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>Amazon Resource Name (ARN) of a KMS Key</p>
                *                 <p>
                *                     <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Specifies a VPC that your training jobs and hosted models have access to. Control
                *             access to and from your training and model containers by configuring the VPC. For more
                *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs
                *                 by Using an Amazon Virtual Private Cloud</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace LabelingJobResourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobResourceConfig) => any;
    }
    /**
        * <p>Provides configuration information for auto-labeling of your data objects. A
        *                 <code>LabelingJobAlgorithmsConfig</code> object must be supplied in order to use
        *             auto-labeling.</p>
        */
    export interface LabelingJobAlgorithmsConfig {
            /**
                * <p>Specifies the Amazon Resource Name (ARN) of the algorithm used for auto-labeling. You
                *             must select one of the following ARNs:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <i>Image classification</i>
                *                 </p>
                *                 <p>
                *                     <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/image-classification</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <i>Text classification</i>
                *                 </p>
                *                 <p>
                *                     <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/text-classification</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <i>Object detection</i>
                *                 </p>
                *                 <p>
                *                     <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/object-detection</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <i>Semantic Segmentation</i>
                *                 </p>
                *                 <p>
                *                     <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/semantic-segmentation</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            LabelingJobAlgorithmSpecificationArn: string | undefined;
            /**
                * <p>At the end of an auto-label job Ground Truth sends the Amazon Resource Name (ARN) of the final
                *             model used for auto-labeling. You can use this model as the starting point for
                *             subsequent similar jobs by providing the ARN of the model here. </p>
                */
            InitialActiveLearningModelArn?: string;
            /**
                * <p>Provides configuration information for a labeling job.</p>
                */
            LabelingJobResourceConfig?: LabelingJobResourceConfig;
    }
    export namespace LabelingJobAlgorithmsConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobAlgorithmsConfig) => any;
    }
    /**
        * <p>Output configuration information for a labeling job.</p>
        */
    export interface LabelingJobOutputConfig {
            /**
                * <p>The Amazon S3 location to write output data.</p>
                */
            S3OutputPath: string | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service ID of the key used to encrypt the output data, if any.</p>
                *         <p>If you provide your own KMS key ID, you must add the required permissions to your KMS
                *             key described in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-permission.html#sms-security-kms-permissions">Encrypt Output Data and Storage Volume with Amazon Web Services KMS</a>.</p>
                *         <p>If you don't provide a KMS key ID, Amazon SageMaker uses the default Amazon Web Services KMS key for Amazon S3 for your
                *             role's account to encrypt your output data.</p>
                *         <p>If you use a bucket policy with an <code>s3:PutObject</code> permission that only
                *             allows objects with server-side encryption, set the condition key of
                *                 <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For more
                *             information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
                *                 Guide.</i>
                *          </p>
                */
            KmsKeyId?: string;
            /**
                * <p>An Amazon Simple Notification Service (Amazon SNS) output topic ARN. Provide a <code>SnsTopicArn</code> if you want to
                *             do real time chaining to another streaming job and receive an Amazon SNS notifications each
                *             time a data object is submitted by a worker.</p>
                *          <p>If you provide an <code>SnsTopicArn</code> in <code>OutputConfig</code>, when workers
                *             complete labeling tasks, Ground Truth will send labeling task output data to the SNS output
                *             topic you specify here. </p>
                *         <p>To learn more, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-output-data">Receive Output Data from a Streaming Labeling
                *                 Job</a>. </p>
                */
            SnsTopicArn?: string;
    }
    export namespace LabelingJobOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobOutputConfig) => any;
    }
    /**
        * <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the
        *             job is automatically stopped. You can use these conditions to control the cost of data
        *             labeling.</p>
        *         <note>
        *             <p>Labeling jobs fail after 30 days with an appropriate client error message.</p>
        *         </note>
        */
    export interface LabelingJobStoppingConditions {
            /**
                * <p>The maximum number of objects that can be labeled by human workers.</p>
                */
            MaxHumanLabeledObjectCount?: number;
            /**
                * <p>The maximum number of input data objects that should be labeled.</p>
                */
            MaxPercentageOfInputDatasetLabeled?: number;
    }
    export namespace LabelingJobStoppingConditions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobStoppingConditions) => any;
    }
    export interface CreateLabelingJobRequest {
            /**
                * <p>The name of the labeling job. This name is used to identify the job in a list of
                *             labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region.
                *                 <code>LabelingJobName</code> is not case sensitive. For example, Example-job and
                *             example-job are considered the same labeling job name by Ground Truth.</p>
                */
            LabelingJobName: string | undefined;
            /**
                * <p>The attribute name to use for the label in the output manifest file. This is the key
                *             for the key/value pair formed with the label that a worker assigns to the object. The
                *                 <code>LabelAttributeName</code> must meet the following requirements.</p>
                *         <ul>
                *             <li>
                *                 <p>The name can't end with "-metadata". </p>
                *             </li>
                *             <li>
                *                 <p>If you are using one of the following <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a>,
                *                     the attribute name <i>must</i> end with "-ref". If the task type
                *                     you are using is not listed below, the attribute name <i>must
                *                         not</i> end with "-ref".</p>
                *                 <ul>
                *                   <li>
                *                         <p>Image semantic segmentation (<code>SemanticSegmentation)</code>, and
                *                             adjustment (<code>AdjustmentSemanticSegmentation</code>) and
                *                             verification (<code>VerificationSemanticSegmentation</code>) labeling
                *                             jobs for this task type.</p>
                *                     </li>
                *                   <li>
                *                         <p>Video frame object detection (<code>VideoObjectDetection</code>), and
                *                             adjustment and verification
                *                             (<code>AdjustmentVideoObjectDetection</code>) labeling jobs for this
                *                             task type.</p>
                *                     </li>
                *                   <li>
                *                         <p>Video frame object tracking (<code>VideoObjectTracking</code>), and
                *                             adjustment and verification (<code>AdjustmentVideoObjectTracking</code>)
                *                             labeling jobs for this task type.</p>
                *                     </li>
                *                   <li>
                *                         <p>3D point cloud semantic segmentation
                *                                 (<code>3DPointCloudSemanticSegmentation</code>), and adjustment and
                *                             verification (<code>Adjustment3DPointCloudSemanticSegmentation</code>)
                *                             labeling jobs for this task type. </p>
                *                     </li>
                *                   <li>
                *                         <p>3D point cloud object tracking
                *                                 (<code>3DPointCloudObjectTracking</code>), and adjustment and
                *                             verification (<code>Adjustment3DPointCloudObjectTracking</code>)
                *                             labeling jobs for this task type. </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <p></p>
                *         <important>
                *             <p>If you are creating an adjustment or verification labeling job, you must use a
                *                     <i>different</i>
                *                 <code>LabelAttributeName</code> than the one used in the original labeling job. The
                *                 original labeling job is the Ground Truth labeling job that produced the labels that you
                *                 want verified or adjusted. To learn more about adjustment and verification labeling
                *                 jobs, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify and Adjust
                *                     Labels</a>.</p>
                *         </important>
                */
            LabelAttributeName: string | undefined;
            /**
                * <p>Input data for the labeling job, such as the Amazon S3 location of the data objects and the
                *             location of the manifest file that describes the data objects.</p>
                *         <p>You must specify at least one of the following: <code>S3DataSource</code> or
                *                 <code>SnsDataSource</code>. </p>
                *         <ul>
                *             <li>
                *                 <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming
                *                     labeling job. If you do not specify and SNS input topic ARN, Ground Truth will
                *                     create a one-time labeling job that stops after all data objects in the input
                *                     manifest file have been labeled.</p>
                *             </li>
                *             <li>
                *                 <p>Use <code>S3DataSource</code> to specify an input manifest file for both
                *                     streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is
                *                     optional if you use <code>SnsDataSource</code> to create a streaming labeling
                *                     job.</p>
                *             </li>
                *          </ul>
                *         <p>If you use the Amazon Mechanical Turk workforce, your input data should not include
                *             confidential information, personal information or protected health information. Use
                *                 <code>ContentClassifiers</code> to specify that your data is free of personally
                *             identifiable information and adult content.</p>
                */
            InputConfig: LabelingJobInputConfig | undefined;
            /**
                * <p>The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt
                *             the output data, if any.</p>
                */
            OutputConfig: LabelingJobOutputConfig | undefined;
            /**
                * <p>The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf
                *             during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker
                *             can successfully complete data labeling.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The S3 URI of the file, referred to as a <i>label category configuration
                *                 file</i>, that defines the categories used to label the data objects.</p>
                *         <p>For 3D point cloud and video frame task types, you can add label category attributes
                *             and frame attributes to your label category configuration file. To learn how, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html">Create a
                *                 Labeling Category Configuration File for 3D Point Cloud Labeling Jobs</a>. </p>
                *         <p>For named entity recognition jobs, in addition to <code>"labels"</code>, you must
                *             provide worker instructions in the label category configuration file using the
                *                 <code>"instructions"</code> parameter: <code>"instructions":
                *                 {"shortInstruction":"<h1>Add header</h1><p>Add Instructions</p>",
                *                 "fullInstruction":"<p>Add additional instructions.</p>"}</code>. For details
                *             and an example, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api">Create a
                *                 Named Entity Recognition Labeling Job (API) </a>.</p>
                *         <p>For all other <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html">custom
                *                 tasks</a>, your label category configuration file must be a JSON file in the
                *             following format. Identify the labels you want to use by replacing <code>label_1</code>,
                *                 <code>label_2</code>,<code>...</code>,<code>label_n</code> with your label
                *             categories.</p>
                *         <p>
                *             <code>{ </code>
                *          </p>
                *         <p>
                *             <code>"document-version": "2018-11-28",</code>
                *          </p>
                *         <p>
                *             <code>"labels": [{"label": "label_1"},{"label": "label_2"},...{"label":
                *                 "label_n"}]</code>
                *          </p>
                *         <p>
                *             <code>}</code>
                *          </p>
                *         <p>Note the following about the label category configuration file:</p>
                *         <ul>
                *             <li>
                *                 <p>For image classification and text classification (single and multi-label) you
                *                     must specify at least two label categories. For all other task types, the
                *                     minimum number of label categories required is one. </p>
                *             </li>
                *             <li>
                *                 <p>Each label category must be unique, you cannot specify duplicate label
                *                     categories.</p>
                *             </li>
                *             <li>
                *                 <p>If you create a 3D point cloud or video frame adjustment or verification
                *                     labeling job, you must include <code>auditLabelAttributeName</code> in the label
                *                     category configuration. Use this parameter to enter the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName">
                *                      <code>LabelAttributeName</code>
                *                   </a> of the labeling job you want to
                *                     adjust or verify annotations of.</p>
                *             </li>
                *          </ul>
                */
            LabelCategoryConfigS3Uri?: string;
            /**
                * <p>A set of conditions for stopping the labeling job. If any of the conditions are met,
                *             the job is automatically stopped. You can use these conditions to control the cost of
                *             data labeling.</p>
                */
            StoppingConditions?: LabelingJobStoppingConditions;
            /**
                * <p>Configures the information required to perform automated data labeling.</p>
                */
            LabelingJobAlgorithmsConfig?: LabelingJobAlgorithmsConfig;
            /**
                * <p>Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).</p>
                */
            HumanTaskConfig: HumanTaskConfig | undefined;
            /**
                * <p>An array of key/value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *                 User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateLabelingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLabelingJobRequest) => any;
    }
    export interface CreateLabelingJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the labeling job. You use this ARN to identify the
                *             labeling job.</p>
                */
            LabelingJobArn: string | undefined;
    }
    export namespace CreateLabelingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLabelingJobResponse) => any;
    }
    export enum InferenceExecutionMode {
            DIRECT = "Direct",
            SERIAL = "Serial"
    }
    /**
        * <p>Specifies details about how containers in a multi-container endpoint are run.</p>
        */
    export interface InferenceExecutionConfig {
            /**
                * <p>How containers in a multi-container are run. The following values are valid.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SERIAL</code> - Containers run as a serial pipeline.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DIRECT</code> - Only the individual container that you specify is
                *                     run.</p>
                *             </li>
                *          </ul>
                */
            Mode: InferenceExecutionMode | string | undefined;
    }
    export namespace InferenceExecutionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferenceExecutionConfig) => any;
    }
    export interface CreateModelInput {
            /**
                * <p>The name of the new model.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The location of the primary docker image containing inference code, associated
                *             artifacts, and custom environment map that the inference code uses when the model is
                *             deployed for predictions. </p>
                */
            PrimaryContainer?: ContainerDefinition;
            /**
                * <p>Specifies the containers in the inference pipeline.</p>
                */
            Containers?: ContainerDefinition[];
            /**
                * <p>Specifies details of how containers in a multi-container endpoint are called.</p>
                */
            InferenceExecutionConfig?: InferenceExecutionConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model
                *             artifacts and docker image for deployment on ML compute instances or for batch transform
                *             jobs. Deploying on ML compute instances is part of model hosting. For more information,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
                *                 Roles</a>. </p>
                *         <note>
                *             <p>To be able to pass this role to SageMaker, the caller of this API must have the
                *                     <code>iam:PassRole</code> permission.</p>
                *         </note>
                */
            ExecutionRoleArn: string | undefined;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A <a>VpcConfig</a> object that specifies the VPC that you want your model
                *             to connect to. Control access to and from your model container by configuring the VPC.
                *                 <code>VpcConfig</code> is used in hosting services and in batch transform. For more
                *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html">Protect Data in Batch
                *                 Transform Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Isolates the model container. No inbound or outbound network calls can be made to or
                *             from the model container.</p>
                */
            EnableNetworkIsolation?: boolean;
    }
    export namespace CreateModelInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelInput) => any;
    }
    export interface CreateModelOutput {
            /**
                * <p>The ARN of the model created in SageMaker.</p>
                */
            ModelArn: string | undefined;
    }
    export namespace CreateModelOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelOutput) => any;
    }
    /**
        * <p>Docker container image configuration object for the model bias job.</p>
        */
    export interface ModelBiasAppSpecification {
            /**
                * <p>The container image to be run by the model bias job.</p>
                */
            ImageUri: string | undefined;
            /**
                * <p>JSON formatted S3 file that defines bias parameters. For more information on this JSON
                *          configuration file, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-bias-parameters.html">Configure bias
                *          parameters</a>.</p>
                */
            ConfigUri: string | undefined;
            /**
                * <p>Sets the environment variables in the Docker container.</p>
                */
            Environment?: Record<string, string>;
    }
    export namespace ModelBiasAppSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelBiasAppSpecification) => any;
    }
    /**
        * <p>The configuration for a baseline model bias job.</p>
        */
    export interface ModelBiasBaselineConfig {
            /**
                * <p>The name of the baseline model bias job.</p>
                */
            BaseliningJobName?: string;
            /**
                * <p>The constraints resource for a monitoring job.</p>
                */
            ConstraintsResource?: MonitoringConstraintsResource;
    }
    export namespace ModelBiasBaselineConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelBiasBaselineConfig) => any;
    }
    /**
        * <p>The ground truth labels for the dataset used for the monitoring job.</p>
        */
    export interface MonitoringGroundTruthS3Input {
            /**
                * <p>The address of the Amazon S3 location of the ground truth labels.</p>
                */
            S3Uri?: string;
    }
    export namespace MonitoringGroundTruthS3Input {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringGroundTruthS3Input) => any;
    }
    /**
        * <p>Inputs for the model bias job.</p>
        */
    export interface ModelBiasJobInput {
            /**
                * <p>Input object for the endpoint</p>
                */
            EndpointInput: EndpointInput | undefined;
            /**
                * <p>Location of ground truth labels to use in model bias job.</p>
                */
            GroundTruthS3Input: MonitoringGroundTruthS3Input | undefined;
    }
    export namespace ModelBiasJobInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelBiasJobInput) => any;
    }
    export interface CreateModelBiasJobDefinitionRequest {
            /**
                * <p>The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the
                *          Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>The baseline configuration for a model bias job.</p>
                */
            ModelBiasBaselineConfig?: ModelBiasBaselineConfig;
            /**
                * <p>Configures the model bias job to run a specified Docker container image.</p>
                */
            ModelBiasAppSpecification: ModelBiasAppSpecification | undefined;
            /**
                * <p>Inputs for the model bias job.</p>
                */
            ModelBiasJobInput: ModelBiasJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            ModelBiasJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>Networking options for a model bias job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
                *          perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
            /**
                * <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *             User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateModelBiasJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelBiasJobDefinitionRequest) => any;
    }
    export interface CreateModelBiasJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the model bias job.</p>
                */
            JobDefinitionArn: string | undefined;
    }
    export namespace CreateModelBiasJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelBiasJobDefinitionResponse) => any;
    }
    /**
        * <p>Docker container image configuration object for the model explainability job.</p>
        */
    export interface ModelExplainabilityAppSpecification {
            /**
                * <p>The container image to be run by the model explainability job.</p>
                */
            ImageUri: string | undefined;
            /**
                * <p>JSON formatted S3 file that defines explainability parameters. For more information on
                *          this JSON configuration file, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-model-explainability-parameters.html">Configure model
                *             explainability parameters</a>.</p>
                */
            ConfigUri: string | undefined;
            /**
                * <p>Sets the environment variables in the Docker container.</p>
                */
            Environment?: Record<string, string>;
    }
    export namespace ModelExplainabilityAppSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelExplainabilityAppSpecification) => any;
    }
    /**
        * <p>The configuration for a baseline model explainability job.</p>
        */
    export interface ModelExplainabilityBaselineConfig {
            /**
                * <p>The name of the baseline model explainability job.</p>
                */
            BaseliningJobName?: string;
            /**
                * <p>The constraints resource for a monitoring job.</p>
                */
            ConstraintsResource?: MonitoringConstraintsResource;
    }
    export namespace ModelExplainabilityBaselineConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelExplainabilityBaselineConfig) => any;
    }
    /**
        * <p>Inputs for the model explainability job.</p>
        */
    export interface ModelExplainabilityJobInput {
            /**
                * <p>Input object for the endpoint</p>
                */
            EndpointInput: EndpointInput | undefined;
    }
    export namespace ModelExplainabilityJobInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelExplainabilityJobInput) => any;
    }
    export interface CreateModelExplainabilityJobDefinitionRequest {
            /**
                * <p> The name of the model explainability job definition. The name must be unique within an
                *          Amazon Web Services Region in the Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>The baseline configuration for a model explainability job.</p>
                */
            ModelExplainabilityBaselineConfig?: ModelExplainabilityBaselineConfig;
            /**
                * <p>Configures the model explainability job to run a specified Docker container
                *          image.</p>
                */
            ModelExplainabilityAppSpecification: ModelExplainabilityAppSpecification | undefined;
            /**
                * <p>Inputs for the model explainability job.</p>
                */
            ModelExplainabilityJobInput: ModelExplainabilityJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            ModelExplainabilityJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>Networking options for a model explainability job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
                *          perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
            /**
                * <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *             User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateModelExplainabilityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelExplainabilityJobDefinitionRequest) => any;
    }
    export interface CreateModelExplainabilityJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the model explainability job.</p>
                */
            JobDefinitionArn: string | undefined;
    }
    export namespace CreateModelExplainabilityJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelExplainabilityJobDefinitionResponse) => any;
    }
    /**
        * <p>Contains details regarding the file source.</p>
        */
    export interface FileSource {
            /**
                * <p>The type of content stored in the file source.</p>
                */
            ContentType?: string;
            /**
                * <p>The digest of the file source.</p>
                */
            ContentDigest?: string;
            /**
                * <p>The Amazon S3 URI for the file source.</p>
                */
            S3Uri: string | undefined;
    }
    export namespace FileSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileSource) => any;
    }
    /**
        * <p>Represents the drift check bias baselines that can be used when the model monitor is set using the
        *             model package.</p>
        */
    export interface DriftCheckBias {
            /**
                * <p>The bias config file for a model.</p>
                */
            ConfigFile?: FileSource;
            /**
                * <p>The pre-training constraints.</p>
                */
            PreTrainingConstraints?: MetricsSource;
            /**
                * <p>The post-training constraints.</p>
                */
            PostTrainingConstraints?: MetricsSource;
    }
    export namespace DriftCheckBias {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DriftCheckBias) => any;
    }
    /**
        * <p>Represents the drift check explainability baselines that can be used when the model monitor is set
        *             using the model package. </p>
        */
    export interface DriftCheckExplainability {
            /**
                * <p>The drift check explainability constraints.</p>
                */
            Constraints?: MetricsSource;
            /**
                * <p>The explainability config file for the model.</p>
                */
            ConfigFile?: FileSource;
    }
    export namespace DriftCheckExplainability {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DriftCheckExplainability) => any;
    }
    /**
        * <p>Represents the drift check data quality baselines that can be used when the model monitor is set using
        *             the model package. </p>
        */
    export interface DriftCheckModelDataQuality {
            /**
                * <p>The drift check model data quality statistics.</p>
                */
            Statistics?: MetricsSource;
            /**
                * <p>The drift check model data quality constraints.</p>
                */
            Constraints?: MetricsSource;
    }
    export namespace DriftCheckModelDataQuality {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DriftCheckModelDataQuality) => any;
    }
    /**
        * <p>Represents the drift check model quality baselines that can be used when the model monitor is set using
        *             the model package. </p>
        */
    export interface DriftCheckModelQuality {
            /**
                * <p>The drift check model quality statistics.</p>
                */
            Statistics?: MetricsSource;
            /**
                * <p>The drift check model quality constraints.</p>
                */
            Constraints?: MetricsSource;
    }
    export namespace DriftCheckModelQuality {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DriftCheckModelQuality) => any;
    }
    /**
        * <p>Represents the drift check baselines that can be used when the model monitor is set using the model
        *             package. </p>
        */
    export interface DriftCheckBaselines {
            /**
                * <p>Represents the drift check bias baselines that can be used when the model monitor is set using the model
                *             package. </p>
                */
            Bias?: DriftCheckBias;
            /**
                * <p>Represents the drift check explainability baselines that can be used when the model monitor is set using
                *             the model package. </p>
                */
            Explainability?: DriftCheckExplainability;
            /**
                * <p>Represents the drift check model quality baselines that can be used when the model monitor is set using
                *             the model package.</p>
                */
            ModelQuality?: DriftCheckModelQuality;
            /**
                * <p>Represents the drift check model data quality baselines that can be used when the model monitor is set
                *             using the model package.</p>
                */
            ModelDataQuality?: DriftCheckModelDataQuality;
    }
    export namespace DriftCheckBaselines {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DriftCheckBaselines) => any;
    }
    /**
        * <p>Contains explainability metrics for a model.</p>
        */
    export interface Explainability {
            /**
                * <p>The explainability report for a model.</p>
                */
            Report?: MetricsSource;
    }
    export namespace Explainability {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Explainability) => any;
    }
    /**
        * <p>Data quality constraints and statistics for a model.</p>
        */
    export interface ModelDataQuality {
            /**
                * <p>Data quality statistics for a model.</p>
                */
            Statistics?: MetricsSource;
            /**
                * <p>Data quality constraints for a model.</p>
                */
            Constraints?: MetricsSource;
    }
    export namespace ModelDataQuality {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelDataQuality) => any;
    }
    /**
        * <p>Model quality statistics and constraints.</p>
        */
    export interface ModelQuality {
            /**
                * <p>Model quality statistics.</p>
                */
            Statistics?: MetricsSource;
            /**
                * <p>Model quality constraints.</p>
                */
            Constraints?: MetricsSource;
    }
    export namespace ModelQuality {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelQuality) => any;
    }
    /**
        * <p>Contains metrics captured from a model.</p>
        */
    export interface ModelMetrics {
            /**
                * <p>Metrics that measure the quality of a model.</p>
                */
            ModelQuality?: ModelQuality;
            /**
                * <p>Metrics that measure the quality of the input data for a model.</p>
                */
            ModelDataQuality?: ModelDataQuality;
            /**
                * <p>Metrics that measure bais in a model.</p>
                */
            Bias?: Bias;
            /**
                * <p>Metrics that help explain a model.</p>
                */
            Explainability?: Explainability;
    }
    export namespace ModelMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelMetrics) => any;
    }
    /**
        * <p>Specifies an algorithm that was used to create the model package. The algorithm must
        *             be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you
        *             are subscribed to.</p>
        */
    export interface SourceAlgorithm {
            /**
                * <p>The Amazon S3 path where the model artifacts, which result from model training, are stored.
                *             This path must point to a single <code>gzip</code> compressed tar archive
                *                 (<code>.tar.gz</code> suffix).</p>
                *         <note>
                *             <p>The model artifacts must be in an S3 bucket that is in the same region as the
                *                 algorithm.</p>
                *         </note>
                */
            ModelDataUrl?: string;
            /**
                * <p>The name of an algorithm that was used to create the model package. The algorithm must
                *             be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you
                *             are subscribed to.</p>
                */
            AlgorithmName: string | undefined;
    }
    export namespace SourceAlgorithm {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceAlgorithm) => any;
    }
    /**
        * <p>A list of algorithms that were used to create a model package.</p>
        */
    export interface SourceAlgorithmSpecification {
            /**
                * <p>A list of the algorithms that were used to create a model package.</p>
                */
            SourceAlgorithms: SourceAlgorithm[] | undefined;
    }
    export namespace SourceAlgorithmSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceAlgorithmSpecification) => any;
    }
    /**
        * <p>Contains data, such as the inputs and targeted instance types that are used in the
        *             process of validating the model package.</p>
        *         <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services
        *             Marketplace.</p>
        */
    export interface ModelPackageValidationProfile {
            /**
                * <p>The name of the profile for the model package.</p>
                */
            ProfileName: string | undefined;
            /**
                * <p>The <code>TransformJobDefinition</code> object that describes the transform job used
                *             for the validation of the model package.</p>
                */
            TransformJobDefinition: TransformJobDefinition | undefined;
    }
    export namespace ModelPackageValidationProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageValidationProfile) => any;
    }
    /**
        * <p>Specifies batch transform jobs that SageMaker runs to validate your model package.</p>
        */
    export interface ModelPackageValidationSpecification {
            /**
                * <p>The IAM roles to be used for the validation of the model package.</p>
                */
            ValidationRole: string | undefined;
            /**
                * <p>An array of <code>ModelPackageValidationProfile</code> objects, each of which
                *             specifies a batch transform job that SageMaker runs to validate your model package.</p>
                */
            ValidationProfiles: ModelPackageValidationProfile[] | undefined;
    }
    export namespace ModelPackageValidationSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageValidationSpecification) => any;
    }
    export interface CreateModelPackageInput {
            /**
                * <p>The name of the model package. The name must have 1 to 63 characters. Valid characters
                *             are a-z, A-Z, 0-9, and - (hyphen).</p>
                *         <p>This parameter is required for unversioned models. It is not applicable to versioned
                *             models.</p>
                */
            ModelPackageName?: string;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
                *         <p>This parameter is required for versioned models, and does not apply to unversioned
                *             models.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>A description of the model package.</p>
                */
            ModelPackageDescription?: string;
            /**
                * <p>Specifies details about inference jobs that can be run with models based on this model
                *             package, including the following:</p>
                *         <ul>
                *             <li>
                *                 <p>The Amazon ECR paths of containers that contain the inference code and model
                *                     artifacts.</p>
                *             </li>
                *             <li>
                *                 <p>The instance types that the model package supports for transform jobs and
                *                     real-time endpoints used for inference.</p>
                *             </li>
                *             <li>
                *                 <p>The input and output content formats that the model package supports for
                *                     inference.</p>
                *             </li>
                *          </ul>
                */
            InferenceSpecification?: InferenceSpecification;
            /**
                * <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the
                *             model package.</p>
                */
            ValidationSpecification?: ModelPackageValidationSpecification;
            /**
                * <p>Details about the algorithm that was used to create the model package.</p>
                */
            SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
            /**
                * <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
                *         <p>This parameter is optional for unversioned models, and does not apply to versioned
                *             models.</p>
                */
            CertifyForMarketplace?: boolean;
            /**
                * <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *             resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Whether the model is approved for deployment.</p>
                *         <p>This parameter is optional for versioned models, and does not apply to unversioned
                *             models.</p>
                *         <p>For versioned models, the value of this parameter must be set to <code>Approved</code>
                *         to deploy the model.</p>
                */
            ModelApprovalStatus?: ModelApprovalStatus | string;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>A structure that contains model metrics reports.</p>
                */
            ModelMetrics?: ModelMetrics;
            /**
                * <p>A unique token that guarantees that the call to this API is idempotent.</p>
                */
            ClientToken?: string;
            /**
                * <p>The metadata properties associated with the model package versions.</p>
                */
            CustomerMetadataProperties?: Record<string, string>;
            /**
                * <p>Represents the drift check baselines that can be used when the model monitor is set using the model package.
                *             For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>.
                *         </p>
                */
            DriftCheckBaselines?: DriftCheckBaselines;
            /**
                * <p>The machine learning domain of your model package and its components. Common
                *     machine learning domains include computer vision and natural language processing.</p>
                */
            Domain?: string;
            /**
                * <p>The machine learning task your model package accomplishes. Common machine
                *     learning tasks include object detection and image classification. The following
                *     tasks are supported by Inference Recommender:
                *    <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> |
                *    <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
                *          <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
                */
            Task?: string;
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point
                *     to a single gzip compressed tar archive (.tar.gz suffix).</p>
                */
            SamplePayloadUrl?: string;
            /**
                * <p>An array of additional Inference Specification objects. Each additional
                *     Inference Specification specifies artifacts based on this model package that can
                *     be used on inference endpoints. Generally used with SageMaker Neo to store the
                *     compiled artifacts. </p>
                */
            AdditionalInferenceSpecifications?: AdditionalInferenceSpecificationDefinition[];
    }
    export namespace CreateModelPackageInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelPackageInput) => any;
    }
    export interface CreateModelPackageOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the new model package.</p>
                */
            ModelPackageArn: string | undefined;
    }
    export namespace CreateModelPackageOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelPackageOutput) => any;
    }
    export interface CreateModelPackageGroupInput {
            /**
                * <p>The name of the model group.</p>
                */
            ModelPackageGroupName: string | undefined;
            /**
                * <p>A description for the model group.</p>
                */
            ModelPackageGroupDescription?: string;
            /**
                * <p>A list of key value pairs associated with the model group. For more information, see
                *             <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateModelPackageGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelPackageGroupInput) => any;
    }
    export interface CreateModelPackageGroupOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the model group.</p>
                */
            ModelPackageGroupArn: string | undefined;
    }
    export namespace CreateModelPackageGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelPackageGroupOutput) => any;
    }
    export enum MonitoringProblemType {
            BINARY_CLASSIFICATION = "BinaryClassification",
            MULTICLASS_CLASSIFICATION = "MulticlassClassification",
            REGRESSION = "Regression"
    }
    /**
        * <p>Container image configuration object for the monitoring job.</p>
        */
    export interface ModelQualityAppSpecification {
            /**
                * <p>The address of the container image that the monitoring job runs.</p>
                */
            ImageUri: string | undefined;
            /**
                * <p>Specifies the entrypoint for a container that the monitoring job runs.</p>
                */
            ContainerEntrypoint?: string[];
            /**
                * <p>An array of arguments for the container used to run the monitoring job.</p>
                */
            ContainerArguments?: string[];
            /**
                * <p>An Amazon S3 URI to a script that is called per row prior to running analysis. It can
                *          base64 decode the payload and convert it into a flatted json so that the built-in container
                *          can use the converted data. Applicable only for the built-in (first party)
                *          containers.</p>
                */
            RecordPreprocessorSourceUri?: string;
            /**
                * <p>An Amazon S3 URI to a script that is called after analysis has been performed.
                *          Applicable only for the built-in (first party) containers.</p>
                */
            PostAnalyticsProcessorSourceUri?: string;
            /**
                * <p>The machine learning problem type of the model that the monitoring job monitors.</p>
                */
            ProblemType?: MonitoringProblemType | string;
            /**
                * <p>Sets the environment variables in the container that the monitoring job runs.</p>
                */
            Environment?: Record<string, string>;
    }
    export namespace ModelQualityAppSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelQualityAppSpecification) => any;
    }
    /**
        * <p>Configuration for monitoring constraints and monitoring statistics. These baseline
        *          resources are compared against the results of the current job from the series of jobs
        *          scheduled to collect data periodically.</p>
        */
    export interface ModelQualityBaselineConfig {
            /**
                * <p>The name of the job that performs baselining for the monitoring job.</p>
                */
            BaseliningJobName?: string;
            /**
                * <p>The constraints resource for a monitoring job.</p>
                */
            ConstraintsResource?: MonitoringConstraintsResource;
    }
    export namespace ModelQualityBaselineConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelQualityBaselineConfig) => any;
    }
    /**
        * <p>The input for the model quality monitoring job. Currently endponts are supported for
        *          input for model quality monitoring jobs.</p>
        */
    export interface ModelQualityJobInput {
            /**
                * <p>Input object for the endpoint</p>
                */
            EndpointInput: EndpointInput | undefined;
            /**
                * <p>The ground truth label provided for the model.</p>
                */
            GroundTruthS3Input: MonitoringGroundTruthS3Input | undefined;
    }
    export namespace ModelQualityJobInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelQualityJobInput) => any;
    }
    export interface CreateModelQualityJobDefinitionRequest {
            /**
                * <p>The name of the monitoring job definition.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>Specifies the constraints and baselines for the monitoring job.</p>
                */
            ModelQualityBaselineConfig?: ModelQualityBaselineConfig;
            /**
                * <p>The container that runs the monitoring job.</p>
                */
            ModelQualityAppSpecification: ModelQualityAppSpecification | undefined;
            /**
                * <p>A list of the inputs that are monitored. Currently endpoints are supported.</p>
                */
            ModelQualityJobInput: ModelQualityJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            ModelQualityJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>Specifies the network configuration for the monitoring job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
                *          perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
            /**
                * <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *             User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateModelQualityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelQualityJobDefinitionRequest) => any;
    }
    export interface CreateModelQualityJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the model quality monitoring job.</p>
                */
            JobDefinitionArn: string | undefined;
    }
    export namespace CreateModelQualityJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelQualityJobDefinitionResponse) => any;
    }
    /**
        * <p>Configuration for monitoring constraints and monitoring statistics. These baseline
        *          resources are compared against the results of the current job from the series of jobs
        *          scheduled to collect data periodically.</p>
        */
    export interface MonitoringBaselineConfig {
            /**
                * <p>The name of the job that performs baselining for the monitoring job.</p>
                */
            BaseliningJobName?: string;
            /**
                * <p>The baseline constraint file in Amazon S3 that the current monitoring job should
                *          validated against.</p>
                */
            ConstraintsResource?: MonitoringConstraintsResource;
            /**
                * <p>The baseline statistics file in Amazon S3 that the current monitoring job should be
                *          validated against.</p>
                */
            StatisticsResource?: MonitoringStatisticsResource;
    }
    export namespace MonitoringBaselineConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringBaselineConfig) => any;
    }
    /**
        * <p>Container image configuration object for the monitoring job.</p>
        */
    export interface MonitoringAppSpecification {
            /**
                * <p>The container image to be run by the monitoring job.</p>
                */
            ImageUri: string | undefined;
            /**
                * <p>Specifies the entrypoint for a container used to run the monitoring job.</p>
                */
            ContainerEntrypoint?: string[];
            /**
                * <p>An array of arguments for the container used to run the monitoring job.</p>
                */
            ContainerArguments?: string[];
            /**
                * <p>An Amazon S3 URI to a script that is called per row prior to running analysis. It can
                *          base64 decode the payload and convert it into a flatted json so that the built-in container
                *          can use the converted data. Applicable only for the built-in (first party)
                *          containers.</p>
                */
            RecordPreprocessorSourceUri?: string;
            /**
                * <p>An Amazon S3 URI to a script that is called after analysis has been performed.
                *          Applicable only for the built-in (first party) containers.</p>
                */
            PostAnalyticsProcessorSourceUri?: string;
    }
    export namespace MonitoringAppSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringAppSpecification) => any;
    }
    /**
        * <p>The inputs for a monitoring job.</p>
        */
    export interface MonitoringInput {
            /**
                * <p>The endpoint for a monitoring job.</p>
                */
            EndpointInput: EndpointInput | undefined;
    }
    export namespace MonitoringInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringInput) => any;
    }
    /**
        * <p>Networking options for a job, such as network traffic encryption between containers,
        *          whether to allow inbound and outbound network calls to and from containers, and the VPC
        *          subnets and security groups to use for VPC-enabled jobs.</p>
        */
    export interface NetworkConfig {
            /**
                * <p>Whether to encrypt all communications between distributed processing jobs. Choose
                *             <code>True</code> to encrypt communications. Encryption provides greater security for distributed
                *             processing jobs, but the processing might take longer.</p>
                */
            EnableInterContainerTrafficEncryption?: boolean;
            /**
                * <p>Whether to allow inbound and outbound network calls to and from the containers used for
                *          the processing job.</p>
                */
            EnableNetworkIsolation?: boolean;
            /**
                * <p>Specifies a VPC that your training jobs and hosted models have access to. Control
                *             access to and from your training and model containers by configuring the VPC. For more
                *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs
                *                 by Using an Amazon Virtual Private Cloud</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace NetworkConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkConfig) => any;
    }
    /**
        * <p>Defines the monitoring job.</p>
        */
    export interface MonitoringJobDefinition {
            /**
                * <p>Baseline configuration used to validate that the data conforms to the specified
                *          constraints and statistics</p>
                */
            BaselineConfig?: MonitoringBaselineConfig;
            /**
                * <p>The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker
                *          Endpoint.</p>
                */
            MonitoringInputs: MonitoringInput[] | undefined;
            /**
                * <p>The array of outputs from the monitoring job to be uploaded to Amazon Simple Storage
                *          Service (Amazon S3).</p>
                */
            MonitoringOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
                *          monitoring job. In distributed processing, you specify more than one instance.</p>
                */
            MonitoringResources: MonitoringResources | undefined;
            /**
                * <p>Configures the monitoring job to run a specified Docker container image.</p>
                */
            MonitoringAppSpecification: MonitoringAppSpecification | undefined;
            /**
                * <p>Specifies a time limit for how long the monitoring job is allowed to run.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
            /**
                * <p>Sets the environment variables in the Docker container.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>Specifies networking options for an monitoring job.</p>
                */
            NetworkConfig?: NetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
                *          your behalf.</p>
                */
            RoleArn: string | undefined;
    }
    export namespace MonitoringJobDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringJobDefinition) => any;
    }
    export enum MonitoringType {
            DATA_QUALITY = "DataQuality",
            MODEL_BIAS = "ModelBias",
            MODEL_EXPLAINABILITY = "ModelExplainability",
            MODEL_QUALITY = "ModelQuality"
    }
    /**
        * <p>Configuration details about the monitoring schedule.</p>
        */
    export interface ScheduleConfig {
            /**
                * <p>A cron expression that describes details about the monitoring schedule.</p>
                *
                *          <p>Currently the only supported cron expressions are:</p>
                *          <ul>
                *             <li>
                *                <p>If you want to set the job to start every hour, please use the following:</p>
                *                <p>
                *                   <code>Hourly: cron(0 * ? * * *)</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>If you want to start the job daily:</p>
                *                <p>
                *                   <code>cron(0 [00-23] ? * * *)</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>For example, the following are valid cron expressions:</p>
                *          <ul>
                *             <li>
                *                <p>Daily at noon UTC: <code>cron(0 12 ? * * *)</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Daily at midnight UTC: <code>cron(0 0 ? * * *)</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>To support running every 6, 12 hours, the following are also supported:</p>
                *          <p>
                *             <code>cron(0 [00-23]/[01-24] ? * * *)</code>
                *          </p>
                *          <p>For example, the following are valid cron expressions:</p>
                *          <ul>
                *             <li>
                *                <p>Every 12 hours, starting at 5pm UTC: <code>cron(0 17/12 ? * * *)</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Every two hours starting at midnight: <code>cron(0 0/2 ? * * *)</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>Even though the cron expression is set to start at 5PM UTC, note that there
                *                   could be a delay of 0-20 minutes from the actual requested time to run the
                *                   execution. </p>
                *                </li>
                *                <li>
                *                   <p>We recommend that if you would like a daily schedule, you do not provide this
                *                   parameter. Amazon SageMaker will pick a time for running every day.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            ScheduleExpression: string | undefined;
    }
    export namespace ScheduleConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleConfig) => any;
    }
    /**
        * <p>Configures the monitoring schedule and defines the monitoring job.</p>
        */
    export interface MonitoringScheduleConfig {
            /**
                * <p>Configures the monitoring schedule.</p>
                */
            ScheduleConfig?: ScheduleConfig;
            /**
                * <p>Defines the monitoring job.</p>
                */
            MonitoringJobDefinition?: MonitoringJobDefinition;
            /**
                * <p>The name of the monitoring job definition to schedule.</p>
                */
            MonitoringJobDefinitionName?: string;
            /**
                * <p>The type of the monitoring job definition to schedule.</p>
                */
            MonitoringType?: MonitoringType | string;
    }
    export namespace MonitoringScheduleConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringScheduleConfig) => any;
    }
    export interface CreateMonitoringScheduleRequest {
            /**
                * <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within
                *          an Amazon Web Services account.</p>
                */
            MonitoringScheduleName: string | undefined;
            /**
                * <p>The configuration object that specifies the monitoring schedule and defines the
                *          monitoring job.</p>
                */
            MonitoringScheduleConfig: MonitoringScheduleConfig | undefined;
            /**
                * <p>(Optional) An array of key-value pairs. For more information, see <a href=" https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *             User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateMonitoringScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMonitoringScheduleRequest) => any;
    }
    export interface CreateMonitoringScheduleResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
                */
            MonitoringScheduleArn: string | undefined;
    }
    export namespace CreateMonitoringScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMonitoringScheduleResponse) => any;
    }
    export enum NotebookInstanceAcceleratorType {
            ML_EIA1_LARGE = "ml.eia1.large",
            ML_EIA1_MEDIUM = "ml.eia1.medium",
            ML_EIA1_XLARGE = "ml.eia1.xlarge",
            ML_EIA2_LARGE = "ml.eia2.large",
            ML_EIA2_MEDIUM = "ml.eia2.medium",
            ML_EIA2_XLARGE = "ml.eia2.xlarge"
    }
    export enum DirectInternetAccess {
            DISABLED = "Disabled",
            ENABLED = "Enabled"
    }
    /**
        * <p>Information on the IMDS configuration of the notebook instance</p>
        */
    export interface InstanceMetadataServiceConfiguration {
            /**
                * <p>Indicates the minimum IMDS version that the notebook instance supports. When passed as part of <code>CreateNotebookInstance</code>, if no value is selected, then it defaults to IMDSv1. This means that both IMDSv1 and IMDSv2 are supported. If passed as part of <code>UpdateNotebookInstance</code>, there is no default.</p>
                */
            MinimumInstanceMetadataServiceVersion: string | undefined;
    }
    export namespace InstanceMetadataServiceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceMetadataServiceConfiguration) => any;
    }
    export enum _InstanceType {
            ML_C4_2XLARGE = "ml.c4.2xlarge",
            ML_C4_4XLARGE = "ml.c4.4xlarge",
            ML_C4_8XLARGE = "ml.c4.8xlarge",
            ML_C4_XLARGE = "ml.c4.xlarge",
            ML_C5D_18XLARGE = "ml.c5d.18xlarge",
            ML_C5D_2XLARGE = "ml.c5d.2xlarge",
            ML_C5D_4XLARGE = "ml.c5d.4xlarge",
            ML_C5D_9XLARGE = "ml.c5d.9xlarge",
            ML_C5D_XLARGE = "ml.c5d.xlarge",
            ML_C5_18XLARGE = "ml.c5.18xlarge",
            ML_C5_2XLARGE = "ml.c5.2xlarge",
            ML_C5_4XLARGE = "ml.c5.4xlarge",
            ML_C5_9XLARGE = "ml.c5.9xlarge",
            ML_C5_XLARGE = "ml.c5.xlarge",
            ML_G4DN_12XLARGE = "ml.g4dn.12xlarge",
            ML_G4DN_16XLARGE = "ml.g4dn.16xlarge",
            ML_G4DN_2XLARGE = "ml.g4dn.2xlarge",
            ML_G4DN_4XLARGE = "ml.g4dn.4xlarge",
            ML_G4DN_8XLARGE = "ml.g4dn.8xlarge",
            ML_G4DN_XLARGE = "ml.g4dn.xlarge",
            ML_G5_12XLARGE = "ml.g5.12xlarge",
            ML_G5_16XLARGE = "ml.g5.16xlarge",
            ML_G5_24XLARGE = "ml.g5.24xlarge",
            ML_G5_2XLARGE = "ml.g5.2xlarge",
            ML_G5_48XLARGE = "ml.g5.48xlarge",
            ML_G5_4XLARGE = "ml.g5.4xlarge",
            ML_G5_8XLARGE = "ml.g5.8xlarge",
            ML_G5_XLARGE = "ml.g5.xlarge",
            ML_M4_10XLARGE = "ml.m4.10xlarge",
            ML_M4_16XLARGE = "ml.m4.16xlarge",
            ML_M4_2XLARGE = "ml.m4.2xlarge",
            ML_M4_4XLARGE = "ml.m4.4xlarge",
            ML_M4_XLARGE = "ml.m4.xlarge",
            ML_M5D_12XLARGE = "ml.m5d.12xlarge",
            ML_M5D_16XLARGE = "ml.m5d.16xlarge",
            ML_M5D_24XLARGE = "ml.m5d.24xlarge",
            ML_M5D_2XLARGE = "ml.m5d.2xlarge",
            ML_M5D_4XLARGE = "ml.m5d.4xlarge",
            ML_M5D_8XLARGE = "ml.m5d.8xlarge",
            ML_M5D_LARGE = "ml.m5d.large",
            ML_M5D_XLARGE = "ml.m5d.xlarge",
            ML_M5_12XLARGE = "ml.m5.12xlarge",
            ML_M5_24XLARGE = "ml.m5.24xlarge",
            ML_M5_2XLARGE = "ml.m5.2xlarge",
            ML_M5_4XLARGE = "ml.m5.4xlarge",
            ML_M5_XLARGE = "ml.m5.xlarge",
            ML_P2_16XLARGE = "ml.p2.16xlarge",
            ML_P2_8XLARGE = "ml.p2.8xlarge",
            ML_P2_XLARGE = "ml.p2.xlarge",
            ML_P3DN_24XLARGE = "ml.p3dn.24xlarge",
            ML_P3_16XLARGE = "ml.p3.16xlarge",
            ML_P3_2XLARGE = "ml.p3.2xlarge",
            ML_P3_8XLARGE = "ml.p3.8xlarge",
            ML_R5_12XLARGE = "ml.r5.12xlarge",
            ML_R5_16XLARGE = "ml.r5.16xlarge",
            ML_R5_24XLARGE = "ml.r5.24xlarge",
            ML_R5_2XLARGE = "ml.r5.2xlarge",
            ML_R5_4XLARGE = "ml.r5.4xlarge",
            ML_R5_8XLARGE = "ml.r5.8xlarge",
            ML_R5_LARGE = "ml.r5.large",
            ML_R5_XLARGE = "ml.r5.xlarge",
            ML_T2_2XLARGE = "ml.t2.2xlarge",
            ML_T2_LARGE = "ml.t2.large",
            ML_T2_MEDIUM = "ml.t2.medium",
            ML_T2_XLARGE = "ml.t2.xlarge",
            ML_T3_2XLARGE = "ml.t3.2xlarge",
            ML_T3_LARGE = "ml.t3.large",
            ML_T3_MEDIUM = "ml.t3.medium",
            ML_T3_XLARGE = "ml.t3.xlarge"
    }
    export enum RootAccess {
            DISABLED = "Disabled",
            ENABLED = "Enabled"
    }
    export interface CreateNotebookInstanceInput {
            /**
                * <p>The name of the new notebook instance.</p>
                */
            NotebookInstanceName: string | undefined;
            /**
                * <p>The type of ML compute instance to launch for the notebook instance.</p>
                */
            InstanceType: _InstanceType | string | undefined;
            /**
                * <p>The ID of the subnet in a VPC to which you would like to have a connectivity from
                *             your ML compute instance. </p>
                */
            SubnetId?: string;
            /**
                * <p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be
                *             for the same VPC as specified in the subnet. </p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p> When you send any requests to Amazon Web Services resources from the notebook instance, SageMaker
                *             assumes this role to perform tasks on your behalf. You must grant this role necessary
                *             permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service
                *             principal (sagemaker.amazonaws.com) permissions to assume this role. For more
                *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p>
                *         <note>
                *             <p>To be able to pass this role to SageMaker, the caller of this API must have the
                *                     <code>iam:PassRole</code> permission.</p>
                *         </note>
                */
            RoleArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on
                *             the storage volume attached to your notebook instance. The KMS key you provide must be
                *             enabled. For information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html">Enabling and Disabling
                *                 Keys</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The name of a lifecycle configuration to associate with the notebook instance. For
                *             information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional)
                *                 Customize a Notebook Instance</a>.</p>
                */
            LifecycleConfigName?: string;
            /**
                * <p>Sets whether SageMaker provides internet access to the notebook instance. If you set this
                *             to <code>Disabled</code> this notebook instance is able to access resources only in your
                *             VPC, and is not be able to connect to SageMaker training and endpoint services unless you
                *             configure a NAT Gateway in your VPC.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook Instances Are Internet-Enabled by Default</a>. You can set the value
                *             of this parameter to <code>Disabled</code> only if you set a value for the
                *                 <code>SubnetId</code> parameter.</p>
                */
            DirectInternetAccess?: DirectInternetAccess | string;
            /**
                * <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
                *             default value is 5 GB.</p>
                */
            VolumeSizeInGB?: number;
            /**
                * <p>A list of Elastic Inference (EI) instance types to associate with this notebook
                *             instance. Currently, only one instance type can be associated with a notebook instance.
                *             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon SageMaker</a>.</p>
                */
            AcceleratorTypes?: (NotebookInstanceAcceleratorType | string)[];
            /**
                * <p>A Git repository to associate with the notebook instance as its default code
                *             repository. This can be either the name of a Git repository stored as a resource in your
                *             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. When you open a notebook instance, it opens in the directory that
                *             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker
                *                 Notebook Instances</a>.</p>
                */
            DefaultCodeRepository?: string;
            /**
                * <p>An array of up to three Git repositories to associate with the notebook instance.
                *             These can be either the names of Git repositories stored as resources in your account,
                *             or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. These repositories are cloned at the same level as the default
                *             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
                *                 Repositories with SageMaker Notebook Instances</a>.</p>
                */
            AdditionalCodeRepositories?: string[];
            /**
                * <p>Whether root access is enabled or disabled for users of the notebook instance. The
                *             default value is <code>Enabled</code>.</p>
                *         <note>
                *             <p>Lifecycle configurations need root access to be able to set up a notebook
                *                 instance. Because of this, lifecycle configurations associated with a notebook
                *                 instance always run with root access even if you disable root access for
                *                 users.</p>
                *         </note>
                */
            RootAccess?: RootAccess | string;
            /**
                * <p>The platform identifier of the notebook instance runtime environment.</p>
                */
            PlatformIdentifier?: string;
            /**
                * <p>Information on the IMDS configuration of the notebook instance</p>
                */
            InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
    }
    export namespace CreateNotebookInstanceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotebookInstanceInput) => any;
    }
    export interface CreateNotebookInstanceOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the notebook instance. </p>
                */
            NotebookInstanceArn?: string;
    }
    export namespace CreateNotebookInstanceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotebookInstanceOutput) => any;
    }
    /**
        * <p>Contains the notebook instance lifecycle configuration script.</p>
        *         <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
        *         <p>The value of the <code>$PATH</code> environment variable that is available to both
        *             scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
        *         <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group
        *                 <code>/aws/sagemaker/NotebookInstances</code> in log stream
        *                 <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
        *         <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs
        *             for longer than 5 minutes, it fails and the notebook instance is not created or
        *             started.</p>
        *         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
        *                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
        */
    export interface NotebookInstanceLifecycleHook {
            /**
                * <p>A base64-encoded string that contains a shell script for a notebook instance lifecycle
                *             configuration.</p>
                */
            Content?: string;
    }
    export namespace NotebookInstanceLifecycleHook {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotebookInstanceLifecycleHook) => any;
    }
    export interface CreateNotebookInstanceLifecycleConfigInput {
            /**
                * <p>The name of the lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigName: string | undefined;
            /**
                * <p>A shell script that runs only once, when you create a notebook instance. The shell
                *             script must be a base64-encoded string.</p>
                */
            OnCreate?: NotebookInstanceLifecycleHook[];
            /**
                * <p>A shell script that runs every time you start a notebook instance, including when you
                *             create the notebook instance. The shell script must be a base64-encoded string.</p>
                */
            OnStart?: NotebookInstanceLifecycleHook[];
    }
    export namespace CreateNotebookInstanceLifecycleConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotebookInstanceLifecycleConfigInput) => any;
    }
    export interface CreateNotebookInstanceLifecycleConfigOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigArn?: string;
    }
    export namespace CreateNotebookInstanceLifecycleConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotebookInstanceLifecycleConfigOutput) => any;
    }
    /**
        * <p>Configuration that controls the parallelism of the pipeline.
        *             By default, the parallelism configuration specified applies to all
        *             executions of the pipeline unless overridden.</p>
        */
    export interface ParallelismConfiguration {
            /**
                * <p>The max number of steps that can be executed in parallel. </p>
                */
            MaxParallelExecutionSteps: number | undefined;
    }
    export namespace ParallelismConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParallelismConfiguration) => any;
    }
    /**
        * <p>The location of the pipeline definition stored in Amazon S3.</p>
        */
    export interface PipelineDefinitionS3Location {
            /**
                * <p>Name of the S3 bucket.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The object key (or key name) uniquely identifies the
                *             object in an S3 bucket. </p>
                */
            ObjectKey: string | undefined;
            /**
                * <p>Version Id of the pipeline definition file. If not specified, Amazon SageMaker
                *             will retrieve the latest version.</p>
                */
            VersionId?: string;
    }
    export namespace PipelineDefinitionS3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineDefinitionS3Location) => any;
    }
    export interface CreatePipelineRequest {
            /**
                * <p>The name of the pipeline.</p>
                */
            PipelineName: string | undefined;
            /**
                * <p>The display name of the pipeline.</p>
                */
            PipelineDisplayName?: string;
            /**
                * <p>The JSON pipeline definition of the pipeline.</p>
                */
            PipelineDefinition?: string;
            /**
                * <p>The location of the pipeline definition stored in Amazon S3. If specified,
                *             SageMaker will retrieve the pipeline definition from this location.</p>
                */
            PipelineDefinitionS3Location?: PipelineDefinitionS3Location;
            /**
                * <p>A description of the pipeline.</p>
                */
            PipelineDescription?: string;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          operation. An idempotent operation completes no more than one time.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A list of tags to apply to the created pipeline.</p>
                */
            Tags?: Tag[];
            /**
                * <p>This is the configuration that controls the parallelism of the pipeline.
                *             If specified, it applies to all runs of this pipeline by default.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
    }
    export namespace CreatePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePipelineRequest) => any;
    }
    export interface CreatePipelineResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the created pipeline.</p>
                */
            PipelineArn?: string;
    }
    export namespace CreatePipelineResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePipelineResponse) => any;
    }
    export interface CreatePresignedDomainUrlRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The name of the UserProfile to sign-in as.</p>
                */
            UserProfileName: string | undefined;
            /**
                * <p>The session expiration duration in seconds. This value defaults to 43200.</p>
                */
            SessionExpirationDurationInSeconds?: number;
            /**
                * <p>The number of seconds until the pre-signed URL expires. This value defaults to
                *          300.</p>
                */
            ExpiresInSeconds?: number;
    }
    export namespace CreatePresignedDomainUrlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePresignedDomainUrlRequest) => any;
    }
    export interface CreatePresignedDomainUrlResponse {
            /**
                * <p>The presigned URL.</p>
                */
            AuthorizedUrl?: string;
    }
    export namespace CreatePresignedDomainUrlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePresignedDomainUrlResponse) => any;
    }
    export interface CreatePresignedNotebookInstanceUrlInput {
            /**
                * <p>The name of the notebook instance.</p>
                */
            NotebookInstanceName: string | undefined;
            /**
                * <p>The duration of the session, in seconds. The default is 12 hours.</p>
                */
            SessionExpirationDurationInSeconds?: number;
    }
    export namespace CreatePresignedNotebookInstanceUrlInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePresignedNotebookInstanceUrlInput) => any;
    }
    export interface CreatePresignedNotebookInstanceUrlOutput {
            /**
                * <p>A JSON object that contains the URL string. </p>
                */
            AuthorizedUrl?: string;
    }
    export namespace CreatePresignedNotebookInstanceUrlOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePresignedNotebookInstanceUrlOutput) => any;
    }
    /**
        * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
        *       you call the following APIs:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>CreateProcessingJob</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>CreateTrainingJob</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>CreateTransformJob</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface ExperimentConfig {
            /**
                * <p>The name of an existing experiment to associate the trial component with.</p>
                */
            ExperimentName?: string;
            /**
                * <p>The name of an existing trial to associate the trial component with. If not specified, a
                *       new trial is created.</p>
                */
            TrialName?: string;
            /**
                * <p>The display name for the trial component. If this key isn't specified, the display name is
                *       the trial component name.</p>
                */
            TrialComponentDisplayName?: string;
    }
    export namespace ExperimentConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentConfig) => any;
    }
    export enum DataDistributionType {
            FULLYREPLICATED = "FullyReplicated",
            SHARDEDBYS3KEY = "ShardedByS3Key"
    }
    export enum InputMode {
            FILE = "File",
            PIPE = "Pipe"
    }
    export enum RedshiftResultCompressionType {
            BZIP2 = "BZIP2",
            GZIP = "GZIP",
            NONE = "None",
            SNAPPY = "SNAPPY",
            ZSTD = "ZSTD"
    }
    export enum RedshiftResultFormat {
            CSV = "CSV",
            PARQUET = "PARQUET"
    }
    /**
        * <p>Configuration for Redshift Dataset Definition input.</p>
        */
    export interface RedshiftDatasetDefinition {
            /**
                * <p>The Redshift cluster Identifier.</p>
                */
            ClusterId: string | undefined;
            /**
                * <p>The name of the Redshift database used in Redshift query execution.</p>
                */
            Database: string | undefined;
            /**
                * <p>The database user name used in Redshift query execution.</p>
                */
            DbUser: string | undefined;
            /**
                * <p>The SQL query statements to be executed.</p>
                */
            QueryString: string | undefined;
            /**
                * <p>The IAM role attached to your Redshift cluster that Amazon SageMaker uses to generate datasets.</p>
                */
            ClusterRoleArn: string | undefined;
            /**
                * <p>The location in Amazon S3 where the Redshift query results are stored.</p>
                */
            OutputS3Uri: string | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data from a
                *             Redshift execution.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The data storage format for Redshift query results.</p>
                */
            OutputFormat: RedshiftResultFormat | string | undefined;
            /**
                * <p>The compression used for Redshift query results.</p>
                */
            OutputCompression?: RedshiftResultCompressionType | string;
    }
    export namespace RedshiftDatasetDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedshiftDatasetDefinition) => any;
    }
    /**
        * <p>Configuration for Dataset Definition inputs. The Dataset Definition input must specify
        *             exactly one of either <code>AthenaDatasetDefinition</code> or <code>RedshiftDatasetDefinition</code>
        *             types.</p>
        */
    export interface DatasetDefinition {
            /**
                * <p>Configuration for Athena Dataset Definition input.</p>
                */
            AthenaDatasetDefinition?: AthenaDatasetDefinition;
            /**
                * <p>Configuration for Redshift Dataset Definition input.</p>
                */
            RedshiftDatasetDefinition?: RedshiftDatasetDefinition;
            /**
                * <p>The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a
                *             processing job. <code>LocalPath</code> is an absolute path to the input data. This is a required
                *             parameter when <code>AppManaged</code> is <code>False</code> (default).</p>
                */
            LocalPath?: string;
            /**
                * <p>Whether the generated dataset is <code>FullyReplicated</code> or
                *             <code>ShardedByS3Key</code> (default).</p>
                */
            DataDistributionType?: DataDistributionType | string;
            /**
                * <p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In <code>File</code> (default) mode,
                *             Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store
                *             (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used
                *             input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data from the source directly to your
                *             algorithm without using the EBS volume.</p>
                */
            InputMode?: InputMode | string;
    }
    export namespace DatasetDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetDefinition) => any;
    }
    export enum ProcessingS3CompressionType {
            GZIP = "Gzip",
            NONE = "None"
    }
    export enum ProcessingS3DataType {
            MANIFEST_FILE = "ManifestFile",
            S3_PREFIX = "S3Prefix"
    }
    /**
        * <p>Configuration for downloading input data from Amazon S3 into the processing container.</p>
        */
    export interface ProcessingS3Input {
            /**
                * <p>The URI of the Amazon S3 prefix Amazon SageMaker downloads data required to run a processing job.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>The local path in your container where you want Amazon SageMaker to write input data to.
                *             <code>LocalPath</code> is an absolute path to the input data and must begin with
                *             <code>/opt/ml/processing/</code>. <code>LocalPath</code> is a required
                *             parameter when <code>AppManaged</code> is <code>False</code> (default).</p>
                */
            LocalPath?: string;
            /**
                * <p>Whether you use an <code>S3Prefix</code> or a <code>ManifestFile</code> for
                *             the data type. If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
                *             name prefix. Amazon SageMaker uses all objects with the specified key name prefix for the processing
                *             job. If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object
                *             that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for
                *             the processing job.</p>
                */
            S3DataType: ProcessingS3DataType | string | undefined;
            /**
                * <p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In File mode, Amazon SageMaker copies the data
                *             from the input source onto the local ML storage volume before starting your processing
                *             container. This is the most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker
                *             streams input data from the source directly to your processing container into named
                *             pipes without using the ML storage volume.</p>
                */
            S3InputMode?: ProcessingS3InputMode | string;
            /**
                * <p>Whether to distribute the data from Amazon S3 to all processing instances with
                *             <code>FullyReplicated</code>, or whether the data from Amazon S3 is shared by Amazon S3 key,
                *             downloading one shard of data to each processing instance.</p>
                */
            S3DataDistributionType?: ProcessingS3DataDistributionType | string;
            /**
                * <p>Whether to GZIP-decompress the data in Amazon S3 as it is streamed into the processing
                *             container. <code>Gzip</code> can only be used when <code>Pipe</code> mode is
                *             specified as the <code>S3InputMode</code>. In <code>Pipe</code> mode, Amazon SageMaker streams input
                *             data from the source directly to your container without using the EBS volume.</p>
                */
            S3CompressionType?: ProcessingS3CompressionType | string;
    }
    export namespace ProcessingS3Input {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingS3Input) => any;
    }
    /**
        * <p>The inputs for a processing job. The processing input must specify exactly one of either
        *             <code>S3Input</code> or <code>DatasetDefinition</code> types.</p>
        */
    export interface ProcessingInput {
            /**
                * <p>The name for the processing job input.</p>
                */
            InputName: string | undefined;
            /**
                * <p>When <code>True</code>, input operations such as data download are managed natively by the
                *             processing job application. When <code>False</code> (default), input operations are managed by Amazon SageMaker.</p>
                */
            AppManaged?: boolean;
            /**
                * <p>Configuration for downloading input data from Amazon S3 into the processing container.</p>
                */
            S3Input?: ProcessingS3Input;
            /**
                * <p>Configuration for a Dataset Definition input. </p>
                */
            DatasetDefinition?: DatasetDefinition;
    }
    export namespace ProcessingInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingInput) => any;
    }
    /**
        * <p>Configuration for processing job outputs in Amazon SageMaker Feature Store.</p>
        */
    export interface ProcessingFeatureStoreOutput {
            /**
                * <p>The name of the Amazon SageMaker FeatureGroup to use as the destination for processing job output. Note that your
                *             processing script is responsible for putting records into your Feature Store.</p>
                */
            FeatureGroupName: string | undefined;
    }
    export namespace ProcessingFeatureStoreOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingFeatureStoreOutput) => any;
    }
    /**
        * <p>Configuration for uploading output data to Amazon S3 from the processing container.</p>
        */
    export interface ProcessingS3Output {
            /**
                * <p>A URI that identifies the Amazon S3 bucket where you want Amazon SageMaker to save the results of
                *             a processing job.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>The local path of a directory where you want Amazon SageMaker to upload its contents to Amazon S3.
                *             <code>LocalPath</code> is an absolute path to a directory containing output files.
                *             This directory will be created by the platform and exist when your container's
                *             entrypoint is invoked.</p>
                */
            LocalPath: string | undefined;
            /**
                * <p>Whether to upload the results of the processing job continuously or after the job
                *             completes.</p>
                */
            S3UploadMode: ProcessingS3UploadMode | string | undefined;
    }
    export namespace ProcessingS3Output {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingS3Output) => any;
    }
    /**
        * <p>Describes the results of a processing job. The processing output must specify exactly one of
        *             either <code>S3Output</code> or <code>FeatureStoreOutput</code> types.</p>
        */
    export interface ProcessingOutput {
            /**
                * <p>The name for the processing job output.</p>
                */
            OutputName: string | undefined;
            /**
                * <p>Configuration for processing job outputs in Amazon S3.</p>
                */
            S3Output?: ProcessingS3Output;
            /**
                * <p>Configuration for processing job outputs in Amazon SageMaker Feature Store. This processing output
                *             type is only supported when <code>AppManaged</code> is specified. </p>
                */
            FeatureStoreOutput?: ProcessingFeatureStoreOutput;
            /**
                * <p>When <code>True</code>, output operations such as data upload are managed natively by the
                *             processing job application. When <code>False</code> (default), output operations are managed by
                *             Amazon SageMaker.</p>
                */
            AppManaged?: boolean;
    }
    export namespace ProcessingOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingOutput) => any;
    }
    /**
        * <p>Configuration for uploading output from the processing container.</p>
        */
    export interface ProcessingOutputConfig {
            /**
                * <p>An array of outputs configuring the data to upload from the processing container.</p>
                */
            Outputs: ProcessingOutput[] | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the processing
                *             job output. <code>KmsKeyId</code> can be an ID of a KMS key, ARN of a KMS key, alias of
                *             a KMS key, or alias of a KMS key. The <code>KmsKeyId</code> is applied to all
                *             outputs.</p>
                */
            KmsKeyId?: string;
    }
    export namespace ProcessingOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingOutputConfig) => any;
    }
    /**
        * <p>Configuration for the cluster used to run a processing job.</p>
        */
    export interface ProcessingClusterConfig {
            /**
                * <p>The number of ML compute instances to use in the processing job. For distributed
                *             processing jobs, specify a value greater than 1. The default value is 1.</p>
                */
            InstanceCount: number | undefined;
            /**
                * <p>The ML compute instance type for the processing job.</p>
                */
            InstanceType: ProcessingInstanceType | string | undefined;
            /**
                * <p>The size of the ML storage volume in gigabytes that you want to provision. You must
                *             specify sufficient ML storage for your scenario.</p>
                *         <note>
                *             <p>Certain Nitro-based instances include local storage with a fixed total size,
                *                 dependent on the instance type. When using these instances for processing, Amazon SageMaker mounts
                *                 the local instance storage instead of Amazon EBS gp2 storage. You can't request a
                *                 <code>VolumeSizeInGB</code> greater than the total size of the local instance
                *                 storage.</p>
                *             <p>For a list of instance types that support local instance storage, including the
                *                 total size per instance type, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
                *         </note>
                */
            VolumeSizeInGB: number | undefined;
            /**
                * <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the
                *             storage volume attached to the ML compute instance(s) that run the processing job.
                *         </p>
                *         <note>
                *             <p>Certain Nitro-based instances include local storage, dependent on the instance
                *                 type. Local storage volumes are encrypted using a hardware module on the instance.
                *                 You can't request a <code>VolumeKmsKeyId</code> when using an instance type with
                *                 local storage.</p>
                *             <p>For a list of instance types that support local instance storage, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
                *             <p>For more information about local instance storage encryption, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
                *                 Instance Store Volumes</a>.</p>
                *         </note>
                */
            VolumeKmsKeyId?: string;
    }
    export namespace ProcessingClusterConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingClusterConfig) => any;
    }
    /**
        * <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
        *             processing job. In distributed training, you specify more than one instance.</p>
        */
    export interface ProcessingResources {
            /**
                * <p>The configuration for the resources in a cluster used to run the processing
                *             job.</p>
                */
            ClusterConfig: ProcessingClusterConfig | undefined;
    }
    export namespace ProcessingResources {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingResources) => any;
    }
    /**
        * <p>Configures conditions under which the processing job should be stopped, such as how long
        *             the processing job has been running. After the condition is met, the processing job is stopped.</p>
        */
    export interface ProcessingStoppingCondition {
            /**
                * <p>Specifies the maximum runtime in seconds.</p>
                */
            MaxRuntimeInSeconds: number | undefined;
    }
    export namespace ProcessingStoppingCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingStoppingCondition) => any;
    }
    export interface CreateProcessingJobRequest {
            /**
                * <p>An array of inputs configuring the data to download into the
                *             processing container.</p>
                */
            ProcessingInputs?: ProcessingInput[];
            /**
                * <p>Output configuration for the processing job.</p>
                */
            ProcessingOutputConfig?: ProcessingOutputConfig;
            /**
                * <p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the
                *             Amazon Web Services account.</p>
                */
            ProcessingJobName: string | undefined;
            /**
                * <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
                *             processing job. In distributed training, you specify more than one instance.</p>
                */
            ProcessingResources: ProcessingResources | undefined;
            /**
                * <p>The time limit for how long the processing job is allowed to run.</p>
                */
            StoppingCondition?: ProcessingStoppingCondition;
            /**
                * <p>Configures the processing job to run a specified Docker container image.</p>
                */
            AppSpecification: AppSpecification | undefined;
            /**
                * <p>The environment variables to set in the Docker container. Up to
                *             100 key and values entries in the map are supported.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>Networking options for a processing job, such as whether to allow inbound and
                *             outbound network calls to and from processing containers, and the VPC subnets and
                *             security groups to use for VPC-enabled processing jobs.</p>
                */
            NetworkConfig?: NetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
                *             your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *                 User Guide</i>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
    }
    export namespace CreateProcessingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProcessingJobRequest) => any;
    }
    export interface CreateProcessingJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the processing job.</p>
                */
            ProcessingJobArn: string | undefined;
    }
    export namespace CreateProcessingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProcessingJobResponse) => any;
    }
    /**
        * <p>A key value pair used when you provision a project as a service catalog product. For
        *             information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
        *                 Catalog</a>.</p>
        */
    export interface ProvisioningParameter {
            /**
                * <p>The key that identifies a provisioning parameter.</p>
                */
            Key?: string;
            /**
                * <p>The value of the provisioning parameter.</p>
                */
            Value?: string;
    }
    export namespace ProvisioningParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisioningParameter) => any;
    }
    /**
        * <p>Details that you specify to provision a service catalog product. For information about
        *             service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
        *                 Catalog</a>.</p>
        */
    export interface ServiceCatalogProvisioningDetails {
            /**
                * <p>The ID of the product to provision.</p>
                */
            ProductId: string | undefined;
            /**
                * <p>The ID of the provisioning artifact.</p>
                */
            ProvisioningArtifactId?: string;
            /**
                * <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. </p>
                */
            PathId?: string;
            /**
                * <p>A list of key value pairs that you specify when you provision a product.</p>
                */
            ProvisioningParameters?: ProvisioningParameter[];
    }
    export namespace ServiceCatalogProvisioningDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceCatalogProvisioningDetails) => any;
    }
    export interface CreateProjectInput {
            /**
                * <p>The name of the project.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>A description for the project.</p>
                */
            ProjectDescription?: string;
            /**
                * <p>The product ID and provisioning artifact ID to provision a service catalog. The provisioning
                *             artifact ID will default to the latest provisioning artifact ID of the product, if you don't
                *             provide the provisioning artifact ID. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
                *                 Catalog</a>.</p>
                */
            ServiceCatalogProvisioningDetails: ServiceCatalogProvisioningDetails | undefined;
            /**
                * <p>An array of key-value pairs that you want to use to organize and track your Amazon Web Services
                *             resource costs. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateProjectInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectInput) => any;
    }
    export interface CreateProjectOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ProjectArn: string | undefined;
            /**
                * <p>The ID of the new project.</p>
                */
            ProjectId: string | undefined;
    }
    export namespace CreateProjectOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectOutput) => any;
    }
    export enum StudioLifecycleConfigAppType {
            JupyterServer = "JupyterServer",
            KernelGateway = "KernelGateway"
    }
    export interface CreateStudioLifecycleConfigRequest {
            /**
                * <p>The name of the Studio Lifecycle Configuration to create.</p>
                */
            StudioLifecycleConfigName: string | undefined;
            /**
                * <p>The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.</p>
                */
            StudioLifecycleConfigContent: string | undefined;
            /**
                * <p>The App type that the Lifecycle Configuration is attached to.</p>
                */
            StudioLifecycleConfigAppType: StudioLifecycleConfigAppType | string | undefined;
            /**
                * <p>Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. </p>
                */
            Tags?: Tag[];
    }
    export namespace CreateStudioLifecycleConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStudioLifecycleConfigRequest) => any;
    }
    export interface CreateStudioLifecycleConfigResponse {
            /**
                * <p>The ARN of your created Lifecycle Configuration.</p>
                */
            StudioLifecycleConfigArn?: string;
    }
    export namespace CreateStudioLifecycleConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStudioLifecycleConfigResponse) => any;
    }
    /**
        * <p>Configuration information for the Debugger hook parameters, metric and tensor collections, and
        *             storage paths. To learn more about
        *             how to configure the <code>DebugHookConfig</code> parameter,
        *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
        */
    export interface DebugHookConfig {
            /**
                * <p>Path to local storage location for metrics and tensors. Defaults to
                *                 <code>/opt/ml/output/tensors/</code>.</p>
                */
            LocalPath?: string;
            /**
                * <p>Path to Amazon S3 storage location for metrics and tensors.</p>
                */
            S3OutputPath: string | undefined;
            /**
                * <p>Configuration information for the Debugger hook parameters.</p>
                */
            HookParameters?: Record<string, string>;
            /**
                * <p>Configuration information for Debugger tensor collections. To learn more about
                *             how to configure the <code>CollectionConfiguration</code> parameter,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
                *         </p>
                */
            CollectionConfigurations?: CollectionConfiguration[];
    }
    export namespace DebugHookConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DebugHookConfig) => any;
    }
    /**
        * <p>Configuration information for SageMaker Debugger rules for debugging. To learn more about
        *             how to configure the <code>DebugRuleConfiguration</code> parameter,
        *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
        */
    export interface DebugRuleConfiguration {
            /**
                * <p>The name of the rule configuration. It must be unique relative to other rule
                *             configuration names.</p>
                */
            RuleConfigurationName: string | undefined;
            /**
                * <p>Path to local storage location for output of rules. Defaults to
                *                 <code>/opt/ml/processing/output/rule/</code>.</p>
                */
            LocalPath?: string;
            /**
                * <p>Path to Amazon S3 storage location for rules.</p>
                */
            S3OutputPath?: string;
            /**
                * <p>The Amazon Elastic Container (ECR) Image for the managed rule evaluation.</p>
                */
            RuleEvaluatorImage: string | undefined;
            /**
                * <p>The instance type to deploy a Debugger custom rule for debugging a training job.</p>
                */
            InstanceType?: ProcessingInstanceType | string;
            /**
                * <p>The size, in GB, of the ML storage volume attached to the processing instance.</p>
                */
            VolumeSizeInGB?: number;
            /**
                * <p>Runtime configuration for rule container.</p>
                */
            RuleParameters?: Record<string, string>;
    }
    export namespace DebugRuleConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DebugRuleConfiguration) => any;
    }
    /**
        * <p>Configuration information for Debugger system monitoring, framework profiling, and
        *             storage paths.</p>
        */
    export interface ProfilerConfig {
            /**
                * <p>Path to Amazon S3 storage location for system and framework metrics.</p>
                */
            S3OutputPath: string | undefined;
            /**
                * <p>A time interval for capturing system metrics in milliseconds. Available values are
                *             100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>
                */
            ProfilingIntervalInMilliseconds?: number;
            /**
                * <p>Configuration information for capturing framework metrics. Available key strings for different profiling options are
                *             <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>.
                *             The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about
                *             how to configure the <code>ProfilingParameters</code> parameter,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
                *         </p>
                */
            ProfilingParameters?: Record<string, string>;
    }
    export namespace ProfilerConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfilerConfig) => any;
    }
    /**
        * <p>Configuration information for profiling rules.</p>
        */
    export interface ProfilerRuleConfiguration {
            /**
                * <p>The name of the rule configuration. It must be unique relative to other rule configuration names.</p>
                */
            RuleConfigurationName: string | undefined;
            /**
                * <p>Path to local storage location for output of rules. Defaults to <code>/opt/ml/processing/output/rule/</code>. </p>
                */
            LocalPath?: string;
            /**
                * <p>Path to Amazon S3 storage location for rules.</p>
                */
            S3OutputPath?: string;
            /**
                * <p>The Amazon Elastic Container (ECR) Image for the managed rule evaluation.</p>
                */
            RuleEvaluatorImage: string | undefined;
            /**
                * <p>The instance type to deploy a Debugger custom rule for profiling a training job.</p>
                */
            InstanceType?: ProcessingInstanceType | string;
            /**
                * <p>The size, in GB, of the ML storage volume attached to the processing instance.</p>
                */
            VolumeSizeInGB?: number;
            /**
                * <p>Runtime configuration for rule container.</p>
                */
            RuleParameters?: Record<string, string>;
    }
    export namespace ProfilerRuleConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfilerRuleConfiguration) => any;
    }
    /**
        * <p>Configuration of storage locations for the Debugger TensorBoard output data.</p>
        */
    export interface TensorBoardOutputConfig {
            /**
                * <p>Path to local storage location for tensorBoard output. Defaults to
                *                 <code>/opt/ml/output/tensorboard</code>.</p>
                */
            LocalPath?: string;
            /**
                * <p>Path to Amazon S3 storage location for TensorBoard output.</p>
                */
            S3OutputPath: string | undefined;
    }
    export namespace TensorBoardOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TensorBoardOutputConfig) => any;
    }
    export interface CreateTrainingJobRequest {
            /**
                * <p>The name of the training job. The name must be unique within an Amazon Web Services Region in an
                *             Amazon Web Services account. </p>
                */
            TrainingJobName: string | undefined;
            /**
                * <p>Algorithm-specific parameters that influence the quality of the model. You set
                *             hyperparameters before you start the learning process. For a list of hyperparameters for
                *             each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
                *         <p>You can specify a maximum of 100 hyperparameters. Each hyperparameter is a
                *             key-value pair. Each key and value is limited to 256 characters, as specified by the
                *                 <code>Length Constraint</code>. </p>
                */
            HyperParameters?: Record<string, string>;
            /**
                * <p>The registry path of the Docker image that contains the training algorithm and
                *             algorithm-specific metadata, including the input mode. For more information about
                *             algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For information about
                *             providing your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon
                *                 SageMaker</a>. </p>
                */
            AlgorithmSpecification: AlgorithmSpecification | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform
                *             tasks on your behalf. </p>
                *         <p>During model training, SageMaker needs your permission to read input data from an S3
                *             bucket, download a Docker image that contains training code, write model artifacts to an
                *             S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant
                *             permissions for all of these tasks to an IAM role. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
                *                 Roles</a>. </p>
                *         <note>
                *             <p>To be able to pass this role to SageMaker, the caller of this API must have the
                *                     <code>iam:PassRole</code> permission.</p>
                *         </note>
                */
            RoleArn: string | undefined;
            /**
                * <p>An array of <code>Channel</code> objects. Each channel is a named input source.
                *                 <code>InputDataConfig</code> describes the input data and its location. </p>
                *         <p>Algorithms can accept input data from one or more channels. For example, an
                *             algorithm might have two channels of input data, <code>training_data</code> and
                *                 <code>validation_data</code>. The configuration for each channel provides the S3,
                *             EFS, or FSx location where the input data is stored. It also provides information about
                *             the stored data: the MIME type, compression method, and whether the data is wrapped in
                *             RecordIO format. </p>
                *         <p>Depending on the input mode that the algorithm supports, SageMaker either copies input
                *             data files from an S3 bucket to a local directory in the Docker container, or makes it
                *             available as input streams. For example, if you specify an EFS location, input data
                *             files are available as input streams. They do not need to be
                *             downloaded.</p>
                */
            InputDataConfig?: Channel[];
            /**
                * <p>Specifies the path to the S3 location where you want to store model artifacts. SageMaker
                *             creates subfolders for the artifacts. </p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The resources, including the ML compute instances and ML storage volumes, to use
                *             for model training. </p>
                *         <p>ML storage volumes store model artifacts and incremental states. Training
                *             algorithms might also use ML storage volumes for scratch space. If you want SageMaker to use
                *             the ML storage volume to store the training data, choose <code>File</code> as the
                *                 <code>TrainingInputMode</code> in the algorithm specification. For distributed
                *             training algorithms, specify an instance count greater than 1.</p>
                */
            ResourceConfig: ResourceConfig | undefined;
            /**
                * <p>A <a>VpcConfig</a> object that specifies the VPC that you want your
                *             training job to connect to. Control access to and from your training container by
                *             configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon
                *                 Virtual Private Cloud</a>.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Specifies a limit to how long a model training job can run. It also specifies how long
                *             a managed Spot training job has to complete. When the job reaches the time limit, SageMaker
                *             ends the training job. Use this API to cap model training costs.</p>
                *         <p>To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
                *             job termination for 120 seconds. Algorithms can use this 120-second window to save the
                *             model artifacts, so the results of training are not lost. </p>
                */
            StoppingCondition: StoppingCondition | undefined;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Isolates the training container. No inbound or outbound network calls can be made,
                *             except for calls between peers within a training cluster for distributed training. If
                *             you enable network isolation for training jobs that are configured to use a VPC, SageMaker
                *             downloads and uploads customer data and model artifacts through the specified VPC, but
                *             the training container does not have network access.</p>
                */
            EnableNetworkIsolation?: boolean;
            /**
                * <p>To encrypt all communications between ML compute instances in distributed training,
                *             choose <code>True</code>. Encryption provides greater security for distributed training,
                *             but training might take longer. How long it takes depends on the amount of communication
                *             between compute instances, especially if you use a deep learning algorithm in
                *             distributed training. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html">Protect Communications Between ML
                *                 Compute Instances in a Distributed Training Job</a>.</p>
                */
            EnableInterContainerTrafficEncryption?: boolean;
            /**
                * <p>To train models using managed spot training, choose <code>True</code>. Managed spot
                *             training provides a fully managed and scalable infrastructure for training machine
                *             learning models. this option is useful when training jobs can be interrupted and when
                *             there is flexibility when the training job is run. </p>
                *         <p>The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be
                *             used as a starting point to train models incrementally. Amazon SageMaker provides metrics and
                *             logs in CloudWatch. They can be used to see when managed spot training jobs are running,
                *             interrupted, resumed, or completed. </p>
                */
            EnableManagedSpotTraining?: boolean;
            /**
                * <p>Contains information about the output location for managed spot training checkpoint
                *             data.</p>
                */
            CheckpointConfig?: CheckpointConfig;
            /**
                * <p>Configuration information for the Debugger hook parameters, metric and tensor collections, and
                *             storage paths. To learn more about
                *             how to configure the <code>DebugHookConfig</code> parameter,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
                */
            DebugHookConfig?: DebugHookConfig;
            /**
                * <p>Configuration information for Debugger rules for debugging output tensors.</p>
                */
            DebugRuleConfigurations?: DebugRuleConfiguration[];
            /**
                * <p>Configuration of storage locations for the Debugger TensorBoard output data.</p>
                */
            TensorBoardOutputConfig?: TensorBoardOutputConfig;
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
            /**
                * <p>Configuration information for Debugger system monitoring, framework profiling, and
                *             storage paths.</p>
                */
            ProfilerConfig?: ProfilerConfig;
            /**
                * <p>Configuration information for Debugger rules for profiling system and framework
                *             metrics.</p>
                */
            ProfilerRuleConfigurations?: ProfilerRuleConfiguration[];
            /**
                * <p>The environment variables to set in the Docker container.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>The number of times to retry the job when the job fails due to an
                *                 <code>InternalServerError</code>.</p>
                */
            RetryStrategy?: RetryStrategy;
    }
    export namespace CreateTrainingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrainingJobRequest) => any;
    }
    export interface CreateTrainingJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the training job.</p>
                */
            TrainingJobArn: string | undefined;
    }
    export namespace CreateTrainingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrainingJobResponse) => any;
    }
    export enum JoinSource {
            INPUT = "Input",
            NONE = "None"
    }
    /**
        * <p>The data structure used to specify the data to be used for inference in a batch
        *             transform job and to associate the data that is relevant to the prediction results in
        *             the output. The input filter provided allows you to exclude input data that is not
        *             needed for inference in a batch transform job. The output filter provided allows you to
        *             include input data relevant to interpreting the predictions in the output from the job.
        *             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
        *                 Results with their Corresponding Input Records</a>.</p>
        */
    export interface DataProcessing {
            /**
                * <p>A <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a> expression used to select a portion of the input data to pass to
                *             the algorithm. Use the <code>InputFilter</code> parameter to exclude fields, such as an
                *             ID column, from the input. If you want SageMaker to pass the entire input dataset to the
                *             algorithm, accept the default value <code>$</code>.</p>
                *         <p>Examples: <code>"$"</code>, <code>"$[1:]"</code>, <code>"$.features"</code>
                *          </p>
                */
            InputFilter?: string;
            /**
                * <p>A <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a> expression used to select a portion of the joined dataset to save
                *             in the output file for a batch transform job. If you want SageMaker to store the entire input
                *             dataset in the output file, leave the default value, <code>$</code>. If you specify
                *             indexes that aren't within the dimension size of the joined dataset, you get an
                *             error.</p>
                *         <p>Examples: <code>"$"</code>, <code>"$[0,5:]"</code>,
                *                 <code>"$['id','SageMakerOutput']"</code>
                *          </p>
                */
            OutputFilter?: string;
            /**
                * <p>Specifies the source of the data to join with the transformed data. The valid values
                *             are <code>None</code> and <code>Input</code>. The default value is <code>None</code>,
                *             which specifies not to join the input with the transformed data. If you want the batch
                *             transform job to join the original input data with the transformed data, set
                *                 <code>JoinSource</code> to <code>Input</code>. You can specify
                *                 <code>OutputFilter</code> as an additional filter to select a portion of the joined
                *             dataset and store it in the output file.</p>
                *         <p>For JSON or JSONLines objects, such as a JSON array, SageMaker adds the transformed data to
                *             the input JSON object in an attribute called <code>SageMakerOutput</code>. The joined
                *             result for JSON must be a key-value pair object. If the input is not a key-value pair
                *             object, SageMaker creates a new JSON file. In the new JSON file, and the input data is stored
                *             under the <code>SageMakerInput</code> key and the results are stored in
                *                 <code>SageMakerOutput</code>.</p>
                *         <p>For CSV data, SageMaker takes each row as a JSON array and joins the transformed data with
                *             the input by appending each transformed row to the end of the input. The joined data has
                *             the original input data followed by the transformed data and the output is a CSV
                *             file.</p>
                *         <p>For information on how joining in applied, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#batch-transform-data-processing-workflow">Workflow for Associating Inferences with Input Records</a>.</p>
                */
            JoinSource?: JoinSource | string;
    }
    export namespace DataProcessing {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataProcessing) => any;
    }
    /**
        * <p>Configures the timeout and maximum number of retries for processing a transform job
        *             invocation.</p>
        */
    export interface ModelClientConfig {
            /**
                * <p>The timeout value in seconds for an invocation request. The default value is 600.</p>
                */
            InvocationsTimeoutInSeconds?: number;
            /**
                * <p>The maximum number of retries when invocation requests are failing. The default value is 3.</p>
                */
            InvocationsMaxRetries?: number;
    }
    export namespace ModelClientConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelClientConfig) => any;
    }
    export interface CreateTransformJobRequest {
            /**
                * <p>The name of the transform job. The name must be unique within an Amazon Web Services Region in an
                *             Amazon Web Services account. </p>
                */
            TransformJobName: string | undefined;
            /**
                * <p>The name of the model that you want to use for the transform job.
                *             <code>ModelName</code> must be the name of an existing Amazon SageMaker model within an Amazon Web Services
                *             Region in an Amazon Web Services account.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The maximum number of parallel requests that can be sent to each instance in a
                *             transform job. If <code>MaxConcurrentTransforms</code> is set to <code>0</code> or left
                *             unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your
                *             chosen algorithm. If the execution-parameters endpoint is not enabled, the default value
                *             is <code>1</code>. For more information on execution-parameters, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests">How Containers Serve Requests</a>. For built-in algorithms, you don't need to
                *             set a value for <code>MaxConcurrentTransforms</code>.</p>
                */
            MaxConcurrentTransforms?: number;
            /**
                * <p>Configures the timeout and maximum number of retries for processing a transform job
                *             invocation.</p>
                */
            ModelClientConfig?: ModelClientConfig;
            /**
                * <p>The maximum allowed size of the payload, in MB. A <i>payload</i> is the
                *             data portion of a record (without metadata). The value in <code>MaxPayloadInMB</code>
                *             must be greater than, or equal to, the size of a single record. To estimate the size of
                *             a record in MB, divide the size of your dataset by the number of records. To ensure that
                *             the records fit within the maximum payload size, we recommend using a slightly larger
                *             value. The default value is <code>6</code> MB.
                *             </p>
                *         <p>The value of <code>MaxPayloadInMB</code> cannot be greater than 100 MB. If you specify
                *             the <code>MaxConcurrentTransforms</code> parameter, the value of
                *                 <code>(MaxConcurrentTransforms * MaxPayloadInMB)</code> also cannot exceed 100
                *             MB.</p>
                *         <p>For cases where the payload might be arbitrarily large and is transmitted using HTTP
                *             chunked encoding, set the value to <code>0</code>.
                *             This
                *             feature works only in supported algorithms. Currently, Amazon SageMaker built-in
                *             algorithms do not support HTTP chunked encoding.</p>
                */
            MaxPayloadInMB?: number;
            /**
                * <p>Specifies the number of records to include in a mini-batch for an HTTP inference
                *             request. A <i>record</i>
                *             <i></i> is a single unit of input data that
                *             inference can be made on. For example, a single line in a CSV file is a record. </p>
                *         <p>To enable the batch strategy, you must set the <code>SplitType</code> property to
                *                 <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.</p>
                *         <p>To use only one record when making an HTTP invocation request to a container, set
                *                 <code>BatchStrategy</code> to <code>SingleRecord</code> and <code>SplitType</code>
                *             to <code>Line</code>.</p>
                *         <p>To fit as many records in a mini-batch as can fit within the
                *                 <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to
                *                 <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>
                */
            BatchStrategy?: BatchStrategy | string;
            /**
                * <p>The environment variables to set in the Docker container. We support up to 16 key and
                *             values entries in the map.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>Describes the input source and
                *             the
                *             way the transform job consumes it.</p>
                */
            TransformInput: TransformInput | undefined;
            /**
                * <p>Describes the results of the transform job.</p>
                */
            TransformOutput: TransformOutput | undefined;
            /**
                * <p>Describes the resources, including
                *             ML
                *             instance types and ML instance count, to use for the transform
                *             job.</p>
                */
            TransformResources: TransformResources | undefined;
            /**
                * <p>The data structure used to specify the data to be used for inference in a batch
                *             transform job and to associate the data that is relevant to the prediction results in
                *             the output. The input filter provided allows you to exclude input data that is not
                *             needed for inference in a batch transform job. The output filter provided allows you to
                *             include input data relevant to interpreting the predictions in the output from the job.
                *             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
                *                 Results with their Corresponding Input Records</a>.</p>
                */
            DataProcessing?: DataProcessing;
            /**
                * <p>(Optional)
                *             An
                *             array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
                *                 Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User
                *                 Guide</i>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
    }
    export namespace CreateTransformJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTransformJobRequest) => any;
    }
    export interface CreateTransformJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the transform job.</p>
                */
            TransformJobArn: string | undefined;
    }
    export namespace CreateTransformJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTransformJobResponse) => any;
    }
    export interface CreateTrialRequest {
            /**
                * <p>The name of the trial. The name must be unique in your Amazon Web Services account and is not
                *       case-sensitive.</p>
                */
            TrialName: string | undefined;
            /**
                * <p>The name of the trial as displayed. The name doesn't need to be unique. If
                *         <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The name of the experiment to associate the trial with.</p>
                */
            ExperimentName: string | undefined;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>A list of tags to associate with the trial. You can use <a>Search</a> API to
                *       search on the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateTrialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrialRequest) => any;
    }
    export interface CreateTrialResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the trial.</p>
                */
            TrialArn?: string;
    }
    export namespace CreateTrialResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrialResponse) => any;
    }
    /**
        * <p>Represents an input or output artifact of a trial component. You specify
        *         <code>TrialComponentArtifact</code> as part of the <code>InputArtifacts</code> and
        *         <code>OutputArtifacts</code> parameters in the <a>CreateTrialComponent</a>
        *       request.</p>
        *          <p>Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and
        *       instance types. Examples of output artifacts are metrics, snapshots, logs, and images.</p>
        */
    export interface TrialComponentArtifact {
            /**
                * <p>The media type of the artifact, which indicates the type of data in the artifact file. The
                *       media type consists of a <i>type</i> and a <i>subtype</i>
                *       concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The
                *       type specifies the category of the media. The subtype specifies the kind of data.</p>
                */
            MediaType?: string;
            /**
                * <p>The location of the artifact.</p>
                */
            Value: string | undefined;
    }
    export namespace TrialComponentArtifact {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentArtifact) => any;
    }
    /**
        * <p>The value of a hyperparameter. Only one of <code>NumberValue</code> or
        *         <code>StringValue</code> can be specified.</p>
        *          <p>This object is specified in the <a>CreateTrialComponent</a> request.</p>
        */
    export type TrialComponentParameterValue = TrialComponentParameterValue.NumberValueMember | TrialComponentParameterValue.StringValueMember | TrialComponentParameterValue.$UnknownMember;
    export namespace TrialComponentParameterValue {
            /**
                * <p>The string value of a categorical hyperparameter. If you specify a value for this
                *       parameter, you can't specify the <code>NumberValue</code> parameter.</p>
                */
            interface StringValueMember {
                    StringValue: string;
                    NumberValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>The numeric value of a numeric hyperparameter. If you specify a value for this parameter,
                *       you can't specify the <code>StringValue</code> parameter.</p>
                */
            interface NumberValueMember {
                    StringValue?: never;
                    NumberValue: number;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    StringValue?: never;
                    NumberValue?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    StringValue: (value: string) => T;
                    NumberValue: (value: number) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: TrialComponentParameterValue, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentParameterValue) => any;
    }
    export enum TrialComponentPrimaryStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    /**
        * <p>The status of the trial component.</p>
        */
    export interface TrialComponentStatus {
            /**
                * <p>The status of the trial component.</p>
                */
            PrimaryStatus?: TrialComponentPrimaryStatus | string;
            /**
                * <p>If the component failed, a message describing why.</p>
                */
            Message?: string;
    }
    export namespace TrialComponentStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentStatus) => any;
    }
    export interface CreateTrialComponentRequest {
            /**
                * <p>The name of the component. The name must be unique in your Amazon Web Services account and is not
                *       case-sensitive.</p>
                */
            TrialComponentName: string | undefined;
            /**
                * <p>The name of the component as displayed. The name doesn't need to be unique. If
                *         <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is
                *       displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The status of the component. States include:</p>
                *          <ul>
                *             <li>
                *                <p>InProgress</p>
                *             </li>
                *             <li>
                *                <p>Completed</p>
                *             </li>
                *             <li>
                *                <p>Failed</p>
                *             </li>
                *          </ul>
                */
            Status?: TrialComponentStatus;
            /**
                * <p>When the component started.</p>
                */
            StartTime?: Date;
            /**
                * <p>When the component ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>The hyperparameters for the component.</p>
                */
            Parameters?: Record<string, TrialComponentParameterValue>;
            /**
                * <p>The input artifacts for the component. Examples of input artifacts are datasets,
                *       algorithms, hyperparameters, source code, and instance types.</p>
                */
            InputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>The output artifacts for the component. Examples of output artifacts are metrics,
                *       snapshots, logs, and images.</p>
                */
            OutputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>A list of tags to associate with the component. You can use <a>Search</a> API
                *       to search on the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateTrialComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrialComponentRequest) => any;
    }
    export interface CreateTrialComponentResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the trial component.</p>
                */
            TrialComponentArn?: string;
    }
    export namespace CreateTrialComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrialComponentResponse) => any;
    }
    export interface CreateUserProfileRequest {
            /**
                * <p>The ID of the associated Domain.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>A name for the UserProfile. This value is not case sensitive.</p>
                */
            UserProfileName: string | undefined;
            /**
                * <p>A specifier for the type of value specified in SingleSignOnUserValue.  Currently, the only supported value is "UserName".
                *            If the Domain's AuthMode is SSO, this field is required.  If the Domain's AuthMode is not SSO, this field cannot be specified.
                *        </p>
                */
            SingleSignOnUserIdentifier?: string;
            /**
                * <p>The username of the associated Amazon Web Services Single Sign-On User for this UserProfile.  If the Domain's AuthMode is SSO, this field is
                *            required, and must match a valid username of a user in your directory.  If the Domain's AuthMode is not SSO, this field cannot be specified.
                *        </p>
                */
            SingleSignOnUserValue?: string;
            /**
                * <p>Each tag consists of a key and an optional value.
                *          Tag keys must be unique per resource.</p>
                *          <p>Tags that you specify for the User Profile are also added to all Apps that the
                *           User Profile launches.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A collection of settings.</p>
                */
            UserSettings?: UserSettings;
    }
    export namespace CreateUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserProfileRequest) => any;
    }
    export interface CreateUserProfileResponse {
            /**
                * <p>The user profile Amazon Resource Name (ARN).</p>
                */
            UserProfileArn?: string;
    }
    export namespace CreateUserProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserProfileResponse) => any;
    }
    /**
        * <p>Use this parameter to configure your OIDC Identity Provider (IdP).</p>
        */
    export interface OidcConfig {
            /**
                * <p>The OIDC IdP client ID used to configure your private workforce.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The OIDC IdP client secret used to configure your private workforce.</p>
                */
            ClientSecret: string | undefined;
            /**
                * <p>The OIDC IdP issuer used to configure your private workforce.</p>
                */
            Issuer: string | undefined;
            /**
                * <p>The OIDC IdP authorization endpoint used to configure your private workforce.</p>
                */
            AuthorizationEndpoint: string | undefined;
            /**
                * <p>The OIDC IdP token endpoint used to configure your private workforce.</p>
                */
            TokenEndpoint: string | undefined;
            /**
                * <p>The OIDC IdP user information endpoint used to configure your private workforce.</p>
                */
            UserInfoEndpoint: string | undefined;
            /**
                * <p>The OIDC IdP logout endpoint used to configure your private workforce.</p>
                */
            LogoutEndpoint: string | undefined;
            /**
                * <p>The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.</p>
                */
            JwksUri: string | undefined;
    }
    export namespace OidcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OidcConfig) => any;
    }
    /**
        * <p>A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow
        *             list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an
        *             IP address within this range. By default, a workforce isn't restricted to specific IP addresses.</p>
        */
    export interface SourceIpConfig {
            /**
                * <p>A list of one to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Classless Inter-Domain Routing</a> (CIDR) values.</p>
                *         <p>Maximum: Ten CIDR values</p>
                *         <note>
                *             <p>The following Length Constraints apply to individual CIDR values in
                *                 the CIDR value list.</p>
                *         </note>
                */
            Cidrs: string[] | undefined;
    }
    export namespace SourceIpConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceIpConfig) => any;
    }
    /**
        * <p>The VPC object you use to create or update a workforce.</p>
        */
    export interface WorkforceVpcConfigRequest {
            /**
                * <p>The ID of the VPC that the workforce uses for communication.</p>
                */
            VpcId?: string;
            /**
                * <p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>The ID of the subnets in the VPC that you want to connect.</p>
                */
            Subnets?: string[];
    }
    export namespace WorkforceVpcConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkforceVpcConfigRequest) => any;
    }
    export interface CreateWorkforceRequest {
            /**
                * <p>Use this parameter to configure an Amazon Cognito private workforce.
                *       A single Cognito workforce is created using and corresponds to a single
                *       <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
                *       Amazon Cognito user pool</a>.</p>
                *
                *          <p>Do not use <code>OidcConfig</code> if you specify values for
                *       <code>CognitoConfig</code>.</p>
                */
            CognitoConfig?: CognitoConfig;
            /**
                * <p>Use this parameter to configure a private workforce using your own OIDC Identity Provider.</p>
                *          <p>Do not use <code>CognitoConfig</code> if you specify values for
                *       <code>OidcConfig</code>.</p>
                */
            OidcConfig?: OidcConfig;
            /**
                * <p>A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow
                *             list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an
                *             IP address within this range. By default, a workforce isn't restricted to specific IP addresses.</p>
                */
            SourceIpConfig?: SourceIpConfig;
            /**
                * <p>The name of the private workforce.</p>
                */
            WorkforceName: string | undefined;
            /**
                * <p>An array of key-value pairs that contain metadata to help you categorize and
                *       organize our workforce. Each tag consists of a key and a value,
                *       both of which you define.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Use this parameter to configure a workforce using VPC.</p>
                */
            WorkforceVpcConfig?: WorkforceVpcConfigRequest;
    }
    export namespace CreateWorkforceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkforceRequest) => any;
    }
    export interface CreateWorkforceResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the workforce.</p>
                */
            WorkforceArn: string | undefined;
    }
    export namespace CreateWorkforceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkforceResponse) => any;
    }
    /**
        * <p>A list of user groups that exist in your OIDC Identity Provider (IdP).
        *             One to ten groups can be used to create a single private work team.
        *             When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more
        *             private work teams. If you add a user group to a private work team, all workers in that user group
        *             are added to the work team.</p>
        */
    export interface OidcMemberDefinition {
            /**
                * <p>A list of comma seperated strings that identifies
                *             user groups in your OIDC IdP. Each user group is
                *             made up of a group of private workers.</p>
                */
            Groups: string[] | undefined;
    }
    export namespace OidcMemberDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OidcMemberDefinition) => any;
    }
    /**
        * <p>Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team.</p>
        */
    export interface MemberDefinition {
            /**
                * <p>The Amazon Cognito user group that is part of the work team.</p>
                */
            CognitoMemberDefinition?: CognitoMemberDefinition;
            /**
                * <p>A list user groups that exist in your OIDC Identity Provider (IdP).
                *             One to ten groups can be used to create a single private work team.
                *             When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more
                *             private work teams. If you add a user group to a private work team, all workers in that user group
                *             are added to the work team.</p>
                */
            OidcMemberDefinition?: OidcMemberDefinition;
    }
    export namespace MemberDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MemberDefinition) => any;
    }
    /**
        * <p>Configures Amazon SNS notifications of available or expiring work items for work
        *             teams.</p>
        */
    export interface NotificationConfiguration {
            /**
                * <p>The ARN for the Amazon SNS topic to which notifications should be published.</p>
                */
            NotificationTopicArn?: string;
    }
    export namespace NotificationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationConfiguration) => any;
    }
    export interface CreateWorkteamRequest {
            /**
                * <p>The name of the work team. Use this name to identify the work team.</p>
                */
            WorkteamName: string | undefined;
            /**
                * <p>The name of the workforce.</p>
                */
            WorkforceName?: string;
            /**
                * <p>A list of <code>MemberDefinition</code> objects that contains objects that identify
                *             the workers that make up the work team. </p>
                *         <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For
                *             private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For
                *             workforces created using your own OIDC identity provider (IdP) use
                *                 <code>OidcMemberDefinition</code>. Do not provide input for both of these parameters
                *             in a single request.</p>
                *         <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito
                *                 <i>user groups</i> within the user pool used to create a workforce. All of the
                *                 <code>CognitoMemberDefinition</code> objects that make up the member definition must
                *             have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon
                *             Cognito user group to an existing worker pool, see <a href="">Adding groups to a User
                *                 Pool</a>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User
                *                 Pools</a>.</p>
                *         <p>For workforces created using your own OIDC IdP, specify the user groups that you want to
                *         include in your private work team in <code>OidcMemberDefinition</code> by listing those groups
                *         in <code>Groups</code>.</p>
                */
            MemberDefinitions: MemberDefinition[] | undefined;
            /**
                * <p>A description of the work team.</p>
                */
            Description: string | undefined;
            /**
                * <p>Configures notification of workers regarding available or expiring work items.</p>
                */
            NotificationConfiguration?: NotificationConfiguration;
            /**
                * <p>An array of key-value pairs.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html">Resource
                *                 Tag</a> and <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
                *                     Cost Allocation Tags</a> in the <i> Amazon Web Services Billing and Cost Management User
                *                 Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateWorkteamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkteamRequest) => any;
    }
    export interface CreateWorkteamResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the work team. You can use this ARN to identify the
                *             work team.</p>
                */
            WorkteamArn?: string;
    }
    export namespace CreateWorkteamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkteamResponse) => any;
    }
    /**
        * <p>The currently active data capture configuration used by your Endpoint.</p>
        */
    export interface DataCaptureConfigSummary {
            /**
                * <p>Whether data capture is enabled or disabled.</p>
                */
            EnableCapture: boolean | undefined;
            /**
                * <p>Whether data capture is currently functional.</p>
                */
            CaptureStatus: CaptureStatus | string | undefined;
            /**
                * <p>The percentage of requests being captured by your Endpoint.</p>
                */
            CurrentSamplingPercentage: number | undefined;
            /**
                * <p>The Amazon S3 location being used to capture the data.</p>
                */
            DestinationS3Uri: string | undefined;
            /**
                * <p>The KMS key being used to encrypt the data in Amazon S3.</p>
                */
            KmsKeyId: string | undefined;
    }
    export namespace DataCaptureConfigSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCaptureConfigSummary) => any;
    }
    export enum RuleEvaluationStatus {
            ERROR = "Error",
            IN_PROGRESS = "InProgress",
            ISSUES_FOUND = "IssuesFound",
            NO_ISSUES_FOUND = "NoIssuesFound",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    /**
        * <p>Information about the status of the rule evaluation.</p>
        */
    export interface DebugRuleEvaluationStatus {
            /**
                * <p>The name of the rule configuration.</p>
                */
            RuleConfigurationName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule evaluation job.</p>
                */
            RuleEvaluationJobArn?: string;
            /**
                * <p>Status of the rule evaluation.</p>
                */
            RuleEvaluationStatus?: RuleEvaluationStatus | string;
            /**
                * <p>Details from the rule evaluation.</p>
                */
            StatusDetails?: string;
            /**
                * <p>Timestamp when the rule evaluation status was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace DebugRuleEvaluationStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DebugRuleEvaluationStatus) => any;
    }
    export interface DeleteActionRequest {
            /**
                * <p>The name of the action to delete.</p>
                */
            ActionName: string | undefined;
    }
    export namespace DeleteActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActionRequest) => any;
    }
    export interface DeleteActionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the action.</p>
                */
            ActionArn?: string;
    }
    export namespace DeleteActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActionResponse) => any;
    }
    export interface DeleteAlgorithmInput {
            /**
                * <p>The name of the algorithm to delete.</p>
                */
            AlgorithmName: string | undefined;
    }
    export namespace DeleteAlgorithmInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAlgorithmInput) => any;
    }
    export interface DeleteAppRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName: string | undefined;
            /**
                * <p>The type of app.</p>
                */
            AppType: AppType | string | undefined;
            /**
                * <p>The name of the app.</p>
                */
            AppName: string | undefined;
    }
    export namespace DeleteAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppRequest) => any;
    }
    export interface DeleteAppImageConfigRequest {
            /**
                * <p>The name of the AppImageConfig to delete.</p>
                */
            AppImageConfigName: string | undefined;
    }
    export namespace DeleteAppImageConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppImageConfigRequest) => any;
    }
    export interface DeleteArtifactRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact to delete.</p>
                */
            ArtifactArn?: string;
            /**
                * <p>The URI of the source.</p>
                */
            Source?: ArtifactSource;
    }
    export namespace DeleteArtifactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteArtifactRequest) => any;
    }
    export interface DeleteArtifactResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact.</p>
                */
            ArtifactArn?: string;
    }
    export namespace DeleteArtifactResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteArtifactResponse) => any;
    }
    export interface DeleteAssociationRequest {
            /**
                * <p>The ARN of the source.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the destination.</p>
                */
            DestinationArn: string | undefined;
    }
    export namespace DeleteAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssociationRequest) => any;
    }
    export interface DeleteAssociationResponse {
            /**
                * <p>The ARN of the source.</p>
                */
            SourceArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the destination.</p>
                */
            DestinationArn?: string;
    }
    export namespace DeleteAssociationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssociationResponse) => any;
    }
    export interface DeleteCodeRepositoryInput {
            /**
                * <p>The name of the Git repository to delete.</p>
                */
            CodeRepositoryName: string | undefined;
    }
    export namespace DeleteCodeRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCodeRepositoryInput) => any;
    }
    export interface DeleteContextRequest {
            /**
                * <p>The name of the context to delete.</p>
                */
            ContextName: string | undefined;
    }
    export namespace DeleteContextRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContextRequest) => any;
    }
    export interface DeleteContextResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the context.</p>
                */
            ContextArn?: string;
    }
    export namespace DeleteContextResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContextResponse) => any;
    }
    export interface DeleteDataQualityJobDefinitionRequest {
            /**
                * <p>The name of the data quality monitoring job definition to delete.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DeleteDataQualityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataQualityJobDefinitionRequest) => any;
    }
    export interface DeleteDeviceFleetRequest {
            /**
                * <p>The name of the fleet to delete.</p>
                */
            DeviceFleetName: string | undefined;
    }
    export namespace DeleteDeviceFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeviceFleetRequest) => any;
    }
    export enum RetentionType {
            Delete = "Delete",
            Retain = "Retain"
    }
    /**
        * <p>The retention policy for data stored on an Amazon Elastic File System (EFS) volume.</p>
        */
    export interface RetentionPolicy {
            /**
                * <p>The default is <code>Retain</code>, which specifies to keep the data stored on the EFS volume.</p>
                *          <p>Specify <code>Delete</code> to delete the data stored on the EFS volume.</p>
                */
            HomeEfsFileSystem?: RetentionType | string;
    }
    export namespace RetentionPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetentionPolicy) => any;
    }
    export interface DeleteDomainRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted.
                *            By default, all resources are retained (not automatically deleted).
                *        </p>
                */
            RetentionPolicy?: RetentionPolicy;
    }
    export namespace DeleteDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainRequest) => any;
    }
    export interface DeleteEdgeDeploymentPlanRequest {
            /**
                * <p>The name of the edge deployment plan to delete.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
    }
    export namespace DeleteEdgeDeploymentPlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEdgeDeploymentPlanRequest) => any;
    }
    export interface DeleteEdgeDeploymentStageRequest {
            /**
                * <p>The name of the edge deployment plan from which the stage will be deleted.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>The name of the stage.</p>
                */
            StageName: string | undefined;
    }
    export namespace DeleteEdgeDeploymentStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEdgeDeploymentStageRequest) => any;
    }
    export interface DeleteEndpointInput {
            /**
                * <p>The name of the endpoint that you want to delete.</p>
                */
            EndpointName: string | undefined;
    }
    export namespace DeleteEndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEndpointInput) => any;
    }
    export interface DeleteEndpointConfigInput {
            /**
                * <p>The name of the endpoint configuration that you want to delete.</p>
                */
            EndpointConfigName: string | undefined;
    }
    export namespace DeleteEndpointConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEndpointConfigInput) => any;
    }
    export interface DeleteExperimentRequest {
            /**
                * <p>The name of the experiment to delete.</p>
                */
            ExperimentName: string | undefined;
    }
    export namespace DeleteExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperimentRequest) => any;
    }
    export interface DeleteExperimentResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the experiment that is being deleted.</p>
                */
            ExperimentArn?: string;
    }
    export namespace DeleteExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperimentResponse) => any;
    }
    export interface DeleteFeatureGroupRequest {
            /**
                * <p>The name of the <code>FeatureGroup</code> you want to delete. The name must be unique
                *          within an Amazon Web Services Region in an Amazon Web Services account. </p>
                */
            FeatureGroupName: string | undefined;
    }
    export namespace DeleteFeatureGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFeatureGroupRequest) => any;
    }
    export interface DeleteFlowDefinitionRequest {
            /**
                * <p>The name of the flow definition you are deleting.</p>
                */
            FlowDefinitionName: string | undefined;
    }
    export namespace DeleteFlowDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFlowDefinitionRequest) => any;
    }
    export interface DeleteFlowDefinitionResponse {
    }
    export namespace DeleteFlowDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFlowDefinitionResponse) => any;
    }
    export interface DeleteHumanTaskUiRequest {
            /**
                * <p>The name of the human task user interface (work task template) you want to delete.</p>
                */
            HumanTaskUiName: string | undefined;
    }
    export namespace DeleteHumanTaskUiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteHumanTaskUiRequest) => any;
    }
    export interface DeleteHumanTaskUiResponse {
    }
    export namespace DeleteHumanTaskUiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteHumanTaskUiResponse) => any;
    }
    export interface DeleteImageRequest {
            /**
                * <p>The name of the image to delete.</p>
                */
            ImageName: string | undefined;
    }
    export namespace DeleteImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageRequest) => any;
    }
    export interface DeleteImageResponse {
    }
    export namespace DeleteImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageResponse) => any;
    }
    export interface DeleteImageVersionRequest {
            /**
                * <p>The name of the image.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>The version to delete.</p>
                */
            Version: number | undefined;
    }
    export namespace DeleteImageVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageVersionRequest) => any;
    }
    export interface DeleteImageVersionResponse {
    }
    export namespace DeleteImageVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteImageVersionResponse) => any;
    }
    export interface DeleteModelInput {
            /**
                * <p>The name of the model to delete.</p>
                */
            ModelName: string | undefined;
    }
    export namespace DeleteModelInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelInput) => any;
    }
    export interface DeleteModelBiasJobDefinitionRequest {
            /**
                * <p>The name of the model bias job definition to delete.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DeleteModelBiasJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelBiasJobDefinitionRequest) => any;
    }
    export interface DeleteModelExplainabilityJobDefinitionRequest {
            /**
                * <p>The name of the model explainability job definition to delete.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DeleteModelExplainabilityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelExplainabilityJobDefinitionRequest) => any;
    }
    export interface DeleteModelPackageInput {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the model package to delete.</p>
                *         <p>When you specify a name, the name must have 1 to 63 characters. Valid
                *             characters are a-z, A-Z, 0-9, and - (hyphen).</p>
                */
            ModelPackageName: string | undefined;
    }
    export namespace DeleteModelPackageInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelPackageInput) => any;
    }
    export interface DeleteModelPackageGroupInput {
            /**
                * <p>The name of the model group to delete.</p>
                */
            ModelPackageGroupName: string | undefined;
    }
    export namespace DeleteModelPackageGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelPackageGroupInput) => any;
    }
    export interface DeleteModelPackageGroupPolicyInput {
            /**
                * <p>The name of the model group for which to delete the policy.</p>
                */
            ModelPackageGroupName: string | undefined;
    }
    export namespace DeleteModelPackageGroupPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelPackageGroupPolicyInput) => any;
    }
    export interface DeleteModelQualityJobDefinitionRequest {
            /**
                * <p>The name of the model quality monitoring job definition to delete.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DeleteModelQualityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelQualityJobDefinitionRequest) => any;
    }
    export interface DeleteMonitoringScheduleRequest {
            /**
                * <p>The name of the monitoring schedule to delete.</p>
                */
            MonitoringScheduleName: string | undefined;
    }
    export namespace DeleteMonitoringScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMonitoringScheduleRequest) => any;
    }
    export interface DeleteNotebookInstanceInput {
            /**
                * <p>The name of the SageMaker notebook instance to delete.</p>
                */
            NotebookInstanceName: string | undefined;
    }
    export namespace DeleteNotebookInstanceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotebookInstanceInput) => any;
    }
    export interface DeleteNotebookInstanceLifecycleConfigInput {
            /**
                * <p>The name of the lifecycle configuration to delete.</p>
                */
            NotebookInstanceLifecycleConfigName: string | undefined;
    }
    export namespace DeleteNotebookInstanceLifecycleConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotebookInstanceLifecycleConfigInput) => any;
    }
    export interface DeletePipelineRequest {
            /**
                * <p>The name of the pipeline to delete.</p>
                */
            PipelineName: string | undefined;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          operation. An idempotent operation completes no more than one time.</p>
                */
            ClientRequestToken?: string;
    }
    export namespace DeletePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePipelineRequest) => any;
    }
    export interface DeletePipelineResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline to delete.</p>
                */
            PipelineArn?: string;
    }
    export namespace DeletePipelineResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePipelineResponse) => any;
    }
    export interface DeleteProjectInput {
            /**
                * <p>The name of the project to delete.</p>
                */
            ProjectName: string | undefined;
    }
    export namespace DeleteProjectInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectInput) => any;
    }
    export interface DeleteStudioLifecycleConfigRequest {
            /**
                * <p>The name of the Studio Lifecycle Configuration to delete.</p>
                */
            StudioLifecycleConfigName: string | undefined;
    }
    export namespace DeleteStudioLifecycleConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStudioLifecycleConfigRequest) => any;
    }
    export interface DeleteTagsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource whose tags you want to
                *             delete.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>An array or one or more tag keys to delete.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace DeleteTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTagsInput) => any;
    }
    export interface DeleteTagsOutput {
    }
    export namespace DeleteTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTagsOutput) => any;
    }
    export interface DeleteTrialRequest {
            /**
                * <p>The name of the trial to delete.</p>
                */
            TrialName: string | undefined;
    }
    export namespace DeleteTrialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrialRequest) => any;
    }
    export interface DeleteTrialResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the trial that is being deleted.</p>
                */
            TrialArn?: string;
    }
    export namespace DeleteTrialResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrialResponse) => any;
    }
    export interface DeleteTrialComponentRequest {
            /**
                * <p>The name of the component to delete.</p>
                */
            TrialComponentName: string | undefined;
    }
    export namespace DeleteTrialComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrialComponentRequest) => any;
    }
    export interface DeleteTrialComponentResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the component is being deleted.</p>
                */
            TrialComponentArn?: string;
    }
    export namespace DeleteTrialComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrialComponentResponse) => any;
    }
    export interface DeleteUserProfileRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName: string | undefined;
    }
    export namespace DeleteUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserProfileRequest) => any;
    }
    export interface DeleteWorkforceRequest {
            /**
                * <p>The name of the workforce.</p>
                */
            WorkforceName: string | undefined;
    }
    export namespace DeleteWorkforceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkforceRequest) => any;
    }
    export interface DeleteWorkforceResponse {
    }
    export namespace DeleteWorkforceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkforceResponse) => any;
    }
    export interface DeleteWorkteamRequest {
            /**
                * <p>The name of the work team to delete.</p>
                */
            WorkteamName: string | undefined;
    }
    export namespace DeleteWorkteamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkteamRequest) => any;
    }
    export interface DeleteWorkteamResponse {
            /**
                * <p>Returns <code>true</code> if the work team was successfully deleted; otherwise,
                *             returns <code>false</code>.</p>
                */
            Success: boolean | undefined;
    }
    export namespace DeleteWorkteamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkteamResponse) => any;
    }
    /**
        * <p>Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this <a>ProductionVariant</a>.</p>
        *         <p>If you used the <code>registry/repository[:tag]</code> form to specify the image path
        *             of the primary container when you created the model hosted in this
        *                 <code>ProductionVariant</code>, the path resolves to a path of the form
        *                 <code>registry/repository[@digest]</code>. A digest is a hash value that identifies
        *             a specific version of an image. For information about Amazon ECR paths, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html">Pulling an Image</a> in the <i>Amazon ECR User Guide</i>.</p>
        */
    export interface DeployedImage {
            /**
                * <p>The image path you specified when you created the model.</p>
                */
            SpecifiedImage?: string;
            /**
                * <p>The specific digest path of the image hosted in this
                *             <code>ProductionVariant</code>.</p>
                */
            ResolvedImage?: string;
            /**
                * <p>The date and time when the image path for the model resolved to the
                *                 <code>ResolvedImage</code>
                *          </p>
                */
            ResolutionTime?: Date;
    }
    export namespace DeployedImage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeployedImage) => any;
    }
    export enum StageStatus {
            Creating = "CREATING",
            Deployed = "DEPLOYED",
            Failed = "FAILED",
            InProgress = "INPROGRESS",
            ReadyToDeploy = "READYTODEPLOY",
            Starting = "STARTING",
            Stopped = "STOPPED",
            Stopping = "STOPPING"
    }
    /**
        * <p>Contains information summarizing the deployment stage results.</p>
        */
    export interface EdgeDeploymentStatus {
            /**
                * <p>The general status of the current stage.</p>
                */
            StageStatus: StageStatus | string | undefined;
            /**
                * <p>The number of edge devices with the successful deployment in the current stage.</p>
                */
            EdgeDeploymentSuccessInStage: number | undefined;
            /**
                * <p>The number of edge devices yet to pick up the deployment in current stage, or in progress.</p>
                */
            EdgeDeploymentPendingInStage: number | undefined;
            /**
                * <p>The number of edge devices that failed the deployment in current stage.</p>
                */
            EdgeDeploymentFailedInStage: number | undefined;
            /**
                * <p>A detailed message about deployment status in current stage.</p>
                */
            EdgeDeploymentStatusMessage?: string;
            /**
                * <p>The time when the deployment API started.</p>
                */
            EdgeDeploymentStageStartTime?: Date;
    }
    export namespace EdgeDeploymentStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeDeploymentStatus) => any;
    }
    /**
        * <p>Contains information summarizing the deployment stage results.</p>
        */
    export interface DeploymentStageStatusSummary {
            /**
                * <p>The name of the stage.</p>
                */
            StageName: string | undefined;
            /**
                * <p>Configuration of the devices in the stage.</p>
                */
            DeviceSelectionConfig: DeviceSelectionConfig | undefined;
            /**
                * <p>Configuration of the deployment details.</p>
                */
            DeploymentConfig: EdgeDeploymentConfig | undefined;
            /**
                * <p>General status of the current state.</p>
                */
            DeploymentStatus: EdgeDeploymentStatus | undefined;
    }
    export namespace DeploymentStageStatusSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentStageStatusSummary) => any;
    }
    export interface DeregisterDevicesRequest {
            /**
                * <p>The name of the fleet the devices belong to.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The unique IDs of the devices.</p>
                */
            DeviceNames: string[] | undefined;
    }
    export namespace DeregisterDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterDevicesRequest) => any;
    }
    export interface DescribeActionRequest {
            /**
                * <p>The name of the action to describe.</p>
                */
            ActionName: string | undefined;
    }
    export namespace DescribeActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActionRequest) => any;
    }
    export interface DescribeActionResponse {
            /**
                * <p>The name of the action.</p>
                */
            ActionName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the action.</p>
                */
            ActionArn?: string;
            /**
                * <p>The source of the action.</p>
                */
            Source?: ActionSource;
            /**
                * <p>The type of the action.</p>
                */
            ActionType?: string;
            /**
                * <p>The description of the action.</p>
                */
            Description?: string;
            /**
                * <p>The status of the action.</p>
                */
            Status?: ActionStatus | string;
            /**
                * <p>A list of the action's properties.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>When the action was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the action was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupArn?: string;
    }
    export namespace DescribeActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActionResponse) => any;
    }
    export interface DescribeAlgorithmInput {
            /**
                * <p>The name of the algorithm to describe.</p>
                */
            AlgorithmName: string | undefined;
    }
    export namespace DescribeAlgorithmInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlgorithmInput) => any;
    }
    export interface DescribeAlgorithmOutput {
            /**
                * <p>The name of the algorithm being described.</p>
                */
            AlgorithmName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the algorithm.</p>
                */
            AlgorithmArn: string | undefined;
            /**
                * <p>A brief summary about the algorithm.</p>
                */
            AlgorithmDescription?: string;
            /**
                * <p>A timestamp specifying when the algorithm was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Details about training jobs run by this algorithm.</p>
                */
            TrainingSpecification: TrainingSpecification | undefined;
            /**
                * <p>Details about inference jobs that the algorithm runs.</p>
                */
            InferenceSpecification?: InferenceSpecification;
            /**
                * <p>Details about configurations for one or more training jobs that SageMaker runs to test the
                *             algorithm.</p>
                */
            ValidationSpecification?: AlgorithmValidationSpecification;
            /**
                * <p>The current status of the algorithm.</p>
                */
            AlgorithmStatus: AlgorithmStatus | string | undefined;
            /**
                * <p>Details about the current status of the algorithm.</p>
                */
            AlgorithmStatusDetails: AlgorithmStatusDetails | undefined;
            /**
                * <p>The product identifier of the algorithm.</p>
                */
            ProductId?: string;
            /**
                * <p>Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.</p>
                */
            CertifyForMarketplace?: boolean;
    }
    export namespace DescribeAlgorithmOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlgorithmOutput) => any;
    }
    export interface DescribeAppRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName: string | undefined;
            /**
                * <p>The type of app.</p>
                */
            AppType: AppType | string | undefined;
            /**
                * <p>The name of the app.</p>
                */
            AppName: string | undefined;
    }
    export namespace DescribeAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAppRequest) => any;
    }
    export interface DescribeAppResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the app.</p>
                */
            AppArn?: string;
            /**
                * <p>The type of app.</p>
                */
            AppType?: AppType | string;
            /**
                * <p>The name of the app.</p>
                */
            AppName?: string;
            /**
                * <p>The domain ID.</p>
                */
            DomainId?: string;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName?: string;
            /**
                * <p>The status.</p>
                */
            Status?: AppStatus | string;
            /**
                * <p>The timestamp of the last health check.</p>
                */
            LastHealthCheckTimestamp?: Date;
            /**
                * <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
                */
            LastUserActivityTimestamp?: Date;
            /**
                * <p>The creation time.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The failure reason.</p>
                */
            FailureReason?: string;
            /**
                * <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
                */
            ResourceSpec?: ResourceSpec;
    }
    export namespace DescribeAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAppResponse) => any;
    }
    export interface DescribeAppImageConfigRequest {
            /**
                * <p>The name of the AppImageConfig to describe.</p>
                */
            AppImageConfigName: string | undefined;
    }
    export namespace DescribeAppImageConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAppImageConfigRequest) => any;
    }
    export interface DescribeAppImageConfigResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the AppImageConfig.</p>
                */
            AppImageConfigArn?: string;
            /**
                * <p>The name of the AppImageConfig.</p>
                */
            AppImageConfigName?: string;
            /**
                * <p>When the AppImageConfig was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When the AppImageConfig was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The configuration of a KernelGateway app.</p>
                */
            KernelGatewayImageConfig?: KernelGatewayImageConfig;
    }
    export namespace DescribeAppImageConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAppImageConfigResponse) => any;
    }
    export interface DescribeArtifactRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact to describe.</p>
                */
            ArtifactArn: string | undefined;
    }
    export namespace DescribeArtifactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeArtifactRequest) => any;
    }
    export interface DescribeArtifactResponse {
            /**
                * <p>The name of the artifact.</p>
                */
            ArtifactName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact.</p>
                */
            ArtifactArn?: string;
            /**
                * <p>The source of the artifact.</p>
                */
            Source?: ArtifactSource;
            /**
                * <p>The type of the artifact.</p>
                */
            ArtifactType?: string;
            /**
                * <p>A list of the artifact's properties.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>When the artifact was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the artifact was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupArn?: string;
    }
    export namespace DescribeArtifactResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeArtifactResponse) => any;
    }
    export interface DescribeAutoMLJobRequest {
            /**
                * <p>Requests information about an AutoML job using its unique name.</p>
                */
            AutoMLJobName: string | undefined;
    }
    export namespace DescribeAutoMLJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAutoMLJobRequest) => any;
    }
    /**
        * <p>Provides information about the endpoint of the model deployment.</p>
        */
    export interface ModelDeployResult {
            /**
                * <p>The name of the endpoint to which the model has been deployed.</p>
                *          <note>
                *             <p>If model deployment fails, this field is omitted from the response.</p>
                *          </note>
                */
            EndpointName?: string;
    }
    export namespace ModelDeployResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelDeployResult) => any;
    }
    /**
        * <p>The resolved attributes.</p>
        */
    export interface ResolvedAttributes {
            /**
                * <p>Specifies a metric to minimize or maximize as the objective of a job.</p>
                */
            AutoMLJobObjective?: AutoMLJobObjective;
            /**
                * <p>The problem type.</p>
                */
            ProblemType?: ProblemType | string;
            /**
                * <p>How long a job is allowed to run, or how many candidates a job is allowed to
                *          generate.</p>
                */
            CompletionCriteria?: AutoMLJobCompletionCriteria;
    }
    export namespace ResolvedAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResolvedAttributes) => any;
    }
    export interface DescribeAutoMLJobResponse {
            /**
                * <p>Returns the name of the AutoML job.</p>
                */
            AutoMLJobName: string | undefined;
            /**
                * <p>Returns the ARN of the AutoML job.</p>
                */
            AutoMLJobArn: string | undefined;
            /**
                * <p>Returns the input data configuration for the AutoML job..</p>
                */
            InputDataConfig: AutoMLChannel[] | undefined;
            /**
                * <p>Returns the job's output data config.</p>
                */
            OutputDataConfig: AutoMLOutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that
                *          has read permission to the input data location and write permission to the output data
                *          location in Amazon S3.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Returns the job's objective.</p>
                */
            AutoMLJobObjective?: AutoMLJobObjective;
            /**
                * <p>Returns the job's problem type.</p>
                */
            ProblemType?: ProblemType | string;
            /**
                * <p>Returns the configuration for the AutoML job.</p>
                */
            AutoMLJobConfig?: AutoMLJobConfig;
            /**
                * <p>Returns the creation time of the AutoML job.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Returns the end time of the AutoML job.</p>
                */
            EndTime?: Date;
            /**
                * <p>Returns the job's last modified time.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>Returns the failure reason for an AutoML job, when applicable.</p>
                */
            FailureReason?: string;
            /**
                * <p>Returns a list of reasons for partial failures within an AutoML job.</p>
                */
            PartialFailureReasons?: AutoMLPartialFailureReason[];
            /**
                * <p>Returns the job's best <code>AutoMLCandidate</code>.</p>
                */
            BestCandidate?: AutoMLCandidate;
            /**
                * <p>Returns the status of the AutoML job.</p>
                */
            AutoMLJobStatus: AutoMLJobStatus | string | undefined;
            /**
                * <p>Returns the secondary status of the AutoML job.</p>
                */
            AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus | string | undefined;
            /**
                * <p>Indicates whether the output for an AutoML job generates candidate definitions
                *          only.</p>
                */
            GenerateCandidateDefinitionsOnly?: boolean;
            /**
                * <p>Returns information on the job's artifacts found in
                *          <code>AutoMLJobArtifacts</code>.</p>
                */
            AutoMLJobArtifacts?: AutoMLJobArtifacts;
            /**
                * <p>This contains <code>ProblemType</code>, <code>AutoMLJobObjective</code>, and
                *             <code>CompletionCriteria</code>. If you do not provide these values, they are
                *          auto-inferred. If you do provide them, the values used are the ones you provide.</p>
                */
            ResolvedAttributes?: ResolvedAttributes;
            /**
                * <p>Indicates whether the model was deployed automatically to an endpoint and the name of
                *          that endpoint if deployed automatically.</p>
                */
            ModelDeployConfig?: ModelDeployConfig;
            /**
                * <p>Provides information about endpoint for the model deployment.</p>
                */
            ModelDeployResult?: ModelDeployResult;
    }
    export namespace DescribeAutoMLJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAutoMLJobResponse) => any;
    }
    export interface DescribeCodeRepositoryInput {
            /**
                * <p>The name of the Git repository to describe.</p>
                */
            CodeRepositoryName: string | undefined;
    }
    export namespace DescribeCodeRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCodeRepositoryInput) => any;
    }
    export interface DescribeCodeRepositoryOutput {
            /**
                * <p>The name of the Git repository.</p>
                */
            CodeRepositoryName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Git repository.</p>
                */
            CodeRepositoryArn: string | undefined;
            /**
                * <p>The date and time that the repository was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The date and time that the repository was last changed.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>Configuration details about the repository, including the URL where the repository is
                *             located, the default branch, and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets
                *             Manager secret that contains the credentials used to access the repository.</p>
                */
            GitConfig?: GitConfig;
    }
    export namespace DescribeCodeRepositoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCodeRepositoryOutput) => any;
    }
    export interface DescribeCompilationJobRequest {
            /**
                * <p>The name of the model compilation job that you want information about.</p>
                */
            CompilationJobName: string | undefined;
    }
    export namespace DescribeCompilationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCompilationJobRequest) => any;
    }
    /**
        * <p>Provides information about the location that is configured for storing model
        *             artifacts. </p>
        *         <p>Model artifacts are the output that results from training a model, and typically
        *             consist of trained parameters, a model definition that describes how to compute
        *             inferences, and other metadata.</p>
        */
    export interface ModelArtifacts {
            /**
                * <p>The path of the S3 object that contains the model artifacts. For example,
                *                 <code>s3://bucket-name/keynameprefix/model.tar.gz</code>.</p>
                */
            S3ModelArtifacts: string | undefined;
    }
    export namespace ModelArtifacts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelArtifacts) => any;
    }
    /**
        * <p>Provides information to verify the integrity of stored model artifacts. </p>
        */
    export interface ModelDigests {
            /**
                * <p>Provides a hash value that uniquely identifies the stored model
                *             artifacts.</p>
                */
            ArtifactDigest?: string;
    }
    export namespace ModelDigests {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelDigests) => any;
    }
    export interface DescribeCompilationJobResponse {
            /**
                * <p>The name of the model compilation job.</p>
                */
            CompilationJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
                */
            CompilationJobArn: string | undefined;
            /**
                * <p>The status of the model compilation job.</p>
                */
            CompilationJobStatus: CompilationJobStatus | string | undefined;
            /**
                * <p>The time when the model compilation job started the <code>CompilationJob</code>
                *             instances. </p>
                *         <p>You are billed for the time between this timestamp and the timestamp in the <a>DescribeCompilationJobResponse$CompilationEndTime</a> field. In Amazon CloudWatch Logs,
                *             the start time might be later than this time. That's because it takes time to download
                *             the compilation job, which depends on the size of the compilation job container. </p>
                */
            CompilationStartTime?: Date;
            /**
                * <p>The time when the model compilation job on a compilation job instance ended. For a
                *             successful or stopped job, this is when the job's model artifacts have finished
                *             uploading. For a failed job, this is when Amazon SageMaker detected that the job failed. </p>
                */
            CompilationEndTime?: Date;
            /**
                * <p>Specifies a limit to how long a model compilation job can run. When the job reaches
                *             the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training
                *             costs.</p>
                */
            StoppingCondition: StoppingCondition | undefined;
            /**
                * <p>The inference image to use when compiling a model.
                *             Specify an image only if the target device is a cloud instance.</p>
                */
            InferenceImage?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the versioned model package that was
                *     provided to SageMaker Neo when you initiated a compilation job.</p>
                */
            ModelPackageVersionArn?: string;
            /**
                * <p>The time that the model compilation job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The time that the status
                *             of
                *             the model compilation job was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>If a model compilation job failed, the reason it failed. </p>
                */
            FailureReason: string | undefined;
            /**
                * <p>Information about the location in Amazon S3 that has been configured for storing the model
                *             artifacts used in the compilation job.</p>
                */
            ModelArtifacts: ModelArtifacts | undefined;
            /**
                * <p>Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.</p>
                */
            ModelDigests?: ModelDigests;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model
                *             compilation job.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Information about the location in Amazon S3 of the input model artifacts, the name and
                *             shape of the expected data inputs, and the framework in which the model was
                *             trained.</p>
                */
            InputConfig: InputConfig | undefined;
            /**
                * <p>Information about the output location for the compiled model and the target device
                *             that the model runs on.</p>
                */
            OutputConfig: OutputConfig | undefined;
            /**
                * <p>A <a>VpcConfig</a> object that specifies the VPC that you want your
                *             compilation job to connect to. Control access to your models by
                *             configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon
                *                 Virtual Private Cloud</a>.</p>
                */
            VpcConfig?: NeoVpcConfig;
    }
    export namespace DescribeCompilationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCompilationJobResponse) => any;
    }
    export interface DescribeContextRequest {
            /**
                * <p>The name of the context to describe.</p>
                */
            ContextName: string | undefined;
    }
    export namespace DescribeContextRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeContextRequest) => any;
    }
    export interface DescribeContextResponse {
            /**
                * <p>The name of the context.</p>
                */
            ContextName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the context.</p>
                */
            ContextArn?: string;
            /**
                * <p>The source of the context.</p>
                */
            Source?: ContextSource;
            /**
                * <p>The type of the context.</p>
                */
            ContextType?: string;
            /**
                * <p>The description of the context.</p>
                */
            Description?: string;
            /**
                * <p>A list of the context's properties.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>When the context was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the context was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupArn?: string;
    }
    export namespace DescribeContextResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeContextResponse) => any;
    }
    export interface DescribeDataQualityJobDefinitionRequest {
            /**
                * <p>The name of the data quality monitoring job definition to describe.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DescribeDataQualityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataQualityJobDefinitionRequest) => any;
    }
    export interface DescribeDataQualityJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the data quality monitoring job definition.</p>
                */
            JobDefinitionArn: string | undefined;
            /**
                * <p>The name of the data quality monitoring job definition.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>The time that the data quality monitoring job definition was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The constraints and baselines for the data quality monitoring job definition.</p>
                */
            DataQualityBaselineConfig?: DataQualityBaselineConfig;
            /**
                * <p>Information about the container that runs the data quality monitoring job.</p>
                */
            DataQualityAppSpecification: DataQualityAppSpecification | undefined;
            /**
                * <p>The list of inputs for the data quality monitoring job. Currently endpoints are
                *          supported.</p>
                */
            DataQualityJobInput: DataQualityJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            DataQualityJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>The networking configuration for the data quality monitoring job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
                *          perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
    }
    export namespace DescribeDataQualityJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataQualityJobDefinitionResponse) => any;
    }
    export interface DescribeDeviceRequest {
            /**
                * <p>Next token of device description.</p>
                */
            NextToken?: string;
            /**
                * <p>The unique ID of the device.</p>
                */
            DeviceName: string | undefined;
            /**
                * <p>The name of the fleet the devices belong to.</p>
                */
            DeviceFleetName: string | undefined;
    }
    export namespace DescribeDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceRequest) => any;
    }
    /**
        * <p>The model on the edge device.</p>
        */
    export interface EdgeModel {
            /**
                * <p>The name of the model.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The model version.</p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>The timestamp of the last data sample taken.</p>
                */
            LatestSampleTime?: Date;
            /**
                * <p>The timestamp of the last inference that was made.</p>
                */
            LatestInference?: Date;
    }
    export namespace EdgeModel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeModel) => any;
    }
    export interface DescribeDeviceResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the device.</p>
                */
            DeviceArn?: string;
            /**
                * <p>The unique identifier of the device.</p>
                */
            DeviceName: string | undefined;
            /**
                * <p>A description of the device.</p>
                */
            Description?: string;
            /**
                * <p>The name of the fleet the device belongs to.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.</p>
                */
            IotThingName?: string;
            /**
                * <p>The timestamp of the last registration or de-reregistration.</p>
                */
            RegistrationTime: Date | undefined;
            /**
                * <p>The last heartbeat received from the device.</p>
                */
            LatestHeartbeat?: Date;
            /**
                * <p>Models on the device.</p>
                */
            Models?: EdgeModel[];
            /**
                * <p>The maximum number of models.</p>
                */
            MaxModels?: number;
            /**
                * <p>The response from the last list when returning a list large enough to need tokening.</p>
                */
            NextToken?: string;
            /**
                * <p>Edge Manager agent version.</p>
                */
            AgentVersion?: string;
    }
    export namespace DescribeDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceResponse) => any;
    }
    export interface DescribeDeviceFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            DeviceFleetName: string | undefined;
    }
    export namespace DescribeDeviceFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceFleetRequest) => any;
    }
    export interface DescribeDeviceFleetResponse {
            /**
                * <p>The name of the fleet.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The The Amazon Resource Name (ARN) of the fleet.</p>
                */
            DeviceFleetArn: string | undefined;
            /**
                * <p>The output configuration for storing sampled data.</p>
                */
            OutputConfig: EdgeOutputConfig | undefined;
            /**
                * <p>A description of the fleet.</p>
                */
            Description?: string;
            /**
                * <p>Timestamp of when the device fleet was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Timestamp of when the device fleet was last updated.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
                */
            RoleArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) alias created in Amazon Web Services Internet of Things (IoT).</p>
                */
            IotRoleAlias?: string;
    }
    export namespace DescribeDeviceFleetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceFleetResponse) => any;
    }
    export interface DescribeDomainRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
    }
    export namespace DescribeDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainRequest) => any;
    }
    export enum DomainStatus {
            Delete_Failed = "Delete_Failed",
            Deleting = "Deleting",
            Failed = "Failed",
            InService = "InService",
            Pending = "Pending",
            Update_Failed = "Update_Failed",
            Updating = "Updating"
    }
    export interface DescribeDomainResponse {
            /**
                * <p>The domain's Amazon Resource Name (ARN).</p>
                */
            DomainArn?: string;
            /**
                * <p>The domain ID.</p>
                */
            DomainId?: string;
            /**
                * <p>The domain name.</p>
                */
            DomainName?: string;
            /**
                * <p>The ID of the Amazon Elastic File System (EFS) managed by this Domain.</p>
                */
            HomeEfsFileSystemId?: string;
            /**
                * <p>The SSO managed application instance ID.</p>
                */
            SingleSignOnManagedApplicationInstanceId?: string;
            /**
                * <p>The status.</p>
                */
            Status?: DomainStatus | string;
            /**
                * <p>The creation time.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The last modified time.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The failure reason.</p>
                */
            FailureReason?: string;
            /**
                * <p>The domain's authentication mode.</p>
                */
            AuthMode?: AuthMode | string;
            /**
                * <p>Settings which are applied to UserProfiles in this domain if settings are not explicitly specified
                *            in a given UserProfile.
                *        </p>
                */
            DefaultUserSettings?: UserSettings;
            /**
                * <p>Specifies the VPC used for non-EFS traffic. The default value is
                *         <code>PublicInternetOnly</code>.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed by
                *             Amazon SageMaker, which allows direct internet access</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets</p>
                *             </li>
                *          </ul>
                */
            AppNetworkAccessType?: AppNetworkAccessType | string;
            /**
                * @deprecated
                *
                * <p>Use <code>KmsKeyId</code>.</p>
                */
            HomeEfsFileSystemKmsKeyId?: string;
            /**
                * <p>The VPC subnets that Studio uses for communication.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The domain's URL.</p>
                */
            Url?: string;
            /**
                * <p>The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
                */
            VpcId?: string;
            /**
                * <p>The Amazon Web Services KMS customer managed key used to encrypt
                *          the EFS volume attached to the domain.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A collection of <code>Domain</code> settings.</p>
                */
            DomainSettings?: DomainSettings;
            /**
                * <p>The entity that creates and manages the required security groups for inter-app communication in <code>VPCOnly</code> mode.
                *             Required when <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is provided.</p>
                */
            AppSecurityGroupManagement?: AppSecurityGroupManagement | string;
            /**
                * <p>The ID of the security group that authorizes traffic between the <code>RSessionGateway</code> apps and the <code>RStudioServerPro</code> app.</p>
                */
            SecurityGroupIdForDomainBoundary?: string;
    }
    export namespace DescribeDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainResponse) => any;
    }
    export interface DescribeEdgeDeploymentPlanRequest {
            /**
                * <p>The name of the deployment plan to describe.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>If the edge deployment plan has enough stages to require tokening, then this is the response from the last list of stages returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to select (50 by default).</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeEdgeDeploymentPlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEdgeDeploymentPlanRequest) => any;
    }
    export interface DescribeEdgeDeploymentPlanResponse {
            /**
                * <p>The ARN of edge deployment plan.</p>
                */
            EdgeDeploymentPlanArn: string | undefined;
            /**
                * <p>The name of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>List of models associated with the edge deployment plan.</p>
                */
            ModelConfigs: EdgeDeploymentModelConfig[] | undefined;
            /**
                * <p>The device fleet used for this edge deployment plan.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The number of edge devices with the successful deployment.</p>
                */
            EdgeDeploymentSuccess?: number;
            /**
                * <p>The number of edge devices yet to pick up deployment, or in progress.</p>
                */
            EdgeDeploymentPending?: number;
            /**
                * <p>The number of edge devices that failed the deployment.</p>
                */
            EdgeDeploymentFailed?: number;
            /**
                * <p>List of stages in the edge deployment plan.</p>
                */
            Stages: DeploymentStageStatusSummary[] | undefined;
            /**
                * <p>Token to use when calling the next set of stages in the edge deployment plan.</p>
                */
            NextToken?: string;
            /**
                * <p>The time when the edge deployment plan was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time when the edge deployment plan was last updated.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace DescribeEdgeDeploymentPlanResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEdgeDeploymentPlanResponse) => any;
    }
    export interface DescribeEdgePackagingJobRequest {
            /**
                * <p>The name of the edge packaging job.</p>
                */
            EdgePackagingJobName: string | undefined;
    }
    export namespace DescribeEdgePackagingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEdgePackagingJobRequest) => any;
    }
    export enum EdgePackagingJobStatus {
            Completed = "COMPLETED",
            Failed = "FAILED",
            InProgress = "INPROGRESS",
            Starting = "STARTING",
            Stopped = "STOPPED",
            Stopping = "STOPPING"
    }
    export enum EdgePresetDeploymentStatus {
            Completed = "COMPLETED",
            Failed = "FAILED"
    }
    /**
        * <p>The output of a SageMaker Edge Manager deployable resource.</p>
        */
    export interface EdgePresetDeploymentOutput {
            /**
                * <p>The deployment type created by SageMaker Edge Manager. Currently only
                *      supports Amazon Web Services IoT Greengrass Version 2 components.</p>
                */
            Type: EdgePresetDeploymentType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the generated deployable resource.</p>
                */
            Artifact?: string;
            /**
                * <p>The status of the deployable resource.</p>
                */
            Status?: EdgePresetDeploymentStatus | string;
            /**
                * <p>Returns a message describing the status of the deployed resource.</p>
                */
            StatusMessage?: string;
    }
    export namespace EdgePresetDeploymentOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgePresetDeploymentOutput) => any;
    }
    export interface DescribeEdgePackagingJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the edge packaging job.</p>
                */
            EdgePackagingJobArn: string | undefined;
            /**
                * <p>The name of the edge packaging job.</p>
                */
            EdgePackagingJobName: string | undefined;
            /**
                * <p>The name of the SageMaker Neo compilation job that is used to locate model artifacts that are being packaged.</p>
                */
            CompilationJobName?: string;
            /**
                * <p>The name of the model.</p>
                */
            ModelName?: string;
            /**
                * <p>The version of the model.</p>
                */
            ModelVersion?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to  download and upload the model, and to contact Neo.</p>
                */
            RoleArn?: string;
            /**
                * <p>The output configuration for the edge packaging job.</p>
                */
            OutputConfig?: EdgeOutputConfig;
            /**
                * <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the job run on.</p>
                */
            ResourceKey?: string;
            /**
                * <p>The current status of the packaging job.</p>
                */
            EdgePackagingJobStatus: EdgePackagingJobStatus | string | undefined;
            /**
                * <p>Returns a message describing the job status and error messages.</p>
                */
            EdgePackagingJobStatusMessage?: string;
            /**
                * <p>The timestamp of when the packaging job was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The timestamp of when the job was last updated.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The Amazon Simple Storage (S3) URI where model artifacts ares stored.</p>
                */
            ModelArtifact?: string;
            /**
                * <p>The signature document of files in the model artifact.</p>
                */
            ModelSignature?: string;
            /**
                * <p>The output of a SageMaker Edge Manager deployable resource.</p>
                */
            PresetDeploymentOutput?: EdgePresetDeploymentOutput;
    }
    export namespace DescribeEdgePackagingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEdgePackagingJobResponse) => any;
    }
    export interface DescribeEndpointInput {
            /**
                * <p>The name of the endpoint.</p>
                */
            EndpointName: string | undefined;
    }
    export namespace DescribeEndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointInput) => any;
    }
    export enum EndpointStatus {
            CREATING = "Creating",
            DELETING = "Deleting",
            FAILED = "Failed",
            IN_SERVICE = "InService",
            OUT_OF_SERVICE = "OutOfService",
            ROLLING_BACK = "RollingBack",
            SYSTEM_UPDATING = "SystemUpdating",
            UPDATING = "Updating"
    }
    export enum VariantStatus {
            ACTIVATING_TRAFFIC = "ActivatingTraffic",
            BAKING = "Baking",
            CREATING = "Creating",
            DELETING = "Deleting",
            UPDATING = "Updating"
    }
    /**
        * <p>Describes the status of the production variant.</p>
        */
    export interface ProductionVariantStatus {
            /**
                * <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Creating</code>: Creating inference resources for the production variant.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Deleting</code>: Terminating inference resources for the production variant.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Updating</code>: Updating capacity for the production variant.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ActivatingTraffic</code>: Turning on traffic for the production variant.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Baking</code>: Waiting period to monitor the CloudWatch alarms in the
                *                 automatic rollback configuration.</p>
                *             </li>
                *          </ul>
                */
            Status: VariantStatus | string | undefined;
            /**
                * <p>A message that describes the status of the production variant.</p>
                */
            StatusMessage?: string;
            /**
                * <p>The start time of the current status change.</p>
                */
            StartTime?: Date;
    }
    export namespace ProductionVariantStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProductionVariantStatus) => any;
    }
    /**
        * <p>The production variant summary for a deployment when an endpoint is
        *             creating or updating with the <code>
        *                <a>CreateEndpoint</a>
        *             </code>
        *             or <code>
        *                <a>UpdateEndpoint</a>
        *             </code> operations.
        *             Describes the <code>VariantStatus </code>, weight and capacity for a production
        *             variant associated with an endpoint.
        *            </p>
        */
    export interface PendingProductionVariantSummary {
            /**
                * <p>The name of the variant.</p>
                */
            VariantName: string | undefined;
            /**
                * <p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2
                *             Container Registry paths of the inference images deployed on instances of this
                *             <code>ProductionVariant</code>.</p>
                */
            DeployedImages?: DeployedImage[];
            /**
                * <p>The weight associated with the variant.</p>
                */
            CurrentWeight?: number;
            /**
                * <p>The requested weight for the variant in this deployment, as specified in the endpoint configuration
                *             for the endpoint. The value is taken from the request to the <code>
                *                <a>CreateEndpointConfig</a>
                *             </code> operation.</p>
                */
            DesiredWeight?: number;
            /**
                * <p>The number of instances associated with the variant.</p>
                */
            CurrentInstanceCount?: number;
            /**
                * <p>The number of instances requested in this deployment, as specified in the endpoint configuration
                *             for the endpoint. The value is taken from the request to the <code>
                *                <a>CreateEndpointConfig</a>
                *             </code> operation.</p>
                */
            DesiredInstanceCount?: number;
            /**
                * <p>The type of instances associated with the variant.</p>
                */
            InstanceType?: ProductionVariantInstanceType | string;
            /**
                * <p>The size of the Elastic Inference (EI) instance to use for the production variant. EI
                *             instances provide on-demand GPU computing for inference. For more information, see
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic
                *                 Inference in Amazon SageMaker</a>.</p>
                */
            AcceleratorType?: ProductionVariantAcceleratorType | string;
            /**
                * <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
                */
            VariantStatus?: ProductionVariantStatus[];
            /**
                * <p>The serverless configuration for the endpoint.</p>
                */
            CurrentServerlessConfig?: ProductionVariantServerlessConfig;
            /**
                * <p>The serverless configuration requested for this deployment, as specified in the endpoint configuration for the endpoint.</p>
                */
            DesiredServerlessConfig?: ProductionVariantServerlessConfig;
    }
    export namespace PendingProductionVariantSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingProductionVariantSummary) => any;
    }
    /**
        * <p>The summary of an in-progress deployment when an endpoint is creating or
        *             updating with a new endpoint configuration.</p>
        */
    export interface PendingDeploymentSummary {
            /**
                * <p>The name of the endpoint configuration used in the deployment. </p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p>List of <code>PendingProductionVariantSummary</code> objects.</p>
                */
            ProductionVariants?: PendingProductionVariantSummary[];
            /**
                * <p>The start time of the deployment.</p>
                */
            StartTime?: Date;
    }
    export namespace PendingDeploymentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingDeploymentSummary) => any;
    }
    /**
        * <p>Describes weight and capacities for a production variant associated with an
        *             endpoint. If you sent a request to the <code>UpdateEndpointWeightsAndCapacities</code>
        *             API and the endpoint status is <code>Updating</code>, you get different desired and
        *             current values. </p>
        */
    export interface ProductionVariantSummary {
            /**
                * <p>The name of the variant.</p>
                */
            VariantName: string | undefined;
            /**
                * <p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2 Container Registry paths of the
                *             inference images deployed on instances of this <code>ProductionVariant</code>.</p>
                */
            DeployedImages?: DeployedImage[];
            /**
                * <p>The weight associated with the variant.</p>
                */
            CurrentWeight?: number;
            /**
                * <p>The requested weight, as specified in the
                *                 <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
                */
            DesiredWeight?: number;
            /**
                * <p>The number of instances associated with the variant.</p>
                */
            CurrentInstanceCount?: number;
            /**
                * <p>The number of instances requested in the
                *                 <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
                */
            DesiredInstanceCount?: number;
            /**
                * <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
                */
            VariantStatus?: ProductionVariantStatus[];
            /**
                * <p>The serverless configuration for the endpoint.</p>
                */
            CurrentServerlessConfig?: ProductionVariantServerlessConfig;
            /**
                * <p>The serverless configuration requested for the endpoint update.</p>
                */
            DesiredServerlessConfig?: ProductionVariantServerlessConfig;
    }
    export namespace ProductionVariantSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProductionVariantSummary) => any;
    }
    export interface DescribeEndpointOutput {
            /**
                * <p>Name of the endpoint.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>The name of the endpoint configuration associated with this endpoint.</p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p> An array of <a>ProductionVariantSummary</a> objects, one for each model
                *             hosted behind this endpoint. </p>
                */
            ProductionVariants?: ProductionVariantSummary[];
            /**
                * <p>The currently active data capture configuration used by your Endpoint.</p>
                */
            DataCaptureConfig?: DataCaptureConfigSummary;
            /**
                * <p>The status of the endpoint.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>OutOfService</code>: Endpoint is not available to take incoming
                *                     requests.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Creating</code>: <a>CreateEndpoint</a> is executing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Updating</code>: <a>UpdateEndpoint</a> or <a>UpdateEndpointWeightsAndCapacities</a> is executing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be
                *                     updated or deleted or re-scaled until it has completed. This maintenance
                *                     operation does not change any customer-specified values such as VPC config, KMS
                *                     encryption, model, instance type, or instance count.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RollingBack</code>: Endpoint fails to scale up or down or change its
                *                     variant weight and is in the process of rolling back to its previous
                *                     configuration. Once the rollback completes, endpoint returns to an
                *                         <code>InService</code> status. This transitional status only applies to an
                *                     endpoint that has autoscaling enabled and is undergoing variant weight or
                *                     capacity changes as part of an <a>UpdateEndpointWeightsAndCapacities</a> call or when the <a>UpdateEndpointWeightsAndCapacities</a> operation is called
                *                     explicitly.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InService</code>: Endpoint is available to process incoming
                *                     requests.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Deleting</code>: <a>DeleteEndpoint</a> is executing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use
                *                         <a>DescribeEndpointOutput$FailureReason</a> for information about
                *                     the failure. <a>DeleteEndpoint</a> is the only operation that can be
                *                     performed on a failed endpoint.</p>
                *             </li>
                *          </ul>
                */
            EndpointStatus: EndpointStatus | string | undefined;
            /**
                * <p>If the status of the endpoint is <code>Failed</code>, the reason why it failed.
                *         </p>
                */
            FailureReason?: string;
            /**
                * <p>A timestamp that shows when the endpoint was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp that shows when the endpoint was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The most recent deployment configuration for the endpoint.</p>
                */
            LastDeploymentConfig?: DeploymentConfig;
            /**
                * <p>Returns the description of an endpoint configuration created
                *             using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">
                *                <code>CreateEndpointConfig</code>
                *             </a> API.</p>
                */
            AsyncInferenceConfig?: AsyncInferenceConfig;
            /**
                * <p>Returns the summary of an in-progress deployment. This field is only returned when the
                *             endpoint is creating or updating with a new endpoint configuration.</p>
                */
            PendingDeploymentSummary?: PendingDeploymentSummary;
    }
    export namespace DescribeEndpointOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointOutput) => any;
    }
    export interface DescribeEndpointConfigInput {
            /**
                * <p>The name of the endpoint configuration.</p>
                */
            EndpointConfigName: string | undefined;
    }
    export namespace DescribeEndpointConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointConfigInput) => any;
    }
    export interface DescribeEndpointConfigOutput {
            /**
                * <p>Name of the SageMaker endpoint configuration.</p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>
                */
            EndpointConfigArn: string | undefined;
            /**
                * <p>An array of <code>ProductionVariant</code> objects, one for each model that you
                *             want to host at this endpoint.</p>
                */
            ProductionVariants: ProductionVariant[] | undefined;
            /**
                * <p>Configuration to control how SageMaker captures inference data.</p>
                */
            DataCaptureConfig?: DataCaptureConfig;
            /**
                * <p>Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage
                *             volume attached to the instance.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A timestamp that shows when the endpoint configuration was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Returns the description of an endpoint configuration created using the
                *             <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">
                *                <code>CreateEndpointConfig</code>
                *             </a> API.</p>
                */
            AsyncInferenceConfig?: AsyncInferenceConfig;
    }
    export namespace DescribeEndpointConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointConfigOutput) => any;
    }
    export interface DescribeExperimentRequest {
            /**
                * <p>The name of the experiment to describe.</p>
                */
            ExperimentName: string | undefined;
    }
    export namespace DescribeExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeExperimentRequest) => any;
    }
    /**
        * <p>The source of the experiment.</p>
        */
    export interface ExperimentSource {
            /**
                * <p>The Amazon Resource Name (ARN) of the source.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>The source type.</p>
                */
            SourceType?: string;
    }
    export namespace ExperimentSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentSource) => any;
    }
    export interface DescribeExperimentResponse {
            /**
                * <p>The name of the experiment.</p>
                */
            ExperimentName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the experiment.</p>
                */
            ExperimentArn?: string;
            /**
                * <p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>ExperimentName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The ARN of the source and, optionally, the type.</p>
                */
            Source?: ExperimentSource;
            /**
                * <p>The description of the experiment.</p>
                */
            Description?: string;
            /**
                * <p>When the experiment was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Who created the experiment.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the experiment was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Who last modified the experiment.</p>
                */
            LastModifiedBy?: UserContext;
    }
    export namespace DescribeExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeExperimentResponse) => any;
    }
    export interface DescribeFeatureGroupRequest {
            /**
                * <p>The name of the <code>FeatureGroup</code> you want described. </p>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>A token to resume pagination of the list of <code>Features</code>
                *             (<code>FeatureDefinitions</code>). 2,500 <code>Features</code> are returned by
                *          default.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeFeatureGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFeatureGroupRequest) => any;
    }
    export enum FeatureGroupStatus {
            CREATED = "Created",
            CREATE_FAILED = "CreateFailed",
            CREATING = "Creating",
            DELETE_FAILED = "DeleteFailed",
            DELETING = "Deleting"
    }
    export enum LastUpdateStatusValue {
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            SUCCESSFUL = "Successful"
    }
    /**
        * <p>A value that indicates whether the update was successful.</p>
        */
    export interface LastUpdateStatus {
            /**
                * <p>A value that indicates whether the update was made successful.</p>
                */
            Status: LastUpdateStatusValue | string | undefined;
            /**
                * <p>If the update wasn't successful, indicates the reason why it failed.</p>
                */
            FailureReason?: string;
    }
    export namespace LastUpdateStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LastUpdateStatus) => any;
    }
    export enum OfflineStoreStatusValue {
            ACTIVE = "Active",
            BLOCKED = "Blocked",
            DISABLED = "Disabled"
    }
    /**
        * <p>The status of <code>OfflineStore</code>.</p>
        */
    export interface OfflineStoreStatus {
            /**
                * <p>An <code>OfflineStore</code> status.</p>
                */
            Status: OfflineStoreStatusValue | string | undefined;
            /**
                * <p>The justification for why the OfflineStoreStatus is Blocked (if applicable).</p>
                */
            BlockedReason?: string;
    }
    export namespace OfflineStoreStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OfflineStoreStatus) => any;
    }
    export interface DescribeFeatureGroupResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>.  </p>
                */
            FeatureGroupArn: string | undefined;
            /**
                * <p>he name of the <code>FeatureGroup</code>.</p>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>The name of the <code>Feature</code> used for <code>RecordIdentifier</code>, whose value
                *          uniquely identifies a record stored in the feature store.</p>
                */
            RecordIdentifierFeatureName: string | undefined;
            /**
                * <p>The name of the feature that stores the <code>EventTime</code> of a Record in a
                *          <code>FeatureGroup</code>.</p>
                *          <p> An <code>EventTime</code> is a point in time when a new event occurs that
                *          corresponds to the creation or update of a <code>Record</code> in a
                *             <code>FeatureGroup</code>. All <code>Records</code> in the <code>FeatureGroup</code>
                *          have a corresponding <code>EventTime</code>.</p>
                */
            EventTimeFeatureName: string | undefined;
            /**
                * <p>A list of the <code>Features</code> in the <code>FeatureGroup</code>.
                *          Each feature is defined by a <code>FeatureName</code> and <code>FeatureType</code>.</p>
                */
            FeatureDefinitions: FeatureDefinition[] | undefined;
            /**
                * <p>A timestamp indicating when SageMaker created the <code>FeatureGroup</code>.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp indicating when the feature group was last updated.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The configuration for the <code>OnlineStore</code>.</p>
                */
            OnlineStoreConfig?: OnlineStoreConfig;
            /**
                * <p>The configuration of the <code>OfflineStore</code>, inducing the S3 location of the
                *          <code>OfflineStore</code>, Amazon Web Services Glue or Amazon Web Services Hive data catalogue configurations, and the
                *          security configuration.</p>
                */
            OfflineStoreConfig?: OfflineStoreConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the
                *          <code>OfflineStore</code> if an <code>OfflineStoreConfig</code> is provided.</p>
                */
            RoleArn?: string;
            /**
                * <p>The status of the feature group.</p>
                */
            FeatureGroupStatus?: FeatureGroupStatus | string;
            /**
                * <p>The status of the <code>OfflineStore</code>. Notifies you if replicating data into the
                *             <code>OfflineStore</code> has failed. Returns either: <code>Active</code> or
                *             <code>Blocked</code>
                *          </p>
                */
            OfflineStoreStatus?: OfflineStoreStatus;
            /**
                * <p>A value indicating whether the update made to the feature group was successful.</p>
                */
            LastUpdateStatus?: LastUpdateStatus;
            /**
                * <p>The reason that the <code>FeatureGroup</code> failed to be replicated in the
                *             <code>OfflineStore</code>. This is failure can occur because:</p>
                *          <ul>
                *             <li>
                *                <p>The <code>FeatureGroup</code> could not be created in the
                *                   <code>OfflineStore</code>.</p>
                *             </li>
                *             <li>
                *                <p>The <code>FeatureGroup</code> could not be deleted from the
                *                   <code>OfflineStore</code>.</p>
                *             </li>
                *          </ul>
                */
            FailureReason?: string;
            /**
                * <p>A free form description of the feature group.</p>
                */
            Description?: string;
            /**
                * <p>A token to resume pagination of the list of <code>Features</code>
                *             (<code>FeatureDefinitions</code>).</p>
                */
            NextToken: string | undefined;
            /**
                * <p>The size of the <code>OnlineStore</code> in bytes.</p>
                */
            OnlineStoreTotalSizeBytes?: number;
    }
    export namespace DescribeFeatureGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFeatureGroupResponse) => any;
    }
    export interface DescribeFeatureMetadataRequest {
            /**
                * <p>The name of the feature group containing the feature.</p>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>The name of the feature.</p>
                */
            FeatureName: string | undefined;
    }
    export namespace DescribeFeatureMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFeatureMetadataRequest) => any;
    }
    /**
        * <p>A key-value pair that you specify to describe the feature.</p>
        */
    export interface FeatureParameter {
            /**
                * <p>A key that must contain a value to describe the feature.</p>
                */
            Key?: string;
            /**
                * <p>The value that belongs to a key.</p>
                */
            Value?: string;
    }
    export namespace FeatureParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FeatureParameter) => any;
    }
    export interface DescribeFeatureMetadataResponse {
            /**
                * <p>The Amazon Resource Number (ARN) of the feature group that contains the feature.</p>
                */
            FeatureGroupArn: string | undefined;
            /**
                * <p>The name of the feature group that you've specified.</p>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>The name of the feature that you've specified.</p>
                */
            FeatureName: string | undefined;
            /**
                * <p>The data type of the feature.</p>
                */
            FeatureType: FeatureType | string | undefined;
            /**
                * <p>A timestamp indicating when the feature was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp indicating when the metadata for the feature group was modified. For example, if you add a parameter describing the feature, the timestamp changes to reflect the last time you </p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The description you added to describe the feature.</p>
                */
            Description?: string;
            /**
                * <p>The key-value pairs that you added to describe the feature.</p>
                */
            Parameters?: FeatureParameter[];
    }
    export namespace DescribeFeatureMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFeatureMetadataResponse) => any;
    }
    export interface DescribeFlowDefinitionRequest {
            /**
                * <p>The name of the flow definition.</p>
                */
            FlowDefinitionName: string | undefined;
    }
    export namespace DescribeFlowDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFlowDefinitionRequest) => any;
    }
    export enum FlowDefinitionStatus {
            ACTIVE = "Active",
            DELETING = "Deleting",
            FAILED = "Failed",
            INITIALIZING = "Initializing"
    }
    export interface DescribeFlowDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the flow defintion.</p>
                */
            FlowDefinitionArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the flow definition.</p>
                */
            FlowDefinitionName: string | undefined;
            /**
                * <p>The status of the flow definition. Valid values are listed below.</p>
                */
            FlowDefinitionStatus: FlowDefinitionStatus | string | undefined;
            /**
                * <p>The timestamp when the flow definition was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Container for configuring the source of human task requests. Used to specify if
                *       Amazon Rekognition or Amazon Textract is used as an integration source.</p>
                */
            HumanLoopRequestSource?: HumanLoopRequestSource;
            /**
                * <p>An object containing information about what triggers a human review workflow.</p>
                */
            HumanLoopActivationConfig?: HumanLoopActivationConfig;
            /**
                * <p>An object containing information about who works on the task, the workforce task price, and other task details.</p>
                */
            HumanLoopConfig: HumanLoopConfig | undefined;
            /**
                * <p>An object containing information about the output file.</p>
                */
            OutputConfig: FlowDefinitionOutputConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) execution role for the flow definition.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The reason your flow definition failed.</p>
                */
            FailureReason?: string;
    }
    export namespace DescribeFlowDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFlowDefinitionResponse) => any;
    }
    export interface DescribeHumanTaskUiRequest {
            /**
                * <p>The name of the human task user interface
                *       (worker task template) you want information about.</p>
                */
            HumanTaskUiName: string | undefined;
    }
    export namespace DescribeHumanTaskUiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHumanTaskUiRequest) => any;
    }
    export enum HumanTaskUiStatus {
            ACTIVE = "Active",
            DELETING = "Deleting"
    }
    /**
        * <p>Container for user interface template information.</p>
        */
    export interface UiTemplateInfo {
            /**
                * <p>The URL for the user interface template.</p>
                */
            Url?: string;
            /**
                * <p>The SHA-256 digest of the contents of the template.</p>
                */
            ContentSha256?: string;
    }
    export namespace UiTemplateInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UiTemplateInfo) => any;
    }
    export interface DescribeHumanTaskUiResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the human task user interface (worker task template).</p>
                */
            HumanTaskUiArn: string | undefined;
            /**
                * <p>The name of the human task user interface (worker task template).</p>
                */
            HumanTaskUiName: string | undefined;
            /**
                * <p>The status of the human task user interface (worker task template). Valid values are listed below.</p>
                */
            HumanTaskUiStatus?: HumanTaskUiStatus | string;
            /**
                * <p>The timestamp when the human task user interface was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Container for user interface template information.</p>
                */
            UiTemplate: UiTemplateInfo | undefined;
    }
    export namespace DescribeHumanTaskUiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHumanTaskUiResponse) => any;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2' {
    import { ActionSummary, AdditionalInferenceSpecificationDefinition, AgentVersion, AlgorithmSortBy, AlgorithmSpecification, AlgorithmSummary, AppDetails, AppImageConfigDetails, AppImageConfigSortKey, AppSortKey, AppSpecification, ArtifactSummary, AssociationEdgeType, AssociationSummary, AutoMLCandidate, AutoMLJobStatus, AutoMLJobSummary, AutoMLSortBy, AutoMLSortOrder, BatchStrategy, CandidateSortBy, CandidateStatus, Channel, CheckpointConfig, CodeRepositorySortBy, CodeRepositorySortOrder, CodeRepositorySummary, CognitoConfig, CompilationJobStatus, CompilationJobSummary, ContainerDefinition, ContextSummary, EdgeOutputConfig, FeatureDefinition, FeatureType, HyperParameterTuningJobObjectiveType, HyperParameterTuningJobStrategyType, InferenceSpecification, MetadataProperties, ModelApprovalStatus, ModelPackageStatus, MonitoringNetworkConfig, MonitoringOutputConfig, MonitoringResources, MonitoringStoppingCondition, ObjectiveStatus, OfflineStoreConfig, OnlineStoreConfig, OutputDataConfig, OutputParameter, ProductionVariantInstanceType, ResourceConfig, ResourceLimits, ResourceSpec, StoppingCondition, Tag, TransformInput, TransformOutput, TransformResources, UserContext, UserSettings, VpcConfig } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { _InstanceType, DataCaptureConfigSummary, DataProcessing, DebugHookConfig, DebugRuleConfiguration, DebugRuleEvaluationStatus, DirectInternetAccess, DomainStatus, DriftCheckBaselines, EdgePackagingJobStatus, EndpointStatus, ExperimentConfig, ExperimentSource, FeatureGroupStatus, FeatureParameter, FlowDefinitionStatus, HumanTaskConfig, HyperParameterTrainingJobDefinition, HyperParameterTuningJobConfig, HyperParameterTuningJobWarmStartConfig, InferenceExecutionConfig, InstanceMetadataServiceConfiguration, LabelingJobAlgorithmsConfig, LabelingJobInputConfig, LabelingJobOutputConfig, LabelingJobStoppingConditions, LastUpdateStatus, MemberDefinition, ModelArtifacts, ModelBiasAppSpecification, ModelBiasBaselineConfig, ModelBiasJobInput, ModelClientConfig, ModelExplainabilityAppSpecification, ModelExplainabilityBaselineConfig, ModelExplainabilityJobInput, ModelMetrics, ModelPackageValidationSpecification, ModelQualityAppSpecification, ModelQualityBaselineConfig, ModelQualityJobInput, MonitoringScheduleConfig, MonitoringType, NetworkConfig, NotebookInstanceAcceleratorType, NotebookInstanceLifecycleHook, NotificationConfiguration, OfflineStoreStatus, OfflineStoreStatusValue, ParallelismConfiguration, ProcessingInput, ProcessingOutputConfig, ProcessingResources, ProcessingStoppingCondition, ProductionVariantSummary, ProfilerConfig, ProfilerRuleConfiguration, RecommendationJobInputConfig, RecommendationJobStoppingConditions, RecommendationJobType, RetryStrategy, RootAccess, RuleEvaluationStatus, ServiceCatalogProvisioningDetails, SourceAlgorithmSpecification, SourceIpConfig, StudioLifecycleConfigAppType, TensorBoardOutputConfig, TrialComponentArtifact, TrialComponentParameterValue, TrialComponentStatus } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    export interface DescribeHyperParameterTuningJobRequest {
            /**
                * <p>The name of the tuning job.</p>
                */
            HyperParameterTuningJobName: string | undefined;
    }
    export namespace DescribeHyperParameterTuningJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHyperParameterTuningJobRequest) => any;
    }
    /**
        * <p>Shows the final value for the
        *             objective
        *             metric for a training job that was launched by a hyperparameter
        *             tuning job. You define the objective metric in the
        *                 <code>HyperParameterTuningJobObjective</code> parameter of <a>HyperParameterTuningJobConfig</a>.</p>
        */
    export interface FinalHyperParameterTuningJobObjectiveMetric {
            /**
                * <p>Whether to
                *             minimize
                *             or maximize the objective metric. Valid values are Minimize and
                *             Maximize.</p>
                */
            Type?: HyperParameterTuningJobObjectiveType | string;
            /**
                * <p>The name of the
                *             objective
                *             metric.</p>
                */
            MetricName: string | undefined;
            /**
                * <p>The value of the objective metric.</p>
                */
            Value: number | undefined;
    }
    export namespace FinalHyperParameterTuningJobObjectiveMetric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FinalHyperParameterTuningJobObjectiveMetric) => any;
    }
    export enum TrainingJobStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    /**
        * <p>The container for the summary information about a training job.</p>
        */
    export interface HyperParameterTrainingJobSummary {
            /**
                * <p>The training job definition name.</p>
                */
            TrainingJobDefinitionName?: string;
            /**
                * <p>The name of the training job.</p>
                */
            TrainingJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the training job.</p>
                */
            TrainingJobArn: string | undefined;
            /**
                * <p>The HyperParameter tuning job that launched the training job.</p>
                */
            TuningJobName?: string;
            /**
                * <p>The date and time that the training job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The date and time that the training job started.</p>
                */
            TrainingStartTime?: Date;
            /**
                * <p>Specifies the time when the training job ends on training instances. You are billed
                *             for the time interval between the value of <code>TrainingStartTime</code> and this time.
                *             For successful jobs and stopped jobs, this is the time after model artifacts are
                *             uploaded. For failed jobs, this is the time when SageMaker detects a job failure.</p>
                */
            TrainingEndTime?: Date;
            /**
                * <p>The
                *             status
                *             of the training job.</p>
                */
            TrainingJobStatus: TrainingJobStatus | string | undefined;
            /**
                * <p>A
                *             list of the hyperparameters for which you specified ranges to
                *             search.</p>
                */
            TunedHyperParameters: Record<string, string> | undefined;
            /**
                * <p>The
                *             reason that the training job failed.
                *         </p>
                */
            FailureReason?: string;
            /**
                * <p>The <a>FinalHyperParameterTuningJobObjectiveMetric</a> object that
                *             specifies the
                *             value
                *             of the
                *             objective
                *             metric of the tuning job that launched this training job.</p>
                */
            FinalHyperParameterTuningJobObjectiveMetric?: FinalHyperParameterTuningJobObjectiveMetric;
            /**
                * <p>The status of the objective metric for the training job:</p>
                *         <ul>
                *             <li>
                *                 <p>Succeeded: The
                *                     final
                *                     objective metric for the training job was evaluated by the
                *                     hyperparameter tuning job and
                *                     used
                *                     in the hyperparameter tuning process.</p>
                *             </li>
                *          </ul>
                *         <ul>
                *             <li>
                *                 <p>Pending: The training job is in progress and evaluation of its final objective
                *                     metric is pending.</p>
                *             </li>
                *          </ul>
                *         <ul>
                *             <li>
                *                 <p>Failed:
                *                     The final objective metric for the training job was not evaluated, and was not
                *                     used in the hyperparameter tuning process. This typically occurs when the
                *                     training job failed or did not emit an objective
                *                     metric.</p>
                *             </li>
                *          </ul>
                */
            ObjectiveStatus?: ObjectiveStatus | string;
    }
    export namespace HyperParameterTrainingJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterTrainingJobSummary) => any;
    }
    export enum HyperParameterTuningJobStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    /**
        * <p>Specifies the number of training jobs that this hyperparameter tuning job launched,
        *             categorized by the status of their objective metric. The objective metric status shows
        *             whether the
        *             final
        *             objective metric for the training job has been evaluated by the
        *             tuning job and used in the hyperparameter tuning process.</p>
        */
    export interface ObjectiveStatusCounters {
            /**
                * <p>The number of training jobs whose final objective metric was evaluated by the
                *             hyperparameter tuning job and used in the hyperparameter tuning process.</p>
                */
            Succeeded?: number;
            /**
                * <p>The number of training jobs that are in progress and pending evaluation of their final
                *             objective metric.</p>
                */
            Pending?: number;
            /**
                * <p>The number of training jobs whose final objective metric was not evaluated and used in
                *             the hyperparameter tuning process. This typically occurs when the training job failed or
                *             did not emit an objective metric.</p>
                */
            Failed?: number;
    }
    export namespace ObjectiveStatusCounters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ObjectiveStatusCounters) => any;
    }
    /**
        * <p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by
        *             status.</p>
        */
    export interface TrainingJobStatusCounters {
            /**
                * <p>The number of completed training jobs launched by the hyperparameter tuning
                *             job.</p>
                */
            Completed?: number;
            /**
                * <p>The number of in-progress training jobs launched by a hyperparameter tuning
                *             job.</p>
                */
            InProgress?: number;
            /**
                * <p>The number of training jobs that failed, but can be retried. A failed training job can
                *             be retried only if it failed because an internal service error occurred.</p>
                */
            RetryableError?: number;
            /**
                * <p>The number of training jobs that failed and can't be retried. A failed training job
                *             can't be retried if it failed because a client error occurred.</p>
                */
            NonRetryableError?: number;
            /**
                * <p>The number of training jobs launched by a hyperparameter tuning job that were
                *             manually
                *             stopped.</p>
                */
            Stopped?: number;
    }
    export namespace TrainingJobStatusCounters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingJobStatusCounters) => any;
    }
    export interface DescribeHyperParameterTuningJobResponse {
            /**
                * <p>The name of the tuning job.</p>
                */
            HyperParameterTuningJobName: string | undefined;
            /**
                * <p>The
                *             Amazon Resource Name (ARN) of the tuning job.</p>
                */
            HyperParameterTuningJobArn: string | undefined;
            /**
                * <p>The <a>HyperParameterTuningJobConfig</a> object that specifies the
                *             configuration of the tuning job.</p>
                */
            HyperParameterTuningJobConfig: HyperParameterTuningJobConfig | undefined;
            /**
                * <p>The <a>HyperParameterTrainingJobDefinition</a> object that specifies the
                *             definition of the training jobs that this tuning job launches.</p>
                */
            TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
            /**
                * <p>A list of the <a>HyperParameterTrainingJobDefinition</a> objects launched
                *             for this tuning job.</p>
                */
            TrainingJobDefinitions?: HyperParameterTrainingJobDefinition[];
            /**
                * <p>The status of the tuning job: InProgress, Completed, Failed, Stopping, or
                *             Stopped.</p>
                */
            HyperParameterTuningJobStatus: HyperParameterTuningJobStatus | string | undefined;
            /**
                * <p>The date and time that the tuning job started.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The date and time that the tuning job ended.</p>
                */
            HyperParameterTuningEndTime?: Date;
            /**
                * <p>The date and time that the status of the tuning job was modified. </p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The <a>TrainingJobStatusCounters</a> object that specifies the number of
                *             training jobs, categorized by status, that this tuning job launched.</p>
                */
            TrainingJobStatusCounters: TrainingJobStatusCounters | undefined;
            /**
                * <p>The <a>ObjectiveStatusCounters</a> object that specifies the number of
                *             training jobs, categorized by the status of their final objective metric, that this
                *             tuning job launched.</p>
                */
            ObjectiveStatusCounters: ObjectiveStatusCounters | undefined;
            /**
                * <p>A <a>TrainingJobSummary</a> object that describes the training job that
                *             completed with the best current <a>HyperParameterTuningJobObjective</a>.</p>
                */
            BestTrainingJob?: HyperParameterTrainingJobSummary;
            /**
                * <p>If the hyperparameter tuning job is an warm start tuning job with a
                *                 <code>WarmStartType</code> of <code>IDENTICAL_DATA_AND_ALGORITHM</code>, this is the
                *                 <a>TrainingJobSummary</a> for the training job with the best objective
                *             metric value of all training jobs launched by this tuning job and all parent jobs
                *             specified for the warm start tuning job.</p>
                */
            OverallBestTrainingJob?: HyperParameterTrainingJobSummary;
            /**
                * <p>The configuration for starting the hyperparameter parameter tuning job using one or
                *             more previous tuning jobs as a starting point. The results of previous tuning jobs are
                *             used to inform which combinations of hyperparameters to search over in the new tuning
                *             job.</p>
                */
            WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
            /**
                * <p>If the tuning job failed, the reason it failed.</p>
                */
            FailureReason?: string;
    }
    export namespace DescribeHyperParameterTuningJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHyperParameterTuningJobResponse) => any;
    }
    export interface DescribeImageRequest {
            /**
                * <p>The name of the image to describe.</p>
                */
            ImageName: string | undefined;
    }
    export namespace DescribeImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImageRequest) => any;
    }
    export enum ImageStatus {
            CREATED = "CREATED",
            CREATE_FAILED = "CREATE_FAILED",
            CREATING = "CREATING",
            DELETE_FAILED = "DELETE_FAILED",
            DELETING = "DELETING",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATING = "UPDATING"
    }
    export interface DescribeImageResponse {
            /**
                * <p>When the image was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The description of the image.</p>
                */
            Description?: string;
            /**
                * <p>The name of the image as displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>When a create, update, or delete operation fails, the reason for the failure.</p>
                */
            FailureReason?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the image.</p>
                */
            ImageArn?: string;
            /**
                * <p>The name of the image.</p>
                */
            ImageName?: string;
            /**
                * <p>The status of the image.</p>
                */
            ImageStatus?: ImageStatus | string;
            /**
                * <p>When the image was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
                */
            RoleArn?: string;
    }
    export namespace DescribeImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImageResponse) => any;
    }
    export interface DescribeImageVersionRequest {
            /**
                * <p>The name of the image.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>The version of the image. If not specified, the latest version is described.</p>
                */
            Version?: number;
    }
    export namespace DescribeImageVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImageVersionRequest) => any;
    }
    export enum ImageVersionStatus {
            CREATED = "CREATED",
            CREATE_FAILED = "CREATE_FAILED",
            CREATING = "CREATING",
            DELETE_FAILED = "DELETE_FAILED",
            DELETING = "DELETING"
    }
    export interface DescribeImageVersionResponse {
            /**
                * <p>The registry path of the container image on which this image version is based.</p>
                */
            BaseImage?: string;
            /**
                * <p>The registry path of the container image that contains this image version.</p>
                */
            ContainerImage?: string;
            /**
                * <p>When the version was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When a create or delete operation fails, the reason for the failure.</p>
                */
            FailureReason?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the image the version is based on.</p>
                */
            ImageArn?: string;
            /**
                * <p>The ARN of the version.</p>
                */
            ImageVersionArn?: string;
            /**
                * <p>The status of the version.</p>
                */
            ImageVersionStatus?: ImageVersionStatus | string;
            /**
                * <p>When the version was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The version number.</p>
                */
            Version?: number;
    }
    export namespace DescribeImageVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeImageVersionResponse) => any;
    }
    export interface DescribeInferenceRecommendationsJobRequest {
            /**
                * <p>The name of the job. The name must be unique within an
                *            Amazon Web Services Region in the Amazon Web Services account.</p>
                */
            JobName: string | undefined;
    }
    export namespace DescribeInferenceRecommendationsJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInferenceRecommendationsJobRequest) => any;
    }
    /**
        * <p>The endpoint configuration made by Inference Recommender during a recommendation job.</p>
        */
    export interface EndpointOutputConfiguration {
            /**
                * <p>The name of the endpoint made during a recommendation job.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The name of the production variant (deployed model) made during a recommendation job.</p>
                */
            VariantName: string | undefined;
            /**
                * <p>The instance type recommended by Amazon SageMaker Inference Recommender.</p>
                */
            InstanceType: ProductionVariantInstanceType | string | undefined;
            /**
                * <p>The number of instances recommended to launch initially.</p>
                */
            InitialInstanceCount: number | undefined;
    }
    export namespace EndpointOutputConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointOutputConfiguration) => any;
    }
    /**
        * <p>The metrics of recommendations.</p>
        */
    export interface RecommendationMetrics {
            /**
                * <p>Defines the cost per hour for the instance. </p>
                */
            CostPerHour: number | undefined;
            /**
                * <p>Defines the cost per inference for the instance .</p>
                */
            CostPerInference: number | undefined;
            /**
                * <p>The expected maximum number of requests per minute for the instance.</p>
                */
            MaxInvocations: number | undefined;
            /**
                * <p>The expected model latency at maximum invocation per minute for the instance.</p>
                */
            ModelLatency: number | undefined;
    }
    export namespace RecommendationMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationMetrics) => any;
    }
    /**
        * <p>A list of environment parameters suggested by the Amazon SageMaker Inference Recommender.</p>
        */
    export interface EnvironmentParameter {
            /**
                * <p>The environment key suggested by the Amazon SageMaker Inference Recommender.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value type suggested by the Amazon SageMaker Inference Recommender.</p>
                */
            ValueType: string | undefined;
            /**
                * <p>The value suggested by the Amazon SageMaker Inference Recommender.</p>
                */
            Value: string | undefined;
    }
    export namespace EnvironmentParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentParameter) => any;
    }
    /**
        * <p>Defines the model configuration. Includes the specification name and environment parameters.</p>
        */
    export interface ModelConfiguration {
            /**
                * <p>The inference specification name in the model package version.</p>
                */
            InferenceSpecificationName?: string;
            /**
                * <p>Defines the environment parameters that includes key, value types, and values.</p>
                */
            EnvironmentParameters?: EnvironmentParameter[];
    }
    export namespace ModelConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelConfiguration) => any;
    }
    /**
        * <p>A list of recommendations made by Amazon SageMaker Inference Recommender.</p>
        */
    export interface InferenceRecommendation {
            /**
                * <p>The metrics used to decide what recommendation to make.</p>
                */
            Metrics: RecommendationMetrics | undefined;
            /**
                * <p>Defines the endpoint configuration parameters.</p>
                */
            EndpointConfiguration: EndpointOutputConfiguration | undefined;
            /**
                * <p>Defines the model configuration.</p>
                */
            ModelConfiguration: ModelConfiguration | undefined;
    }
    export namespace InferenceRecommendation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferenceRecommendation) => any;
    }
    export enum RecommendationJobStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            PENDING = "PENDING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING"
    }
    export interface DescribeInferenceRecommendationsJobResponse {
            /**
                * <p>The name of the job. The name must be unique within an
                *            Amazon Web Services Region in the Amazon Web Services account.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The job description that you provided when you initiated the job.</p>
                */
            JobDescription?: string;
            /**
                * <p>The job type that you provided when you initiated the job.</p>
                */
            JobType: RecommendationJobType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the job.</p>
                */
            JobArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services
                *            Identity and Access Management (IAM) role you provided when you initiated the job.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The status of the job.</p>
                */
            Status: RecommendationJobStatus | string | undefined;
            /**
                * <p>A timestamp that shows when the job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp that shows when the job completed.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>A timestamp that shows when the job was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>If the job fails, provides information why the job failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>Returns information about the versioned model package Amazon Resource Name (ARN),
                *     the traffic pattern, and endpoint configurations you provided when you initiated the job.</p>
                */
            InputConfig: RecommendationJobInputConfig | undefined;
            /**
                * <p>The stopping conditions that you provided when you initiated the job.</p>
                */
            StoppingConditions?: RecommendationJobStoppingConditions;
            /**
                * <p>The recommendations made by Inference Recommender.</p>
                */
            InferenceRecommendations?: InferenceRecommendation[];
    }
    export namespace DescribeInferenceRecommendationsJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInferenceRecommendationsJobResponse) => any;
    }
    export interface DescribeLabelingJobRequest {
            /**
                * <p>The name of the labeling job to return information for.</p>
                */
            LabelingJobName: string | undefined;
    }
    export namespace DescribeLabelingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLabelingJobRequest) => any;
    }
    /**
        * <p>Provides a breakdown of the number of objects labeled.</p>
        */
    export interface LabelCounters {
            /**
                * <p>The total number of objects labeled.</p>
                */
            TotalLabeled?: number;
            /**
                * <p>The total number of objects labeled by a human worker.</p>
                */
            HumanLabeled?: number;
            /**
                * <p>The total number of objects labeled by automated data labeling.</p>
                */
            MachineLabeled?: number;
            /**
                * <p>The total number of objects that could not be labeled due to an error.</p>
                */
            FailedNonRetryableError?: number;
            /**
                * <p>The total number of objects not yet labeled.</p>
                */
            Unlabeled?: number;
    }
    export namespace LabelCounters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelCounters) => any;
    }
    /**
        * <p>Specifies the location of the output produced by the labeling job. </p>
        */
    export interface LabelingJobOutput {
            /**
                * <p>The Amazon S3 bucket location of the manifest file for labeled data. </p>
                */
            OutputDatasetS3Uri: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the most recent SageMaker model trained as part of
                *             automated data labeling. </p>
                */
            FinalActiveLearningModelArn?: string;
    }
    export namespace LabelingJobOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobOutput) => any;
    }
    export enum LabelingJobStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            INITIALIZING = "Initializing",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    export interface DescribeLabelingJobResponse {
            /**
                * <p>The processing status of the labeling job. </p>
                */
            LabelingJobStatus: LabelingJobStatus | string | undefined;
            /**
                * <p>Provides a breakdown of the number of data objects labeled by humans, the number of
                *             objects labeled by machine, the number of objects than couldn't be labeled, and the
                *             total number of objects labeled. </p>
                */
            LabelCounters: LabelCounters | undefined;
            /**
                * <p>If the job failed, the reason that it failed. </p>
                */
            FailureReason?: string;
            /**
                * <p>The date and time that the labeling job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The date and time that the labeling job was last updated.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>A unique identifier for work done as part of a labeling job.</p>
                */
            JobReferenceCode: string | undefined;
            /**
                * <p>The name assigned to the labeling job when it was created.</p>
                */
            LabelingJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the labeling job.</p>
                */
            LabelingJobArn: string | undefined;
            /**
                * <p>The attribute used as the label in the output manifest file.</p>
                */
            LabelAttributeName?: string;
            /**
                * <p>Input configuration information for the labeling job, such as the Amazon S3 location of the
                *             data objects and the location of the manifest file that describes the data
                *             objects.</p>
                */
            InputConfig: LabelingJobInputConfig | undefined;
            /**
                * <p>The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to
                *             encrypt the output data, if any.</p>
                */
            OutputConfig: LabelingJobOutputConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf
                *             during data labeling.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The S3 location of the JSON file that defines the categories used to label data
                *             objects. Please note the following label-category limits:</p>
                *         <ul>
                *             <li>
                *                 <p>Semantic segmentation labeling jobs using automated labeling: 20 labels</p>
                *             </li>
                *             <li>
                *                 <p>Box bounding labeling jobs (all): 10 labels</p>
                *             </li>
                *          </ul>
                *         <p>The file is a JSON structure in the following format:</p>
                *         <p>
                *             <code>{</code>
                *         </p>
                *         <p>
                *             <code> "document-version": "2018-11-28"</code>
                *         </p>
                *         <p>
                *             <code> "labels": [</code>
                *         </p>
                *         <p>
                *             <code> {</code>
                *         </p>
                *         <p>
                *             <code> "label": "<i>label 1</i>"</code>
                *         </p>
                *         <p>
                *             <code> },</code>
                *         </p>
                *         <p>
                *             <code> {</code>
                *         </p>
                *         <p>
                *             <code> "label": "<i>label 2</i>"</code>
                *         </p>
                *         <p>
                *             <code> },</code>
                *         </p>
                *         <p>
                *             <code> ...</code>
                *         </p>
                *         <p>
                *             <code> {</code>
                *         </p>
                *         <p>
                *             <code> "label": "<i>label n</i>"</code>
                *         </p>
                *         <p>
                *             <code> }</code>
                *         </p>
                *         <p>
                *             <code> ]</code>
                *         </p>
                *         <p>
                *             <code>}</code>
                *         </p>
                */
            LabelCategoryConfigS3Uri?: string;
            /**
                * <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the
                *             job is automatically stopped.</p>
                */
            StoppingConditions?: LabelingJobStoppingConditions;
            /**
                * <p>Configuration information for automated data labeling.</p>
                */
            LabelingJobAlgorithmsConfig?: LabelingJobAlgorithmsConfig;
            /**
                * <p>Configuration information required for human workers to complete a labeling
                *             task.</p>
                */
            HumanTaskConfig: HumanTaskConfig | undefined;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The location of the output produced by the labeling job.</p>
                */
            LabelingJobOutput?: LabelingJobOutput;
    }
    export namespace DescribeLabelingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLabelingJobResponse) => any;
    }
    export interface DescribeLineageGroupRequest {
            /**
                * <p>The name of the lineage group.</p>
                */
            LineageGroupName: string | undefined;
    }
    export namespace DescribeLineageGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLineageGroupRequest) => any;
    }
    export interface DescribeLineageGroupResponse {
            /**
                * <p>The name of the lineage group.</p>
                */
            LineageGroupName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupArn?: string;
            /**
                * <p>The display name of the lineage group.</p>
                */
            DisplayName?: string;
            /**
                * <p>The description of the lineage group.</p>
                */
            Description?: string;
            /**
                * <p>The creation time of lineage group.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>The last modified time of the lineage group.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
    }
    export namespace DescribeLineageGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLineageGroupResponse) => any;
    }
    export interface DescribeModelInput {
            /**
                * <p>The name of the model.</p>
                */
            ModelName: string | undefined;
    }
    export namespace DescribeModelInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelInput) => any;
    }
    export interface DescribeModelOutput {
            /**
                * <p>Name of the SageMaker model.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The location of the primary inference code, associated artifacts, and custom
                *             environment map that the inference code uses when it is deployed in production.
                *         </p>
                */
            PrimaryContainer?: ContainerDefinition;
            /**
                * <p>The containers in the inference pipeline.</p>
                */
            Containers?: ContainerDefinition[];
            /**
                * <p>Specifies details of how containers in a multi-container endpoint are called.</p>
                */
            InferenceExecutionConfig?: InferenceExecutionConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the
                *             model.</p>
                */
            ExecutionRoleArn: string | undefined;
            /**
                * <p>A <a>VpcConfig</a> object that specifies the VPC that this model has access
                *             to. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual
                *                 Private Cloud</a>
                *          </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>A timestamp that shows when the model was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the model.</p>
                */
            ModelArn: string | undefined;
            /**
                * <p>If <code>True</code>, no inbound or outbound network calls can be made to or from the
                *             model container.</p>
                */
            EnableNetworkIsolation?: boolean;
    }
    export namespace DescribeModelOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelOutput) => any;
    }
    export interface DescribeModelBiasJobDefinitionRequest {
            /**
                * <p>The name of the model bias job definition. The name must be unique within an Amazon Web Services Region
                *          in the Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DescribeModelBiasJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelBiasJobDefinitionRequest) => any;
    }
    export interface DescribeModelBiasJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the model bias job.</p>
                */
            JobDefinitionArn: string | undefined;
            /**
                * <p>The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the
                *          Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>The time at which the model bias job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The baseline configuration for a model bias job.</p>
                */
            ModelBiasBaselineConfig?: ModelBiasBaselineConfig;
            /**
                * <p>Configures the model bias job to run a specified Docker container image.</p>
                */
            ModelBiasAppSpecification: ModelBiasAppSpecification | undefined;
            /**
                * <p>Inputs for the model bias job.</p>
                */
            ModelBiasJobInput: ModelBiasJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            ModelBiasJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>Networking options for a model bias job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that
                *          has read permission to the input data location and write permission to the output data
                *          location in Amazon S3.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
    }
    export namespace DescribeModelBiasJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelBiasJobDefinitionResponse) => any;
    }
    export interface DescribeModelExplainabilityJobDefinitionRequest {
            /**
                * <p>The name of the model explainability job definition. The name must be unique within an
                *          Amazon Web Services Region in the Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DescribeModelExplainabilityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelExplainabilityJobDefinitionRequest) => any;
    }
    export interface DescribeModelExplainabilityJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the model explainability job.</p>
                */
            JobDefinitionArn: string | undefined;
            /**
                * <p>The name of the explainability job definition. The name must be unique within an Amazon Web Services
                *          Region in the Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>The time at which the model explainability job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The baseline configuration for a model explainability job.</p>
                */
            ModelExplainabilityBaselineConfig?: ModelExplainabilityBaselineConfig;
            /**
                * <p>Configures the model explainability job to run a specified Docker container
                *          image.</p>
                */
            ModelExplainabilityAppSpecification: ModelExplainabilityAppSpecification | undefined;
            /**
                * <p>Inputs for the model explainability job.</p>
                */
            ModelExplainabilityJobInput: ModelExplainabilityJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            ModelExplainabilityJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>Networking options for a model explainability job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that
                *          has read permission to the input data location and write permission to the output data
                *          location in Amazon S3.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
    }
    export namespace DescribeModelExplainabilityJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelExplainabilityJobDefinitionResponse) => any;
    }
    export interface DescribeModelPackageInput {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the model package to describe.</p>
                *         <p>When you specify a name, the name must have 1 to 63 characters. Valid
                *             characters are a-z, A-Z, 0-9, and - (hyphen).</p>
                */
            ModelPackageName: string | undefined;
    }
    export namespace DescribeModelPackageInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelPackageInput) => any;
    }
    export enum DetailedModelPackageStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            NOT_STARTED = "NotStarted"
    }
    /**
        * <p>Represents the overall status of a model package.</p>
        */
    export interface ModelPackageStatusItem {
            /**
                * <p>The name of the model package for which the overall status is being reported.</p>
                */
            Name: string | undefined;
            /**
                * <p>The current status.</p>
                */
            Status: DetailedModelPackageStatus | string | undefined;
            /**
                * <p>if the overall status is <code>Failed</code>, the reason for the failure.</p>
                */
            FailureReason?: string;
    }
    export namespace ModelPackageStatusItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageStatusItem) => any;
    }
    /**
        * <p>Specifies the validation and image scan statuses of the model package.</p>
        */
    export interface ModelPackageStatusDetails {
            /**
                * <p>The validation status of the model package.</p>
                */
            ValidationStatuses: ModelPackageStatusItem[] | undefined;
            /**
                * <p>The status of the scan of the Docker image container for the model package.</p>
                */
            ImageScanStatuses?: ModelPackageStatusItem[];
    }
    export namespace ModelPackageStatusDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageStatusDetails) => any;
    }
    export interface DescribeModelPackageOutput {
            /**
                * <p>The name of the model package being described.</p>
                */
            ModelPackageName: string | undefined;
            /**
                * <p>If the model is a versioned model, the name of the model group that the versioned
                *             model belongs to.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>The version of the model package.</p>
                */
            ModelPackageVersion?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the model package.</p>
                */
            ModelPackageArn: string | undefined;
            /**
                * <p>A brief summary of the model package.</p>
                */
            ModelPackageDescription?: string;
            /**
                * <p>A timestamp specifying when the model package was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Details about inference jobs that can be run with models based on this model
                *             package.</p>
                */
            InferenceSpecification?: InferenceSpecification;
            /**
                * <p>Details about the algorithm that was used to create the model package.</p>
                */
            SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
            /**
                * <p>Configurations for one or more transform jobs that SageMaker runs to test the model
                *             package.</p>
                */
            ValidationSpecification?: ModelPackageValidationSpecification;
            /**
                * <p>The current status of the model package.</p>
                */
            ModelPackageStatus: ModelPackageStatus | string | undefined;
            /**
                * <p>Details about the current status of the model package.</p>
                */
            ModelPackageStatusDetails: ModelPackageStatusDetails | undefined;
            /**
                * <p>Whether the model package is certified for listing on Amazon Web Services Marketplace.</p>
                */
            CertifyForMarketplace?: boolean;
            /**
                * <p>The approval status of the model package.</p>
                */
            ModelApprovalStatus?: ModelApprovalStatus | string;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>Metrics for the model.</p>
                */
            ModelMetrics?: ModelMetrics;
            /**
                * <p>The last time that the model package was modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>A description provided for the model approval.</p>
                */
            ApprovalDescription?: string;
            /**
                * <p>The metadata properties associated with the model package versions.</p>
                */
            CustomerMetadataProperties?: Record<string, string>;
            /**
                * <p>Represents the drift check baselines that can be used when the model monitor is set using the model package.
                *             For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>.
                *         </p>
                */
            DriftCheckBaselines?: DriftCheckBaselines;
            /**
                * <p>The machine learning domain of the model package you specified. Common machine
                *     learning domains include computer vision and natural language processing.</p>
                */
            Domain?: string;
            /**
                * <p>The machine learning task you specified that your model package accomplishes.
                *      Common machine learning tasks include object detection and image classification.</p>
                */
            Task?: string;
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path points to a single
                *     gzip compressed tar archive (.tar.gz suffix).</p>
                */
            SamplePayloadUrl?: string;
            /**
                * <p>An array of additional Inference Specification objects. Each additional
                *     Inference Specification specifies artifacts based on this model package that can
                *     be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
                */
            AdditionalInferenceSpecifications?: AdditionalInferenceSpecificationDefinition[];
    }
    export namespace DescribeModelPackageOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelPackageOutput) => any;
    }
    export interface DescribeModelPackageGroupInput {
            /**
                * <p>The name of gthe model group to describe.</p>
                */
            ModelPackageGroupName: string | undefined;
    }
    export namespace DescribeModelPackageGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelPackageGroupInput) => any;
    }
    export enum ModelPackageGroupStatus {
            COMPLETED = "Completed",
            DELETE_FAILED = "DeleteFailed",
            DELETING = "Deleting",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            PENDING = "Pending"
    }
    export interface DescribeModelPackageGroupOutput {
            /**
                * <p>The name of the model group.</p>
                */
            ModelPackageGroupName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the model group.</p>
                */
            ModelPackageGroupArn: string | undefined;
            /**
                * <p>A description of the model group.</p>
                */
            ModelPackageGroupDescription?: string;
            /**
                * <p>The time that the model group was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy: UserContext | undefined;
            /**
                * <p>The status of the model group.</p>
                */
            ModelPackageGroupStatus: ModelPackageGroupStatus | string | undefined;
    }
    export namespace DescribeModelPackageGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelPackageGroupOutput) => any;
    }
    export interface DescribeModelQualityJobDefinitionRequest {
            /**
                * <p>The name of the model quality job. The name must be unique within an Amazon Web Services Region in the
                *          Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
    }
    export namespace DescribeModelQualityJobDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelQualityJobDefinitionRequest) => any;
    }
    export interface DescribeModelQualityJobDefinitionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the model quality job.</p>
                */
            JobDefinitionArn: string | undefined;
            /**
                * <p>The name of the quality job definition. The name must be unique within an Amazon Web Services Region in
                *          the Amazon Web Services account.</p>
                */
            JobDefinitionName: string | undefined;
            /**
                * <p>The time at which the model quality job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The baseline configuration for a model quality job.</p>
                */
            ModelQualityBaselineConfig?: ModelQualityBaselineConfig;
            /**
                * <p>Configures the model quality job to run a specified Docker container image.</p>
                */
            ModelQualityAppSpecification: ModelQualityAppSpecification | undefined;
            /**
                * <p>Inputs for the model quality job.</p>
                */
            ModelQualityJobInput: ModelQualityJobInput | undefined;
            /**
                * <p>The output configuration for monitoring jobs.</p>
                */
            ModelQualityJobOutputConfig: MonitoringOutputConfig | undefined;
            /**
                * <p>Identifies the resources to deploy for a monitoring job.</p>
                */
            JobResources: MonitoringResources | undefined;
            /**
                * <p>Networking options for a model quality job.</p>
                */
            NetworkConfig?: MonitoringNetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
                *          perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
                */
            StoppingCondition?: MonitoringStoppingCondition;
    }
    export namespace DescribeModelQualityJobDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelQualityJobDefinitionResponse) => any;
    }
    export interface DescribeMonitoringScheduleRequest {
            /**
                * <p>Name of a previously created monitoring schedule.</p>
                */
            MonitoringScheduleName: string | undefined;
    }
    export namespace DescribeMonitoringScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMonitoringScheduleRequest) => any;
    }
    export enum ExecutionStatus {
            COMPLETED = "Completed",
            COMPLETED_WITH_VIOLATIONS = "CompletedWithViolations",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            PENDING = "Pending",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    /**
        * <p>Summary of information about the last monitoring job to run.</p>
        */
    export interface MonitoringExecutionSummary {
            /**
                * <p>The name of the monitoring schedule.</p>
                */
            MonitoringScheduleName: string | undefined;
            /**
                * <p>The time the monitoring job was scheduled.</p>
                */
            ScheduledTime: Date | undefined;
            /**
                * <p>The time at which the monitoring job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp that indicates the last time the monitoring job was modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The status of the monitoring job.</p>
                */
            MonitoringExecutionStatus: ExecutionStatus | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the monitoring job.</p>
                */
            ProcessingJobArn?: string;
            /**
                * <p>The name of the endpoint used to run the monitoring job.</p>
                */
            EndpointName?: string;
            /**
                * <p>Contains the reason a monitoring job failed, if it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The name of the monitoring job.</p>
                */
            MonitoringJobDefinitionName?: string;
            /**
                * <p>The type of the monitoring job.</p>
                */
            MonitoringType?: MonitoringType | string;
    }
    export namespace MonitoringExecutionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringExecutionSummary) => any;
    }
    export enum ScheduleStatus {
            FAILED = "Failed",
            PENDING = "Pending",
            SCHEDULED = "Scheduled",
            STOPPED = "Stopped"
    }
    export interface DescribeMonitoringScheduleResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
                */
            MonitoringScheduleArn: string | undefined;
            /**
                * <p>Name of the monitoring schedule.</p>
                */
            MonitoringScheduleName: string | undefined;
            /**
                * <p>The status of an monitoring job.</p>
                */
            MonitoringScheduleStatus: ScheduleStatus | string | undefined;
            /**
                * <p>The type of the monitoring job that this schedule runs. This is one of the following
                *          values.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring
                *                job.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring
                *                job.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability
                *                monitoring job.</p>
                *             </li>
                *          </ul>
                */
            MonitoringType?: MonitoringType | string;
            /**
                * <p>A string, up to one KB in size, that contains the reason a monitoring job failed, if it
                *          failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The time at which the monitoring job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The time at which the monitoring job was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The configuration object that specifies the monitoring schedule and defines the
                *          monitoring job.</p>
                */
            MonitoringScheduleConfig: MonitoringScheduleConfig | undefined;
            /**
                * <p> The name of the endpoint for the monitoring job.</p>
                */
            EndpointName?: string;
            /**
                * <p>Describes metadata on the last execution to run, if there was one.</p>
                */
            LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
    }
    export namespace DescribeMonitoringScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMonitoringScheduleResponse) => any;
    }
    export interface DescribeNotebookInstanceInput {
            /**
                * <p>The name of the notebook instance that you want information about.</p>
                */
            NotebookInstanceName: string | undefined;
    }
    export namespace DescribeNotebookInstanceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotebookInstanceInput) => any;
    }
    export enum NotebookInstanceStatus {
            Deleting = "Deleting",
            Failed = "Failed",
            InService = "InService",
            Pending = "Pending",
            Stopped = "Stopped",
            Stopping = "Stopping",
            Updating = "Updating"
    }
    export interface DescribeNotebookInstanceOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
                */
            NotebookInstanceArn?: string;
            /**
                * <p>The name of the SageMaker notebook instance. </p>
                */
            NotebookInstanceName?: string;
            /**
                * <p>The status of the notebook instance.</p>
                */
            NotebookInstanceStatus?: NotebookInstanceStatus | string;
            /**
                * <p>If status is <code>Failed</code>, the reason it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The URL that you use to connect to the Jupyter notebook that is running in your
                *             notebook instance. </p>
                */
            Url?: string;
            /**
                * <p>The type of ML compute instance running on the notebook instance.</p>
                */
            InstanceType?: _InstanceType | string;
            /**
                * <p>The ID of the VPC subnet.</p>
                */
            SubnetId?: string;
            /**
                * <p>The IDs of the VPC security groups.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role associated with the instance.
                *         </p>
                */
            RoleArn?: string;
            /**
                * <p>The Amazon Web Services KMS key ID SageMaker uses to encrypt data when storing it on the ML storage
                *             volume attached to the instance. </p>
                */
            KmsKeyId?: string;
            /**
                * <p>The network interface IDs that SageMaker created at the time of creating the instance.
                *         </p>
                */
            NetworkInterfaceId?: string;
            /**
                * <p>A timestamp. Use this parameter to retrieve the time when the notebook instance was
                *             last modified. </p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A timestamp. Use this parameter to return the time when the notebook instance was
                *             created</p>
                */
            CreationTime?: Date;
            /**
                * <p>Returns the name of a notebook instance lifecycle configuration.</p>
                *         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
                *                 2.1: (Optional) Customize a Notebook Instance</a>
                *         </p>
                */
            NotebookInstanceLifecycleConfigName?: string;
            /**
                * <p>Describes whether SageMaker provides internet access to the notebook instance. If this
                *             value is set to <i>Disabled</i>, the notebook instance does not have
                *             internet access, and cannot connect to SageMaker training and endpoint services.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook Instances Are Internet-Enabled by Default</a>.</p>
                */
            DirectInternetAccess?: DirectInternetAccess | string;
            /**
                * <p>The size, in GB, of the ML storage volume attached to the notebook instance.</p>
                */
            VolumeSizeInGB?: number;
            /**
                * <p>A list of the Elastic Inference (EI) instance types associated with this notebook
                *             instance. Currently only one EI instance type can be associated with a notebook
                *             instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon
                *                 SageMaker</a>.</p>
                */
            AcceleratorTypes?: (NotebookInstanceAcceleratorType | string)[];
            /**
                * <p>The Git repository associated with the notebook instance as its default code
                *             repository. This can be either the name of a Git repository stored as a resource in your
                *             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. When you open a notebook instance, it opens in the directory that
                *             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker
                *                 Notebook Instances</a>.</p>
                */
            DefaultCodeRepository?: string;
            /**
                * <p>An array of up to three Git repositories associated with the notebook instance. These
                *             can be either the names of Git repositories stored as resources in your account, or the
                *             URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. These repositories are cloned at the same level as the default
                *             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
                *                 Repositories with SageMaker Notebook Instances</a>.</p>
                */
            AdditionalCodeRepositories?: string[];
            /**
                * <p>Whether root access is enabled or disabled for users of the notebook instance.</p>
                *         <note>
                *             <p>Lifecycle configurations need root access to be able to set up a notebook
                *                 instance. Because of this, lifecycle configurations associated with a notebook
                *                 instance always run with root access even if you disable root access for
                *                 users.</p>
                *         </note>
                */
            RootAccess?: RootAccess | string;
            /**
                * <p>The platform identifier of the notebook instance runtime environment.</p>
                */
            PlatformIdentifier?: string;
            /**
                * <p>Information on the IMDS configuration of the notebook instance</p>
                */
            InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
    }
    export namespace DescribeNotebookInstanceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotebookInstanceOutput) => any;
    }
    export interface DescribeNotebookInstanceLifecycleConfigInput {
            /**
                * <p>The name of the lifecycle configuration to describe.</p>
                */
            NotebookInstanceLifecycleConfigName: string | undefined;
    }
    export namespace DescribeNotebookInstanceLifecycleConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotebookInstanceLifecycleConfigInput) => any;
    }
    export interface DescribeNotebookInstanceLifecycleConfigOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigArn?: string;
            /**
                * <p>The name of the lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigName?: string;
            /**
                * <p>The shell script that runs only once, when you create a notebook instance.</p>
                */
            OnCreate?: NotebookInstanceLifecycleHook[];
            /**
                * <p>The shell script that runs every time you start a notebook instance, including when
                *             you create the notebook instance.</p>
                */
            OnStart?: NotebookInstanceLifecycleHook[];
            /**
                * <p>A timestamp that tells when the lifecycle configuration was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A timestamp that tells when the lifecycle configuration was created.</p>
                */
            CreationTime?: Date;
    }
    export namespace DescribeNotebookInstanceLifecycleConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotebookInstanceLifecycleConfigOutput) => any;
    }
    export interface DescribePipelineRequest {
            /**
                * <p>The name of the pipeline to describe.</p>
                */
            PipelineName: string | undefined;
    }
    export namespace DescribePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineRequest) => any;
    }
    export enum PipelineStatus {
            ACTIVE = "Active"
    }
    export interface DescribePipelineResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline.</p>
                */
            PipelineArn?: string;
            /**
                * <p>The name of the pipeline.</p>
                */
            PipelineName?: string;
            /**
                * <p>The display name of the pipeline.</p>
                */
            PipelineDisplayName?: string;
            /**
                * <p>The JSON pipeline definition.</p>
                */
            PipelineDefinition?: string;
            /**
                * <p>The description of the pipeline.</p>
                */
            PipelineDescription?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that the pipeline uses to execute.</p>
                */
            RoleArn?: string;
            /**
                * <p>The status of the pipeline execution.</p>
                */
            PipelineStatus?: PipelineStatus | string;
            /**
                * <p>The time when the pipeline was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time when the pipeline was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The time when the pipeline was last run.</p>
                */
            LastRunTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>Lists the parallelism configuration applied to the pipeline.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
    }
    export namespace DescribePipelineResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineResponse) => any;
    }
    export interface DescribePipelineDefinitionForExecutionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn: string | undefined;
    }
    export namespace DescribePipelineDefinitionForExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineDefinitionForExecutionRequest) => any;
    }
    export interface DescribePipelineDefinitionForExecutionResponse {
            /**
                * <p>The JSON pipeline definition.</p>
                */
            PipelineDefinition?: string;
            /**
                * <p>The time when the pipeline was created.</p>
                */
            CreationTime?: Date;
    }
    export namespace DescribePipelineDefinitionForExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineDefinitionForExecutionResponse) => any;
    }
    export interface DescribePipelineExecutionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn: string | undefined;
    }
    export namespace DescribePipelineExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineExecutionRequest) => any;
    }
    export enum PipelineExecutionStatus {
            EXECUTING = "Executing",
            FAILED = "Failed",
            STOPPED = "Stopped",
            STOPPING = "Stopping",
            SUCCEEDED = "Succeeded"
    }
    /**
        * <p>Specifies the names of the experiment and trial created by a pipeline.</p>
        */
    export interface PipelineExperimentConfig {
            /**
                * <p>The name of the experiment.</p>
                */
            ExperimentName?: string;
            /**
                * <p>The name of the trial.</p>
                */
            TrialName?: string;
    }
    export namespace PipelineExperimentConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineExperimentConfig) => any;
    }
    export interface DescribePipelineExecutionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline.</p>
                */
            PipelineArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
            /**
                * <p>The display name of the pipeline execution.</p>
                */
            PipelineExecutionDisplayName?: string;
            /**
                * <p>The status of the pipeline execution.</p>
                */
            PipelineExecutionStatus?: PipelineExecutionStatus | string;
            /**
                * <p>The description of the pipeline execution.</p>
                */
            PipelineExecutionDescription?: string;
            /**
                * <p>Specifies the names of the experiment and trial created by a pipeline.</p>
                */
            PipelineExperimentConfig?: PipelineExperimentConfig;
            /**
                * <p>If the execution failed, a message describing why.</p>
                */
            FailureReason?: string;
            /**
                * <p>The time when the pipeline execution was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time when the pipeline execution was modified last.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>The parallelism configuration applied to the pipeline.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
    }
    export namespace DescribePipelineExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineExecutionResponse) => any;
    }
    export interface DescribeProcessingJobRequest {
            /**
                * <p>The name of the processing job. The name must be unique within an Amazon Web Services Region in the
                *             Amazon Web Services account.</p>
                */
            ProcessingJobName: string | undefined;
    }
    export namespace DescribeProcessingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProcessingJobRequest) => any;
    }
    export enum ProcessingJobStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    export interface DescribeProcessingJobResponse {
            /**
                * <p>The inputs for a processing job.</p>
                */
            ProcessingInputs?: ProcessingInput[];
            /**
                * <p>Output configuration for the processing job.</p>
                */
            ProcessingOutputConfig?: ProcessingOutputConfig;
            /**
                * <p>The name of the processing job. The name must be unique within an Amazon Web Services Region in the
                *             Amazon Web Services account.</p>
                */
            ProcessingJobName: string | undefined;
            /**
                * <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
                *             processing job. In distributed training, you specify more than one instance.</p>
                */
            ProcessingResources: ProcessingResources | undefined;
            /**
                * <p>The time limit for how long the processing job is allowed to run.</p>
                */
            StoppingCondition?: ProcessingStoppingCondition;
            /**
                * <p>Configures the processing job to run a specified container image.</p>
                */
            AppSpecification: AppSpecification | undefined;
            /**
                * <p>The environment variables set in the Docker container.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>Networking options for a processing job.</p>
                */
            NetworkConfig?: NetworkConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
                *             your behalf.</p>
                */
            RoleArn?: string;
            /**
                * <p>The configuration information used to create an experiment.</p>
                */
            ExperimentConfig?: ExperimentConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the processing job.</p>
                */
            ProcessingJobArn: string | undefined;
            /**
                * <p>Provides the status of a processing job.</p>
                */
            ProcessingJobStatus: ProcessingJobStatus | string | undefined;
            /**
                * <p>An optional string, up to one KB in size, that contains metadata from the processing
                *             container when the processing job exits.</p>
                */
            ExitMessage?: string;
            /**
                * <p>A string, up to one KB in size, that contains the reason a processing job failed, if
                *             it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The time at which the processing job completed.</p>
                */
            ProcessingEndTime?: Date;
            /**
                * <p>The time at which the processing job started.</p>
                */
            ProcessingStartTime?: Date;
            /**
                * <p>The time at which the processing job was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The time at which the processing job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The ARN of a monitoring schedule for an endpoint associated with this processing
                *             job.</p>
                */
            MonitoringScheduleArn?: string;
            /**
                * <p>The ARN of an AutoML job associated with this processing job.</p>
                */
            AutoMLJobArn?: string;
            /**
                * <p>The ARN of a training job associated with this processing job.</p>
                */
            TrainingJobArn?: string;
    }
    export namespace DescribeProcessingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProcessingJobResponse) => any;
    }
    export interface DescribeProjectInput {
            /**
                * <p>The name of the project to describe.</p>
                */
            ProjectName: string | undefined;
    }
    export namespace DescribeProjectInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectInput) => any;
    }
    export enum ProjectStatus {
            CREATE_COMPLETED = "CreateCompleted",
            CREATE_FAILED = "CreateFailed",
            CREATE_IN_PROGRESS = "CreateInProgress",
            DELETE_COMPLETED = "DeleteCompleted",
            DELETE_FAILED = "DeleteFailed",
            DELETE_IN_PROGRESS = "DeleteInProgress",
            PENDING = "Pending",
            UPDATE_COMPLETED = "UpdateCompleted",
            UPDATE_FAILED = "UpdateFailed",
            UPDATE_IN_PROGRESS = "UpdateInProgress"
    }
    /**
        * <p>Details of a provisioned service catalog product. For information about service catalog,
        *             see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
        *                 Catalog</a>.</p>
        */
    export interface ServiceCatalogProvisionedProductDetails {
            /**
                * <p>The ID of the provisioned product.</p>
                */
            ProvisionedProductId?: string;
            /**
                * <p>The current status of the product.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ERROR</code> - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.</p>
                *             </li>
                *          </ul>
                */
            ProvisionedProductStatusMessage?: string;
    }
    export namespace ServiceCatalogProvisionedProductDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceCatalogProvisionedProductDetails) => any;
    }
    export interface DescribeProjectOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ProjectArn: string | undefined;
            /**
                * <p>The name of the project.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The ID of the project.</p>
                */
            ProjectId: string | undefined;
            /**
                * <p>The description of the project.</p>
                */
            ProjectDescription?: string;
            /**
                * <p>Information used to provision a service catalog product. For information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
                *             Catalog</a>.</p>
                */
            ServiceCatalogProvisioningDetails: ServiceCatalogProvisioningDetails | undefined;
            /**
                * <p>Information about a provisioned service catalog product.</p>
                */
            ServiceCatalogProvisionedProductDetails?: ServiceCatalogProvisionedProductDetails;
            /**
                * <p>The status of the project.</p>
                */
            ProjectStatus: ProjectStatus | string | undefined;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>The time when the project was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The timestamp when project was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
    }
    export namespace DescribeProjectOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectOutput) => any;
    }
    export interface DescribeStudioLifecycleConfigRequest {
            /**
                * <p>The name of the Studio Lifecycle Configuration to describe.</p>
                */
            StudioLifecycleConfigName: string | undefined;
    }
    export namespace DescribeStudioLifecycleConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStudioLifecycleConfigRequest) => any;
    }
    export interface DescribeStudioLifecycleConfigResponse {
            /**
                * <p>The ARN of the Lifecycle Configuration to describe.</p>
                */
            StudioLifecycleConfigArn?: string;
            /**
                * <p>The name of the Studio Lifecycle Configuration that is described.</p>
                */
            StudioLifecycleConfigName?: string;
            /**
                * <p>The creation time of the Studio Lifecycle Configuration.</p>
                */
            CreationTime?: Date;
            /**
                * <p>This value is equivalent to CreationTime because Studio Lifecycle Configurations are immutable.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The content of your Studio Lifecycle Configuration script.</p>
                */
            StudioLifecycleConfigContent?: string;
            /**
                * <p>The App type that the Lifecycle Configuration is attached to.</p>
                */
            StudioLifecycleConfigAppType?: StudioLifecycleConfigAppType | string;
    }
    export namespace DescribeStudioLifecycleConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStudioLifecycleConfigResponse) => any;
    }
    export interface DescribeSubscribedWorkteamRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the subscribed work team to describe.</p>
                */
            WorkteamArn: string | undefined;
    }
    export namespace DescribeSubscribedWorkteamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSubscribedWorkteamRequest) => any;
    }
    /**
        * <p>Describes a work team of a vendor that does the a labelling job.</p>
        */
    export interface SubscribedWorkteam {
            /**
                * <p>The Amazon Resource Name (ARN) of the vendor that you have subscribed.</p>
                */
            WorkteamArn: string | undefined;
            /**
                * <p>The title of the service provided by the vendor in the Amazon Marketplace.</p>
                */
            MarketplaceTitle?: string;
            /**
                * <p>The name of the vendor in the Amazon Marketplace.</p>
                */
            SellerName?: string;
            /**
                * <p>The description of the vendor from the Amazon Marketplace.</p>
                */
            MarketplaceDescription?: string;
            /**
                * <p>Marketplace product listing ID.</p>
                */
            ListingId?: string;
    }
    export namespace SubscribedWorkteam {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubscribedWorkteam) => any;
    }
    export interface DescribeSubscribedWorkteamResponse {
            /**
                * <p>A <code>Workteam</code> instance that contains information about the work team.</p>
                */
            SubscribedWorkteam: SubscribedWorkteam | undefined;
    }
    export namespace DescribeSubscribedWorkteamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSubscribedWorkteamResponse) => any;
    }
    export interface DescribeTrainingJobRequest {
            /**
                * <p>The name of the training job.</p>
                */
            TrainingJobName: string | undefined;
    }
    export namespace DescribeTrainingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrainingJobRequest) => any;
    }
    /**
        * <p>The name, value, and date and time of a metric that was emitted to Amazon CloudWatch.</p>
        */
    export interface MetricData {
            /**
                * <p>The name of the metric.</p>
                */
            MetricName?: string;
            /**
                * <p>The value of the metric.</p>
                */
            Value?: number;
            /**
                * <p>The date and time that the algorithm emitted the metric.</p>
                */
            Timestamp?: Date;
    }
    export namespace MetricData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricData) => any;
    }
    /**
        * <p>Information about the status of the rule evaluation.</p>
        */
    export interface ProfilerRuleEvaluationStatus {
            /**
                * <p>The name of the rule configuration.</p>
                */
            RuleConfigurationName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule evaluation job.</p>
                */
            RuleEvaluationJobArn?: string;
            /**
                * <p>Status of the rule evaluation.</p>
                */
            RuleEvaluationStatus?: RuleEvaluationStatus | string;
            /**
                * <p>Details from the rule evaluation.</p>
                */
            StatusDetails?: string;
            /**
                * <p>Timestamp when the rule evaluation status was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace ProfilerRuleEvaluationStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfilerRuleEvaluationStatus) => any;
    }
    export enum ProfilingStatus {
            DISABLED = "Disabled",
            ENABLED = "Enabled"
    }
    export enum SecondaryStatus {
            COMPLETED = "Completed",
            DOWNLOADING = "Downloading",
            DOWNLOADING_TRAINING_IMAGE = "DownloadingTrainingImage",
            FAILED = "Failed",
            INTERRUPTED = "Interrupted",
            LAUNCHING_ML_INSTANCES = "LaunchingMLInstances",
            MAX_RUNTIME_EXCEEDED = "MaxRuntimeExceeded",
            MAX_WAIT_TIME_EXCEEDED = "MaxWaitTimeExceeded",
            PREPARING_TRAINING_STACK = "PreparingTrainingStack",
            RESTARTING = "Restarting",
            STARTING = "Starting",
            STOPPED = "Stopped",
            STOPPING = "Stopping",
            TRAINING = "Training",
            UPDATING = "Updating",
            UPLOADING = "Uploading"
    }
    /**
        * <p>An array element of <a>DescribeTrainingJobResponse$SecondaryStatusTransitions</a>. It provides
        *             additional details about a status that the training job has transitioned through. A
        *             training job can be in one of several states, for example, starting, downloading,
        *             training, or uploading. Within each state, there are a number of intermediate states.
        *             For example, within the starting state, SageMaker could be starting the training job or
        *             launching the ML instances. These transitional states are referred to as the job's
        *             secondary
        *             status.
        *             </p>
        *         <p></p>
        */
    export interface SecondaryStatusTransition {
            /**
                * <p>Contains a secondary status information from a training
                *             job.</p>
                *         <p>Status might be one of the following secondary statuses:</p>
                *         <dl>
                *             <dt>InProgress</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Starting</code>
                *                                 - Starting the training job.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Downloading</code> - An optional stage for algorithms that
                *                                 support <code>File</code> training input mode. It indicates that
                *                                 data is being downloaded to the ML storage volumes.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Training</code> - Training is in progress.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Uploading</code> - Training is complete and the model
                *                                 artifacts are being uploaded to the S3 location.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Completed</code> - The training job has completed.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Failed</code> - The training job has failed. The reason for
                *                                 the failure is returned in the <code>FailureReason</code> field of
                *                                     <code>DescribeTrainingJobResponse</code>.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Stopped</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>MaxRuntimeExceeded</code> - The job stopped because it
                *                                 exceeded the maximum allowed runtime.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Stopped</code> - The training job has stopped.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Stopping</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Stopping</code> - Stopping the training job.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *          </dl>
                *         <p>We no longer support the following secondary statuses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>LaunchingMLInstances</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>PreparingTrainingStack</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>DownloadingTrainingImage</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            Status: SecondaryStatus | string | undefined;
            /**
                * <p>A timestamp that shows when the training job transitioned to the current secondary
                *             status state.</p>
                */
            StartTime: Date | undefined;
            /**
                * <p>A timestamp that shows when the training job transitioned out of this secondary status
                *             state into another secondary status state or when the training job has ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>A detailed description of the progress within a secondary status.
                *             </p>
                *         <p>SageMaker provides secondary statuses and status messages that apply to each of
                *             them:</p>
                *         <dl>
                *             <dt>Starting</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>Starting the training job.</p>
                *                         </li>
                *                   <li>
                *                             <p>Launching requested ML
                *                                 instances.</p>
                *                         </li>
                *                   <li>
                *                             <p>Insufficient
                *                                 capacity error from EC2 while launching instances,
                *                                 retrying!</p>
                *                         </li>
                *                   <li>
                *                             <p>Launched
                *                                 instance was unhealthy, replacing it!</p>
                *                         </li>
                *                   <li>
                *                             <p>Preparing the instances for training.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Training</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>Downloading the training image.</p>
                *                         </li>
                *                   <li>
                *                             <p>Training
                *                                 image download completed. Training in
                *                                 progress.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *          </dl>
                *         <important>
                *             <p>Status messages are subject to change. Therefore, we recommend not including them
                *                 in code that programmatically initiates actions. For examples, don't use status
                *                 messages in if statements.</p>
                *         </important>
                *         <p>To have an overview of your training job's progress, view
                *                 <code>TrainingJobStatus</code> and <code>SecondaryStatus</code> in <a>DescribeTrainingJob</a>, and <code>StatusMessage</code> together. For
                *             example, at the start of a training job, you might see the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>TrainingJobStatus</code> - InProgress</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SecondaryStatus</code> - Training</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>StatusMessage</code> - Downloading the training image</p>
                *             </li>
                *          </ul>
                */
            StatusMessage?: string;
    }
    export namespace SecondaryStatusTransition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecondaryStatusTransition) => any;
    }
    export interface DescribeTrainingJobResponse {
            /**
                * <p> Name of the model training job. </p>
                */
            TrainingJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the training job.</p>
                */
            TrainingJobArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the
                *             training job was launched by a hyperparameter tuning job.</p>
                */
            TuningJobArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the SageMaker Ground Truth labeling job that created the
                *             transform or training job.</p>
                */
            LabelingJobArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an AutoML job.</p>
                */
            AutoMLJobArn?: string;
            /**
                * <p>Information about the Amazon S3 location that is configured for storing model artifacts.
                *         </p>
                */
            ModelArtifacts: ModelArtifacts | undefined;
            /**
                * <p>The status of the training job.</p>
                *         <p>SageMaker provides the following training job statuses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>InProgress</code> - The training is in progress.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Completed</code> - The training job has completed.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Failed</code> - The training job has failed. To see the reason for the
                *                     failure, see the <code>FailureReason</code> field in the response to a
                *                         <code>DescribeTrainingJobResponse</code> call.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Stopping</code> - The training job is stopping.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Stopped</code> - The training job has stopped.</p>
                *             </li>
                *          </ul>
                *         <p>For more detailed information, see <code>SecondaryStatus</code>. </p>
                */
            TrainingJobStatus: TrainingJobStatus | string | undefined;
            /**
                * <p> Provides detailed information about the state of the training job. For detailed
                *             information on the secondary status of the training job, see <code>StatusMessage</code>
                *             under <a>SecondaryStatusTransition</a>.</p>
                *         <p>SageMaker provides primary statuses and secondary statuses that apply to each of
                *             them:</p>
                *         <dl>
                *             <dt>InProgress</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Starting</code>
                *                                 - Starting the training job.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Downloading</code> - An optional stage for algorithms that
                *                                 support <code>File</code> training input mode. It indicates that
                *                                 data is being downloaded to the ML storage volumes.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Training</code> - Training is in progress.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Interrupted</code> - The job stopped because the managed
                *                                 spot training instances were interrupted. </p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Uploading</code> - Training is complete and the model
                *                                 artifacts are being uploaded to the S3 location.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Completed</code> - The training job has completed.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Failed</code> - The training job has failed. The reason for
                *                                 the failure is returned in the <code>FailureReason</code> field of
                *                                     <code>DescribeTrainingJobResponse</code>.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Stopped</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>MaxRuntimeExceeded</code> - The job stopped because it
                *                                 exceeded the maximum allowed runtime.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>MaxWaitTimeExceeded</code> - The job stopped because it
                *                                 exceeded the maximum allowed wait time.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Stopped</code> - The training job has stopped.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Stopping</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Stopping</code> - Stopping the training job.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *          </dl>
                *
                *         <important>
                *             <p>Valid values for <code>SecondaryStatus</code> are subject to change. </p>
                *         </important>
                *         <p>We no longer support the following secondary statuses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>LaunchingMLInstances</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>PreparingTraining</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>DownloadingTrainingImage</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            SecondaryStatus: SecondaryStatus | string | undefined;
            /**
                * <p>If the training job failed, the reason it failed. </p>
                */
            FailureReason?: string;
            /**
                * <p>Algorithm-specific parameters. </p>
                */
            HyperParameters?: Record<string, string>;
            /**
                * <p>Information about the algorithm used for training, and algorithm metadata.
                *         </p>
                */
            AlgorithmSpecification: AlgorithmSpecification | undefined;
            /**
                * <p>The Amazon Web Services Identity and Access Management (IAM) role configured for the training job. </p>
                */
            RoleArn?: string;
            /**
                * <p>An array of <code>Channel</code> objects that describes each data input channel.
                *         </p>
                */
            InputDataConfig?: Channel[];
            /**
                * <p>The S3 path where model artifacts that you configured when creating the job are
                *             stored. SageMaker creates subfolders for model artifacts. </p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>Resources, including ML compute instances and ML storage volumes, that are
                *             configured for model training. </p>
                */
            ResourceConfig: ResourceConfig | undefined;
            /**
                * <p>A <a>VpcConfig</a> object that specifies the VPC that this training job has
                *             access to. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon
                *                 Virtual Private Cloud</a>.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Specifies a limit to how long a model training job can run. It also specifies how long
                *             a managed Spot training job has to complete. When the job reaches the time limit, SageMaker
                *             ends the training job. Use this API to cap model training costs.</p>
                *         <p>To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
                *             job termination for 120 seconds. Algorithms can use this 120-second window to save the
                *             model artifacts, so the results of training are not lost. </p>
                */
            StoppingCondition: StoppingCondition | undefined;
            /**
                * <p>A timestamp that indicates when the training job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Indicates the time when the training job starts on training instances. You are
                *             billed for the time interval between this time and the value of
                *                 <code>TrainingEndTime</code>. The start time in CloudWatch Logs might be later than this time.
                *             The difference is due to the time it takes to download the training data and to the size
                *             of the training container.</p>
                */
            TrainingStartTime?: Date;
            /**
                * <p>Indicates the time when the training job ends on training instances. You are billed
                *             for the time interval between the value of <code>TrainingStartTime</code> and this time.
                *             For successful jobs and stopped jobs, this is the time after model artifacts are
                *             uploaded. For failed jobs, this is the time when SageMaker detects a job failure.</p>
                */
            TrainingEndTime?: Date;
            /**
                * <p>A timestamp that indicates when the status of the training job was last
                *             modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A history of all of the secondary statuses that the training job has transitioned
                *             through.</p>
                */
            SecondaryStatusTransitions?: SecondaryStatusTransition[];
            /**
                * <p>A collection of <code>MetricData</code> objects that specify the names, values, and
                *             dates and times that the training algorithm emitted to Amazon CloudWatch.</p>
                */
            FinalMetricDataList?: MetricData[];
            /**
                * <p>If you want to allow inbound or outbound network calls, except for calls between peers
                *             within a training cluster for distributed training, choose <code>True</code>. If you
                *             enable network isolation for training jobs that are configured to use a VPC, SageMaker
                *             downloads and uploads customer data and model artifacts through the specified VPC, but
                *             the training container does not have network access.</p>
                */
            EnableNetworkIsolation?: boolean;
            /**
                * <p>To encrypt all communications between ML compute instances in distributed training,
                *             choose <code>True</code>. Encryption provides greater security for distributed training,
                *             but training might take longer. How long it takes depends on the amount of communication
                *             between compute instances, especially if you use a deep learning algorithms in
                *             distributed training.</p>
                */
            EnableInterContainerTrafficEncryption?: boolean;
            /**
                * <p>A Boolean indicating whether managed spot training is enabled (<code>True</code>) or
                *             not (<code>False</code>).</p>
                */
            EnableManagedSpotTraining?: boolean;
            /**
                * <p>Contains information about the output location for managed spot training checkpoint
                *             data. </p>
                */
            CheckpointConfig?: CheckpointConfig;
            /**
                * <p>The training time in seconds.</p>
                */
            TrainingTimeInSeconds?: number;
            /**
                * <p>The billable time in seconds. Billable time refers to the absolute wall-clock
                *             time.</p>
                *         <p>Multiply <code>BillableTimeInSeconds</code> by the number of instances
                *                 (<code>InstanceCount</code>) in your training cluster to get the total compute time
                *             SageMaker bills you if you run distributed training. The formula is as follows:
                *                 <code>BillableTimeInSeconds * InstanceCount</code> .</p>
                *         <p>You can calculate the savings from using managed spot training using the formula
                *                 <code>(1 - BillableTimeInSeconds / TrainingTimeInSeconds) * 100</code>. For example,
                *             if <code>BillableTimeInSeconds</code> is 100 and <code>TrainingTimeInSeconds</code> is
                *             500, the savings is 80%.</p>
                */
            BillableTimeInSeconds?: number;
            /**
                * <p>Configuration information for the Debugger hook parameters, metric and tensor collections, and
                *             storage paths. To learn more about
                *             how to configure the <code>DebugHookConfig</code> parameter,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
                */
            DebugHookConfig?: DebugHookConfig;
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
            /**
                * <p>Configuration information for Debugger rules for debugging output tensors.</p>
                */
            DebugRuleConfigurations?: DebugRuleConfiguration[];
            /**
                * <p>Configuration of storage locations for the Debugger TensorBoard output data.</p>
                */
            TensorBoardOutputConfig?: TensorBoardOutputConfig;
            /**
                * <p>Evaluation status of Debugger rules for debugging on a training job.</p>
                */
            DebugRuleEvaluationStatuses?: DebugRuleEvaluationStatus[];
            /**
                * <p>Configuration information for Debugger system monitoring, framework profiling, and
                *             storage paths.</p>
                */
            ProfilerConfig?: ProfilerConfig;
            /**
                * <p>Configuration information for Debugger rules for profiling system and framework
                *             metrics.</p>
                */
            ProfilerRuleConfigurations?: ProfilerRuleConfiguration[];
            /**
                * <p>Evaluation status of Debugger rules for profiling on a training job.</p>
                */
            ProfilerRuleEvaluationStatuses?: ProfilerRuleEvaluationStatus[];
            /**
                * <p>Profiling status of a training job.</p>
                */
            ProfilingStatus?: ProfilingStatus | string;
            /**
                * <p>The number of times to retry the job when the job fails due to an
                *                 <code>InternalServerError</code>.</p>
                */
            RetryStrategy?: RetryStrategy;
            /**
                * <p>The environment variables to set in the Docker container.</p>
                */
            Environment?: Record<string, string>;
    }
    export namespace DescribeTrainingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrainingJobResponse) => any;
    }
    export interface DescribeTransformJobRequest {
            /**
                * <p>The name of the transform job that you want to view details of.</p>
                */
            TransformJobName: string | undefined;
    }
    export namespace DescribeTransformJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTransformJobRequest) => any;
    }
    export enum TransformJobStatus {
            COMPLETED = "Completed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            STOPPED = "Stopped",
            STOPPING = "Stopping"
    }
    export interface DescribeTransformJobResponse {
            /**
                * <p>The name of the transform job.</p>
                */
            TransformJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the transform job.</p>
                */
            TransformJobArn: string | undefined;
            /**
                * <p>The
                *             status of the transform job. If the transform job failed, the reason
                *             is returned in the <code>FailureReason</code> field.</p>
                */
            TransformJobStatus: TransformJobStatus | string | undefined;
            /**
                * <p>If the transform job failed, <code>FailureReason</code> describes
                *             why
                *             it failed. A transform job creates a log file, which includes error
                *             messages, and stores it
                *             as
                *             an Amazon S3 object. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/logging-cloudwatch.html">Log Amazon SageMaker Events with
                *                 Amazon CloudWatch</a>.</p>
                */
            FailureReason?: string;
            /**
                * <p>The name of the model used in the transform job.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The
                *             maximum number
                *             of
                *             parallel requests on each instance node
                *             that can be launched in a transform job. The default value is 1.</p>
                */
            MaxConcurrentTransforms?: number;
            /**
                * <p>The timeout and maximum number of retries for processing a transform job
                *             invocation.</p>
                */
            ModelClientConfig?: ModelClientConfig;
            /**
                * <p>The
                *             maximum
                *             payload size, in MB, used in the
                *             transform job.</p>
                */
            MaxPayloadInMB?: number;
            /**
                * <p>Specifies the number of records to include in a mini-batch for an HTTP inference
                *             request.
                *             A <i>record</i>
                *             <i></i> is a single unit of input data that inference
                *             can be made on. For example, a single line in a CSV file is a record. </p>
                *         <p>To enable the batch strategy, you must set <code>SplitType</code>
                *             to
                *                 <code>Line</code>, <code>RecordIO</code>, or
                *             <code>TFRecord</code>.</p>
                */
            BatchStrategy?: BatchStrategy | string;
            /**
                * <p>The
                *             environment variables to set in the Docker container. We support up to 16 key and values
                *             entries in the map.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>Describes the dataset to be transformed and the Amazon S3 location where it is
                *             stored.</p>
                */
            TransformInput: TransformInput | undefined;
            /**
                * <p>Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the
                *             transform job.</p>
                */
            TransformOutput?: TransformOutput;
            /**
                * <p>Describes
                *             the resources, including ML instance types and ML instance count, to
                *             use for the transform job.</p>
                */
            TransformResources: TransformResources | undefined;
            /**
                * <p>A timestamp that shows when the transform Job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Indicates when the transform job starts
                *             on
                *             ML instances. You are billed for the time interval between this time
                *             and the value of <code>TransformEndTime</code>.</p>
                */
            TransformStartTime?: Date;
            /**
                * <p>Indicates when the transform job has been
                *
                *             completed, or has stopped or failed. You are billed for the time
                *             interval between this time and the value of <code>TransformStartTime</code>.</p>
                */
            TransformEndTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the
                *             transform or training job.</p>
                */
            LabelingJobArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AutoML transform job.</p>
                */
            AutoMLJobArn?: string;
            /**
                * <p>The data structure used to specify the data to be used for inference in a batch
                *             transform job and to associate the data that is relevant to the prediction results in
                *             the output. The input filter provided allows you to exclude input data that is not
                *             needed for inference in a batch transform job. The output filter provided allows you to
                *             include input data relevant to interpreting the predictions in the output from the job.
                *             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
                *                 Results with their Corresponding Input Records</a>.</p>
                */
            DataProcessing?: DataProcessing;
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
    }
    export namespace DescribeTransformJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTransformJobResponse) => any;
    }
    export interface DescribeTrialRequest {
            /**
                * <p>The name of the trial to describe.</p>
                */
            TrialName: string | undefined;
    }
    export namespace DescribeTrialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrialRequest) => any;
    }
    /**
        * <p>The source of the trial.</p>
        */
    export interface TrialSource {
            /**
                * <p>The Amazon Resource Name (ARN) of the source.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>The source job type.</p>
                */
            SourceType?: string;
    }
    export namespace TrialSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialSource) => any;
    }
    export interface DescribeTrialResponse {
            /**
                * <p>The name of the trial.</p>
                */
            TrialName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the trial.</p>
                */
            TrialArn?: string;
            /**
                * <p>The name of the trial as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>TrialName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The name of the experiment the trial is part of.</p>
                */
            ExperimentName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source and, optionally, the job type.</p>
                */
            Source?: TrialSource;
            /**
                * <p>When the trial was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Who created the trial.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the trial was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Who last modified the trial.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
    }
    export namespace DescribeTrialResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrialResponse) => any;
    }
    export interface DescribeTrialComponentRequest {
            /**
                * <p>The name of the trial component to describe.</p>
                */
            TrialComponentName: string | undefined;
    }
    export namespace DescribeTrialComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrialComponentRequest) => any;
    }
    /**
        * <p>A summary of the metrics of a trial component.</p>
        */
    export interface TrialComponentMetricSummary {
            /**
                * <p>The name of the metric.</p>
                */
            MetricName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source.</p>
                */
            SourceArn?: string;
            /**
                * <p>When the metric was last updated.</p>
                */
            TimeStamp?: Date;
            /**
                * <p>The maximum value of the metric.</p>
                */
            Max?: number;
            /**
                * <p>The minimum value of the metric.</p>
                */
            Min?: number;
            /**
                * <p>The most recent value of the metric.</p>
                */
            Last?: number;
            /**
                * <p>The number of samples used to generate the metric.</p>
                */
            Count?: number;
            /**
                * <p>The average value of the metric.</p>
                */
            Avg?: number;
            /**
                * <p>The standard deviation of the metric.</p>
                */
            StdDev?: number;
    }
    export namespace TrialComponentMetricSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentMetricSummary) => any;
    }
    /**
        * <p>The Amazon Resource Name (ARN) and job type of the source of a trial component.</p>
        */
    export interface TrialComponentSource {
            /**
                * <p>The source ARN.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>The source job type.</p>
                */
            SourceType?: string;
    }
    export namespace TrialComponentSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentSource) => any;
    }
    export interface DescribeTrialComponentResponse {
            /**
                * <p>The name of the trial component.</p>
                */
            TrialComponentName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the trial component.</p>
                */
            TrialComponentArn?: string;
            /**
                * <p>The name of the component as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>TrialComponentName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source and, optionally, the job type.</p>
                */
            Source?: TrialComponentSource;
            /**
                * <p>The status of the component. States include:</p>
                *          <ul>
                *             <li>
                *                <p>InProgress</p>
                *             </li>
                *             <li>
                *                <p>Completed</p>
                *             </li>
                *             <li>
                *                <p>Failed</p>
                *             </li>
                *          </ul>
                */
            Status?: TrialComponentStatus;
            /**
                * <p>When the component started.</p>
                */
            StartTime?: Date;
            /**
                * <p>When the component ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>When the component was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Who created the trial component.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the component was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Who last modified the component.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>The hyperparameters of the component.</p>
                */
            Parameters?: Record<string, TrialComponentParameterValue>;
            /**
                * <p>The input artifacts of the component.</p>
                */
            InputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>The output artifacts of the component.</p>
                */
            OutputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>The metrics for the component.</p>
                */
            Metrics?: TrialComponentMetricSummary[];
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupArn?: string;
    }
    export namespace DescribeTrialComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrialComponentResponse) => any;
    }
    export interface DescribeUserProfileRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The user profile name. This value is not case sensitive.</p>
                */
            UserProfileName: string | undefined;
    }
    export namespace DescribeUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserProfileRequest) => any;
    }
    export enum UserProfileStatus {
            Delete_Failed = "Delete_Failed",
            Deleting = "Deleting",
            Failed = "Failed",
            InService = "InService",
            Pending = "Pending",
            Update_Failed = "Update_Failed",
            Updating = "Updating"
    }
    export interface DescribeUserProfileResponse {
            /**
                * <p>The ID of the domain that contains the profile.</p>
                */
            DomainId?: string;
            /**
                * <p>The user profile Amazon Resource Name (ARN).</p>
                */
            UserProfileArn?: string;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName?: string;
            /**
                * <p>The ID of the user's profile in the Amazon Elastic File System (EFS) volume.</p>
                */
            HomeEfsFileSystemUid?: string;
            /**
                * <p>The status.</p>
                */
            Status?: UserProfileStatus | string;
            /**
                * <p>The last modified time.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The creation time.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The failure reason.</p>
                */
            FailureReason?: string;
            /**
                * <p>The SSO user identifier.</p>
                */
            SingleSignOnUserIdentifier?: string;
            /**
                * <p>The SSO user value.</p>
                */
            SingleSignOnUserValue?: string;
            /**
                * <p>A collection of settings.</p>
                */
            UserSettings?: UserSettings;
    }
    export namespace DescribeUserProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserProfileResponse) => any;
    }
    export interface DescribeWorkforceRequest {
            /**
                * <p>The name of the private workforce whose access you want to restrict.
                *                 <code>WorkforceName</code> is automatically set to <code>default</code> when a
                *             workforce is created and cannot be modified. </p>
                */
            WorkforceName: string | undefined;
    }
    export namespace DescribeWorkforceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkforceRequest) => any;
    }
    /**
        * <p>Your OIDC IdP workforce configuration.</p>
        */
    export interface OidcConfigForResponse {
            /**
                * <p>The OIDC IdP client ID used to configure your private workforce.</p>
                */
            ClientId?: string;
            /**
                * <p>The OIDC IdP issuer used to configure your private workforce.</p>
                */
            Issuer?: string;
            /**
                * <p>The OIDC IdP authorization endpoint used to configure your private workforce.</p>
                */
            AuthorizationEndpoint?: string;
            /**
                * <p>The OIDC IdP token endpoint used to configure your private workforce.</p>
                */
            TokenEndpoint?: string;
            /**
                * <p>The OIDC IdP user information endpoint used to configure your private workforce.</p>
                */
            UserInfoEndpoint?: string;
            /**
                * <p>The OIDC IdP logout endpoint used to configure your private workforce.</p>
                */
            LogoutEndpoint?: string;
            /**
                * <p>The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.</p>
                */
            JwksUri?: string;
    }
    export namespace OidcConfigForResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OidcConfigForResponse) => any;
    }
    export enum WorkforceStatus {
            ACTIVE = "Active",
            DELETING = "Deleting",
            FAILED = "Failed",
            INITIALIZING = "Initializing",
            UPDATING = "Updating"
    }
    /**
        * <p>A VpcConfig object that specifies the VPC that you want your workforce to connect to.</p>
        */
    export interface WorkforceVpcConfigResponse {
            /**
                * <p>The ID of the VPC that the workforce uses for communication.</p>
                */
            VpcId: string | undefined;
            /**
                * <p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.</p>
                */
            SecurityGroupIds: string[] | undefined;
            /**
                * <p>The ID of the subnets in the VPC that you want to connect.</p>
                */
            Subnets: string[] | undefined;
            /**
                * <p>The IDs for the VPC service endpoints of your VPC workforce when it is created and updated.</p>
                */
            VpcEndpointId?: string;
    }
    export namespace WorkforceVpcConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkforceVpcConfigResponse) => any;
    }
    /**
        * <p>A single private workforce, which is automatically created when you create your first
        *             private work team. You can create one private work force in each Amazon Web Services Region. By default,
        *             any workforce-related API operation used in a specific region will apply to the
        *             workforce created in that region. To learn how to create a private workforce, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create a Private Workforce</a>.</p>
        */
    export interface Workforce {
            /**
                * <p>The name of the private workforce.</p>
                */
            WorkforceName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the private workforce.</p>
                */
            WorkforceArn: string | undefined;
            /**
                * <p>The most recent date that  was used to
                *             successfully add one or more IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>) to a private workforce's
                *             allow list.</p>
                */
            LastUpdatedDate?: Date;
            /**
                * <p>A list of one to ten IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>) to be added to the
                *             workforce allow list. By default, a workforce isn't restricted to specific IP addresses.</p>
                */
            SourceIpConfig?: SourceIpConfig;
            /**
                * <p>The subdomain for your OIDC Identity Provider.</p>
                */
            SubDomain?: string;
            /**
                * <p>The configuration of an Amazon Cognito workforce.
                *       A single Cognito workforce is created using and corresponds to a single
                *       <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
                *       Amazon Cognito user pool</a>.</p>
                */
            CognitoConfig?: CognitoConfig;
            /**
                * <p>The configuration of an OIDC Identity Provider (IdP) private workforce.</p>
                */
            OidcConfig?: OidcConfigForResponse;
            /**
                * <p>The date that the workforce is created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The configuration of a VPC workforce.</p>
                */
            WorkforceVpcConfig?: WorkforceVpcConfigResponse;
            /**
                * <p>The status of your workforce.</p>
                */
            Status?: WorkforceStatus | string;
            /**
                * <p>The reason your workforce failed.</p>
                */
            FailureReason?: string;
    }
    export namespace Workforce {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Workforce) => any;
    }
    export interface DescribeWorkforceResponse {
            /**
                * <p>A single private workforce, which is automatically created when you create your first
                *             private work team. You can create one private work force in each Amazon Web Services Region. By default,
                *             any workforce-related API operation used in a specific region will apply to the
                *             workforce created in that region. To learn how to create a private workforce, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create a Private Workforce</a>.</p>
                */
            Workforce: Workforce | undefined;
    }
    export namespace DescribeWorkforceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkforceResponse) => any;
    }
    export interface DescribeWorkteamRequest {
            /**
                * <p>The name of the work team to return a description of.</p>
                */
            WorkteamName: string | undefined;
    }
    export namespace DescribeWorkteamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkteamRequest) => any;
    }
    /**
        * <p>Provides details about a labeling work team.</p>
        */
    export interface Workteam {
            /**
                * <p>The name of the work team.</p>
                */
            WorkteamName: string | undefined;
            /**
                * <p>A list of <code>MemberDefinition</code> objects that contains objects that identify
                *             the workers that make up the work team. </p>
                *         <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP).
                *             For private workforces created using Amazon Cognito use
                *             <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity
                *             provider (IdP) use <code>OidcMemberDefinition</code>.</p>
                */
            MemberDefinitions: MemberDefinition[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the work team.</p>
                */
            WorkteamArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the workforce.</p>
                */
            WorkforceArn?: string;
            /**
                * <p>The Amazon Marketplace identifier for a vendor's work team.</p>
                */
            ProductListingIds?: string[];
            /**
                * <p>A description of the work team.</p>
                */
            Description: string | undefined;
            /**
                * <p>The URI of the labeling job's user interface. Workers open this URI to start labeling
                *             your data objects.</p>
                */
            SubDomain?: string;
            /**
                * <p>The date and time that the work team was created (timestamp).</p>
                */
            CreateDate?: Date;
            /**
                * <p>The date and time that the work team was last updated (timestamp).</p>
                */
            LastUpdatedDate?: Date;
            /**
                * <p>Configures SNS notifications of available or expiring work items for work
                *             teams.</p>
                */
            NotificationConfiguration?: NotificationConfiguration;
    }
    export namespace Workteam {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Workteam) => any;
    }
    export interface DescribeWorkteamResponse {
            /**
                * <p>A <code>Workteam</code> instance that contains information about the work team.
                *         </p>
                */
            Workteam: Workteam | undefined;
    }
    export namespace DescribeWorkteamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkteamResponse) => any;
    }
    /**
        * <p>Specifies weight and capacity values for a production variant.</p>
        */
    export interface DesiredWeightAndCapacity {
            /**
                * <p>The name of the variant to update.</p>
                */
            VariantName: string | undefined;
            /**
                * <p>The variant's weight.</p>
                */
            DesiredWeight?: number;
            /**
                * <p>The variant's capacity.</p>
                */
            DesiredInstanceCount?: number;
    }
    export namespace DesiredWeightAndCapacity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DesiredWeightAndCapacity) => any;
    }
    /**
        * <p>Information of a particular device.</p>
        */
    export interface Device {
            /**
                * <p>The name of the device.</p>
                */
            DeviceName: string | undefined;
            /**
                * <p>Description of the device.</p>
                */
            Description?: string;
            /**
                * <p>Amazon Web Services Internet of Things (IoT) object name.</p>
                */
            IotThingName?: string;
    }
    export namespace Device {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Device) => any;
    }
    export enum DeviceDeploymentStatus {
            Deployed = "DEPLOYED",
            Failed = "FAILED",
            InProgress = "INPROGRESS",
            ReadyToDeploy = "READYTODEPLOY",
            Stopped = "STOPPED",
            Stopping = "STOPPING"
    }
    /**
        * <p>Contains information summarizing device details and deployment status.</p>
        */
    export interface DeviceDeploymentSummary {
            /**
                * <p>The ARN of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanArn: string | undefined;
            /**
                * <p>The name of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>The name of the stage in the edge deployment plan.</p>
                */
            StageName: string | undefined;
            /**
                * <p>The name of the deployed stage.</p>
                */
            DeployedStageName?: string;
            /**
                * <p>The name of the fleet to which the device belongs to.</p>
                */
            DeviceFleetName?: string;
            /**
                * <p>The name of the device.</p>
                */
            DeviceName: string | undefined;
            /**
                * <p>The ARN of the device.</p>
                */
            DeviceArn: string | undefined;
            /**
                * <p>The deployment status of the device.</p>
                */
            DeviceDeploymentStatus?: DeviceDeploymentStatus | string;
            /**
                * <p>The detailed error message for the deployoment status result.</p>
                */
            DeviceDeploymentStatusMessage?: string;
            /**
                * <p>The description of the device.</p>
                */
            Description?: string;
            /**
                * <p>The time when the deployment on the device started.</p>
                */
            DeploymentStartTime?: Date;
    }
    export namespace DeviceDeploymentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceDeploymentSummary) => any;
    }
    /**
        * <p>Summary of the device fleet.</p>
        */
    export interface DeviceFleetSummary {
            /**
                * <p>Amazon Resource Name (ARN) of the device fleet.</p>
                */
            DeviceFleetArn: string | undefined;
            /**
                * <p>Name of the device fleet.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>Timestamp of when the device fleet was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Timestamp of when the device fleet was last updated.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace DeviceFleetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceFleetSummary) => any;
    }
    /**
        * <p>Status of devices.</p>
        */
    export interface DeviceStats {
            /**
                * <p>The number of devices connected with a heartbeat.</p>
                */
            ConnectedDeviceCount: number | undefined;
            /**
                * <p>The number of registered devices.</p>
                */
            RegisteredDeviceCount: number | undefined;
    }
    export namespace DeviceStats {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceStats) => any;
    }
    /**
        * <p>Summary of model on edge device.</p>
        */
    export interface EdgeModelSummary {
            /**
                * <p>The name of the model.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The version model.</p>
                */
            ModelVersion: string | undefined;
    }
    export namespace EdgeModelSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeModelSummary) => any;
    }
    /**
        * <p>Summary of the device.</p>
        */
    export interface DeviceSummary {
            /**
                * <p>The unique identifier of the device.</p>
                */
            DeviceName: string | undefined;
            /**
                * <p>Amazon Resource Name (ARN) of the device.</p>
                */
            DeviceArn: string | undefined;
            /**
                * <p>A description of the device.</p>
                */
            Description?: string;
            /**
                * <p>The name of the fleet the device belongs to.</p>
                */
            DeviceFleetName?: string;
            /**
                * <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..</p>
                */
            IotThingName?: string;
            /**
                * <p>The timestamp of the last registration or de-reregistration.</p>
                */
            RegistrationTime?: Date;
            /**
                * <p>The last heartbeat received from the device.</p>
                */
            LatestHeartbeat?: Date;
            /**
                * <p>Models on the device.</p>
                */
            Models?: EdgeModelSummary[];
            /**
                * <p>Edge Manager agent version.</p>
                */
            AgentVersion?: string;
    }
    export namespace DeviceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceSummary) => any;
    }
    export enum Direction {
            ASCENDANTS = "Ascendants",
            BOTH = "Both",
            DESCENDANTS = "Descendants"
    }
    export interface DisableSagemakerServicecatalogPortfolioInput {
    }
    export namespace DisableSagemakerServicecatalogPortfolioInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableSagemakerServicecatalogPortfolioInput) => any;
    }
    export interface DisableSagemakerServicecatalogPortfolioOutput {
    }
    export namespace DisableSagemakerServicecatalogPortfolioOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableSagemakerServicecatalogPortfolioOutput) => any;
    }
    export interface DisassociateTrialComponentRequest {
            /**
                * <p>The name of the component to disassociate from the trial.</p>
                */
            TrialComponentName: string | undefined;
            /**
                * <p>The name of the trial to disassociate from.</p>
                */
            TrialName: string | undefined;
    }
    export namespace DisassociateTrialComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTrialComponentRequest) => any;
    }
    export interface DisassociateTrialComponentResponse {
            /**
                * <p>The ARN of the trial component.</p>
                */
            TrialComponentArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the trial.</p>
                */
            TrialArn?: string;
    }
    export namespace DisassociateTrialComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTrialComponentResponse) => any;
    }
    /**
        * <p>The domain's details.</p>
        */
    export interface DomainDetails {
            /**
                * <p>The domain's Amazon Resource Name (ARN).</p>
                */
            DomainArn?: string;
            /**
                * <p>The domain ID.</p>
                */
            DomainId?: string;
            /**
                * <p>The domain name.</p>
                */
            DomainName?: string;
            /**
                * <p>The status.</p>
                */
            Status?: DomainStatus | string;
            /**
                * <p>The creation time.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The last modified time.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The domain's URL.</p>
                */
            Url?: string;
    }
    export namespace DomainDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainDetails) => any;
    }
    /**
        * <p>A collection of settings that update the current configuration for the <code>RStudioServerPro</code> Domain-level app.</p>
        */
    export interface RStudioServerProDomainSettingsForUpdate {
            /**
                * <p>The execution role for the <code>RStudioServerPro</code> Domain-level app.</p>
                */
            DomainExecutionRoleArn: string | undefined;
            /**
                * <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that
                *      the version runs on.</p>
                */
            DefaultResourceSpec?: ResourceSpec;
    }
    export namespace RStudioServerProDomainSettingsForUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RStudioServerProDomainSettingsForUpdate) => any;
    }
    /**
        * <p>A collection of <code>Domain</code> configuration settings to update.</p>
        */
    export interface DomainSettingsForUpdate {
            /**
                * <p>A collection of <code>RStudioServerPro</code> Domain-level app settings to update.</p>
                */
            RStudioServerProDomainSettingsForUpdate?: RStudioServerProDomainSettingsForUpdate;
    }
    export namespace DomainSettingsForUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainSettingsForUpdate) => any;
    }
    /**
        * <p>A directed edge connecting two lineage entities.</p>
        */
    export interface Edge {
            /**
                * <p>The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.</p>
                */
            SourceArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.</p>
                */
            DestinationArn?: string;
            /**
                * <p>The type of the Association(Edge) between the source and destination. For example <code>ContributedTo</code>,
                *          <code>Produced</code>, or <code>DerivedFrom</code>.</p>
                */
            AssociationType?: AssociationEdgeType | string;
    }
    export namespace Edge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Edge) => any;
    }
    /**
        * <p>Contains information summarizing an edge deployment plan.</p>
        */
    export interface EdgeDeploymentPlanSummary {
            /**
                * <p>The ARN of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanArn: string | undefined;
            /**
                * <p>The name of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>The name of the device fleet used for the deployment. </p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The number of edge devices with the successful deployment.</p>
                */
            EdgeDeploymentSuccess: number | undefined;
            /**
                * <p>The number of edge devices yet to pick up the deployment, or in progress.</p>
                */
            EdgeDeploymentPending: number | undefined;
            /**
                * <p>The number of edge devices that failed the deployment.</p>
                */
            EdgeDeploymentFailed: number | undefined;
            /**
                * <p>The time when the edge deployment plan was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time when the edge deployment plan was last updated.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace EdgeDeploymentPlanSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeDeploymentPlanSummary) => any;
    }
    /**
        * <p>Status of edge devices with this model.</p>
        */
    export interface EdgeModelStat {
            /**
                * <p>The name of the model.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The model version.</p>
                */
            ModelVersion: string | undefined;
            /**
                * <p>The number of devices that have this model version and do not have a heart beat.</p>
                */
            OfflineDeviceCount: number | undefined;
            /**
                * <p>The number of devices that have this model version and have a heart beat. </p>
                */
            ConnectedDeviceCount: number | undefined;
            /**
                * <p>The number of devices that have this model version, a heart beat, and are currently running.</p>
                */
            ActiveDeviceCount: number | undefined;
            /**
                * <p>The number of devices with this model version and are producing sample data.</p>
                */
            SamplingDeviceCount: number | undefined;
    }
    export namespace EdgeModelStat {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgeModelStat) => any;
    }
    /**
        * <p>Summary of edge packaging job.</p>
        */
    export interface EdgePackagingJobSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the edge packaging job.</p>
                */
            EdgePackagingJobArn: string | undefined;
            /**
                * <p>The name of the edge packaging job.</p>
                */
            EdgePackagingJobName: string | undefined;
            /**
                * <p>The status of the edge packaging job.</p>
                */
            EdgePackagingJobStatus: EdgePackagingJobStatus | string | undefined;
            /**
                * <p>The name of the SageMaker Neo compilation job.</p>
                */
            CompilationJobName?: string;
            /**
                * <p>The name of the model.</p>
                */
            ModelName?: string;
            /**
                * <p>The version of the model.</p>
                */
            ModelVersion?: string;
            /**
                * <p>The timestamp of when the job was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The timestamp of when the edge packaging job was last updated.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace EdgePackagingJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EdgePackagingJobSummary) => any;
    }
    /**
        * <p>The configurations and outcomes of an Amazon EMR step execution.</p>
        */
    export interface EMRStepMetadata {
            /**
                * <p>The identifier of the EMR cluster.</p>
                */
            ClusterId?: string;
            /**
                * <p>The identifier of the EMR cluster step.</p>
                */
            StepId?: string;
            /**
                * <p>The name of the EMR cluster step.</p>
                */
            StepName?: string;
            /**
                * <p>The path to the log file where the cluster step's failure root cause
                *             is recorded.</p>
                */
            LogFilePath?: string;
    }
    export namespace EMRStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EMRStepMetadata) => any;
    }
    export interface EnableSagemakerServicecatalogPortfolioInput {
    }
    export namespace EnableSagemakerServicecatalogPortfolioInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableSagemakerServicecatalogPortfolioInput) => any;
    }
    export interface EnableSagemakerServicecatalogPortfolioOutput {
    }
    export namespace EnableSagemakerServicecatalogPortfolioOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableSagemakerServicecatalogPortfolioOutput) => any;
    }
    /**
        * <p>A schedule for a model monitoring job. For information about model monitor, see
        *             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model
        *                 Monitor</a>.</p>
        */
    export interface MonitoringSchedule {
            /**
                * <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
                */
            MonitoringScheduleArn?: string;
            /**
                * <p>The name of the monitoring schedule.</p>
                */
            MonitoringScheduleName?: string;
            /**
                * <p>The status of the monitoring schedule. This can be one of the following values.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> - The schedule is pending being created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FAILED</code> - The schedule failed.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SCHEDULED</code> - The schedule was successfully created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>STOPPED</code> - The schedule was stopped.</p>
                *             </li>
                *          </ul>
                */
            MonitoringScheduleStatus?: ScheduleStatus | string;
            /**
                * <p>The type of the monitoring job definition to schedule.</p>
                */
            MonitoringType?: MonitoringType | string;
            /**
                * <p>If the monitoring schedule failed, the reason it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The time that the monitoring schedule was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The last time the monitoring schedule was changed.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Configures the monitoring schedule and defines the monitoring job.</p>
                */
            MonitoringScheduleConfig?: MonitoringScheduleConfig;
            /**
                * <p>The endpoint that hosts the model being monitored.</p>
                */
            EndpointName?: string;
            /**
                * <p>Summary of information about the last monitoring job to run.</p>
                */
            LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
            /**
                * <p>A list of the tags associated with the monitoring schedlue. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *             resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace MonitoringSchedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringSchedule) => any;
    }
    /**
        * <p>A hosted endpoint for real-time inference.</p>
        */
    export interface Endpoint {
            /**
                * <p>The name of the endpoint.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>The endpoint configuration associated with the endpoint.</p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p>A list of the production variants hosted on the endpoint. Each production variant is a
                *             model.</p>
                */
            ProductionVariants?: ProductionVariantSummary[];
            /**
                * <p>The currently active data capture configuration used by your Endpoint.</p>
                */
            DataCaptureConfig?: DataCaptureConfigSummary;
            /**
                * <p>The status of the endpoint.</p>
                */
            EndpointStatus: EndpointStatus | string | undefined;
            /**
                * <p>If the endpoint failed, the reason it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The time that the endpoint was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The last time the endpoint was modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>A list of monitoring schedules for the endpoint. For information about model
                *             monitoring, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
                */
            MonitoringSchedules?: MonitoringSchedule[];
            /**
                * <p>A list of the tags associated with the endpoint. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *             resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace Endpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Endpoint) => any;
    }
    export enum EndpointConfigSortKey {
            CreationTime = "CreationTime",
            Name = "Name"
    }
    /**
        * <p>Provides summary information for an endpoint configuration.</p>
        */
    export interface EndpointConfigSummary {
            /**
                * <p>The name of the endpoint configuration.</p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>
                */
            EndpointConfigArn: string | undefined;
            /**
                * <p>A timestamp that shows when the endpoint configuration was created.</p>
                */
            CreationTime: Date | undefined;
    }
    export namespace EndpointConfigSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointConfigSummary) => any;
    }
    export enum EndpointSortKey {
            CreationTime = "CreationTime",
            Name = "Name",
            Status = "Status"
    }
    /**
        * <p>Provides summary information for an endpoint.</p>
        */
    export interface EndpointSummary {
            /**
                * <p>The name of the endpoint.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>A timestamp that shows when the endpoint was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp that shows when the endpoint was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The status of the endpoint.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>OutOfService</code>: Endpoint is not available to take incoming
                *                     requests.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Creating</code>: <a>CreateEndpoint</a> is executing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Updating</code>: <a>UpdateEndpoint</a> or <a>UpdateEndpointWeightsAndCapacities</a> is executing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be
                *                     updated or deleted or re-scaled until it has completed. This maintenance
                *                     operation does not change any customer-specified values such as VPC config, KMS
                *                     encryption, model, instance type, or instance count.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RollingBack</code>: Endpoint fails to scale up or down or change its
                *                     variant weight and is in the process of rolling back to its previous
                *                     configuration. Once the rollback completes, endpoint returns to an
                *                         <code>InService</code> status. This transitional status only applies to an
                *                     endpoint that has autoscaling enabled and is undergoing variant weight or
                *                     capacity changes as part of an <a>UpdateEndpointWeightsAndCapacities</a> call or when the <a>UpdateEndpointWeightsAndCapacities</a> operation is called
                *                     explicitly.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InService</code>: Endpoint is available to process incoming
                *                     requests.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Deleting</code>: <a>DeleteEndpoint</a> is executing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use
                *                         <a>DescribeEndpointOutput$FailureReason</a> for information about
                *                     the failure. <a>DeleteEndpoint</a> is the only operation that can be
                *                     performed on a failed endpoint.</p>
                *             </li>
                *          </ul>
                *         <p>To get a list of endpoints with a specified status, use the <a>ListEndpointsInput$StatusEquals</a> filter.</p>
                */
            EndpointStatus: EndpointStatus | string | undefined;
    }
    export namespace EndpointSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointSummary) => any;
    }
    /**
        * <p>The properties of an experiment as returned by the <a>Search</a> API.</p>
        */
    export interface Experiment {
            /**
                * <p>The name of the experiment.</p>
                */
            ExperimentName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the experiment.</p>
                */
            ExperimentArn?: string;
            /**
                * <p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>ExperimentName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The source of the experiment.</p>
                */
            Source?: ExperimentSource;
            /**
                * <p>The description of the experiment.</p>
                */
            Description?: string;
            /**
                * <p>When the experiment was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Who created the experiment.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the experiment was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>The list of tags that are associated with the experiment. You can use <a>Search</a> API to search on the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace Experiment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Experiment) => any;
    }
    /**
        * <p>A summary of the properties of an experiment. To get the complete set of properties, call
        *       the <a>DescribeExperiment</a> API and provide the
        *       <code>ExperimentName</code>.</p>
        */
    export interface ExperimentSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the experiment.</p>
                */
            ExperimentArn?: string;
            /**
                * <p>The name of the experiment.</p>
                */
            ExperimentName?: string;
            /**
                * <p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>ExperimentName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The source of the experiment.</p>
                */
            ExperimentSource?: ExperimentSource;
            /**
                * <p>When the experiment was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When the experiment was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace ExperimentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentSummary) => any;
    }
    /**
        * <p>The container for the metadata for Fail step.</p>
        */
    export interface FailStepMetadata {
            /**
                * <p>A message that you define and then is processed and rendered by
                *          the Fail step when the error occurs.</p>
                */
            ErrorMessage?: string;
    }
    export namespace FailStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailStepMetadata) => any;
    }
    /**
        * <p>Amazon SageMaker Feature Store stores features in a collection called Feature Group.
        *          A Feature Group can be visualized as a table which has rows,
        *          with a unique identifier for each row where each column in the table is a feature.
        *          In principle, a Feature Group is composed of features and values per features.</p>
        */
    export interface FeatureGroup {
            /**
                * <p>The Amazon Resource Name (ARN) of a <code>FeatureGroup</code>.</p>
                */
            FeatureGroupArn?: string;
            /**
                * <p>The name of the <code>FeatureGroup</code>.</p>
                */
            FeatureGroupName?: string;
            /**
                * <p>The name of the <code>Feature</code> whose value uniquely identifies a
                *       <code>Record</code> defined in the <code>FeatureGroup</code>
                *             <code>FeatureDefinitions</code>.</p>
                */
            RecordIdentifierFeatureName?: string;
            /**
                * <p>The name of the feature that stores the <code>EventTime</code> of a Record in a
                *          <code>FeatureGroup</code>.</p>
                *          <p>A <code>EventTime</code> is point in time when a new event
                *          occurs that corresponds to the creation or update of a <code>Record</code> in
                *          <code>FeatureGroup</code>. All <code>Records</code> in the <code>FeatureGroup</code>
                *          must have a corresponding <code>EventTime</code>.</p>
                */
            EventTimeFeatureName?: string;
            /**
                * <p>A list of <code>Feature</code>s. Each <code>Feature</code> must include a
                *             <code>FeatureName</code> and a <code>FeatureType</code>. </p>
                *          <p>Valid <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and
                *             <code>String</code>. </p>
                *          <p>
                *             <code>FeatureName</code>s cannot be any of the following: <code>is_deleted</code>,
                *             <code>write_time</code>, <code>api_invocation_time</code>.</p>
                *          <p>You can create up to 2,500 <code>FeatureDefinition</code>s per
                *          <code>FeatureGroup</code>.</p>
                */
            FeatureDefinitions?: FeatureDefinition[];
            /**
                * <p>The time a <code>FeatureGroup</code> was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A timestamp indicating the last time you updated the feature group.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or
                *             <code>KMSKeyId</code>, for at rest data encryption. You can turn
                *             <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag
                *          at General Assembly; the default value is <code>False</code>.</p>
                */
            OnlineStoreConfig?: OnlineStoreConfig;
            /**
                * <p>The configuration of an <code>OfflineStore</code>.</p>
                *          <p>Provide an <code>OfflineStoreConfig</code> in a request to
                *             <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p>
                *          <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key
                *          Management Service (KMS) key ID, or <code>KMSKeyId</code>, in
                *          <code>S3StorageConfig</code>.</p>
                */
            OfflineStoreConfig?: OfflineStoreConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM execution role used to create the feature
                *          group.</p>
                */
            RoleArn?: string;
            /**
                * <p>A <code>FeatureGroup</code> status.</p>
                */
            FeatureGroupStatus?: FeatureGroupStatus | string;
            /**
                * <p>The status of <code>OfflineStore</code>.</p>
                */
            OfflineStoreStatus?: OfflineStoreStatus;
            /**
                * <p>A value that indicates whether the feature group was updated successfully.</p>
                */
            LastUpdateStatus?: LastUpdateStatus;
            /**
                * <p>The reason that the <code>FeatureGroup</code> failed to
                *          be replicated in the <code>OfflineStore</code>. This is
                *          failure may be due to a failure to create a <code>FeatureGroup</code> in
                *          or delete a <code>FeatureGroup</code> from the <code>OfflineStore</code>.</p>
                */
            FailureReason?: string;
            /**
                * <p>A free form description of a <code>FeatureGroup</code>.</p>
                */
            Description?: string;
            /**
                * <p>Tags used to define a <code>FeatureGroup</code>.</p>
                */
            Tags?: Tag[];
    }
    export namespace FeatureGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FeatureGroup) => any;
    }
    export enum FeatureGroupSortBy {
            CREATION_TIME = "CreationTime",
            FEATURE_GROUP_STATUS = "FeatureGroupStatus",
            NAME = "Name",
            OFFLINE_STORE_STATUS = "OfflineStoreStatus"
    }
    export enum FeatureGroupSortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    /**
        * <p>The name, Arn, <code>CreationTime</code>, <code>FeatureGroup</code> values,
        *             <code>LastUpdatedTime</code> and <code>EnableOnlineStorage</code> status of a
        *             <code>FeatureGroup</code>.</p>
        */
    export interface FeatureGroupSummary {
            /**
                * <p>The name of <code>FeatureGroup</code>.</p>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>Unique identifier for the <code>FeatureGroup</code>.</p>
                */
            FeatureGroupArn: string | undefined;
            /**
                * <p>A timestamp indicating the time of creation time of the <code>FeatureGroup</code>.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The status of a FeatureGroup. The status can be any of the following:
                *             <code>Creating</code>, <code>Created</code>, <code>CreateFail</code>,
                *             <code>Deleting</code> or <code>DetailFail</code>. </p>
                */
            FeatureGroupStatus?: FeatureGroupStatus | string;
            /**
                * <p>Notifies you if replicating data into the <code>OfflineStore</code> has failed. Returns
                *          either: <code>Active</code> or <code>Blocked</code>.</p>
                */
            OfflineStoreStatus?: OfflineStoreStatus;
    }
    export namespace FeatureGroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FeatureGroupSummary) => any;
    }
    /**
        * <p>The metadata for a feature. It can either be metadata that you specify, or metadata that is updated automatically.</p>
        */
    export interface FeatureMetadata {
            /**
                * <p>The Amazon Resource Number (ARN) of the feature group.</p>
                */
            FeatureGroupArn?: string;
            /**
                * <p>The name of the feature group containing the feature.</p>
                */
            FeatureGroupName?: string;
            /**
                * <p>The name of feature.</p>
                */
            FeatureName?: string;
            /**
                * <p>The data type of the feature.</p>
                */
            FeatureType?: FeatureType | string;
            /**
                * <p>A timestamp indicating when the feature was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A timestamp indicating when the feature was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>An optional description that you specify to better describe the feature.</p>
                */
            Description?: string;
            /**
                * <p>Optional key-value pairs that you specify to better describe the feature.</p>
                */
            Parameters?: FeatureParameter[];
    }
    export namespace FeatureMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FeatureMetadata) => any;
    }
    export enum Operator {
            CONTAINS = "Contains",
            EQUALS = "Equals",
            EXISTS = "Exists",
            GREATER_THAN = "GreaterThan",
            GREATER_THAN_OR_EQUAL_TO = "GreaterThanOrEqualTo",
            IN = "In",
            LESS_THAN = "LessThan",
            LESS_THAN_OR_EQUAL_TO = "LessThanOrEqualTo",
            NOT_EQUALS = "NotEquals",
            NOT_EXISTS = "NotExists"
    }
    /**
        * <p>A conditional statement for a search expression that includes a resource property, a
        *       Boolean operator, and a value. Resources that match the statement are returned in the
        *       results from the <a>Search</a> API.</p>
        *
        *          <p>If you specify a <code>Value</code>, but not an <code>Operator</code>, Amazon SageMaker uses the
        *       equals operator.</p>
        *          <p>In search, there are several property types:</p>
        *          <dl>
        *             <dt>Metrics</dt>
        *             <dd>
        *                <p>To define a metric filter, enter a value using the form
        *             <code>"Metrics.<name>"</code>, where <code><name></code> is
        *             a metric name. For example, the following filter searches for training jobs
        *             with an <code>"accuracy"</code> metric greater than
        *             <code>"0.9"</code>:</p>
        *                <p>
        *                   <code>{</code>
        *                </p>
        *                <p>
        *                   <code>"Name": "Metrics.accuracy",</code>
        *                </p>
        *                <p>
        *                   <code>"Operator": "GreaterThan",</code>
        *                </p>
        *                <p>
        *                   <code>"Value": "0.9"</code>
        *                </p>
        *                <p>
        *                   <code>}</code>
        *                </p>
        *             </dd>
        *             <dt>HyperParameters</dt>
        *             <dd>
        *                <p>To define a hyperparameter filter, enter a value with the form
        *             <code>"HyperParameters.<name>"</code>. Decimal hyperparameter
        *             values are treated as a decimal in a comparison if the specified
        *             <code>Value</code> is also a decimal value. If the specified
        *             <code>Value</code> is an integer, the decimal hyperparameter values are
        *             treated as integers. For example, the following filter is satisfied by
        *             training jobs with a <code>"learning_rate"</code> hyperparameter that is
        *             less than <code>"0.5"</code>:</p>
        *                <p>
        *                   <code> {</code>
        *                </p>
        *                <p>
        *                   <code> "Name": "HyperParameters.learning_rate",</code>
        *                </p>
        *                <p>
        *                   <code> "Operator": "LessThan",</code>
        *                </p>
        *                <p>
        *                   <code> "Value": "0.5"</code>
        *                </p>
        *                <p>
        *                   <code> }</code>
        *                </p>
        *             </dd>
        *             <dt>Tags</dt>
        *             <dd>
        *                <p>To define a tag filter, enter a value with the form
        *             <code>Tags.<key></code>.</p>
        *             </dd>
        *          </dl>
        */
    export interface Filter {
            /**
                * <p>A resource property name. For example, <code>TrainingJobName</code>. For
                *       valid property names, see <a>SearchRecord</a>.
                *       You must specify a valid property for the resource.</p>
                */
            Name: string | undefined;
            /**
                * <p>A Boolean binary operator that is used to evaluate the filter. The operator field
                *       contains one of the following values:</p>
                *          <dl>
                *             <dt>Equals</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> equals <code>Value</code>.</p>
                *             </dd>
                *             <dt>NotEquals</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> doesn't equal <code>Value</code>.</p>
                *             </dd>
                *             <dt>Exists</dt>
                *             <dd>
                *                <p>The <code>Name</code> property exists.</p>
                *             </dd>
                *             <dt>NotExists</dt>
                *             <dd>
                *                <p>The <code>Name</code> property does not exist.</p>
                *             </dd>
                *             <dt>GreaterThan</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> is greater than <code>Value</code>.
                *             Not supported for text properties.</p>
                *             </dd>
                *             <dt>GreaterThanOrEqualTo</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> is greater than or equal to <code>Value</code>.
                *             Not supported for text properties.</p>
                *             </dd>
                *             <dt>LessThan</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> is less than <code>Value</code>.
                *             Not supported for text properties.</p>
                *             </dd>
                *             <dt>LessThanOrEqualTo</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> is less than or equal to <code>Value</code>.
                *             Not supported for text properties.</p>
                *             </dd>
                *             <dt>In</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> is one of the comma delimited strings in
                *             <code>Value</code>. Only supported for text properties.</p>
                *             </dd>
                *             <dt>Contains</dt>
                *             <dd>
                *                <p>The value of <code>Name</code> contains the string <code>Value</code>.
                *             Only supported for text properties.</p>
                *                <p>A <code>SearchExpression</code> can include the <code>Contains</code> operator
                *             multiple times when the value of <code>Name</code> is one of the following:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Experiment.DisplayName</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Experiment.ExperimentName</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Experiment.Tags</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Trial.DisplayName</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Trial.TrialName</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Trial.Tags</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>TrialComponent.DisplayName</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>TrialComponent.TrialComponentName</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>TrialComponent.Tags</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>TrialComponent.InputArtifacts</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>TrialComponent.OutputArtifacts</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>A <code>SearchExpression</code> can include only one <code>Contains</code> operator
                *             for all other values of <code>Name</code>. In these cases, if you include multiple
                *             <code>Contains</code> operators in the <code>SearchExpression</code>, the result is
                *             the following error message: "<code>'CONTAINS' operator usage limit of 1
                *             exceeded.</code>"</p>
                *             </dd>
                *          </dl>
                */
            Operator?: Operator | string;
            /**
                * <p>A value used with <code>Name</code> and <code>Operator</code> to determine which
                *         resources satisfy the filter's condition. For numerical properties, <code>Value</code>
                *         must be an integer or floating-point decimal. For timestamp properties,
                *         <code>Value</code> must be an ISO 8601 date-time string of the following format:
                *         <code>YYYY-mm-dd'T'HH:MM:SS</code>.</p>
                */
            Value?: string;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>Contains summary information about the flow definition.</p>
        */
    export interface FlowDefinitionSummary {
            /**
                * <p>The name of the flow definition.</p>
                */
            FlowDefinitionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the flow definition.</p>
                */
            FlowDefinitionArn: string | undefined;
            /**
                * <p>The status of the flow definition. Valid values:</p>
                */
            FlowDefinitionStatus: FlowDefinitionStatus | string | undefined;
            /**
                * <p>The timestamp when SageMaker created the flow definition.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The reason why the flow definition creation failed. A failure reason is returned only when the flow definition status is <code>Failed</code>.</p>
                */
            FailureReason?: string;
    }
    export namespace FlowDefinitionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FlowDefinitionSummary) => any;
    }
    export interface GetDeviceFleetReportRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            DeviceFleetName: string | undefined;
    }
    export namespace GetDeviceFleetReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceFleetReportRequest) => any;
    }
    export interface GetDeviceFleetReportResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the device.</p>
                */
            DeviceFleetArn: string | undefined;
            /**
                * <p>The name of the fleet.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The output configuration for storing sample data collected by the fleet.</p>
                */
            OutputConfig?: EdgeOutputConfig;
            /**
                * <p>Description of the fleet.</p>
                */
            Description?: string;
            /**
                * <p>Timestamp of when the report was generated.</p>
                */
            ReportGenerated?: Date;
            /**
                * <p>Status of devices.</p>
                */
            DeviceStats?: DeviceStats;
            /**
                * <p>The versions of Edge Manager agent deployed on the fleet.</p>
                */
            AgentVersions?: AgentVersion[];
            /**
                * <p>Status of model on device.</p>
                */
            ModelStats?: EdgeModelStat[];
    }
    export namespace GetDeviceFleetReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceFleetReportResponse) => any;
    }
    export interface GetLineageGroupPolicyRequest {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupName: string | undefined;
    }
    export namespace GetLineageGroupPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLineageGroupPolicyRequest) => any;
    }
    export interface GetLineageGroupPolicyResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupArn?: string;
            /**
                * <p>The resource policy that gives access to the lineage group in another account.</p>
                */
            ResourcePolicy?: string;
    }
    export namespace GetLineageGroupPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLineageGroupPolicyResponse) => any;
    }
    export interface GetModelPackageGroupPolicyInput {
            /**
                * <p>The name of the model group for which to get the resource policy.</p>
                */
            ModelPackageGroupName: string | undefined;
    }
    export namespace GetModelPackageGroupPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelPackageGroupPolicyInput) => any;
    }
    export interface GetModelPackageGroupPolicyOutput {
            /**
                * <p>The resource policy for the model group.</p>
                */
            ResourcePolicy: string | undefined;
    }
    export namespace GetModelPackageGroupPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelPackageGroupPolicyOutput) => any;
    }
    export interface GetSagemakerServicecatalogPortfolioStatusInput {
    }
    export namespace GetSagemakerServicecatalogPortfolioStatusInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSagemakerServicecatalogPortfolioStatusInput) => any;
    }
    export enum SagemakerServicecatalogStatus {
            DISABLED = "Disabled",
            ENABLED = "Enabled"
    }
    export interface GetSagemakerServicecatalogPortfolioStatusOutput {
            /**
                * <p>Whether Service Catalog is enabled or disabled in SageMaker.</p>
                */
            Status?: SagemakerServicecatalogStatus | string;
    }
    export namespace GetSagemakerServicecatalogPortfolioStatusOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSagemakerServicecatalogPortfolioStatusOutput) => any;
    }
    export enum ResourceType {
            ENDPOINT = "Endpoint",
            EXPERIMENT = "Experiment",
            EXPERIMENT_TRIAL = "ExperimentTrial",
            EXPERIMENT_TRIAL_COMPONENT = "ExperimentTrialComponent",
            FEATURE_GROUP = "FeatureGroup",
            FEATURE_METADATA = "FeatureMetadata",
            MODEL_PACKAGE = "ModelPackage",
            MODEL_PACKAGE_GROUP = "ModelPackageGroup",
            PIPELINE = "Pipeline",
            PIPELINE_EXECUTION = "PipelineExecution",
            PROJECT = "Project",
            TRAINING_JOB = "TrainingJob"
    }
    /**
        * <p>Part of the <code>SuggestionQuery</code> type. Specifies a hint for retrieving property
        *       names that begin with the specified text.</p>
        */
    export interface PropertyNameQuery {
            /**
                * <p>Text that begins a property's name.</p>
                */
            PropertyNameHint: string | undefined;
    }
    export namespace PropertyNameQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyNameQuery) => any;
    }
    /**
        * <p>Specified in the <a>GetSearchSuggestions</a> request.
        *       Limits the property names that are included in the response.</p>
        */
    export interface SuggestionQuery {
            /**
                * <p>Defines a property name hint. Only property
                *       names that begin with the specified hint are included in the response.</p>
                */
            PropertyNameQuery?: PropertyNameQuery;
    }
    export namespace SuggestionQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuggestionQuery) => any;
    }
    export interface GetSearchSuggestionsRequest {
            /**
                * <p>The name of the Amazon SageMaker resource to search for.</p>
                */
            Resource: ResourceType | string | undefined;
            /**
                * <p>Limits the property names that are included in the response.</p>
                */
            SuggestionQuery?: SuggestionQuery;
    }
    export namespace GetSearchSuggestionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSearchSuggestionsRequest) => any;
    }
    /**
        * <p>A property name returned from a <code>GetSearchSuggestions</code> call that specifies
        *       a value in the <code>PropertyNameQuery</code> field.</p>
        */
    export interface PropertyNameSuggestion {
            /**
                * <p>A suggested property name based on what you entered in the search textbox in the Amazon SageMaker
                *       console.</p>
                */
            PropertyName?: string;
    }
    export namespace PropertyNameSuggestion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyNameSuggestion) => any;
    }
    export interface GetSearchSuggestionsResponse {
            /**
                * <p>A list of property names for a <code>Resource</code> that match a
                *       <code>SuggestionQuery</code>.</p>
                */
            PropertyNameSuggestions?: PropertyNameSuggestion[];
    }
    export namespace GetSearchSuggestionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSearchSuggestionsResponse) => any;
    }
    /**
        * <p>Specifies configuration details for a Git repository when the repository is
        *             updated.</p>
        */
    export interface GitConfigForUpdate {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the
                *             credentials used to access the git repository. The secret must have a staging label of
                *                 <code>AWSCURRENT</code> and must be in the following format:</p>
                *         <p>
                *             <code>{"username": <i>UserName</i>, "password":
                *                     <i>Password</i>}</code>
                *         </p>
                */
            SecretArn?: string;
    }
    export namespace GitConfigForUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GitConfigForUpdate) => any;
    }
    /**
        * <p>Container for human task user interface information.</p>
        */
    export interface HumanTaskUiSummary {
            /**
                * <p>The name of the human task user interface.</p>
                */
            HumanTaskUiName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the human task user interface.</p>
                */
            HumanTaskUiArn: string | undefined;
            /**
                * <p>A timestamp when SageMaker created the human task user interface.</p>
                */
            CreationTime: Date | undefined;
    }
    export namespace HumanTaskUiSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HumanTaskUiSummary) => any;
    }
    export enum HyperParameterTuningJobSortByOptions {
            CreationTime = "CreationTime",
            Name = "Name",
            Status = "Status"
    }
    /**
        * <p>Provides summary information about a hyperparameter tuning job.</p>
        */
    export interface HyperParameterTuningJobSummary {
            /**
                * <p>The name of the tuning job.</p>
                */
            HyperParameterTuningJobName: string | undefined;
            /**
                * <p>The
                *             Amazon
                *             Resource Name (ARN) of the tuning job.</p>
                */
            HyperParameterTuningJobArn: string | undefined;
            /**
                * <p>The status of the
                *             tuning
                *             job.</p>
                */
            HyperParameterTuningJobStatus: HyperParameterTuningJobStatus | string | undefined;
            /**
                * <p>Specifies the search strategy hyperparameter tuning uses to choose which
                *             hyperparameters to
                *             use
                *             for each iteration. Currently, the only valid value is
                *             Bayesian.</p>
                */
            Strategy: HyperParameterTuningJobStrategyType | string | undefined;
            /**
                * <p>The date and time that the tuning job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The date and time that the tuning job ended.</p>
                */
            HyperParameterTuningEndTime?: Date;
            /**
                * <p>The date and time that the tuning job was
                *             modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The <a>TrainingJobStatusCounters</a> object that specifies the numbers of
                *             training jobs, categorized by status, that this tuning job launched.</p>
                */
            TrainingJobStatusCounters: TrainingJobStatusCounters | undefined;
            /**
                * <p>The <a>ObjectiveStatusCounters</a> object that specifies the numbers of
                *             training jobs, categorized by objective metric status, that this tuning job
                *             launched.</p>
                */
            ObjectiveStatusCounters: ObjectiveStatusCounters | undefined;
            /**
                * <p>The <a>ResourceLimits</a> object that specifies the maximum number of
                *             training jobs and parallel training jobs allowed for this tuning job.</p>
                */
            ResourceLimits?: ResourceLimits;
    }
    export namespace HyperParameterTuningJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HyperParameterTuningJobSummary) => any;
    }
    /**
        * <p>A SageMaker image. A SageMaker image represents a set of container images that are derived from
        *         a common base container image. Each of these container images is represented by a SageMaker
        *         <code>ImageVersion</code>.</p>
        */
    export interface Image {
            /**
                * <p>When the image was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The description of the image.</p>
                */
            Description?: string;
            /**
                * <p>The name of the image as displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>When a create, update, or delete operation fails, the reason for the failure.</p>
                */
            FailureReason?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the image.</p>
                */
            ImageArn: string | undefined;
            /**
                * <p>The name of the image.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>The status of the image.</p>
                */
            ImageStatus: ImageStatus | string | undefined;
            /**
                * <p>When the image was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
    }
    export namespace Image {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Image) => any;
    }
    export enum ImageSortBy {
            CREATION_TIME = "CREATION_TIME",
            IMAGE_NAME = "IMAGE_NAME",
            LAST_MODIFIED_TIME = "LAST_MODIFIED_TIME"
    }
    export enum ImageSortOrder {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    /**
        * <p>A version of a SageMaker <code>Image</code>. A version represents an existing container
        *         image.</p>
        */
    export interface ImageVersion {
            /**
                * <p>When the version was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>When a create or delete operation fails, the reason for the failure.</p>
                */
            FailureReason?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the image the version is based on.</p>
                */
            ImageArn: string | undefined;
            /**
                * <p>The ARN of the version.</p>
                */
            ImageVersionArn: string | undefined;
            /**
                * <p>The status of the version.</p>
                */
            ImageVersionStatus: ImageVersionStatus | string | undefined;
            /**
                * <p>When the version was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The version number.</p>
                */
            Version: number | undefined;
    }
    export namespace ImageVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageVersion) => any;
    }
    export enum ImageVersionSortBy {
            CREATION_TIME = "CREATION_TIME",
            LAST_MODIFIED_TIME = "LAST_MODIFIED_TIME",
            VERSION = "VERSION"
    }
    export enum ImageVersionSortOrder {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    /**
        * <p>A structure that contains a list of recommendation jobs.</p>
        */
    export interface InferenceRecommendationsJob {
            /**
                * <p>The name of the job.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The job description.</p>
                */
            JobDescription: string | undefined;
            /**
                * <p>The recommendation job type.</p>
                */
            JobType: RecommendationJobType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the recommendation job.</p>
                */
            JobArn: string | undefined;
            /**
                * <p>The status of the job.</p>
                */
            Status: RecommendationJobStatus | string | undefined;
            /**
                * <p>A timestamp that shows when the job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp that shows when the job completed.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker
                *     to perform tasks on your behalf.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A timestamp that shows when the job was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>If the job fails, provides information why the job failed.</p>
                */
            FailureReason?: string;
    }
    export namespace InferenceRecommendationsJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferenceRecommendationsJob) => any;
    }
    /**
        * <p>Provides counts for human-labeled tasks in the labeling job.</p>
        */
    export interface LabelCountersForWorkteam {
            /**
                * <p>The total number of data objects labeled by a human worker.</p>
                */
            HumanLabeled?: number;
            /**
                * <p>The total number of data objects that need to be labeled by a human worker.</p>
                */
            PendingHuman?: number;
            /**
                * <p>The total number of tasks in the labeling job.</p>
                */
            Total?: number;
    }
    export namespace LabelCountersForWorkteam {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelCountersForWorkteam) => any;
    }
    /**
        * <p>Provides summary information for a work team.</p>
        */
    export interface LabelingJobForWorkteamSummary {
            /**
                * <p>The name of the labeling job that the work team is assigned to.</p>
                */
            LabelingJobName?: string;
            /**
                * <p>A unique identifier for a labeling job. You can use this to refer to a specific
                *             labeling job.</p>
                */
            JobReferenceCode: string | undefined;
            /**
                * <p>The Amazon Web Services account ID of the account used to start the labeling job.</p>
                */
            WorkRequesterAccountId: string | undefined;
            /**
                * <p>The date and time that the labeling job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Provides information about the progress of a labeling job.</p>
                */
            LabelCounters?: LabelCountersForWorkteam;
            /**
                * <p>The configured number of workers per data object.</p>
                */
            NumberOfHumanWorkersPerDataObject?: number;
    }
    export namespace LabelingJobForWorkteamSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobForWorkteamSummary) => any;
    }
    /**
        * <p>Provides summary information about a labeling job.</p>
        */
    export interface LabelingJobSummary {
            /**
                * <p>The name of the labeling job.</p>
                */
            LabelingJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) assigned to the labeling job when it was
                *             created.</p>
                */
            LabelingJobArn: string | undefined;
            /**
                * <p>The date and time that the job was created (timestamp).</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The date and time that the job was last modified (timestamp).</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The current status of the labeling job. </p>
                */
            LabelingJobStatus: LabelingJobStatus | string | undefined;
            /**
                * <p>Counts showing the progress of the labeling job.</p>
                */
            LabelCounters: LabelCounters | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the work team assigned to the job.</p>
                */
            WorkteamArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a Lambda function. The function is run before each
                *             data object is sent to a worker.</p>
                */
            PreHumanTaskLambdaArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Lambda function used to consolidate the
                *             annotations from individual workers into a label for a data object. For more
                *             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html">Annotation
                *                 Consolidation</a>.</p>
                */
            AnnotationConsolidationLambdaArn?: string;
            /**
                * <p>If the <code>LabelingJobStatus</code> field is <code>Failed</code>, this field
                *             contains a description of the error.</p>
                */
            FailureReason?: string;
            /**
                * <p>The location of the output produced by the labeling job.</p>
                */
            LabelingJobOutput?: LabelingJobOutput;
            /**
                * <p>Input configuration for the labeling job.</p>
                */
            InputConfig?: LabelingJobInputConfig;
    }
    export namespace LabelingJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingJobSummary) => any;
    }
    /**
        * <p>Metadata for a Lambda step.</p>
        */
    export interface LambdaStepMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.</p>
                */
            Arn?: string;
            /**
                * <p>A list of the output parameters of the Lambda step.</p>
                */
            OutputParameters?: OutputParameter[];
    }
    export namespace LambdaStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaStepMetadata) => any;
    }
    /**
        * <p>Lists a summary of the properties of a lineage group. A lineage group provides a group of shareable lineage entity
        *          resources.</p>
        */
    export interface LineageGroupSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group resource.</p>
                */
            LineageGroupArn?: string;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the lineage group.</p>
                */
            LineageGroupName?: string;
            /**
                * <p>The display name of the lineage group summary.</p>
                */
            DisplayName?: string;
            /**
                * <p>The creation time of the lineage group summary.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The last modified time of the lineage group summary.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace LineageGroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LineageGroupSummary) => any;
    }
    export enum LineageType {
            ACTION = "Action",
            ARTIFACT = "Artifact",
            CONTEXT = "Context",
            TRIAL_COMPONENT = "TrialComponent"
    }
    export enum SortActionsBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export enum SortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    export interface ListActionsRequest {
            /**
                * <p>A filter that returns only actions with the specified source URI.</p>
                */
            SourceUri?: string;
            /**
                * <p>A filter that returns only actions of the specified type.</p>
                */
            ActionType?: string;
            /**
                * <p>A filter that returns only actions created on or after the specified time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns only actions created on or before the specified time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: SortActionsBy | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the previous call to <code>ListActions</code> didn't return the full set of actions,
                *         the call returns a token for getting the next set of actions.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of actions to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
    }
    export namespace ListActionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListActionsRequest) => any;
    }
    export interface ListActionsResponse {
            /**
                * <p>A list of actions and their properties.</p>
                */
            ActionSummaries?: ActionSummary[];
            /**
                * <p>A token for getting the next set of actions, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListActionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListActionsResponse) => any;
    }
    export interface ListAlgorithmsInput {
            /**
                * <p>A filter that returns only algorithms created after the specified time
                *             (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only algorithms created before the specified time
                *             (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>The maximum number of algorithms to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the algorithm name. This filter returns only algorithms whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>If the response to a previous <code>ListAlgorithms</code> request was truncated, the
                *             response includes a <code>NextToken</code>. To retrieve the next set of algorithms, use
                *             the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The parameter by which to sort the results. The default is
                *             <code>CreationTime</code>.</p>
                */
            SortBy?: AlgorithmSortBy | string;
            /**
                * <p>The sort order for the results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListAlgorithmsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAlgorithmsInput) => any;
    }
    export interface ListAlgorithmsOutput {
            /**
                * <p>>An array of <code>AlgorithmSummary</code> objects, each of which lists an
                *             algorithm.</p>
                */
            AlgorithmSummaryList: AlgorithmSummary[] | undefined;
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             algorithms, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListAlgorithmsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAlgorithmsOutput) => any;
    }
    export interface ListAppImageConfigsRequest {
            /**
                * <p>The maximum number of AppImageConfigs to return in the response. The default value is
                *         10. </p>
                */
            MaxResults?: number;
            /**
                * <p>If the previous call to <code>ListImages</code> didn't return the full set of
                *         AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.</p>
                */
            NextToken?: string;
            /**
                * <p>A filter that returns only AppImageConfigs whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only AppImageConfigs created on or before the specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only AppImageConfigs created on or after the specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only AppImageConfigs modified on or before the specified time.</p>
                */
            ModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns only AppImageConfigs modified on or after the specified time.</p>
                */
            ModifiedTimeAfter?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: AppImageConfigSortKey | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListAppImageConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppImageConfigsRequest) => any;
    }
    export interface ListAppImageConfigsResponse {
            /**
                * <p>A token for getting the next set of AppImageConfigs, if there are any.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of AppImageConfigs and their properties.</p>
                */
            AppImageConfigs?: AppImageConfigDetails[];
    }
    export namespace ListAppImageConfigsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppImageConfigsResponse) => any;
    }
    export interface ListAppsRequest {
            /**
                * <p>If the previous response was truncated, you will receive this token.
                *         Use it in your next request to receive the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Returns a list up to a specified limit.</p>
                */
            MaxResults?: number;
            /**
                * <p>The sort order for the results. The default is Ascending.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The parameter by which to sort the results. The default is CreationTime.</p>
                */
            SortBy?: AppSortKey | string;
            /**
                * <p>A parameter to search for the domain ID.</p>
                */
            DomainIdEquals?: string;
            /**
                * <p>A parameter to search by user profile name.</p>
                */
            UserProfileNameEquals?: string;
    }
    export namespace ListAppsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppsRequest) => any;
    }
    export interface ListAppsResponse {
            /**
                * <p>The list of apps.</p>
                */
            Apps?: AppDetails[];
            /**
                * <p>If the previous response was truncated, you will receive this token.
                *         Use it in your next request to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAppsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppsResponse) => any;
    }
    export enum SortArtifactsBy {
            CREATION_TIME = "CreationTime"
    }
    export interface ListArtifactsRequest {
            /**
                * <p>A filter that returns only artifacts with the specified source URI.</p>
                */
            SourceUri?: string;
            /**
                * <p>A filter that returns only artifacts of the specified type.</p>
                */
            ArtifactType?: string;
            /**
                * <p>A filter that returns only artifacts created on or after the specified time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns only artifacts created on or before the specified time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: SortArtifactsBy | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the previous call to <code>ListArtifacts</code> didn't return the full set of artifacts,
                *         the call returns a token for getting the next set of artifacts.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of artifacts to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
    }
    export namespace ListArtifactsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListArtifactsRequest) => any;
    }
    export interface ListArtifactsResponse {
            /**
                * <p>A list of artifacts and their properties.</p>
                */
            ArtifactSummaries?: ArtifactSummary[];
            /**
                * <p>A token for getting the next set of artifacts, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListArtifactsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListArtifactsResponse) => any;
    }
    export enum SortAssociationsBy {
            CREATION_TIME = "CreationTime",
            DESTINATION_ARN = "DestinationArn",
            DESTINATION_TYPE = "DestinationType",
            SOURCE_ARN = "SourceArn",
            SOURCE_TYPE = "SourceType"
    }
    export interface ListAssociationsRequest {
            /**
                * <p>A filter that returns only associations with the specified source ARN.</p>
                */
            SourceArn?: string;
            /**
                * <p>A filter that returns only associations with the specified destination Amazon Resource Name (ARN).</p>
                */
            DestinationArn?: string;
            /**
                * <p>A filter that returns only associations with the specified source type.</p>
                */
            SourceType?: string;
            /**
                * <p>A filter that returns only associations with the specified destination type.</p>
                */
            DestinationType?: string;
            /**
                * <p>A filter that returns only associations of the specified type.</p>
                */
            AssociationType?: AssociationEdgeType | string;
            /**
                * <p>A filter that returns only associations created on or after the specified time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns only associations created on or before the specified time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: SortAssociationsBy | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the previous call to <code>ListAssociations</code> didn't return the full set of associations,
                *         the call returns a token for getting the next set of associations.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of associations to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
    }
    export namespace ListAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociationsRequest) => any;
    }
    export interface ListAssociationsResponse {
            /**
                * <p>A list of associations and their properties.</p>
                */
            AssociationSummaries?: AssociationSummary[];
            /**
                * <p>A token for getting the next set of associations, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociationsResponse) => any;
    }
    export interface ListAutoMLJobsRequest {
            /**
                * <p>Request a list of jobs, using a filter for time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>Request a list of jobs, using a filter for time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>Request a list of jobs, using a filter for time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>Request a list of jobs, using a filter for time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>Request a list of jobs, using a search filter for name.</p>
                */
            NameContains?: string;
            /**
                * <p>Request a list of jobs, using a filter for status.</p>
                */
            StatusEquals?: AutoMLJobStatus | string;
            /**
                * <p>The sort order for the results. The default is <code>Descending</code>.</p>
                */
            SortOrder?: AutoMLSortOrder | string;
            /**
                * <p>The parameter by which to sort the results. The default is <code>Name</code>.</p>
                */
            SortBy?: AutoMLSortBy | string;
            /**
                * <p>Request a list of jobs up to a specified limit.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the previous response was truncated, you receive this token. Use it in your next
                *          request to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAutoMLJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAutoMLJobsRequest) => any;
    }
    export interface ListAutoMLJobsResponse {
            /**
                * <p>Returns a summary list of jobs.</p>
                */
            AutoMLJobSummaries: AutoMLJobSummary[] | undefined;
            /**
                * <p>If the previous response was truncated, you receive this token. Use it in your next
                *          request to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAutoMLJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAutoMLJobsResponse) => any;
    }
    export interface ListCandidatesForAutoMLJobRequest {
            /**
                * <p>List the candidates created for the job by providing the job's name.</p>
                */
            AutoMLJobName: string | undefined;
            /**
                * <p>List the candidates for the job and filter by status.</p>
                */
            StatusEquals?: CandidateStatus | string;
            /**
                * <p>List the candidates for the job and filter by candidate name.</p>
                */
            CandidateNameEquals?: string;
            /**
                * <p>The sort order for the results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: AutoMLSortOrder | string;
            /**
                * <p>The parameter by which to sort the results. The default is
                *          <code>Descending</code>.</p>
                */
            SortBy?: CandidateSortBy | string;
            /**
                * <p>List the job's candidates up to a specified limit.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the previous response was truncated, you receive this token. Use it in your next
                *          request to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListCandidatesForAutoMLJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCandidatesForAutoMLJobRequest) => any;
    }
    export interface ListCandidatesForAutoMLJobResponse {
            /**
                * <p>Summaries about the <code>AutoMLCandidates</code>.</p>
                */
            Candidates: AutoMLCandidate[] | undefined;
            /**
                * <p>If the previous response was truncated, you receive this token. Use it in your next
                *          request to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListCandidatesForAutoMLJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCandidatesForAutoMLJobResponse) => any;
    }
    export interface ListCodeRepositoriesInput {
            /**
                * <p>A filter that returns only Git repositories that were created after the specified
                *             time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only Git repositories that were created before the specified
                *             time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only Git repositories that were last modified after the
                *             specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only Git repositories that were last modified before the
                *             specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>The maximum number of Git repositories to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the Git repositories name. This filter returns only repositories whose
                *             name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>If the result of a <code>ListCodeRepositoriesOutput</code> request was truncated, the
                *             response includes a <code>NextToken</code>. To get the next set of Git repositories, use
                *             the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The field to sort results by. The default is <code>Name</code>.</p>
                */
            SortBy?: CodeRepositorySortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: CodeRepositorySortOrder | string;
    }
    export namespace ListCodeRepositoriesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCodeRepositoriesInput) => any;
    }
    export interface ListCodeRepositoriesOutput {
            /**
                * <p>Gets a list of summaries of the Git repositories. Each summary specifies the following
                *             values for the repository: </p>
                *         <ul>
                *             <li>
                *                 <p>Name</p>
                *             </li>
                *             <li>
                *                 <p>Amazon Resource Name (ARN)</p>
                *             </li>
                *             <li>
                *                 <p>Creation time</p>
                *             </li>
                *             <li>
                *                 <p>Last modified time</p>
                *             </li>
                *             <li>
                *                 <p>Configuration information, including the URL location of the repository and
                *                     the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used
                *                     to access the repository.</p>
                *             </li>
                *          </ul>
                */
            CodeRepositorySummaryList: CodeRepositorySummary[] | undefined;
            /**
                * <p>If the result of a <code>ListCodeRepositoriesOutput</code> request was truncated, the
                *             response includes a <code>NextToken</code>. To get the next set of Git repositories, use
                *             the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListCodeRepositoriesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCodeRepositoriesOutput) => any;
    }
    export enum ListCompilationJobsSortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name",
            STATUS = "Status"
    }
    export interface ListCompilationJobsRequest {
            /**
                * <p>If the result of the previous <code>ListCompilationJobs</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of model
                *             compilation jobs, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of model compilation jobs to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A filter that returns the model compilation jobs that were created after a specified
                *             time. </p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns the model compilation jobs that were created before a specified
                *             time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns the model compilation jobs that were modified after a specified
                *             time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns the model compilation jobs that were modified before a specified
                *             time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns the model compilation jobs whose name contains a specified
                *             string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that retrieves model compilation jobs with a specific <a>DescribeCompilationJobResponse$CompilationJobStatus</a> status.</p>
                */
            StatusEquals?: CompilationJobStatus | string;
            /**
                * <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: ListCompilationJobsSortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListCompilationJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCompilationJobsRequest) => any;
    }
    export interface ListCompilationJobsResponse {
            /**
                * <p>An array of <a>CompilationJobSummary</a> objects, each describing a model
                *             compilation job. </p>
                */
            CompilationJobSummaries: CompilationJobSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this <code>NextToken</code>. To retrieve
                *             the next set of model compilation jobs, use this token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListCompilationJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCompilationJobsResponse) => any;
    }
    export enum SortContextsBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListContextsRequest {
            /**
                * <p>A filter that returns only contexts with the specified source URI.</p>
                */
            SourceUri?: string;
            /**
                * <p>A filter that returns only contexts of the specified type.</p>
                */
            ContextType?: string;
            /**
                * <p>A filter that returns only contexts created on or after the specified time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns only contexts created on or before the specified time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: SortContextsBy | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the previous call to <code>ListContexts</code> didn't return the full set of contexts,
                *         the call returns a token for getting the next set of contexts.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of contexts to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
    }
    export namespace ListContextsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContextsRequest) => any;
    }
    export interface ListContextsResponse {
            /**
                * <p>A list of contexts and their properties.</p>
                */
            ContextSummaries?: ContextSummary[];
            /**
                * <p>A token for getting the next set of contexts, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListContextsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContextsResponse) => any;
    }
    export enum MonitoringJobDefinitionSortKey {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListDataQualityJobDefinitionsRequest {
            /**
                * <p>A filter that lists the data quality job definitions associated with the specified
                *          endpoint.</p>
                */
            EndpointName?: string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: MonitoringJobDefinitionSortKey | string;
            /**
                * <p>The sort order for results. The default is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the result of the previous <code>ListDataQualityJobDefinitions</code> request was
                *          truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
                *          transform jobs, use the token in the next request.></p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of data quality monitoring job definitions to return in the
                *          response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the data quality monitoring job definition name. This filter returns only
                *          data quality monitoring job definitions whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only data quality monitoring job definitions created before the
                *          specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only data quality monitoring job definitions created after the
                *          specified time.</p>
                */
            CreationTimeAfter?: Date;
    }
    export namespace ListDataQualityJobDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataQualityJobDefinitionsRequest) => any;
    }
    /**
        * <p>Summary information about a monitoring job.</p>
        */
    export interface MonitoringJobDefinitionSummary {
            /**
                * <p>The name of the monitoring job.</p>
                */
            MonitoringJobDefinitionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the monitoring job.</p>
                */
            MonitoringJobDefinitionArn: string | undefined;
            /**
                * <p>The time that the monitoring job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The name of the endpoint that the job monitors.</p>
                */
            EndpointName: string | undefined;
    }
    export namespace MonitoringJobDefinitionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringJobDefinitionSummary) => any;
    }
    export interface ListDataQualityJobDefinitionsResponse {
            /**
                * <p>A list of data quality monitoring job definitions.</p>
                */
            JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
            /**
                * <p>If the result of the previous <code>ListDataQualityJobDefinitions</code> request was
                *          truncated, the response includes a <code>NextToken</code>. To retrieve the next set of data
                *          quality monitoring job definitions, use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListDataQualityJobDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataQualityJobDefinitionsResponse) => any;
    }
    export enum ListDeviceFleetsSortBy {
            CreationTime = "CREATION_TIME",
            LastModifiedTime = "LAST_MODIFIED_TIME",
            Name = "NAME"
    }
    export interface ListDeviceFleetsRequest {
            /**
                * <p>The response from the last list when returning a list large enough to need tokening.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to select.</p>
                */
            MaxResults?: number;
            /**
                * <p>Filter fleets where packaging job was created after specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>Filter fleets where the edge packaging job was created before specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>Select fleets where the job was updated after X</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>Select fleets where the job was updated before X</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>Filter for fleets containing this name in their fleet device name.</p>
                */
            NameContains?: string;
            /**
                * <p>The column to sort by.</p>
                */
            SortBy?: ListDeviceFleetsSortBy | string;
            /**
                * <p>What direction to sort in.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListDeviceFleetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceFleetsRequest) => any;
    }
    export interface ListDeviceFleetsResponse {
            /**
                * <p>Summary of the device fleet.</p>
                */
            DeviceFleetSummaries: DeviceFleetSummary[] | undefined;
            /**
                * <p>The response from the last list when returning a list large enough to need tokening.</p>
                */
            NextToken?: string;
    }
    export namespace ListDeviceFleetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceFleetsResponse) => any;
    }
    export interface ListDevicesRequest {
            /**
                * <p>The response from the last list when returning a list large enough to need tokening.</p>
                */
            NextToken?: string;
            /**
                * <p>Maximum number of results to select.</p>
                */
            MaxResults?: number;
            /**
                * <p>Select fleets where the job was updated after X</p>
                */
            LatestHeartbeatAfter?: Date;
            /**
                * <p>A filter that searches devices that contains this name in any of their models.</p>
                */
            ModelName?: string;
            /**
                * <p>Filter for fleets containing this name in their device fleet name.</p>
                */
            DeviceFleetName?: string;
    }
    export namespace ListDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesRequest) => any;
    }
    export interface ListDevicesResponse {
            /**
                * <p>Summary of devices.</p>
                */
            DeviceSummaries: DeviceSummary[] | undefined;
            /**
                * <p>The response from the last list when returning a list large enough to need tokening.</p>
                */
            NextToken?: string;
    }
    export namespace ListDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesResponse) => any;
    }
    export interface ListDomainsRequest {
            /**
                * <p>If the previous response was truncated, you will receive this token.
                *         Use it in your next request to receive the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Returns a list up to a specified limit.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDomainsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsRequest) => any;
    }
    export interface ListDomainsResponse {
            /**
                * <p>The list of domains.</p>
                */
            Domains?: DomainDetails[];
            /**
                * <p>If the previous response was truncated, you will receive this token.
                *         Use it in your next request to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDomainsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsResponse) => any;
    }
    export enum ListEdgeDeploymentPlansSortBy {
            CreationTime = "CREATION_TIME",
            DeviceFleetName = "DEVICE_FLEET_NAME",
            LastModifiedTime = "LAST_MODIFIED_TIME",
            Name = "NAME"
    }
    export interface ListEdgeDeploymentPlansRequest {
            /**
                * <p>The response from the last list when returning a list large enough to need tokening.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to select (50 by default).</p>
                */
            MaxResults?: number;
            /**
                * <p>Selects edge deployment plans created after this time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>Selects edge deployment plans created before this time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>Selects edge deployment plans that were last updated after this time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>Selects edge deployment plans that were last updated before this time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>Selects edge deployment plans with names containing this name.</p>
                */
            NameContains?: string;
            /**
                * <p>Selects edge deployment plans with a device fleet name containing this name.</p>
                */
            DeviceFleetNameContains?: string;
            /**
                * <p>The column by which to sort the edge deployment plans. Can be one of <code>NAME</code>, <code>DEVICEFLEETNAME</code>, <code>CREATIONTIME</code>, <code>LASTMODIFIEDTIME</code>.</p>
                */
            SortBy?: ListEdgeDeploymentPlansSortBy | string;
            /**
                * <p>The direction of the sorting (ascending or descending).</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListEdgeDeploymentPlansRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEdgeDeploymentPlansRequest) => any;
    }
    export interface ListEdgeDeploymentPlansResponse {
            /**
                * <p>List of summaries of edge deployment plans.</p>
                */
            EdgeDeploymentPlanSummaries: EdgeDeploymentPlanSummary[] | undefined;
            /**
                * <p>The token to use when calling the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEdgeDeploymentPlansResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEdgeDeploymentPlansResponse) => any;
    }
    export enum ListEdgePackagingJobsSortBy {
            CreationTime = "CREATION_TIME",
            EdgePackagingJobStatus = "STATUS",
            LastModifiedTime = "LAST_MODIFIED_TIME",
            ModelName = "MODEL_NAME",
            Name = "NAME"
    }
    export interface ListEdgePackagingJobsRequest {
            /**
                * <p>The response from the last list when returning a list large enough to need tokening.</p>
                */
            NextToken?: string;
            /**
                * <p>Maximum number of results to select.</p>
                */
            MaxResults?: number;
            /**
                * <p>Select jobs where the job was created after specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>Select jobs where the job was created before specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>Select jobs where the job was updated after specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>Select jobs where the job was updated before specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>Filter for jobs containing this name in their packaging job name.</p>
                */
            NameContains?: string;
            /**
                * <p>Filter for jobs where the model name contains this string.</p>
                */
            ModelNameContains?: string;
            /**
                * <p>The job status to filter for.</p>
                */
            StatusEquals?: EdgePackagingJobStatus | string;
            /**
                * <p>Use to specify what column to sort by.</p>
                */
            SortBy?: ListEdgePackagingJobsSortBy | string;
            /**
                * <p>What direction to sort by.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListEdgePackagingJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEdgePackagingJobsRequest) => any;
    }
    export interface ListEdgePackagingJobsResponse {
            /**
                * <p>Summaries of edge packaging jobs.</p>
                */
            EdgePackagingJobSummaries: EdgePackagingJobSummary[] | undefined;
            /**
                * <p>Token to use when calling the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEdgePackagingJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEdgePackagingJobsResponse) => any;
    }
    export enum OrderKey {
            Ascending = "Ascending",
            Descending = "Descending"
    }
    export interface ListEndpointConfigsInput {
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: EndpointConfigSortKey | string;
            /**
                * <p>The sort order for results. The default is <code>Descending</code>.</p>
                */
            SortOrder?: OrderKey | string;
            /**
                * <p>If the result of the previous <code>ListEndpointConfig</code> request was
                *             truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
                *             endpoint configurations, use the token in the next request. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of training jobs to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the endpoint configuration name. This filter returns only endpoint
                *             configurations whose name contains the specified string. </p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only endpoint configurations created before the specified
                *             time (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only endpoint configurations with a creation time greater
                *             than or equal to the specified time (timestamp).</p>
                */
            CreationTimeAfter?: Date;
    }
    export namespace ListEndpointConfigsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointConfigsInput) => any;
    }
    export interface ListEndpointConfigsOutput {
            /**
                * <p>An array of endpoint configurations.</p>
                */
            EndpointConfigs: EndpointConfigSummary[] | undefined;
            /**
                * <p> If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             endpoint configurations, use it in the subsequent request </p>
                */
            NextToken?: string;
    }
    export namespace ListEndpointConfigsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointConfigsOutput) => any;
    }
    export interface ListEndpointsInput {
            /**
                * <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: EndpointSortKey | string;
            /**
                * <p>The sort order for results. The default is <code>Descending</code>.</p>
                */
            SortOrder?: OrderKey | string;
            /**
                * <p>If the result of a <code>ListEndpoints</code> request was truncated, the response
                *             includes a <code>NextToken</code>. To retrieve the next set of endpoints, use the token
                *             in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of endpoints to return in the response. This value defaults to
                *             10.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in endpoint names. This filter returns only endpoints whose name contains
                *             the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only endpoints that were created before the specified time
                *             (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only endpoints with a creation time greater than or equal to
                *             the specified time (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p> A filter that returns only endpoints that were modified before the specified
                *             timestamp. </p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p> A filter that returns only endpoints that were modified after the specified
                *             timestamp. </p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p> A filter that returns only endpoints with the specified status.</p>
                */
            StatusEquals?: EndpointStatus | string;
    }
    export namespace ListEndpointsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointsInput) => any;
    }
    export interface ListEndpointsOutput {
            /**
                * <p> An array or endpoint objects. </p>
                */
            Endpoints: EndpointSummary[] | undefined;
            /**
                * <p> If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             training jobs, use it in the subsequent request. </p>
                */
            NextToken?: string;
    }
    export namespace ListEndpointsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointsOutput) => any;
    }
    export enum SortExperimentsBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListExperimentsRequest {
            /**
                * <p>A filter that returns only experiments created after the specified time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns only experiments created before the specified time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: SortExperimentsBy | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the previous call to <code>ListExperiments</code> didn't return the full set of
                *       experiments, the call returns a token for getting the next set of experiments.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of experiments to return in the response. The default value is
                *       10.</p>
                */
            MaxResults?: number;
    }
    export namespace ListExperimentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentsRequest) => any;
    }
    export interface ListExperimentsResponse {
            /**
                * <p>A list of the summaries of your experiments.</p>
                */
            ExperimentSummaries?: ExperimentSummary[];
            /**
                * <p>A token for getting the next set of experiments, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListExperimentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentsResponse) => any;
    }
    export interface ListFeatureGroupsRequest {
            /**
                * <p>A string that partially matches one or more <code>FeatureGroup</code>s names. Filters
                *             <code>FeatureGroup</code>s by name. </p>
                */
            NameContains?: string;
            /**
                * <p>A <code>FeatureGroup</code> status. Filters by <code>FeatureGroup</code> status. </p>
                */
            FeatureGroupStatusEquals?: FeatureGroupStatus | string;
            /**
                * <p>An <code>OfflineStore</code> status. Filters by <code>OfflineStore</code> status. </p>
                */
            OfflineStoreStatusEquals?: OfflineStoreStatusValue | string;
            /**
                * <p>Use this parameter to search for <code>FeatureGroups</code>s created after a specific
                *          date and time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>Use this parameter to search for <code>FeatureGroups</code>s created before a specific
                *          date and time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>The order in which feature groups are listed.</p>
                */
            SortOrder?: FeatureGroupSortOrder | string;
            /**
                * <p>The value on which the feature group list is sorted.</p>
                */
            SortBy?: FeatureGroupSortBy | string;
            /**
                * <p>The maximum number of results returned by <code>ListFeatureGroups</code>.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to resume pagination of <code>ListFeatureGroups</code> results.</p>
                */
            NextToken?: string;
    }
    export namespace ListFeatureGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFeatureGroupsRequest) => any;
    }
    export interface ListFeatureGroupsResponse {
            /**
                * <p>A summary of feature groups.</p>
                */
            FeatureGroupSummaries: FeatureGroupSummary[] | undefined;
            /**
                * <p>A token to resume pagination of <code>ListFeatureGroups</code> results.</p>
                */
            NextToken: string | undefined;
    }
    export namespace ListFeatureGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFeatureGroupsResponse) => any;
    }
    export interface ListFlowDefinitionsRequest {
            /**
                * <p>A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only flow definitions that were created before the specified timestamp.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>A token to resume pagination.</p>
                */
            NextToken?: string;
            /**
                * <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFlowDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFlowDefinitionsRequest) => any;
    }
    export interface ListFlowDefinitionsResponse {
            /**
                * <p>An array of objects describing the flow definitions.</p>
                */
            FlowDefinitionSummaries: FlowDefinitionSummary[] | undefined;
            /**
                * <p>A token to resume pagination.</p>
                */
            NextToken?: string;
    }
    export namespace ListFlowDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFlowDefinitionsResponse) => any;
    }
    export interface ListHumanTaskUisRequest {
            /**
                * <p>A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only human task user interfaces that were created before the specified timestamp.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>A token to resume pagination.</p>
                */
            NextToken?: string;
            /**
                * <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
                */
            MaxResults?: number;
    }
    export namespace ListHumanTaskUisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHumanTaskUisRequest) => any;
    }
    export interface ListHumanTaskUisResponse {
            /**
                * <p>An array of objects describing the human task user interfaces.</p>
                */
            HumanTaskUiSummaries: HumanTaskUiSummary[] | undefined;
            /**
                * <p>A token to resume pagination.</p>
                */
            NextToken?: string;
    }
    export namespace ListHumanTaskUisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHumanTaskUisResponse) => any;
    }
    export interface ListHyperParameterTuningJobsRequest {
            /**
                * <p>If the result of the previous <code>ListHyperParameterTuningJobs</code> request was
                *             truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
                *             tuning jobs, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The
                *             maximum number of tuning jobs to return. The default value is
                *             10.</p>
                */
            MaxResults?: number;
            /**
                * <p>The field to sort results by. The default is <code>Name</code>.</p>
                */
            SortBy?: HyperParameterTuningJobSortByOptions | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>A string in the tuning job name. This filter returns only tuning jobs whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only tuning jobs that were created after the specified
                *             time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only tuning jobs that were created before the specified
                *             time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only tuning jobs that were modified after the specified
                *             time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only tuning jobs that were modified before the specified
                *             time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns only tuning jobs with the specified status.</p>
                */
            StatusEquals?: HyperParameterTuningJobStatus | string;
    }
    export namespace ListHyperParameterTuningJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHyperParameterTuningJobsRequest) => any;
    }
    export interface ListHyperParameterTuningJobsResponse {
            /**
                * <p>A list of <a>HyperParameterTuningJobSummary</a> objects that
                *             describe
                *             the tuning jobs that the <code>ListHyperParameterTuningJobs</code>
                *             request returned.</p>
                */
            HyperParameterTuningJobSummaries: HyperParameterTuningJobSummary[] | undefined;
            /**
                * <p>If the result of this <code>ListHyperParameterTuningJobs</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of tuning jobs,
                *             use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListHyperParameterTuningJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHyperParameterTuningJobsResponse) => any;
    }
    export interface ListImagesRequest {
            /**
                * <p>A filter that returns only images created on or after the specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only images created on or before the specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only images modified on or after the specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only images modified on or before the specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>The maximum number of images to return in the response. The default value is 10. </p>
                */
            MaxResults?: number;
            /**
                * <p>A filter that returns only images whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>If the previous call to <code>ListImages</code> didn't return the full set of images,
                *         the call returns a token for getting the next set of images.</p>
                */
            NextToken?: string;
            /**
                * <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
                */
            SortBy?: ImageSortBy | string;
            /**
                * <p>The sort order. The default value is <code>DESCENDING</code>.</p>
                */
            SortOrder?: ImageSortOrder | string;
    }
    export namespace ListImagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListImagesRequest) => any;
    }
    export interface ListImagesResponse {
            /**
                * <p>A list of images and their properties.</p>
                */
            Images?: Image[];
            /**
                * <p>A token for getting the next set of images, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListImagesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListImagesResponse) => any;
    }
    export interface ListImageVersionsRequest {
            /**
                * <p>A filter that returns only versions created on or after the specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only versions created on or before the specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>The name of the image to list the versions of.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>A filter that returns only versions modified on or after the specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only versions modified on or before the specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>The maximum number of versions to return in the response. The default value is 10. </p>
                */
            MaxResults?: number;
            /**
                * <p>If the previous call to <code>ListImageVersions</code> didn't return the full set of
                *         versions, the call returns a token for getting the next set of versions.</p>
                */
            NextToken?: string;
            /**
                * <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
                */
            SortBy?: ImageVersionSortBy | string;
            /**
                * <p>The sort order. The default value is <code>DESCENDING</code>.</p>
                */
            SortOrder?: ImageVersionSortOrder | string;
    }
    export namespace ListImageVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListImageVersionsRequest) => any;
    }
    export interface ListImageVersionsResponse {
            /**
                * <p>A list of versions and their properties.</p>
                */
            ImageVersions?: ImageVersion[];
            /**
                * <p>A token for getting the next set of versions, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListImageVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListImageVersionsResponse) => any;
    }
    export enum ListInferenceRecommendationsJobsSortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name",
            STATUS = "Status"
    }
    export interface ListInferenceRecommendationsJobsRequest {
            /**
                * <p>A filter that returns only jobs created after the specified time (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only jobs created before the specified time (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only jobs that were last modified after the specified time (timestamp).</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only jobs that were last modified before the specified time (timestamp).</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A string in the job name. This filter returns only recommendations whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that retrieves only inference recommendations jobs with a specific status.</p>
                */
            StatusEquals?: RecommendationJobStatus | string;
            /**
                * <p>The parameter by which to sort the results.</p>
                */
            SortBy?: ListInferenceRecommendationsJobsSortBy | string;
            /**
                * <p>The sort order for the results.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the response to a previous <code>ListInferenceRecommendationsJobsRequest</code> request
                *          was truncated, the response includes a <code>NextToken</code>. To retrieve the next set
                *          of recommendations, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of recommendations to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListInferenceRecommendationsJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInferenceRecommendationsJobsRequest) => any;
    }
    export interface ListInferenceRecommendationsJobsResponse {
            /**
                * <p>The recommendations created from the Amazon SageMaker Inference Recommender job.</p>
                */
            InferenceRecommendationsJobs: InferenceRecommendationsJob[] | undefined;
            /**
                * <p>A token for getting the next set of recommendations, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListInferenceRecommendationsJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInferenceRecommendationsJobsResponse) => any;
    }
    export enum SortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name",
            STATUS = "Status"
    }
    export interface ListLabelingJobsRequest {
            /**
                * <p>A filter that returns only labeling jobs created after the specified time
                *             (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only labeling jobs created before the specified time
                *             (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only labeling jobs modified after the specified time
                *             (timestamp).</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only labeling jobs modified before the specified time
                *             (timestamp).</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>The maximum number of labeling jobs to return in each page of the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the result of the previous <code>ListLabelingJobs</code> request was truncated, the
                *             response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs,
                *             use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>A string in the labeling job name. This filter returns only labeling jobs whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: SortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>A filter that retrieves only labeling jobs with a specific status.</p>
                */
            StatusEquals?: LabelingJobStatus | string;
    }
    export namespace ListLabelingJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLabelingJobsRequest) => any;
    }
    export interface ListLabelingJobsResponse {
            /**
                * <p>An array of <code>LabelingJobSummary</code> objects, each describing a labeling
                *             job.</p>
                */
            LabelingJobSummaryList?: LabelingJobSummary[];
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             labeling jobs, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListLabelingJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLabelingJobsResponse) => any;
    }
    export enum ListLabelingJobsForWorkteamSortByOptions {
            CREATION_TIME = "CreationTime"
    }
    export interface ListLabelingJobsForWorkteamRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling
                *             jobs for.</p>
                */
            WorkteamArn: string | undefined;
            /**
                * <p>The maximum number of labeling jobs to return in each page of the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was
                *             truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
                *             labeling jobs, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>A filter that returns only labeling jobs created after the specified time
                *             (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only labeling jobs created before the specified time
                *             (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter the limits jobs to only the ones whose job reference code contains the
                *             specified string.</p>
                */
            JobReferenceCodeContains?: string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: ListLabelingJobsForWorkteamSortByOptions | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListLabelingJobsForWorkteamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLabelingJobsForWorkteamRequest) => any;
    }
    export interface ListLabelingJobsForWorkteamResponse {
            /**
                * <p>An array of <code>LabelingJobSummary</code> objects, each describing a labeling
                *             job.</p>
                */
            LabelingJobSummaryList: LabelingJobForWorkteamSummary[] | undefined;
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             labeling jobs, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListLabelingJobsForWorkteamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLabelingJobsForWorkteamResponse) => any;
    }
    export enum SortLineageGroupsBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListLineageGroupsRequest {
            /**
                * <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The parameter by which to sort the results. The default is
                *          <code>CreationTime</code>.</p>
                */
            SortBy?: SortLineageGroupsBy | string;
            /**
                * <p>The sort order for the results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *          algorithms, use it in the subsequent request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of endpoints to return in the response. This value defaults to
                *          10.</p>
                */
            MaxResults?: number;
    }
    export namespace ListLineageGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLineageGroupsRequest) => any;
    }
    export interface ListLineageGroupsResponse {
            /**
                * <p>A list of lineage groups and their properties.</p>
                */
            LineageGroupSummaries?: LineageGroupSummary[];
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *          algorithms, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListLineageGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLineageGroupsResponse) => any;
    }
    export interface ListModelBiasJobDefinitionsRequest {
            /**
                * <p>Name of the endpoint to monitor for model bias.</p>
                */
            EndpointName?: string;
            /**
                * <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The
                *          default is <code>CreationTime</code>.</p>
                */
            SortBy?: MonitoringJobDefinitionSortKey | string;
            /**
                * <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
                *          The default is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The token returned if the response is truncated. To retrieve the next set of job
                *          executions, use it in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of model bias jobs to return in the response. The default value is
                *          10.</p>
                */
            MaxResults?: number;
            /**
                * <p>Filter for model bias jobs whose name contains a specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only model bias jobs created before a specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only model bias jobs created after a specified time.</p>
                */
            CreationTimeAfter?: Date;
    }
    export namespace ListModelBiasJobDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelBiasJobDefinitionsRequest) => any;
    }
    export interface ListModelBiasJobDefinitionsResponse {
            /**
                * <p>A JSON array in which each element is a summary for a model bias jobs.</p>
                */
            JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
                *          use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListModelBiasJobDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelBiasJobDefinitionsResponse) => any;
    }
    export interface ListModelExplainabilityJobDefinitionsRequest {
            /**
                * <p>Name of the endpoint to monitor for model explainability.</p>
                */
            EndpointName?: string;
            /**
                * <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The
                *          default is <code>CreationTime</code>.</p>
                */
            SortBy?: MonitoringJobDefinitionSortKey | string;
            /**
                * <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
                *          The default is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The token returned if the response is truncated. To retrieve the next set of job
                *          executions, use it in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of jobs to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
            /**
                * <p>Filter for model explainability jobs whose name contains a specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only model explainability jobs created before a specified
                *          time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only model explainability jobs created after a specified
                *          time.</p>
                */
            CreationTimeAfter?: Date;
    }
    export namespace ListModelExplainabilityJobDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelExplainabilityJobDefinitionsRequest) => any;
    }
    export interface ListModelExplainabilityJobDefinitionsResponse {
            /**
                * <p>A JSON array in which each element is a summary for a explainability bias jobs.</p>
                */
            JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
                *          use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListModelExplainabilityJobDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelExplainabilityJobDefinitionsResponse) => any;
    }
    export enum ModelMetadataFilterType {
            DOMAIN = "Domain",
            FRAMEWORK = "Framework",
            FRAMEWORKVERSION = "FrameworkVersion",
            TASK = "Task"
    }
    /**
        * <p>Part of the search expression. You can specify the name and value
        *           (domain, task, framework, framework version, task, and model).</p>
        */
    export interface ModelMetadataFilter {
            /**
                * <p>The name of the of the model to filter by.</p>
                */
            Name: ModelMetadataFilterType | string | undefined;
            /**
                * <p>The value to filter the model metadata.</p>
                */
            Value: string | undefined;
    }
    export namespace ModelMetadataFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelMetadataFilter) => any;
    }
    /**
        * <p>One or more filters that searches for the specified resource or resources in
        *           a search. All resource objects that satisfy the expression's condition are
        *           included in the search results</p>
        */
    export interface ModelMetadataSearchExpression {
            /**
                * <p>A list of filter objects.</p>
                */
            Filters?: ModelMetadataFilter[];
    }
    export namespace ModelMetadataSearchExpression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelMetadataSearchExpression) => any;
    }
    export interface ListModelMetadataRequest {
            /**
                * <p>One or more filters that searches for the specified resource or resources
                *           in a search. All resource objects that satisfy the expression's condition are
                *           included in the search results. Specify the  Framework, FrameworkVersion, Domain
                *           or Task to filter supported. Filter names and values are case-sensitive.</p>
                */
            SearchExpression?: ModelMetadataSearchExpression;
            /**
                * <p>If the response to a previous <code>ListModelMetadataResponse</code> request was truncated,
                *            the response includes a NextToken. To retrieve the next set of model metadata,
                *            use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of models to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListModelMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelMetadataRequest) => any;
    }
    /**
        * <p>A summary of the model metadata.</p>
        */
    export interface ModelMetadataSummary {
            /**
                * <p>The machine learning domain of the model.</p>
                */
            Domain: string | undefined;
            /**
                * <p>The machine learning framework of the model.</p>
                */
            Framework: string | undefined;
            /**
                * <p>The machine learning task of the model.</p>
                */
            Task: string | undefined;
            /**
                * <p>The name of the model.</p>
                */
            Model: string | undefined;
            /**
                * <p>The framework version of the model.</p>
                */
            FrameworkVersion: string | undefined;
    }
    export namespace ModelMetadataSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelMetadataSummary) => any;
    }
    export interface ListModelMetadataResponse {
            /**
                * <p>A structure that holds model metadata.</p>
                */
            ModelMetadataSummaries: ModelMetadataSummary[] | undefined;
            /**
                * <p>A token for getting the next set of recommendations, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListModelMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelMetadataResponse) => any;
    }
    export enum ModelPackageGroupSortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListModelPackageGroupsInput {
            /**
                * <p>A filter that returns only model groups created after the specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only model groups created before the specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the model group name. This filter returns only model groups whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>If the result of the previous <code>ListModelPackageGroups</code> request was
                *             truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
                *             model groups, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: ModelPackageGroupSortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListModelPackageGroupsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelPackageGroupsInput) => any;
    }
    /**
        * <p>Summary information about a model group.</p>
        */
    export interface ModelPackageGroupSummary {
            /**
                * <p>The name of the model group.</p>
                */
            ModelPackageGroupName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the model group.</p>
                */
            ModelPackageGroupArn: string | undefined;
            /**
                * <p>A description of the model group.</p>
                */
            ModelPackageGroupDescription?: string;
            /**
                * <p>The time that the model group was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The status of the model group.</p>
                */
            ModelPackageGroupStatus: ModelPackageGroupStatus | string | undefined;
    }
    export namespace ModelPackageGroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageGroupSummary) => any;
    }
    export interface ListModelPackageGroupsOutput {
            /**
                * <p>A list of summaries of the model groups in your Amazon Web Services account.</p>
                */
            ModelPackageGroupSummaryList: ModelPackageGroupSummary[] | undefined;
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set
                *             of model groups, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListModelPackageGroupsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelPackageGroupsOutput) => any;
    }
    export enum ModelPackageType {
            BOTH = "Both",
            UNVERSIONED = "Unversioned",
            VERSIONED = "Versioned"
    }
    export enum ModelPackageSortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListModelPackagesInput {
            /**
                * <p>A filter that returns only model packages created after the specified time
                *             (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only model packages created before the specified time
                *             (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>The maximum number of model packages to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the model package name. This filter returns only model packages whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only the model packages with the specified approval
                *             status.</p>
                */
            ModelApprovalStatus?: ModelApprovalStatus | string;
            /**
                * <p>A filter that returns only model versions that belong to the specified model group.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>A filter that returns only the model packages of the specified type. This can be one
                *             of the following values.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>UNVERSIONED</code> - List only unversioined models.
                *                     This is the default value if no <code>ModelPackageType</code> is specified.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VERSIONED</code> - List only versioned models.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>BOTH</code> - List both versioned and unversioned models.</p>
                *             </li>
                *          </ul>
                */
            ModelPackageType?: ModelPackageType | string;
            /**
                * <p>If the response to a previous <code>ListModelPackages</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of model
                *             packages, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The parameter by which to sort the results. The default is
                *             <code>CreationTime</code>.</p>
                */
            SortBy?: ModelPackageSortBy | string;
            /**
                * <p>The sort order for the results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListModelPackagesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelPackagesInput) => any;
    }
    /**
        * <p>Provides summary information about a model package.</p>
        */
    export interface ModelPackageSummary {
            /**
                * <p>The name of the model package.</p>
                */
            ModelPackageName: string | undefined;
            /**
                * <p>If the model package is a versioned model, the model group that the versioned model
                *             belongs to.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>If the model package is a versioned model, the version of the model.</p>
                */
            ModelPackageVersion?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the model package.</p>
                */
            ModelPackageArn: string | undefined;
            /**
                * <p>A brief description of the model package.</p>
                */
            ModelPackageDescription?: string;
            /**
                * <p>A timestamp that shows when the model package was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The overall status of the model package.</p>
                */
            ModelPackageStatus: ModelPackageStatus | string | undefined;
            /**
                * <p>The approval status of the model. This can be one of the following values.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>APPROVED</code> - The model is approved</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>REJECTED</code> - The model is rejected.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
                *                     approval.</p>
                *             </li>
                *          </ul>
                */
            ModelApprovalStatus?: ModelApprovalStatus | string;
    }
    export namespace ModelPackageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageSummary) => any;
    }
    export interface ListModelPackagesOutput {
            /**
                * <p>An array of <code>ModelPackageSummary</code> objects, each of which lists a model
                *             package.</p>
                */
            ModelPackageSummaryList: ModelPackageSummary[] | undefined;
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             model packages, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListModelPackagesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelPackagesOutput) => any;
    }
    export interface ListModelQualityJobDefinitionsRequest {
            /**
                * <p>A filter that returns only model quality monitoring job definitions that are associated
                *          with the specified endpoint.</p>
                */
            EndpointName?: string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: MonitoringJobDefinitionSortKey | string;
            /**
                * <p>The sort order for results. The default is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the result of the previous <code>ListModelQualityJobDefinitions</code> request was
                *          truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
                *          model quality monitoring job definitions, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in a call to
                *             <code>ListModelQualityJobDefinitions</code>.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the transform job name. This filter returns only model quality monitoring
                *          job definitions whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only model quality monitoring job definitions created before the
                *          specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only model quality monitoring job definitions created after the
                *          specified time.</p>
                */
            CreationTimeAfter?: Date;
    }
    export namespace ListModelQualityJobDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelQualityJobDefinitionsRequest) => any;
    }
    export interface ListModelQualityJobDefinitionsResponse {
            /**
                * <p>A list of summaries of model quality monitoring job definitions.</p>
                */
            JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of model
                *          quality monitoring job definitions, use it in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListModelQualityJobDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelQualityJobDefinitionsResponse) => any;
    }
    export enum ModelSortKey {
            CreationTime = "CreationTime",
            Name = "Name"
    }
    export interface ListModelsInput {
            /**
                * <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: ModelSortKey | string;
            /**
                * <p>The sort order for results. The default is <code>Descending</code>.</p>
                */
            SortOrder?: OrderKey | string;
            /**
                * <p>If the response to a previous <code>ListModels</code> request was truncated, the
                *             response includes a <code>NextToken</code>. To retrieve the next set of models, use the
                *             token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of models to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A string in the model name. This filter returns only models whose
                *             name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only models created before the specified time
                *             (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only models with a creation time greater than or equal to the
                *             specified time (timestamp).</p>
                */
            CreationTimeAfter?: Date;
    }
    export namespace ListModelsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelsInput) => any;
    }
    /**
        * <p>Provides summary information about a model.</p>
        */
    export interface ModelSummary {
            /**
                * <p>The name of the model that you want a summary for.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the model.</p>
                */
            ModelArn: string | undefined;
            /**
                * <p>A timestamp that indicates when the model was created.</p>
                */
            CreationTime: Date | undefined;
    }
    export namespace ModelSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelSummary) => any;
    }
    export interface ListModelsOutput {
            /**
                * <p>An array of <code>ModelSummary</code> objects, each of which lists a
                *             model.</p>
                */
            Models: ModelSummary[] | undefined;
            /**
                * <p> If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             models, use it in the subsequent request. </p>
                */
            NextToken?: string;
    }
    export namespace ListModelsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListModelsOutput) => any;
    }
    export enum MonitoringExecutionSortKey {
            CREATION_TIME = "CreationTime",
            SCHEDULED_TIME = "ScheduledTime",
            STATUS = "Status"
    }
    export interface ListMonitoringExecutionsRequest {
            /**
                * <p>Name of a specific schedule to fetch jobs for.</p>
                */
            MonitoringScheduleName?: string;
            /**
                * <p>Name of a specific endpoint to fetch jobs for.</p>
                */
            EndpointName?: string;
            /**
                * <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
                *             <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: MonitoringExecutionSortKey | string;
            /**
                * <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
                *          The default is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The token returned if the response is truncated. To retrieve the next set of job
                *          executions, use it in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of jobs to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
            /**
                * <p>Filter for jobs scheduled before a specified time.</p>
                */
            ScheduledTimeBefore?: Date;
            /**
                * <p>Filter for jobs scheduled after a specified time.</p>
                */
            ScheduledTimeAfter?: Date;
            /**
                * <p>A filter that returns only jobs created before a specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only jobs created after a specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only jobs modified after a specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns only jobs modified before a specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that retrieves only jobs with a specific status.</p>
                */
            StatusEquals?: ExecutionStatus | string;
            /**
                * <p>Gets a list of the monitoring job runs of the specified monitoring job
                *          definitions.</p>
                */
            MonitoringJobDefinitionName?: string;
            /**
                * <p>A filter that returns only the monitoring job runs of the specified monitoring
                *          type.</p>
                */
            MonitoringTypeEquals?: MonitoringType | string;
    }
    export namespace ListMonitoringExecutionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMonitoringExecutionsRequest) => any;
    }
    export interface ListMonitoringExecutionsResponse {
            /**
                * <p>A JSON array in which each element is a summary for a monitoring execution.</p>
                */
            MonitoringExecutionSummaries: MonitoringExecutionSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
                *          use it in the subsequent reques</p>
                */
            NextToken?: string;
    }
    export namespace ListMonitoringExecutionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMonitoringExecutionsResponse) => any;
    }
    export enum MonitoringScheduleSortKey {
            CREATION_TIME = "CreationTime",
            NAME = "Name",
            STATUS = "Status"
    }
    export interface ListMonitoringSchedulesRequest {
            /**
                * <p>Name of a specific endpoint to fetch schedules for.</p>
                */
            EndpointName?: string;
            /**
                * <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
                *             <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: MonitoringScheduleSortKey | string;
            /**
                * <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
                *          The default is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The token returned if the response is truncated. To retrieve the next set of job
                *          executions, use it in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of jobs to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
            /**
                * <p>Filter for monitoring schedules whose name contains a specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only monitoring schedules created before a specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only monitoring schedules created after a specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only monitoring schedules modified before a specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns only monitoring schedules modified after a specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only monitoring schedules modified before a specified time.</p>
                */
            StatusEquals?: ScheduleStatus | string;
            /**
                * <p>Gets a list of the monitoring schedules for the specified monitoring job
                *          definition.</p>
                */
            MonitoringJobDefinitionName?: string;
            /**
                * <p>A filter that returns only the monitoring schedules for the specified monitoring
                *          type.</p>
                */
            MonitoringTypeEquals?: MonitoringType | string;
    }
    export namespace ListMonitoringSchedulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMonitoringSchedulesRequest) => any;
    }
    /**
        * <p>Summarizes the monitoring schedule.</p>
        */
    export interface MonitoringScheduleSummary {
            /**
                * <p>The name of the monitoring schedule.</p>
                */
            MonitoringScheduleName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
                */
            MonitoringScheduleArn: string | undefined;
            /**
                * <p>The creation time of the monitoring schedule.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The last time the monitoring schedule was modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The status of the monitoring schedule.</p>
                */
            MonitoringScheduleStatus: ScheduleStatus | string | undefined;
            /**
                * <p>The name of the endpoint using the monitoring schedule.</p>
                */
            EndpointName?: string;
            /**
                * <p>The name of the monitoring job definition that the schedule is for.</p>
                */
            MonitoringJobDefinitionName?: string;
            /**
                * <p>The type of the monitoring job definition that the schedule is for.</p>
                */
            MonitoringType?: MonitoringType | string;
    }
    export namespace MonitoringScheduleSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoringScheduleSummary) => any;
    }
    export interface ListMonitoringSchedulesResponse {
            /**
                * <p>A JSON array in which each element is a summary for a monitoring schedule.</p>
                */
            MonitoringScheduleSummaries: MonitoringScheduleSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
                *          use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListMonitoringSchedulesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMonitoringSchedulesResponse) => any;
    }
    export enum NotebookInstanceLifecycleConfigSortKey {
            CREATION_TIME = "CreationTime",
            LAST_MODIFIED_TIME = "LastModifiedTime",
            NAME = "Name"
    }
    export enum NotebookInstanceLifecycleConfigSortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    export interface ListNotebookInstanceLifecycleConfigsInput {
            /**
                * <p>If the result of a <code>ListNotebookInstanceLifecycleConfigs</code> request was
                *             truncated, the response includes a <code>NextToken</code>. To get the next set of
                *             lifecycle configurations, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of lifecycle configurations to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: NotebookInstanceLifecycleConfigSortKey | string;
            /**
                * <p>The sort order for results.</p>
                */
            SortOrder?: NotebookInstanceLifecycleConfigSortOrder | string;
            /**
                * <p>A string in the lifecycle configuration name. This filter returns only lifecycle
                *             configurations whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only lifecycle configurations that were created before the
                *             specified time (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only lifecycle configurations that were created after the
                *             specified time (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only lifecycle configurations that were modified before the
                *             specified time (timestamp).</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns only lifecycle configurations that were modified after the
                *             specified time (timestamp).</p>
                */
            LastModifiedTimeAfter?: Date;
    }
    export namespace ListNotebookInstanceLifecycleConfigsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotebookInstanceLifecycleConfigsInput) => any;
    }
    /**
        * <p>Provides a summary of a notebook instance lifecycle configuration.</p>
        */
    export interface NotebookInstanceLifecycleConfigSummary {
            /**
                * <p>The name of the lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigArn: string | undefined;
            /**
                * <p>A timestamp that tells when the lifecycle configuration was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A timestamp that tells when the lifecycle configuration was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace NotebookInstanceLifecycleConfigSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotebookInstanceLifecycleConfigSummary) => any;
    }
    export interface ListNotebookInstanceLifecycleConfigsOutput {
            /**
                * <p>If the response is truncated, SageMaker returns this token. To get the next set of
                *             lifecycle configurations, use it in the next request. </p>
                */
            NextToken?: string;
            /**
                * <p>An array of <code>NotebookInstanceLifecycleConfiguration</code> objects, each listing
                *             a lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigs?: NotebookInstanceLifecycleConfigSummary[];
    }
    export namespace ListNotebookInstanceLifecycleConfigsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotebookInstanceLifecycleConfigsOutput) => any;
    }
    export enum NotebookInstanceSortKey {
            CREATION_TIME = "CreationTime",
            NAME = "Name",
            STATUS = "Status"
    }
    export enum NotebookInstanceSortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    export interface ListNotebookInstancesInput {
            /**
                * <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the
                *             response includes a <code>NextToken</code>. You can use this token in your subsequent
                *                 <code>ListNotebookInstances</code> request to fetch the next set of notebook
                *             instances. </p>
                *         <note>
                *             <p>You might specify a filter or a sort order in your request. When response is
                *                 truncated, you must use the same values for the filer and sort order in the next
                *                 request. </p>
                *         </note>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of notebook instances to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The field to sort results by. The default is <code>Name</code>.</p>
                */
            SortBy?: NotebookInstanceSortKey | string;
            /**
                * <p>The sort order for results. </p>
                */
            SortOrder?: NotebookInstanceSortOrder | string;
            /**
                * <p>A string in the notebook instances' name. This filter returns only notebook
                *             instances whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that returns only notebook instances that were created before the
                *             specified time (timestamp). </p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only notebook instances that were created after the specified
                *             time (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only notebook instances that were modified before the
                *             specified time (timestamp).</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns only notebook instances that were modified after the
                *             specified time (timestamp).</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only notebook instances with the specified status.</p>
                */
            StatusEquals?: NotebookInstanceStatus | string;
            /**
                * <p>A string in the name of a notebook instances lifecycle configuration associated with
                *             this notebook instance. This filter returns only notebook instances associated with a
                *             lifecycle configuration with a name that contains the specified string.</p>
                */
            NotebookInstanceLifecycleConfigNameContains?: string;
            /**
                * <p>A string in the name or URL of a Git repository associated with this notebook
                *             instance. This filter returns only notebook instances associated with a git repository
                *             with a name that contains the specified string.</p>
                */
            DefaultCodeRepositoryContains?: string;
            /**
                * <p>A filter that returns only notebook instances with associated with the specified git
                *             repository.</p>
                */
            AdditionalCodeRepositoryEquals?: string;
    }
    export namespace ListNotebookInstancesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotebookInstancesInput) => any;
    }
    /**
        * <p>Provides summary information for an SageMaker notebook instance.</p>
        */
    export interface NotebookInstanceSummary {
            /**
                * <p>The name of the notebook instance that you want a summary for.</p>
                */
            NotebookInstanceName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
                */
            NotebookInstanceArn: string | undefined;
            /**
                * <p>The status of the notebook instance.</p>
                */
            NotebookInstanceStatus?: NotebookInstanceStatus | string;
            /**
                * <p>The URL that you use to connect to the Jupyter notebook running in your notebook
                *             instance. </p>
                */
            Url?: string;
            /**
                * <p>The type of ML compute instance that the notebook instance is running on.</p>
                */
            InstanceType?: _InstanceType | string;
            /**
                * <p>A timestamp that shows when the notebook instance was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A timestamp that shows when the notebook instance was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of a notebook instance lifecycle configuration associated with this notebook
                *             instance.</p>
                *         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
                *                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
                */
            NotebookInstanceLifecycleConfigName?: string;
            /**
                * <p>The Git repository associated with the notebook instance as its default code
                *             repository. This can be either the name of a Git repository stored as a resource in your
                *             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. When you open a notebook instance, it opens in the directory that
                *             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker
                *                 Notebook Instances</a>.</p>
                */
            DefaultCodeRepository?: string;
            /**
                * <p>An array of up to three Git repositories associated with the notebook instance. These
                *             can be either the names of Git repositories stored as resources in your account, or the
                *             URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. These repositories are cloned at the same level as the default
                *             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
                *                 Repositories with SageMaker Notebook Instances</a>.</p>
                */
            AdditionalCodeRepositories?: string[];
    }
    export namespace NotebookInstanceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotebookInstanceSummary) => any;
    }
    export interface ListNotebookInstancesOutput {
            /**
                * <p>If the response to the previous <code>ListNotebookInstances</code> request was
                *             truncated, SageMaker returns this token. To retrieve the next set of notebook instances, use
                *             the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>An array of <code>NotebookInstanceSummary</code> objects, one for each notebook
                *             instance.</p>
                */
            NotebookInstances?: NotebookInstanceSummary[];
    }
    export namespace ListNotebookInstancesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotebookInstancesOutput) => any;
    }
    export enum SortPipelineExecutionsBy {
            CREATION_TIME = "CreationTime",
            PIPELINE_EXECUTION_ARN = "PipelineExecutionArn"
    }
    export interface ListPipelineExecutionsRequest {
            /**
                * <p>The name of the pipeline.</p>
                */
            PipelineName: string | undefined;
            /**
                * <p>A filter that returns the pipeline executions that were created after a specified
                *          time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns the pipeline executions that were created before a specified
                *          time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
                */
            SortBy?: SortPipelineExecutionsBy | string;
            /**
                * <p>The sort order for results.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the result of the previous <code>ListPipelineExecutions</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of pipeline executions, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of pipeline executions to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPipelineExecutionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelineExecutionsRequest) => any;
    }
    /**
        * <p>A pipeline execution summary.</p>
        */
    export interface PipelineExecutionSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
            /**
                * <p>The start time of the pipeline execution.</p>
                */
            StartTime?: Date;
            /**
                * <p>The status of the pipeline execution.</p>
                */
            PipelineExecutionStatus?: PipelineExecutionStatus | string;
            /**
                * <p>The description of the pipeline execution.</p>
                */
            PipelineExecutionDescription?: string;
            /**
                * <p>The display name of the pipeline execution.</p>
                */
            PipelineExecutionDisplayName?: string;
            /**
                * <p>A message generated by SageMaker Pipelines describing why the pipeline execution failed.</p>
                */
            PipelineExecutionFailureReason?: string;
    }
    export namespace PipelineExecutionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineExecutionSummary) => any;
    }
    export interface ListPipelineExecutionsResponse {
            /**
                * <p>Contains a sorted list of pipeline execution summary objects matching the specified
                *          filters. Each run summary includes the Amazon Resource Name (ARN) of the pipeline execution, the run date,
                *          and the status. This list can be empty. </p>
                */
            PipelineExecutionSummaries?: PipelineExecutionSummary[];
            /**
                * <p>If the result of the previous <code>ListPipelineExecutions</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of pipeline executions, use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListPipelineExecutionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelineExecutionsResponse) => any;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_3' {
    import { ActionStatus, AdditionalInferenceSpecificationDefinition, AlgorithmSpecification, AppSpecification, BatchStrategy, BooleanOperator, CacheHitResult, CallbackStepMetadata, Channel, CheckpointConfig, ClarifyCheckStepMetadata, ConditionStepMetadata, DeploymentConfig, EdgeOutputConfig, FeatureDefinition, InferenceSpecification, KernelGatewayImageConfig, MetadataProperties, ModelApprovalStatus, ModelPackageStatus, OutputDataConfig, OutputParameter, ResourceConfig, StoppingCondition, Tag, TransformInput, TransformOutput, TransformResources, UiTemplate, UserContext, UserSettings, VpcConfig } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_0";
    import { _InstanceType, DataProcessing, DebugHookConfig, DebugRuleConfiguration, DebugRuleEvaluationStatus, DriftCheckBaselines, ExperimentConfig, FeatureParameter, InstanceMetadataServiceConfiguration, MemberDefinition, ModelArtifacts, ModelClientConfig, ModelMetrics, ModelPackageValidationSpecification, MonitoringScheduleConfig, NetworkConfig, NotebookInstanceAcceleratorType, NotebookInstanceLifecycleHook, NotificationConfiguration, OidcConfig, ParallelismConfiguration, PipelineDefinitionS3Location, ProcessingInput, ProcessingOutputConfig, ProcessingResources, ProcessingStoppingCondition, ProfilerRuleConfiguration, ProvisioningParameter, RetryStrategy, RootAccess, ServiceCatalogProvisioningDetails, SourceAlgorithmSpecification, SourceIpConfig, StudioLifecycleConfigAppType, TensorBoardOutputConfig, TrialComponentArtifact, TrialComponentParameterValue, TrialComponentStatus, WorkforceVpcConfigRequest } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_1";
    import { DesiredWeightAndCapacity, Device, DeviceDeploymentSummary, Direction, DomainSettingsForUpdate, Edge, EMRStepMetadata, Endpoint, Experiment, FailStepMetadata, FeatureGroup, FeatureMetadata, Filter, GitConfigForUpdate, HyperParameterTrainingJobSummary, LambdaStepMetadata, LineageType, MetricData, ModelPackageGroupStatus, ModelPackageStatusDetails, PipelineExecutionStatus, PipelineExperimentConfig, PipelineStatus, ProcessingJobStatus, ProjectStatus, ResourceType, SecondaryStatus, SecondaryStatusTransition, ServiceCatalogProvisionedProductDetails, SortBy, SortOrder, SubscribedWorkteam, TrainingJobStatus, TransformJobStatus, TrialComponentMetricSummary, TrialComponentSource, TrialSource, UserProfileStatus, Workforce, Workteam } from "@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/models_2";
    export interface ListPipelineExecutionStepsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
            /**
                * <p>If the result of the previous <code>ListPipelineExecutionSteps</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of pipeline execution steps, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of pipeline execution steps to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListPipelineExecutionStepsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelineExecutionStepsRequest) => any;
    }
    /**
        * <p>Metadata for Model steps.</p>
        */
    export interface ModelStepMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the created model.</p>
                */
            Arn?: string;
    }
    export namespace ModelStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelStepMetadata) => any;
    }
    /**
        * <p>Metadata for a processing job step.</p>
        */
    export interface ProcessingJobStepMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the processing job.</p>
                */
            Arn?: string;
    }
    export namespace ProcessingJobStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingJobStepMetadata) => any;
    }
    /**
        * <p>Container for the metadata for a Quality check step. For more information, see
        *          the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check">QualityCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.
        *       </p>
        */
    export interface QualityCheckStepMetadata {
            /**
                * <p>The type of the Quality check step.</p>
                */
            CheckType?: string;
            /**
                * <p>The Amazon S3 URI of the baseline statistics file used for the drift check.</p>
                */
            BaselineUsedForDriftCheckStatistics?: string;
            /**
                * <p>The Amazon S3 URI of the baseline constraints file used for the drift check.</p>
                */
            BaselineUsedForDriftCheckConstraints?: string;
            /**
                * <p>The Amazon S3 URI of the newly calculated baseline statistics file.</p>
                */
            CalculatedBaselineStatistics?: string;
            /**
                * <p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>
                */
            CalculatedBaselineConstraints?: string;
            /**
                * <p>The model package group name.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>The Amazon S3 URI of violation report if violations are detected.</p>
                */
            ViolationReport?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Quality check processing job that was run by this step execution.</p>
                */
            CheckJobArn?: string;
            /**
                * <p>This flag indicates if the drift check against the previous baseline will be skipped or not.
                *          If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>
                */
            SkipCheck?: boolean;
            /**
                * <p>This flag indicates if a newly calculated baseline can be accessed through step properties
                *          <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>.
                *          If it is set to <code>False</code>, the previous baseline of the configured check type must also be available.
                *          These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> and <code>
                *             BaselineUsedForDriftCheckStatistics</code> properties. </p>
                */
            RegisterNewBaseline?: boolean;
    }
    export namespace QualityCheckStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QualityCheckStepMetadata) => any;
    }
    /**
        * <p>Metadata for a register model job step.</p>
        */
    export interface RegisterModelStepMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the model package.</p>
                */
            Arn?: string;
    }
    export namespace RegisterModelStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterModelStepMetadata) => any;
    }
    /**
        * <p>Metadata for a training job step.</p>
        */
    export interface TrainingJobStepMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>
                */
            Arn?: string;
    }
    export namespace TrainingJobStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingJobStepMetadata) => any;
    }
    /**
        * <p>Metadata for a transform job step.</p>
        */
    export interface TransformJobStepMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>
                */
            Arn?: string;
    }
    export namespace TransformJobStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformJobStepMetadata) => any;
    }
    /**
        * <p>Metadata for a tuning step.</p>
        */
    export interface TuningJobStepMetaData {
            /**
                * <p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>
                */
            Arn?: string;
    }
    export namespace TuningJobStepMetaData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TuningJobStepMetaData) => any;
    }
    /**
        * <p>Metadata for a step execution.</p>
        */
    export interface PipelineExecutionStepMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>
                */
            TrainingJob?: TrainingJobStepMetadata;
            /**
                * <p>The Amazon Resource Name (ARN) of the processing job that was run by this step execution.</p>
                */
            ProcessingJob?: ProcessingJobStepMetadata;
            /**
                * <p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>
                */
            TransformJob?: TransformJobStepMetadata;
            /**
                * <p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>
                */
            TuningJob?: TuningJobStepMetaData;
            /**
                * <p>The Amazon Resource Name (ARN) of the model that was created by this step execution.</p>
                */
            Model?: ModelStepMetadata;
            /**
                * <p>The Amazon Resource Name (ARN) of the model package the model was registered to by this step execution.</p>
                */
            RegisterModel?: RegisterModelStepMetadata;
            /**
                * <p>The outcome of the condition evaluation that was run by this step execution.</p>
                */
            Condition?: ConditionStepMetadata;
            /**
                * <p>The URL of the Amazon SQS queue used by this step execution, the pipeline generated token,
                *         and a list of output parameters.</p>
                */
            Callback?: CallbackStepMetadata;
            /**
                * <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of
                *         output parameters.</p>
                */
            Lambda?: LambdaStepMetadata;
            /**
                * <p>The configurations and outcomes of the check step execution. This includes: </p>
                *          <ul>
                *             <li>
                *                <p>The type of the check conducted,</p>
                *             </li>
                *             <li>
                *                <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p>
                *             </li>
                *             <li>
                *                <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p>
                *             </li>
                *             <li>
                *                <p>The model package group name provided.</p>
                *             </li>
                *             <li>
                *                <p>The Amazon S3 URI of the violation report if violations detected.</p>
                *             </li>
                *             <li>
                *                <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p>
                *             </li>
                *             <li>
                *                <p>The boolean flags indicating if the drift check is skipped.</p>
                *             </li>
                *             <li>
                *                <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as
                *             <code>CalculatedBaseline</code>.</p>
                *             </li>
                *          </ul>
                */
            QualityCheck?: QualityCheckStepMetadata;
            /**
                * <p>Container for the metadata for a Clarify check step. The configurations
                *          and outcomes of the check step execution. This includes: </p>
                *          <ul>
                *             <li>
                *                <p>The type of the check conducted,</p>
                *             </li>
                *             <li>
                *                <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p>
                *             </li>
                *             <li>
                *                <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p>
                *             </li>
                *             <li>
                *                <p>The model package group name provided.</p>
                *             </li>
                *             <li>
                *                <p>The Amazon S3 URI of the violation report if violations detected.</p>
                *             </li>
                *             <li>
                *                <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p>
                *             </li>
                *             <li>
                *                <p>The boolean flags indicating if the drift check is skipped.</p>
                *             </li>
                *             <li>
                *                <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as
                *             <code>CalculatedBaseline</code>.</p>
                *             </li>
                *          </ul>
                */
            ClarifyCheck?: ClarifyCheckStepMetadata;
            /**
                * <p>The configurations and outcomes of an EMR step execution.</p>
                */
            EMR?: EMRStepMetadata;
            /**
                * <p>The configurations and outcomes of a Fail step execution.</p>
                */
            Fail?: FailStepMetadata;
    }
    export namespace PipelineExecutionStepMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineExecutionStepMetadata) => any;
    }
    export enum StepStatus {
            EXECUTING = "Executing",
            FAILED = "Failed",
            STARTING = "Starting",
            STOPPED = "Stopped",
            STOPPING = "Stopping",
            SUCCEEDED = "Succeeded"
    }
    /**
        * <p>An execution of a step in a pipeline.</p>
        */
    export interface PipelineExecutionStep {
            /**
                * <p>The name of the step that is executed.</p>
                */
            StepName?: string;
            /**
                * <p>The display name of the step.</p>
                */
            StepDisplayName?: string;
            /**
                * <p>The description of the step.</p>
                */
            StepDescription?: string;
            /**
                * <p>The time that the step started executing.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time that the step stopped executing.</p>
                */
            EndTime?: Date;
            /**
                * <p>The status of the step execution.</p>
                */
            StepStatus?: StepStatus | string;
            /**
                * <p>If this pipeline execution step was cached, details on the cache hit.</p>
                */
            CacheHitResult?: CacheHitResult;
            /**
                * <p>The current attempt of the execution step. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html">Retry Policy for SageMaker Pipelines steps</a>.</p>
                */
            AttemptCount?: number;
            /**
                * <p>The reason why the step failed execution. This is only returned if the step failed its execution.</p>
                */
            FailureReason?: string;
            /**
                * <p>Metadata for the step execution.</p>
                */
            Metadata?: PipelineExecutionStepMetadata;
    }
    export namespace PipelineExecutionStep {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineExecutionStep) => any;
    }
    export interface ListPipelineExecutionStepsResponse {
            /**
                * <p>A list of <code>PipeLineExecutionStep</code> objects. Each
                *             <code>PipeLineExecutionStep</code> consists of StepName, StartTime, EndTime, StepStatus,
                *          and Metadata. Metadata is an object with properties for each job that contains relevant
                *          information about the job created by the step.</p>
                */
            PipelineExecutionSteps?: PipelineExecutionStep[];
            /**
                * <p>If the result of the previous <code>ListPipelineExecutionSteps</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of pipeline execution steps, use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListPipelineExecutionStepsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelineExecutionStepsResponse) => any;
    }
    export interface ListPipelineParametersForExecutionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn: string | undefined;
            /**
                * <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of parameters to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPipelineParametersForExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelineParametersForExecutionRequest) => any;
    }
    /**
        * <p>Assigns a value to a named Pipeline parameter.</p>
        */
    export interface Parameter {
            /**
                * <p>The name of the parameter to assign a value to. This
                *          parameter name must match a named parameter in the
                *          pipeline definition.</p>
                */
            Name: string | undefined;
            /**
                * <p>The literal value for the parameter.</p>
                */
            Value: string | undefined;
    }
    export namespace Parameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Parameter) => any;
    }
    export interface ListPipelineParametersForExecutionResponse {
            /**
                * <p>Contains a list of pipeline parameters. This list can be empty. </p>
                */
            PipelineParameters?: Parameter[];
            /**
                * <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListPipelineParametersForExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelineParametersForExecutionResponse) => any;
    }
    export enum SortPipelinesBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListPipelinesRequest {
            /**
                * <p>The prefix of the pipeline name.</p>
                */
            PipelineNamePrefix?: string;
            /**
                * <p>A filter that returns the pipelines that were created after a specified
                *          time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns the pipelines that were created before a specified
                *          time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
                */
            SortBy?: SortPipelinesBy | string;
            /**
                * <p>The sort order for results.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the result of the previous <code>ListPipelines</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of pipelines, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of pipelines to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPipelinesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelinesRequest) => any;
    }
    /**
        * <p>A summary of a pipeline.</p>
        */
    export interface PipelineSummary {
            /**
                * <p> The Amazon Resource Name (ARN) of the pipeline.</p>
                */
            PipelineArn?: string;
            /**
                * <p>The name of the pipeline.</p>
                */
            PipelineName?: string;
            /**
                * <p>The display name of the pipeline.</p>
                */
            PipelineDisplayName?: string;
            /**
                * <p>The description of the pipeline.</p>
                */
            PipelineDescription?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that the pipeline used to execute.</p>
                */
            RoleArn?: string;
            /**
                * <p>The creation time of the pipeline.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that the pipeline was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The last time that a pipeline execution began.</p>
                */
            LastExecutionTime?: Date;
    }
    export namespace PipelineSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineSummary) => any;
    }
    export interface ListPipelinesResponse {
            /**
                * <p>Contains a sorted list of <code>PipelineSummary</code> objects matching the specified
                *          filters. Each <code>PipelineSummary</code> consists of PipelineArn, PipelineName,
                *          ExperimentName, PipelineDescription, CreationTime, LastModifiedTime, LastRunTime, and
                *          RoleArn. This list can be empty. </p>
                */
            PipelineSummaries?: PipelineSummary[];
            /**
                * <p>If the result of the previous <code>ListPipelines</code> request was truncated,
                *          the response includes a <code>NextToken</code>. To retrieve the next set of pipelines, use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListPipelinesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelinesResponse) => any;
    }
    export interface ListProcessingJobsRequest {
            /**
                * <p>A filter that returns only processing jobs created after the specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only processing jobs created after the specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only processing jobs modified after the specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only processing jobs modified before the specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A string in the processing job name. This filter returns only processing jobs whose
                *             name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that retrieves only processing jobs with a specific status.</p>
                */
            StatusEquals?: ProcessingJobStatus | string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: SortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the result of the previous <code>ListProcessingJobs</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of processing
                *             jobs, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of processing jobs to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListProcessingJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProcessingJobsRequest) => any;
    }
    /**
        * <p>Summary of information about a processing job.</p>
        */
    export interface ProcessingJobSummary {
            /**
                * <p>The name of the processing job.</p>
                */
            ProcessingJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the processing job..</p>
                */
            ProcessingJobArn: string | undefined;
            /**
                * <p>The time at which the processing job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The time at which the processing job completed.</p>
                */
            ProcessingEndTime?: Date;
            /**
                * <p>A timestamp that indicates the last time the processing job was modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The status of the processing job.</p>
                */
            ProcessingJobStatus: ProcessingJobStatus | string | undefined;
            /**
                * <p>A string, up to one KB in size, that contains the reason a processing job failed, if
                *             it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>An optional string, up to one KB in size, that contains metadata from the processing
                *             container when the processing job exits.</p>
                */
            ExitMessage?: string;
    }
    export namespace ProcessingJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingJobSummary) => any;
    }
    export interface ListProcessingJobsResponse {
            /**
                * <p>An array of <code>ProcessingJobSummary</code> objects, each listing a processing
                *             job.</p>
                */
            ProcessingJobSummaries: ProcessingJobSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
                *             processing jobs, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListProcessingJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProcessingJobsResponse) => any;
    }
    export enum ProjectSortBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export enum ProjectSortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    export interface ListProjectsInput {
            /**
                * <p>A filter that returns the projects that were created after a specified
                *             time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns the projects that were created before a specified
                *             time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>The maximum number of projects to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A filter that returns the projects whose name contains a specified
                *             string.</p>
                */
            NameContains?: string;
            /**
                * <p>If the result of the previous <code>ListProjects</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: ProjectSortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: ProjectSortOrder | string;
    }
    export namespace ListProjectsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsInput) => any;
    }
    /**
        * <p>Information about a project.</p>
        */
    export interface ProjectSummary {
            /**
                * <p>The name of the project.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The description of the project.</p>
                */
            ProjectDescription?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ProjectArn: string | undefined;
            /**
                * <p>The ID of the project.</p>
                */
            ProjectId: string | undefined;
            /**
                * <p>The time that the project was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The status of the project.</p>
                */
            ProjectStatus: ProjectStatus | string | undefined;
    }
    export namespace ProjectSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectSummary) => any;
    }
    export interface ListProjectsOutput {
            /**
                * <p>A list of summaries of projects.</p>
                */
            ProjectSummaryList: ProjectSummary[] | undefined;
            /**
                * <p>If the result of the previous <code>ListCompilationJobs</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of model
                *             compilation jobs, use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListProjectsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsOutput) => any;
    }
    export interface ListStageDevicesRequest {
            /**
                * <p>The response from the last list when returning a list large enough to neeed tokening.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of requests to select.</p>
                */
            MaxResults?: number;
            /**
                * <p>The name of the edge deployment plan.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>Toggle for excluding devices deployed in other stages.</p>
                */
            ExcludeDevicesDeployedInOtherStage?: boolean;
            /**
                * <p>The name of the stage in the deployment.</p>
                */
            StageName: string | undefined;
    }
    export namespace ListStageDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStageDevicesRequest) => any;
    }
    export interface ListStageDevicesResponse {
            /**
                * <p>List of summaries of devices allocated to the stage.</p>
                */
            DeviceDeploymentSummaries: DeviceDeploymentSummary[] | undefined;
            /**
                * <p>The token to use when calling the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListStageDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStageDevicesResponse) => any;
    }
    export enum StudioLifecycleConfigSortKey {
            CreationTime = "CreationTime",
            LastModifiedTime = "LastModifiedTime",
            Name = "Name"
    }
    export interface ListStudioLifecycleConfigsRequest {
            /**
                * <p>The maximum number of Studio Lifecycle Configurations to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.</p>
                */
            NextToken?: string;
            /**
                * <p>A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A parameter to search for the App Type to which the Lifecycle Configuration is attached.</p>
                */
            AppTypeEquals?: StudioLifecycleConfigAppType | string;
            /**
                * <p>A filter that returns only Lifecycle Configurations created on or before the specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only Lifecycle Configurations created on or after the specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only Lifecycle Configurations modified before the specified time.</p>
                */
            ModifiedTimeBefore?: Date;
            /**
                * <p>A filter that returns only Lifecycle Configurations modified after the specified time.</p>
                */
            ModifiedTimeAfter?: Date;
            /**
                * <p>The property used to sort results. The default value is CreationTime.</p>
                */
            SortBy?: StudioLifecycleConfigSortKey | string;
            /**
                * <p>The sort order. The default value is Descending.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListStudioLifecycleConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudioLifecycleConfigsRequest) => any;
    }
    /**
        * <p>Details of the Studio Lifecycle Configuration.</p>
        */
    export interface StudioLifecycleConfigDetails {
            /**
                * <p> The Amazon Resource Name (ARN) of the Lifecycle Configuration.</p>
                */
            StudioLifecycleConfigArn?: string;
            /**
                * <p>The name of the Studio Lifecycle Configuration.</p>
                */
            StudioLifecycleConfigName?: string;
            /**
                * <p>The creation time of the Studio Lifecycle Configuration.</p>
                */
            CreationTime?: Date;
            /**
                * <p>This value is equivalent to CreationTime because Studio Lifecycle Configurations are immutable.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The App type to which the Lifecycle Configuration is attached.</p>
                */
            StudioLifecycleConfigAppType?: StudioLifecycleConfigAppType | string;
    }
    export namespace StudioLifecycleConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StudioLifecycleConfigDetails) => any;
    }
    export interface ListStudioLifecycleConfigsResponse {
            /**
                * <p>A token for getting the next set of actions, if there are any.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of Lifecycle Configurations and their properties.</p>
                */
            StudioLifecycleConfigs?: StudioLifecycleConfigDetails[];
    }
    export namespace ListStudioLifecycleConfigsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudioLifecycleConfigsResponse) => any;
    }
    export interface ListSubscribedWorkteamsRequest {
            /**
                * <p>A string in the work team name. This filter returns only work teams whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>If the result of the previous <code>ListSubscribedWorkteams</code> request was
                *             truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
                *             labeling jobs, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of work teams to return in each page of the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListSubscribedWorkteamsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscribedWorkteamsRequest) => any;
    }
    export interface ListSubscribedWorkteamsResponse {
            /**
                * <p>An array of <code>Workteam</code> objects, each describing a work team.</p>
                */
            SubscribedWorkteams: SubscribedWorkteam[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
                *             work teams, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListSubscribedWorkteamsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscribedWorkteamsResponse) => any;
    }
    export interface ListTagsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource whose tags you want to
                *             retrieve.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p> If the response to the previous <code>ListTags</code> request is truncated, SageMaker
                *             returns this token. To retrieve the next set of tags, use it in the subsequent request.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p>Maximum number of tags to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsInput) => any;
    }
    export interface ListTagsOutput {
            /**
                * <p>An array of <code>Tag</code> objects, each with a tag key and a value.</p>
                */
            Tags?: Tag[];
            /**
                * <p> If response is truncated, SageMaker includes a token in the response. You can use this
                *             token in your subsequent request to fetch next set of tokens. </p>
                */
            NextToken?: string;
    }
    export namespace ListTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsOutput) => any;
    }
    export interface ListTrainingJobsRequest {
            /**
                * <p>If the result of the previous <code>ListTrainingJobs</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of training
                *             jobs, use the token in the next request. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of training jobs to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>A filter that returns only training jobs created after the specified time
                *             (timestamp).</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only training jobs created before the specified time
                *             (timestamp).</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only training jobs modified after the specified time
                *             (timestamp).</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only training jobs modified before the specified time
                *             (timestamp).</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A string in the training job name. This filter returns only training jobs whose
                *             name contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that retrieves only training jobs with a specific status.</p>
                */
            StatusEquals?: TrainingJobStatus | string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: SortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListTrainingJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrainingJobsRequest) => any;
    }
    /**
        * <p>Provides summary information about a training job.</p>
        */
    export interface TrainingJobSummary {
            /**
                * <p>The name of the training job that you want a summary for.</p>
                */
            TrainingJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the training job.</p>
                */
            TrainingJobArn: string | undefined;
            /**
                * <p>A timestamp that shows when the training job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>A timestamp that shows when the training job ended. This field is set only if the
                *             training job has one of the terminal statuses (<code>Completed</code>,
                *                 <code>Failed</code>, or <code>Stopped</code>). </p>
                */
            TrainingEndTime?: Date;
            /**
                * <p> Timestamp when the training job was last modified. </p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The status of the training job.</p>
                */
            TrainingJobStatus: TrainingJobStatus | string | undefined;
    }
    export namespace TrainingJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingJobSummary) => any;
    }
    export interface ListTrainingJobsResponse {
            /**
                * <p>An array of <code>TrainingJobSummary</code> objects, each listing a training
                *             job.</p>
                */
            TrainingJobSummaries: TrainingJobSummary[] | undefined;
            /**
                * <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
                *             training jobs, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrainingJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrainingJobsResponse) => any;
    }
    export enum TrainingJobSortByOptions {
            CreationTime = "CreationTime",
            FinalObjectiveMetricValue = "FinalObjectiveMetricValue",
            Name = "Name",
            Status = "Status"
    }
    export interface ListTrainingJobsForHyperParameterTuningJobRequest {
            /**
                * <p>The name of the tuning job whose training jobs you want to list.</p>
                */
            HyperParameterTuningJobName: string | undefined;
            /**
                * <p>If the result of the previous <code>ListTrainingJobsForHyperParameterTuningJob</code>
                *             request was truncated, the response includes a <code>NextToken</code>. To retrieve the
                *             next set of training jobs, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of training jobs to return. The default value is 10.</p>
                */
            MaxResults?: number;
            /**
                * <p>A filter that returns only training jobs with the specified status.</p>
                */
            StatusEquals?: TrainingJobStatus | string;
            /**
                * <p>The field to sort results by. The default is <code>Name</code>.</p>
                *         <p>If the value of this field is <code>FinalObjectiveMetricValue</code>, any training
                *             jobs that did not return an objective metric are not listed.</p>
                */
            SortBy?: TrainingJobSortByOptions | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace ListTrainingJobsForHyperParameterTuningJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrainingJobsForHyperParameterTuningJobRequest) => any;
    }
    export interface ListTrainingJobsForHyperParameterTuningJobResponse {
            /**
                * <p>A list of <a>TrainingJobSummary</a> objects that
                *             describe
                *             the training jobs that the
                *                 <code>ListTrainingJobsForHyperParameterTuningJob</code> request returned.</p>
                */
            TrainingJobSummaries: HyperParameterTrainingJobSummary[] | undefined;
            /**
                * <p>If the result of this <code>ListTrainingJobsForHyperParameterTuningJob</code> request
                *             was truncated, the response includes a <code>NextToken</code>. To retrieve the next set
                *             of training jobs, use the token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrainingJobsForHyperParameterTuningJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrainingJobsForHyperParameterTuningJobResponse) => any;
    }
    export interface ListTransformJobsRequest {
            /**
                * <p>A filter that returns only transform jobs created after the specified time.</p>
                */
            CreationTimeAfter?: Date;
            /**
                * <p>A filter that returns only transform jobs created before the specified time.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>A filter that returns only transform jobs modified after the specified time.</p>
                */
            LastModifiedTimeAfter?: Date;
            /**
                * <p>A filter that returns only transform jobs modified before the specified time.</p>
                */
            LastModifiedTimeBefore?: Date;
            /**
                * <p>A string in the transform job name. This filter returns only transform jobs whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>A filter that retrieves only transform jobs with a specific status.</p>
                */
            StatusEquals?: TransformJobStatus | string;
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: SortBy | string;
            /**
                * <p>The sort order for results. The default is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>If the result of the previous <code>ListTransformJobs</code> request was truncated,
                *             the response includes a <code>NextToken</code>. To retrieve the next set of transform
                *             jobs, use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of transform jobs to return in the response. The default value is <code>10</code>.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTransformJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTransformJobsRequest) => any;
    }
    /**
        * <p>Provides a
        *             summary
        *             of a transform job. Multiple <code>TransformJobSummary</code> objects are returned as a
        *             list after in response to a <a>ListTransformJobs</a> call.</p>
        */
    export interface TransformJobSummary {
            /**
                * <p>The name of the transform job.</p>
                */
            TransformJobName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the transform job.</p>
                */
            TransformJobArn: string | undefined;
            /**
                * <p>A timestamp that shows when the transform Job was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>Indicates when the transform
                *             job
                *             ends on compute instances. For successful jobs and stopped jobs, this
                *             is the exact time
                *             recorded
                *             after the results are uploaded. For failed jobs, this is when Amazon SageMaker
                *             detected that the job failed.</p>
                */
            TransformEndTime?: Date;
            /**
                * <p>Indicates when the transform job was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The status of the transform job.</p>
                */
            TransformJobStatus: TransformJobStatus | string | undefined;
            /**
                * <p>If the transform job failed,
                *             the
                *             reason it failed.</p>
                */
            FailureReason?: string;
    }
    export namespace TransformJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformJobSummary) => any;
    }
    export interface ListTransformJobsResponse {
            /**
                * <p>An array of
                *                 <code>TransformJobSummary</code>
                *             objects.</p>
                */
            TransformJobSummaries: TransformJobSummary[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
                *             transform jobs, use it in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListTransformJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTransformJobsResponse) => any;
    }
    export enum SortTrialComponentsBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListTrialComponentsRequest {
            /**
                * <p>A filter that returns only components that are part of the specified experiment. If you
                *       specify <code>ExperimentName</code>, you can't filter by <code>SourceArn</code> or
                *         <code>TrialName</code>.</p>
                */
            ExperimentName?: string;
            /**
                * <p>A filter that returns only components that are part of the specified trial. If you specify
                *         <code>TrialName</code>, you can't filter by <code>ExperimentName</code> or
                *         <code>SourceArn</code>.</p>
                */
            TrialName?: string;
            /**
                * <p>A filter that returns only components that have the specified source Amazon Resource Name
                *       (ARN). If you specify <code>SourceArn</code>, you can't filter by <code>ExperimentName</code>
                *       or <code>TrialName</code>.</p>
                */
            SourceArn?: string;
            /**
                * <p>A filter that returns only components created after the specified time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns only components created before the specified time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: SortTrialComponentsBy | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The maximum number of components to return in the response. The default value is
                *       10.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the previous call to <code>ListTrialComponents</code> didn't return the full set of
                *       components, the call returns a token for getting the next set of components.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrialComponentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrialComponentsRequest) => any;
    }
    /**
        * <p>A summary of the properties of a trial component. To get all the properties, call the
        *         <a>DescribeTrialComponent</a> API and provide the
        *       <code>TrialComponentName</code>.</p>
        */
    export interface TrialComponentSummary {
            /**
                * <p>The name of the trial component.</p>
                */
            TrialComponentName?: string;
            /**
                * <p>The ARN of the trial component.</p>
                */
            TrialComponentArn?: string;
            /**
                * <p>The name of the component as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>TrialComponentName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) and job type of the source of a trial component.</p>
                */
            TrialComponentSource?: TrialComponentSource;
            /**
                * <p>The status of the component. States include:</p>
                *          <ul>
                *             <li>
                *                <p>InProgress</p>
                *             </li>
                *             <li>
                *                <p>Completed</p>
                *             </li>
                *             <li>
                *                <p>Failed</p>
                *             </li>
                *          </ul>
                */
            Status?: TrialComponentStatus;
            /**
                * <p>When the component started.</p>
                */
            StartTime?: Date;
            /**
                * <p>When the component ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>When the component was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Who created the trial component.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the component was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Who last modified the component.</p>
                */
            LastModifiedBy?: UserContext;
    }
    export namespace TrialComponentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentSummary) => any;
    }
    export interface ListTrialComponentsResponse {
            /**
                * <p>A list of the summaries of your trial components.</p>
                */
            TrialComponentSummaries?: TrialComponentSummary[];
            /**
                * <p>A token for getting the next set of components, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrialComponentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrialComponentsResponse) => any;
    }
    export enum SortTrialsBy {
            CREATION_TIME = "CreationTime",
            NAME = "Name"
    }
    export interface ListTrialsRequest {
            /**
                * <p>A filter that returns only trials that are part of the specified experiment.</p>
                */
            ExperimentName?: string;
            /**
                * <p>A filter that returns only trials that are associated with the specified trial
                *       component.</p>
                */
            TrialComponentName?: string;
            /**
                * <p>A filter that returns only trials created after the specified time.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>A filter that returns only trials created before the specified time.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
                */
            SortBy?: SortTrialsBy | string;
            /**
                * <p>The sort order. The default value is <code>Descending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The maximum number of trials to return in the response. The default value is 10.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the previous call to <code>ListTrials</code> didn't return the full set of trials, the
                *       call returns a token for getting the next set of trials.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrialsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrialsRequest) => any;
    }
    /**
        * <p>A summary of the properties of a trial. To get the complete set of properties, call the
        *         <a>DescribeTrial</a> API and provide the <code>TrialName</code>.</p>
        */
    export interface TrialSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the trial.</p>
                */
            TrialArn?: string;
            /**
                * <p>The name of the trial.</p>
                */
            TrialName?: string;
            /**
                * <p>The name of the trial as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>TrialName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The source of the trial.</p>
                */
            TrialSource?: TrialSource;
            /**
                * <p>When the trial was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>When the trial was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace TrialSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialSummary) => any;
    }
    export interface ListTrialsResponse {
            /**
                * <p>A list of the summaries of your trials.</p>
                */
            TrialSummaries?: TrialSummary[];
            /**
                * <p>A token for getting the next set of trials, if there are any.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrialsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrialsResponse) => any;
    }
    export enum UserProfileSortKey {
            CreationTime = "CreationTime",
            LastModifiedTime = "LastModifiedTime"
    }
    export interface ListUserProfilesRequest {
            /**
                * <p>If the previous response was truncated, you will receive this token.
                *         Use it in your next request to receive the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Returns a list up to a specified limit.</p>
                */
            MaxResults?: number;
            /**
                * <p>The sort order for the results. The default is Ascending.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The parameter by which to sort the results. The default is CreationTime.</p>
                */
            SortBy?: UserProfileSortKey | string;
            /**
                * <p>A parameter by which to filter the results.</p>
                */
            DomainIdEquals?: string;
            /**
                * <p>A parameter by which to filter the results.</p>
                */
            UserProfileNameContains?: string;
    }
    export namespace ListUserProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserProfilesRequest) => any;
    }
    /**
        * <p>The user profile details.</p>
        */
    export interface UserProfileDetails {
            /**
                * <p>The domain ID.</p>
                */
            DomainId?: string;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName?: string;
            /**
                * <p>The status.</p>
                */
            Status?: UserProfileStatus | string;
            /**
                * <p>The creation time.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The last modified time.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace UserProfileDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserProfileDetails) => any;
    }
    export interface ListUserProfilesResponse {
            /**
                * <p>The list of user profiles.</p>
                */
            UserProfiles?: UserProfileDetails[];
            /**
                * <p>If the previous response was truncated, you will receive this token.
                *         Use it in your next request to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListUserProfilesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserProfilesResponse) => any;
    }
    export enum ListWorkforcesSortByOptions {
            CreateDate = "CreateDate",
            Name = "Name"
    }
    export interface ListWorkforcesRequest {
            /**
                * <p>Sort workforces using the workforce name or creation date.</p>
                */
            SortBy?: ListWorkforcesSortByOptions | string;
            /**
                * <p>Sort workforces in ascending or descending order.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>A filter you can use to search for workforces using part of the workforce name.</p>
                */
            NameContains?: string;
            /**
                * <p>A token to resume pagination.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of workforces returned in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListWorkforcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkforcesRequest) => any;
    }
    export interface ListWorkforcesResponse {
            /**
                * <p>A list containing information about your workforce.</p>
                */
            Workforces: Workforce[] | undefined;
            /**
                * <p>A token to resume pagination.</p>
                */
            NextToken?: string;
    }
    export namespace ListWorkforcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkforcesResponse) => any;
    }
    export enum ListWorkteamsSortByOptions {
            CreateDate = "CreateDate",
            Name = "Name"
    }
    export interface ListWorkteamsRequest {
            /**
                * <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
                */
            SortBy?: ListWorkteamsSortByOptions | string;
            /**
                * <p>The sort order for results. The default is <code>Ascending</code>.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>A string in the work team's name. This filter returns only work teams whose name
                *             contains the specified string.</p>
                */
            NameContains?: string;
            /**
                * <p>If the result of the previous <code>ListWorkteams</code> request was truncated, the
                *             response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs,
                *             use the token in the next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of work teams to return in each page of the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListWorkteamsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkteamsRequest) => any;
    }
    export interface ListWorkteamsResponse {
            /**
                * <p>An array of <code>Workteam</code> objects, each describing a work team.</p>
                */
            Workteams: Workteam[] | undefined;
            /**
                * <p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
                *             work teams, use it in the subsequent request.</p>
                */
            NextToken?: string;
    }
    export namespace ListWorkteamsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkteamsResponse) => any;
    }
    /**
        * <p>A versioned model that can be deployed for SageMaker inference.</p>
        */
    export interface ModelPackage {
            /**
                * <p>The name of the model.</p>
                */
            ModelPackageName?: string;
            /**
                * <p>The model group to which the model belongs.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>The version number of a versioned model.</p>
                */
            ModelPackageVersion?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the model package.</p>
                */
            ModelPackageArn?: string;
            /**
                * <p>The description of the model package.</p>
                */
            ModelPackageDescription?: string;
            /**
                * <p>The time that the model package was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Defines how to perform inference generation after a training job is run.</p>
                */
            InferenceSpecification?: InferenceSpecification;
            /**
                * <p>A list of algorithms that were used to create a model package.</p>
                */
            SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
            /**
                * <p>Specifies batch transform jobs that SageMaker runs to validate your model package.</p>
                */
            ValidationSpecification?: ModelPackageValidationSpecification;
            /**
                * <p>The status of the model package. This can be one of the following values.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> - The model package is pending being created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>IN_PROGRESS</code> - The model package is in the process of being
                *                     created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>COMPLETED</code> - The model package was successfully created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FAILED</code> - The model package failed.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DELETING</code> - The model package is in the process of being deleted.</p>
                *             </li>
                *          </ul>
                */
            ModelPackageStatus?: ModelPackageStatus | string;
            /**
                * <p>Specifies the validation and image scan statuses of the model package.</p>
                */
            ModelPackageStatusDetails?: ModelPackageStatusDetails;
            /**
                * <p>Whether the model package is to be certified to be listed on Amazon Web Services Marketplace. For
                *             information about listing model packages on Amazon Web Services Marketplace, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html">List Your
                *                 Algorithm or Model Package on Amazon Web Services Marketplace</a>.</p>
                */
            CertifyForMarketplace?: boolean;
            /**
                * <p>The approval status of the model. This can be one of the following values.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>APPROVED</code> - The model is approved</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>REJECTED</code> - The model is rejected.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
                *                     approval.</p>
                *             </li>
                *          </ul>
                */
            ModelApprovalStatus?: ModelApprovalStatus | string;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>Metrics for the model.</p>
                */
            ModelMetrics?: ModelMetrics;
            /**
                * <p>The last time the model package was modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>A description provided when the model approval is set.</p>
                */
            ApprovalDescription?: string;
            /**
                * <p>The machine learning domain of your model package and its components. Common
                *            machine learning domains include computer vision and natural language processing.</p>
                */
            Domain?: string;
            /**
                * <p>The machine learning task your model package accomplishes. Common machine
                *      learning tasks include object detection and image classification.</p>
                */
            Task?: string;
            /**
                * <p>The Amazon Simple Storage Service path where the sample payload are stored. This path must point to
                *            a single gzip compressed tar archive (.tar.gz suffix).</p>
                */
            SamplePayloadUrl?: string;
            /**
                * <p>An array of additional Inference Specification objects.</p>
                */
            AdditionalInferenceSpecifications?: AdditionalInferenceSpecificationDefinition[];
            /**
                * <p>A list of the tags associated with the model package. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *             resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The metadata properties for the model package. </p>
                */
            CustomerMetadataProperties?: Record<string, string>;
            /**
                * <p>Represents the drift check baselines that can be used when the model monitor is set using the model package.</p>
                */
            DriftCheckBaselines?: DriftCheckBaselines;
    }
    export namespace ModelPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackage) => any;
    }
    /**
        * <p>A group of versioned models in the model registry.</p>
        */
    export interface ModelPackageGroup {
            /**
                * <p>The name of the model group.</p>
                */
            ModelPackageGroupName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the model group.</p>
                */
            ModelPackageGroupArn?: string;
            /**
                * <p>The description for the model group.</p>
                */
            ModelPackageGroupDescription?: string;
            /**
                * <p>The time that the model group was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>The status of the model group. This can be one of the following values.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> - The model group is pending being created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>IN_PROGRESS</code> - The model group is in the process of being
                *                     created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>COMPLETED</code> - The model group was successfully created.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FAILED</code> - The model group failed.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DELETING</code> - The model group is in the process of being deleted.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DELETE_FAILED</code> - SageMaker failed to delete the model group.</p>
                *             </li>
                *          </ul>
                */
            ModelPackageGroupStatus?: ModelPackageGroupStatus | string;
            /**
                * <p>A list of the tags associated with the model group. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *             resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace ModelPackageGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelPackageGroup) => any;
    }
    /**
        * <p>A list of nested <a>Filter</a> objects. A resource must satisfy the conditions
        *       of all filters to be included in the results returned from the <a>Search</a> API.</p>
        *          <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a
        *       specific channel name and <code>S3Uri</code> prefix, define the following filters:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains",
        *             "Value":"mybucket/catdata"}'</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface NestedFilters {
            /**
                * <p>The name of the property to use in the nested filters. The value must match a listed property name,
                *       such as <code>InputDataConfig</code>.</p>
                */
            NestedPropertyName: string | undefined;
            /**
                * <p>A list of filters. Each filter acts on a property. Filters must contain at least one
                *       <code>Filters</code> value. For example, a <code>NestedFilters</code> call might
                *       include a filter on the <code>PropertyName</code> parameter of the
                *       <code>InputDataConfig</code> property:
                *       <code>InputDataConfig.DataSource.S3DataSource.S3Uri</code>.</p>
                */
            Filters: Filter[] | undefined;
    }
    export namespace NestedFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NestedFilters) => any;
    }
    /**
        * <p>The trial that a trial component is associated with and the experiment the trial is part
        *       of. A component might not be associated with a trial. A component can be associated with
        *       multiple trials.</p>
        */
    export interface Parent {
            /**
                * <p>The name of the trial.</p>
                */
            TrialName?: string;
            /**
                * <p>The name of the experiment.</p>
                */
            ExperimentName?: string;
    }
    export namespace Parent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Parent) => any;
    }
    /**
        * <p>A SageMaker Model Building Pipeline instance.</p>
        */
    export interface Pipeline {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline.</p>
                */
            PipelineArn?: string;
            /**
                * <p>The name of the pipeline.</p>
                */
            PipelineName?: string;
            /**
                * <p>The display name of the pipeline.</p>
                */
            PipelineDisplayName?: string;
            /**
                * <p>The description of the pipeline.</p>
                */
            PipelineDescription?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role that created the pipeline.</p>
                */
            RoleArn?: string;
            /**
                * <p>The status of the pipeline.</p>
                */
            PipelineStatus?: PipelineStatus | string;
            /**
                * <p>The creation time of the pipeline.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that the pipeline was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The time when the pipeline was last run.</p>
                */
            LastRunTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>The parallelism configuration applied to the pipeline.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
            /**
                * <p>A list of tags that apply to the pipeline.</p>
                */
            Tags?: Tag[];
    }
    export namespace Pipeline {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Pipeline) => any;
    }
    /**
        * <p>An execution of a pipeline.</p>
        */
    export interface PipelineExecution {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline that was executed.</p>
                */
            PipelineArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
            /**
                * <p>The display name of the pipeline execution.</p>
                */
            PipelineExecutionDisplayName?: string;
            /**
                * <p>The status of the pipeline status.</p>
                */
            PipelineExecutionStatus?: PipelineExecutionStatus | string;
            /**
                * <p>The description of the pipeline execution.</p>
                */
            PipelineExecutionDescription?: string;
            /**
                * <p>Specifies the names of the experiment and trial created by a pipeline.</p>
                */
            PipelineExperimentConfig?: PipelineExperimentConfig;
            /**
                * <p>If the execution failed, a message describing why.</p>
                */
            FailureReason?: string;
            /**
                * <p>The creation time of the pipeline execution.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that the pipeline execution was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>The parallelism configuration applied to the pipeline execution.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
            /**
                * <p>Contains a list of pipeline parameters. This list can be empty. </p>
                */
            PipelineParameters?: Parameter[];
    }
    export namespace PipelineExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineExecution) => any;
    }
    /**
        * <p>An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information,
        *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html">Process
        *                 Data and Evaluate Models</a>.</p>
        */
    export interface ProcessingJob {
            /**
                * <p>List of input configurations for the processing job.</p>
                */
            ProcessingInputs?: ProcessingInput[];
            /**
                * <p>Configuration for uploading output from the processing container.</p>
                */
            ProcessingOutputConfig?: ProcessingOutputConfig;
            /**
                * <p>The name of the processing job.</p>
                */
            ProcessingJobName?: string;
            /**
                * <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
                *             processing job. In distributed training, you specify more than one instance.</p>
                */
            ProcessingResources?: ProcessingResources;
            /**
                * <p>Configures conditions under which the processing job should be stopped, such as how long
                *             the processing job has been running. After the condition is met, the processing job is stopped.</p>
                */
            StoppingCondition?: ProcessingStoppingCondition;
            /**
                * <p>Configuration to run a processing job in a specified container image.</p>
                */
            AppSpecification?: AppSpecification;
            /**
                * <p>Sets the environment variables in the Docker container.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>Networking options for a job, such as network traffic encryption between containers,
                *          whether to allow inbound and outbound network calls to and from containers, and the VPC
                *          subnets and security groups to use for VPC-enabled jobs.</p>
                */
            NetworkConfig?: NetworkConfig;
            /**
                * <p>The ARN of the role used to create the processing job.</p>
                */
            RoleArn?: string;
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
            /**
                * <p>The ARN of the processing job.</p>
                */
            ProcessingJobArn?: string;
            /**
                * <p>The status of the processing job.</p>
                */
            ProcessingJobStatus?: ProcessingJobStatus | string;
            /**
                * <p>A string, up to one KB in size, that contains metadata from the processing
                *             container when the processing job exits.</p>
                */
            ExitMessage?: string;
            /**
                * <p>A string, up to one KB in size, that contains the reason a processing job failed, if
                *             it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The time that the processing job ended.</p>
                */
            ProcessingEndTime?: Date;
            /**
                * <p>The time that the processing job started.</p>
                */
            ProcessingStartTime?: Date;
            /**
                * <p>The time the processing job was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The time the processing job was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The ARN of a monitoring schedule for an endpoint associated with this processing
                *             job.</p>
                */
            MonitoringScheduleArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.</p>
                */
            AutoMLJobArn?: string;
            /**
                * <p>The ARN of the training job associated with this processing job.</p>
                */
            TrainingJobArn?: string;
            /**
                * <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                *                 User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace ProcessingJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessingJob) => any;
    }
    /**
        * <p>Configuration information for updating the Debugger profile parameters, system and framework metrics configurations, and
        *             storage paths.</p>
        */
    export interface ProfilerConfigForUpdate {
            /**
                * <p>Path to Amazon S3 storage location for system and framework metrics.</p>
                */
            S3OutputPath?: string;
            /**
                * <p>A time interval for capturing system metrics in milliseconds. Available values are
                *             100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>
                */
            ProfilingIntervalInMilliseconds?: number;
            /**
                * <p>Configuration information for capturing framework metrics. Available key strings for different profiling options are
                *             <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>.
                *             The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about
                *             how to configure the <code>ProfilingParameters</code> parameter,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
                *         </p>
                */
            ProfilingParameters?: Record<string, string>;
            /**
                * <p>To disable Debugger monitoring and profiling, set to <code>True</code>.</p>
                */
            DisableProfiler?: boolean;
    }
    export namespace ProfilerConfigForUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfilerConfigForUpdate) => any;
    }
    /**
        * <p>The properties of a project as returned by the Search API.</p>
        */
    export interface Project {
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ProjectArn?: string;
            /**
                * <p>The name of the project.</p>
                */
            ProjectName?: string;
            /**
                * <p>The ID of the project.</p>
                */
            ProjectId?: string;
            /**
                * <p>The description of the project.</p>
                */
            ProjectDescription?: string;
            /**
                * <p>Details that you specify to provision a service catalog product. For information about
                *             service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
                *                 Catalog</a>.</p>
                */
            ServiceCatalogProvisioningDetails?: ServiceCatalogProvisioningDetails;
            /**
                * <p>Details of a provisioned service catalog product. For information about service catalog,
                *             see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
                *                 Catalog</a>.</p>
                */
            ServiceCatalogProvisionedProductDetails?: ServiceCatalogProvisionedProductDetails;
            /**
                * <p>The status of the project.</p>
                */
            ProjectStatus?: ProjectStatus | string;
            /**
                * <p>Who created the project.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>A timestamp specifying when the project was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A timestamp container for when the project was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
    }
    export namespace Project {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Project) => any;
    }
    export interface PutModelPackageGroupPolicyInput {
            /**
                * <p>The name of the model group to add a resource policy to.</p>
                */
            ModelPackageGroupName: string | undefined;
            /**
                * <p>The resource policy for the model group.</p>
                */
            ResourcePolicy: string | undefined;
    }
    export namespace PutModelPackageGroupPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutModelPackageGroupPolicyInput) => any;
    }
    export interface PutModelPackageGroupPolicyOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the model package group.</p>
                */
            ModelPackageGroupArn: string | undefined;
    }
    export namespace PutModelPackageGroupPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutModelPackageGroupPolicyOutput) => any;
    }
    /**
        * <p>A set of filters to narrow the set of lineage entities connected to the <code>StartArn</code>(s) returned by the
        *          <code>QueryLineage</code> API action.</p>
        */
    export interface QueryFilters {
            /**
                * <p>Filter the lineage entities connected to the <code>StartArn</code> by type. For example: <code>DataSet</code>,
                *          <code>Model</code>, <code>Endpoint</code>, or <code>ModelDeployment</code>.</p>
                */
            Types?: string[];
            /**
                * <p>Filter the lineage entities connected to the <code>StartArn</code>(s) by the type of the lineage entity.</p>
                */
            LineageTypes?: (LineageType | string)[];
            /**
                * <p>Filter the lineage entities connected to the <code>StartArn</code>(s) by created date.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>Filter the lineage entities connected to the <code>StartArn</code>(s) after the create date.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>Filter the lineage entities connected to the <code>StartArn</code>(s) before the last modified date.</p>
                */
            ModifiedBefore?: Date;
            /**
                * <p>Filter the lineage entities connected to the <code>StartArn</code>(s) after the last modified date.</p>
                */
            ModifiedAfter?: Date;
            /**
                * <p>Filter the lineage entities connected to the <code>StartArn</code>(s) by a set if property key value pairs.
                *          If multiple pairs are provided, an entity is included in the results if it matches any of the provided pairs.</p>
                */
            Properties?: Record<string, string>;
    }
    export namespace QueryFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryFilters) => any;
    }
    export interface QueryLineageRequest {
            /**
                * <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
                */
            StartArns?: string[];
            /**
                * <p>Associations between lineage entities have a direction.  This parameter determines the direction from the
                *          StartArn(s) that the query traverses.</p>
                */
            Direction?: Direction | string;
            /**
                * <p> Setting this value to <code>True</code> retrieves not only the entities of interest but also the
                *          <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and
                *          lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
                */
            IncludeEdges?: boolean;
            /**
                * <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
                *          <ul>
                *             <li>
                *                <p>Properties - Key-value pairs to match on the lineage entities' properties.</p>
                *             </li>
                *             <li>
                *                <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>,
                *             <code>Artifact</code>, or <code>Context</code>.</p>
                *             </li>
                *             <li>
                *                <p>CreatedBefore - Filter entities created before this date.</p>
                *             </li>
                *             <li>
                *                <p>ModifiedBefore - Filter entities modified before this date.</p>
                *             </li>
                *             <li>
                *                <p>ModifiedAfter - Filter entities modified after this date.</p>
                *             </li>
                *          </ul>
                */
            Filters?: QueryFilters;
            /**
                * <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number
                *          of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
                */
            MaxDepth?: number;
            /**
                * <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace QueryLineageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryLineageRequest) => any;
    }
    /**
        * <p>A lineage entity connected to the starting entity(ies).</p>
        */
    export interface Vertex {
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage entity resource.</p>
                */
            Arn?: string;
            /**
                * <p>The type of the lineage entity resource. For example: <code>DataSet</code>, <code>Model</code>, <code>Endpoint</code>,
                *          etc...</p>
                */
            Type?: string;
            /**
                * <p>The type of resource of the lineage entity.</p>
                */
            LineageType?: LineageType | string;
    }
    export namespace Vertex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Vertex) => any;
    }
    export interface QueryLineageResponse {
            /**
                * <p>A list of vertices connected to the start entity(ies) in the lineage graph.</p>
                */
            Vertices?: Vertex[];
            /**
                * <p>A list of edges that connect vertices in the response.</p>
                */
            Edges?: Edge[];
            /**
                * <p>Limits the number of vertices in the response. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace QueryLineageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryLineageResponse) => any;
    }
    export interface RegisterDevicesRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>A list of devices to register with SageMaker Edge Manager.</p>
                */
            Devices: Device[] | undefined;
            /**
                * <p>The tags associated with devices.</p>
                */
            Tags?: Tag[];
    }
    export namespace RegisterDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterDevicesRequest) => any;
    }
    /**
        * <p>Contains input values for a task.</p>
        */
    export interface RenderableTask {
            /**
                * <p>A JSON object that contains values for the variables defined in the template. It is
                *             made available to the template under the substitution variable <code>task.input</code>.
                *             For example, if you define a variable <code>task.input.text</code> in your template, you
                *             can supply the variable in the JSON object as <code>"text": "sample text"</code>.</p>
                */
            Input: string | undefined;
    }
    export namespace RenderableTask {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenderableTask) => any;
    }
    /**
        * <p>A description of an error that occurred while rendering the template.</p>
        */
    export interface RenderingError {
            /**
                * <p>A unique identifier for a specific class of errors.</p>
                */
            Code: string | undefined;
            /**
                * <p>A human-readable message describing the error.</p>
                */
            Message: string | undefined;
    }
    export namespace RenderingError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenderingError) => any;
    }
    export interface RenderUiTemplateRequest {
            /**
                * <p>A <code>Template</code> object containing the worker UI template to render.</p>
                */
            UiTemplate?: UiTemplate;
            /**
                * <p>A <code>RenderableTask</code> object containing a representative task to
                *             render.</p>
                */
            Task: RenderableTask | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the
                *             template.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not
                *             provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code>
                *             parameter.</p>
                *         <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <a>UiConfig</a>.</p>
                */
            HumanTaskUiArn?: string;
    }
    export namespace RenderUiTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenderUiTemplateRequest) => any;
    }
    export interface RenderUiTemplateResponse {
            /**
                * <p>A Liquid template that renders the HTML for the worker UI.</p>
                */
            RenderedContent: string | undefined;
            /**
                * <p>A list of one or more <code>RenderingError</code> objects if any were encountered
                *             while rendering the template. If there were no errors, the list is empty.</p>
                */
            Errors: RenderingError[] | undefined;
    }
    export namespace RenderUiTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenderUiTemplateResponse) => any;
    }
    export interface RetryPipelineExecutionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn: string | undefined;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          operation. An idempotent operation completes no more than once.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>This configuration, if specified, overrides the parallelism configuration
                *             of the parent pipeline.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
    }
    export namespace RetryPipelineExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetryPipelineExecutionRequest) => any;
    }
    export interface RetryPipelineExecutionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
    }
    export namespace RetryPipelineExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetryPipelineExecutionResponse) => any;
    }
    export enum SearchSortOrder {
            ASCENDING = "Ascending",
            DESCENDING = "Descending"
    }
    /**
        * <p>Contains information about a training job.</p>
        */
    export interface TrainingJob {
            /**
                * <p>The name of the training job.</p>
                */
            TrainingJobName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the training job.</p>
                */
            TrainingJobArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the
                *             training job was launched by a hyperparameter tuning job.</p>
                */
            TuningJobArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the labeling job.</p>
                */
            LabelingJobArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the job.</p>
                */
            AutoMLJobArn?: string;
            /**
                * <p>Information about the Amazon S3 location that is configured for storing model
                *             artifacts.</p>
                */
            ModelArtifacts?: ModelArtifacts;
            /**
                * <p>The status of the
                *             training
                *             job.</p>
                *         <p>Training job statuses are:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>InProgress</code> - The training is in progress.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Completed</code> - The training job has completed.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Failed</code> - The training job has failed. To see the reason for the
                *                     failure, see the <code>FailureReason</code> field in the response to a
                *                         <code>DescribeTrainingJobResponse</code> call.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Stopping</code> - The training job is stopping.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Stopped</code> - The training job has stopped.</p>
                *             </li>
                *          </ul>
                *         <p>For
                *             more detailed information, see <code>SecondaryStatus</code>. </p>
                */
            TrainingJobStatus?: TrainingJobStatus | string;
            /**
                * <p> Provides detailed information about the state of the training job. For detailed
                *             information about the secondary status of the training job, see
                *                 <code>StatusMessage</code> under <a>SecondaryStatusTransition</a>.</p>
                *         <p>SageMaker provides primary statuses and secondary statuses that apply to each of
                *             them:</p>
                *         <dl>
                *             <dt>InProgress</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Starting</code>
                *                                 - Starting the training job.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Downloading</code> - An optional stage for algorithms that
                *                                 support <code>File</code> training input mode. It indicates that
                *                                 data is being downloaded to the ML storage volumes.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Training</code> - Training is in progress.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Uploading</code> - Training is complete and the model
                *                                 artifacts are being uploaded to the S3 location.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Completed</code> - The training job has completed.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Failed</code> - The training job has failed. The reason for
                *                                 the failure is returned in the <code>FailureReason</code> field of
                *                                     <code>DescribeTrainingJobResponse</code>.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Stopped</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>MaxRuntimeExceeded</code> - The job stopped because it
                *                                 exceeded the maximum allowed runtime.</p>
                *                         </li>
                *                   <li>
                *                             <p>
                *                         <code>Stopped</code> - The training job has stopped.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *             <dt>Stopping</dt>
                *             <dd>
                *                     <ul>
                *                   <li>
                *                             <p>
                *                         <code>Stopping</code> - Stopping the training job.</p>
                *                         </li>
                *                </ul>
                *                 </dd>
                *          </dl>
                *         <important>
                *             <p>Valid values for <code>SecondaryStatus</code> are subject to change. </p>
                *         </important>
                *         <p>We no longer support the following secondary statuses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>LaunchingMLInstances</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>PreparingTrainingStack</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>DownloadingTrainingImage</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            SecondaryStatus?: SecondaryStatus | string;
            /**
                * <p>If the training job failed, the reason it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>Algorithm-specific parameters.</p>
                */
            HyperParameters?: Record<string, string>;
            /**
                * <p>Information about the algorithm used for training, and algorithm metadata.</p>
                */
            AlgorithmSpecification?: AlgorithmSpecification;
            /**
                * <p>The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.</p>
                */
            RoleArn?: string;
            /**
                * <p>An array of <code>Channel</code> objects that describes each data input
                *             channel.</p>
                */
            InputDataConfig?: Channel[];
            /**
                * <p>The S3 path where model artifacts that you configured when creating the job are
                *             stored. SageMaker creates subfolders for model artifacts.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>Resources, including ML compute instances and ML storage volumes, that are configured
                *             for model training.</p>
                */
            ResourceConfig?: ResourceConfig;
            /**
                * <p>A <a>VpcConfig</a> object that specifies the VPC that this training job has
                *             access to. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon
                *                 Virtual Private Cloud</a>.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Specifies a limit to how long a model training job can run. It also specifies how long
                *             a managed Spot training job has to complete. When the job reaches the time limit, SageMaker
                *             ends the training job. Use this API to cap model training costs.</p>
                *         <p>To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
                *             job termination for 120 seconds. Algorithms can use this 120-second window to save the
                *             model artifacts, so the results of training are not lost. </p>
                */
            StoppingCondition?: StoppingCondition;
            /**
                * <p>A timestamp that indicates when the training job was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Indicates the time when the training job starts on training instances. You are billed
                *             for the time interval between this time and the value of <code>TrainingEndTime</code>.
                *             The start time in CloudWatch Logs might be later than this time. The difference is due to the time
                *             it takes to download the training data and to the size of the training container.</p>
                */
            TrainingStartTime?: Date;
            /**
                * <p>Indicates the time when the training job ends on training instances. You are billed
                *             for the time interval between the value of <code>TrainingStartTime</code> and this time.
                *             For successful jobs and stopped jobs, this is the time after model artifacts are
                *             uploaded. For failed jobs, this is the time when SageMaker detects a job failure.</p>
                */
            TrainingEndTime?: Date;
            /**
                * <p>A timestamp that indicates when the status of the training job was last
                *             modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A history of all of the secondary statuses that the training job has transitioned
                *             through.</p>
                */
            SecondaryStatusTransitions?: SecondaryStatusTransition[];
            /**
                * <p>A list of final metric values that are set when the training job completes. Used only
                *             if the training job was configured to use metrics.</p>
                */
            FinalMetricDataList?: MetricData[];
            /**
                * <p>If the <code>TrainingJob</code> was created with network isolation, the value is set
                *             to <code>true</code>. If network isolation is enabled, nodes can't communicate beyond
                *             the VPC they run in.</p>
                */
            EnableNetworkIsolation?: boolean;
            /**
                * <p>To encrypt all communications between ML compute instances in distributed training,
                *             choose <code>True</code>. Encryption provides greater security for distributed training,
                *             but training might take longer. How long it takes depends on the amount of communication
                *             between compute instances, especially if you use a deep learning algorithm in
                *             distributed training.</p>
                */
            EnableInterContainerTrafficEncryption?: boolean;
            /**
                * <p>When true, enables managed spot training using Amazon EC2 Spot instances to run
                *             training jobs instead of on-demand instances. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot Training</a>.</p>
                */
            EnableManagedSpotTraining?: boolean;
            /**
                * <p>Contains information about the output location for managed spot training checkpoint
                *             data. </p>
                */
            CheckpointConfig?: CheckpointConfig;
            /**
                * <p>The training time in seconds.</p>
                */
            TrainingTimeInSeconds?: number;
            /**
                * <p>The billable time in seconds.</p>
                */
            BillableTimeInSeconds?: number;
            /**
                * <p>Configuration information for the Debugger hook parameters, metric and tensor collections, and
                *             storage paths. To learn more about
                *             how to configure the <code>DebugHookConfig</code> parameter,
                *             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
                */
            DebugHookConfig?: DebugHookConfig;
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
            /**
                * <p>Information about the debug rule configuration.</p>
                */
            DebugRuleConfigurations?: DebugRuleConfiguration[];
            /**
                * <p>Configuration of storage locations for the Debugger TensorBoard output data.</p>
                */
            TensorBoardOutputConfig?: TensorBoardOutputConfig;
            /**
                * <p>Information about the evaluation status of the rules for the training job.</p>
                */
            DebugRuleEvaluationStatuses?: DebugRuleEvaluationStatus[];
            /**
                * <p>The environment variables to set in the Docker container.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>The number of times to retry the job when the job fails due to an
                *                 <code>InternalServerError</code>.</p>
                */
            RetryStrategy?: RetryStrategy;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
                *             different ways, for example, by purpose, owner, or environment. For more information,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
                *                 Resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace TrainingJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingJob) => any;
    }
    /**
        * <p>A short summary of a trial component.</p>
        */
    export interface TrialComponentSimpleSummary {
            /**
                * <p>The name of the trial component.</p>
                */
            TrialComponentName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the trial component.</p>
                */
            TrialComponentArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) and job type of the source of a trial component.</p>
                */
            TrialComponentSource?: TrialComponentSource;
            /**
                * <p>When the component was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            CreatedBy?: UserContext;
    }
    export namespace TrialComponentSimpleSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentSimpleSummary) => any;
    }
    /**
        * <p>The properties of a trial as returned by the <a>Search</a> API.</p>
        */
    export interface Trial {
            /**
                * <p>The name of the trial.</p>
                */
            TrialName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the trial.</p>
                */
            TrialArn?: string;
            /**
                * <p>The name of the trial as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>TrialName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The name of the experiment the trial is part of.</p>
                */
            ExperimentName?: string;
            /**
                * <p>The source of the trial.</p>
                */
            Source?: TrialSource;
            /**
                * <p>When the trial was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Who created the trial.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>Who last modified the trial.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>The list of tags that are associated with the trial. You can use <a>Search</a>
                *       API to search on the tags.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A list of the components associated with the trial. For each component, a summary of the
                *       component's properties is included.</p>
                */
            TrialComponentSummaries?: TrialComponentSimpleSummary[];
    }
    export namespace Trial {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Trial) => any;
    }
    /**
        * <p>A batch transform job. For information about SageMaker batch transform, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use Batch
        *         Transform</a>.</p>
        */
    export interface TransformJob {
            /**
                * <p>The name of the transform job.</p>
                */
            TransformJobName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the transform job.</p>
                */
            TransformJobArn?: string;
            /**
                * <p>The status of the transform job.</p>
                *          <p>Transform job statuses are:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>InProgress</code> - The job is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Completed</code> - The job has completed.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Failed</code> - The transform job has failed. To see the reason for the failure,
                *           see the <code>FailureReason</code> field in the response to a
                *             <code>DescribeTransformJob</code> call.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Stopping</code> - The transform job is stopping.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Stopped</code> - The transform job has stopped.</p>
                *             </li>
                *          </ul>
                */
            TransformJobStatus?: TransformJobStatus | string;
            /**
                * <p>If the transform job failed, the reason it failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The name of the model associated with the transform job.</p>
                */
            ModelName?: string;
            /**
                * <p>The maximum number of parallel requests that can be sent to each instance in a transform
                *       job. If <code>MaxConcurrentTransforms</code> is set to 0 or left unset, SageMaker checks the
                *       optional execution-parameters to determine the settings for your chosen algorithm. If the
                *       execution-parameters endpoint is not enabled, the default value is 1. For built-in algorithms,
                *       you don't need to set a value for <code>MaxConcurrentTransforms</code>.</p>
                */
            MaxConcurrentTransforms?: number;
            /**
                * <p>Configures the timeout and maximum number of retries for processing a transform job
                *             invocation.</p>
                */
            ModelClientConfig?: ModelClientConfig;
            /**
                * <p>The maximum allowed size of the payload, in MB. A payload is the data portion of a record
                *       (without metadata). The value in <code>MaxPayloadInMB</code> must be greater than, or equal
                *       to, the size of a single record. To estimate the size of a record in MB, divide the size of
                *       your dataset by the number of records. To ensure that the records fit within the maximum
                *       payload size, we recommend using a slightly larger value. The default value is 6 MB. For cases
                *       where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding,
                *       set the value to 0. This feature works only in supported algorithms. Currently, SageMaker built-in
                *       algorithms do not support HTTP chunked encoding.</p>
                */
            MaxPayloadInMB?: number;
            /**
                * <p>Specifies the number of records to include in a mini-batch for an HTTP inference request.
                *       A record is a single unit of input data that inference can be made on. For example, a single
                *       line in a CSV file is a record.</p>
                */
            BatchStrategy?: BatchStrategy | string;
            /**
                * <p>The environment variables to set in the Docker container. We support up to 16 key and
                *       values entries in the map.</p>
                */
            Environment?: Record<string, string>;
            /**
                * <p>Describes the input source of a transform job and the way the transform job consumes
                *             it.</p>
                */
            TransformInput?: TransformInput;
            /**
                * <p>Describes the results of a transform job.</p>
                */
            TransformOutput?: TransformOutput;
            /**
                * <p>Describes the resources, including ML instance types and ML instance count, to use for
                *             transform job.</p>
                */
            TransformResources?: TransformResources;
            /**
                * <p>A timestamp that shows when the transform Job was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Indicates when the transform job starts on ML instances. You are billed for the time
                *       interval between this time and the value of <code>TransformEndTime</code>.</p>
                */
            TransformStartTime?: Date;
            /**
                * <p>Indicates when the transform job has been completed, or has stopped or failed. You are
                *       billed for the time interval between this time and the value of
                *         <code>TransformStartTime</code>.</p>
                */
            TransformEndTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the  labeling job that created the transform job.</p>
                */
            LabelingJobArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AutoML job that created the transform job.</p>
                */
            AutoMLJobArn?: string;
            /**
                * <p>The data structure used to specify the data to be used for inference in a batch
                *             transform job and to associate the data that is relevant to the prediction results in
                *             the output. The input filter provided allows you to exclude input data that is not
                *             needed for inference in a batch transform job. The output filter provided allows you to
                *             include input data relevant to interpreting the predictions in the output from the job.
                *             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
                *                 Results with their Corresponding Input Records</a>.</p>
                */
            DataProcessing?: DataProcessing;
            /**
                * <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
                *       you call the following APIs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a>CreateProcessingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTrainingJob</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a>CreateTransformJob</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExperimentConfig?: ExperimentConfig;
            /**
                * <p>A list of tags associated with the transform job.</p>
                */
            Tags?: Tag[];
    }
    export namespace TransformJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformJob) => any;
    }
    /**
        * <p>Detailed information about the source of a trial component. Either
        *         <code>ProcessingJob</code> or <code>TrainingJob</code> is returned.</p>
        */
    export interface TrialComponentSourceDetail {
            /**
                * <p>The Amazon Resource Name (ARN) of the source.</p>
                */
            SourceArn?: string;
            /**
                * <p>Information about a training job that's the source of a trial component.</p>
                */
            TrainingJob?: TrainingJob;
            /**
                * <p>Information about a processing job that's the source of a trial component.</p>
                */
            ProcessingJob?: ProcessingJob;
            /**
                * <p>Information about a transform job that's the source of a trial component.</p>
                */
            TransformJob?: TransformJob;
    }
    export namespace TrialComponentSourceDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponentSourceDetail) => any;
    }
    /**
        * <p>The properties of a trial component as returned by the <a>Search</a>
        *       API.</p>
        */
    export interface TrialComponent {
            /**
                * <p>The name of the trial component.</p>
                */
            TrialComponentName?: string;
            /**
                * <p>The name of the component as displayed. If <code>DisplayName</code> isn't specified,
                *         <code>TrialComponentName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the trial component.</p>
                */
            TrialComponentArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) and job type of the source of the component.</p>
                */
            Source?: TrialComponentSource;
            /**
                * <p>The status of the trial component.</p>
                */
            Status?: TrialComponentStatus;
            /**
                * <p>When the component started.</p>
                */
            StartTime?: Date;
            /**
                * <p>When the component ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>When the component was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Who created the trial component.</p>
                */
            CreatedBy?: UserContext;
            /**
                * <p>When the component was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>Information about the user who created or modified an experiment, trial, trial
                *       component, lineage group, or project.</p>
                */
            LastModifiedBy?: UserContext;
            /**
                * <p>The hyperparameters of the component.</p>
                */
            Parameters?: Record<string, TrialComponentParameterValue>;
            /**
                * <p>The input artifacts of the component.</p>
                */
            InputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>The output artifacts of the component.</p>
                */
            OutputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>The metrics for the component.</p>
                */
            Metrics?: TrialComponentMetricSummary[];
            /**
                * <p>Metadata properties of the tracking entity, trial, or trial component.</p>
                */
            MetadataProperties?: MetadataProperties;
            /**
                * <p>Details of the source of the component.</p>
                */
            SourceDetail?: TrialComponentSourceDetail;
            /**
                * <p>The Amazon Resource Name (ARN) of the lineage group resource.</p>
                */
            LineageGroupArn?: string;
            /**
                * <p>The list of tags that are associated with the component. You can use <a>Search</a> API to search on the tags.</p>
                */
            Tags?: Tag[];
            /**
                * <p>An array of the parents of the component. A parent is a trial the component is associated
                *       with and the experiment the trial is part of. A component might not have any parents.</p>
                */
            Parents?: Parent[];
    }
    export namespace TrialComponent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialComponent) => any;
    }
    /**
        * <p>A single resource returned as part of the <a>Search</a> API response.</p>
        */
    export interface SearchRecord {
            /**
                * <p>The properties of a training job.</p>
                */
            TrainingJob?: TrainingJob;
            /**
                * <p>The properties of an experiment.</p>
                */
            Experiment?: Experiment;
            /**
                * <p>The properties of a trial.</p>
                */
            Trial?: Trial;
            /**
                * <p>The properties of a trial component.</p>
                */
            TrialComponent?: TrialComponent;
            /**
                * <p>A hosted endpoint for real-time inference.</p>
                */
            Endpoint?: Endpoint;
            /**
                * <p>A versioned model that can be deployed for SageMaker inference.</p>
                */
            ModelPackage?: ModelPackage;
            /**
                * <p>A group of versioned models in the model registry.</p>
                */
            ModelPackageGroup?: ModelPackageGroup;
            /**
                * <p>A SageMaker Model Building Pipeline instance.</p>
                */
            Pipeline?: Pipeline;
            /**
                * <p>An execution of a pipeline.</p>
                */
            PipelineExecution?: PipelineExecution;
            /**
                * <p>Amazon SageMaker Feature Store stores features in a collection called Feature Group.
                *          A Feature Group can be visualized as a table which has rows,
                *          with a unique identifier for each row where each column in the table is a feature.
                *          In principle, a Feature Group is composed of features and values per features.</p>
                */
            FeatureGroup?: FeatureGroup;
            /**
                * <p>The properties of a project.</p>
                */
            Project?: Project;
            /**
                * <p>The feature metadata used to search through the features.</p>
                */
            FeatureMetadata?: FeatureMetadata;
    }
    export namespace SearchRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchRecord) => any;
    }
    export interface SearchResponse {
            /**
                * <p>A list of <code>SearchRecord</code> objects.</p>
                */
            Results?: SearchRecord[];
            /**
                * <p>If the result of the previous <code>Search</code> request was truncated, the response
                *       includes a NextToken. To retrieve the next set of results, use the token in the next
                *       request.</p>
                */
            NextToken?: string;
    }
    export namespace SearchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchResponse) => any;
    }
    export interface SendPipelineExecutionStepFailureRequest {
            /**
                * <p>The pipeline generated token from the Amazon SQS queue.</p>
                */
            CallbackToken: string | undefined;
            /**
                * <p>A message describing why the step failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          operation. An idempotent operation completes no more than one time.</p>
                */
            ClientRequestToken?: string;
    }
    export namespace SendPipelineExecutionStepFailureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendPipelineExecutionStepFailureRequest) => any;
    }
    export interface SendPipelineExecutionStepFailureResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
    }
    export namespace SendPipelineExecutionStepFailureResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendPipelineExecutionStepFailureResponse) => any;
    }
    export interface SendPipelineExecutionStepSuccessRequest {
            /**
                * <p>The pipeline generated token from the Amazon SQS queue.</p>
                */
            CallbackToken: string | undefined;
            /**
                * <p>A list of the output parameters of the callback step.</p>
                */
            OutputParameters?: OutputParameter[];
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          operation. An idempotent operation completes no more than one time.</p>
                */
            ClientRequestToken?: string;
    }
    export namespace SendPipelineExecutionStepSuccessRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendPipelineExecutionStepSuccessRequest) => any;
    }
    export interface SendPipelineExecutionStepSuccessResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
    }
    export namespace SendPipelineExecutionStepSuccessResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendPipelineExecutionStepSuccessResponse) => any;
    }
    export interface StartEdgeDeploymentStageRequest {
            /**
                * <p>The name of the edge deployment plan to start.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>The name of the stage to start.</p>
                */
            StageName: string | undefined;
    }
    export namespace StartEdgeDeploymentStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartEdgeDeploymentStageRequest) => any;
    }
    export interface StartMonitoringScheduleRequest {
            /**
                * <p>The name of the schedule to start.</p>
                */
            MonitoringScheduleName: string | undefined;
    }
    export namespace StartMonitoringScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMonitoringScheduleRequest) => any;
    }
    export interface StartNotebookInstanceInput {
            /**
                * <p>The name of the notebook instance to start.</p>
                */
            NotebookInstanceName: string | undefined;
    }
    export namespace StartNotebookInstanceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartNotebookInstanceInput) => any;
    }
    export interface StartPipelineExecutionRequest {
            /**
                * <p>The name of the pipeline.</p>
                */
            PipelineName: string | undefined;
            /**
                * <p>The display name of the pipeline execution.</p>
                */
            PipelineExecutionDisplayName?: string;
            /**
                * <p>Contains a list of pipeline parameters. This list can be empty. </p>
                */
            PipelineParameters?: Parameter[];
            /**
                * <p>The description of the pipeline execution.</p>
                */
            PipelineExecutionDescription?: string;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          operation. An idempotent operation completes no more than once.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>This configuration, if specified, overrides the parallelism configuration
                *             of the parent pipeline for this specific run.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
    }
    export namespace StartPipelineExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPipelineExecutionRequest) => any;
    }
    export interface StartPipelineExecutionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
    }
    export namespace StartPipelineExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPipelineExecutionResponse) => any;
    }
    export interface StopAutoMLJobRequest {
            /**
                * <p>The name of the object you are requesting.</p>
                */
            AutoMLJobName: string | undefined;
    }
    export namespace StopAutoMLJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAutoMLJobRequest) => any;
    }
    export interface StopCompilationJobRequest {
            /**
                * <p>The name of the model compilation job to stop.</p>
                */
            CompilationJobName: string | undefined;
    }
    export namespace StopCompilationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopCompilationJobRequest) => any;
    }
    export interface StopEdgeDeploymentStageRequest {
            /**
                * <p>The name of the edge deployment plan to stop.</p>
                */
            EdgeDeploymentPlanName: string | undefined;
            /**
                * <p>The name of the stage to stop.</p>
                */
            StageName: string | undefined;
    }
    export namespace StopEdgeDeploymentStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEdgeDeploymentStageRequest) => any;
    }
    export interface StopEdgePackagingJobRequest {
            /**
                * <p>The name of the edge packaging job.</p>
                */
            EdgePackagingJobName: string | undefined;
    }
    export namespace StopEdgePackagingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEdgePackagingJobRequest) => any;
    }
    export interface StopHyperParameterTuningJobRequest {
            /**
                * <p>The name of the tuning job to stop.</p>
                */
            HyperParameterTuningJobName: string | undefined;
    }
    export namespace StopHyperParameterTuningJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopHyperParameterTuningJobRequest) => any;
    }
    export interface StopInferenceRecommendationsJobRequest {
            /**
                * <p>The name of the job you want to stop.</p>
                */
            JobName: string | undefined;
    }
    export namespace StopInferenceRecommendationsJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopInferenceRecommendationsJobRequest) => any;
    }
    export interface StopLabelingJobRequest {
            /**
                * <p>The name of the labeling job to stop.</p>
                */
            LabelingJobName: string | undefined;
    }
    export namespace StopLabelingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopLabelingJobRequest) => any;
    }
    export interface StopMonitoringScheduleRequest {
            /**
                * <p>The name of the schedule to stop.</p>
                */
            MonitoringScheduleName: string | undefined;
    }
    export namespace StopMonitoringScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopMonitoringScheduleRequest) => any;
    }
    export interface StopNotebookInstanceInput {
            /**
                * <p>The name of the notebook instance to terminate.</p>
                */
            NotebookInstanceName: string | undefined;
    }
    export namespace StopNotebookInstanceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopNotebookInstanceInput) => any;
    }
    export interface StopPipelineExecutionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn: string | undefined;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          operation. An idempotent operation completes no more than once.</p>
                */
            ClientRequestToken?: string;
    }
    export namespace StopPipelineExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopPipelineExecutionRequest) => any;
    }
    export interface StopPipelineExecutionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
    }
    export namespace StopPipelineExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopPipelineExecutionResponse) => any;
    }
    export interface StopProcessingJobRequest {
            /**
                * <p>The name of the processing job to stop.</p>
                */
            ProcessingJobName: string | undefined;
    }
    export namespace StopProcessingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopProcessingJobRequest) => any;
    }
    export interface StopTrainingJobRequest {
            /**
                * <p>The name of the training job to stop.</p>
                */
            TrainingJobName: string | undefined;
    }
    export namespace StopTrainingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTrainingJobRequest) => any;
    }
    export interface StopTransformJobRequest {
            /**
                * <p>The name of the batch transform job to stop.</p>
                */
            TransformJobName: string | undefined;
    }
    export namespace StopTransformJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTransformJobRequest) => any;
    }
    export interface UpdateActionRequest {
            /**
                * <p>The name of the action to update.</p>
                */
            ActionName: string | undefined;
            /**
                * <p>The new description for the action.</p>
                */
            Description?: string;
            /**
                * <p>The new status for the action.</p>
                */
            Status?: ActionStatus | string;
            /**
                * <p>The new list of properties. Overwrites the current property list.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>A list of properties to remove.</p>
                */
            PropertiesToRemove?: string[];
    }
    export namespace UpdateActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateActionRequest) => any;
    }
    export interface UpdateActionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the action.</p>
                */
            ActionArn?: string;
    }
    export namespace UpdateActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateActionResponse) => any;
    }
    export interface UpdateAppImageConfigRequest {
            /**
                * <p>The name of the AppImageConfig to update.</p>
                */
            AppImageConfigName: string | undefined;
            /**
                * <p>The new KernelGateway app to run on the image.</p>
                */
            KernelGatewayImageConfig?: KernelGatewayImageConfig;
    }
    export namespace UpdateAppImageConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAppImageConfigRequest) => any;
    }
    export interface UpdateAppImageConfigResponse {
            /**
                * <p>The Amazon Resource Name (ARN) for the AppImageConfig.</p>
                */
            AppImageConfigArn?: string;
    }
    export namespace UpdateAppImageConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAppImageConfigResponse) => any;
    }
    export interface UpdateArtifactRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact to update.</p>
                */
            ArtifactArn: string | undefined;
            /**
                * <p>The new name for the artifact.</p>
                */
            ArtifactName?: string;
            /**
                * <p>The new list of properties. Overwrites the current property list.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>A list of properties to remove.</p>
                */
            PropertiesToRemove?: string[];
    }
    export namespace UpdateArtifactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateArtifactRequest) => any;
    }
    export interface UpdateArtifactResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the artifact.</p>
                */
            ArtifactArn?: string;
    }
    export namespace UpdateArtifactResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateArtifactResponse) => any;
    }
    export interface UpdateCodeRepositoryInput {
            /**
                * <p>The name of the Git repository to update.</p>
                */
            CodeRepositoryName: string | undefined;
            /**
                * <p>The configuration of the git repository, including the URL and the Amazon Resource
                *             Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to
                *             access the repository. The secret must have a staging label of <code>AWSCURRENT</code>
                *             and must be in the following format:</p>
                *         <p>
                *             <code>{"username": <i>UserName</i>, "password":
                *                     <i>Password</i>}</code>
                *         </p>
                */
            GitConfig?: GitConfigForUpdate;
    }
    export namespace UpdateCodeRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCodeRepositoryInput) => any;
    }
    export interface UpdateCodeRepositoryOutput {
            /**
                * <p>The ARN of the Git repository.</p>
                */
            CodeRepositoryArn: string | undefined;
    }
    export namespace UpdateCodeRepositoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCodeRepositoryOutput) => any;
    }
    export interface UpdateContextRequest {
            /**
                * <p>The name of the context to update.</p>
                */
            ContextName: string | undefined;
            /**
                * <p>The new description for the context.</p>
                */
            Description?: string;
            /**
                * <p>The new list of properties. Overwrites the current property list.</p>
                */
            Properties?: Record<string, string>;
            /**
                * <p>A list of properties to remove.</p>
                */
            PropertiesToRemove?: string[];
    }
    export namespace UpdateContextRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateContextRequest) => any;
    }
    export interface UpdateContextResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the context.</p>
                */
            ContextArn?: string;
    }
    export namespace UpdateContextResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateContextResponse) => any;
    }
    export interface UpdateDeviceFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the device.</p>
                */
            RoleArn?: string;
            /**
                * <p>Description of the fleet.</p>
                */
            Description?: string;
            /**
                * <p>Output configuration  for storing sample data collected by the fleet.</p>
                */
            OutputConfig: EdgeOutputConfig | undefined;
            /**
                * <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation.
                *       The name of the role alias generated will match this pattern:
                *       "SageMakerEdge-{DeviceFleetName}".</p>
                *          <p>For example, if your device fleet is called "demo-fleet", the name of
                *       the role alias will be "SageMakerEdge-demo-fleet".</p>
                */
            EnableIotRoleAlias?: boolean;
    }
    export namespace UpdateDeviceFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceFleetRequest) => any;
    }
    export interface UpdateDevicesRequest {
            /**
                * <p>The name of the fleet the devices belong to.</p>
                */
            DeviceFleetName: string | undefined;
            /**
                * <p>List of devices to register with Edge Manager agent.</p>
                */
            Devices: Device[] | undefined;
    }
    export namespace UpdateDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDevicesRequest) => any;
    }
    export interface UpdateDomainRequest {
            /**
                * <p>The ID of the domain to be updated.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>A collection of settings.</p>
                */
            DefaultUserSettings?: UserSettings;
            /**
                * <p>A collection of <code>DomainSettings</code> configuration values to update.</p>
                */
            DomainSettingsForUpdate?: DomainSettingsForUpdate;
    }
    export namespace UpdateDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainRequest) => any;
    }
    export interface UpdateDomainResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the domain.</p>
                */
            DomainArn?: string;
    }
    export namespace UpdateDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainResponse) => any;
    }
    export enum VariantPropertyType {
            DataCaptureConfig = "DataCaptureConfig",
            DesiredInstanceCount = "DesiredInstanceCount",
            DesiredWeight = "DesiredWeight"
    }
    /**
        * <p>Specifies a production variant property type for an Endpoint.</p>
        *         <p>If you are updating an endpoint with the <a>UpdateEndpointInput$RetainAllVariantProperties</a> option set to
        *                 <code>true</code>, the <code>VariantProperty</code> objects listed in <a>UpdateEndpointInput$ExcludeRetainedVariantProperties</a> override the
        *             existing variant properties of the endpoint.</p>
        */
    export interface VariantProperty {
            /**
                * <p>The type of variant property. The supported values are:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DesiredInstanceCount</code>: Overrides the existing variant instance
                *                     counts using the <a>ProductionVariant$InitialInstanceCount</a> values
                *                     in the <a>CreateEndpointConfigInput$ProductionVariants</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DesiredWeight</code>: Overrides the existing variant weights using the
                *                         <a>ProductionVariant$InitialVariantWeight</a> values in the <a>CreateEndpointConfigInput$ProductionVariants</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DataCaptureConfig</code>: (Not currently supported.)</p>
                *             </li>
                *          </ul>
                */
            VariantPropertyType: VariantPropertyType | string | undefined;
    }
    export namespace VariantProperty {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VariantProperty) => any;
    }
    export interface UpdateEndpointInput {
            /**
                * <p>The name of the endpoint whose configuration you want to update.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The name of the new endpoint configuration.</p>
                */
            EndpointConfigName: string | undefined;
            /**
                * <p>When updating endpoint resources, enables or disables the retention of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html">variant properties</a>, such as the instance count or the variant weight. To
                *             retain the variant properties of an endpoint when updating it, set
                *                 <code>RetainAllVariantProperties</code> to <code>true</code>. To use the variant
                *             properties specified in a new <code>EndpointConfig</code> call when updating an
                *             endpoint, set <code>RetainAllVariantProperties</code> to <code>false</code>. The default
                *             is <code>false</code>.</p>
                */
            RetainAllVariantProperties?: boolean;
            /**
                * <p>When you are updating endpoint resources with <a>UpdateEndpointInput$RetainAllVariantProperties</a>, whose value is set to
                *                 <code>true</code>, <code>ExcludeRetainedVariantProperties</code> specifies the list
                *             of type <a>VariantProperty</a> to override with the values provided by
                *                 <code>EndpointConfig</code>. If you don't specify a value for
                *                 <code>ExcludeAllVariantProperties</code>, no variant properties are overridden.
                *         </p>
                */
            ExcludeRetainedVariantProperties?: VariantProperty[];
            /**
                * <p>The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.</p>
                */
            DeploymentConfig?: DeploymentConfig;
            /**
                * <p>Specifies whether to reuse the last deployment configuration. The default value is
                *             false (the configuration is not reused).</p>
                */
            RetainDeploymentConfig?: boolean;
    }
    export namespace UpdateEndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEndpointInput) => any;
    }
    export interface UpdateEndpointOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the endpoint.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace UpdateEndpointOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEndpointOutput) => any;
    }
    export interface UpdateEndpointWeightsAndCapacitiesInput {
            /**
                * <p>The name of an existing SageMaker endpoint.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>An object that provides new capacity and weight values for a variant.</p>
                */
            DesiredWeightsAndCapacities: DesiredWeightAndCapacity[] | undefined;
    }
    export namespace UpdateEndpointWeightsAndCapacitiesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEndpointWeightsAndCapacitiesInput) => any;
    }
    export interface UpdateEndpointWeightsAndCapacitiesOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the updated endpoint.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace UpdateEndpointWeightsAndCapacitiesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEndpointWeightsAndCapacitiesOutput) => any;
    }
    export interface UpdateExperimentRequest {
            /**
                * <p>The name of the experiment to update.</p>
                */
            ExperimentName: string | undefined;
            /**
                * <p>The name of the experiment as displayed. The name doesn't need to be unique. If
                *         <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The description of the experiment.</p>
                */
            Description?: string;
    }
    export namespace UpdateExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentRequest) => any;
    }
    export interface UpdateExperimentResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the experiment.</p>
                */
            ExperimentArn?: string;
    }
    export namespace UpdateExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentResponse) => any;
    }
    export interface UpdateFeatureGroupRequest {
            /**
                * <p>The name of the feature group that you're updating.</p>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>A list of the features that you're adding to the feature group.</p>
                */
            FeatureAdditions?: FeatureDefinition[];
    }
    export namespace UpdateFeatureGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFeatureGroupRequest) => any;
    }
    export interface UpdateFeatureGroupResponse {
            /**
                * <p>The Amazon Resource Number (ARN) of the feature group that you're updating.</p>
                */
            FeatureGroupArn: string | undefined;
    }
    export namespace UpdateFeatureGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFeatureGroupResponse) => any;
    }
    export interface UpdateFeatureMetadataRequest {
            /**
                * <p>The name of the feature group containing the feature that you're updating.</p>
                */
            FeatureGroupName: string | undefined;
            /**
                * <p>The name of the feature that you're updating.</p>
                */
            FeatureName: string | undefined;
            /**
                * <p>A description that you can write to better describe the feature.</p>
                */
            Description?: string;
            /**
                * <p>A list of key-value pairs that you can add to better describe the feature.</p>
                */
            ParameterAdditions?: FeatureParameter[];
            /**
                * <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
                */
            ParameterRemovals?: string[];
    }
    export namespace UpdateFeatureMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFeatureMetadataRequest) => any;
    }
    export interface UpdateImageRequest {
            /**
                * <p>A list of properties to delete. Only the <code>Description</code> and
                *         <code>DisplayName</code> properties can be deleted.</p>
                */
            DeleteProperties?: string[];
            /**
                * <p>The new description for the image.</p>
                */
            Description?: string;
            /**
                * <p>The new display name for the image.</p>
                */
            DisplayName?: string;
            /**
                * <p>The name of the image to update.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>The new Amazon Resource Name (ARN) for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
                */
            RoleArn?: string;
    }
    export namespace UpdateImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateImageRequest) => any;
    }
    export interface UpdateImageResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the image.</p>
                */
            ImageArn?: string;
    }
    export namespace UpdateImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateImageResponse) => any;
    }
    export interface UpdateModelPackageInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the model package.</p>
                */
            ModelPackageArn: string | undefined;
            /**
                * <p>The approval status of the model.</p>
                */
            ModelApprovalStatus?: ModelApprovalStatus | string;
            /**
                * <p>A description for the approval status of the model.</p>
                */
            ApprovalDescription?: string;
            /**
                * <p>The metadata properties associated with the model package versions.</p>
                */
            CustomerMetadataProperties?: Record<string, string>;
            /**
                * <p>The metadata properties associated with the model package versions to remove.</p>
                */
            CustomerMetadataPropertiesToRemove?: string[];
            /**
                * <p>An array of additional Inference Specification objects to be added to the
                *     existing array additional Inference Specification. Total number of additional
                *     Inference Specifications can not exceed 15. Each additional Inference Specification
                *     specifies artifacts based on this model package that can be used on inference endpoints.
                *     Generally used with SageMaker Neo to store the compiled artifacts.</p>
                */
            AdditionalInferenceSpecificationsToAdd?: AdditionalInferenceSpecificationDefinition[];
    }
    export namespace UpdateModelPackageInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelPackageInput) => any;
    }
    export interface UpdateModelPackageOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the model.</p>
                */
            ModelPackageArn: string | undefined;
    }
    export namespace UpdateModelPackageOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelPackageOutput) => any;
    }
    export interface UpdateMonitoringScheduleRequest {
            /**
                * <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within
                *          an Amazon Web Services account.</p>
                */
            MonitoringScheduleName: string | undefined;
            /**
                * <p>The configuration object that specifies the monitoring schedule and defines the
                *          monitoring job.</p>
                */
            MonitoringScheduleConfig: MonitoringScheduleConfig | undefined;
    }
    export namespace UpdateMonitoringScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMonitoringScheduleRequest) => any;
    }
    export interface UpdateMonitoringScheduleResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
                */
            MonitoringScheduleArn: string | undefined;
    }
    export namespace UpdateMonitoringScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMonitoringScheduleResponse) => any;
    }
    export interface UpdateNotebookInstanceInput {
            /**
                * <p>The name of the notebook instance to update.</p>
                */
            NotebookInstanceName: string | undefined;
            /**
                * <p>The Amazon ML compute instance type.</p>
                */
            InstanceType?: _InstanceType | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access the
                *             notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p>
                *         <note>
                *             <p>To be able to pass this role to SageMaker, the caller of this API must have the
                *                     <code>iam:PassRole</code> permission.</p>
                *         </note>
                */
            RoleArn?: string;
            /**
                * <p>The name of a lifecycle configuration to associate with the notebook instance. For
                *             information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional)
                *                 Customize a Notebook Instance</a>.</p>
                */
            LifecycleConfigName?: string;
            /**
                * <p>Set to <code>true</code> to remove the notebook instance lifecycle configuration
                *             currently associated with the notebook instance. This operation is idempotent. If you
                *             specify a lifecycle configuration that is not associated with the notebook instance when
                *             you call this method, it does not throw an error.</p>
                */
            DisassociateLifecycleConfig?: boolean;
            /**
                * <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
                *             default value is 5 GB. ML storage volumes are encrypted, so SageMaker can't determine the
                *             amount of available free space on the volume. Because of this, you can increase the
                *             volume size when you update a notebook instance, but you can't decrease the volume size.
                *             If you want to decrease the size of the ML storage volume in use, create a new notebook
                *             instance with the desired size.</p>
                */
            VolumeSizeInGB?: number;
            /**
                * <p>The Git repository to associate with the notebook instance as its default code
                *             repository. This can be either the name of a Git repository stored as a resource in your
                *             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. When you open a notebook instance, it opens in the directory that
                *             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker
                *                 Notebook Instances</a>.</p>
                */
            DefaultCodeRepository?: string;
            /**
                * <p>An array of up to three Git repositories to associate with the notebook instance.
                *             These can be either the names of Git repositories stored as resources in your account,
                *             or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
                *             other Git repository. These repositories are cloned at the same level as the default
                *             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
                *                 Repositories with SageMaker Notebook Instances</a>.</p>
                */
            AdditionalCodeRepositories?: string[];
            /**
                * <p>A list of the Elastic Inference (EI) instance types to associate with this notebook
                *             instance. Currently only one EI instance type can be associated with a notebook
                *             instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon
                *                 SageMaker</a>.</p>
                */
            AcceleratorTypes?: (NotebookInstanceAcceleratorType | string)[];
            /**
                * <p>A list of the Elastic Inference (EI) instance types to remove from this notebook
                *             instance. This operation is idempotent. If you specify an accelerator type that is not
                *             associated with the notebook instance when you call this method, it does not throw an
                *             error.</p>
                */
            DisassociateAcceleratorTypes?: boolean;
            /**
                * <p>The name or URL of the default Git repository to remove from this notebook instance.
                *             This operation is idempotent. If you specify a Git repository that is not associated
                *             with the notebook instance when you call this method, it does not throw an error.</p>
                */
            DisassociateDefaultCodeRepository?: boolean;
            /**
                * <p>A list of names or URLs of the default Git repositories to remove from this notebook
                *             instance. This operation is idempotent. If you specify a Git repository that is not
                *             associated with the notebook instance when you call this method, it does not throw an
                *             error.</p>
                */
            DisassociateAdditionalCodeRepositories?: boolean;
            /**
                * <p>Whether root access is enabled or disabled for users of the notebook instance. The
                *             default value is <code>Enabled</code>.</p>
                *         <note>
                *             <p>If you set this to <code>Disabled</code>, users don't have root access on the
                *                 notebook instance, but lifecycle configuration scripts still run with root
                *                 permissions.</p>
                *         </note>
                */
            RootAccess?: RootAccess | string;
            /**
                * <p>Information on the IMDS configuration of the notebook instance</p>
                */
            InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
    }
    export namespace UpdateNotebookInstanceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotebookInstanceInput) => any;
    }
    export interface UpdateNotebookInstanceOutput {
    }
    export namespace UpdateNotebookInstanceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotebookInstanceOutput) => any;
    }
    export interface UpdateNotebookInstanceLifecycleConfigInput {
            /**
                * <p>The name of the lifecycle configuration.</p>
                */
            NotebookInstanceLifecycleConfigName: string | undefined;
            /**
                * <p>The shell script that runs only once, when you create a notebook instance. The shell
                *             script must be a base64-encoded string.</p>
                */
            OnCreate?: NotebookInstanceLifecycleHook[];
            /**
                * <p>The shell script that runs every time you start a notebook instance, including when
                *             you create the notebook instance. The shell script must be a base64-encoded
                *             string.</p>
                */
            OnStart?: NotebookInstanceLifecycleHook[];
    }
    export namespace UpdateNotebookInstanceLifecycleConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotebookInstanceLifecycleConfigInput) => any;
    }
    export interface UpdateNotebookInstanceLifecycleConfigOutput {
    }
    export namespace UpdateNotebookInstanceLifecycleConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotebookInstanceLifecycleConfigOutput) => any;
    }
    export interface UpdatePipelineRequest {
            /**
                * <p>The name of the pipeline to update.</p>
                */
            PipelineName: string | undefined;
            /**
                * <p>The display name of the pipeline.</p>
                */
            PipelineDisplayName?: string;
            /**
                * <p>The JSON pipeline definition.</p>
                */
            PipelineDefinition?: string;
            /**
                * <p>The location of the pipeline definition stored in Amazon S3. If specified,
                *             SageMaker will retrieve the pipeline definition from this location.</p>
                */
            PipelineDefinitionS3Location?: PipelineDefinitionS3Location;
            /**
                * <p>The description of the pipeline.</p>
                */
            PipelineDescription?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that the pipeline uses to execute.</p>
                */
            RoleArn?: string;
            /**
                * <p>If specified, it applies to all executions of this pipeline by default.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
    }
    export namespace UpdatePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePipelineRequest) => any;
    }
    export interface UpdatePipelineResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the updated pipeline.</p>
                */
            PipelineArn?: string;
    }
    export namespace UpdatePipelineResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePipelineResponse) => any;
    }
    export interface UpdatePipelineExecutionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
                */
            PipelineExecutionArn: string | undefined;
            /**
                * <p>The description of the pipeline execution.</p>
                */
            PipelineExecutionDescription?: string;
            /**
                * <p>The display name of the pipeline execution.</p>
                */
            PipelineExecutionDisplayName?: string;
            /**
                * <p>This configuration, if specified, overrides the parallelism configuration
                *             of the parent pipeline for this specific run.</p>
                */
            ParallelismConfiguration?: ParallelismConfiguration;
    }
    export namespace UpdatePipelineExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePipelineExecutionRequest) => any;
    }
    export interface UpdatePipelineExecutionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the updated pipeline execution.</p>
                */
            PipelineExecutionArn?: string;
    }
    export namespace UpdatePipelineExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePipelineExecutionResponse) => any;
    }
    /**
        * <p>Details that you specify to provision a service catalog product.
        *             For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
        *         </p>
        */
    export interface ServiceCatalogProvisioningUpdateDetails {
            /**
                * <p>The ID of the provisioning artifact.</p>
                */
            ProvisioningArtifactId?: string;
            /**
                * <p>A list of key value pairs that you specify when you provision a product.</p>
                */
            ProvisioningParameters?: ProvisioningParameter[];
    }
    export namespace ServiceCatalogProvisioningUpdateDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceCatalogProvisioningUpdateDetails) => any;
    }
    export interface UpdateProjectInput {
            /**
                * <p>The name of the project.</p>
                */
            ProjectName: string | undefined;
            /**
                * <p>The description for the project.</p>
                */
            ProjectDescription?: string;
            /**
                * <p>The product ID and provisioning artifact ID to provision a service catalog.
                *             The provisioning artifact ID will default to the latest provisioning artifact
                *             ID of the product, if you don't provide the provisioning artifact ID. For more
                *             information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
                *         </p>
                */
            ServiceCatalogProvisioningUpdateDetails?: ServiceCatalogProvisioningUpdateDetails;
            /**
                * <p>An array of key-value pairs. You can use tags to categorize your
                *             Amazon Web Services resources in different ways, for example, by purpose, owner, or
                *             environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace UpdateProjectInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectInput) => any;
    }
    export interface UpdateProjectOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ProjectArn: string | undefined;
    }
    export namespace UpdateProjectOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectOutput) => any;
    }
    export interface UpdateTrainingJobRequest {
            /**
                * <p>The name of a training job to update the Debugger profiling configuration.</p>
                */
            TrainingJobName: string | undefined;
            /**
                * <p>Configuration information for Debugger system monitoring, framework profiling, and
                *             storage paths.</p>
                */
            ProfilerConfig?: ProfilerConfigForUpdate;
            /**
                * <p>Configuration information for Debugger rules for profiling system and framework
                *             metrics.</p>
                */
            ProfilerRuleConfigurations?: ProfilerRuleConfiguration[];
    }
    export namespace UpdateTrainingJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrainingJobRequest) => any;
    }
    export interface UpdateTrainingJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the training job.</p>
                */
            TrainingJobArn: string | undefined;
    }
    export namespace UpdateTrainingJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrainingJobResponse) => any;
    }
    export interface UpdateTrialRequest {
            /**
                * <p>The name of the trial to update.</p>
                */
            TrialName: string | undefined;
            /**
                * <p>The name of the trial as displayed. The name doesn't need to be unique. If
                *         <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
                */
            DisplayName?: string;
    }
    export namespace UpdateTrialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrialRequest) => any;
    }
    export interface UpdateTrialResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the trial.</p>
                */
            TrialArn?: string;
    }
    export namespace UpdateTrialResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrialResponse) => any;
    }
    export interface UpdateTrialComponentRequest {
            /**
                * <p>The name of the component to update.</p>
                */
            TrialComponentName: string | undefined;
            /**
                * <p>The name of the component as displayed. The name doesn't need to be unique. If
                *         <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is
                *       displayed.</p>
                */
            DisplayName?: string;
            /**
                * <p>The new status of the component.</p>
                */
            Status?: TrialComponentStatus;
            /**
                * <p>When the component started.</p>
                */
            StartTime?: Date;
            /**
                * <p>When the component ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>Replaces all of the component's hyperparameters with the specified hyperparameters.</p>
                */
            Parameters?: Record<string, TrialComponentParameterValue>;
            /**
                * <p>The hyperparameters to remove from the component.</p>
                */
            ParametersToRemove?: string[];
            /**
                * <p>Replaces all of the component's input artifacts with the specified artifacts.</p>
                */
            InputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>The input artifacts to remove from the component.</p>
                */
            InputArtifactsToRemove?: string[];
            /**
                * <p>Replaces all of the component's output artifacts with the specified artifacts.</p>
                */
            OutputArtifacts?: Record<string, TrialComponentArtifact>;
            /**
                * <p>The output artifacts to remove from the component.</p>
                */
            OutputArtifactsToRemove?: string[];
    }
    export namespace UpdateTrialComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrialComponentRequest) => any;
    }
    export interface UpdateTrialComponentResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the trial component.</p>
                */
            TrialComponentArn?: string;
    }
    export namespace UpdateTrialComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrialComponentResponse) => any;
    }
    export interface UpdateUserProfileRequest {
            /**
                * <p>The domain ID.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The user profile name.</p>
                */
            UserProfileName: string | undefined;
            /**
                * <p>A collection of settings.</p>
                */
            UserSettings?: UserSettings;
    }
    export namespace UpdateUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserProfileRequest) => any;
    }
    export interface UpdateUserProfileResponse {
            /**
                * <p>The user profile Amazon Resource Name (ARN).</p>
                */
            UserProfileArn?: string;
    }
    export namespace UpdateUserProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserProfileResponse) => any;
    }
    export interface UpdateWorkforceRequest {
            /**
                * <p>The name of the private workforce that you want to update. You can find your workforce
                *         name by using the  operation.</p>
                */
            WorkforceName: string | undefined;
            /**
                * <p>A list of one to ten worker IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>) that can be used to
                *             access tasks assigned to this workforce.</p>
                *         <p>Maximum: Ten CIDR values</p>
                */
            SourceIpConfig?: SourceIpConfig;
            /**
                * <p>Use this parameter to update your OIDC Identity Provider (IdP)
                *       configuration for a workforce made using your own IdP.</p>
                */
            OidcConfig?: OidcConfig;
            /**
                * <p>Use this parameter to update your VPC configuration for a workforce.</p>
                */
            WorkforceVpcConfig?: WorkforceVpcConfigRequest;
    }
    export namespace UpdateWorkforceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkforceRequest) => any;
    }
    export interface UpdateWorkforceResponse {
            /**
                * <p>A single private workforce. You can create one private work force in each Amazon Web Services Region. By default,
                *             any workforce-related API operation used in a specific region will apply to the
                *             workforce created in that region. To learn how to create a private workforce, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create a Private Workforce</a>.</p>
                */
            Workforce: Workforce | undefined;
    }
    export namespace UpdateWorkforceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkforceResponse) => any;
    }
    export interface UpdateWorkteamRequest {
            /**
                * <p>The name of the work team to update.</p>
                */
            WorkteamName: string | undefined;
            /**
                * <p>A list of <code>MemberDefinition</code> objects that contains objects that identify
                *             the workers that make up the work team. </p>
                *         <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP).
                *             For private workforces created using Amazon Cognito use
                *             <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity
                *             provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input
                *             for both of these parameters in a single request.</p>
                *         <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito
                *                 <i>user groups</i> within the user pool used to create a workforce. All of the
                *                 <code>CognitoMemberDefinition</code> objects that make up the member definition must
                *             have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon
                *             Cognito user group to an existing worker pool, see <a href="">Adding groups to a User
                *                 Pool</a>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User
                *                 Pools</a>.</p>
                *         <p>For workforces created using your own OIDC IdP, specify the user groups that you want
                *             to include in your private work team in <code>OidcMemberDefinition</code> by listing
                *             those groups in <code>Groups</code>. Be aware that user groups that are already in the
                *             work team must also be listed in <code>Groups</code> when you make this request to
                *             remain on the work team. If you do not include these user groups, they will no longer be
                *             associated with the work team you update. </p>
                */
            MemberDefinitions?: MemberDefinition[];
            /**
                * <p>An updated description for the work team.</p>
                */
            Description?: string;
            /**
                * <p>Configures SNS topic notifications for available or expiring work items</p>
                */
            NotificationConfiguration?: NotificationConfiguration;
    }
    export namespace UpdateWorkteamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkteamRequest) => any;
    }
    export interface UpdateWorkteamResponse {
            /**
                * <p>A <code>Workteam</code> object that describes the updated work team.</p>
                */
            Workteam: Workteam | undefined;
    }
    export namespace UpdateWorkteamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkteamResponse) => any;
    }
    /**
        * <p>A multi-expression that searches for the specified resource or resources in a search. All resource
        *       objects that satisfy the expression's condition are included in the search results. You must specify at
        *       least one subexpression, filter, or nested filter. A <code>SearchExpression</code> can contain up to
        *       twenty elements.</p>
        *          <p>A <code>SearchExpression</code> contains the following components:</p>
        *          <ul>
        *             <li>
        *                <p>A list of <code>Filter</code> objects. Each filter defines a simple Boolean
        *           expression comprised of a resource property name, Boolean operator, and
        *           value.</p>
        *             </li>
        *             <li>
        *                <p>A list of <code>NestedFilter</code> objects. Each nested filter defines a list
        *           of Boolean expressions using a list of resource properties. A nested filter is
        *           satisfied if a single object in the list satisfies all Boolean
        *           expressions.</p>
        *             </li>
        *             <li>
        *                <p>A list of <code>SearchExpression</code> objects. A search expression object
        *           can be nested in a list of search expression objects.</p>
        *             </li>
        *             <li>
        *                <p>A Boolean operator: <code>And</code> or <code>Or</code>.</p>
        *             </li>
        *          </ul>
        */
    export interface SearchExpression {
            /**
                * <p>A list of filter objects.</p>
                */
            Filters?: Filter[];
            /**
                * <p>A list of nested filter objects.</p>
                */
            NestedFilters?: NestedFilters[];
            /**
                * <p>A list of search expression objects.</p>
                */
            SubExpressions?: SearchExpression[];
            /**
                * <p>A Boolean operator used to evaluate the search expression. If you want every
                *       conditional statement in all lists to be satisfied for the entire search expression to
                *       be true, specify <code>And</code>. If only a single conditional statement needs to be
                *       true for the entire search expression to be true, specify <code>Or</code>. The default
                *       value is <code>And</code>.</p>
                */
            Operator?: BooleanOperator | string;
    }
    export namespace SearchExpression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchExpression) => any;
    }
    export interface SearchRequest {
            /**
                * <p>The name of the Amazon SageMaker resource to search for.</p>
                */
            Resource: ResourceType | string | undefined;
            /**
                * <p>A Boolean conditional statement. Resources must satisfy this condition to be
                *       included in search results. You must provide at least one subexpression, filter, or
                *       nested filter. The maximum number of recursive <code>SubExpressions</code>,
                *       <code>NestedFilters</code>, and <code>Filters</code> that can be included in a
                *       <code>SearchExpression</code> object is 50.</p>
                */
            SearchExpression?: SearchExpression;
            /**
                * <p>The name of the resource property used to sort the <code>SearchResults</code>. The
                *       default is <code>LastModifiedTime</code>.</p>
                */
            SortBy?: string;
            /**
                * <p>How <code>SearchResults</code> are ordered. Valid values are <code>Ascending</code> or
                *       <code>Descending</code>. The default is <code>Descending</code>.</p>
                */
            SortOrder?: SearchSortOrder | string;
            /**
                * <p>If more than <code>MaxResults</code> resources match the specified
                *       <code>SearchExpression</code>, the response includes a
                *       <code>NextToken</code>. The <code>NextToken</code> can be passed to the next
                *       <code>SearchRequest</code> to continue retrieving results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace SearchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchRequest) => any;
    }
}

declare module '@aws-sdk/client-sagemaker/node_modules/@aws-sdk/client-sagemaker/dist-types/models/SageMakerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SageMaker service.
        */
    export class SageMakerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

