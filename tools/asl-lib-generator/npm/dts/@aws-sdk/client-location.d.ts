// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-location' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateTrackerConsumerCommandInput, AssociateTrackerConsumerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/AssociateTrackerConsumerCommand";
    import { BatchDeleteDevicePositionHistoryCommandInput, BatchDeleteDevicePositionHistoryCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchDeleteDevicePositionHistoryCommand";
    import { BatchDeleteGeofenceCommandInput, BatchDeleteGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchDeleteGeofenceCommand";
    import { BatchEvaluateGeofencesCommandInput, BatchEvaluateGeofencesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchEvaluateGeofencesCommand";
    import { BatchGetDevicePositionCommandInput, BatchGetDevicePositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchGetDevicePositionCommand";
    import { BatchPutGeofenceCommandInput, BatchPutGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchPutGeofenceCommand";
    import { BatchUpdateDevicePositionCommandInput, BatchUpdateDevicePositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchUpdateDevicePositionCommand";
    import { CalculateRouteCommandInput, CalculateRouteCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CalculateRouteCommand";
    import { CalculateRouteMatrixCommandInput, CalculateRouteMatrixCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CalculateRouteMatrixCommand";
    import { CreateGeofenceCollectionCommandInput, CreateGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateGeofenceCollectionCommand";
    import { CreateMapCommandInput, CreateMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateMapCommand";
    import { CreatePlaceIndexCommandInput, CreatePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreatePlaceIndexCommand";
    import { CreateRouteCalculatorCommandInput, CreateRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateRouteCalculatorCommand";
    import { CreateTrackerCommandInput, CreateTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateTrackerCommand";
    import { DeleteGeofenceCollectionCommandInput, DeleteGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteGeofenceCollectionCommand";
    import { DeleteMapCommandInput, DeleteMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteMapCommand";
    import { DeletePlaceIndexCommandInput, DeletePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeletePlaceIndexCommand";
    import { DeleteRouteCalculatorCommandInput, DeleteRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteRouteCalculatorCommand";
    import { DeleteTrackerCommandInput, DeleteTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteTrackerCommand";
    import { DescribeGeofenceCollectionCommandInput, DescribeGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeGeofenceCollectionCommand";
    import { DescribeMapCommandInput, DescribeMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeMapCommand";
    import { DescribePlaceIndexCommandInput, DescribePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribePlaceIndexCommand";
    import { DescribeRouteCalculatorCommandInput, DescribeRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeRouteCalculatorCommand";
    import { DescribeTrackerCommandInput, DescribeTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeTrackerCommand";
    import { DisassociateTrackerConsumerCommandInput, DisassociateTrackerConsumerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DisassociateTrackerConsumerCommand";
    import { GetDevicePositionCommandInput, GetDevicePositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetDevicePositionCommand";
    import { GetDevicePositionHistoryCommandInput, GetDevicePositionHistoryCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetDevicePositionHistoryCommand";
    import { GetGeofenceCommandInput, GetGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetGeofenceCommand";
    import { GetMapGlyphsCommandInput, GetMapGlyphsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapGlyphsCommand";
    import { GetMapSpritesCommandInput, GetMapSpritesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapSpritesCommand";
    import { GetMapStyleDescriptorCommandInput, GetMapStyleDescriptorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapStyleDescriptorCommand";
    import { GetMapTileCommandInput, GetMapTileCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapTileCommand";
    import { ListDevicePositionsCommandInput, ListDevicePositionsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListDevicePositionsCommand";
    import { ListGeofenceCollectionsCommandInput, ListGeofenceCollectionsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListGeofenceCollectionsCommand";
    import { ListGeofencesCommandInput, ListGeofencesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListGeofencesCommand";
    import { ListMapsCommandInput, ListMapsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListMapsCommand";
    import { ListPlaceIndexesCommandInput, ListPlaceIndexesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListPlaceIndexesCommand";
    import { ListRouteCalculatorsCommandInput, ListRouteCalculatorsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListRouteCalculatorsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTagsForResourceCommand";
    import { ListTrackerConsumersCommandInput, ListTrackerConsumersCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTrackerConsumersCommand";
    import { ListTrackersCommandInput, ListTrackersCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTrackersCommand";
    import { PutGeofenceCommandInput, PutGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/PutGeofenceCommand";
    import { SearchPlaceIndexForPositionCommandInput, SearchPlaceIndexForPositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForPositionCommand";
    import { SearchPlaceIndexForSuggestionsCommandInput, SearchPlaceIndexForSuggestionsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForSuggestionsCommand";
    import { SearchPlaceIndexForTextCommandInput, SearchPlaceIndexForTextCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForTextCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UntagResourceCommand";
    import { UpdateGeofenceCollectionCommandInput, UpdateGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateGeofenceCollectionCommand";
    import { UpdateMapCommandInput, UpdateMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateMapCommand";
    import { UpdatePlaceIndexCommandInput, UpdatePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdatePlaceIndexCommand";
    import { UpdateRouteCalculatorCommandInput, UpdateRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateRouteCalculatorCommand";
    import { UpdateTrackerCommandInput, UpdateTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateTrackerCommand";
    import { LocationClient } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    /**
        * Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing
        */
    export class Location extends LocationClient {
            /**
                * <p>Creates an association between a geofence collection and a tracker resource. This
                *             allows the tracker resource to communicate location data to the linked geofence
                *             collection. </p>
                *         <p>You can associate up to five geofence collections to each tracker resource.</p>
                *         <note>
                *             <p>Currently not supported — Cross-account configurations, such as creating associations between a tracker resource in one account and a geofence collection in another account.</p>
                *         </note>
                */
            associateTrackerConsumer(args: AssociateTrackerConsumerCommandInput, options?: __HttpHandlerOptions): Promise<AssociateTrackerConsumerCommandOutput>;
            associateTrackerConsumer(args: AssociateTrackerConsumerCommandInput, cb: (err: any, data?: AssociateTrackerConsumerCommandOutput) => void): void;
            associateTrackerConsumer(args: AssociateTrackerConsumerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateTrackerConsumerCommandOutput) => void): void;
            /**
                * <p>Deletes the position history of one or more devices from a tracker resource.</p>
                */
            batchDeleteDevicePositionHistory(args: BatchDeleteDevicePositionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteDevicePositionHistoryCommandOutput>;
            batchDeleteDevicePositionHistory(args: BatchDeleteDevicePositionHistoryCommandInput, cb: (err: any, data?: BatchDeleteDevicePositionHistoryCommandOutput) => void): void;
            batchDeleteDevicePositionHistory(args: BatchDeleteDevicePositionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteDevicePositionHistoryCommandOutput) => void): void;
            /**
                * <p>Deletes a batch of geofences from a geofence collection.</p>
                *         <note>
                *             <p>This operation deletes the resource permanently.</p>
                *         </note>
                */
            batchDeleteGeofence(args: BatchDeleteGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteGeofenceCommandOutput>;
            batchDeleteGeofence(args: BatchDeleteGeofenceCommandInput, cb: (err: any, data?: BatchDeleteGeofenceCommandOutput) => void): void;
            batchDeleteGeofence(args: BatchDeleteGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteGeofenceCommandOutput) => void): void;
            /**
                * <p>Evaluates device positions against the geofence geometries from a given geofence
                *             collection.</p>
                *         <p>This operation always returns an empty response because geofences are asynchronously
                *             evaluated. The evaluation determines if the device has entered or exited a geofenced
                *             area, and then publishes one of the following events to Amazon EventBridge:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ENTER</code> if Amazon Location determines that the tracked device has entered
                *                     a geofenced area.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>EXIT</code> if Amazon Location determines that the tracked device has exited a
                *                     geofenced area.</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>The last geofence that a device was observed within is tracked for 30 days after
                *                 the most recent device position update.</p>
                *         </note>
                *         <note>
                *             <p>Geofence evaluation uses the given device position. It does not account for the
                *                 optional <code>Accuracy</code> of a <code>DevicePositionUpdate</code>.</p>
                *         </note>
                *         <note>
                *             <p>The <code>DeviceID</code> is used as a string to represent the device. You do not
                *                 need to have a <code>Tracker</code> associated with the <code>DeviceID</code>.</p>
                *         </note>
                */
            batchEvaluateGeofences(args: BatchEvaluateGeofencesCommandInput, options?: __HttpHandlerOptions): Promise<BatchEvaluateGeofencesCommandOutput>;
            batchEvaluateGeofences(args: BatchEvaluateGeofencesCommandInput, cb: (err: any, data?: BatchEvaluateGeofencesCommandOutput) => void): void;
            batchEvaluateGeofences(args: BatchEvaluateGeofencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchEvaluateGeofencesCommandOutput) => void): void;
            /**
                * <p>Lists the latest device positions for requested devices.</p>
                */
            batchGetDevicePosition(args: BatchGetDevicePositionCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetDevicePositionCommandOutput>;
            batchGetDevicePosition(args: BatchGetDevicePositionCommandInput, cb: (err: any, data?: BatchGetDevicePositionCommandOutput) => void): void;
            batchGetDevicePosition(args: BatchGetDevicePositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetDevicePositionCommandOutput) => void): void;
            /**
                * <p>A batch request for storing geofence geometries into a given geofence collection, or
                *             updates the geometry of an existing geofence if a geofence ID is included in the request.</p>
                */
            batchPutGeofence(args: BatchPutGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<BatchPutGeofenceCommandOutput>;
            batchPutGeofence(args: BatchPutGeofenceCommandInput, cb: (err: any, data?: BatchPutGeofenceCommandOutput) => void): void;
            batchPutGeofence(args: BatchPutGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchPutGeofenceCommandOutput) => void): void;
            /**
                * <p>Uploads position update data for one or more devices to a tracker resource. Amazon Location
                *            uses the data when it reports the last known device position and position history. Amazon Location retains location data for 30
                *            days.</p>
                *          <note>
                *            <p>Position updates are handled based on the <code>PositionFiltering</code> property of the tracker.
                *                When <code>PositionFiltering</code> is set to <code>TimeBased</code>, updates are evaluated against linked geofence collections,
                *                and location data is stored at a maximum of one position per 30 second interval. If your update frequency is more often than
                *                every 30 seconds, only one update per 30 seconds is stored for each unique device ID.</p>
                *             <p>When <code>PositionFiltering</code> is set to <code>DistanceBased</code> filtering, location data is stored and evaluated against linked geofence
                *                 collections only if the device has moved more than 30 m (98.4 ft).</p>
                *             <p>When <code>PositionFiltering</code> is set to <code>AccuracyBased</code> filtering,
                *                 location data is stored and evaluated against linked geofence collections only if the
                *                 device has moved more than the measured accuracy. For example, if two consecutive
                *                 updates from a device have a horizontal accuracy of 5 m and 10 m, the second update
                *                 is neither stored or evaluated if the device has moved less than 15 m. If
                *                 <code>PositionFiltering</code> is set to <code>AccuracyBased</code> filtering, Amazon Location
                *                 uses the default value <code>{ "Horizontal": 0}</code> when accuracy is not provided on
                *                 a <code>DevicePositionUpdate</code>.</p>
                *          </note>
                */
            batchUpdateDevicePosition(args: BatchUpdateDevicePositionCommandInput, options?: __HttpHandlerOptions): Promise<BatchUpdateDevicePositionCommandOutput>;
            batchUpdateDevicePosition(args: BatchUpdateDevicePositionCommandInput, cb: (err: any, data?: BatchUpdateDevicePositionCommandOutput) => void): void;
            batchUpdateDevicePosition(args: BatchUpdateDevicePositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchUpdateDevicePositionCommandOutput) => void): void;
            /**
                * <p>
                *             <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html">Calculates a route</a> given the following required parameters:
                *                 <code>DeparturePosition</code> and <code>DestinationPosition</code>. Requires that
                *             you first <a href="https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html">create a
                *                 route calculator resource</a>.</p>
                *         <p>By default, a request that doesn't specify a departure time uses the best time of day
                *             to travel with the best traffic conditions when calculating the route.</p>
                *         <p>Additional options include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html">Specifying a
                *                         departure time</a> using either <code>DepartureTime</code> or
                *                         <code>DepartNow</code>. This calculates a route based on predictive traffic
                *                     data at the given time. </p>
                *                 <note>
                *                     <p>You can't specify both <code>DepartureTime</code> and
                *                             <code>DepartNow</code> in a single request. Specifying both parameters
                *                         returns a validation error.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html">Specifying a travel
                *                         mode</a> using TravelMode sets the transportation mode used to calculate
                *                     the routes. This also lets you specify additional route preferences in
                *                         <code>CarModeOptions</code> if traveling by <code>Car</code>, or
                *                         <code>TruckModeOptions</code> if traveling by <code>Truck</code>.</p>
                *             </li>
                *          </ul>
                */
            calculateRoute(args: CalculateRouteCommandInput, options?: __HttpHandlerOptions): Promise<CalculateRouteCommandOutput>;
            calculateRoute(args: CalculateRouteCommandInput, cb: (err: any, data?: CalculateRouteCommandOutput) => void): void;
            calculateRoute(args: CalculateRouteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CalculateRouteCommandOutput) => void): void;
            /**
                * <p>
                *             <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html"> Calculates a route
                *                 matrix</a> given the following required parameters:
                *                 <code>DeparturePositions</code> and <code>DestinationPositions</code>.
                *                 <code>CalculateRouteMatrix</code> calculates routes and returns the travel time and
                *             travel distance from each departure position to each destination position in the
                *             request. For example, given departure positions A and B, and destination positions X and
                *             Y, <code>CalculateRouteMatrix</code> will return time and distance for routes from A to
                *             X, A to Y, B to X, and B to Y (in that order). The number of results returned (and
                *             routes calculated) will be the number of <code>DeparturePositions</code> times the
                *             number of <code>DestinationPositions</code>.</p>
                *         <note>
                *             <p>Your account is charged for each route calculated, not the number of
                *                 requests.</p>
                *         </note>
                *         <p>Requires that you first <a href="https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html">create a
                *                 route calculator resource</a>.</p>
                *         <p>By default, a request that doesn't specify a departure time uses the best time of day
                *             to travel with the best traffic conditions when calculating routes.</p>
                *         <p>Additional options include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html"> Specifying a
                *                         departure time</a> using either <code>DepartureTime</code> or
                *                         <code>DepartNow</code>. This calculates routes based on predictive traffic
                *                     data at the given time. </p>
                *                 <note>
                *                     <p>You can't specify both <code>DepartureTime</code> and
                *                             <code>DepartNow</code> in a single request. Specifying both parameters
                *                         returns a validation error.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html">Specifying a travel
                *                         mode</a> using TravelMode sets the transportation mode used to calculate
                *                     the routes. This also lets you specify additional route preferences in
                *                         <code>CarModeOptions</code> if traveling by <code>Car</code>, or
                *                         <code>TruckModeOptions</code> if traveling by <code>Truck</code>.</p>
                *             </li>
                *          </ul>
                */
            calculateRouteMatrix(args: CalculateRouteMatrixCommandInput, options?: __HttpHandlerOptions): Promise<CalculateRouteMatrixCommandOutput>;
            calculateRouteMatrix(args: CalculateRouteMatrixCommandInput, cb: (err: any, data?: CalculateRouteMatrixCommandOutput) => void): void;
            calculateRouteMatrix(args: CalculateRouteMatrixCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CalculateRouteMatrixCommandOutput) => void): void;
            /**
                * <p>Creates a geofence collection, which manages and stores geofences.</p>
                */
            createGeofenceCollection(args: CreateGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateGeofenceCollectionCommandOutput>;
            createGeofenceCollection(args: CreateGeofenceCollectionCommandInput, cb: (err: any, data?: CreateGeofenceCollectionCommandOutput) => void): void;
            createGeofenceCollection(args: CreateGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGeofenceCollectionCommandOutput) => void): void;
            /**
                * <p>Creates a map resource in your AWS account, which provides map tiles of different
                *             styles sourced from global location data providers.</p>
                *         <note>
                *             <p>If your application is tracking or routing assets you use in your business, such
                *                 as delivery vehicles or employees, you may only use HERE as your geolocation
                *                 provider. See section 82 of the <a href="http://aws.amazon.com/service-terms">AWS
                *                     service terms</a> for more details.</p>
                *         </note>
                */
            createMap(args: CreateMapCommandInput, options?: __HttpHandlerOptions): Promise<CreateMapCommandOutput>;
            createMap(args: CreateMapCommandInput, cb: (err: any, data?: CreateMapCommandOutput) => void): void;
            createMap(args: CreateMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMapCommandOutput) => void): void;
            /**
                * <p>Creates a place index resource in your AWS account. Use a place index resource to
                *             geocode addresses and other text queries by using the
                *                 <code>SearchPlaceIndexForText</code> operation, and reverse geocode coordinates by
                *             using the <code>SearchPlaceIndexForPosition</code> operation, and enable autosuggestions
                *             by using the <code>SearchPlaceIndexForSuggestions</code> operation.</p>
                *         <note>
                *             <p>If your application is tracking or routing assets you use in your business, such
                *                 as delivery vehicles or employees, you may only use HERE as your geolocation
                *                 provider. See section 82 of the <a href="http://aws.amazon.com/service-terms">AWS
                *                     service terms</a> for more details.</p>
                *         </note>
                */
            createPlaceIndex(args: CreatePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<CreatePlaceIndexCommandOutput>;
            createPlaceIndex(args: CreatePlaceIndexCommandInput, cb: (err: any, data?: CreatePlaceIndexCommandOutput) => void): void;
            createPlaceIndex(args: CreatePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePlaceIndexCommandOutput) => void): void;
            /**
                * <p>Creates a route calculator resource in your AWS account.</p>
                *         <p>You can send requests to a route calculator resource to estimate travel time,
                *             distance, and get directions. A route calculator sources traffic and road network data
                *             from your chosen data provider.</p>
                *         <note>
                *             <p>If your application is tracking or routing assets you use in your business, such
                *                 as delivery vehicles or employees, you may only use HERE as your geolocation
                *                 provider. See section 82 of the <a href="http://aws.amazon.com/service-terms">AWS
                *                     service terms</a> for more details.</p>
                *         </note>
                */
            createRouteCalculator(args: CreateRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<CreateRouteCalculatorCommandOutput>;
            createRouteCalculator(args: CreateRouteCalculatorCommandInput, cb: (err: any, data?: CreateRouteCalculatorCommandOutput) => void): void;
            createRouteCalculator(args: CreateRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRouteCalculatorCommandOutput) => void): void;
            /**
                * <p>Creates a tracker resource in your AWS account, which lets you retrieve current and
                *             historical location of devices.</p>
                */
            createTracker(args: CreateTrackerCommandInput, options?: __HttpHandlerOptions): Promise<CreateTrackerCommandOutput>;
            createTracker(args: CreateTrackerCommandInput, cb: (err: any, data?: CreateTrackerCommandOutput) => void): void;
            createTracker(args: CreateTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTrackerCommandOutput) => void): void;
            /**
                * <p>Deletes a geofence collection from your AWS account.</p>
                *         <note>
                *             <p>This operation deletes the resource permanently. If the geofence collection is the
                *                 target of a tracker resource, the devices will no longer be monitored.</p>
                *         </note>
                */
            deleteGeofenceCollection(args: DeleteGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGeofenceCollectionCommandOutput>;
            deleteGeofenceCollection(args: DeleteGeofenceCollectionCommandInput, cb: (err: any, data?: DeleteGeofenceCollectionCommandOutput) => void): void;
            deleteGeofenceCollection(args: DeleteGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGeofenceCollectionCommandOutput) => void): void;
            /**
                * <p>Deletes a map resource from your AWS account.</p>
                *         <note>
                *             <p>This operation deletes the resource permanently. If the map is being used in an application,
                *                 the map may not render.</p>
                *          </note>
                */
            deleteMap(args: DeleteMapCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMapCommandOutput>;
            deleteMap(args: DeleteMapCommandInput, cb: (err: any, data?: DeleteMapCommandOutput) => void): void;
            deleteMap(args: DeleteMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMapCommandOutput) => void): void;
            /**
                * <p>Deletes a place index resource from your AWS account.</p>
                *         <note>
                *             <p>This operation deletes the resource permanently.</p>
                *         </note>
                */
            deletePlaceIndex(args: DeletePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<DeletePlaceIndexCommandOutput>;
            deletePlaceIndex(args: DeletePlaceIndexCommandInput, cb: (err: any, data?: DeletePlaceIndexCommandOutput) => void): void;
            deletePlaceIndex(args: DeletePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePlaceIndexCommandOutput) => void): void;
            /**
                * <p>Deletes a route calculator resource from your AWS account.</p>
                *         <note>
                *             <p>This operation deletes the resource permanently.</p>
                *         </note>
                */
            deleteRouteCalculator(args: DeleteRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRouteCalculatorCommandOutput>;
            deleteRouteCalculator(args: DeleteRouteCalculatorCommandInput, cb: (err: any, data?: DeleteRouteCalculatorCommandOutput) => void): void;
            deleteRouteCalculator(args: DeleteRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRouteCalculatorCommandOutput) => void): void;
            /**
                * <p>Deletes a tracker resource from your AWS account.</p>
                *          <note>
                *             <p>This operation deletes the resource permanently. If the tracker resource is in use, you may
                *                 encounter an error. Make sure that the target resource isn't a dependency for your
                *                 applications.</p>
                *          </note>
                */
            deleteTracker(args: DeleteTrackerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTrackerCommandOutput>;
            deleteTracker(args: DeleteTrackerCommandInput, cb: (err: any, data?: DeleteTrackerCommandOutput) => void): void;
            deleteTracker(args: DeleteTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTrackerCommandOutput) => void): void;
            /**
                * <p>Retrieves the geofence collection details.</p>
                */
            describeGeofenceCollection(args: DescribeGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGeofenceCollectionCommandOutput>;
            describeGeofenceCollection(args: DescribeGeofenceCollectionCommandInput, cb: (err: any, data?: DescribeGeofenceCollectionCommandOutput) => void): void;
            describeGeofenceCollection(args: DescribeGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGeofenceCollectionCommandOutput) => void): void;
            /**
                * <p>Retrieves the map resource details.</p>
                */
            describeMap(args: DescribeMapCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMapCommandOutput>;
            describeMap(args: DescribeMapCommandInput, cb: (err: any, data?: DescribeMapCommandOutput) => void): void;
            describeMap(args: DescribeMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMapCommandOutput) => void): void;
            /**
                * <p>Retrieves the place index resource details.</p>
                */
            describePlaceIndex(args: DescribePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<DescribePlaceIndexCommandOutput>;
            describePlaceIndex(args: DescribePlaceIndexCommandInput, cb: (err: any, data?: DescribePlaceIndexCommandOutput) => void): void;
            describePlaceIndex(args: DescribePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePlaceIndexCommandOutput) => void): void;
            /**
                * <p>Retrieves the route calculator resource details.</p>
                */
            describeRouteCalculator(args: DescribeRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRouteCalculatorCommandOutput>;
            describeRouteCalculator(args: DescribeRouteCalculatorCommandInput, cb: (err: any, data?: DescribeRouteCalculatorCommandOutput) => void): void;
            describeRouteCalculator(args: DescribeRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRouteCalculatorCommandOutput) => void): void;
            /**
                * <p>Retrieves the tracker resource details.</p>
                */
            describeTracker(args: DescribeTrackerCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTrackerCommandOutput>;
            describeTracker(args: DescribeTrackerCommandInput, cb: (err: any, data?: DescribeTrackerCommandOutput) => void): void;
            describeTracker(args: DescribeTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTrackerCommandOutput) => void): void;
            /**
                * <p>Removes the association between a tracker resource and a geofence collection.</p>
                *         <note>
                *             <p>Once you unlink a tracker resource from a geofence collection, the tracker
                *                 positions will no longer be automatically evaluated against geofences.</p>
                *         </note>
                */
            disassociateTrackerConsumer(args: DisassociateTrackerConsumerCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateTrackerConsumerCommandOutput>;
            disassociateTrackerConsumer(args: DisassociateTrackerConsumerCommandInput, cb: (err: any, data?: DisassociateTrackerConsumerCommandOutput) => void): void;
            disassociateTrackerConsumer(args: DisassociateTrackerConsumerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateTrackerConsumerCommandOutput) => void): void;
            /**
                * <p>Retrieves a device's most recent position according to its sample time.</p>
                *          <note>
                *             <p>Device positions are deleted after 30 days.</p>
                *          </note>
                */
            getDevicePosition(args: GetDevicePositionCommandInput, options?: __HttpHandlerOptions): Promise<GetDevicePositionCommandOutput>;
            getDevicePosition(args: GetDevicePositionCommandInput, cb: (err: any, data?: GetDevicePositionCommandOutput) => void): void;
            getDevicePosition(args: GetDevicePositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevicePositionCommandOutput) => void): void;
            /**
                * <p>Retrieves the device position history from a tracker resource within a specified range
                *             of time.</p>
                *          <note>
                *            <p>Device positions are deleted after 30 days.</p>
                *          </note>
                */
            getDevicePositionHistory(args: GetDevicePositionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetDevicePositionHistoryCommandOutput>;
            getDevicePositionHistory(args: GetDevicePositionHistoryCommandInput, cb: (err: any, data?: GetDevicePositionHistoryCommandOutput) => void): void;
            getDevicePositionHistory(args: GetDevicePositionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevicePositionHistoryCommandOutput) => void): void;
            /**
                * <p>Retrieves the geofence details from a geofence collection.</p>
                */
            getGeofence(args: GetGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<GetGeofenceCommandOutput>;
            getGeofence(args: GetGeofenceCommandInput, cb: (err: any, data?: GetGeofenceCommandOutput) => void): void;
            getGeofence(args: GetGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGeofenceCommandOutput) => void): void;
            /**
                * <p>Retrieves glyphs used to display labels on a map.</p>
                */
            getMapGlyphs(args: GetMapGlyphsCommandInput, options?: __HttpHandlerOptions): Promise<GetMapGlyphsCommandOutput>;
            getMapGlyphs(args: GetMapGlyphsCommandInput, cb: (err: any, data?: GetMapGlyphsCommandOutput) => void): void;
            getMapGlyphs(args: GetMapGlyphsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapGlyphsCommandOutput) => void): void;
            /**
                * <p>Retrieves the sprite sheet corresponding to a map resource. The sprite sheet is a PNG
                *             image paired with a JSON document describing the offsets of individual icons that will
                *             be displayed on a rendered map.</p>
                */
            getMapSprites(args: GetMapSpritesCommandInput, options?: __HttpHandlerOptions): Promise<GetMapSpritesCommandOutput>;
            getMapSprites(args: GetMapSpritesCommandInput, cb: (err: any, data?: GetMapSpritesCommandOutput) => void): void;
            getMapSprites(args: GetMapSpritesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapSpritesCommandOutput) => void): void;
            /**
                * <p>Retrieves the map style descriptor from a map resource. </p>
                *         <p>The style descriptor contains speciﬁcations on how features render on a map. For
                *             example, what data to display, what order to display the data in, and the style for the
                *             data. Style descriptors follow the Mapbox Style Specification.</p>
                */
            getMapStyleDescriptor(args: GetMapStyleDescriptorCommandInput, options?: __HttpHandlerOptions): Promise<GetMapStyleDescriptorCommandOutput>;
            getMapStyleDescriptor(args: GetMapStyleDescriptorCommandInput, cb: (err: any, data?: GetMapStyleDescriptorCommandOutput) => void): void;
            getMapStyleDescriptor(args: GetMapStyleDescriptorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapStyleDescriptorCommandOutput) => void): void;
            /**
                * <p>Retrieves a vector data tile from the map resource. Map tiles are used by clients to
                *             render a map. they're addressed using a grid arrangement with an X coordinate, Y
                *             coordinate, and Z (zoom) level. </p>
                *         <p>The origin (0, 0) is the top left of the map. Increasing the zoom level by 1 doubles
                *             both the X and Y dimensions, so a tile containing data for the entire world at (0/0/0)
                *             will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).</p>
                */
            getMapTile(args: GetMapTileCommandInput, options?: __HttpHandlerOptions): Promise<GetMapTileCommandOutput>;
            getMapTile(args: GetMapTileCommandInput, cb: (err: any, data?: GetMapTileCommandOutput) => void): void;
            getMapTile(args: GetMapTileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapTileCommandOutput) => void): void;
            /**
                * <p>A batch request to retrieve all device positions.</p>
                */
            listDevicePositions(args: ListDevicePositionsCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicePositionsCommandOutput>;
            listDevicePositions(args: ListDevicePositionsCommandInput, cb: (err: any, data?: ListDevicePositionsCommandOutput) => void): void;
            listDevicePositions(args: ListDevicePositionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicePositionsCommandOutput) => void): void;
            /**
                * <p>Lists geofence collections in your AWS account.</p>
                */
            listGeofenceCollections(args: ListGeofenceCollectionsCommandInput, options?: __HttpHandlerOptions): Promise<ListGeofenceCollectionsCommandOutput>;
            listGeofenceCollections(args: ListGeofenceCollectionsCommandInput, cb: (err: any, data?: ListGeofenceCollectionsCommandOutput) => void): void;
            listGeofenceCollections(args: ListGeofenceCollectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGeofenceCollectionsCommandOutput) => void): void;
            /**
                * <p>Lists geofences stored in a given geofence collection.</p>
                */
            listGeofences(args: ListGeofencesCommandInput, options?: __HttpHandlerOptions): Promise<ListGeofencesCommandOutput>;
            listGeofences(args: ListGeofencesCommandInput, cb: (err: any, data?: ListGeofencesCommandOutput) => void): void;
            listGeofences(args: ListGeofencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGeofencesCommandOutput) => void): void;
            /**
                * <p>Lists map resources in your AWS account.</p>
                */
            listMaps(args: ListMapsCommandInput, options?: __HttpHandlerOptions): Promise<ListMapsCommandOutput>;
            listMaps(args: ListMapsCommandInput, cb: (err: any, data?: ListMapsCommandOutput) => void): void;
            listMaps(args: ListMapsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMapsCommandOutput) => void): void;
            /**
                * <p>Lists place index resources in your AWS account.</p>
                */
            listPlaceIndexes(args: ListPlaceIndexesCommandInput, options?: __HttpHandlerOptions): Promise<ListPlaceIndexesCommandOutput>;
            listPlaceIndexes(args: ListPlaceIndexesCommandInput, cb: (err: any, data?: ListPlaceIndexesCommandOutput) => void): void;
            listPlaceIndexes(args: ListPlaceIndexesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPlaceIndexesCommandOutput) => void): void;
            /**
                * <p>Lists route calculator resources in your AWS account.</p>
                */
            listRouteCalculators(args: ListRouteCalculatorsCommandInput, options?: __HttpHandlerOptions): Promise<ListRouteCalculatorsCommandOutput>;
            listRouteCalculators(args: ListRouteCalculatorsCommandInput, cb: (err: any, data?: ListRouteCalculatorsCommandOutput) => void): void;
            listRouteCalculators(args: ListRouteCalculatorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRouteCalculatorsCommandOutput) => void): void;
            /**
                * <p>Returns a list of tags that are applied to the specified Amazon Location resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists geofence collections currently associated to the given tracker resource.</p>
                */
            listTrackerConsumers(args: ListTrackerConsumersCommandInput, options?: __HttpHandlerOptions): Promise<ListTrackerConsumersCommandOutput>;
            listTrackerConsumers(args: ListTrackerConsumersCommandInput, cb: (err: any, data?: ListTrackerConsumersCommandOutput) => void): void;
            listTrackerConsumers(args: ListTrackerConsumersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrackerConsumersCommandOutput) => void): void;
            /**
                * <p>Lists tracker resources in your AWS account.</p>
                */
            listTrackers(args: ListTrackersCommandInput, options?: __HttpHandlerOptions): Promise<ListTrackersCommandOutput>;
            listTrackers(args: ListTrackersCommandInput, cb: (err: any, data?: ListTrackersCommandOutput) => void): void;
            listTrackers(args: ListTrackersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrackersCommandOutput) => void): void;
            /**
                * <p>Stores a geofence geometry in a given geofence collection, or updates the geometry of
                *             an existing geofence if a geofence ID is included in the request. </p>
                */
            putGeofence(args: PutGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<PutGeofenceCommandOutput>;
            putGeofence(args: PutGeofenceCommandInput, cb: (err: any, data?: PutGeofenceCommandOutput) => void): void;
            putGeofence(args: PutGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutGeofenceCommandOutput) => void): void;
            /**
                * <p>Reverse geocodes a given coordinate and returns a legible address. Allows you to
                *             search for Places or points of interest near a given position.</p>
                */
            searchPlaceIndexForPosition(args: SearchPlaceIndexForPositionCommandInput, options?: __HttpHandlerOptions): Promise<SearchPlaceIndexForPositionCommandOutput>;
            searchPlaceIndexForPosition(args: SearchPlaceIndexForPositionCommandInput, cb: (err: any, data?: SearchPlaceIndexForPositionCommandOutput) => void): void;
            searchPlaceIndexForPosition(args: SearchPlaceIndexForPositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchPlaceIndexForPositionCommandOutput) => void): void;
            /**
                * <p>Generates suggestions for addresses and points of interest based on partial or
                *             misspelled free-form text. This operation is also known as autocomplete, autosuggest, or
                *             fuzzy matching.</p>
                *         <p>Optional parameters let you narrow your search results by bounding box or country, or
                *             bias your search toward a specific position on the globe.</p>
                *         <note>
                *             <p>You can search for suggested place names near a specified position by using
                *                     <code>BiasPosition</code>, or filter results within a bounding box by using
                *                     <code>FilterBBox</code>. These parameters are mutually exclusive; using both
                *                     <code>BiasPosition</code> and <code>FilterBBox</code> in the same command
                *                 returns an error.</p>
                *         </note>
                */
            searchPlaceIndexForSuggestions(args: SearchPlaceIndexForSuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<SearchPlaceIndexForSuggestionsCommandOutput>;
            searchPlaceIndexForSuggestions(args: SearchPlaceIndexForSuggestionsCommandInput, cb: (err: any, data?: SearchPlaceIndexForSuggestionsCommandOutput) => void): void;
            searchPlaceIndexForSuggestions(args: SearchPlaceIndexForSuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchPlaceIndexForSuggestionsCommandOutput) => void): void;
            /**
                * <p>Geocodes free-form text, such as an address, name, city, or region to allow you to
                *             search for Places or points of interest. </p>
                *         <p>Optional parameters let you narrow your search results by bounding box or country, or
                *             bias your search toward a specific position on the globe.</p>
                *         <note>
                *             <p>You can search for places near a given position using <code>BiasPosition</code>,
                *                 or filter results within a bounding box using <code>FilterBBox</code>. Providing
                *                 both parameters simultaneously returns an error.</p>
                *         </note>
                *         <p>Search results are returned in order of highest to lowest relevance.</p>
                */
            searchPlaceIndexForText(args: SearchPlaceIndexForTextCommandInput, options?: __HttpHandlerOptions): Promise<SearchPlaceIndexForTextCommandOutput>;
            searchPlaceIndexForText(args: SearchPlaceIndexForTextCommandInput, cb: (err: any, data?: SearchPlaceIndexForTextCommandOutput) => void): void;
            searchPlaceIndexForText(args: SearchPlaceIndexForTextCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchPlaceIndexForTextCommandOutput) => void): void;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the specified Amazon
                *             Location Service resource.</p>
                *
                *         <p>Tags can help you organize and categorize your resources.
                *             You can also use them to scope user permissions, by granting a user
                *             permission to access or change only resources with certain tag values.</p>
                *
                *         <p>You can use the <code>TagResource</code> operation with an Amazon Location Service
                *             resource that already has tags. If you specify a new tag key for the resource, this tag
                *             is appended to the tags already associated with the resource. If you specify a tag key
                *             that's already associated with the resource, the new tag value that you specify replaces
                *             the previous value for that tag. </p>
                *
                *         <p>You can associate up to 50 tags with a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from the specified Amazon Location resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the specified properties of a given geofence collection.</p>
                */
            updateGeofenceCollection(args: UpdateGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGeofenceCollectionCommandOutput>;
            updateGeofenceCollection(args: UpdateGeofenceCollectionCommandInput, cb: (err: any, data?: UpdateGeofenceCollectionCommandOutput) => void): void;
            updateGeofenceCollection(args: UpdateGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGeofenceCollectionCommandOutput) => void): void;
            /**
                * <p>Updates the specified properties of a given map resource.</p>
                */
            updateMap(args: UpdateMapCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMapCommandOutput>;
            updateMap(args: UpdateMapCommandInput, cb: (err: any, data?: UpdateMapCommandOutput) => void): void;
            updateMap(args: UpdateMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMapCommandOutput) => void): void;
            /**
                * <p>Updates the specified properties of a given place index resource.</p>
                */
            updatePlaceIndex(args: UpdatePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePlaceIndexCommandOutput>;
            updatePlaceIndex(args: UpdatePlaceIndexCommandInput, cb: (err: any, data?: UpdatePlaceIndexCommandOutput) => void): void;
            updatePlaceIndex(args: UpdatePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePlaceIndexCommandOutput) => void): void;
            /**
                * <p>Updates the specified properties for a given route calculator resource.</p>
                */
            updateRouteCalculator(args: UpdateRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRouteCalculatorCommandOutput>;
            updateRouteCalculator(args: UpdateRouteCalculatorCommandInput, cb: (err: any, data?: UpdateRouteCalculatorCommandOutput) => void): void;
            updateRouteCalculator(args: UpdateRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRouteCalculatorCommandOutput) => void): void;
            /**
                * <p>Updates the specified properties of a given tracker resource.</p>
                */
            updateTracker(args: UpdateTrackerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTrackerCommandOutput>;
            updateTracker(args: UpdateTrackerCommandInput, cb: (err: any, data?: UpdateTrackerCommandOutput) => void): void;
            updateTracker(args: UpdateTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTrackerCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/AssociateTrackerConsumerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { AssociateTrackerConsumerRequest, AssociateTrackerConsumerResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface AssociateTrackerConsumerCommandInput extends AssociateTrackerConsumerRequest {
    }
    export interface AssociateTrackerConsumerCommandOutput extends AssociateTrackerConsumerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an association between a geofence collection and a tracker resource. This
        *             allows the tracker resource to communicate location data to the linked geofence
        *             collection. </p>
        *         <p>You can associate up to five geofence collections to each tracker resource.</p>
        *         <note>
        *             <p>Currently not supported — Cross-account configurations, such as creating associations between a tracker resource in one account and a geofence collection in another account.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, AssociateTrackerConsumerCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, AssociateTrackerConsumerCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new AssociateTrackerConsumerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateTrackerConsumerCommandInput} for command's `input` shape.
        * @see {@link AssociateTrackerConsumerCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class AssociateTrackerConsumerCommand extends $Command<AssociateTrackerConsumerCommandInput, AssociateTrackerConsumerCommandOutput, LocationClientResolvedConfig> {
            readonly input: AssociateTrackerConsumerCommandInput;
            constructor(input: AssociateTrackerConsumerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateTrackerConsumerCommandInput, AssociateTrackerConsumerCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchDeleteDevicePositionHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { BatchDeleteDevicePositionHistoryRequest, BatchDeleteDevicePositionHistoryResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface BatchDeleteDevicePositionHistoryCommandInput extends BatchDeleteDevicePositionHistoryRequest {
    }
    export interface BatchDeleteDevicePositionHistoryCommandOutput extends BatchDeleteDevicePositionHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the position history of one or more devices from a tracker resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, BatchDeleteDevicePositionHistoryCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, BatchDeleteDevicePositionHistoryCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new BatchDeleteDevicePositionHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteDevicePositionHistoryCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteDevicePositionHistoryCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class BatchDeleteDevicePositionHistoryCommand extends $Command<BatchDeleteDevicePositionHistoryCommandInput, BatchDeleteDevicePositionHistoryCommandOutput, LocationClientResolvedConfig> {
            readonly input: BatchDeleteDevicePositionHistoryCommandInput;
            constructor(input: BatchDeleteDevicePositionHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteDevicePositionHistoryCommandInput, BatchDeleteDevicePositionHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchDeleteGeofenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { BatchDeleteGeofenceRequest, BatchDeleteGeofenceResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface BatchDeleteGeofenceCommandInput extends BatchDeleteGeofenceRequest {
    }
    export interface BatchDeleteGeofenceCommandOutput extends BatchDeleteGeofenceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a batch of geofences from a geofence collection.</p>
        *         <note>
        *             <p>This operation deletes the resource permanently.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, BatchDeleteGeofenceCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, BatchDeleteGeofenceCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new BatchDeleteGeofenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteGeofenceCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteGeofenceCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class BatchDeleteGeofenceCommand extends $Command<BatchDeleteGeofenceCommandInput, BatchDeleteGeofenceCommandOutput, LocationClientResolvedConfig> {
            readonly input: BatchDeleteGeofenceCommandInput;
            constructor(input: BatchDeleteGeofenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteGeofenceCommandInput, BatchDeleteGeofenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchEvaluateGeofencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { BatchEvaluateGeofencesRequest, BatchEvaluateGeofencesResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface BatchEvaluateGeofencesCommandInput extends BatchEvaluateGeofencesRequest {
    }
    export interface BatchEvaluateGeofencesCommandOutput extends BatchEvaluateGeofencesResponse, __MetadataBearer {
    }
    /**
        * <p>Evaluates device positions against the geofence geometries from a given geofence
        *             collection.</p>
        *         <p>This operation always returns an empty response because geofences are asynchronously
        *             evaluated. The evaluation determines if the device has entered or exited a geofenced
        *             area, and then publishes one of the following events to Amazon EventBridge:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>ENTER</code> if Amazon Location determines that the tracked device has entered
        *                     a geofenced area.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>EXIT</code> if Amazon Location determines that the tracked device has exited a
        *                     geofenced area.</p>
        *             </li>
        *          </ul>
        *         <note>
        *             <p>The last geofence that a device was observed within is tracked for 30 days after
        *                 the most recent device position update.</p>
        *         </note>
        *         <note>
        *             <p>Geofence evaluation uses the given device position. It does not account for the
        *                 optional <code>Accuracy</code> of a <code>DevicePositionUpdate</code>.</p>
        *         </note>
        *         <note>
        *             <p>The <code>DeviceID</code> is used as a string to represent the device. You do not
        *                 need to have a <code>Tracker</code> associated with the <code>DeviceID</code>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, BatchEvaluateGeofencesCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, BatchEvaluateGeofencesCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new BatchEvaluateGeofencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchEvaluateGeofencesCommandInput} for command's `input` shape.
        * @see {@link BatchEvaluateGeofencesCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class BatchEvaluateGeofencesCommand extends $Command<BatchEvaluateGeofencesCommandInput, BatchEvaluateGeofencesCommandOutput, LocationClientResolvedConfig> {
            readonly input: BatchEvaluateGeofencesCommandInput;
            constructor(input: BatchEvaluateGeofencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchEvaluateGeofencesCommandInput, BatchEvaluateGeofencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchGetDevicePositionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { BatchGetDevicePositionRequest, BatchGetDevicePositionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface BatchGetDevicePositionCommandInput extends BatchGetDevicePositionRequest {
    }
    export interface BatchGetDevicePositionCommandOutput extends BatchGetDevicePositionResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the latest device positions for requested devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, BatchGetDevicePositionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, BatchGetDevicePositionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new BatchGetDevicePositionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetDevicePositionCommandInput} for command's `input` shape.
        * @see {@link BatchGetDevicePositionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class BatchGetDevicePositionCommand extends $Command<BatchGetDevicePositionCommandInput, BatchGetDevicePositionCommandOutput, LocationClientResolvedConfig> {
            readonly input: BatchGetDevicePositionCommandInput;
            constructor(input: BatchGetDevicePositionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetDevicePositionCommandInput, BatchGetDevicePositionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchPutGeofenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { BatchPutGeofenceRequest, BatchPutGeofenceResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface BatchPutGeofenceCommandInput extends BatchPutGeofenceRequest {
    }
    export interface BatchPutGeofenceCommandOutput extends BatchPutGeofenceResponse, __MetadataBearer {
    }
    /**
        * <p>A batch request for storing geofence geometries into a given geofence collection, or
        *             updates the geometry of an existing geofence if a geofence ID is included in the request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, BatchPutGeofenceCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, BatchPutGeofenceCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new BatchPutGeofenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchPutGeofenceCommandInput} for command's `input` shape.
        * @see {@link BatchPutGeofenceCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class BatchPutGeofenceCommand extends $Command<BatchPutGeofenceCommandInput, BatchPutGeofenceCommandOutput, LocationClientResolvedConfig> {
            readonly input: BatchPutGeofenceCommandInput;
            constructor(input: BatchPutGeofenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchPutGeofenceCommandInput, BatchPutGeofenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchUpdateDevicePositionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { BatchUpdateDevicePositionRequest, BatchUpdateDevicePositionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface BatchUpdateDevicePositionCommandInput extends BatchUpdateDevicePositionRequest {
    }
    export interface BatchUpdateDevicePositionCommandOutput extends BatchUpdateDevicePositionResponse, __MetadataBearer {
    }
    /**
        * <p>Uploads position update data for one or more devices to a tracker resource. Amazon Location
        *            uses the data when it reports the last known device position and position history. Amazon Location retains location data for 30
        *            days.</p>
        *          <note>
        *            <p>Position updates are handled based on the <code>PositionFiltering</code> property of the tracker.
        *                When <code>PositionFiltering</code> is set to <code>TimeBased</code>, updates are evaluated against linked geofence collections,
        *                and location data is stored at a maximum of one position per 30 second interval. If your update frequency is more often than
        *                every 30 seconds, only one update per 30 seconds is stored for each unique device ID.</p>
        *             <p>When <code>PositionFiltering</code> is set to <code>DistanceBased</code> filtering, location data is stored and evaluated against linked geofence
        *                 collections only if the device has moved more than 30 m (98.4 ft).</p>
        *             <p>When <code>PositionFiltering</code> is set to <code>AccuracyBased</code> filtering,
        *                 location data is stored and evaluated against linked geofence collections only if the
        *                 device has moved more than the measured accuracy. For example, if two consecutive
        *                 updates from a device have a horizontal accuracy of 5 m and 10 m, the second update
        *                 is neither stored or evaluated if the device has moved less than 15 m. If
        *                 <code>PositionFiltering</code> is set to <code>AccuracyBased</code> filtering, Amazon Location
        *                 uses the default value <code>{ "Horizontal": 0}</code> when accuracy is not provided on
        *                 a <code>DevicePositionUpdate</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, BatchUpdateDevicePositionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, BatchUpdateDevicePositionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new BatchUpdateDevicePositionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchUpdateDevicePositionCommandInput} for command's `input` shape.
        * @see {@link BatchUpdateDevicePositionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class BatchUpdateDevicePositionCommand extends $Command<BatchUpdateDevicePositionCommandInput, BatchUpdateDevicePositionCommandOutput, LocationClientResolvedConfig> {
            readonly input: BatchUpdateDevicePositionCommandInput;
            constructor(input: BatchUpdateDevicePositionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchUpdateDevicePositionCommandInput, BatchUpdateDevicePositionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CalculateRouteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { CalculateRouteRequest, CalculateRouteResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface CalculateRouteCommandInput extends CalculateRouteRequest {
    }
    export interface CalculateRouteCommandOutput extends CalculateRouteResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html">Calculates a route</a> given the following required parameters:
        *                 <code>DeparturePosition</code> and <code>DestinationPosition</code>. Requires that
        *             you first <a href="https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html">create a
        *                 route calculator resource</a>.</p>
        *         <p>By default, a request that doesn't specify a departure time uses the best time of day
        *             to travel with the best traffic conditions when calculating the route.</p>
        *         <p>Additional options include:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html">Specifying a
        *                         departure time</a> using either <code>DepartureTime</code> or
        *                         <code>DepartNow</code>. This calculates a route based on predictive traffic
        *                     data at the given time. </p>
        *                 <note>
        *                     <p>You can't specify both <code>DepartureTime</code> and
        *                             <code>DepartNow</code> in a single request. Specifying both parameters
        *                         returns a validation error.</p>
        *                 </note>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html">Specifying a travel
        *                         mode</a> using TravelMode sets the transportation mode used to calculate
        *                     the routes. This also lets you specify additional route preferences in
        *                         <code>CarModeOptions</code> if traveling by <code>Car</code>, or
        *                         <code>TruckModeOptions</code> if traveling by <code>Truck</code>.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, CalculateRouteCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, CalculateRouteCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new CalculateRouteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CalculateRouteCommandInput} for command's `input` shape.
        * @see {@link CalculateRouteCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class CalculateRouteCommand extends $Command<CalculateRouteCommandInput, CalculateRouteCommandOutput, LocationClientResolvedConfig> {
            readonly input: CalculateRouteCommandInput;
            constructor(input: CalculateRouteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CalculateRouteCommandInput, CalculateRouteCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CalculateRouteMatrixCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { CalculateRouteMatrixRequest, CalculateRouteMatrixResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface CalculateRouteMatrixCommandInput extends CalculateRouteMatrixRequest {
    }
    export interface CalculateRouteMatrixCommandOutput extends CalculateRouteMatrixResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html"> Calculates a route
        *                 matrix</a> given the following required parameters:
        *                 <code>DeparturePositions</code> and <code>DestinationPositions</code>.
        *                 <code>CalculateRouteMatrix</code> calculates routes and returns the travel time and
        *             travel distance from each departure position to each destination position in the
        *             request. For example, given departure positions A and B, and destination positions X and
        *             Y, <code>CalculateRouteMatrix</code> will return time and distance for routes from A to
        *             X, A to Y, B to X, and B to Y (in that order). The number of results returned (and
        *             routes calculated) will be the number of <code>DeparturePositions</code> times the
        *             number of <code>DestinationPositions</code>.</p>
        *         <note>
        *             <p>Your account is charged for each route calculated, not the number of
        *                 requests.</p>
        *         </note>
        *         <p>Requires that you first <a href="https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html">create a
        *                 route calculator resource</a>.</p>
        *         <p>By default, a request that doesn't specify a departure time uses the best time of day
        *             to travel with the best traffic conditions when calculating routes.</p>
        *         <p>Additional options include:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html"> Specifying a
        *                         departure time</a> using either <code>DepartureTime</code> or
        *                         <code>DepartNow</code>. This calculates routes based on predictive traffic
        *                     data at the given time. </p>
        *                 <note>
        *                     <p>You can't specify both <code>DepartureTime</code> and
        *                             <code>DepartNow</code> in a single request. Specifying both parameters
        *                         returns a validation error.</p>
        *                 </note>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html">Specifying a travel
        *                         mode</a> using TravelMode sets the transportation mode used to calculate
        *                     the routes. This also lets you specify additional route preferences in
        *                         <code>CarModeOptions</code> if traveling by <code>Car</code>, or
        *                         <code>TruckModeOptions</code> if traveling by <code>Truck</code>.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, CalculateRouteMatrixCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, CalculateRouteMatrixCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new CalculateRouteMatrixCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CalculateRouteMatrixCommandInput} for command's `input` shape.
        * @see {@link CalculateRouteMatrixCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class CalculateRouteMatrixCommand extends $Command<CalculateRouteMatrixCommandInput, CalculateRouteMatrixCommandOutput, LocationClientResolvedConfig> {
            readonly input: CalculateRouteMatrixCommandInput;
            constructor(input: CalculateRouteMatrixCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CalculateRouteMatrixCommandInput, CalculateRouteMatrixCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateGeofenceCollectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { CreateGeofenceCollectionRequest, CreateGeofenceCollectionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface CreateGeofenceCollectionCommandInput extends CreateGeofenceCollectionRequest {
    }
    export interface CreateGeofenceCollectionCommandOutput extends CreateGeofenceCollectionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a geofence collection, which manages and stores geofences.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, CreateGeofenceCollectionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, CreateGeofenceCollectionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new CreateGeofenceCollectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGeofenceCollectionCommandInput} for command's `input` shape.
        * @see {@link CreateGeofenceCollectionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class CreateGeofenceCollectionCommand extends $Command<CreateGeofenceCollectionCommandInput, CreateGeofenceCollectionCommandOutput, LocationClientResolvedConfig> {
            readonly input: CreateGeofenceCollectionCommandInput;
            constructor(input: CreateGeofenceCollectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGeofenceCollectionCommandInput, CreateGeofenceCollectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateMapCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { CreateMapRequest, CreateMapResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface CreateMapCommandInput extends CreateMapRequest {
    }
    export interface CreateMapCommandOutput extends CreateMapResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a map resource in your AWS account, which provides map tiles of different
        *             styles sourced from global location data providers.</p>
        *         <note>
        *             <p>If your application is tracking or routing assets you use in your business, such
        *                 as delivery vehicles or employees, you may only use HERE as your geolocation
        *                 provider. See section 82 of the <a href="http://aws.amazon.com/service-terms">AWS
        *                     service terms</a> for more details.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, CreateMapCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, CreateMapCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new CreateMapCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMapCommandInput} for command's `input` shape.
        * @see {@link CreateMapCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class CreateMapCommand extends $Command<CreateMapCommandInput, CreateMapCommandOutput, LocationClientResolvedConfig> {
            readonly input: CreateMapCommandInput;
            constructor(input: CreateMapCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMapCommandInput, CreateMapCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreatePlaceIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { CreatePlaceIndexRequest, CreatePlaceIndexResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface CreatePlaceIndexCommandInput extends CreatePlaceIndexRequest {
    }
    export interface CreatePlaceIndexCommandOutput extends CreatePlaceIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a place index resource in your AWS account. Use a place index resource to
        *             geocode addresses and other text queries by using the
        *                 <code>SearchPlaceIndexForText</code> operation, and reverse geocode coordinates by
        *             using the <code>SearchPlaceIndexForPosition</code> operation, and enable autosuggestions
        *             by using the <code>SearchPlaceIndexForSuggestions</code> operation.</p>
        *         <note>
        *             <p>If your application is tracking or routing assets you use in your business, such
        *                 as delivery vehicles or employees, you may only use HERE as your geolocation
        *                 provider. See section 82 of the <a href="http://aws.amazon.com/service-terms">AWS
        *                     service terms</a> for more details.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, CreatePlaceIndexCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, CreatePlaceIndexCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new CreatePlaceIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePlaceIndexCommandInput} for command's `input` shape.
        * @see {@link CreatePlaceIndexCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class CreatePlaceIndexCommand extends $Command<CreatePlaceIndexCommandInput, CreatePlaceIndexCommandOutput, LocationClientResolvedConfig> {
            readonly input: CreatePlaceIndexCommandInput;
            constructor(input: CreatePlaceIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePlaceIndexCommandInput, CreatePlaceIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateRouteCalculatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { CreateRouteCalculatorRequest, CreateRouteCalculatorResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface CreateRouteCalculatorCommandInput extends CreateRouteCalculatorRequest {
    }
    export interface CreateRouteCalculatorCommandOutput extends CreateRouteCalculatorResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a route calculator resource in your AWS account.</p>
        *         <p>You can send requests to a route calculator resource to estimate travel time,
        *             distance, and get directions. A route calculator sources traffic and road network data
        *             from your chosen data provider.</p>
        *         <note>
        *             <p>If your application is tracking or routing assets you use in your business, such
        *                 as delivery vehicles or employees, you may only use HERE as your geolocation
        *                 provider. See section 82 of the <a href="http://aws.amazon.com/service-terms">AWS
        *                     service terms</a> for more details.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, CreateRouteCalculatorCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, CreateRouteCalculatorCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new CreateRouteCalculatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRouteCalculatorCommandInput} for command's `input` shape.
        * @see {@link CreateRouteCalculatorCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class CreateRouteCalculatorCommand extends $Command<CreateRouteCalculatorCommandInput, CreateRouteCalculatorCommandOutput, LocationClientResolvedConfig> {
            readonly input: CreateRouteCalculatorCommandInput;
            constructor(input: CreateRouteCalculatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRouteCalculatorCommandInput, CreateRouteCalculatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateTrackerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { CreateTrackerRequest, CreateTrackerResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface CreateTrackerCommandInput extends CreateTrackerRequest {
    }
    export interface CreateTrackerCommandOutput extends CreateTrackerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a tracker resource in your AWS account, which lets you retrieve current and
        *             historical location of devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, CreateTrackerCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, CreateTrackerCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new CreateTrackerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTrackerCommandInput} for command's `input` shape.
        * @see {@link CreateTrackerCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class CreateTrackerCommand extends $Command<CreateTrackerCommandInput, CreateTrackerCommandOutput, LocationClientResolvedConfig> {
            readonly input: CreateTrackerCommandInput;
            constructor(input: CreateTrackerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTrackerCommandInput, CreateTrackerCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteGeofenceCollectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DeleteGeofenceCollectionRequest, DeleteGeofenceCollectionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DeleteGeofenceCollectionCommandInput extends DeleteGeofenceCollectionRequest {
    }
    export interface DeleteGeofenceCollectionCommandOutput extends DeleteGeofenceCollectionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a geofence collection from your AWS account.</p>
        *         <note>
        *             <p>This operation deletes the resource permanently. If the geofence collection is the
        *                 target of a tracker resource, the devices will no longer be monitored.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DeleteGeofenceCollectionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DeleteGeofenceCollectionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DeleteGeofenceCollectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGeofenceCollectionCommandInput} for command's `input` shape.
        * @see {@link DeleteGeofenceCollectionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DeleteGeofenceCollectionCommand extends $Command<DeleteGeofenceCollectionCommandInput, DeleteGeofenceCollectionCommandOutput, LocationClientResolvedConfig> {
            readonly input: DeleteGeofenceCollectionCommandInput;
            constructor(input: DeleteGeofenceCollectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGeofenceCollectionCommandInput, DeleteGeofenceCollectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteMapCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DeleteMapRequest, DeleteMapResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DeleteMapCommandInput extends DeleteMapRequest {
    }
    export interface DeleteMapCommandOutput extends DeleteMapResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a map resource from your AWS account.</p>
        *         <note>
        *             <p>This operation deletes the resource permanently. If the map is being used in an application,
        *                 the map may not render.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DeleteMapCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DeleteMapCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DeleteMapCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMapCommandInput} for command's `input` shape.
        * @see {@link DeleteMapCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DeleteMapCommand extends $Command<DeleteMapCommandInput, DeleteMapCommandOutput, LocationClientResolvedConfig> {
            readonly input: DeleteMapCommandInput;
            constructor(input: DeleteMapCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMapCommandInput, DeleteMapCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeletePlaceIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DeletePlaceIndexRequest, DeletePlaceIndexResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DeletePlaceIndexCommandInput extends DeletePlaceIndexRequest {
    }
    export interface DeletePlaceIndexCommandOutput extends DeletePlaceIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a place index resource from your AWS account.</p>
        *         <note>
        *             <p>This operation deletes the resource permanently.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DeletePlaceIndexCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DeletePlaceIndexCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DeletePlaceIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePlaceIndexCommandInput} for command's `input` shape.
        * @see {@link DeletePlaceIndexCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DeletePlaceIndexCommand extends $Command<DeletePlaceIndexCommandInput, DeletePlaceIndexCommandOutput, LocationClientResolvedConfig> {
            readonly input: DeletePlaceIndexCommandInput;
            constructor(input: DeletePlaceIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePlaceIndexCommandInput, DeletePlaceIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteRouteCalculatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DeleteRouteCalculatorRequest, DeleteRouteCalculatorResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DeleteRouteCalculatorCommandInput extends DeleteRouteCalculatorRequest {
    }
    export interface DeleteRouteCalculatorCommandOutput extends DeleteRouteCalculatorResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a route calculator resource from your AWS account.</p>
        *         <note>
        *             <p>This operation deletes the resource permanently.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DeleteRouteCalculatorCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DeleteRouteCalculatorCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DeleteRouteCalculatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRouteCalculatorCommandInput} for command's `input` shape.
        * @see {@link DeleteRouteCalculatorCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DeleteRouteCalculatorCommand extends $Command<DeleteRouteCalculatorCommandInput, DeleteRouteCalculatorCommandOutput, LocationClientResolvedConfig> {
            readonly input: DeleteRouteCalculatorCommandInput;
            constructor(input: DeleteRouteCalculatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRouteCalculatorCommandInput, DeleteRouteCalculatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteTrackerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DeleteTrackerRequest, DeleteTrackerResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DeleteTrackerCommandInput extends DeleteTrackerRequest {
    }
    export interface DeleteTrackerCommandOutput extends DeleteTrackerResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a tracker resource from your AWS account.</p>
        *          <note>
        *             <p>This operation deletes the resource permanently. If the tracker resource is in use, you may
        *                 encounter an error. Make sure that the target resource isn't a dependency for your
        *                 applications.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DeleteTrackerCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DeleteTrackerCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DeleteTrackerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTrackerCommandInput} for command's `input` shape.
        * @see {@link DeleteTrackerCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DeleteTrackerCommand extends $Command<DeleteTrackerCommandInput, DeleteTrackerCommandOutput, LocationClientResolvedConfig> {
            readonly input: DeleteTrackerCommandInput;
            constructor(input: DeleteTrackerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTrackerCommandInput, DeleteTrackerCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeGeofenceCollectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DescribeGeofenceCollectionRequest, DescribeGeofenceCollectionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DescribeGeofenceCollectionCommandInput extends DescribeGeofenceCollectionRequest {
    }
    export interface DescribeGeofenceCollectionCommandOutput extends DescribeGeofenceCollectionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the geofence collection details.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DescribeGeofenceCollectionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DescribeGeofenceCollectionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DescribeGeofenceCollectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeGeofenceCollectionCommandInput} for command's `input` shape.
        * @see {@link DescribeGeofenceCollectionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DescribeGeofenceCollectionCommand extends $Command<DescribeGeofenceCollectionCommandInput, DescribeGeofenceCollectionCommandOutput, LocationClientResolvedConfig> {
            readonly input: DescribeGeofenceCollectionCommandInput;
            constructor(input: DescribeGeofenceCollectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeGeofenceCollectionCommandInput, DescribeGeofenceCollectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeMapCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DescribeMapRequest, DescribeMapResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DescribeMapCommandInput extends DescribeMapRequest {
    }
    export interface DescribeMapCommandOutput extends DescribeMapResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the map resource details.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DescribeMapCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DescribeMapCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DescribeMapCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMapCommandInput} for command's `input` shape.
        * @see {@link DescribeMapCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DescribeMapCommand extends $Command<DescribeMapCommandInput, DescribeMapCommandOutput, LocationClientResolvedConfig> {
            readonly input: DescribeMapCommandInput;
            constructor(input: DescribeMapCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMapCommandInput, DescribeMapCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribePlaceIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DescribePlaceIndexRequest, DescribePlaceIndexResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DescribePlaceIndexCommandInput extends DescribePlaceIndexRequest {
    }
    export interface DescribePlaceIndexCommandOutput extends DescribePlaceIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the place index resource details.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DescribePlaceIndexCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DescribePlaceIndexCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DescribePlaceIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePlaceIndexCommandInput} for command's `input` shape.
        * @see {@link DescribePlaceIndexCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DescribePlaceIndexCommand extends $Command<DescribePlaceIndexCommandInput, DescribePlaceIndexCommandOutput, LocationClientResolvedConfig> {
            readonly input: DescribePlaceIndexCommandInput;
            constructor(input: DescribePlaceIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePlaceIndexCommandInput, DescribePlaceIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeRouteCalculatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DescribeRouteCalculatorRequest, DescribeRouteCalculatorResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DescribeRouteCalculatorCommandInput extends DescribeRouteCalculatorRequest {
    }
    export interface DescribeRouteCalculatorCommandOutput extends DescribeRouteCalculatorResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the route calculator resource details.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DescribeRouteCalculatorCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DescribeRouteCalculatorCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DescribeRouteCalculatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRouteCalculatorCommandInput} for command's `input` shape.
        * @see {@link DescribeRouteCalculatorCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DescribeRouteCalculatorCommand extends $Command<DescribeRouteCalculatorCommandInput, DescribeRouteCalculatorCommandOutput, LocationClientResolvedConfig> {
            readonly input: DescribeRouteCalculatorCommandInput;
            constructor(input: DescribeRouteCalculatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRouteCalculatorCommandInput, DescribeRouteCalculatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeTrackerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DescribeTrackerRequest, DescribeTrackerResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DescribeTrackerCommandInput extends DescribeTrackerRequest {
    }
    export interface DescribeTrackerCommandOutput extends DescribeTrackerResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the tracker resource details.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DescribeTrackerCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DescribeTrackerCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DescribeTrackerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTrackerCommandInput} for command's `input` shape.
        * @see {@link DescribeTrackerCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DescribeTrackerCommand extends $Command<DescribeTrackerCommandInput, DescribeTrackerCommandOutput, LocationClientResolvedConfig> {
            readonly input: DescribeTrackerCommandInput;
            constructor(input: DescribeTrackerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTrackerCommandInput, DescribeTrackerCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DisassociateTrackerConsumerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { DisassociateTrackerConsumerRequest, DisassociateTrackerConsumerResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface DisassociateTrackerConsumerCommandInput extends DisassociateTrackerConsumerRequest {
    }
    export interface DisassociateTrackerConsumerCommandOutput extends DisassociateTrackerConsumerResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the association between a tracker resource and a geofence collection.</p>
        *         <note>
        *             <p>Once you unlink a tracker resource from a geofence collection, the tracker
        *                 positions will no longer be automatically evaluated against geofences.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, DisassociateTrackerConsumerCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, DisassociateTrackerConsumerCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new DisassociateTrackerConsumerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateTrackerConsumerCommandInput} for command's `input` shape.
        * @see {@link DisassociateTrackerConsumerCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class DisassociateTrackerConsumerCommand extends $Command<DisassociateTrackerConsumerCommandInput, DisassociateTrackerConsumerCommandOutput, LocationClientResolvedConfig> {
            readonly input: DisassociateTrackerConsumerCommandInput;
            constructor(input: DisassociateTrackerConsumerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateTrackerConsumerCommandInput, DisassociateTrackerConsumerCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetDevicePositionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { GetDevicePositionRequest, GetDevicePositionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface GetDevicePositionCommandInput extends GetDevicePositionRequest {
    }
    export interface GetDevicePositionCommandOutput extends GetDevicePositionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a device's most recent position according to its sample time.</p>
        *          <note>
        *             <p>Device positions are deleted after 30 days.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, GetDevicePositionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, GetDevicePositionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new GetDevicePositionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDevicePositionCommandInput} for command's `input` shape.
        * @see {@link GetDevicePositionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class GetDevicePositionCommand extends $Command<GetDevicePositionCommandInput, GetDevicePositionCommandOutput, LocationClientResolvedConfig> {
            readonly input: GetDevicePositionCommandInput;
            constructor(input: GetDevicePositionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDevicePositionCommandInput, GetDevicePositionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetDevicePositionHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { GetDevicePositionHistoryRequest, GetDevicePositionHistoryResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface GetDevicePositionHistoryCommandInput extends GetDevicePositionHistoryRequest {
    }
    export interface GetDevicePositionHistoryCommandOutput extends GetDevicePositionHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the device position history from a tracker resource within a specified range
        *             of time.</p>
        *          <note>
        *            <p>Device positions are deleted after 30 days.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, GetDevicePositionHistoryCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, GetDevicePositionHistoryCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new GetDevicePositionHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDevicePositionHistoryCommandInput} for command's `input` shape.
        * @see {@link GetDevicePositionHistoryCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class GetDevicePositionHistoryCommand extends $Command<GetDevicePositionHistoryCommandInput, GetDevicePositionHistoryCommandOutput, LocationClientResolvedConfig> {
            readonly input: GetDevicePositionHistoryCommandInput;
            constructor(input: GetDevicePositionHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDevicePositionHistoryCommandInput, GetDevicePositionHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetGeofenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { GetGeofenceRequest, GetGeofenceResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface GetGeofenceCommandInput extends GetGeofenceRequest {
    }
    export interface GetGeofenceCommandOutput extends GetGeofenceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the geofence details from a geofence collection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, GetGeofenceCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, GetGeofenceCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new GetGeofenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGeofenceCommandInput} for command's `input` shape.
        * @see {@link GetGeofenceCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class GetGeofenceCommand extends $Command<GetGeofenceCommandInput, GetGeofenceCommandOutput, LocationClientResolvedConfig> {
            readonly input: GetGeofenceCommandInput;
            constructor(input: GetGeofenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGeofenceCommandInput, GetGeofenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapGlyphsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { GetMapGlyphsRequest, GetMapGlyphsResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface GetMapGlyphsCommandInput extends GetMapGlyphsRequest {
    }
    export interface GetMapGlyphsCommandOutput extends GetMapGlyphsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves glyphs used to display labels on a map.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, GetMapGlyphsCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, GetMapGlyphsCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new GetMapGlyphsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMapGlyphsCommandInput} for command's `input` shape.
        * @see {@link GetMapGlyphsCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class GetMapGlyphsCommand extends $Command<GetMapGlyphsCommandInput, GetMapGlyphsCommandOutput, LocationClientResolvedConfig> {
            readonly input: GetMapGlyphsCommandInput;
            constructor(input: GetMapGlyphsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMapGlyphsCommandInput, GetMapGlyphsCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapSpritesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { GetMapSpritesRequest, GetMapSpritesResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface GetMapSpritesCommandInput extends GetMapSpritesRequest {
    }
    export interface GetMapSpritesCommandOutput extends GetMapSpritesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the sprite sheet corresponding to a map resource. The sprite sheet is a PNG
        *             image paired with a JSON document describing the offsets of individual icons that will
        *             be displayed on a rendered map.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, GetMapSpritesCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, GetMapSpritesCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new GetMapSpritesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMapSpritesCommandInput} for command's `input` shape.
        * @see {@link GetMapSpritesCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class GetMapSpritesCommand extends $Command<GetMapSpritesCommandInput, GetMapSpritesCommandOutput, LocationClientResolvedConfig> {
            readonly input: GetMapSpritesCommandInput;
            constructor(input: GetMapSpritesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMapSpritesCommandInput, GetMapSpritesCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapStyleDescriptorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { GetMapStyleDescriptorRequest, GetMapStyleDescriptorResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface GetMapStyleDescriptorCommandInput extends GetMapStyleDescriptorRequest {
    }
    export interface GetMapStyleDescriptorCommandOutput extends GetMapStyleDescriptorResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the map style descriptor from a map resource. </p>
        *         <p>The style descriptor contains speciﬁcations on how features render on a map. For
        *             example, what data to display, what order to display the data in, and the style for the
        *             data. Style descriptors follow the Mapbox Style Specification.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, GetMapStyleDescriptorCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, GetMapStyleDescriptorCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new GetMapStyleDescriptorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMapStyleDescriptorCommandInput} for command's `input` shape.
        * @see {@link GetMapStyleDescriptorCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class GetMapStyleDescriptorCommand extends $Command<GetMapStyleDescriptorCommandInput, GetMapStyleDescriptorCommandOutput, LocationClientResolvedConfig> {
            readonly input: GetMapStyleDescriptorCommandInput;
            constructor(input: GetMapStyleDescriptorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMapStyleDescriptorCommandInput, GetMapStyleDescriptorCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapTileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { GetMapTileRequest, GetMapTileResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface GetMapTileCommandInput extends GetMapTileRequest {
    }
    export interface GetMapTileCommandOutput extends GetMapTileResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a vector data tile from the map resource. Map tiles are used by clients to
        *             render a map. they're addressed using a grid arrangement with an X coordinate, Y
        *             coordinate, and Z (zoom) level. </p>
        *         <p>The origin (0, 0) is the top left of the map. Increasing the zoom level by 1 doubles
        *             both the X and Y dimensions, so a tile containing data for the entire world at (0/0/0)
        *             will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, GetMapTileCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, GetMapTileCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new GetMapTileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMapTileCommandInput} for command's `input` shape.
        * @see {@link GetMapTileCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class GetMapTileCommand extends $Command<GetMapTileCommandInput, GetMapTileCommandOutput, LocationClientResolvedConfig> {
            readonly input: GetMapTileCommandInput;
            constructor(input: GetMapTileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMapTileCommandInput, GetMapTileCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListDevicePositionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListDevicePositionsRequest, ListDevicePositionsResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListDevicePositionsCommandInput extends ListDevicePositionsRequest {
    }
    export interface ListDevicePositionsCommandOutput extends ListDevicePositionsResponse, __MetadataBearer {
    }
    /**
        * <p>A batch request to retrieve all device positions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListDevicePositionsCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListDevicePositionsCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListDevicePositionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevicePositionsCommandInput} for command's `input` shape.
        * @see {@link ListDevicePositionsCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListDevicePositionsCommand extends $Command<ListDevicePositionsCommandInput, ListDevicePositionsCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListDevicePositionsCommandInput;
            constructor(input: ListDevicePositionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevicePositionsCommandInput, ListDevicePositionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListGeofenceCollectionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListGeofenceCollectionsRequest, ListGeofenceCollectionsResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListGeofenceCollectionsCommandInput extends ListGeofenceCollectionsRequest {
    }
    export interface ListGeofenceCollectionsCommandOutput extends ListGeofenceCollectionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists geofence collections in your AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListGeofenceCollectionsCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListGeofenceCollectionsCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListGeofenceCollectionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGeofenceCollectionsCommandInput} for command's `input` shape.
        * @see {@link ListGeofenceCollectionsCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListGeofenceCollectionsCommand extends $Command<ListGeofenceCollectionsCommandInput, ListGeofenceCollectionsCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListGeofenceCollectionsCommandInput;
            constructor(input: ListGeofenceCollectionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGeofenceCollectionsCommandInput, ListGeofenceCollectionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListGeofencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListGeofencesRequest, ListGeofencesResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListGeofencesCommandInput extends ListGeofencesRequest {
    }
    export interface ListGeofencesCommandOutput extends ListGeofencesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists geofences stored in a given geofence collection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListGeofencesCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListGeofencesCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListGeofencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGeofencesCommandInput} for command's `input` shape.
        * @see {@link ListGeofencesCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListGeofencesCommand extends $Command<ListGeofencesCommandInput, ListGeofencesCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListGeofencesCommandInput;
            constructor(input: ListGeofencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGeofencesCommandInput, ListGeofencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListMapsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListMapsRequest, ListMapsResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListMapsCommandInput extends ListMapsRequest {
    }
    export interface ListMapsCommandOutput extends ListMapsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists map resources in your AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListMapsCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListMapsCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListMapsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMapsCommandInput} for command's `input` shape.
        * @see {@link ListMapsCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListMapsCommand extends $Command<ListMapsCommandInput, ListMapsCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListMapsCommandInput;
            constructor(input: ListMapsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMapsCommandInput, ListMapsCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListPlaceIndexesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListPlaceIndexesRequest, ListPlaceIndexesResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListPlaceIndexesCommandInput extends ListPlaceIndexesRequest {
    }
    export interface ListPlaceIndexesCommandOutput extends ListPlaceIndexesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists place index resources in your AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListPlaceIndexesCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListPlaceIndexesCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListPlaceIndexesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPlaceIndexesCommandInput} for command's `input` shape.
        * @see {@link ListPlaceIndexesCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListPlaceIndexesCommand extends $Command<ListPlaceIndexesCommandInput, ListPlaceIndexesCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListPlaceIndexesCommandInput;
            constructor(input: ListPlaceIndexesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPlaceIndexesCommandInput, ListPlaceIndexesCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListRouteCalculatorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListRouteCalculatorsRequest, ListRouteCalculatorsResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListRouteCalculatorsCommandInput extends ListRouteCalculatorsRequest {
    }
    export interface ListRouteCalculatorsCommandOutput extends ListRouteCalculatorsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists route calculator resources in your AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListRouteCalculatorsCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListRouteCalculatorsCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListRouteCalculatorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRouteCalculatorsCommandInput} for command's `input` shape.
        * @see {@link ListRouteCalculatorsCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListRouteCalculatorsCommand extends $Command<ListRouteCalculatorsCommandInput, ListRouteCalculatorsCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListRouteCalculatorsCommandInput;
            constructor(input: ListRouteCalculatorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRouteCalculatorsCommandInput, ListRouteCalculatorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of tags that are applied to the specified Amazon Location resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListTagsForResourceCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListTagsForResourceCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTrackerConsumersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListTrackerConsumersRequest, ListTrackerConsumersResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListTrackerConsumersCommandInput extends ListTrackerConsumersRequest {
    }
    export interface ListTrackerConsumersCommandOutput extends ListTrackerConsumersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists geofence collections currently associated to the given tracker resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListTrackerConsumersCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListTrackerConsumersCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListTrackerConsumersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTrackerConsumersCommandInput} for command's `input` shape.
        * @see {@link ListTrackerConsumersCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListTrackerConsumersCommand extends $Command<ListTrackerConsumersCommandInput, ListTrackerConsumersCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListTrackerConsumersCommandInput;
            constructor(input: ListTrackerConsumersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTrackerConsumersCommandInput, ListTrackerConsumersCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTrackersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { ListTrackersRequest, ListTrackersResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface ListTrackersCommandInput extends ListTrackersRequest {
    }
    export interface ListTrackersCommandOutput extends ListTrackersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists tracker resources in your AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, ListTrackersCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, ListTrackersCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new ListTrackersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTrackersCommandInput} for command's `input` shape.
        * @see {@link ListTrackersCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class ListTrackersCommand extends $Command<ListTrackersCommandInput, ListTrackersCommandOutput, LocationClientResolvedConfig> {
            readonly input: ListTrackersCommandInput;
            constructor(input: ListTrackersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTrackersCommandInput, ListTrackersCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/PutGeofenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { PutGeofenceRequest, PutGeofenceResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface PutGeofenceCommandInput extends PutGeofenceRequest {
    }
    export interface PutGeofenceCommandOutput extends PutGeofenceResponse, __MetadataBearer {
    }
    /**
        * <p>Stores a geofence geometry in a given geofence collection, or updates the geometry of
        *             an existing geofence if a geofence ID is included in the request. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, PutGeofenceCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, PutGeofenceCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new PutGeofenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutGeofenceCommandInput} for command's `input` shape.
        * @see {@link PutGeofenceCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class PutGeofenceCommand extends $Command<PutGeofenceCommandInput, PutGeofenceCommandOutput, LocationClientResolvedConfig> {
            readonly input: PutGeofenceCommandInput;
            constructor(input: PutGeofenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutGeofenceCommandInput, PutGeofenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForPositionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { SearchPlaceIndexForPositionRequest, SearchPlaceIndexForPositionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface SearchPlaceIndexForPositionCommandInput extends SearchPlaceIndexForPositionRequest {
    }
    export interface SearchPlaceIndexForPositionCommandOutput extends SearchPlaceIndexForPositionResponse, __MetadataBearer {
    }
    /**
        * <p>Reverse geocodes a given coordinate and returns a legible address. Allows you to
        *             search for Places or points of interest near a given position.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, SearchPlaceIndexForPositionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, SearchPlaceIndexForPositionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new SearchPlaceIndexForPositionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchPlaceIndexForPositionCommandInput} for command's `input` shape.
        * @see {@link SearchPlaceIndexForPositionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class SearchPlaceIndexForPositionCommand extends $Command<SearchPlaceIndexForPositionCommandInput, SearchPlaceIndexForPositionCommandOutput, LocationClientResolvedConfig> {
            readonly input: SearchPlaceIndexForPositionCommandInput;
            constructor(input: SearchPlaceIndexForPositionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchPlaceIndexForPositionCommandInput, SearchPlaceIndexForPositionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForSuggestionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { SearchPlaceIndexForSuggestionsRequest, SearchPlaceIndexForSuggestionsResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface SearchPlaceIndexForSuggestionsCommandInput extends SearchPlaceIndexForSuggestionsRequest {
    }
    export interface SearchPlaceIndexForSuggestionsCommandOutput extends SearchPlaceIndexForSuggestionsResponse, __MetadataBearer {
    }
    /**
        * <p>Generates suggestions for addresses and points of interest based on partial or
        *             misspelled free-form text. This operation is also known as autocomplete, autosuggest, or
        *             fuzzy matching.</p>
        *         <p>Optional parameters let you narrow your search results by bounding box or country, or
        *             bias your search toward a specific position on the globe.</p>
        *         <note>
        *             <p>You can search for suggested place names near a specified position by using
        *                     <code>BiasPosition</code>, or filter results within a bounding box by using
        *                     <code>FilterBBox</code>. These parameters are mutually exclusive; using both
        *                     <code>BiasPosition</code> and <code>FilterBBox</code> in the same command
        *                 returns an error.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, SearchPlaceIndexForSuggestionsCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, SearchPlaceIndexForSuggestionsCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new SearchPlaceIndexForSuggestionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchPlaceIndexForSuggestionsCommandInput} for command's `input` shape.
        * @see {@link SearchPlaceIndexForSuggestionsCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class SearchPlaceIndexForSuggestionsCommand extends $Command<SearchPlaceIndexForSuggestionsCommandInput, SearchPlaceIndexForSuggestionsCommandOutput, LocationClientResolvedConfig> {
            readonly input: SearchPlaceIndexForSuggestionsCommandInput;
            constructor(input: SearchPlaceIndexForSuggestionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchPlaceIndexForSuggestionsCommandInput, SearchPlaceIndexForSuggestionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForTextCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { SearchPlaceIndexForTextRequest, SearchPlaceIndexForTextResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface SearchPlaceIndexForTextCommandInput extends SearchPlaceIndexForTextRequest {
    }
    export interface SearchPlaceIndexForTextCommandOutput extends SearchPlaceIndexForTextResponse, __MetadataBearer {
    }
    /**
        * <p>Geocodes free-form text, such as an address, name, city, or region to allow you to
        *             search for Places or points of interest. </p>
        *         <p>Optional parameters let you narrow your search results by bounding box or country, or
        *             bias your search toward a specific position on the globe.</p>
        *         <note>
        *             <p>You can search for places near a given position using <code>BiasPosition</code>,
        *                 or filter results within a bounding box using <code>FilterBBox</code>. Providing
        *                 both parameters simultaneously returns an error.</p>
        *         </note>
        *         <p>Search results are returned in order of highest to lowest relevance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, SearchPlaceIndexForTextCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, SearchPlaceIndexForTextCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new SearchPlaceIndexForTextCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchPlaceIndexForTextCommandInput} for command's `input` shape.
        * @see {@link SearchPlaceIndexForTextCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class SearchPlaceIndexForTextCommand extends $Command<SearchPlaceIndexForTextCommandInput, SearchPlaceIndexForTextCommandOutput, LocationClientResolvedConfig> {
            readonly input: SearchPlaceIndexForTextCommandInput;
            constructor(input: SearchPlaceIndexForTextCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchPlaceIndexForTextCommandInput, SearchPlaceIndexForTextCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns one or more tags (key-value pairs) to the specified Amazon
        *             Location Service resource.</p>
        *
        *         <p>Tags can help you organize and categorize your resources.
        *             You can also use them to scope user permissions, by granting a user
        *             permission to access or change only resources with certain tag values.</p>
        *
        *         <p>You can use the <code>TagResource</code> operation with an Amazon Location Service
        *             resource that already has tags. If you specify a new tag key for the resource, this tag
        *             is appended to the tags already associated with the resource. If you specify a tag key
        *             that's already associated with the resource, the new tag value that you specify replaces
        *             the previous value for that tag. </p>
        *
        *         <p>You can associate up to 50 tags with a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, TagResourceCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, TagResourceCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, LocationClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from the specified Amazon Location resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, UntagResourceCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, UntagResourceCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, LocationClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateGeofenceCollectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { UpdateGeofenceCollectionRequest, UpdateGeofenceCollectionResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface UpdateGeofenceCollectionCommandInput extends UpdateGeofenceCollectionRequest {
    }
    export interface UpdateGeofenceCollectionCommandOutput extends UpdateGeofenceCollectionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified properties of a given geofence collection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, UpdateGeofenceCollectionCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, UpdateGeofenceCollectionCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new UpdateGeofenceCollectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGeofenceCollectionCommandInput} for command's `input` shape.
        * @see {@link UpdateGeofenceCollectionCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class UpdateGeofenceCollectionCommand extends $Command<UpdateGeofenceCollectionCommandInput, UpdateGeofenceCollectionCommandOutput, LocationClientResolvedConfig> {
            readonly input: UpdateGeofenceCollectionCommandInput;
            constructor(input: UpdateGeofenceCollectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGeofenceCollectionCommandInput, UpdateGeofenceCollectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateMapCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { UpdateMapRequest, UpdateMapResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface UpdateMapCommandInput extends UpdateMapRequest {
    }
    export interface UpdateMapCommandOutput extends UpdateMapResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified properties of a given map resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, UpdateMapCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, UpdateMapCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new UpdateMapCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMapCommandInput} for command's `input` shape.
        * @see {@link UpdateMapCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class UpdateMapCommand extends $Command<UpdateMapCommandInput, UpdateMapCommandOutput, LocationClientResolvedConfig> {
            readonly input: UpdateMapCommandInput;
            constructor(input: UpdateMapCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMapCommandInput, UpdateMapCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdatePlaceIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { UpdatePlaceIndexRequest, UpdatePlaceIndexResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface UpdatePlaceIndexCommandInput extends UpdatePlaceIndexRequest {
    }
    export interface UpdatePlaceIndexCommandOutput extends UpdatePlaceIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified properties of a given place index resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, UpdatePlaceIndexCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, UpdatePlaceIndexCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new UpdatePlaceIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePlaceIndexCommandInput} for command's `input` shape.
        * @see {@link UpdatePlaceIndexCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class UpdatePlaceIndexCommand extends $Command<UpdatePlaceIndexCommandInput, UpdatePlaceIndexCommandOutput, LocationClientResolvedConfig> {
            readonly input: UpdatePlaceIndexCommandInput;
            constructor(input: UpdatePlaceIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePlaceIndexCommandInput, UpdatePlaceIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateRouteCalculatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { UpdateRouteCalculatorRequest, UpdateRouteCalculatorResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface UpdateRouteCalculatorCommandInput extends UpdateRouteCalculatorRequest {
    }
    export interface UpdateRouteCalculatorCommandOutput extends UpdateRouteCalculatorResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified properties for a given route calculator resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, UpdateRouteCalculatorCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, UpdateRouteCalculatorCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new UpdateRouteCalculatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRouteCalculatorCommandInput} for command's `input` shape.
        * @see {@link UpdateRouteCalculatorCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class UpdateRouteCalculatorCommand extends $Command<UpdateRouteCalculatorCommandInput, UpdateRouteCalculatorCommandOutput, LocationClientResolvedConfig> {
            readonly input: UpdateRouteCalculatorCommandInput;
            constructor(input: UpdateRouteCalculatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRouteCalculatorCommandInput, UpdateRouteCalculatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateTrackerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LocationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient";
    import { UpdateTrackerRequest, UpdateTrackerResponse } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0";
    export interface UpdateTrackerCommandInput extends UpdateTrackerRequest {
    }
    export interface UpdateTrackerCommandOutput extends UpdateTrackerResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified properties of a given tracker resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LocationClient, UpdateTrackerCommand } from "@aws-sdk/client-location"; // ES Modules import
        * // const { LocationClient, UpdateTrackerCommand } = require("@aws-sdk/client-location"); // CommonJS import
        * const client = new LocationClient(config);
        * const command = new UpdateTrackerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTrackerCommandInput} for command's `input` shape.
        * @see {@link UpdateTrackerCommandOutput} for command's `response` shape.
        * @see {@link LocationClientResolvedConfig | config} for LocationClient's `config` shape.
        *
        */
    export class UpdateTrackerCommand extends $Command<UpdateTrackerCommandInput, UpdateTrackerCommandOutput, LocationClientResolvedConfig> {
            readonly input: UpdateTrackerCommandInput;
            constructor(input: UpdateTrackerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LocationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTrackerCommandInput, UpdateTrackerCommandOutput>;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/LocationClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateTrackerConsumerCommandInput, AssociateTrackerConsumerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/AssociateTrackerConsumerCommand";
    import { BatchDeleteDevicePositionHistoryCommandInput, BatchDeleteDevicePositionHistoryCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchDeleteDevicePositionHistoryCommand";
    import { BatchDeleteGeofenceCommandInput, BatchDeleteGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchDeleteGeofenceCommand";
    import { BatchEvaluateGeofencesCommandInput, BatchEvaluateGeofencesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchEvaluateGeofencesCommand";
    import { BatchGetDevicePositionCommandInput, BatchGetDevicePositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchGetDevicePositionCommand";
    import { BatchPutGeofenceCommandInput, BatchPutGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchPutGeofenceCommand";
    import { BatchUpdateDevicePositionCommandInput, BatchUpdateDevicePositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/BatchUpdateDevicePositionCommand";
    import { CalculateRouteCommandInput, CalculateRouteCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CalculateRouteCommand";
    import { CalculateRouteMatrixCommandInput, CalculateRouteMatrixCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CalculateRouteMatrixCommand";
    import { CreateGeofenceCollectionCommandInput, CreateGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateGeofenceCollectionCommand";
    import { CreateMapCommandInput, CreateMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateMapCommand";
    import { CreatePlaceIndexCommandInput, CreatePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreatePlaceIndexCommand";
    import { CreateRouteCalculatorCommandInput, CreateRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateRouteCalculatorCommand";
    import { CreateTrackerCommandInput, CreateTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/CreateTrackerCommand";
    import { DeleteGeofenceCollectionCommandInput, DeleteGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteGeofenceCollectionCommand";
    import { DeleteMapCommandInput, DeleteMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteMapCommand";
    import { DeletePlaceIndexCommandInput, DeletePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeletePlaceIndexCommand";
    import { DeleteRouteCalculatorCommandInput, DeleteRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteRouteCalculatorCommand";
    import { DeleteTrackerCommandInput, DeleteTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DeleteTrackerCommand";
    import { DescribeGeofenceCollectionCommandInput, DescribeGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeGeofenceCollectionCommand";
    import { DescribeMapCommandInput, DescribeMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeMapCommand";
    import { DescribePlaceIndexCommandInput, DescribePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribePlaceIndexCommand";
    import { DescribeRouteCalculatorCommandInput, DescribeRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeRouteCalculatorCommand";
    import { DescribeTrackerCommandInput, DescribeTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DescribeTrackerCommand";
    import { DisassociateTrackerConsumerCommandInput, DisassociateTrackerConsumerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/DisassociateTrackerConsumerCommand";
    import { GetDevicePositionCommandInput, GetDevicePositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetDevicePositionCommand";
    import { GetDevicePositionHistoryCommandInput, GetDevicePositionHistoryCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetDevicePositionHistoryCommand";
    import { GetGeofenceCommandInput, GetGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetGeofenceCommand";
    import { GetMapGlyphsCommandInput, GetMapGlyphsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapGlyphsCommand";
    import { GetMapSpritesCommandInput, GetMapSpritesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapSpritesCommand";
    import { GetMapStyleDescriptorCommandInput, GetMapStyleDescriptorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapStyleDescriptorCommand";
    import { GetMapTileCommandInput, GetMapTileCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/GetMapTileCommand";
    import { ListDevicePositionsCommandInput, ListDevicePositionsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListDevicePositionsCommand";
    import { ListGeofenceCollectionsCommandInput, ListGeofenceCollectionsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListGeofenceCollectionsCommand";
    import { ListGeofencesCommandInput, ListGeofencesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListGeofencesCommand";
    import { ListMapsCommandInput, ListMapsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListMapsCommand";
    import { ListPlaceIndexesCommandInput, ListPlaceIndexesCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListPlaceIndexesCommand";
    import { ListRouteCalculatorsCommandInput, ListRouteCalculatorsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListRouteCalculatorsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTagsForResourceCommand";
    import { ListTrackerConsumersCommandInput, ListTrackerConsumersCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTrackerConsumersCommand";
    import { ListTrackersCommandInput, ListTrackersCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/ListTrackersCommand";
    import { PutGeofenceCommandInput, PutGeofenceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/PutGeofenceCommand";
    import { SearchPlaceIndexForPositionCommandInput, SearchPlaceIndexForPositionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForPositionCommand";
    import { SearchPlaceIndexForSuggestionsCommandInput, SearchPlaceIndexForSuggestionsCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForSuggestionsCommand";
    import { SearchPlaceIndexForTextCommandInput, SearchPlaceIndexForTextCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/SearchPlaceIndexForTextCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UntagResourceCommand";
    import { UpdateGeofenceCollectionCommandInput, UpdateGeofenceCollectionCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateGeofenceCollectionCommand";
    import { UpdateMapCommandInput, UpdateMapCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateMapCommand";
    import { UpdatePlaceIndexCommandInput, UpdatePlaceIndexCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdatePlaceIndexCommand";
    import { UpdateRouteCalculatorCommandInput, UpdateRouteCalculatorCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateRouteCalculatorCommand";
    import { UpdateTrackerCommandInput, UpdateTrackerCommandOutput } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/commands/UpdateTrackerCommand";
    export type ServiceInputTypes = AssociateTrackerConsumerCommandInput | BatchDeleteDevicePositionHistoryCommandInput | BatchDeleteGeofenceCommandInput | BatchEvaluateGeofencesCommandInput | BatchGetDevicePositionCommandInput | BatchPutGeofenceCommandInput | BatchUpdateDevicePositionCommandInput | CalculateRouteCommandInput | CalculateRouteMatrixCommandInput | CreateGeofenceCollectionCommandInput | CreateMapCommandInput | CreatePlaceIndexCommandInput | CreateRouteCalculatorCommandInput | CreateTrackerCommandInput | DeleteGeofenceCollectionCommandInput | DeleteMapCommandInput | DeletePlaceIndexCommandInput | DeleteRouteCalculatorCommandInput | DeleteTrackerCommandInput | DescribeGeofenceCollectionCommandInput | DescribeMapCommandInput | DescribePlaceIndexCommandInput | DescribeRouteCalculatorCommandInput | DescribeTrackerCommandInput | DisassociateTrackerConsumerCommandInput | GetDevicePositionCommandInput | GetDevicePositionHistoryCommandInput | GetGeofenceCommandInput | GetMapGlyphsCommandInput | GetMapSpritesCommandInput | GetMapStyleDescriptorCommandInput | GetMapTileCommandInput | ListDevicePositionsCommandInput | ListGeofenceCollectionsCommandInput | ListGeofencesCommandInput | ListMapsCommandInput | ListPlaceIndexesCommandInput | ListRouteCalculatorsCommandInput | ListTagsForResourceCommandInput | ListTrackerConsumersCommandInput | ListTrackersCommandInput | PutGeofenceCommandInput | SearchPlaceIndexForPositionCommandInput | SearchPlaceIndexForSuggestionsCommandInput | SearchPlaceIndexForTextCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateGeofenceCollectionCommandInput | UpdateMapCommandInput | UpdatePlaceIndexCommandInput | UpdateRouteCalculatorCommandInput | UpdateTrackerCommandInput;
    export type ServiceOutputTypes = AssociateTrackerConsumerCommandOutput | BatchDeleteDevicePositionHistoryCommandOutput | BatchDeleteGeofenceCommandOutput | BatchEvaluateGeofencesCommandOutput | BatchGetDevicePositionCommandOutput | BatchPutGeofenceCommandOutput | BatchUpdateDevicePositionCommandOutput | CalculateRouteCommandOutput | CalculateRouteMatrixCommandOutput | CreateGeofenceCollectionCommandOutput | CreateMapCommandOutput | CreatePlaceIndexCommandOutput | CreateRouteCalculatorCommandOutput | CreateTrackerCommandOutput | DeleteGeofenceCollectionCommandOutput | DeleteMapCommandOutput | DeletePlaceIndexCommandOutput | DeleteRouteCalculatorCommandOutput | DeleteTrackerCommandOutput | DescribeGeofenceCollectionCommandOutput | DescribeMapCommandOutput | DescribePlaceIndexCommandOutput | DescribeRouteCalculatorCommandOutput | DescribeTrackerCommandOutput | DisassociateTrackerConsumerCommandOutput | GetDevicePositionCommandOutput | GetDevicePositionHistoryCommandOutput | GetGeofenceCommandOutput | GetMapGlyphsCommandOutput | GetMapSpritesCommandOutput | GetMapStyleDescriptorCommandOutput | GetMapTileCommandOutput | ListDevicePositionsCommandOutput | ListGeofenceCollectionsCommandOutput | ListGeofencesCommandOutput | ListMapsCommandOutput | ListPlaceIndexesCommandOutput | ListRouteCalculatorsCommandOutput | ListTagsForResourceCommandOutput | ListTrackerConsumersCommandOutput | ListTrackersCommandOutput | PutGeofenceCommandOutput | SearchPlaceIndexForPositionCommandOutput | SearchPlaceIndexForSuggestionsCommandOutput | SearchPlaceIndexForTextCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateGeofenceCollectionCommandOutput | UpdateMapCommandOutput | UpdatePlaceIndexCommandOutput | UpdateRouteCalculatorCommandOutput | UpdateTrackerCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type LocationClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of LocationClient class constructor that set the region, credentials and other options.
        */
    export interface LocationClientConfig extends LocationClientConfigType {
    }
    type LocationClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of LocationClient class. This is resolved and normalized from the {@link LocationClientConfig | constructor configuration interface}.
        */
    export interface LocationClientResolvedConfig extends LocationClientResolvedConfigType {
    }
    /**
        * Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing
        */
    export class LocationClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, LocationClientResolvedConfig> {
            /**
                * The resolved configuration of LocationClient class. This is resolved and normalized from the {@link LocationClientConfig | constructor configuration interface}.
                */
            readonly config: LocationClientResolvedConfig;
            constructor(configuration: LocationClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { LocationServiceException as __BaseException } from "@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/LocationServiceException";
    /**
        * <p>The request was denied because of insufficient access or permissions. Check with an
        *       administrator to verify your permissions.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export interface AssociateTrackerConsumerRequest {
            /**
                * <p>The name of the tracker resource to be associated with a geofence collection.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker
                *             resource. Used when you need to specify a resource across all AWS.</p>
                *          <ul>
                *             <li>
                *                <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ConsumerArn: string | undefined;
    }
    export namespace AssociateTrackerConsumerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTrackerConsumerRequest) => any;
    }
    export interface AssociateTrackerConsumerResponse {
    }
    export namespace AssociateTrackerConsumerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTrackerConsumerResponse) => any;
    }
    /**
        * <p>The request was unsuccessful because of a conflict.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The request has failed to process because of an unknown server error, exception, or failure.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            $retryable: {};
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The resource that you've entered was not found in your AWS account.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The operation was denied because the request would exceed the maximum <a href="https://docs.aws.amazon.com/location/latest/developerguide/location-quotas.html">quota</a>
        *       set for Amazon Location Service.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>A message with the reason for the service quota exceeded exception error.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The request was denied because of request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            $retryable: {};
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>The input failed to meet the constraints specified by the AWS service in a specified
        *       field. </p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The field name where the invalid entry was detected.</p>
                */
            Name: string | undefined;
            /**
                * <p>A message with the reason for the validation exception error.</p>
                */
            Message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export type ValidationExceptionReason = "CannotParse" | "FieldValidationFailed" | "Missing" | "Other" | "UnknownOperation";
    /**
        * <p>The input failed to meet the constraints specified by the AWS service. </p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>A message with the reason for the validation exception error.</p>
                */
            Reason: ValidationExceptionReason | string | undefined;
            /**
                * <p>The field where the invalid entry was detected.</p>
                */
            FieldList: ValidationExceptionField[] | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface BatchDeleteDevicePositionHistoryRequest {
            /**
                * <p>The name of the tracker resource to delete the device position history from.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>Devices whose position history you want to delete.</p>
                *          <ul>
                *             <li>
                *                <p>For example, for two devices:
                *                    <code>“DeviceIds” : [DeviceId1,DeviceId2]</code>
                *                </p>
                *            </li>
                *          </ul>
                */
            DeviceIds: string[] | undefined;
    }
    export namespace BatchDeleteDevicePositionHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDevicePositionHistoryRequest) => any;
    }
    export type BatchItemErrorCode = "AccessDeniedError" | "ConflictError" | "InternalServerError" | "ResourceNotFoundError" | "ThrottlingError" | "ValidationError";
    /**
        * <p>Contains the batch request error details associated with the request.</p>
        */
    export interface BatchItemError {
            /**
                * <p>The error code associated with the batch request error.</p>
                */
            Code?: BatchItemErrorCode | string;
            /**
                * <p>A message with the reason for the batch request error.</p>
                */
            Message?: string;
    }
    export namespace BatchItemError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchItemError) => any;
    }
    /**
        * <p>Contains the tracker resource details.</p>
        */
    export interface BatchDeleteDevicePositionHistoryError {
            /**
                * <p>The ID of the device for this position.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>Contains the batch request error details associated with the request.</p>
                */
            Error: BatchItemError | undefined;
    }
    export namespace BatchDeleteDevicePositionHistoryError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDevicePositionHistoryError) => any;
    }
    export interface BatchDeleteDevicePositionHistoryResponse {
            /**
                * <p>Contains error details for each device history that failed to delete.</p>
                */
            Errors: BatchDeleteDevicePositionHistoryError[] | undefined;
    }
    export namespace BatchDeleteDevicePositionHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDevicePositionHistoryResponse) => any;
    }
    export interface BatchDeleteGeofenceRequest {
            /**
                * <p>The geofence collection storing the geofences to be deleted.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The batch of geofences to be deleted.</p>
                */
            GeofenceIds: string[] | undefined;
    }
    export namespace BatchDeleteGeofenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteGeofenceRequest) => any;
    }
    /**
        * <p>Contains error details for each geofence that failed to delete from the geofence
        *             collection.</p>
        */
    export interface BatchDeleteGeofenceError {
            /**
                * <p>The geofence associated with the error message.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>Contains details associated to the batch error.</p>
                */
            Error: BatchItemError | undefined;
    }
    export namespace BatchDeleteGeofenceError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteGeofenceError) => any;
    }
    export interface BatchDeleteGeofenceResponse {
            /**
                * <p>Contains error details for each geofence that failed to delete.</p>
                */
            Errors: BatchDeleteGeofenceError[] | undefined;
    }
    export namespace BatchDeleteGeofenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteGeofenceResponse) => any;
    }
    /**
        * <p>Defines the level of certainty of the position.</p>
        */
    export interface PositionalAccuracy {
            /**
                * <p>Estimated maximum distance, in meters, between the measured position and the true
                *             position of a device, along the Earth's surface.</p>
                */
            Horizontal: number | undefined;
    }
    export namespace PositionalAccuracy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PositionalAccuracy) => any;
    }
    /**
        * <p>Contains the position update details for a device.</p>
        */
    export interface DevicePositionUpdate {
            /**
                * <p>The device associated to the position update.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            SampleTime: Date | undefined;
            /**
                * <p>The latest device position defined in <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84">WGS 84</a> format:
                *             <code>[X or longitude, Y or latitude]</code>.</p>
                */
            Position: number[] | undefined;
            /**
                * <p>The accuracy of the device position.</p>
                */
            Accuracy?: PositionalAccuracy;
            /**
                * <p>Associates one of more properties with the position update. A property is a key-value
                *             pair stored with the position update and added to any geofence event the update may
                *             trigger.</p>
                *         <p>Format: <code>"key" : "value"</code>
                *          </p>
                */
            PositionProperties?: Record<string, string>;
    }
    export namespace DevicePositionUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DevicePositionUpdate) => any;
    }
    export interface BatchEvaluateGeofencesRequest {
            /**
                * <p>The geofence collection used in evaluating the position of devices against its
                *             geofences.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>Contains device details for each device to be evaluated against the given geofence
                *             collection.</p>
                */
            DevicePositionUpdates: DevicePositionUpdate[] | undefined;
    }
    export namespace BatchEvaluateGeofencesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchEvaluateGeofencesRequest) => any;
    }
    /**
        * <p>Contains error details for each device that failed to evaluate its position against
        *             the geofences in a given geofence collection.</p>
        */
    export interface BatchEvaluateGeofencesError {
            /**
                * <p>The device associated with the position evaluation error.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>Specifies a timestamp for when the error occurred in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            SampleTime: Date | undefined;
            /**
                * <p>Contains details associated to the batch error.</p>
                */
            Error: BatchItemError | undefined;
    }
    export namespace BatchEvaluateGeofencesError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchEvaluateGeofencesError) => any;
    }
    export interface BatchEvaluateGeofencesResponse {
            /**
                * <p>Contains error details for each device that failed to evaluate its position against
                *             the given geofence collection.</p>
                */
            Errors: BatchEvaluateGeofencesError[] | undefined;
    }
    export namespace BatchEvaluateGeofencesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchEvaluateGeofencesResponse) => any;
    }
    export interface BatchGetDevicePositionRequest {
            /**
                * <p>The tracker resource retrieving the device position.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>Devices whose position you want to retrieve.</p>
                *          <ul>
                *             <li>
                *                <p>For example, for two devices:
                *                    <code>device-ids=DeviceId1&amp;device-ids=DeviceId2</code>
                *                </p>
                *            </li>
                *          </ul>
                */
            DeviceIds: string[] | undefined;
    }
    export namespace BatchGetDevicePositionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDevicePositionRequest) => any;
    }
    /**
        * <p>Contains the device position details.</p>
        */
    export interface DevicePosition {
            /**
                * <p>The device whose position you retrieved.</p>
                */
            DeviceId?: string;
            /**
                * <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            SampleTime: Date | undefined;
            /**
                * <p>The timestamp for when the tracker resource received the device position in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            ReceivedTime: Date | undefined;
            /**
                * <p>The last known device position.</p>
                */
            Position: number[] | undefined;
            /**
                * <p>The accuracy of the device position.</p>
                */
            Accuracy?: PositionalAccuracy;
            /**
                * <p>The properties associated with the position.</p>
                */
            PositionProperties?: Record<string, string>;
    }
    export namespace DevicePosition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DevicePosition) => any;
    }
    /**
        * <p>Contains error details for each device that didn't return a position.</p>
        */
    export interface BatchGetDevicePositionError {
            /**
                * <p>The ID of the device that didn't return a position.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>Contains details related to the error code.</p>
                */
            Error: BatchItemError | undefined;
    }
    export namespace BatchGetDevicePositionError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDevicePositionError) => any;
    }
    export interface BatchGetDevicePositionResponse {
            /**
                * <p>Contains  error details for each device that failed to send its position to the tracker
                *             resource.</p>
                */
            Errors: BatchGetDevicePositionError[] | undefined;
            /**
                * <p>Contains device position details such as the device ID, position, and timestamps for
                *             when the position was received and sampled.</p>
                */
            DevicePositions: DevicePosition[] | undefined;
    }
    export namespace BatchGetDevicePositionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDevicePositionResponse) => any;
    }
    /**
        * <p>Contains the geofence geometry details.</p>
        *         <note>
        *             <p>Amazon Location doesn't currently support polygons with holes, multipolygons, polygons
        *                 that are wound clockwise, or that cross the antimeridian. </p>
        *         </note>
        */
    export interface GeofenceGeometry {
            /**
                * <p>An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices,
                *             where the first and last vertex are the same to form a closed boundary. Each vertex is a
                *             2-dimensional point of the form: <code>[longitude, latitude]</code>. </p>
                *         <p>The first linear ring is an outer ring, describing the polygon's boundary. Subsequent
                *             linear rings may be inner or outer rings to describe holes and islands. Outer rings must
                *             list their vertices in counter-clockwise order around the ring's center, where the left
                *             side is the polygon's exterior. Inner rings must list their vertices in clockwise order,
                *             where the left side is the polygon's interior.</p>
                */
            Polygon?: number[][][];
    }
    export namespace GeofenceGeometry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GeofenceGeometry) => any;
    }
    /**
        * <p>Contains geofence geometry details. </p>
        */
    export interface BatchPutGeofenceRequestEntry {
            /**
                * <p>The identifier for the geofence to be stored in a given geofence collection.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>Contains the polygon details to specify the position of the geofence.</p>
                *         <note>
                *             <p>Each <a href="https://docs.aws.amazon.com/location-geofences/latest/APIReference/API_GeofenceGeometry.html">geofence polygon</a> can have a maximum of 1,000 vertices.</p>
                *         </note>
                */
            Geometry: GeofenceGeometry | undefined;
    }
    export namespace BatchPutGeofenceRequestEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutGeofenceRequestEntry) => any;
    }
    export interface BatchPutGeofenceRequest {
            /**
                * <p>The geofence collection storing the geofences.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The batch of geofences to be stored in a geofence collection.</p>
                */
            Entries: BatchPutGeofenceRequestEntry[] | undefined;
    }
    export namespace BatchPutGeofenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutGeofenceRequest) => any;
    }
    /**
        * <p>Contains error details for each geofence that failed to be stored in a given geofence
        *             collection.</p>
        */
    export interface BatchPutGeofenceError {
            /**
                * <p>The geofence associated with the error message.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>Contains details associated to the batch error.</p>
                */
            Error: BatchItemError | undefined;
    }
    export namespace BatchPutGeofenceError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutGeofenceError) => any;
    }
    /**
        * <p>Contains a summary of each geofence that was successfully stored in a given geofence
        *             collection.</p>
        */
    export interface BatchPutGeofenceSuccess {
            /**
                * <p>The geofence successfully stored in a geofence collection.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>The timestamp for when the geofence was stored in a geofence collection in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace BatchPutGeofenceSuccess {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutGeofenceSuccess) => any;
    }
    export interface BatchPutGeofenceResponse {
            /**
                * <p>Contains each geofence that was successfully stored in a geofence collection.</p>
                */
            Successes: BatchPutGeofenceSuccess[] | undefined;
            /**
                * <p>Contains additional error details for each geofence that failed to be stored in a
                *             geofence collection.</p>
                */
            Errors: BatchPutGeofenceError[] | undefined;
    }
    export namespace BatchPutGeofenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutGeofenceResponse) => any;
    }
    export interface BatchUpdateDevicePositionRequest {
            /**
                * <p>The name of the tracker resource to update.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>Contains the position update details for each device.</p>
                */
            Updates: DevicePositionUpdate[] | undefined;
    }
    export namespace BatchUpdateDevicePositionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateDevicePositionRequest) => any;
    }
    /**
        * <p>Contains  error details for each device that failed to update its position.</p>
        */
    export interface BatchUpdateDevicePositionError {
            /**
                * <p>The device associated with the failed location update.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The timestamp at which the device position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            SampleTime: Date | undefined;
            /**
                * <p>Contains details related to the error code such as the error code and error
                *             message.</p>
                */
            Error: BatchItemError | undefined;
    }
    export namespace BatchUpdateDevicePositionError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateDevicePositionError) => any;
    }
    export interface BatchUpdateDevicePositionResponse {
            /**
                * <p>Contains  error details for each device that failed to update its position.</p>
                */
            Errors: BatchUpdateDevicePositionError[] | undefined;
    }
    export namespace BatchUpdateDevicePositionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateDevicePositionResponse) => any;
    }
    /**
        * <p>Contains details about additional route preferences for requests that specify
        *                 <code>TravelMode</code> as <code>Car</code>.</p>
        */
    export interface CalculateRouteCarModeOptions {
            /**
                * <p>Avoids ferries when calculating routes.</p>
                *         <p>Default Value: <code>false</code>
                *          </p>
                *         <p>Valid Values: <code>false</code> | <code>true</code>
                *          </p>
                */
            AvoidFerries?: boolean;
            /**
                * <p>Avoids tolls when calculating routes.</p>
                *         <p>Default Value: <code>false</code>
                *          </p>
                *         <p>Valid Values: <code>false</code> | <code>true</code>
                *          </p>
                */
            AvoidTolls?: boolean;
    }
    export namespace CalculateRouteCarModeOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteCarModeOptions) => any;
    }
    export type DistanceUnit = "Kilometers" | "Miles";
    export type TravelMode = "Car" | "Truck" | "Walking";
    export type DimensionUnit = "Feet" | "Meters";
    /**
        * <p>Contains details about the truck dimensions in the unit of measurement that you
        *             specify. Used to filter out roads that can't support or allow the specified dimensions
        *             for requests that specify <code>TravelMode</code> as <code>Truck</code>.</p>
        */
    export interface TruckDimensions {
            /**
                * <p>The length of the truck.</p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>15.5</code>.</p>
                *             </li>
                *          </ul>
                */
            Length?: number;
            /**
                * <p>The height of the truck.</p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>4.5</code>.</p>
                *             </li>
                *          </ul>
                */
            Height?: number;
            /**
                * <p>The width of the truck.</p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>4.5</code>.</p>
                *             </li>
                *          </ul>
                */
            Width?: number;
            /**
                * <p> Specifies the unit of measurement for the truck dimensions.</p>
                *         <p>Default Value: <code>Meters</code>
                *          </p>
                */
            Unit?: DimensionUnit | string;
    }
    export namespace TruckDimensions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TruckDimensions) => any;
    }
    export type VehicleWeightUnit = "Kilograms" | "Pounds";
    /**
        * <p>Contains details about the truck's weight specifications. Used to avoid roads that
        *             can't support or allow the total weight for requests that specify
        *                 <code>TravelMode</code> as <code>Truck</code>.</p>
        */
    export interface TruckWeight {
            /**
                * <p>The total weight of the truck. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>3500</code>.</p>
                *             </li>
                *          </ul>
                */
            Total?: number;
            /**
                * <p>The unit of measurement to use for the truck weight.</p>
                *         <p>Default Value: <code>Kilograms</code>
                *          </p>
                */
            Unit?: VehicleWeightUnit | string;
    }
    export namespace TruckWeight {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TruckWeight) => any;
    }
    /**
        * <p>Contains details about additional route preferences for requests that specify
        *                 <code>TravelMode</code> as <code>Truck</code>.</p>
        */
    export interface CalculateRouteTruckModeOptions {
            /**
                * <p>Avoids ferries when calculating routes.</p>
                *         <p>Default Value: <code>false</code>
                *          </p>
                *         <p>Valid Values: <code>false</code> | <code>true</code>
                *          </p>
                */
            AvoidFerries?: boolean;
            /**
                * <p>Avoids tolls when calculating routes.</p>
                *         <p>Default Value: <code>false</code>
                *          </p>
                *         <p>Valid Values: <code>false</code> | <code>true</code>
                *          </p>
                */
            AvoidTolls?: boolean;
            /**
                * <p>Specifies the truck's dimension specifications including length, height, width, and
                *             unit of measurement. Used to avoid roads that can't support the truck's
                *             dimensions.</p>
                */
            Dimensions?: TruckDimensions;
            /**
                * <p>Specifies the truck's weight specifications including total weight and unit of
                *             measurement. Used to avoid roads that can't support the truck's weight.</p>
                */
            Weight?: TruckWeight;
    }
    export namespace CalculateRouteTruckModeOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteTruckModeOptions) => any;
    }
    export interface CalculateRouteRequest {
            /**
                * <p>The name of the route calculator resource that you want to use to calculate the route.
                *         </p>
                */
            CalculatorName: string | undefined;
            /**
                * <p>The start position for the route. Defined in <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84">World Geodetic
                *             System (WGS 84)</a> format:
                *                 <code>[longitude, latitude]</code>.</p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>[-123.115, 49.285]</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>If you specify a departure that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position
                *                     to the nearest road</a>. If Esri is the provider for your route calculator,
                *                 specifying a route that is longer than 400 km returns a <code>400
                *                     RoutesValidationException</code> error.</p>
                *         </note>
                *         <p>Valid Values: <code>[-180 to 180,-90 to 90]</code>
                *          </p>
                */
            DeparturePosition: number[] | undefined;
            /**
                * <p>The finish position for the route. Defined in <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84">World Geodetic
                *             System (WGS 84)</a> format:
                *                 <code>[longitude, latitude]</code>.</p>
                *         <ul>
                *             <li>
                *                 <p> For example, <code>[-122.339, 47.615]</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>If you specify a destination that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position
                *                     to the nearest road</a>. </p>
                *         </note>
                *         <p>Valid Values: <code>[-180 to 180,-90 to 90]</code>
                *          </p>
                */
            DestinationPosition: number[] | undefined;
            /**
                * <p>Specifies an ordered list of up to 23 intermediate positions to include along a route
                *             between the departure position and destination position. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, from the <code>DeparturePosition</code>
                *                     <code>[-123.115, 49.285]</code>, the route follows the order that the waypoint
                *                     positions are given <code>[[-122.757, 49.0021],[-122.349, 47.620]]</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>If you specify a waypoint position that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position
                *                     to the nearest road</a>. </p>
                *             <p>Specifying more than 23 waypoints returns a <code>400 ValidationException</code>
                *                 error.</p>
                *             <p>If Esri is the provider for your route calculator, specifying a route that is
                *                 longer than 400 km returns a <code>400 RoutesValidationException</code>
                *                 error.</p>
                *         </note>
                *         <p>Valid Values: <code>[-180 to 180,-90 to 90]</code>
                *          </p>
                */
            WaypointPositions?: number[][];
            /**
                * <p>Specifies the mode of transport when calculating a route. Used in estimating the speed
                *             of travel and road compatibility.</p>
                *         <p>The <code>TravelMode</code> you specify also determines how you specify route
                *             preferences: </p>
                *         <ul>
                *             <li>
                *                 <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code>
                *                     parameter.</p>
                *             </li>
                *             <li>
                *                 <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code>
                *                     parameter.</p>
                *             </li>
                *          </ul>
                *         <p>Default Value: <code>Car</code>
                *          </p>
                */
            TravelMode?: TravelMode | string;
            /**
                * <p>Specifies the desired time of departure. Uses the given time to calculate the route.
                *             Otherwise, the best time of day to travel with the best traffic conditions is used to
                *             calculate the route.</p>
                *         <note>
                *             <p>Setting a departure time in the past returns a <code>400
                *                     ValidationException</code> error.</p>
                *         </note>
                *         <ul>
                *             <li>
                *                 <p>In <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO
                *                         8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example,
                *                         <code>2020–07-2T12:15:20.000Z+01:00</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            DepartureTime?: Date;
            /**
                * <p>Sets the time of departure as the current time. Uses the current time to calculate a
                *             route. Otherwise, the best time of day to travel with the best traffic conditions is
                *             used to calculate the route.</p>
                *         <p>Default Value: <code>false</code>
                *          </p>
                *         <p>Valid Values: <code>false</code> | <code>true</code>
                *          </p>
                */
            DepartNow?: boolean;
            /**
                * <p>Set the unit system to specify the distance.</p>
                *         <p>Default Value: <code>Kilometers</code>
                *          </p>
                */
            DistanceUnit?: DistanceUnit | string;
            /**
                * <p>Set to include the geometry details in the result for each path between a pair of
                *             positions.</p>
                *         <p>Default Value: <code>false</code>
                *          </p>
                *         <p>Valid Values: <code>false</code> | <code>true</code>
                *          </p>
                */
            IncludeLegGeometry?: boolean;
            /**
                * <p>Specifies route preferences when traveling by <code>Car</code>, such as avoiding
                *             routes that use ferries or tolls.</p>
                *         <p>Requirements: <code>TravelMode</code> must be specified as <code>Car</code>.</p>
                */
            CarModeOptions?: CalculateRouteCarModeOptions;
            /**
                * <p>Specifies route preferences when traveling by <code>Truck</code>, such as avoiding
                *             routes that use ferries or tolls, and truck specifications to consider when choosing an
                *             optimal road.</p>
                *         <p>Requirements: <code>TravelMode</code> must be specified as <code>Truck</code>.</p>
                */
            TruckModeOptions?: CalculateRouteTruckModeOptions;
    }
    export namespace CalculateRouteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteRequest) => any;
    }
    /**
        * <p>Contains the geometry details for each path between a pair of positions. Used in
        *             plotting a route leg on a map.</p>
        */
    export interface LegGeometry {
            /**
                * <p>An ordered list of positions used to plot a route on a map. </p>
                *         <p>The first position is closest to the start position for the leg, and the last position
                *             is the closest to the end position for the leg.</p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>[[-123.117, 49.284],[-123.115, 49.285],[-123.115,
                *                         49.285]]</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            LineString?: number[][];
    }
    export namespace LegGeometry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LegGeometry) => any;
    }
    /**
        * <p> Represents an element of a leg within a route. A step contains instructions for how
        *             to move to the next step in the leg. </p>
        */
    export interface Step {
            /**
                * <p>The starting position of a step. If the position is the first step in the leg, this
                *             position is the same as the start position of the leg.</p>
                */
            StartPosition: number[] | undefined;
            /**
                * <p>The end position of a step. If the position the last step in the leg, this position is
                *             the same as the end position of the leg.</p>
                */
            EndPosition: number[] | undefined;
            /**
                * <p>The travel distance between the step's <code>StartPosition</code> and
                *                 <code>EndPosition</code>.</p>
                */
            Distance: number | undefined;
            /**
                * <p>The estimated travel time, in seconds, from the step's <code>StartPosition</code> to
                *             the <code>EndPosition</code>. . The travel mode and departure time that you specify in
                *             the request determines the calculated time.</p>
                */
            DurationSeconds: number | undefined;
            /**
                * <p>Represents the start position, or index, in a sequence of steps within the leg's line
                *             string geometry. For example, the index of the first step in a leg geometry is
                *                 <code>0</code>. </p>
                *         <p>Included in the response for queries that set <code>IncludeLegGeometry</code> to
                *                 <code>True</code>. </p>
                */
            GeometryOffset?: number;
    }
    export namespace Step {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Step) => any;
    }
    /**
        * <p>Contains the calculated route's details for each path between a pair of positions. The
        *             number of legs returned corresponds to one fewer than the total number of positions in
        *             the request. </p>
        *         <p>For example, a route with a departure position and destination position returns one
        *             leg with the positions <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">snapped to a nearby
        *                 road</a>:</p>
        *         <ul>
        *             <li>
        *                 <p>The <code>StartPosition</code> is the departure position.</p>
        *             </li>
        *             <li>
        *                 <p>The <code>EndPosition</code> is the destination position.</p>
        *             </li>
        *          </ul>
        *         <p>A route with a waypoint between the departure and destination position returns two
        *             legs with the positions snapped to a nearby road:</p>
        *         <ul>
        *             <li>
        *                 <p>Leg 1: The <code>StartPosition</code> is the departure position . The
        *                         <code>EndPosition</code> is the waypoint positon.</p>
        *             </li>
        *             <li>
        *                 <p>Leg 2: The <code>StartPosition</code> is the waypoint position. The
        *                         <code>EndPosition</code> is the destination position.</p>
        *             </li>
        *          </ul>
        */
    export interface Leg {
            /**
                * <p>The starting position of the leg. Follows the format
                *             <code>[longitude,latitude]</code>.</p>
                *         <note>
                *             <p>If the <code>StartPosition</code> isn't located on a road, it's <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">snapped to a
                *                     nearby road</a>. </p>
                *         </note>
                */
            StartPosition: number[] | undefined;
            /**
                * <p>The terminating position of the leg. Follows the format
                *                 <code>[longitude,latitude]</code>.</p>
                *         <note>
                *             <p>If the <code>EndPosition</code> isn't located on a road, it's <a href="https://docs.aws.amazon.com/location/latest/developerguide/nap-to-nearby-road.html">snapped to a nearby
                *                     road</a>. </p>
                *         </note>
                */
            EndPosition: number[] | undefined;
            /**
                * <p>The distance between the leg's <code>StartPosition</code> and <code>EndPosition</code>
                *             along a calculated route. </p>
                *         <ul>
                *             <li>
                *                 <p>The default measurement is <code>Kilometers</code> unless the request
                *                     specifies a <code>DistanceUnit</code> of <code>Miles</code>.</p>
                *             </li>
                *          </ul>
                */
            Distance: number | undefined;
            /**
                * <p>The estimated travel time between the leg's <code>StartPosition</code> and
                *                 <code>EndPosition</code>. The travel mode and departure time that you specify in the
                *             request determines the calculated time.</p>
                */
            DurationSeconds: number | undefined;
            /**
                * <p>Contains the calculated route's path as a linestring geometry.</p>
                */
            Geometry?: LegGeometry;
            /**
                * <p>Contains a list of steps, which represent subsections of a leg. Each step provides
                *             instructions for how to move to the next step in the leg such as the step's start
                *             position, end position, travel distance, travel duration, and geometry offset.</p>
                */
            Steps: Step[] | undefined;
    }
    export namespace Leg {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Leg) => any;
    }
    /**
        * <p>A summary of the calculated route.</p>
        */
    export interface CalculateRouteSummary {
            /**
                * <p>Specifies a geographical box surrounding a route. Used to zoom into a route when
                *             displaying it in a map. For example, <code>[min x, min y, max x, max y]</code>.</p>
                *         <p>The first 2 <code>bbox</code> parameters describe the lower southwest corner: </p>
                *         <ul>
                *             <li>
                *                 <p>The first <code>bbox</code> position is the X coordinate or longitude of the
                *                     lower southwest corner. </p>
                *             </li>
                *             <li>
                *                 <p>The second <code>bbox</code> position is the Y coordinate or latitude of the
                *                     lower southwest corner. </p>
                *             </li>
                *          </ul>
                *         <p>The next 2 <code>bbox</code> parameters describe the upper northeast corner: </p>
                *         <ul>
                *             <li>
                *                 <p>The third <code>bbox</code> position is the X coordinate, or longitude of the
                *                     upper northeast corner. </p>
                *             </li>
                *             <li>
                *                 <p>The fourth <code>bbox</code> position is the Y coordinate, or latitude of the
                *                     upper northeast corner. </p>
                *             </li>
                *          </ul>
                */
            RouteBBox: number[] | undefined;
            /**
                * <p>The data provider of traffic and road network data used to calculate the route.
                *             Indicates one of the available providers:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>The total distance covered by the route. The sum of the distance travelled between
                *             every stop on the route.</p>
                *         <note>
                *             <p>If Esri is the data source for the route calculator, the route distance can’t be
                *                 greater than 400 km. If the route exceeds 400 km, the response is a <code>400
                *                     RoutesValidationException</code> error.</p>
                *         </note>
                */
            Distance: number | undefined;
            /**
                * <p>The total travel time for the route measured in seconds. The sum of the travel time
                *             between every stop on the
                *             route.</p>
                */
            DurationSeconds: number | undefined;
            /**
                * <p>The unit of measurement for route distances.</p>
                */
            DistanceUnit: DistanceUnit | string | undefined;
    }
    export namespace CalculateRouteSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteSummary) => any;
    }
    /**
        * <p>Returns the result of the route calculation. Metadata includes legs and route
        *             summary.</p>
        */
    export interface CalculateRouteResponse {
            /**
                * <p>Contains details about each path between a pair of positions included along a route
                *             such as: <code>StartPosition</code>, <code>EndPosition</code>, <code>Distance</code>,
                *                 <code>DurationSeconds</code>, <code>Geometry</code>, and <code>Steps</code>. The
                *             number of legs returned corresponds to one fewer than the total number of positions in
                *             the request. </p>
                *         <p>For example, a route with a departure position and destination position returns one
                *             leg with the positions <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">snapped to a nearby
                *                 road</a>:</p>
                *         <ul>
                *             <li>
                *                 <p>The <code>StartPosition</code> is the departure position.</p>
                *             </li>
                *             <li>
                *                 <p>The <code>EndPosition</code> is the destination position.</p>
                *             </li>
                *          </ul>
                *         <p>A route with a waypoint between the departure and destination position returns two
                *             legs with the positions snapped to a nearby road:</p>
                *         <ul>
                *             <li>
                *                 <p>Leg 1: The <code>StartPosition</code> is the departure position . The
                *                         <code>EndPosition</code> is the waypoint positon.</p>
                *             </li>
                *             <li>
                *                 <p>Leg 2: The <code>StartPosition</code> is the waypoint position. The
                *                         <code>EndPosition</code> is the destination position.</p>
                *             </li>
                *          </ul>
                */
            Legs: Leg[] | undefined;
            /**
                * <p>Contains information about the whole route, such as: <code>RouteBBox</code>,
                *                 <code>DataSource</code>, <code>Distance</code>, <code>DistanceUnit</code>, and
                *                 <code>DurationSeconds</code>.</p>
                */
            Summary: CalculateRouteSummary | undefined;
    }
    export namespace CalculateRouteResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteResponse) => any;
    }
    export interface CalculateRouteMatrixRequest {
            /**
                * <p>The name of the route calculator resource that you want to use to calculate the route
                *             matrix. </p>
                */
            CalculatorName: string | undefined;
            /**
                * <p>The list of departure (origin) positions for the route matrix. An array of points,
                *             each of which is itself a 2-value array defined in <a href="https://earth-info.nga.mil/GandG/wgs84/index.html">WGS 84</a> format:
                *                 <code>[longitude, latitude]</code>. For example, <code>[-123.115,
                *             49.285]</code>.</p>
                *         <important>
                *             <p>Depending on the data provider selected in the route calculator resource there may
                *                 be additional restrictions on the inputs you can choose. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits"> Position restrictions</a> in the <i>Amazon Location Service Developer
                *                     Guide</i>.</p>
                *         </important>
                *         <note>
                *             <p>For route calculators that use Esri as the data provider, if you specify a
                *                 departure that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html"> moves the
                *                     position to the nearest road</a>. The snapped value is available in the
                *                 result in <code>SnappedDeparturePositions</code>.</p>
                *         </note>
                *         <p>Valid Values: <code>[-180 to 180,-90 to 90]</code>
                *          </p>
                */
            DeparturePositions: number[][] | undefined;
            /**
                * <p>The list of destination positions for the route matrix. An array of points, each of
                *             which is itself a 2-value array defined in <a href="https://earth-info.nga.mil/GandG/wgs84/index.html">WGS 84</a> format:
                *                 <code>[longitude, latitude]</code>. For example, <code>[-122.339,
                *             47.615]</code>
                *          </p>
                *         <important>
                *             <p>Depending on the data provider selected in the route calculator resource there may
                *                 be additional restrictions on the inputs you can choose. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits"> Position restrictions</a> in the <i>Amazon Location Service Developer
                *                     Guide</i>.</p>
                *         </important>
                *         <note>
                *             <p>For route calculators that use Esri as the data provider, if you specify a
                *                 destination that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html"> moves the
                *                     position to the nearest road</a>. The snapped value is available in the
                *                 result in <code>SnappedDestinationPositions</code>.</p>
                *         </note>
                *         <p>Valid Values: <code>[-180 to 180,-90 to 90]</code>
                *          </p>
                */
            DestinationPositions: number[][] | undefined;
            /**
                * <p>Specifies the mode of transport when calculating a route. Used in estimating the speed
                *             of travel and road compatibility.</p>
                *         <p>The <code>TravelMode</code> you specify also determines how you specify route
                *             preferences: </p>
                *         <ul>
                *             <li>
                *                 <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code>
                *                     parameter.</p>
                *             </li>
                *             <li>
                *                 <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code>
                *                     parameter.</p>
                *             </li>
                *          </ul>
                *         <p>Default Value: <code>Car</code>
                *          </p>
                */
            TravelMode?: TravelMode | string;
            /**
                * <p>Specifies the desired time of departure. Uses the given time to calculate the route
                *             matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If
                *             neither is set, the best time of day to travel with the best traffic conditions is used
                *             to calculate the route matrix.</p>
                *         <note>
                *             <p>Setting a departure time in the past returns a <code>400
                *                     ValidationException</code> error.</p>
                *         </note>
                *         <ul>
                *             <li>
                *                 <p>In <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO
                *                         8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example,
                *                         <code>2020–07-2T12:15:20.000Z+01:00</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            DepartureTime?: Date;
            /**
                * <p>Sets the time of departure as the current time. Uses the current time to calculate the
                *             route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>.
                *             If neither is set, the best time of day to travel with the best traffic conditions is
                *             used to calculate the route matrix.</p>
                *         <p>Default Value: <code>false</code>
                *          </p>
                *         <p>Valid Values: <code>false</code> | <code>true</code>
                *          </p>
                */
            DepartNow?: boolean;
            /**
                * <p>Set the unit system to specify the distance.</p>
                *         <p>Default Value: <code>Kilometers</code>
                *          </p>
                */
            DistanceUnit?: DistanceUnit | string;
            /**
                * <p>Specifies route preferences when traveling by <code>Car</code>, such as avoiding
                *             routes that use ferries or tolls.</p>
                *         <p>Requirements: <code>TravelMode</code> must be specified as <code>Car</code>.</p>
                */
            CarModeOptions?: CalculateRouteCarModeOptions;
            /**
                * <p>Specifies route preferences when traveling by <code>Truck</code>, such as avoiding
                *             routes that use ferries or tolls, and truck specifications to consider when choosing an
                *             optimal road.</p>
                *         <p>Requirements: <code>TravelMode</code> must be specified as <code>Truck</code>.</p>
                */
            TruckModeOptions?: CalculateRouteTruckModeOptions;
    }
    export namespace CalculateRouteMatrixRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteMatrixRequest) => any;
    }
    export type RouteMatrixErrorCode = "DeparturePositionNotFound" | "DestinationPositionNotFound" | "OtherValidationError" | "PositionsNotFound" | "RouteNotFound" | "RouteTooLong";
    /**
        * <p>An error corresponding to the calculation of a route between the
        *                 <code>DeparturePosition</code> and <code>DestinationPosition</code>.</p>
        *         <p>The error code can be one of the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>RouteNotFound</code> - Unable to find a valid route with the given
        *                     parameters.</p>
        *             </li>
        *          </ul>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>RouteTooLong</code> - Route calculation went beyond the maximum size of
        *                     a route and was terminated before completion.</p>
        *             </li>
        *          </ul>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>PositionsNotFound</code> - One or more of the input positions were not
        *                     found on the route network.</p>
        *             </li>
        *          </ul>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>DestinationPositionNotFound</code> - The destination position was not
        *                     found on the route network.</p>
        *             </li>
        *          </ul>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>DeparturePositionNotFound</code> - The departure position was not found
        *                     on the route network.</p>
        *             </li>
        *          </ul>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>OtherValidationError</code> - The given inputs were not valid or a route
        *                     was not found. More information is given in the error
        *                     <code>Message</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface RouteMatrixEntryError {
            /**
                * <p>The type of error which occurred for the route calculation.</p>
                */
            Code: RouteMatrixErrorCode | string | undefined;
            /**
                * <p>A message about the error that occurred for the route calculation.</p>
                */
            Message?: string;
    }
    export namespace RouteMatrixEntryError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteMatrixEntryError) => any;
    }
    /**
        * <p>The result for the calculated route of one <code>DeparturePosition</code>
        *             <code>DestinationPosition</code> pair.</p>
        */
    export interface RouteMatrixEntry {
            /**
                * <p>The total distance of travel for the route.</p>
                */
            Distance?: number;
            /**
                * <p>The expected duration of travel for the route.</p>
                */
            DurationSeconds?: number;
            /**
                * <p>An error corresponding to the calculation of a route between the
                *                 <code>DeparturePosition</code> and <code>DestinationPosition</code>.</p>
                */
            Error?: RouteMatrixEntryError;
    }
    export namespace RouteMatrixEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteMatrixEntry) => any;
    }
    /**
        * <p>A summary of the calculated route matrix.</p>
        */
    export interface CalculateRouteMatrixSummary {
            /**
                * <p>The data provider of traffic and road network data used to calculate the routes.
                *             Indicates one of the available providers:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data
                *                 providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>The count of cells in the route matrix. Equal to the number of
                *                 <code>DeparturePositions</code> multiplied by the number of
                *                 <code>DestinationPositions</code>.</p>
                */
            RouteCount: number | undefined;
            /**
                * <p>The count of error results in the route matrix. If this number is 0, all routes were
                *             calculated successfully.</p>
                */
            ErrorCount: number | undefined;
            /**
                * <p>The unit of measurement for route distances.</p>
                */
            DistanceUnit: DistanceUnit | string | undefined;
    }
    export namespace CalculateRouteMatrixSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteMatrixSummary) => any;
    }
    /**
        * <p>Returns the result of the route matrix calculation.</p>
        */
    export interface CalculateRouteMatrixResponse {
            /**
                * <p>The calculated route matrix containing the results for all pairs of
                *                 <code>DeparturePositions</code> to <code>DestinationPositions</code>. Each row
                *             corresponds to one entry in <code>DeparturePositions</code>. Each entry in the row
                *             corresponds to the route from that entry in <code>DeparturePositions</code> to an entry
                *             in <code>DestinationPositions</code>. </p>
                */
            RouteMatrix: RouteMatrixEntry[][] | undefined;
            /**
                * <p>For routes calculated using an Esri route calculator resource, departure positions are
                *             snapped to the closest road. For Esri route calculator resources, this returns the list
                *             of departure/origin positions used for calculation of the
                *             <code>RouteMatrix</code>.</p>
                */
            SnappedDeparturePositions?: number[][];
            /**
                * <p>The list of destination positions for the route matrix used for calculation of the
                *                 <code>RouteMatrix</code>.</p>
                */
            SnappedDestinationPositions?: number[][];
            /**
                * <p>Contains information about the route matrix, <code>DataSource</code>,
                *                 <code>DistanceUnit</code>, <code>RouteCount</code> and
                *             <code>ErrorCount</code>.</p>
                */
            Summary: CalculateRouteMatrixSummary | undefined;
    }
    export namespace CalculateRouteMatrixResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculateRouteMatrixResponse) => any;
    }
    export type PricingPlan = "MobileAssetManagement" | "MobileAssetTracking" | "RequestBasedUsage";
    export interface CreateGeofenceCollectionRequest {
            /**
                * <p>A custom name for the geofence collection.</p>
                *         <p>Requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods
                *                     (.), and underscores (_). </p>
                *             </li>
                *             <li>
                *                 <p>Must be a unique geofence collection name.</p>
                *             </li>
                *             <li>
                *                 <p>No spaces allowed. For example, <code>ExampleGeofenceCollection</code>.</p>
                *             </li>
                *          </ul>
                */
            CollectionName: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * @deprecated
                *
                * <p>This parameter is no longer used.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>An optional description for the geofence collection.</p>
                */
            Description?: string;
            /**
                * <p>Applies one or more tags to the geofence collection. A tag is a key-value pair helps
                *             manage, identify, search, and filter your resources by labelling them.</p>
                *         <p>Format: <code>"key" : "value"</code>
                *          </p>
                *         <p>Restrictions:</p>
                *         <ul>
                *             <li>
                *                 <p>Maximum 50 tags per resource</p>
                *             </li>
                *             <li>
                *                 <p>Each resource tag must be unique with a maximum of one value.</p>
                *             </li>
                *             <li>
                *                 <p>Maximum key length: 128 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                 <p>Maximum value length: 256 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                 <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters:
                *                     + - = . _ : / @. </p>
                *             </li>
                *             <li>
                *                 <p>Cannot use "aws:" as a prefix for a key.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A key identifier for an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html">AWS KMS customer managed key</a>. Enter a key ID, key ARN, alias name, or alias ARN.
                * 	</p>
                */
            KmsKeyId?: string;
    }
    export namespace CreateGeofenceCollectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGeofenceCollectionRequest) => any;
    }
    export interface CreateGeofenceCollectionResponse {
            /**
                * <p>The name for the geofence collection.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the geofence collection resource. Used when you
                *             need to specify a resource across all AWS. </p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollection</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CollectionArn: string | undefined;
            /**
                * <p>The timestamp for when the geofence collection was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            CreateTime: Date | undefined;
    }
    export namespace CreateGeofenceCollectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGeofenceCollectionResponse) => any;
    }
    /**
        * <p>Specifies the map tile style selected from an available provider.</p>
        */
    export interface MapConfiguration {
            /**
                * <p>Specifies the map style selected from an available data provider.</p>
                *         <p>Valid <a href="https://docs.aws.amazon.com/location/latest/developerguide/esri.html">Esri map styles</a>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>VectorEsriDarkGrayCanvas</code> – The Esri Dark Gray Canvas map style. A
                *                     vector basemap with a dark gray, neutral background with minimal colors, labels,
                *                     and features that's designed to draw attention to your thematic content. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RasterEsriImagery</code> – The Esri Imagery map style. A raster basemap
                *                     that provides one meter or better satellite and aerial imagery in many parts of
                *                     the world and lower resolution satellite imagery worldwide. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VectorEsriLightGrayCanvas</code> – The Esri Light Gray Canvas map style,
                *                     which provides a detailed vector basemap with a light gray, neutral background
                *                     style with minimal colors, labels, and features that's designed to draw
                *                     attention to your thematic content. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VectorEsriTopographic</code> – The Esri Light map style, which provides
                *                     a detailed vector basemap with a classic Esri map style.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VectorEsriStreets</code> – The Esri World Streets map style, which
                *                     provides a detailed vector basemap for the world symbolized with a classic Esri
                *                     street map style. The vector tile layer is similar in content and style to the
                *                     World Street Map raster map.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VectorEsriNavigation</code> – The Esri World Navigation map style, which
                *                     provides a detailed basemap for the world symbolized with a custom navigation
                *                     map style that's designed for use during the day in mobile devices.</p>
                *             </li>
                *          </ul>
                *         <p>Valid <a href="https://docs.aws.amazon.com/location/latest/developerguide/HERE.html">HERE
                *                 Technologies map styles</a>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>VectorHereBerlin</code> – The HERE Berlin map style is a high contrast
                *                     detailed base map of the world that blends 3D and 2D rendering.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VectorHereExplore</code> – A default HERE map style containing a
                *                     neutral, global map and its features including roads, buildings, landmarks,
                *                     and water features. It also now includes a fully designed map of Japan.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>VectorHereExploreTruck</code> – A global map containing truck
                *                     restrictions and attributes (e.g. width / height / HAZMAT) symbolized with
                *                     highlighted segments and icons on top of HERE Explore to support use cases
                *                     within transport and logistics.</p>
                *             </li>
                *          </ul>
                */
            Style: string | undefined;
    }
    export namespace MapConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MapConfiguration) => any;
    }
    export interface CreateMapRequest {
            /**
                * <p>The name for the map resource.</p>
                *         <p>Requirements:</p>
                *         <ul>
                *             <li>
                *                <p>Must contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p>
                *             </li>
                *             <li>
                *                <p>Must be a unique map resource name. </p>
                *             </li>
                *             <li>
                *                 <p>No spaces allowed. For example, <code>ExampleMap</code>.</p>
                *             </li>
                *          </ul>
                */
            MapName: string | undefined;
            /**
                * <p>Specifies the map style selected from an available data provider.</p>
                */
            Configuration: MapConfiguration | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>An optional description for the map resource.</p>
                */
            Description?: string;
            /**
                * <p>Applies one or more tags to the map resource. A tag is a key-value pair helps manage,
                *             identify, search, and filter your resources by labelling them.</p>
                *          <p>Format: <code>"key" : "value"</code>
                *          </p>
                *          <p>Restrictions:</p>
                *          <ul>
                *             <li>
                *                <p>Maximum 50 tags per resource</p>
                *             </li>
                *             <li>
                *                <p>Each resource tag must be unique with a maximum of one value.</p>
                *             </li>
                *             <li>
                *                <p>Maximum key length: 128 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                <p>Maximum value length:  256 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : /
                *                     @. </p>
                *             </li>
                *             <li>
                *                <p>Cannot use "aws:" as a prefix for a key.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateMapRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMapRequest) => any;
    }
    export interface CreateMapResponse {
            /**
                * <p>The name of the map resource.</p>
                */
            MapName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the map resource. Used to specify a resource across
                *             all AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                     <code>arn:aws:geo:region:account-id:maps/ExampleMap</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            MapArn: string | undefined;
            /**
                * <p>The timestamp for when the map resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
                */
            CreateTime: Date | undefined;
    }
    export namespace CreateMapResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMapResponse) => any;
    }
    export type IntendedUse = "SingleUse" | "Storage";
    /**
        * <p>Specifies the data storage option chosen for requesting Places.</p>
        *         <important>
        *             <p>When using Amazon Location Places:</p>
        *             <ul>
        *                <li>
        *                     <p>If using HERE Technologies as a data provider, you can't store results for
        *                         locations in Japan by setting <code>IntendedUse</code> to
        *                             <code>Storage</code>. parameter.</p>
        *                 </li>
        *                <li>
        *                     <p>Under the <code>MobileAssetTracking</code> or
        *                             <code>MobilAssetManagement</code> pricing plan, you can't store results
        *                         from your place index resources by setting <code>IntendedUse</code> to
        *                             <code>Storage</code>. This returns a validation exception error.</p>
        *                 </li>
        *             </ul>
        *             <p>For more information, see the <a href="https://aws.amazon.com/service-terms/">AWS Service Terms</a> for Amazon Location Service.</p>
        *         </important>
        */
    export interface DataSourceConfiguration {
            /**
                * <p>Specifies how the results of an operation will be stored by the caller. </p>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SingleUse</code> specifies that the results won't be stored. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Storage</code> specifies that the result can be cached or stored in a
                *                     database.</p>
                *             </li>
                *          </ul>
                *         <p>Default value: <code>SingleUse</code>
                *          </p>
                */
            IntendedUse?: IntendedUse | string;
    }
    export namespace DataSourceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceConfiguration) => any;
    }
    export interface CreatePlaceIndexRequest {
            /**
                * <p>The name of the place index resource. </p>
                *         <p>Requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods
                *                     (.), and underscores (_).</p>
                *             </li>
                *             <li>
                *                 <p>Must be a unique place index resource name.</p>
                *             </li>
                *             <li>
                *                 <p>No spaces allowed. For example, <code>ExamplePlaceIndex</code>.</p>
                *             </li>
                *          </ul>
                */
            IndexName: string | undefined;
            /**
                * <p>Specifies the geospatial data provider for the new place index.</p>
                *         <note>
                *             <p>This field is case-sensitive. Enter the valid values as shown. For example,
                *                 entering <code>HERE</code> returns an error.</p>
                *         </note>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code> – For additional information about <a href="https://docs.aws.amazon.com/location/latest/developerguide/esri.html">Esri</a>'s coverage in your region of interest, see <a href="https://developers.arcgis.com/rest/geocode/api-reference/geocode-coverage.htm">Esri details on geocoding coverage</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code> – For additional information about <a href="https://docs.aws.amazon.com/location/latest/developerguide/HERE.html">HERE
                *                         Technologies</a>' coverage in your region of interest, see <a href="https://developer.here.com/documentation/geocoder/dev_guide/topics/coverage-geocoder.html">HERE details on goecoding coverage</a>.</p>
                *                 <important>
                *                     <p>If you specify HERE Technologies (<code>Here</code>) as the data provider,
                *                         you may not <a href="https://docs.aws.amazon.com/location-places/latest/APIReference/API_DataSourceConfiguration.html">store results</a> for locations in Japan. For more information, see
                *                         the <a href="https://aws.amazon.com/service-terms/">AWS Service
                *                             Terms</a> for Amazon Location Service.</p>
                *                 </important>
                *             </li>
                *          </ul>
                *         <p>For additional information , see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Data
                *                 providers</a> on the <i>Amazon Location Service Developer Guide</i>.</p>
                */
            DataSource: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>The optional description for the place index resource.</p>
                */
            Description?: string;
            /**
                * <p>Specifies the data storage option requesting Places.</p>
                */
            DataSourceConfiguration?: DataSourceConfiguration;
            /**
                * <p>Applies one or more tags to the place index resource. A tag is a key-value pair that
                *             helps you manage, identify, search, and filter your resources.</p>
                *         <p>Format: <code>"key" : "value"</code>
                *          </p>
                *         <p>Restrictions:</p>
                *         <ul>
                *             <li>
                *                 <p>Maximum 50 tags per resource.</p>
                *             </li>
                *             <li>
                *                 <p>Each tag key must be unique and must have exactly one associated value.</p>
                *             </li>
                *             <li>
                *                 <p>Maximum key length: 128 Unicode characters in UTF-8.</p>
                *             </li>
                *             <li>
                *                 <p>Maximum value length: 256 Unicode characters in UTF-8.</p>
                *             </li>
                *             <li>
                *                 <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters:
                *                     + - = . _ : / @</p>
                *             </li>
                *             <li>
                *                 <p>Cannot use "aws:" as a prefix for a key.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreatePlaceIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePlaceIndexRequest) => any;
    }
    export interface CreatePlaceIndexResponse {
            /**
                * <p>The name for the place index resource.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the place index resource. Used to specify a
                *             resource across AWS. </p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:place-index/ExamplePlaceIndex</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            IndexArn: string | undefined;
            /**
                * <p>The timestamp for when the place index resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            CreateTime: Date | undefined;
    }
    export namespace CreatePlaceIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePlaceIndexResponse) => any;
    }
    export interface CreateRouteCalculatorRequest {
            /**
                * <p>The name of the route calculator resource. </p>
                *         <p>Requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>Can use alphanumeric characters (A–Z, a–z, 0–9) , hyphens (-), periods (.),
                *                     and underscores (_).</p>
                *             </li>
                *             <li>
                *                 <p>Must be a unique Route calculator resource name.</p>
                *             </li>
                *             <li>
                *                 <p>No spaces allowed. For example, <code>ExampleRouteCalculator</code>.</p>
                *             </li>
                *          </ul>
                */
            CalculatorName: string | undefined;
            /**
                * <p>Specifies the data provider of traffic and road network data.</p>
                *         <note>
                *             <p>This field is case-sensitive. Enter the valid values as shown. For example,
                *                 entering <code>HERE</code> returns an error. Route calculators that use Esri as a
                *                 data source only calculate routes that are shorter than 400 km.</p>
                *         </note>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code> – For additional information about <a href="https://docs.aws.amazon.com/location/latest/developerguide/esri.html">Esri</a>'s coverage in your region of interest, see <a href="https://doc.arcgis.com/en/arcgis-online/reference/network-coverage.htm">Esri details on street networks and traffic coverage</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code> – For additional information about <a href="https://docs.aws.amazon.com/location/latest/developerguide/HERE.html">HERE
                *                         Technologies</a>' coverage in your region of interest, see <a href="https://developer.here.com/documentation/routing-api/dev_guide/topics/coverage/car-routing.html">HERE car routing coverage</a> and <a href="https://developer.here.com/documentation/routing-api/dev_guide/topics/coverage/truck-routing.html">HERE truck routing coverage</a>.</p>
                *             </li>
                *          </ul>
                *         <p>For additional information , see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Data
                *                 providers</a> on the <i>Amazon Location Service Developer Guide</i>.</p>
                */
            DataSource: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>The optional description for the route calculator resource.</p>
                */
            Description?: string;
            /**
                * <p>Applies one or more tags to the route calculator resource. A tag is a key-value pair
                *             helps manage, identify, search, and filter your resources by labelling them.</p>
                *         <ul>
                *             <li>
                *                 <p>For example: { <code>"tag1" : "value1"</code>, <code>"tag2" :
                *                     "value2"</code>}</p>
                *             </li>
                *          </ul>
                *         <p>Format: <code>"key" : "value"</code>
                *          </p>
                *         <p>Restrictions:</p>
                *         <ul>
                *             <li>
                *                 <p>Maximum 50 tags per resource</p>
                *             </li>
                *             <li>
                *                 <p>Each resource tag must be unique with a maximum of one value.</p>
                *             </li>
                *             <li>
                *                 <p>Maximum key length: 128 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                 <p>Maximum value length: 256 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                 <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters:
                *                     + - = . _ : / @. </p>
                *             </li>
                *             <li>
                *                 <p>Cannot use "aws:" as a prefix for a key.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateRouteCalculatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRouteCalculatorRequest) => any;
    }
    export interface CreateRouteCalculatorResponse {
            /**
                * <p>The name of the route calculator resource. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>ExampleRouteCalculator</code>.</p>
                *             </li>
                *          </ul>
                */
            CalculatorName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the route calculator resource. Use the ARN when you
                *             specify a resource across all AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:route-calculator/ExampleCalculator</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CalculatorArn: string | undefined;
            /**
                * <p>The timestamp when the route calculator resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>2020–07-2T12:15:20.000Z+01:00</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CreateTime: Date | undefined;
    }
    export namespace CreateRouteCalculatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRouteCalculatorResponse) => any;
    }
    export type PositionFiltering = "AccuracyBased" | "DistanceBased" | "TimeBased";
    export interface CreateTrackerRequest {
            /**
                * <p>The name for the tracker resource.</p>
                *          <p>Requirements:</p>
                *          <ul>
                *             <li>
                *                <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).</p>
                *             </li>
                *             <li>
                *                <p>Must be a unique tracker resource name.</p>
                *             </li>
                *             <li>
                *                 <p>No spaces allowed. For example, <code>ExampleTracker</code>.</p>
                *             </li>
                *          </ul>
                */
            TrackerName: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *            <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>A key identifier for an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html">AWS KMS customer managed key</a>. Enter a key ID, key ARN, alias name, or alias ARN.</p>
                */
            KmsKeyId?: string;
            /**
                * @deprecated
                *
                * <p>This parameter is no longer used.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>An optional description for the tracker resource.</p>
                */
            Description?: string;
            /**
                * <p>Applies one or more tags to the tracker resource. A tag is a key-value pair helps
                *             manage, identify, search, and filter your resources by labelling them.</p>
                *         <p>Format: <code>"key" : "value"</code>
                *          </p>
                *         <p>Restrictions:</p>
                *         <ul>
                *             <li>
                *                 <p>Maximum 50 tags per resource</p>
                *             </li>
                *             <li>
                *                 <p>Each resource tag must be unique with a maximum of one value.</p>
                *             </li>
                *             <li>
                *                 <p>Maximum key length: 128 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                 <p>Maximum value length: 256 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                 <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters:
                *                     + - = . _ : / @. </p>
                *             </li>
                *             <li>
                *                 <p>Cannot use "aws:" as a prefix for a key.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Specifies the position filtering for the tracker resource.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>TimeBased</code> - Location updates are evaluated against linked geofence collections,
                *                     but not every location update is stored. If your update frequency is more often than 30 seconds,
                *                     only one update per 30 seconds is stored for each unique device ID.
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>DistanceBased</code> - If the device has moved less than 30 m (98.4 ft), location updates are
                *                     ignored. Location updates within this area are neither evaluated against linked geofence collections, nor stored.
                *                     This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through.
                *                     Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map.
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>AccuracyBased</code> - If the device has moved less than the measured accuracy,
                *                     location updates are ignored. For example, if two consecutive updates from a device
                *                     have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device
                *                     has moved less than 15 m. Ignored location updates are neither evaluated against
                *                     linked geofence collections, nor stored. This can reduce the effects of GPS noise
                *                     when displaying device trajectories on a map, and can help control your costs by reducing the
                *                     number of geofence evaluations.
                *                 </p>
                *             </li>
                *          </ul>
                *         <p>This field is optional. If not specified, the default value is <code>TimeBased</code>.</p>
                */
            PositionFiltering?: PositionFiltering | string;
    }
    export namespace CreateTrackerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrackerRequest) => any;
    }
    export interface CreateTrackerResponse {
            /**
                * <p>The name of the tracker resource.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify
                *             a resource across all AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:tracker/ExampleTracker</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            TrackerArn: string | undefined;
            /**
                * <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            CreateTime: Date | undefined;
    }
    export namespace CreateTrackerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrackerResponse) => any;
    }
    export interface DeleteGeofenceCollectionRequest {
            /**
                * <p>The name of the geofence collection to be deleted.</p>
                */
            CollectionName: string | undefined;
    }
    export namespace DeleteGeofenceCollectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGeofenceCollectionRequest) => any;
    }
    export interface DeleteGeofenceCollectionResponse {
    }
    export namespace DeleteGeofenceCollectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGeofenceCollectionResponse) => any;
    }
    export interface DeleteMapRequest {
            /**
                * <p>The name of the map resource to be deleted.</p>
                */
            MapName: string | undefined;
    }
    export namespace DeleteMapRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMapRequest) => any;
    }
    export interface DeleteMapResponse {
    }
    export namespace DeleteMapResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMapResponse) => any;
    }
    export interface DeletePlaceIndexRequest {
            /**
                * <p>The name of the place index resource to be deleted.</p>
                */
            IndexName: string | undefined;
    }
    export namespace DeletePlaceIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePlaceIndexRequest) => any;
    }
    export interface DeletePlaceIndexResponse {
    }
    export namespace DeletePlaceIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePlaceIndexResponse) => any;
    }
    export interface DeleteRouteCalculatorRequest {
            /**
                * <p>The name of the route calculator resource to be deleted.</p>
                */
            CalculatorName: string | undefined;
    }
    export namespace DeleteRouteCalculatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRouteCalculatorRequest) => any;
    }
    export interface DeleteRouteCalculatorResponse {
    }
    export namespace DeleteRouteCalculatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRouteCalculatorResponse) => any;
    }
    export interface DeleteTrackerRequest {
            /**
                * <p>The name of the tracker resource to be deleted.</p>
                */
            TrackerName: string | undefined;
    }
    export namespace DeleteTrackerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrackerRequest) => any;
    }
    export interface DeleteTrackerResponse {
    }
    export namespace DeleteTrackerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrackerResponse) => any;
    }
    export interface DescribeGeofenceCollectionRequest {
            /**
                * <p>The name of the geofence collection.</p>
                */
            CollectionName: string | undefined;
    }
    export namespace DescribeGeofenceCollectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGeofenceCollectionRequest) => any;
    }
    export interface DescribeGeofenceCollectionResponse {
            /**
                * <p>The name of the geofence collection.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the geofence collection resource. Used when you
                *             need to specify a resource across all AWS. </p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollection</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CollectionArn: string | undefined;
            /**
                * <p>The optional description for the geofence collection.</p>
                */
            Description: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns an empty string.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>A key identifier for an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html">AWS KMS customer managed key</a> assigned to the Amazon Location resource</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Displays the key, value pairs of tags associated with this resource.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The timestamp for when the geofence resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the geofence collection was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace DescribeGeofenceCollectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGeofenceCollectionResponse) => any;
    }
    export interface DescribeMapRequest {
            /**
                * <p>The name of the map resource.</p>
                */
            MapName: string | undefined;
    }
    export namespace DescribeMapRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMapRequest) => any;
    }
    export interface DescribeMapResponse {
            /**
                * <p>The map style selected from an available provider.</p>
                */
            MapName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the map resource. Used to specify a resource across
                *             all AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                     <code>arn:aws:geo:region:account-id:maps/ExampleMap</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            MapArn: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>Specifies the data provider for the associated map tiles.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>Specifies the map tile style selected from a partner data provider.</p>
                */
            Configuration: MapConfiguration | undefined;
            /**
                * <p>The optional description for the map resource.</p>
                */
            Description: string | undefined;
            /**
                * <p>Tags associated with the map resource.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The timestamp for when the map resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the map resource was last update in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace DescribeMapResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMapResponse) => any;
    }
    export interface DescribePlaceIndexRequest {
            /**
                * <p>The name of the place index resource.</p>
                */
            IndexName: string | undefined;
    }
    export namespace DescribePlaceIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePlaceIndexRequest) => any;
    }
    export interface DescribePlaceIndexResponse {
            /**
                * <p>The name of the place index resource being described.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the place index resource. Used to specify a
                *             resource across AWS. </p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:place-index/ExamplePlaceIndex</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            IndexArn: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>The optional description for the place index resource.</p>
                */
            Description: string | undefined;
            /**
                * <p>The timestamp for when the place index resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the place index resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
            /**
                * <p>The data provider of geospatial data. Values can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>The specified data storage option for requesting Places.</p>
                */
            DataSourceConfiguration: DataSourceConfiguration | undefined;
            /**
                * <p>Tags associated with place index resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribePlaceIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePlaceIndexResponse) => any;
    }
    export interface DescribeRouteCalculatorRequest {
            /**
                * <p>The name of the route calculator resource.</p>
                */
            CalculatorName: string | undefined;
    }
    export namespace DescribeRouteCalculatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRouteCalculatorRequest) => any;
    }
    export interface DescribeRouteCalculatorResponse {
            /**
                * <p>The name of the route calculator resource being described.</p>
                */
            CalculatorName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the Route calculator resource. Use the ARN when you
                *             specify a resource across AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:route-calculator/ExampleCalculator</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CalculatorArn: string | undefined;
            /**
                * @deprecated
                *
                * <p>Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>The optional description of the route calculator resource.</p>
                */
            Description: string | undefined;
            /**
                * <p>The timestamp when the route calculator resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>2020–07-2T12:15:20.000Z+01:00</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp when the route calculator resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>2020–07-2T12:15:20.000Z+01:00</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            UpdateTime: Date | undefined;
            /**
                * <p>The data provider of traffic and road network data. Indicates one of the available
                *             providers:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>Tags associated with route calculator resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeRouteCalculatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRouteCalculatorResponse) => any;
    }
    export interface DescribeTrackerRequest {
            /**
                * <p>The name of the tracker resource.</p>
                */
            TrackerName: string | undefined;
    }
    export namespace DescribeTrackerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrackerRequest) => any;
    }
    export interface DescribeTrackerResponse {
            /**
                * <p>The name of the tracker resource.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify
                *             a resource across all AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:tracker/ExampleTracker</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            TrackerArn: string | undefined;
            /**
                * <p>The optional description for the tracker resource.</p>
                */
            Description: string | undefined;
            /**
                * @deprecated
                *
                * <p>Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns an empty string.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>The tags associated with the tracker resource.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the tracker resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
            /**
                * <p>A key identifier for an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html">AWS KMS customer managed key</a> assigned to the Amazon Location resource.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The position filtering method of the tracker resource.</p>
                */
            PositionFiltering?: PositionFiltering | string;
    }
    export namespace DescribeTrackerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrackerResponse) => any;
    }
    export interface DisassociateTrackerConsumerRequest {
            /**
                * <p>The name of the tracker resource to be dissociated from the consumer.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the geofence collection to be disassociated from
                *             the tracker resource. Used when you need to specify a resource across all AWS. </p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ConsumerArn: string | undefined;
    }
    export namespace DisassociateTrackerConsumerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTrackerConsumerRequest) => any;
    }
    export interface DisassociateTrackerConsumerResponse {
    }
    export namespace DisassociateTrackerConsumerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTrackerConsumerResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.</p>
                * 	        <ul>
                *             <li>
                *                <p>Format example: <code>arn:aws:geo:region:account-id:resourcetype/ExampleResource</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>Tags that have been applied to the specified resource. Tags are mapped from the tag key to the tag value: <code>"TagKey" : "TagValue"</code>.</p>
                * 	        <ul>
                *             <li>
                *                <p>Format example: <code>{"tag1" : "value1", "tag2" : "value2"} </code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource whose tags you want to update.</p>
                * 	        <ul>
                *             <li>
                *                <p>Format example: <code>arn:aws:geo:region:account-id:resourcetype/ExampleResource</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Applies one or more tags to specific resource. A tag is a key-value pair that helps you
                *             manage, identify, search, and filter your resources.</p>
                *         <p>Format: <code>"key" : "value"</code>
                *          </p>
                *         <p>Restrictions:</p>
                *         <ul>
                *             <li>
                *                 <p>Maximum 50 tags per resource.</p>
                *             </li>
                *             <li>
                *                 <p>Each tag key must be unique and must have exactly one associated value.</p>
                *             </li>
                *             <li>
                *                 <p>Maximum key length: 128 Unicode characters in UTF-8.</p>
                *             </li>
                *             <li>
                *                 <p>Maximum value length: 256 Unicode characters in UTF-8.</p>
                *             </li>
                *             <li>
                *                 <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + -
                *                     = . _ : / @</p>
                *             </li>
                *             <li>
                *                 <p>Cannot use "aws:" as a prefix for a key.</p>
                *             </li>
                *          </ul>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource from which you want to remove tags.</p>
                * 	        <ul>
                *             <li>
                *                <p>Format example: <code>arn:aws:geo:region:account-id:resourcetype/ExampleResource</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of tag keys to remove from the specified resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface GetGeofenceRequest {
            /**
                * <p>The geofence collection storing the target geofence.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The geofence you're retrieving details for.</p>
                */
            GeofenceId: string | undefined;
    }
    export namespace GetGeofenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGeofenceRequest) => any;
    }
    export interface GetGeofenceResponse {
            /**
                * <p>The geofence identifier.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>Contains the geofence geometry details describing a polygon.</p>
                */
            Geometry: GeofenceGeometry | undefined;
            /**
                * <p>Identifies the state of the geofence. A geofence will hold one of the following
                *             states:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ACTIVE</code> — The geofence has been indexed by the system. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> — The geofence is being processed by the system.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FAILED</code> — The geofence failed to be indexed by the system.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DELETED</code> — The geofence has been deleted from the system
                *                     index.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DELETING</code> — The geofence is being deleted from the system
                *                     index.</p>
                *             </li>
                *          </ul>
                */
            Status: string | undefined;
            /**
                * <p>The timestamp for when the geofence collection was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the geofence collection was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace GetGeofenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGeofenceResponse) => any;
    }
    export interface ListGeofenceCollectionsRequest {
            /**
                * <p>An optional limit for the number of resources returned in a single call. </p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page. </p>
                *         <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
    }
    export namespace ListGeofenceCollectionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGeofenceCollectionsRequest) => any;
    }
    /**
        * <p>Contains the geofence collection details.</p>
        */
    export interface ListGeofenceCollectionsResponseEntry {
            /**
                * <p>The name of the geofence collection.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The description for the geofence collection</p>
                */
            Description: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns an empty string.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>The timestamp for when the geofence collection was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>Specifies a timestamp for when the resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace ListGeofenceCollectionsResponseEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGeofenceCollectionsResponseEntry) => any;
    }
    export interface ListGeofenceCollectionsResponse {
            /**
                * <p>Lists the geofence collections that exist in your AWS account.</p>
                */
            Entries: ListGeofenceCollectionsResponseEntry[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the
                *             token in a following request to fetch the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListGeofenceCollectionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGeofenceCollectionsResponse) => any;
    }
    export interface ListGeofencesRequest {
            /**
                * <p>The name of the geofence collection storing the list of geofences.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page. </p>
                *         <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
            /**
                * <p>An optional limit for the number of geofences returned in a single call. </p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
    }
    export namespace ListGeofencesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGeofencesRequest) => any;
    }
    /**
        * <p>Contains a list of geofences stored in a given geofence collection.</p>
        */
    export interface ListGeofenceResponseEntry {
            /**
                * <p>The geofence identifier.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>Contains the geofence geometry details describing a polygon.</p>
                */
            Geometry: GeofenceGeometry | undefined;
            /**
                * <p>Identifies the state of the geofence. A geofence will hold one of the following
                *             states:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ACTIVE</code> — The geofence has been indexed by the system. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> — The geofence is being processed by the system.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FAILED</code> — The geofence failed to be indexed by the system.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DELETED</code> — The geofence has been deleted from the system
                *                     index.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DELETING</code> — The geofence is being deleted from the system
                *                     index.</p>
                *             </li>
                *          </ul>
                */
            Status: string | undefined;
            /**
                * <p>The timestamp for when the geofence was stored in a geofence collection in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace ListGeofenceResponseEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGeofenceResponseEntry) => any;
    }
    export interface ListGeofencesResponse {
            /**
                * <p>Contains a list of geofences stored in the geofence collection.</p>
                */
            Entries: ListGeofenceResponseEntry[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the
                *             token in a following request to fetch the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListGeofencesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGeofencesResponse) => any;
    }
    export interface PutGeofenceRequest {
            /**
                * <p>The geofence collection to store the geofence in.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>An identifier for the geofence. For example, <code>ExampleGeofence-1</code>.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>Contains the polygon details to specify the position of the geofence.</p>
                *         <note>
                *             <p>Each <a href="https://docs.aws.amazon.com/location-geofences/latest/APIReference/API_GeofenceGeometry.html">geofence polygon</a> can have a maximum of 1,000 vertices.</p>
                *         </note>
                */
            Geometry: GeofenceGeometry | undefined;
    }
    export namespace PutGeofenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutGeofenceRequest) => any;
    }
    export interface PutGeofenceResponse {
            /**
                * <p>The geofence identifier entered in the request.</p>
                */
            GeofenceId: string | undefined;
            /**
                * <p>The timestamp for when the geofence was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace PutGeofenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutGeofenceResponse) => any;
    }
    export interface UpdateGeofenceCollectionRequest {
            /**
                * <p>The name of the geofence collection to update.</p>
                */
            CollectionName: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * @deprecated
                *
                * <p>This parameter is no longer used.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>Updates the description for the geofence collection.</p>
                */
            Description?: string;
    }
    export namespace UpdateGeofenceCollectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGeofenceCollectionRequest) => any;
    }
    export interface UpdateGeofenceCollectionResponse {
            /**
                * <p>The name of the updated geofence collection.</p>
                */
            CollectionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the updated geofence collection. Used to specify a
                *             resource across AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example:
                *                         <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollection</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CollectionArn: string | undefined;
            /**
                * <p>The time when the geofence collection was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>
                *          </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace UpdateGeofenceCollectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGeofenceCollectionResponse) => any;
    }
    export interface GetDevicePositionRequest {
            /**
                * <p>The tracker resource receiving the position update.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The device whose position you want to retrieve.</p>
                */
            DeviceId: string | undefined;
    }
    export namespace GetDevicePositionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePositionRequest) => any;
    }
    export interface GetDevicePositionResponse {
            /**
                * <p>The device whose position you retrieved.</p>
                */
            DeviceId?: string;
            /**
                * <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            SampleTime: Date | undefined;
            /**
                * <p>The timestamp for when the tracker resource received the device position in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            ReceivedTime: Date | undefined;
            /**
                * <p>The last known device position.</p>
                */
            Position: number[] | undefined;
            /**
                * <p>The accuracy of the device position.</p>
                */
            Accuracy?: PositionalAccuracy;
            /**
                * <p>The properties associated with the position.</p>
                */
            PositionProperties?: Record<string, string>;
    }
    export namespace GetDevicePositionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePositionResponse) => any;
    }
    export interface GetDevicePositionHistoryRequest {
            /**
                * <p>The tracker resource receiving the request for the device position history.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The device whose position history you want to retrieve.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page. </p>
                *          <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
            /**
                * <p>Specify the start time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be 24 hours
                *             prior to the time that the request is made.</p>
                *         <p>Requirement:</p>
                *          <ul>
                *             <li>
                *                <p>The time specified for <code>StartTimeInclusive</code> must be before
                *                         <code>EndTimeExclusive</code>.</p>
                *            </li>
                *          </ul>
                */
            StartTimeInclusive?: Date;
            /**
                * <p>Specify the end time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be the time
                *             that the request is made.</p>
                *         <p>Requirement:</p>
                *          <ul>
                *             <li>
                *                <p>The time specified for <code>EndTimeExclusive</code> must be after the time for
                *                         <code>StartTimeInclusive</code>.</p>
                *            </li>
                *          </ul>
                */
            EndTimeExclusive?: Date;
            /**
                * <p>An optional limit for the number of device positions returned in a single call.</p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
    }
    export namespace GetDevicePositionHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePositionHistoryRequest) => any;
    }
    export interface GetDevicePositionHistoryResponse {
            /**
                * <p>Contains the position history details for the requested device.</p>
                */
            DevicePositions: DevicePosition[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the
                *             token in a following request to fetch the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetDevicePositionHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePositionHistoryResponse) => any;
    }
    export interface GetMapGlyphsRequest {
            /**
                * <p>The map resource associated with the glyph ﬁle.</p>
                */
            MapName: string | undefined;
            /**
                * <p>A comma-separated list of fonts to load glyphs from in order of preference. For
                *             example, <code>Noto Sans Regular, Arial Unicode</code>.</p>
                *         <p>Valid fonts stacks for <a href="https://docs.aws.amazon.com/location/latest/developerguide/esri.html">Esri</a> styles: </p>
                *         <ul>
                *             <li>
                *                 <p>VectorEsriDarkGrayCanvas – <code>Ubuntu Medium Italic</code> | <code>Ubuntu
                *                         Medium</code> | <code>Ubuntu Italic</code> | <code>Ubuntu Regular</code> |
                *                         <code>Ubuntu Bold</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>VectorEsriLightGrayCanvas – <code>Ubuntu Italic</code> | <code>Ubuntu
                *                         Regular</code> | <code>Ubuntu Light</code> | <code>Ubuntu Bold</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>VectorEsriTopographic – <code>Noto Sans Italic</code> | <code>Noto Sans
                *                         Regular</code> | <code>Noto Sans Bold</code> | <code>Noto Serif
                *                         Regular</code> | <code>Roboto Condensed Light Italic</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>VectorEsriStreets – <code>Arial Regular</code> | <code>Arial Italic</code> |
                *                         <code>Arial Bold</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>VectorEsriNavigation – <code>Arial Regular</code> | <code>Arial Italic</code>
                *                     | <code>Arial Bold</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>Valid font stacks for <a href="https://docs.aws.amazon.com/location/latest/developerguide/HERE.html">HERE Technologies</a> styles: </p>
                *         <ul>
                *             <li>
                *                 <p>VectorHereBerlin – <code>Fira
                *                     GO Regular</code> | <code>Fira GO Bold</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>VectorHereExplore, VectorHereExploreTruck – <code>Firo GO Italic</code> |
                *                     <code>Fira GO Map</code> | <code>Fira GO Map Bold</code> | <code>Noto Sans CJK
                *                     JP Bold</code> | <code>Noto Sans CJK JP Light</code> | <code>Noto Sans CJK
                *                     JP Regular</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            FontStack: string | undefined;
            /**
                * <p>A Unicode range of characters to download glyphs for. Each response will contain 256
                *             characters. For example, 0–255 includes all characters from range <code>U+0000</code> to
                *                 <code>00FF</code>. Must be aligned to multiples of 256.</p>
                */
            FontUnicodeRange: string | undefined;
    }
    export namespace GetMapGlyphsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapGlyphsRequest) => any;
    }
    export interface GetMapGlyphsResponse {
            /**
                * <p>The blob's content type.</p>
                */
            Blob?: Uint8Array;
            /**
                * <p>The map glyph content type. For example, <code>application/octet-stream</code>.</p>
                */
            ContentType?: string;
    }
    export namespace GetMapGlyphsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapGlyphsResponse) => any;
    }
    export interface GetMapSpritesRequest {
            /**
                * <p>The map resource associated with the sprite ﬁle.</p>
                */
            MapName: string | undefined;
            /**
                * <p>The name of the sprite ﬁle. Use the following ﬁle names for the sprite sheet:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>sprites.png</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>sprites@2x.png</code> for high pixel density displays</p>
                *             </li>
                *          </ul>
                *         <p>For the JSON document contain image offsets. Use the following ﬁle names:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>sprites.json</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>sprites@2x.json</code> for high pixel density displays</p>
                *             </li>
                *          </ul>
                */
            FileName: string | undefined;
    }
    export namespace GetMapSpritesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapSpritesRequest) => any;
    }
    export interface GetMapSpritesResponse {
            /**
                * <p>Contains the body of the sprite sheet or JSON offset ﬁle.</p>
                */
            Blob?: Uint8Array;
            /**
                * <p>The content type of the sprite sheet and offsets. For example, the sprite sheet
                *             content type is <code>image/png</code>, and the sprite offset JSON document is
                *                 <code>application/json</code>. </p>
                */
            ContentType?: string;
    }
    export namespace GetMapSpritesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapSpritesResponse) => any;
    }
    export interface GetMapStyleDescriptorRequest {
            /**
                * <p>The map resource to retrieve the style descriptor from.</p>
                */
            MapName: string | undefined;
    }
    export namespace GetMapStyleDescriptorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapStyleDescriptorRequest) => any;
    }
    export interface GetMapStyleDescriptorResponse {
            /**
                * <p>Contains the body of the style descriptor.</p>
                */
            Blob?: Uint8Array;
            /**
                * <p>The style descriptor's content type. For example,
                *             <code>application/json</code>.</p>
                */
            ContentType?: string;
    }
    export namespace GetMapStyleDescriptorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapStyleDescriptorResponse) => any;
    }
    export interface GetMapTileRequest {
            /**
                * <p>The map resource to retrieve the map tiles from.</p>
                */
            MapName: string | undefined;
            /**
                * <p>The zoom value for the map tile.</p>
                */
            Z: string | undefined;
            /**
                * <p>The X axis value for the map tile.</p>
                */
            X: string | undefined;
            /**
                * <p>The Y axis value for the map tile. </p>
                */
            Y: string | undefined;
    }
    export namespace GetMapTileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapTileRequest) => any;
    }
    export interface GetMapTileResponse {
            /**
                * <p>Contains Mapbox Vector Tile (MVT) data.</p>
                */
            Blob?: Uint8Array;
            /**
                * <p>The map tile's content type. For example,
                *                 <code>application/vnd.mapbox-vector-tile</code>.</p>
                */
            ContentType?: string;
    }
    export namespace GetMapTileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMapTileResponse) => any;
    }
    export interface ListDevicePositionsRequest {
            /**
                * <p>The tracker resource containing the requested devices.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>An optional limit for the number of entries returned in a single call.</p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page.</p>
                *          <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
    }
    export namespace ListDevicePositionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicePositionsRequest) => any;
    }
    /**
        * <p>Contains the tracker resource details.</p>
        */
    export interface ListDevicePositionsResponseEntry {
            /**
                * <p>The ID of the device for this position.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>The timestamp at which the device position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
                */
            SampleTime: Date | undefined;
            /**
                * <p>The last known device position. Empty if no positions currently stored.</p>
                */
            Position: number[] | undefined;
            /**
                * <p>The accuracy of the device position.</p>
                */
            Accuracy?: PositionalAccuracy;
            /**
                * <p>The properties associated with the position.</p>
                */
            PositionProperties?: Record<string, string>;
    }
    export namespace ListDevicePositionsResponseEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicePositionsResponseEntry) => any;
    }
    export interface ListDevicePositionsResponse {
            /**
                * <p>Contains details about each device's last known position. These details includes the device ID,
                *             the time when the position was sampled on the device, the time that the service received the update, and the most recent coordinates.</p>
                */
            Entries: ListDevicePositionsResponseEntry[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the
                *             token in a following request to fetch the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDevicePositionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicePositionsResponse) => any;
    }
    export interface ListMapsRequest {
            /**
                * <p>An optional limit for the number of resources returned in a single call. </p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page.</p>
                *         <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
    }
    export namespace ListMapsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMapsRequest) => any;
    }
    /**
        * <p>Contains details of an existing map resource in your AWS account.</p>
        */
    export interface ListMapsResponseEntry {
            /**
                * <p>The name of the associated map resource.</p>
                */
            MapName: string | undefined;
            /**
                * <p>The description for the map resource.</p>
                */
            Description: string | undefined;
            /**
                * <p>Specifies the data provider for the associated map tiles.</p>
                */
            DataSource: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>The timestamp for when the map resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the map resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace ListMapsResponseEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMapsResponseEntry) => any;
    }
    export interface ListMapsResponse {
            /**
                * <p>Contains a list of maps in your AWS account</p>
                */
            Entries: ListMapsResponseEntry[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListMapsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMapsResponse) => any;
    }
    export interface ListPlaceIndexesRequest {
            /**
                * <p>An optional limit for the maximum number of results returned in a single call.</p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page.</p>
                *         <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
    }
    export namespace ListPlaceIndexesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlaceIndexesRequest) => any;
    }
    /**
        * <p>A place index resource listed in your AWS account.</p>
        */
    export interface ListPlaceIndexesResponseEntry {
            /**
                * <p>The name of the place index resource.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>The optional description for the place index resource.</p>
                */
            Description: string | undefined;
            /**
                * <p>The data provider of geospatial data. Values can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>The timestamp for when the place index resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp for when the place index resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace ListPlaceIndexesResponseEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlaceIndexesResponseEntry) => any;
    }
    export interface ListPlaceIndexesResponse {
            /**
                * <p>Lists the place index resources that exist in your AWS account</p>
                */
            Entries: ListPlaceIndexesResponseEntry[] | undefined;
            /**
                * <p>A pagination token indicating that there are additional pages available. You can use
                *             the token in a new request to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlaceIndexesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlaceIndexesResponse) => any;
    }
    export interface ListRouteCalculatorsRequest {
            /**
                * <p>An optional maximum number of results returned in a single call.</p>
                *         <p>Default Value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page.</p>
                *         <p>Default Value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
    }
    export namespace ListRouteCalculatorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRouteCalculatorsRequest) => any;
    }
    /**
        * <p>A route calculator resource listed in your AWS account.</p>
        */
    export interface ListRouteCalculatorsResponseEntry {
            /**
                * <p>The name of the route calculator resource.</p>
                */
            CalculatorName: string | undefined;
            /**
                * <p>The optional description of the route calculator resource.</p>
                */
            Description: string | undefined;
            /**
                * <p>The data provider of traffic and road network data. Indicates one of the available
                *             providers:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Esri</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Here</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * @deprecated
                *
                * <p>Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>The timestamp when the route calculator resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>2020–07-2T12:15:20.000Z+01:00</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp when the route calculator resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                *         <ul>
                *             <li>
                *                 <p>For example, <code>2020–07-2T12:15:20.000Z+01:00</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            UpdateTime: Date | undefined;
    }
    export namespace ListRouteCalculatorsResponseEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRouteCalculatorsResponseEntry) => any;
    }
    export interface ListRouteCalculatorsResponse {
            /**
                * <p>Lists the route calculator resources that exist in your AWS account</p>
                */
            Entries: ListRouteCalculatorsResponseEntry[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the
                *             token in a subsequent request to fetch the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListRouteCalculatorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRouteCalculatorsResponse) => any;
    }
    export interface ListTrackerConsumersRequest {
            /**
                * <p>The tracker resource whose associated geofence collections you want to list.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>An optional limit for the number of resources returned in a single call. </p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page. </p>
                *          <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
    }
    export namespace ListTrackerConsumersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrackerConsumersRequest) => any;
    }
    export interface ListTrackerConsumersResponse {
            /**
                * <p>Contains the list of geofence collection ARNs associated to the tracker resource.</p>
                */
            ConsumerArns: string[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the
                *             token in a following request to fetch the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListTrackerConsumersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrackerConsumersResponse) => any;
    }
    export interface ListTrackersRequest {
            /**
                * <p>An optional limit for the number of resources returned in a single call. </p>
                *         <p>Default value: <code>100</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token specifying which page of results to return in the response. If no
                *             token is provided, the default page is the first page. </p>
                *         <p>Default value: <code>null</code>
                *          </p>
                */
            NextToken?: string;
    }
    export namespace ListTrackersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrackersRequest) => any;
    }
    /**
        * <p>Contains the tracker resource details.</p>
        */
    export interface ListTrackersResponseEntry {
            /**
                * <p>The name of the tracker resource.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The description for the tracker resource.</p>
                */
            Description: string | undefined;
            /**
                * @deprecated
                *
                * <p>Always returns <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * @deprecated
                *
                * <p>No longer used. Always returns an empty string.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            CreateTime: Date | undefined;
            /**
                * <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace ListTrackersResponseEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrackersResponseEntry) => any;
    }
    export interface ListTrackersResponse {
            /**
                * <p>Contains tracker resources in your AWS account. Details include tracker name,
                *             description and timestamps for when the tracker was created and last updated.</p>
                */
            Entries: ListTrackersResponseEntry[] | undefined;
            /**
                * <p>A pagination token indicating there are additional pages available. You can use the
                *             token in a following request to fetch the next set of results.  </p>
                */
            NextToken?: string;
    }
    export namespace ListTrackersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrackersResponse) => any;
    }
    export interface UpdateMapRequest {
            /**
                * <p>The name of the map resource to update.</p>
                */
            MapName: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>Updates the description for the map resource.</p>
                */
            Description?: string;
    }
    export namespace UpdateMapRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMapRequest) => any;
    }
    export interface UpdateMapResponse {
            /**
                * <p>The name of the updated map resource.</p>
                */
            MapName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the updated map resource. Used to specify a resource
                *             across AWS.</p>
                *         <ul>
                *             <li>
                *                <p>Format example: <code>arn:aws:geo:region:account-id:maps/ExampleMap</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            MapArn: string | undefined;
            /**
                * <p>The timestamp for when the map resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace UpdateMapResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMapResponse) => any;
    }
    export interface SearchPlaceIndexForPositionRequest {
            /**
                * <p>The name of the place index resource you want to use for the search.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>Specifies the longitude and latitude of the position to query.</p>
                *         <p> This parameter must contain a pair of numbers. The first number represents the X
                *             coordinate, or longitude; the second number represents the Y coordinate, or
                *             latitude.</p>
                *         <p>For example, <code>[-123.1174, 49.2847]</code> represents a position with longitude
                *                 <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
                */
            Position: number[] | undefined;
            /**
                * <p>An optional parameter. The maximum number of results returned per request.</p>
                *         <p>Default value: <code>50</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The preferred language used to return results. The value must be a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example,
                *                 <code>en</code> for English.</p>
                *         <p>This setting affects the languages used in the results, but not the results
                *             themselves. If no language is specified, or not supported for a particular result, the
                *             partner automatically chooses a language for the result.</p>
                *         <p>For an example, we'll use the Greek language. You search for a location around Athens,
                *             Greece, with the <code>language</code> parameter set to <code>en</code>. The
                *                 <code>city</code> in the results will most likely be returned as
                *             <code>Athens</code>.</p>
                *         <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the
                *                 <code>city</code> in the results will more likely be returned as
                *             <code>Αθήνα</code>.</p>
                *         <p>If the data provider does not have a value for Greek, the result will be in a language
                *             that the provider does support.</p>
                */
            Language?: string;
    }
    export namespace SearchPlaceIndexForPositionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForPositionRequest) => any;
    }
    /**
        * <p>Places uses a point geometry to specify a location or a Place.</p>
        */
    export interface PlaceGeometry {
            /**
                * <p>A single point geometry specifies a location for a Place using <a href="https://gisgeography.com/wgs84-world-geodetic-system/">WGS 84</a>
                *             coordinates:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <i>x</i> — Specifies the x coordinate or longitude. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>y</i> — Specifies the y coordinate or latitude. </p>
                *             </li>
                *          </ul>
                */
            Point?: number[];
    }
    export namespace PlaceGeometry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlaceGeometry) => any;
    }
    /**
        * <p>Information about a time zone. Includes the name of the time zone and the offset from
        *             UTC in seconds.</p>
        */
    export interface TimeZone {
            /**
                * <p>The name of the time zone, following the <a href="https://www.iana.org/time-zones">
                *                 IANA time zone standard</a>. For example,
                *             <code>America/Los_Angeles</code>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The time zone's offset, in seconds, from UTC.</p>
                */
            Offset?: number;
    }
    export namespace TimeZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimeZone) => any;
    }
    /**
        * <p>Contains details about addresses or points of interest that match the search
        *             criteria.</p>
        *         <p>Not all details are included with all responses. Some details may only be returned
        *             by specific data partners.</p>
        */
    export interface Place {
            /**
                * <p>The full name and address of the point of interest such as a city, region, or country.
                *             For example, <code>123 Any Street, Any Town, USA</code>.</p>
                */
            Label?: string;
            /**
                * <p>Places uses a point geometry to specify a location or a Place.</p>
                */
            Geometry: PlaceGeometry | undefined;
            /**
                * <p>The numerical portion of an address, such as a building number. </p>
                */
            AddressNumber?: string;
            /**
                * <p>The name for a street or a road to identify a location. For example, <code>Main
                *                 Street</code>.</p>
                */
            Street?: string;
            /**
                * <p>The name of a community district. For example, <code>Downtown</code>.</p>
                */
            Neighborhood?: string;
            /**
                * <p>A name for a local area, such as a city or town name. For example,
                *                 <code>Toronto</code>.</p>
                */
            Municipality?: string;
            /**
                * <p>A country, or an area that's part of a larger region. For example, <code>Metro
                *                 Vancouver</code>.</p>
                */
            SubRegion?: string;
            /**
                * <p>A name for an area or geographical division, such as a province or state name. For
                *             example, <code>British Columbia</code>.</p>
                */
            Region?: string;
            /**
                * <p>A country/region specified using <a href="https://www.iso.org/iso-3166-country-codes.html">ISO 3166</a> 3-digit
                *             country/region code. For example, <code>CAN</code>.</p>
                */
            Country?: string;
            /**
                * <p>A group of numbers and letters in a country-specific format, which accompanies the
                *             address for the purpose of identifying a location. </p>
                */
            PostalCode?: string;
            /**
                * <p>
                *             <code>True</code> if the result is interpolated from other known places.</p>
                *         <p>
                *             <code>False</code> if the Place is a known place.</p>
                *         <p>Not returned when the partner does not provide the information.</p>
                *         <p>For example, returns <code>False</code> for an address location that is found in the
                *             partner data, but returns <code>True</code> if an address does not exist in the partner
                *             data and its location is calculated by interpolating between other known addresses.
                *         </p>
                */
            Interpolated?: boolean;
            /**
                * <p>The time zone in which the <code>Place</code> is located. Returned only when using
                *             Here as the selected partner.</p>
                */
            TimeZone?: TimeZone;
    }
    export namespace Place {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Place) => any;
    }
    /**
        * <p>Contains a search result from a position search query that is run on a place index
        *             resource.</p>
        */
    export interface SearchForPositionResult {
            /**
                * <p>Details about the search result, such as its address and position.</p>
                */
            Place: Place | undefined;
            /**
                * <p>The distance in meters of a great-circle arc between the query position and the
                *             result.</p>
                *         <note>
                *             <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This
                *                 returns the shortest distance between two locations.</p>
                *         </note>
                */
            Distance: number | undefined;
    }
    export namespace SearchForPositionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchForPositionResult) => any;
    }
    /**
        * <p>A summary of the request sent by using
        *             <code>SearchPlaceIndexForPosition</code>.</p>
        */
    export interface SearchPlaceIndexForPositionSummary {
            /**
                * <p>The position specified in the request.</p>
                */
            Position: number[] | undefined;
            /**
                * <p>Contains the optional result count limit that is specified in the request.</p>
                *         <p>Default value: <code>50</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The geospatial data provider attached to the place index resource specified in the
                *             request. Values can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>Esri</p>
                *             </li>
                *             <li>
                *                 <p>Here</p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>The preferred language used to return results. Matches the language in the request.
                *             The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a>
                *             language tag, for example, <code>en</code> for English.</p>
                */
            Language?: string;
    }
    export namespace SearchPlaceIndexForPositionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForPositionSummary) => any;
    }
    export interface SearchPlaceIndexForPositionResponse {
            /**
                * <p>Contains a summary of the request. Echoes the input values for <code>Position</code>,
                *                 <code>Language</code>, <code>MaxResults</code>, and the <code>DataSource</code> of
                *             the place index. </p>
                */
            Summary: SearchPlaceIndexForPositionSummary | undefined;
            /**
                * <p>Returns a list of Places closest to the specified position. Each result contains
                *             additional information about the Places returned.</p>
                */
            Results: SearchForPositionResult[] | undefined;
    }
    export namespace SearchPlaceIndexForPositionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForPositionResponse) => any;
    }
    export interface SearchPlaceIndexForSuggestionsRequest {
            /**
                * <p>The name of the place index resource you want to use for the search.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>The free-form partial text to use to generate place suggestions. For example,
                *                 <code>eiffel tow</code>.</p>
                */
            Text: string | undefined;
            /**
                * <p>An optional parameter that indicates a preference for place suggestions that are
                *             closer to a specified position.</p>
                *         <p> If provided, this parameter must contain a pair of numbers. The first number
                *             represents the X coordinate, or longitude; the second number represents the Y
                *             coordinate, or latitude.</p>
                *         <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude
                *                 <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
                *         <note>
                *             <p>
                *                <code>BiasPosition</code> and <code>FilterBBox</code> are mutually exclusive.
                *                 Specifying both options results in an error. </p>
                *         </note>
                */
            BiasPosition?: number[];
            /**
                * <p>An optional parameter that limits the search results by returning only suggestions
                *             within a specified bounding box.</p>
                *         <p> If provided, this parameter must contain a total of four consecutive numbers in two
                *             pairs. The first pair of numbers represents the X and Y coordinates (longitude and
                *             latitude, respectively) of the southwest corner of the bounding box; the second pair of
                *             numbers represents the X and Y coordinates (longitude and latitude, respectively) of the
                *             northeast corner of the bounding box.</p>
                *         <p>For example, <code>[-12.7935, -37.4835, -12.0684, -36.9542]</code> represents a
                *             bounding box where the southwest corner has longitude <code>-12.7935</code> and latitude
                *                 <code>-37.4835</code>, and the northeast corner has longitude <code>-12.0684</code>
                *             and latitude <code>-36.9542</code>.</p>
                *         <note>
                *             <p>
                *                <code>FilterBBox</code> and <code>BiasPosition</code> are mutually exclusive.
                *                 Specifying both options results in an error. </p>
                *         </note>
                */
            FilterBBox?: number[];
            /**
                * <p>An optional parameter that limits the search results by returning only suggestions
                *             within the provided list of countries.</p>
                *         <ul>
                *             <li>
                *                 <p>Use the <a href="https://www.iso.org/iso-3166-country-codes.html">ISO
                *                         3166</a> 3-digit country code. For example, Australia uses three
                *                     upper-case characters: <code>AUS</code>.</p>
                *             </li>
                *          </ul>
                */
            FilterCountries?: string[];
            /**
                * <p>An optional parameter. The maximum number of results returned per request. </p>
                *         <p>The default: <code>5</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The preferred language used to return results. The value must be a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example,
                *                 <code>en</code> for English.</p>
                *         <p>This setting affects the languages used in the results. If no language is specified,
                *             or not supported for a particular result, the partner automatically chooses a language
                *             for the result.</p>
                *         <p>For an example, we'll use the Greek language. You search for <code>Athens, Gr</code>
                *             to get suggestions with the <code>language</code> parameter set to <code>en</code>. The
                *             results found will most likely be returned as <code>Athens, Greece</code>.</p>
                *         <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the
                *             result found will more likely be returned as <code>Αθήνα, Ελλάδα</code>.</p>
                *         <p>If the data provider does not have a value for Greek, the result will be in a language
                *             that the provider does support.</p>
                */
            Language?: string;
    }
    export namespace SearchPlaceIndexForSuggestionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForSuggestionsRequest) => any;
    }
    /**
        * <p>Contains a place suggestion resulting from a place suggestion query that is run on a
        *             place index resource.</p>
        */
    export interface SearchForSuggestionsResult {
            /**
                * <p>The text of the place suggestion, typically formatted as an address string.</p>
                */
            Text: string | undefined;
    }
    export namespace SearchForSuggestionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchForSuggestionsResult) => any;
    }
    /**
        * <p>A summary of the request sent by using
        *             <code>SearchPlaceIndexForSuggestions</code>.</p>
        */
    export interface SearchPlaceIndexForSuggestionsSummary {
            /**
                * <p>The free-form partial text input specified in the request.</p>
                */
            Text: string | undefined;
            /**
                * <p>Contains the coordinates for the optional bias position specified in the
                *             request.</p>
                *         <p>This parameter contains a pair of numbers. The first number represents the X
                *             coordinate, or longitude; the second number represents the Y coordinate, or
                *             latitude.</p>
                *         <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude
                *                 <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
                */
            BiasPosition?: number[];
            /**
                * <p>Contains the coordinates for the optional bounding box specified in the
                *             request.</p>
                */
            FilterBBox?: number[];
            /**
                * <p>Contains the optional country filter specified in the request.</p>
                */
            FilterCountries?: string[];
            /**
                * <p>Contains the optional result count limit specified in the request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The geospatial data provider attached to the place index resource specified in the
                *             request. Values can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>Esri</p>
                *             </li>
                *             <li>
                *                 <p>Here</p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>The preferred language used to return results. Matches the language in the request.
                *             The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a>
                *             language tag, for example, <code>en</code> for English.</p>
                */
            Language?: string;
    }
    export namespace SearchPlaceIndexForSuggestionsSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForSuggestionsSummary) => any;
    }
    export interface SearchPlaceIndexForSuggestionsResponse {
            /**
                * <p>Contains a summary of the request. Echoes the input values for
                *                 <code>BiasPosition</code>, <code>FilterBBox</code>, <code>FilterCountries</code>,
                *                 <code>Language</code>, <code>MaxResults</code>, and <code>Text</code>. Also includes
                *             the <code>DataSource</code> of the place index. </p>
                */
            Summary: SearchPlaceIndexForSuggestionsSummary | undefined;
            /**
                * <p>A list of place suggestions that best match the search text.</p>
                */
            Results: SearchForSuggestionsResult[] | undefined;
    }
    export namespace SearchPlaceIndexForSuggestionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForSuggestionsResponse) => any;
    }
    export interface SearchPlaceIndexForTextRequest {
            /**
                * <p>The name of the place index resource you want to use for the search.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>The address, name, city, or region to be used in the search in free-form text format.
                *             For example, <code>123 Any Street</code>.</p>
                */
            Text: string | undefined;
            /**
                * <p>An optional parameter that indicates a preference for places that are closer to a
                *             specified position.</p>
                *         <p> If provided, this parameter must contain a pair of numbers. The first number
                *             represents the X coordinate, or longitude; the second number represents the Y
                *             coordinate, or latitude.</p>
                *         <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude
                *                 <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
                *         <note>
                *             <p>
                *                <code>BiasPosition</code> and <code>FilterBBox</code> are mutually exclusive.
                *                 Specifying both options results in an error. </p>
                *         </note>
                */
            BiasPosition?: number[];
            /**
                * <p>An optional parameter that limits the search results by returning only places that are
                *             within the provided bounding box.</p>
                *         <p> If provided, this parameter must contain a total of four consecutive numbers in two
                *             pairs. The first pair of numbers represents the X and Y coordinates (longitude and
                *             latitude, respectively) of the southwest corner of the bounding box; the second pair of
                *             numbers represents the X and Y coordinates (longitude and latitude, respectively) of the
                *             northeast corner of the bounding box.</p>
                *         <p>For example, <code>[-12.7935, -37.4835, -12.0684, -36.9542]</code> represents a
                *             bounding box where the southwest corner has longitude <code>-12.7935</code> and latitude
                *                 <code>-37.4835</code>, and the northeast corner has longitude <code>-12.0684</code>
                *             and latitude <code>-36.9542</code>.</p>
                *         <note>
                *             <p>
                *                <code>FilterBBox</code> and <code>BiasPosition</code> are mutually exclusive.
                *                 Specifying both options results in an error. </p>
                *         </note>
                */
            FilterBBox?: number[];
            /**
                * <p>An optional parameter that limits the search results by returning only places that are
                *             in a specified list of countries.</p>
                *         <ul>
                *             <li>
                *                 <p>Valid values include <a href="https://www.iso.org/iso-3166-country-codes.html">ISO 3166</a>
                *                     3-digit country codes. For example, Australia uses three upper-case characters:
                *                         <code>AUS</code>.</p>
                *             </li>
                *          </ul>
                */
            FilterCountries?: string[];
            /**
                * <p>An optional parameter. The maximum number of results returned per request. </p>
                *         <p>The default: <code>50</code>
                *          </p>
                */
            MaxResults?: number;
            /**
                * <p>The preferred language used to return results. The value must be a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example,
                *                 <code>en</code> for English.</p>
                *         <p>This setting affects the languages used in the results, but not the results
                *             themselves. If no language is specified, or not supported for a particular result, the
                *             partner automatically chooses a language for the result.</p>
                *         <p>For an example, we'll use the Greek language. You search for <code>Athens,
                *                 Greece</code>, with the <code>language</code> parameter set to <code>en</code>. The
                *             result found will most likely be returned as <code>Athens</code>.</p>
                *         <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the
                *             result found will more likely be returned as <code>Αθήνα</code>.</p>
                *         <p>If the data provider does not have a value for Greek, the result will be in a language
                *             that the provider does support.</p>
                */
            Language?: string;
    }
    export namespace SearchPlaceIndexForTextRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForTextRequest) => any;
    }
    /**
        * <p>Contains a search result from a text search query that is run on a place index
        *             resource.</p>
        */
    export interface SearchForTextResult {
            /**
                * <p>Details about the search result, such as its address and position.</p>
                */
            Place: Place | undefined;
            /**
                * <p>The distance in meters of a great-circle arc between the bias position specified and
                *             the result. <code>Distance</code> will be returned only if a bias position was specified
                *             in the query.</p>
                *         <note>
                *             <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This
                *                 returns the shortest distance between two locations.</p>
                *         </note>
                */
            Distance?: number;
            /**
                * <p>The relative confidence in the match for a result among the results returned. For
                *             example, if more fields for an address match (including house number, street, city,
                *             country/region, and postal code), the relevance score is closer to 1.</p>
                *         <p>Returned only when the partner selected is Esri.</p>
                */
            Relevance?: number;
    }
    export namespace SearchForTextResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchForTextResult) => any;
    }
    /**
        * <p>A summary of the request sent by using <code>SearchPlaceIndexForText</code>.</p>
        */
    export interface SearchPlaceIndexForTextSummary {
            /**
                * <p>The search text specified in the request.</p>
                */
            Text: string | undefined;
            /**
                * <p>Contains the coordinates for the optional bias position specified in the
                *             request.</p>
                *         <p>This parameter contains a pair of numbers. The first number represents the X
                *             coordinate, or longitude; the second number represents the Y coordinate, or
                *             latitude.</p>
                *         <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude
                *                 <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
                */
            BiasPosition?: number[];
            /**
                * <p>Contains the coordinates for the optional bounding box specified in the
                *             request.</p>
                */
            FilterBBox?: number[];
            /**
                * <p>Contains the optional country filter specified in the request.</p>
                */
            FilterCountries?: string[];
            /**
                * <p>Contains the optional result count limit specified in the request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The bounding box that fully contains all search results.</p>
                *         <note>
                *             <p>If you specified the optional <code>FilterBBox</code> parameter in the request,
                *                     <code>ResultBBox</code> is contained within <code>FilterBBox</code>.</p>
                *         </note>
                */
            ResultBBox?: number[];
            /**
                * <p>The geospatial data provider attached to the place index resource specified in the
                *             request. Values can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>Esri</p>
                *             </li>
                *             <li>
                *                 <p>Here</p>
                *             </li>
                *          </ul>
                *         <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
                */
            DataSource: string | undefined;
            /**
                * <p>The preferred language used to return results. Matches the language in the request.
                *             The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a>
                *             language tag, for example, <code>en</code> for English.</p>
                */
            Language?: string;
    }
    export namespace SearchPlaceIndexForTextSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForTextSummary) => any;
    }
    export interface SearchPlaceIndexForTextResponse {
            /**
                * <p>Contains a summary of the request. Echoes the input values for
                *                 <code>BiasPosition</code>, <code>FilterBBox</code>, <code>FilterCountries</code>,
                *                 <code>Language</code>, <code>MaxResults</code>, and <code>Text</code>. Also includes
                *             the <code>DataSource</code> of the place index and the bounding box,
                *                 <code>ResultBBox</code>, which surrounds the search results. </p>
                */
            Summary: SearchPlaceIndexForTextSummary | undefined;
            /**
                * <p>A list of Places matching the input text. Each result contains additional information
                *             about the specific point of interest. </p>
                *         <p>Not all response properties are included with all responses. Some properties may
                *             only be returned by specific data partners.</p>
                */
            Results: SearchForTextResult[] | undefined;
    }
    export namespace SearchPlaceIndexForTextResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchPlaceIndexForTextResponse) => any;
    }
    export interface UpdatePlaceIndexRequest {
            /**
                * <p>The name of the place index resource to update.</p>
                */
            IndexName: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>Updates the description for the place index resource.</p>
                */
            Description?: string;
            /**
                * <p>Updates the data storage option for the place index resource.</p>
                */
            DataSourceConfiguration?: DataSourceConfiguration;
    }
    export namespace UpdatePlaceIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePlaceIndexRequest) => any;
    }
    export interface UpdatePlaceIndexResponse {
            /**
                * <p>The name of the updated place index resource.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the upated place index resource. Used to specify a
                *             resource across AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example: <code>arn:aws:geo:region:account-id:place-
                *                         index/ExamplePlaceIndex</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            IndexArn: string | undefined;
            /**
                * <p>The timestamp for when the place index resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace UpdatePlaceIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePlaceIndexResponse) => any;
    }
    export interface UpdateRouteCalculatorRequest {
            /**
                * <p>The name of the route calculator resource to update.</p>
                */
            CalculatorName: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * <p>Updates the description for the route calculator resource.</p>
                */
            Description?: string;
    }
    export namespace UpdateRouteCalculatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRouteCalculatorRequest) => any;
    }
    export interface UpdateRouteCalculatorResponse {
            /**
                * <p>The name of the updated route calculator resource.</p>
                */
            CalculatorName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the updated route calculator resource. Used to
                *             specify a resource across AWS.</p>
                *         <ul>
                *             <li>
                *                 <p>Format example: <code>arn:aws:geo:region:account-id:route-
                *                         calculator/ExampleCalculator</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            CalculatorArn: string | undefined;
            /**
                * <p>The timestamp for when the route calculator was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace UpdateRouteCalculatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRouteCalculatorResponse) => any;
    }
    export interface UpdateTrackerRequest {
            /**
                * <p>The name of the tracker resource to update.</p>
                */
            TrackerName: string | undefined;
            /**
                * @deprecated
                *
                * <p>No longer used. If included, the only allowed value is
                *             <code>RequestBasedUsage</code>.</p>
                */
            PricingPlan?: PricingPlan | string;
            /**
                * @deprecated
                *
                * <p>This parameter is no longer used.</p>
                */
            PricingPlanDataSource?: string;
            /**
                * <p>Updates the description for the tracker resource.</p>
                */
            Description?: string;
            /**
                * <p>Updates the position filtering for the tracker resource.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>TimeBased</code> - Location updates are evaluated against linked geofence collections,
                *                     but not every location update is stored. If your update frequency is more often than 30 seconds,
                *                     only one update per 30 seconds is stored for each unique device ID.
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>DistanceBased</code> - If the device has moved less than 30 m (98.4 ft), location updates are
                *                     ignored. Location updates within this distance are neither evaluated against linked geofence collections, nor stored.
                *                     This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through.
                *                     Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map.
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>AccuracyBased</code> - If the device has moved less than the measured accuracy,
                *                     location updates are ignored. For example, if two consecutive updates from a device
                *                     have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device
                *                     has moved less than 15 m. Ignored location updates are neither evaluated against
                *                     linked geofence collections, nor stored. This helps educe the effects of GPS noise
                *                     when displaying device trajectories on a map, and can help control costs by reducing the
                *                     number of geofence evaluations.
                *                 </p>
                *             </li>
                *          </ul>
                */
            PositionFiltering?: PositionFiltering | string;
    }
    export namespace UpdateTrackerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrackerRequest) => any;
    }
    export interface UpdateTrackerResponse {
            /**
                * <p>The name of the updated tracker resource.</p>
                */
            TrackerName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the updated tracker resource. Used to specify a resource across
                *             AWS.</p>
                *             <ul>
                *             <li>
                *                <p>Format example: <code>arn:aws:geo:region:account-id:tracker/ExampleTracker</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            TrackerArn: string | undefined;
            /**
                * <p>The timestamp for when the tracker resource was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a>
                *             format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
                */
            UpdateTime: Date | undefined;
    }
    export namespace UpdateTrackerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrackerResponse) => any;
    }
}

declare module '@aws-sdk/client-location/node_modules/@aws-sdk/client-location/dist-types/models/LocationServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Location service.
        */
    export class LocationServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

