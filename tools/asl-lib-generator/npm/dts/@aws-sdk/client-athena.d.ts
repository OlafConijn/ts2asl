// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-athena' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AthenaClient } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { BatchGetNamedQueryCommandInput, BatchGetNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetNamedQueryCommand";
    import { BatchGetPreparedStatementCommandInput, BatchGetPreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetPreparedStatementCommand";
    import { BatchGetQueryExecutionCommandInput, BatchGetQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetQueryExecutionCommand";
    import { CreateDataCatalogCommandInput, CreateDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateDataCatalogCommand";
    import { CreateNamedQueryCommandInput, CreateNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateNamedQueryCommand";
    import { CreatePreparedStatementCommandInput, CreatePreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreatePreparedStatementCommand";
    import { CreateWorkGroupCommandInput, CreateWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateWorkGroupCommand";
    import { DeleteDataCatalogCommandInput, DeleteDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteDataCatalogCommand";
    import { DeleteNamedQueryCommandInput, DeleteNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteNamedQueryCommand";
    import { DeletePreparedStatementCommandInput, DeletePreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeletePreparedStatementCommand";
    import { DeleteWorkGroupCommandInput, DeleteWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteWorkGroupCommand";
    import { GetDatabaseCommandInput, GetDatabaseCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetDatabaseCommand";
    import { GetDataCatalogCommandInput, GetDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetDataCatalogCommand";
    import { GetNamedQueryCommandInput, GetNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetNamedQueryCommand";
    import { GetPreparedStatementCommandInput, GetPreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetPreparedStatementCommand";
    import { GetQueryExecutionCommandInput, GetQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryExecutionCommand";
    import { GetQueryResultsCommandInput, GetQueryResultsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryResultsCommand";
    import { GetQueryRuntimeStatisticsCommandInput, GetQueryRuntimeStatisticsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryRuntimeStatisticsCommand";
    import { GetTableMetadataCommandInput, GetTableMetadataCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetTableMetadataCommand";
    import { GetWorkGroupCommandInput, GetWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetWorkGroupCommand";
    import { ListDatabasesCommandInput, ListDatabasesCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListDatabasesCommand";
    import { ListDataCatalogsCommandInput, ListDataCatalogsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListDataCatalogsCommand";
    import { ListEngineVersionsCommandInput, ListEngineVersionsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListEngineVersionsCommand";
    import { ListNamedQueriesCommandInput, ListNamedQueriesCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListNamedQueriesCommand";
    import { ListPreparedStatementsCommandInput, ListPreparedStatementsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListPreparedStatementsCommand";
    import { ListQueryExecutionsCommandInput, ListQueryExecutionsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListQueryExecutionsCommand";
    import { ListTableMetadataCommandInput, ListTableMetadataCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListTableMetadataCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkGroupsCommandInput, ListWorkGroupsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListWorkGroupsCommand";
    import { StartQueryExecutionCommandInput, StartQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/StartQueryExecutionCommand";
    import { StopQueryExecutionCommandInput, StopQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/StopQueryExecutionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UntagResourceCommand";
    import { UpdateDataCatalogCommandInput, UpdateDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateDataCatalogCommand";
    import { UpdateNamedQueryCommandInput, UpdateNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateNamedQueryCommand";
    import { UpdatePreparedStatementCommandInput, UpdatePreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdatePreparedStatementCommand";
    import { UpdateWorkGroupCommandInput, UpdateWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateWorkGroupCommand";
    /**
        * <p>Amazon Athena is an interactive query service that lets you use standard SQL
        *             to analyze data directly in Amazon S3. You can point Athena at your
        *             data in Amazon S3 and run ad-hoc queries and get results in seconds. Athena is serverless, so there is no infrastructure to set up or manage. You pay
        *             only for the queries you run. Athena scales automatically—executing queries
        *             in parallel—so results are fast, even with large datasets and complex queries. For more
        *             information, see <a href="http://docs.aws.amazon.com/athena/latest/ug/what-is.html">What is Amazon Athena</a> in the <i>Amazon Athena User
        *                 Guide</i>.</p>
        *         <p>If you connect to Athena using the JDBC driver, use version 1.1.0 of the
        *             driver or later with the Amazon Athena API. Earlier version drivers do not
        *             support the API. For more information and to download the driver, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html">Accessing
        *                     Amazon Athena with JDBC</a>.</p>
        *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="https://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        */
    export class Athena extends AthenaClient {
            /**
                * <p>Returns the details of a single named query or a list of up to 50 queries, which you
                *             provide as an array of query ID strings. Requires you to have access to the workgroup in
                *             which the queries were saved. Use <a>ListNamedQueriesInput</a> to get the
                *             list of named query IDs in the specified workgroup. If information could not be
                *             retrieved for a submitted query ID, information about the query ID submitted is listed
                *             under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed
                *             queries. Use <a>BatchGetQueryExecutionInput</a> to get details about each
                *             unique query execution, and <a>ListQueryExecutionsInput</a> to get a list of
                *             query execution IDs.</p>
                */
            batchGetNamedQuery(args: BatchGetNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetNamedQueryCommandOutput>;
            batchGetNamedQuery(args: BatchGetNamedQueryCommandInput, cb: (err: any, data?: BatchGetNamedQueryCommandOutput) => void): void;
            batchGetNamedQuery(args: BatchGetNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetNamedQueryCommandOutput) => void): void;
            /**
                * <p>Returns the details of a single prepared statement or a list of up to 256 prepared statements for the array of prepared statement names that you provide. Requires you to have access to the workgroup to which the prepared statements belong. If a prepared statement cannot be retrieved for the name specified, the statement is listed in <code>UnprocessedPreparedStatementNames</code>.</p>
                */
            batchGetPreparedStatement(args: BatchGetPreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetPreparedStatementCommandOutput>;
            batchGetPreparedStatement(args: BatchGetPreparedStatementCommandInput, cb: (err: any, data?: BatchGetPreparedStatementCommandOutput) => void): void;
            batchGetPreparedStatement(args: BatchGetPreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetPreparedStatementCommandOutput) => void): void;
            /**
                * <p>Returns the details of a single query execution or a list of up to 50 query
                *             executions, which you provide as an array of query execution ID strings. Requires you to
                *             have access to the workgroup in which the queries ran. To get a list of query execution
                *             IDs, use <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ
                *             from named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details
                *             about named queries.</p>
                */
            batchGetQueryExecution(args: BatchGetQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetQueryExecutionCommandOutput>;
            batchGetQueryExecution(args: BatchGetQueryExecutionCommandInput, cb: (err: any, data?: BatchGetQueryExecutionCommandOutput) => void): void;
            batchGetQueryExecution(args: BatchGetQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetQueryExecutionCommandOutput) => void): void;
            /**
                * <p>Creates (registers) a data catalog with the specified name and properties. Catalogs
                *             created are visible to all users of the same Amazon Web Services account.</p>
                */
            createDataCatalog(args: CreateDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataCatalogCommandOutput>;
            createDataCatalog(args: CreateDataCatalogCommandInput, cb: (err: any, data?: CreateDataCatalogCommandOutput) => void): void;
            createDataCatalog(args: CreateDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataCatalogCommandOutput) => void): void;
            /**
                * <p>Creates a named query in the specified workgroup. Requires that you have access to the
                *             workgroup.</p>
                *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
                *                 Code Samples</a> in the <i>Amazon Athena User
                *             Guide</i>.</p>
                */
            createNamedQuery(args: CreateNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<CreateNamedQueryCommandOutput>;
            createNamedQuery(args: CreateNamedQueryCommandInput, cb: (err: any, data?: CreateNamedQueryCommandOutput) => void): void;
            createNamedQuery(args: CreateNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNamedQueryCommandOutput) => void): void;
            /**
                * <p>Creates a prepared statement for use with SQL queries in Athena.</p>
                */
            createPreparedStatement(args: CreatePreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<CreatePreparedStatementCommandOutput>;
            createPreparedStatement(args: CreatePreparedStatementCommandInput, cb: (err: any, data?: CreatePreparedStatementCommandOutput) => void): void;
            createPreparedStatement(args: CreatePreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePreparedStatementCommandOutput) => void): void;
            /**
                * <p>Creates a workgroup with the specified name.</p>
                */
            createWorkGroup(args: CreateWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkGroupCommandOutput>;
            createWorkGroup(args: CreateWorkGroupCommandInput, cb: (err: any, data?: CreateWorkGroupCommandOutput) => void): void;
            createWorkGroup(args: CreateWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a data catalog.</p>
                */
            deleteDataCatalog(args: DeleteDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataCatalogCommandOutput>;
            deleteDataCatalog(args: DeleteDataCatalogCommandInput, cb: (err: any, data?: DeleteDataCatalogCommandOutput) => void): void;
            deleteDataCatalog(args: DeleteDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataCatalogCommandOutput) => void): void;
            /**
                * <p>Deletes the named query if you have access to the workgroup in which the query was
                *             saved.</p>
                *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
                *                 Code Samples</a> in the <i>Amazon Athena User
                *             Guide</i>.</p>
                */
            deleteNamedQuery(args: DeleteNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNamedQueryCommandOutput>;
            deleteNamedQuery(args: DeleteNamedQueryCommandInput, cb: (err: any, data?: DeleteNamedQueryCommandOutput) => void): void;
            deleteNamedQuery(args: DeleteNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNamedQueryCommandOutput) => void): void;
            /**
                * <p>Deletes the prepared statement with the specified name from the specified
                *             workgroup.</p>
                */
            deletePreparedStatement(args: DeletePreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<DeletePreparedStatementCommandOutput>;
            deletePreparedStatement(args: DeletePreparedStatementCommandInput, cb: (err: any, data?: DeletePreparedStatementCommandOutput) => void): void;
            deletePreparedStatement(args: DeletePreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePreparedStatementCommandOutput) => void): void;
            /**
                * <p>Deletes the workgroup with the specified name. The primary workgroup cannot be
                *             deleted.</p>
                */
            deleteWorkGroup(args: DeleteWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkGroupCommandOutput>;
            deleteWorkGroup(args: DeleteWorkGroupCommandInput, cb: (err: any, data?: DeleteWorkGroupCommandOutput) => void): void;
            deleteWorkGroup(args: DeleteWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkGroupCommandOutput) => void): void;
            /**
                * <p>Returns a database object for the specified database and data catalog.</p>
                */
            getDatabase(args: GetDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<GetDatabaseCommandOutput>;
            getDatabase(args: GetDatabaseCommandInput, cb: (err: any, data?: GetDatabaseCommandOutput) => void): void;
            getDatabase(args: GetDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDatabaseCommandOutput) => void): void;
            /**
                * <p>Returns the specified data catalog.</p>
                */
            getDataCatalog(args: GetDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<GetDataCatalogCommandOutput>;
            getDataCatalog(args: GetDataCatalogCommandInput, cb: (err: any, data?: GetDataCatalogCommandOutput) => void): void;
            getDataCatalog(args: GetDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDataCatalogCommandOutput) => void): void;
            /**
                * <p>Returns information about a single query. Requires that you have access to the
                *             workgroup in which the query was saved.</p>
                */
            getNamedQuery(args: GetNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<GetNamedQueryCommandOutput>;
            getNamedQuery(args: GetNamedQueryCommandInput, cb: (err: any, data?: GetNamedQueryCommandOutput) => void): void;
            getNamedQuery(args: GetNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNamedQueryCommandOutput) => void): void;
            /**
                * <p>Retrieves the prepared statement with the specified name from the specified
                *             workgroup.</p>
                */
            getPreparedStatement(args: GetPreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<GetPreparedStatementCommandOutput>;
            getPreparedStatement(args: GetPreparedStatementCommandInput, cb: (err: any, data?: GetPreparedStatementCommandOutput) => void): void;
            getPreparedStatement(args: GetPreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPreparedStatementCommandOutput) => void): void;
            /**
                * <p>Returns information about a single execution of a query if you have access to the
                *             workgroup in which the query ran. Each time a query executes, information about the
                *             query execution is saved with a unique ID.</p>
                */
            getQueryExecution(args: GetQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryExecutionCommandOutput>;
            getQueryExecution(args: GetQueryExecutionCommandInput, cb: (err: any, data?: GetQueryExecutionCommandOutput) => void): void;
            getQueryExecution(args: GetQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryExecutionCommandOutput) => void): void;
            /**
                * <p>Streams the results of a single query execution specified by
                *                 <code>QueryExecutionId</code> from the Athena query results location in
                *                 Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a> in the <i>Amazon Athena User Guide</i>. This request does not execute the query
                *             but returns results. Use <a>StartQueryExecution</a> to run a query.</p>
                *         <p>To stream query results successfully, the IAM principal with permission to call
                *                 <code>GetQueryResults</code> also must have permissions to the Amazon S3
                *             <code>GetObject</code> action for the Athena query results location.</p>
                *         <important>
                *             <p>IAM principals with permission to the Amazon S3
                *                 <code>GetObject</code> action for the query results location are able to retrieve
                *                 query results from Amazon S3 even if permission to the
                *                     <code>GetQueryResults</code> action is denied. To restrict user or role access,
                *                 ensure that Amazon S3 permissions to the Athena query location
                *                 are denied.</p>
                *         </important>
                */
            getQueryResults(args: GetQueryResultsCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryResultsCommandOutput>;
            getQueryResults(args: GetQueryResultsCommandInput, cb: (err: any, data?: GetQueryResultsCommandOutput) => void): void;
            getQueryResults(args: GetQueryResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryResultsCommandOutput) => void): void;
            /**
                * <p>Returns query execution runtime statistics related to a single execution of a query if you
                *             have access to the workgroup in which the query ran. The query execution runtime statistics
                *             is returned only when <a>QueryExecutionStatus$State</a> is in a SUCCEEDED
                *             or FAILED state.</p>
                */
            getQueryRuntimeStatistics(args: GetQueryRuntimeStatisticsCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryRuntimeStatisticsCommandOutput>;
            getQueryRuntimeStatistics(args: GetQueryRuntimeStatisticsCommandInput, cb: (err: any, data?: GetQueryRuntimeStatisticsCommandOutput) => void): void;
            getQueryRuntimeStatistics(args: GetQueryRuntimeStatisticsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryRuntimeStatisticsCommandOutput) => void): void;
            /**
                * <p>Returns table metadata for the specified catalog, database, and table.</p>
                */
            getTableMetadata(args: GetTableMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetTableMetadataCommandOutput>;
            getTableMetadata(args: GetTableMetadataCommandInput, cb: (err: any, data?: GetTableMetadataCommandOutput) => void): void;
            getTableMetadata(args: GetTableMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTableMetadataCommandOutput) => void): void;
            /**
                * <p>Returns information about the workgroup with the specified name.</p>
                */
            getWorkGroup(args: GetWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkGroupCommandOutput>;
            getWorkGroup(args: GetWorkGroupCommandInput, cb: (err: any, data?: GetWorkGroupCommandOutput) => void): void;
            getWorkGroup(args: GetWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkGroupCommandOutput) => void): void;
            /**
                * <p>Lists the databases in the specified data catalog.</p>
                */
            listDatabases(args: ListDatabasesCommandInput, options?: __HttpHandlerOptions): Promise<ListDatabasesCommandOutput>;
            listDatabases(args: ListDatabasesCommandInput, cb: (err: any, data?: ListDatabasesCommandOutput) => void): void;
            listDatabases(args: ListDatabasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatabasesCommandOutput) => void): void;
            /**
                * <p>Lists the data catalogs in the current Amazon Web Services account.</p>
                */
            listDataCatalogs(args: ListDataCatalogsCommandInput, options?: __HttpHandlerOptions): Promise<ListDataCatalogsCommandOutput>;
            listDataCatalogs(args: ListDataCatalogsCommandInput, cb: (err: any, data?: ListDataCatalogsCommandOutput) => void): void;
            listDataCatalogs(args: ListDataCatalogsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataCatalogsCommandOutput) => void): void;
            /**
                * <p>Returns a list of engine versions that are available to choose from, including the
                *             Auto option.</p>
                */
            listEngineVersions(args: ListEngineVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListEngineVersionsCommandOutput>;
            listEngineVersions(args: ListEngineVersionsCommandInput, cb: (err: any, data?: ListEngineVersionsCommandOutput) => void): void;
            listEngineVersions(args: ListEngineVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEngineVersionsCommandOutput) => void): void;
            /**
                * <p>Provides a list of available query IDs only for queries saved in the specified
                *             workgroup. Requires that you have access to the specified workgroup. If a workgroup is
                *             not specified, lists the saved queries for the primary workgroup.</p>
                *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
                *                 Code Samples</a> in the <i>Amazon Athena User
                *             Guide</i>.</p>
                */
            listNamedQueries(args: ListNamedQueriesCommandInput, options?: __HttpHandlerOptions): Promise<ListNamedQueriesCommandOutput>;
            listNamedQueries(args: ListNamedQueriesCommandInput, cb: (err: any, data?: ListNamedQueriesCommandOutput) => void): void;
            listNamedQueries(args: ListNamedQueriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNamedQueriesCommandOutput) => void): void;
            /**
                * <p>Lists the prepared statements in the specified workgroup.</p>
                */
            listPreparedStatements(args: ListPreparedStatementsCommandInput, options?: __HttpHandlerOptions): Promise<ListPreparedStatementsCommandOutput>;
            listPreparedStatements(args: ListPreparedStatementsCommandInput, cb: (err: any, data?: ListPreparedStatementsCommandOutput) => void): void;
            listPreparedStatements(args: ListPreparedStatementsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPreparedStatementsCommandOutput) => void): void;
            /**
                * <p>Provides a list of available query execution IDs for the queries in the specified
                *             workgroup. If a workgroup is not specified, returns a list of query execution IDs for
                *             the primary workgroup. Requires you to have access to the workgroup in which the queries
                *             ran.</p>
                *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
                *                 Code Samples</a> in the <i>Amazon Athena User
                *             Guide</i>.</p>
                */
            listQueryExecutions(args: ListQueryExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<ListQueryExecutionsCommandOutput>;
            listQueryExecutions(args: ListQueryExecutionsCommandInput, cb: (err: any, data?: ListQueryExecutionsCommandOutput) => void): void;
            listQueryExecutions(args: ListQueryExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListQueryExecutionsCommandOutput) => void): void;
            /**
                * <p>Lists the metadata for the tables in the specified data catalog database.</p>
                */
            listTableMetadata(args: ListTableMetadataCommandInput, options?: __HttpHandlerOptions): Promise<ListTableMetadataCommandOutput>;
            listTableMetadata(args: ListTableMetadataCommandInput, cb: (err: any, data?: ListTableMetadataCommandOutput) => void): void;
            listTableMetadata(args: ListTableMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTableMetadataCommandOutput) => void): void;
            /**
                * <p>Lists the tags associated with an Athena workgroup or data catalog
                *             resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists available workgroups for the account.</p>
                */
            listWorkGroups(args: ListWorkGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkGroupsCommandOutput>;
            listWorkGroups(args: ListWorkGroupsCommandInput, cb: (err: any, data?: ListWorkGroupsCommandOutput) => void): void;
            listWorkGroups(args: ListWorkGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkGroupsCommandOutput) => void): void;
            /**
                * <p>Runs the SQL query statements contained in the <code>Query</code>. Requires you to
                *             have access to the workgroup in which the query ran. Running queries against an external
                *             catalog requires <a>GetDataCatalog</a> permission to the catalog. For code
                *             samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
                *                 Code Samples</a> in the <i>Amazon Athena User
                *             Guide</i>.</p>
                */
            startQueryExecution(args: StartQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartQueryExecutionCommandOutput>;
            startQueryExecution(args: StartQueryExecutionCommandInput, cb: (err: any, data?: StartQueryExecutionCommandOutput) => void): void;
            startQueryExecution(args: StartQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartQueryExecutionCommandOutput) => void): void;
            /**
                * <p>Stops a query execution. Requires you to have access to the workgroup in which the
                *             query ran.</p>
                *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
                *                 Code Samples</a> in the <i>Amazon Athena User
                *             Guide</i>.</p>
                */
            stopQueryExecution(args: StopQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StopQueryExecutionCommandOutput>;
            stopQueryExecution(args: StopQueryExecutionCommandInput, cb: (err: any, data?: StopQueryExecutionCommandOutput) => void): void;
            stopQueryExecution(args: StopQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopQueryExecutionCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an Athena resource. A tag is a label that you
                *             assign to a resource. In Athena, a resource can be a workgroup or data
                *             catalog. Each tag consists of a key and an optional value, both of which you define. For
                *             example, you can use tags to categorize Athena workgroups or data catalogs
                *             by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to
                *             search and filter workgroups or data catalogs in your account. For best practices, see
                *                 <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode
                *             characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use
                *             letters and numbers representable in UTF-8, and the following characters: + - = . _ : /
                *             @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you
                *             specify more than one tag, separate them by commas.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from a data catalog or workgroup resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the data catalog that has the specified name.</p>
                */
            updateDataCatalog(args: UpdateDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataCatalogCommandOutput>;
            updateDataCatalog(args: UpdateDataCatalogCommandInput, cb: (err: any, data?: UpdateDataCatalogCommandOutput) => void): void;
            updateDataCatalog(args: UpdateDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataCatalogCommandOutput) => void): void;
            /**
                * <p>Updates a <a>NamedQuery</a> object. The database or workgroup cannot be
                *             updated.</p>
                */
            updateNamedQuery(args: UpdateNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNamedQueryCommandOutput>;
            updateNamedQuery(args: UpdateNamedQueryCommandInput, cb: (err: any, data?: UpdateNamedQueryCommandOutput) => void): void;
            updateNamedQuery(args: UpdateNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNamedQueryCommandOutput) => void): void;
            /**
                * <p>Updates a prepared statement.</p>
                */
            updatePreparedStatement(args: UpdatePreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePreparedStatementCommandOutput>;
            updatePreparedStatement(args: UpdatePreparedStatementCommandInput, cb: (err: any, data?: UpdatePreparedStatementCommandOutput) => void): void;
            updatePreparedStatement(args: UpdatePreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePreparedStatementCommandOutput) => void): void;
            /**
                * <p>Updates the workgroup with the specified name. The workgroup's name cannot be
                *             changed.</p>
                */
            updateWorkGroup(args: UpdateWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkGroupCommandOutput>;
            updateWorkGroup(args: UpdateWorkGroupCommandInput, cb: (err: any, data?: UpdateWorkGroupCommandOutput) => void): void;
            updateWorkGroup(args: UpdateWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkGroupCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchGetNamedQueryCommandInput, BatchGetNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetNamedQueryCommand";
    import { BatchGetPreparedStatementCommandInput, BatchGetPreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetPreparedStatementCommand";
    import { BatchGetQueryExecutionCommandInput, BatchGetQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetQueryExecutionCommand";
    import { CreateDataCatalogCommandInput, CreateDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateDataCatalogCommand";
    import { CreateNamedQueryCommandInput, CreateNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateNamedQueryCommand";
    import { CreatePreparedStatementCommandInput, CreatePreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreatePreparedStatementCommand";
    import { CreateWorkGroupCommandInput, CreateWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateWorkGroupCommand";
    import { DeleteDataCatalogCommandInput, DeleteDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteDataCatalogCommand";
    import { DeleteNamedQueryCommandInput, DeleteNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteNamedQueryCommand";
    import { DeletePreparedStatementCommandInput, DeletePreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeletePreparedStatementCommand";
    import { DeleteWorkGroupCommandInput, DeleteWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteWorkGroupCommand";
    import { GetDatabaseCommandInput, GetDatabaseCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetDatabaseCommand";
    import { GetDataCatalogCommandInput, GetDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetDataCatalogCommand";
    import { GetNamedQueryCommandInput, GetNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetNamedQueryCommand";
    import { GetPreparedStatementCommandInput, GetPreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetPreparedStatementCommand";
    import { GetQueryExecutionCommandInput, GetQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryExecutionCommand";
    import { GetQueryResultsCommandInput, GetQueryResultsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryResultsCommand";
    import { GetQueryRuntimeStatisticsCommandInput, GetQueryRuntimeStatisticsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryRuntimeStatisticsCommand";
    import { GetTableMetadataCommandInput, GetTableMetadataCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetTableMetadataCommand";
    import { GetWorkGroupCommandInput, GetWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetWorkGroupCommand";
    import { ListDatabasesCommandInput, ListDatabasesCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListDatabasesCommand";
    import { ListDataCatalogsCommandInput, ListDataCatalogsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListDataCatalogsCommand";
    import { ListEngineVersionsCommandInput, ListEngineVersionsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListEngineVersionsCommand";
    import { ListNamedQueriesCommandInput, ListNamedQueriesCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListNamedQueriesCommand";
    import { ListPreparedStatementsCommandInput, ListPreparedStatementsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListPreparedStatementsCommand";
    import { ListQueryExecutionsCommandInput, ListQueryExecutionsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListQueryExecutionsCommand";
    import { ListTableMetadataCommandInput, ListTableMetadataCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListTableMetadataCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkGroupsCommandInput, ListWorkGroupsCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListWorkGroupsCommand";
    import { StartQueryExecutionCommandInput, StartQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/StartQueryExecutionCommand";
    import { StopQueryExecutionCommandInput, StopQueryExecutionCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/StopQueryExecutionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UntagResourceCommand";
    import { UpdateDataCatalogCommandInput, UpdateDataCatalogCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateDataCatalogCommand";
    import { UpdateNamedQueryCommandInput, UpdateNamedQueryCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateNamedQueryCommand";
    import { UpdatePreparedStatementCommandInput, UpdatePreparedStatementCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdatePreparedStatementCommand";
    import { UpdateWorkGroupCommandInput, UpdateWorkGroupCommandOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateWorkGroupCommand";
    export type ServiceInputTypes = BatchGetNamedQueryCommandInput | BatchGetPreparedStatementCommandInput | BatchGetQueryExecutionCommandInput | CreateDataCatalogCommandInput | CreateNamedQueryCommandInput | CreatePreparedStatementCommandInput | CreateWorkGroupCommandInput | DeleteDataCatalogCommandInput | DeleteNamedQueryCommandInput | DeletePreparedStatementCommandInput | DeleteWorkGroupCommandInput | GetDataCatalogCommandInput | GetDatabaseCommandInput | GetNamedQueryCommandInput | GetPreparedStatementCommandInput | GetQueryExecutionCommandInput | GetQueryResultsCommandInput | GetQueryRuntimeStatisticsCommandInput | GetTableMetadataCommandInput | GetWorkGroupCommandInput | ListDataCatalogsCommandInput | ListDatabasesCommandInput | ListEngineVersionsCommandInput | ListNamedQueriesCommandInput | ListPreparedStatementsCommandInput | ListQueryExecutionsCommandInput | ListTableMetadataCommandInput | ListTagsForResourceCommandInput | ListWorkGroupsCommandInput | StartQueryExecutionCommandInput | StopQueryExecutionCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateDataCatalogCommandInput | UpdateNamedQueryCommandInput | UpdatePreparedStatementCommandInput | UpdateWorkGroupCommandInput;
    export type ServiceOutputTypes = BatchGetNamedQueryCommandOutput | BatchGetPreparedStatementCommandOutput | BatchGetQueryExecutionCommandOutput | CreateDataCatalogCommandOutput | CreateNamedQueryCommandOutput | CreatePreparedStatementCommandOutput | CreateWorkGroupCommandOutput | DeleteDataCatalogCommandOutput | DeleteNamedQueryCommandOutput | DeletePreparedStatementCommandOutput | DeleteWorkGroupCommandOutput | GetDataCatalogCommandOutput | GetDatabaseCommandOutput | GetNamedQueryCommandOutput | GetPreparedStatementCommandOutput | GetQueryExecutionCommandOutput | GetQueryResultsCommandOutput | GetQueryRuntimeStatisticsCommandOutput | GetTableMetadataCommandOutput | GetWorkGroupCommandOutput | ListDataCatalogsCommandOutput | ListDatabasesCommandOutput | ListEngineVersionsCommandOutput | ListNamedQueriesCommandOutput | ListPreparedStatementsCommandOutput | ListQueryExecutionsCommandOutput | ListTableMetadataCommandOutput | ListTagsForResourceCommandOutput | ListWorkGroupsCommandOutput | StartQueryExecutionCommandOutput | StopQueryExecutionCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateDataCatalogCommandOutput | UpdateNamedQueryCommandOutput | UpdatePreparedStatementCommandOutput | UpdateWorkGroupCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type AthenaClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of AthenaClient class constructor that set the region, credentials and other options.
        */
    export interface AthenaClientConfig extends AthenaClientConfigType {
    }
    type AthenaClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of AthenaClient class. This is resolved and normalized from the {@link AthenaClientConfig | constructor configuration interface}.
        */
    export interface AthenaClientResolvedConfig extends AthenaClientResolvedConfigType {
    }
    /**
        * <p>Amazon Athena is an interactive query service that lets you use standard SQL
        *             to analyze data directly in Amazon S3. You can point Athena at your
        *             data in Amazon S3 and run ad-hoc queries and get results in seconds. Athena is serverless, so there is no infrastructure to set up or manage. You pay
        *             only for the queries you run. Athena scales automatically—executing queries
        *             in parallel—so results are fast, even with large datasets and complex queries. For more
        *             information, see <a href="http://docs.aws.amazon.com/athena/latest/ug/what-is.html">What is Amazon Athena</a> in the <i>Amazon Athena User
        *                 Guide</i>.</p>
        *         <p>If you connect to Athena using the JDBC driver, use version 1.1.0 of the
        *             driver or later with the Amazon Athena API. Earlier version drivers do not
        *             support the API. For more information and to download the driver, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html">Accessing
        *                     Amazon Athena with JDBC</a>.</p>
        *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="https://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        */
    export class AthenaClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, AthenaClientResolvedConfig> {
            /**
                * The resolved configuration of AthenaClient class. This is resolved and normalized from the {@link AthenaClientConfig | constructor configuration interface}.
                */
            readonly config: AthenaClientResolvedConfig;
            constructor(configuration: AthenaClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetNamedQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { BatchGetNamedQueryInput, BatchGetNamedQueryOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface BatchGetNamedQueryCommandInput extends BatchGetNamedQueryInput {
    }
    export interface BatchGetNamedQueryCommandOutput extends BatchGetNamedQueryOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the details of a single named query or a list of up to 50 queries, which you
        *             provide as an array of query ID strings. Requires you to have access to the workgroup in
        *             which the queries were saved. Use <a>ListNamedQueriesInput</a> to get the
        *             list of named query IDs in the specified workgroup. If information could not be
        *             retrieved for a submitted query ID, information about the query ID submitted is listed
        *             under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed
        *             queries. Use <a>BatchGetQueryExecutionInput</a> to get details about each
        *             unique query execution, and <a>ListQueryExecutionsInput</a> to get a list of
        *             query execution IDs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, BatchGetNamedQueryCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, BatchGetNamedQueryCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new BatchGetNamedQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetNamedQueryCommandInput} for command's `input` shape.
        * @see {@link BatchGetNamedQueryCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class BatchGetNamedQueryCommand extends $Command<BatchGetNamedQueryCommandInput, BatchGetNamedQueryCommandOutput, AthenaClientResolvedConfig> {
            readonly input: BatchGetNamedQueryCommandInput;
            constructor(input: BatchGetNamedQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetNamedQueryCommandInput, BatchGetNamedQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetPreparedStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { BatchGetPreparedStatementInput, BatchGetPreparedStatementOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface BatchGetPreparedStatementCommandInput extends BatchGetPreparedStatementInput {
    }
    export interface BatchGetPreparedStatementCommandOutput extends BatchGetPreparedStatementOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the details of a single prepared statement or a list of up to 256 prepared statements for the array of prepared statement names that you provide. Requires you to have access to the workgroup to which the prepared statements belong. If a prepared statement cannot be retrieved for the name specified, the statement is listed in <code>UnprocessedPreparedStatementNames</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, BatchGetPreparedStatementCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, BatchGetPreparedStatementCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new BatchGetPreparedStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetPreparedStatementCommandInput} for command's `input` shape.
        * @see {@link BatchGetPreparedStatementCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class BatchGetPreparedStatementCommand extends $Command<BatchGetPreparedStatementCommandInput, BatchGetPreparedStatementCommandOutput, AthenaClientResolvedConfig> {
            readonly input: BatchGetPreparedStatementCommandInput;
            constructor(input: BatchGetPreparedStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetPreparedStatementCommandInput, BatchGetPreparedStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/BatchGetQueryExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { BatchGetQueryExecutionInput, BatchGetQueryExecutionOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface BatchGetQueryExecutionCommandInput extends BatchGetQueryExecutionInput {
    }
    export interface BatchGetQueryExecutionCommandOutput extends BatchGetQueryExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the details of a single query execution or a list of up to 50 query
        *             executions, which you provide as an array of query execution ID strings. Requires you to
        *             have access to the workgroup in which the queries ran. To get a list of query execution
        *             IDs, use <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ
        *             from named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details
        *             about named queries.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, BatchGetQueryExecutionCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, BatchGetQueryExecutionCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new BatchGetQueryExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetQueryExecutionCommandInput} for command's `input` shape.
        * @see {@link BatchGetQueryExecutionCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class BatchGetQueryExecutionCommand extends $Command<BatchGetQueryExecutionCommandInput, BatchGetQueryExecutionCommandOutput, AthenaClientResolvedConfig> {
            readonly input: BatchGetQueryExecutionCommandInput;
            constructor(input: BatchGetQueryExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetQueryExecutionCommandInput, BatchGetQueryExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateDataCatalogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { CreateDataCatalogInput, CreateDataCatalogOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface CreateDataCatalogCommandInput extends CreateDataCatalogInput {
    }
    export interface CreateDataCatalogCommandOutput extends CreateDataCatalogOutput, __MetadataBearer {
    }
    /**
        * <p>Creates (registers) a data catalog with the specified name and properties. Catalogs
        *             created are visible to all users of the same Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, CreateDataCatalogCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, CreateDataCatalogCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new CreateDataCatalogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataCatalogCommandInput} for command's `input` shape.
        * @see {@link CreateDataCatalogCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class CreateDataCatalogCommand extends $Command<CreateDataCatalogCommandInput, CreateDataCatalogCommandOutput, AthenaClientResolvedConfig> {
            readonly input: CreateDataCatalogCommandInput;
            constructor(input: CreateDataCatalogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataCatalogCommandInput, CreateDataCatalogCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateNamedQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { CreateNamedQueryInput, CreateNamedQueryOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface CreateNamedQueryCommandInput extends CreateNamedQueryInput {
    }
    export interface CreateNamedQueryCommandOutput extends CreateNamedQueryOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a named query in the specified workgroup. Requires that you have access to the
        *             workgroup.</p>
        *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, CreateNamedQueryCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, CreateNamedQueryCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new CreateNamedQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNamedQueryCommandInput} for command's `input` shape.
        * @see {@link CreateNamedQueryCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class CreateNamedQueryCommand extends $Command<CreateNamedQueryCommandInput, CreateNamedQueryCommandOutput, AthenaClientResolvedConfig> {
            readonly input: CreateNamedQueryCommandInput;
            constructor(input: CreateNamedQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNamedQueryCommandInput, CreateNamedQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreatePreparedStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { CreatePreparedStatementInput, CreatePreparedStatementOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface CreatePreparedStatementCommandInput extends CreatePreparedStatementInput {
    }
    export interface CreatePreparedStatementCommandOutput extends CreatePreparedStatementOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a prepared statement for use with SQL queries in Athena.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, CreatePreparedStatementCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, CreatePreparedStatementCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new CreatePreparedStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePreparedStatementCommandInput} for command's `input` shape.
        * @see {@link CreatePreparedStatementCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class CreatePreparedStatementCommand extends $Command<CreatePreparedStatementCommandInput, CreatePreparedStatementCommandOutput, AthenaClientResolvedConfig> {
            readonly input: CreatePreparedStatementCommandInput;
            constructor(input: CreatePreparedStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePreparedStatementCommandInput, CreatePreparedStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/CreateWorkGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { CreateWorkGroupInput, CreateWorkGroupOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface CreateWorkGroupCommandInput extends CreateWorkGroupInput {
    }
    export interface CreateWorkGroupCommandOutput extends CreateWorkGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a workgroup with the specified name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, CreateWorkGroupCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, CreateWorkGroupCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new CreateWorkGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkGroupCommandInput} for command's `input` shape.
        * @see {@link CreateWorkGroupCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class CreateWorkGroupCommand extends $Command<CreateWorkGroupCommandInput, CreateWorkGroupCommandOutput, AthenaClientResolvedConfig> {
            readonly input: CreateWorkGroupCommandInput;
            constructor(input: CreateWorkGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkGroupCommandInput, CreateWorkGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteDataCatalogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { DeleteDataCatalogInput, DeleteDataCatalogOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface DeleteDataCatalogCommandInput extends DeleteDataCatalogInput {
    }
    export interface DeleteDataCatalogCommandOutput extends DeleteDataCatalogOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes a data catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, DeleteDataCatalogCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, DeleteDataCatalogCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new DeleteDataCatalogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataCatalogCommandInput} for command's `input` shape.
        * @see {@link DeleteDataCatalogCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class DeleteDataCatalogCommand extends $Command<DeleteDataCatalogCommandInput, DeleteDataCatalogCommandOutput, AthenaClientResolvedConfig> {
            readonly input: DeleteDataCatalogCommandInput;
            constructor(input: DeleteDataCatalogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataCatalogCommandInput, DeleteDataCatalogCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteNamedQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { DeleteNamedQueryInput, DeleteNamedQueryOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface DeleteNamedQueryCommandInput extends DeleteNamedQueryInput {
    }
    export interface DeleteNamedQueryCommandOutput extends DeleteNamedQueryOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the named query if you have access to the workgroup in which the query was
        *             saved.</p>
        *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, DeleteNamedQueryCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, DeleteNamedQueryCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new DeleteNamedQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNamedQueryCommandInput} for command's `input` shape.
        * @see {@link DeleteNamedQueryCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class DeleteNamedQueryCommand extends $Command<DeleteNamedQueryCommandInput, DeleteNamedQueryCommandOutput, AthenaClientResolvedConfig> {
            readonly input: DeleteNamedQueryCommandInput;
            constructor(input: DeleteNamedQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNamedQueryCommandInput, DeleteNamedQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeletePreparedStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { DeletePreparedStatementInput, DeletePreparedStatementOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface DeletePreparedStatementCommandInput extends DeletePreparedStatementInput {
    }
    export interface DeletePreparedStatementCommandOutput extends DeletePreparedStatementOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the prepared statement with the specified name from the specified
        *             workgroup.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, DeletePreparedStatementCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, DeletePreparedStatementCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new DeletePreparedStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePreparedStatementCommandInput} for command's `input` shape.
        * @see {@link DeletePreparedStatementCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class DeletePreparedStatementCommand extends $Command<DeletePreparedStatementCommandInput, DeletePreparedStatementCommandOutput, AthenaClientResolvedConfig> {
            readonly input: DeletePreparedStatementCommandInput;
            constructor(input: DeletePreparedStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePreparedStatementCommandInput, DeletePreparedStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/DeleteWorkGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { DeleteWorkGroupInput, DeleteWorkGroupOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface DeleteWorkGroupCommandInput extends DeleteWorkGroupInput {
    }
    export interface DeleteWorkGroupCommandOutput extends DeleteWorkGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the workgroup with the specified name. The primary workgroup cannot be
        *             deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, DeleteWorkGroupCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, DeleteWorkGroupCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new DeleteWorkGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkGroupCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class DeleteWorkGroupCommand extends $Command<DeleteWorkGroupCommandInput, DeleteWorkGroupCommandOutput, AthenaClientResolvedConfig> {
            readonly input: DeleteWorkGroupCommandInput;
            constructor(input: DeleteWorkGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkGroupCommandInput, DeleteWorkGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetDatabaseInput, GetDatabaseOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetDatabaseCommandInput extends GetDatabaseInput {
    }
    export interface GetDatabaseCommandOutput extends GetDatabaseOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a database object for the specified database and data catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetDatabaseCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetDatabaseCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDatabaseCommandInput} for command's `input` shape.
        * @see {@link GetDatabaseCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetDatabaseCommand extends $Command<GetDatabaseCommandInput, GetDatabaseCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetDatabaseCommandInput;
            constructor(input: GetDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDatabaseCommandInput, GetDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetDataCatalogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetDataCatalogInput, GetDataCatalogOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetDataCatalogCommandInput extends GetDataCatalogInput {
    }
    export interface GetDataCatalogCommandOutput extends GetDataCatalogOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the specified data catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetDataCatalogCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetDataCatalogCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetDataCatalogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDataCatalogCommandInput} for command's `input` shape.
        * @see {@link GetDataCatalogCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetDataCatalogCommand extends $Command<GetDataCatalogCommandInput, GetDataCatalogCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetDataCatalogCommandInput;
            constructor(input: GetDataCatalogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDataCatalogCommandInput, GetDataCatalogCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetNamedQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetNamedQueryInput, GetNamedQueryOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetNamedQueryCommandInput extends GetNamedQueryInput {
    }
    export interface GetNamedQueryCommandOutput extends GetNamedQueryOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a single query. Requires that you have access to the
        *             workgroup in which the query was saved.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetNamedQueryCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetNamedQueryCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetNamedQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNamedQueryCommandInput} for command's `input` shape.
        * @see {@link GetNamedQueryCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetNamedQueryCommand extends $Command<GetNamedQueryCommandInput, GetNamedQueryCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetNamedQueryCommandInput;
            constructor(input: GetNamedQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNamedQueryCommandInput, GetNamedQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetPreparedStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetPreparedStatementInput, GetPreparedStatementOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetPreparedStatementCommandInput extends GetPreparedStatementInput {
    }
    export interface GetPreparedStatementCommandOutput extends GetPreparedStatementOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the prepared statement with the specified name from the specified
        *             workgroup.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetPreparedStatementCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetPreparedStatementCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetPreparedStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPreparedStatementCommandInput} for command's `input` shape.
        * @see {@link GetPreparedStatementCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetPreparedStatementCommand extends $Command<GetPreparedStatementCommandInput, GetPreparedStatementCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetPreparedStatementCommandInput;
            constructor(input: GetPreparedStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPreparedStatementCommandInput, GetPreparedStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetQueryExecutionInput, GetQueryExecutionOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetQueryExecutionCommandInput extends GetQueryExecutionInput {
    }
    export interface GetQueryExecutionCommandOutput extends GetQueryExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a single execution of a query if you have access to the
        *             workgroup in which the query ran. Each time a query executes, information about the
        *             query execution is saved with a unique ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetQueryExecutionCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetQueryExecutionCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetQueryExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQueryExecutionCommandInput} for command's `input` shape.
        * @see {@link GetQueryExecutionCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetQueryExecutionCommand extends $Command<GetQueryExecutionCommandInput, GetQueryExecutionCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetQueryExecutionCommandInput;
            constructor(input: GetQueryExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQueryExecutionCommandInput, GetQueryExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryResultsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetQueryResultsInput, GetQueryResultsOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetQueryResultsCommandInput extends GetQueryResultsInput {
    }
    export interface GetQueryResultsCommandOutput extends GetQueryResultsOutput, __MetadataBearer {
    }
    /**
        * <p>Streams the results of a single query execution specified by
        *                 <code>QueryExecutionId</code> from the Athena query results location in
        *                 Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a> in the <i>Amazon Athena User Guide</i>. This request does not execute the query
        *             but returns results. Use <a>StartQueryExecution</a> to run a query.</p>
        *         <p>To stream query results successfully, the IAM principal with permission to call
        *                 <code>GetQueryResults</code> also must have permissions to the Amazon S3
        *             <code>GetObject</code> action for the Athena query results location.</p>
        *         <important>
        *             <p>IAM principals with permission to the Amazon S3
        *                 <code>GetObject</code> action for the query results location are able to retrieve
        *                 query results from Amazon S3 even if permission to the
        *                     <code>GetQueryResults</code> action is denied. To restrict user or role access,
        *                 ensure that Amazon S3 permissions to the Athena query location
        *                 are denied.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetQueryResultsCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetQueryResultsCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetQueryResultsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQueryResultsCommandInput} for command's `input` shape.
        * @see {@link GetQueryResultsCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetQueryResultsCommand extends $Command<GetQueryResultsCommandInput, GetQueryResultsCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetQueryResultsCommandInput;
            constructor(input: GetQueryResultsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQueryResultsCommandInput, GetQueryResultsCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetQueryRuntimeStatisticsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetQueryRuntimeStatisticsInput, GetQueryRuntimeStatisticsOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetQueryRuntimeStatisticsCommandInput extends GetQueryRuntimeStatisticsInput {
    }
    export interface GetQueryRuntimeStatisticsCommandOutput extends GetQueryRuntimeStatisticsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns query execution runtime statistics related to a single execution of a query if you
        *             have access to the workgroup in which the query ran. The query execution runtime statistics
        *             is returned only when <a>QueryExecutionStatus$State</a> is in a SUCCEEDED
        *             or FAILED state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetQueryRuntimeStatisticsCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetQueryRuntimeStatisticsCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetQueryRuntimeStatisticsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQueryRuntimeStatisticsCommandInput} for command's `input` shape.
        * @see {@link GetQueryRuntimeStatisticsCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetQueryRuntimeStatisticsCommand extends $Command<GetQueryRuntimeStatisticsCommandInput, GetQueryRuntimeStatisticsCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetQueryRuntimeStatisticsCommandInput;
            constructor(input: GetQueryRuntimeStatisticsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQueryRuntimeStatisticsCommandInput, GetQueryRuntimeStatisticsCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetTableMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetTableMetadataInput, GetTableMetadataOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetTableMetadataCommandInput extends GetTableMetadataInput {
    }
    export interface GetTableMetadataCommandOutput extends GetTableMetadataOutput, __MetadataBearer {
    }
    /**
        * <p>Returns table metadata for the specified catalog, database, and table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetTableMetadataCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetTableMetadataCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetTableMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTableMetadataCommandInput} for command's `input` shape.
        * @see {@link GetTableMetadataCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetTableMetadataCommand extends $Command<GetTableMetadataCommandInput, GetTableMetadataCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetTableMetadataCommandInput;
            constructor(input: GetTableMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTableMetadataCommandInput, GetTableMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/GetWorkGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { GetWorkGroupInput, GetWorkGroupOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface GetWorkGroupCommandInput extends GetWorkGroupInput {
    }
    export interface GetWorkGroupCommandOutput extends GetWorkGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about the workgroup with the specified name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, GetWorkGroupCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, GetWorkGroupCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new GetWorkGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkGroupCommandInput} for command's `input` shape.
        * @see {@link GetWorkGroupCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class GetWorkGroupCommand extends $Command<GetWorkGroupCommandInput, GetWorkGroupCommandOutput, AthenaClientResolvedConfig> {
            readonly input: GetWorkGroupCommandInput;
            constructor(input: GetWorkGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkGroupCommandInput, GetWorkGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListDatabasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListDatabasesInput, ListDatabasesOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListDatabasesCommandInput extends ListDatabasesInput {
    }
    export interface ListDatabasesCommandOutput extends ListDatabasesOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the databases in the specified data catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListDatabasesCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListDatabasesCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListDatabasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDatabasesCommandInput} for command's `input` shape.
        * @see {@link ListDatabasesCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListDatabasesCommand extends $Command<ListDatabasesCommandInput, ListDatabasesCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListDatabasesCommandInput;
            constructor(input: ListDatabasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDatabasesCommandInput, ListDatabasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListDataCatalogsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListDataCatalogsInput, ListDataCatalogsOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListDataCatalogsCommandInput extends ListDataCatalogsInput {
    }
    export interface ListDataCatalogsCommandOutput extends ListDataCatalogsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the data catalogs in the current Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListDataCatalogsCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListDataCatalogsCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListDataCatalogsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataCatalogsCommandInput} for command's `input` shape.
        * @see {@link ListDataCatalogsCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListDataCatalogsCommand extends $Command<ListDataCatalogsCommandInput, ListDataCatalogsCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListDataCatalogsCommandInput;
            constructor(input: ListDataCatalogsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataCatalogsCommandInput, ListDataCatalogsCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListEngineVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListEngineVersionsInput, ListEngineVersionsOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListEngineVersionsCommandInput extends ListEngineVersionsInput {
    }
    export interface ListEngineVersionsCommandOutput extends ListEngineVersionsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of engine versions that are available to choose from, including the
        *             Auto option.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListEngineVersionsCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListEngineVersionsCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListEngineVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEngineVersionsCommandInput} for command's `input` shape.
        * @see {@link ListEngineVersionsCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListEngineVersionsCommand extends $Command<ListEngineVersionsCommandInput, ListEngineVersionsCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListEngineVersionsCommandInput;
            constructor(input: ListEngineVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEngineVersionsCommandInput, ListEngineVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListNamedQueriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListNamedQueriesInput, ListNamedQueriesOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListNamedQueriesCommandInput extends ListNamedQueriesInput {
    }
    export interface ListNamedQueriesCommandOutput extends ListNamedQueriesOutput, __MetadataBearer {
    }
    /**
        * <p>Provides a list of available query IDs only for queries saved in the specified
        *             workgroup. Requires that you have access to the specified workgroup. If a workgroup is
        *             not specified, lists the saved queries for the primary workgroup.</p>
        *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListNamedQueriesCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListNamedQueriesCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListNamedQueriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNamedQueriesCommandInput} for command's `input` shape.
        * @see {@link ListNamedQueriesCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListNamedQueriesCommand extends $Command<ListNamedQueriesCommandInput, ListNamedQueriesCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListNamedQueriesCommandInput;
            constructor(input: ListNamedQueriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNamedQueriesCommandInput, ListNamedQueriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListPreparedStatementsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListPreparedStatementsInput, ListPreparedStatementsOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListPreparedStatementsCommandInput extends ListPreparedStatementsInput {
    }
    export interface ListPreparedStatementsCommandOutput extends ListPreparedStatementsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the prepared statements in the specified workgroup.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListPreparedStatementsCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListPreparedStatementsCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListPreparedStatementsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPreparedStatementsCommandInput} for command's `input` shape.
        * @see {@link ListPreparedStatementsCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListPreparedStatementsCommand extends $Command<ListPreparedStatementsCommandInput, ListPreparedStatementsCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListPreparedStatementsCommandInput;
            constructor(input: ListPreparedStatementsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPreparedStatementsCommandInput, ListPreparedStatementsCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListQueryExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListQueryExecutionsInput, ListQueryExecutionsOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListQueryExecutionsCommandInput extends ListQueryExecutionsInput {
    }
    export interface ListQueryExecutionsCommandOutput extends ListQueryExecutionsOutput, __MetadataBearer {
    }
    /**
        * <p>Provides a list of available query execution IDs for the queries in the specified
        *             workgroup. If a workgroup is not specified, returns a list of query execution IDs for
        *             the primary workgroup. Requires you to have access to the workgroup in which the queries
        *             ran.</p>
        *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListQueryExecutionsCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListQueryExecutionsCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListQueryExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListQueryExecutionsCommandInput} for command's `input` shape.
        * @see {@link ListQueryExecutionsCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListQueryExecutionsCommand extends $Command<ListQueryExecutionsCommandInput, ListQueryExecutionsCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListQueryExecutionsCommandInput;
            constructor(input: ListQueryExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListQueryExecutionsCommandInput, ListQueryExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListTableMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListTableMetadataInput, ListTableMetadataOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListTableMetadataCommandInput extends ListTableMetadataInput {
    }
    export interface ListTableMetadataCommandOutput extends ListTableMetadataOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the metadata for the tables in the specified data catalog database.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListTableMetadataCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListTableMetadataCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListTableMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTableMetadataCommandInput} for command's `input` shape.
        * @see {@link ListTableMetadataCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListTableMetadataCommand extends $Command<ListTableMetadataCommandInput, ListTableMetadataCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListTableMetadataCommandInput;
            constructor(input: ListTableMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTableMetadataCommandInput, ListTableMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListTagsForResourceInput, ListTagsForResourceOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceInput {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the tags associated with an Athena workgroup or data catalog
        *             resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListTagsForResourceCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListTagsForResourceCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/ListWorkGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { ListWorkGroupsInput, ListWorkGroupsOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface ListWorkGroupsCommandInput extends ListWorkGroupsInput {
    }
    export interface ListWorkGroupsCommandOutput extends ListWorkGroupsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists available workgroups for the account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, ListWorkGroupsCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, ListWorkGroupsCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new ListWorkGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkGroupsCommandInput} for command's `input` shape.
        * @see {@link ListWorkGroupsCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class ListWorkGroupsCommand extends $Command<ListWorkGroupsCommandInput, ListWorkGroupsCommandOutput, AthenaClientResolvedConfig> {
            readonly input: ListWorkGroupsCommandInput;
            constructor(input: ListWorkGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkGroupsCommandInput, ListWorkGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/StartQueryExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { StartQueryExecutionInput, StartQueryExecutionOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface StartQueryExecutionCommandInput extends StartQueryExecutionInput {
    }
    export interface StartQueryExecutionCommandOutput extends StartQueryExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Runs the SQL query statements contained in the <code>Query</code>. Requires you to
        *             have access to the workgroup in which the query ran. Running queries against an external
        *             catalog requires <a>GetDataCatalog</a> permission to the catalog. For code
        *             samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, StartQueryExecutionCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, StartQueryExecutionCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new StartQueryExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartQueryExecutionCommandInput} for command's `input` shape.
        * @see {@link StartQueryExecutionCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class StartQueryExecutionCommand extends $Command<StartQueryExecutionCommandInput, StartQueryExecutionCommandOutput, AthenaClientResolvedConfig> {
            readonly input: StartQueryExecutionCommandInput;
            constructor(input: StartQueryExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartQueryExecutionCommandInput, StartQueryExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/StopQueryExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { StopQueryExecutionInput, StopQueryExecutionOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface StopQueryExecutionCommandInput extends StopQueryExecutionInput {
    }
    export interface StopQueryExecutionCommandOutput extends StopQueryExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Stops a query execution. Requires you to have access to the workgroup in which the
        *             query ran.</p>
        *         <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
        *                 Code Samples</a> in the <i>Amazon Athena User
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, StopQueryExecutionCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, StopQueryExecutionCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new StopQueryExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopQueryExecutionCommandInput} for command's `input` shape.
        * @see {@link StopQueryExecutionCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class StopQueryExecutionCommand extends $Command<StopQueryExecutionCommandInput, StopQueryExecutionCommandOutput, AthenaClientResolvedConfig> {
            readonly input: StopQueryExecutionCommandInput;
            constructor(input: StopQueryExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopQueryExecutionCommandInput, StopQueryExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { TagResourceInput, TagResourceOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceInput {
    }
    export interface TagResourceCommandOutput extends TagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an Athena resource. A tag is a label that you
        *             assign to a resource. In Athena, a resource can be a workgroup or data
        *             catalog. Each tag consists of a key and an optional value, both of which you define. For
        *             example, you can use tags to categorize Athena workgroups or data catalogs
        *             by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to
        *             search and filter workgroups or data catalogs in your account. For best practices, see
        *                 <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode
        *             characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use
        *             letters and numbers representable in UTF-8, and the following characters: + - = . _ : /
        *             @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you
        *             specify more than one tag, separate them by commas.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, TagResourceCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, TagResourceCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, AthenaClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { UntagResourceInput, UntagResourceOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceInput {
    }
    export interface UntagResourceCommandOutput extends UntagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from a data catalog or workgroup resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, UntagResourceCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, UntagResourceCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, AthenaClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateDataCatalogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { UpdateDataCatalogInput, UpdateDataCatalogOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface UpdateDataCatalogCommandInput extends UpdateDataCatalogInput {
    }
    export interface UpdateDataCatalogCommandOutput extends UpdateDataCatalogOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the data catalog that has the specified name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, UpdateDataCatalogCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, UpdateDataCatalogCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new UpdateDataCatalogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDataCatalogCommandInput} for command's `input` shape.
        * @see {@link UpdateDataCatalogCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class UpdateDataCatalogCommand extends $Command<UpdateDataCatalogCommandInput, UpdateDataCatalogCommandOutput, AthenaClientResolvedConfig> {
            readonly input: UpdateDataCatalogCommandInput;
            constructor(input: UpdateDataCatalogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDataCatalogCommandInput, UpdateDataCatalogCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateNamedQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { UpdateNamedQueryInput, UpdateNamedQueryOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface UpdateNamedQueryCommandInput extends UpdateNamedQueryInput {
    }
    export interface UpdateNamedQueryCommandOutput extends UpdateNamedQueryOutput, __MetadataBearer {
    }
    /**
        * <p>Updates a <a>NamedQuery</a> object. The database or workgroup cannot be
        *             updated.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, UpdateNamedQueryCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, UpdateNamedQueryCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new UpdateNamedQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNamedQueryCommandInput} for command's `input` shape.
        * @see {@link UpdateNamedQueryCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class UpdateNamedQueryCommand extends $Command<UpdateNamedQueryCommandInput, UpdateNamedQueryCommandOutput, AthenaClientResolvedConfig> {
            readonly input: UpdateNamedQueryCommandInput;
            constructor(input: UpdateNamedQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNamedQueryCommandInput, UpdateNamedQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdatePreparedStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { UpdatePreparedStatementInput, UpdatePreparedStatementOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface UpdatePreparedStatementCommandInput extends UpdatePreparedStatementInput {
    }
    export interface UpdatePreparedStatementCommandOutput extends UpdatePreparedStatementOutput, __MetadataBearer {
    }
    /**
        * <p>Updates a prepared statement.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, UpdatePreparedStatementCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, UpdatePreparedStatementCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new UpdatePreparedStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePreparedStatementCommandInput} for command's `input` shape.
        * @see {@link UpdatePreparedStatementCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class UpdatePreparedStatementCommand extends $Command<UpdatePreparedStatementCommandInput, UpdatePreparedStatementCommandOutput, AthenaClientResolvedConfig> {
            readonly input: UpdatePreparedStatementCommandInput;
            constructor(input: UpdatePreparedStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePreparedStatementCommandInput, UpdatePreparedStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/commands/UpdateWorkGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AthenaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/AthenaClient";
    import { UpdateWorkGroupInput, UpdateWorkGroupOutput } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0";
    export interface UpdateWorkGroupCommandInput extends UpdateWorkGroupInput {
    }
    export interface UpdateWorkGroupCommandOutput extends UpdateWorkGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the workgroup with the specified name. The workgroup's name cannot be
        *             changed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AthenaClient, UpdateWorkGroupCommand } from "@aws-sdk/client-athena"; // ES Modules import
        * // const { AthenaClient, UpdateWorkGroupCommand } = require("@aws-sdk/client-athena"); // CommonJS import
        * const client = new AthenaClient(config);
        * const command = new UpdateWorkGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkGroupCommandOutput} for command's `response` shape.
        * @see {@link AthenaClientResolvedConfig | config} for AthenaClient's `config` shape.
        *
        */
    export class UpdateWorkGroupCommand extends $Command<UpdateWorkGroupCommandInput, UpdateWorkGroupCommandOutput, AthenaClientResolvedConfig> {
            readonly input: UpdateWorkGroupCommandInput;
            constructor(input: UpdateWorkGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AthenaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkGroupCommandInput, UpdateWorkGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AthenaServiceException as __BaseException } from "@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/AthenaServiceException";
    export enum S3AclOption {
            BUCKET_OWNER_FULL_CONTROL = "BUCKET_OWNER_FULL_CONTROL"
    }
    /**
        * <p>Indicates that an Amazon S3 canned ACL should be set to control ownership of
        *             stored query results. When Athena stores query results in Amazon S3,
        *             the canned ACL is set with the <code>x-amz-acl</code> request header. For more
        *             information about S3 Object Ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html#object-ownership-overview">Object Ownership settings</a> in the <i>Amazon S3 User
        *                 Guide</i>.</p>
        */
    export interface AclConfiguration {
            /**
                * <p>The Amazon S3 canned ACL that Athena should specify when storing
                *             query results. Currently the only supported canned ACL is
                *                 <code>BUCKET_OWNER_FULL_CONTROL</code>. If a query runs in a workgroup and the
                *             workgroup overrides client-side settings, then the Amazon S3 canned ACL
                *             specified in the workgroup's settings is used for all queries that run in the workgroup.
                *             For more information about Amazon S3 canned ACLs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl">Canned ACL</a> in the <i>Amazon S3 User Guide</i>.</p>
                */
            S3AclOption: S3AclOption | string | undefined;
    }
    export namespace AclConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AclConfiguration) => any;
    }
    /**
        * <p>Contains an array of named query IDs.</p>
        */
    export interface BatchGetNamedQueryInput {
            /**
                * <p>An array of query IDs.</p>
                */
            NamedQueryIds: string[] | undefined;
    }
    export namespace BatchGetNamedQueryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetNamedQueryInput) => any;
    }
    /**
        * <p>A query, where <code>QueryString</code> contains the SQL statements that make up the
        *             query.</p>
        */
    export interface NamedQuery {
            /**
                * <p>The query name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The query description.</p>
                */
            Description?: string;
            /**
                * <p>The database to which the query belongs.</p>
                */
            Database: string | undefined;
            /**
                * <p>The SQL statements that make up the query.</p>
                */
            QueryString: string | undefined;
            /**
                * <p>The unique identifier of the query.</p>
                */
            NamedQueryId?: string;
            /**
                * <p>The name of the workgroup that contains the named query.</p>
                */
            WorkGroup?: string;
    }
    export namespace NamedQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NamedQuery) => any;
    }
    /**
        * <p>Information about a named query ID that could not be processed.</p>
        */
    export interface UnprocessedNamedQueryId {
            /**
                * <p>The unique identifier of the named query.</p>
                */
            NamedQueryId?: string;
            /**
                * <p>The error code returned when the processing request for the named query failed, if
                *             applicable.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message returned when the processing request for the named query failed, if
                *             applicable.</p>
                */
            ErrorMessage?: string;
    }
    export namespace UnprocessedNamedQueryId {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnprocessedNamedQueryId) => any;
    }
    export interface BatchGetNamedQueryOutput {
            /**
                * <p>Information about the named query IDs submitted.</p>
                */
            NamedQueries?: NamedQuery[];
            /**
                * <p>Information about provided query IDs.</p>
                */
            UnprocessedNamedQueryIds?: UnprocessedNamedQueryId[];
    }
    export namespace BatchGetNamedQueryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetNamedQueryOutput) => any;
    }
    /**
        * <p>Indicates a platform issue, which may be due to a transient condition or
        *             outage.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>Indicates that something is wrong with the input to the request. For example, a
        *             required parameter may be missing or out of range.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            /**
                * <p>The error code returned when the query execution failed to process, or when the
                *             processing request for the named query failed.</p>
                */
            AthenaErrorCode?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    export interface BatchGetPreparedStatementInput {
            /**
                * <p>A list of prepared statement names to return.</p>
                */
            PreparedStatementNames: string[] | undefined;
            /**
                * <p>The name of the workgroup to which the prepared statements belong.</p>
                */
            WorkGroup: string | undefined;
    }
    export namespace BatchGetPreparedStatementInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetPreparedStatementInput) => any;
    }
    /**
        * <p>A prepared SQL statement for use with Athena.</p>
        */
    export interface PreparedStatement {
            /**
                * <p>The name of the prepared statement.</p>
                */
            StatementName?: string;
            /**
                * <p>The query string for the prepared statement.</p>
                */
            QueryStatement?: string;
            /**
                * <p>The name of the workgroup to which the prepared statement belongs.</p>
                */
            WorkGroupName?: string;
            /**
                * <p>The description of the prepared statement.</p>
                */
            Description?: string;
            /**
                * <p>The last modified time of the prepared statement.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace PreparedStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PreparedStatement) => any;
    }
    /**
        * <p>The name of a prepared statement that could not be returned.</p>
        */
    export interface UnprocessedPreparedStatementName {
            /**
                * <p>The name of a prepared statement that could not be returned due to an error.</p>
                */
            StatementName?: string;
            /**
                * <p>The error code returned when the request for the prepared statement failed.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message containing the reason why the prepared statement could not be returned.
                *             The following error messages are possible:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>INVALID_INPUT</code> - The name of the prepared statement that was
                *                     provided is not valid (for example, the name is too long).</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>STATEMENT_NOT_FOUND</code> - A prepared statement with the name provided
                *                     could not be found.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>UNAUTHORIZED</code> - The requester does not have permission to access
                *                     the workgroup that contains the prepared statement.</p>
                *             </li>
                *          </ul>
                */
            ErrorMessage?: string;
    }
    export namespace UnprocessedPreparedStatementName {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnprocessedPreparedStatementName) => any;
    }
    export interface BatchGetPreparedStatementOutput {
            /**
                * <p>The list of prepared statements returned.</p>
                */
            PreparedStatements?: PreparedStatement[];
            /**
                * <p>A list of one or more prepared statements that were requested but could not be returned.</p>
                */
            UnprocessedPreparedStatementNames?: UnprocessedPreparedStatementName[];
    }
    export namespace BatchGetPreparedStatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetPreparedStatementOutput) => any;
    }
    /**
        * <p>Contains an array of query execution IDs.</p>
        */
    export interface BatchGetQueryExecutionInput {
            /**
                * <p>An array of query execution IDs.</p>
                */
            QueryExecutionIds: string[] | undefined;
    }
    export namespace BatchGetQueryExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetQueryExecutionInput) => any;
    }
    /**
        * <p>The Athena engine version for running queries.</p>
        */
    export interface EngineVersion {
            /**
                * <p>The engine version requested by the user. Possible values are determined by the output
                *             of <code>ListEngineVersions</code>, including Auto. The default is Auto.</p>
                */
            SelectedEngineVersion?: string;
            /**
                * <p>Read only. The engine version on which the query runs. If the user requests a valid
                *             engine version other than Auto, the effective engine version is the same as the engine
                *             version that the user requested. If the user requests Auto, the effective engine version
                *             is chosen by Athena. When a request to update the engine version is made by
                *             a <code>CreateWorkGroup</code> or <code>UpdateWorkGroup</code> operation, the
                *                 <code>EffectiveEngineVersion</code> field is ignored.</p>
                */
            EffectiveEngineVersion?: string;
    }
    export namespace EngineVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EngineVersion) => any;
    }
    /**
        * <p>The database and data catalog context in which the query execution occurs.</p>
        */
    export interface QueryExecutionContext {
            /**
                * <p>The name of the database used in the query execution. The database must exist in the
                *             catalog.</p>
                */
            Database?: string;
            /**
                * <p>The name of the data catalog used in the query execution.</p>
                */
            Catalog?: string;
    }
    export namespace QueryExecutionContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryExecutionContext) => any;
    }
    export enum EncryptionOption {
            CSE_KMS = "CSE_KMS",
            SSE_KMS = "SSE_KMS",
            SSE_S3 = "SSE_S3"
    }
    /**
        * <p>If query results are encrypted in Amazon S3, indicates the encryption option
        *             used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key
        *             information.</p>
        */
    export interface EncryptionConfiguration {
            /**
                * <p>Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (<code>SSE_S3</code>), server-side encryption with KMS-managed keys
                *                 (<code>SSE_KMS</code>), or client-side encryption with KMS-managed keys
                *                 (<code>CSE_KMS</code>) is used.</p>
                *         <p>If a query runs in a workgroup and the workgroup overrides client-side settings, then
                *             the workgroup's setting for encryption is used. It specifies whether query results must
                *             be encrypted, for all queries that run in this workgroup. </p>
                */
            EncryptionOption: EncryptionOption | string | undefined;
            /**
                * <p>For <code>SSE_KMS</code> and <code>CSE_KMS</code>, this is the KMS key ARN or
                *             ID.</p>
                */
            KmsKey?: string;
    }
    export namespace EncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionConfiguration) => any;
    }
    /**
        * <p>The location in Amazon S3 where query results are stored and the encryption
        *             option, if any, used for query results. These are known as "client-side settings". If
        *             workgroup settings override client-side settings, then the query uses the workgroup
        *             settings.</p>
        */
    export interface ResultConfiguration {
            /**
                * <p>The location in Amazon S3 where your query results are stored, such as
                *                 <code>s3://path/to/query/bucket/</code>. To run the query, you must specify the
                *             query results location using one of the ways: either for individual queries using either
                *             this setting (client-side), or in the workgroup, using <a>WorkGroupConfiguration</a>. If none of them is set, Athena
                *             issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a>. If
                *             workgroup settings override client-side settings, then the query uses the settings
                *             specified for the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.</p>
                */
            OutputLocation?: string;
            /**
                * <p>If query results are encrypted in Amazon S3, indicates the encryption option
                *             used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information.
                *             This is a client-side setting. If workgroup settings override client-side settings, then
                *             the query uses the encryption configuration that is specified for the workgroup, and
                *             also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
            /**
                * <p>The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by <a>ResultConfiguration$OutputLocation</a>.
                *             If set, Athena uses the value for <code>ExpectedBucketOwner</code> when it
                *             makes Amazon S3 calls to your specified output location. If the
                *                 <code>ExpectedBucketOwner</code>
                *             Amazon Web Services account ID does not match the actual owner of the Amazon S3
                *             bucket, the call fails with a permissions error.</p>
                *         <p>This is a client-side setting. If workgroup settings override client-side settings,
                *             then the query uses the <code>ExpectedBucketOwner</code> setting that is specified for
                *             the workgroup, and also uses the location for storing query results specified in the
                *             workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>
                *             and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
                */
            ExpectedBucketOwner?: string;
            /**
                * <p>Indicates that an Amazon S3 canned ACL should be set to control ownership of
                *             stored query results. Currently the only supported canned ACL is
                *                 <code>BUCKET_OWNER_FULL_CONTROL</code>. This is a client-side setting. If workgroup
                *             settings override client-side settings, then the query uses the ACL configuration that
                *             is specified for the workgroup, and also uses the location for storing query results
                *             specified in the workgroup. For more information, see <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
                */
            AclConfiguration?: AclConfiguration;
    }
    export namespace ResultConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResultConfiguration) => any;
    }
    export enum StatementType {
            DDL = "DDL",
            DML = "DML",
            UTILITY = "UTILITY"
    }
    /**
        * <p>The amount of data scanned during the query execution and the amount of time that it
        *             took to execute, and the type of statement that was run.</p>
        */
    export interface QueryExecutionStatistics {
            /**
                * <p>The number of milliseconds that the query took to execute.</p>
                */
            EngineExecutionTimeInMillis?: number;
            /**
                * <p>The number of bytes in the data that was queried.</p>
                */
            DataScannedInBytes?: number;
            /**
                * <p>The location and file name of a data manifest file. The manifest file is saved to the
                *                 Athena query results location in Amazon S3. The manifest file
                *             tracks files that the query wrote to Amazon S3. If the query fails, the manifest
                *             file also tracks files that the query intended to write. The manifest is useful for
                *             identifying orphaned files resulting from a failed query. For more information, see
                *                 <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with Query
                *                 Results, Output Files, and Query History</a> in the <i>Amazon Athena User Guide</i>.</p>
                */
            DataManifestLocation?: string;
            /**
                * <p>The number of milliseconds that Athena took to run the query.</p>
                */
            TotalExecutionTimeInMillis?: number;
            /**
                * <p>The number of milliseconds that the query was in your query queue waiting for
                *             resources. Note that if transient errors occur, Athena might automatically
                *             add the query back to the queue.</p>
                */
            QueryQueueTimeInMillis?: number;
            /**
                * <p>The number of milliseconds that Athena took to plan the query processing
                *             flow. This includes the time spent retrieving table partitions from the data source.
                *             Note that because the query engine performs the query planning, query planning time is a
                *             subset of engine processing time.</p>
                */
            QueryPlanningTimeInMillis?: number;
            /**
                * <p>The number of milliseconds that Athena took to finalize and publish the
                *             query results after the query engine finished running the query.</p>
                */
            ServiceProcessingTimeInMillis?: number;
    }
    export namespace QueryExecutionStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryExecutionStatistics) => any;
    }
    /**
        * <p>Provides information about an Athena query error. The
        *                 <code>AthenaError</code> feature provides standardized error information to help you
        *             understand failed queries and take steps after a query failure occurs.
        *                 <code>AthenaError</code> includes an <code>ErrorCategory</code> field that specifies
        *             whether the cause of the failed query is due to system error, user error, or other
        *             error.</p>
        */
    export interface AthenaError {
            /**
                * <p>An integer value that specifies the category of a query failure error. The following
                *             list shows the category for each integer value.</p>
                *         <p>
                *             <b>1</b> - System</p>
                *         <p>
                *             <b>2</b> - User</p>
                *         <p>
                *             <b>3</b> - Other</p>
                */
            ErrorCategory?: number;
            /**
                * <p>An integer value that provides specific information about an Athena query
                *             error. For the meaning of specific values, see the <a href="https://docs.aws.amazon.com/athena/latest/ug/error-reference.html#error-reference-error-type-reference">Error Type Reference</a> in the <i>Amazon Athena User
                *                 Guide</i>.</p>
                */
            ErrorType?: number;
            /**
                * <p>True if the query might succeed if resubmitted.</p>
                */
            Retryable?: boolean;
            /**
                * <p>Contains a short description of the error that occurred.</p>
                */
            ErrorMessage?: string;
    }
    export namespace AthenaError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AthenaError) => any;
    }
    export enum QueryExecutionState {
            CANCELLED = "CANCELLED",
            FAILED = "FAILED",
            QUEUED = "QUEUED",
            RUNNING = "RUNNING",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>The completion date, current state, submission time, and state change reason (if
        *             applicable) for the query execution.</p>
        */
    export interface QueryExecutionStatus {
            /**
                * <p>The state of query execution. <code>QUEUED</code> indicates that the query has been
                *             submitted to the service, and Athena will execute the query as soon as
                *             resources are available. <code>RUNNING</code> indicates that the query is in execution
                *             phase. <code>SUCCEEDED</code> indicates that the query completed without errors.
                *                 <code>FAILED</code> indicates that the query experienced an error and did not
                *             complete processing. <code>CANCELLED</code> indicates that a user input interrupted
                *             query execution.</p>
                *         <note>
                *             <p>Athena automatically retries your queries in cases of certain
                *                 transient errors. As a result, you may see the query state transition from
                *                     <code>RUNNING</code> or <code>FAILED</code> to <code>QUEUED</code>. </p>
                *         </note>
                */
            State?: QueryExecutionState | string;
            /**
                * <p>Further detail about the status of the query.</p>
                */
            StateChangeReason?: string;
            /**
                * <p>The date and time that the query was submitted.</p>
                */
            SubmissionDateTime?: Date;
            /**
                * <p>The date and time that the query completed.</p>
                */
            CompletionDateTime?: Date;
            /**
                * <p>Provides information about an Athena query error.</p>
                */
            AthenaError?: AthenaError;
    }
    export namespace QueryExecutionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryExecutionStatus) => any;
    }
    /**
        * <p>Information about a single instance of a query execution.</p>
        */
    export interface QueryExecution {
            /**
                * <p>The unique identifier for each query execution.</p>
                */
            QueryExecutionId?: string;
            /**
                * <p>The SQL query statements which the query execution ran.</p>
                */
            Query?: string;
            /**
                * <p>The type of query statement that was run. <code>DDL</code> indicates DDL query
                *             statements. <code>DML</code> indicates DML (Data Manipulation Language) query
                *             statements, such as <code>CREATE TABLE AS SELECT</code>. <code>UTILITY</code> indicates
                *             query statements other than DDL and DML, such as <code>SHOW CREATE TABLE</code>, or
                *                 <code>DESCRIBE TABLE</code>.</p>
                */
            StatementType?: StatementType | string;
            /**
                * <p>The location in Amazon S3 where query results were stored and the encryption
                *             option, if any, used for query results. These are known as "client-side settings". If
                *             workgroup settings override client-side settings, then the query uses the location for
                *             the query results and the encryption configuration that are specified for the
                *             workgroup.</p>
                */
            ResultConfiguration?: ResultConfiguration;
            /**
                * <p>The database in which the query execution occurred.</p>
                */
            QueryExecutionContext?: QueryExecutionContext;
            /**
                * <p>The completion date, current state, submission time, and state change reason (if
                *             applicable) for the query execution.</p>
                */
            Status?: QueryExecutionStatus;
            /**
                * <p>Query execution statistics, such as the amount of data scanned, the amount of time
                *             that the query took to process, and the type of statement that was run.</p>
                */
            Statistics?: QueryExecutionStatistics;
            /**
                * <p>The name of the workgroup in which the query ran.</p>
                */
            WorkGroup?: string;
            /**
                * <p>The engine version that executed the query.</p>
                */
            EngineVersion?: EngineVersion;
            /**
                * <p>A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.</p>
                */
            ExecutionParameters?: string[];
    }
    export namespace QueryExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryExecution) => any;
    }
    /**
        * <p>Describes a query execution that failed to process.</p>
        */
    export interface UnprocessedQueryExecutionId {
            /**
                * <p>The unique identifier of the query execution.</p>
                */
            QueryExecutionId?: string;
            /**
                * <p>The error code returned when the query execution failed to process, if
                *             applicable.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message returned when the query execution failed to process, if
                *             applicable.</p>
                */
            ErrorMessage?: string;
    }
    export namespace UnprocessedQueryExecutionId {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnprocessedQueryExecutionId) => any;
    }
    export interface BatchGetQueryExecutionOutput {
            /**
                * <p>Information about a query execution.</p>
                */
            QueryExecutions?: QueryExecution[];
            /**
                * <p>Information about the query executions that failed to run.</p>
                */
            UnprocessedQueryExecutionIds?: UnprocessedQueryExecutionId[];
    }
    export namespace BatchGetQueryExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetQueryExecutionOutput) => any;
    }
    /**
        * <p>A label that you assign to a resource. In Athena, a resource can be a
        *             workgroup or data catalog. Each tag consists of a key and an optional value, both of
        *             which you define. For example, you can use tags to categorize Athena
        *             workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of
        *             tag keys to make it easier to search and filter workgroups or data catalogs in your
        *             account. For best practices, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode
        *             characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use
        *             letters and numbers representable in UTF-8, and the following characters: + - = . _ : /
        *             @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you
        *             specify more than one tag, separate them by commas. </p>
        */
    export interface Tag {
            /**
                * <p>A tag key. The tag key length is from 1 to 128 Unicode characters in UTF-8. You can
                *             use letters and numbers representable in UTF-8, and the following characters: + - = . _
                *             : / @. Tag keys are case-sensitive and must be unique per resource. </p>
                */
            Key?: string;
            /**
                * <p>A tag value. The tag value length is from 0 to 256 Unicode characters in UTF-8. You
                *             can use letters and numbers representable in UTF-8, and the following characters: + - =
                *             . _ : / @. Tag values are case-sensitive. </p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export enum DataCatalogType {
            GLUE = "GLUE",
            HIVE = "HIVE",
            LAMBDA = "LAMBDA"
    }
    export interface CreateDataCatalogInput {
            /**
                * <p>The name of the data catalog to create. The catalog name must be unique for the
                *                 Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at
                *             sign, or hyphen characters. The remainder of the length constraint of 256 is reserved
                *             for use by Athena.</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog,
                *                 <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an
                *                 Glue Data Catalog.</p>
                */
            Type: DataCatalogType | string | undefined;
            /**
                * <p>A description of the data catalog to be created.</p>
                */
            Description?: string;
            /**
                * <p>Specifies the Lambda function or functions to use for creating the data
                *             catalog. This is a mapping whose values depend on the catalog type. </p>
                *         <ul>
                *             <li>
                *                 <p>For the <code>HIVE</code> data catalog type, use the following syntax. The
                *                         <code>metadata-function</code> parameter is required. <code>The
                *                         sdk-version</code> parameter is optional and defaults to the currently
                *                     supported version.</p>
                *                 <p>
                *                   <code>metadata-function=<i>lambda_arn</i>,
                *                             sdk-version=<i>version_number</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets
                *                     of required parameters, but not both.</p>
                *                 <ul>
                *                   <li>
                *                         <p>If you have one Lambda function that processes metadata
                *                             and another for reading the actual data, use the following syntax. Both
                *                             parameters are required.</p>
                *                         <p>
                *                         <code>metadata-function=<i>lambda_arn</i>,
                *                                     record-function=<i>lambda_arn</i>
                *                         </code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p> If you have a composite Lambda function that processes
                *                             both metadata and data, use the following syntax to specify your Lambda function.</p>
                *                         <p>
                *                         <code>function=<i>lambda_arn</i>
                *                         </code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The
                *                             <code>
                *                      <i>catalog_id</i>
                *                   </code> is the account ID of the
                *                         Amazon Web Services account to which the Glue Data Catalog
                *                     belongs.</p>
                *                 <p>
                *                   <code>catalog-id=<i>catalog_id</i>
                *                   </code>
                *                </p>
                *                 <ul>
                *                   <li>
                *                         <p>The <code>GLUE</code> data catalog type also applies to the default
                *                                 <code>AwsDataCatalog</code> that already exists in your account, of
                *                             which you can have only one and cannot modify.</p>
                *                     </li>
                *                   <li>
                *                         <p>Queries that specify a Glue Data Catalog other than the default
                *                                 <code>AwsDataCatalog</code> must be run on Athena engine
                *                             version 2.</p>
                *                     </li>
                *                   <li>
                *                         <p>In Regions where Athena engine version 2 is not available,
                *                             creating new Glue data catalogs results in an
                *                                 <code>INVALID_INPUT</code> error.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>A list of comma separated tags to add to the data catalog that is created.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDataCatalogInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataCatalogInput) => any;
    }
    export interface CreateDataCatalogOutput {
    }
    export namespace CreateDataCatalogOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataCatalogOutput) => any;
    }
    export interface CreateNamedQueryInput {
            /**
                * <p>The query name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The query description.</p>
                */
            Description?: string;
            /**
                * <p>The database to which the query belongs.</p>
                */
            Database: string | undefined;
            /**
                * <p>The contents of the query with all query statements.</p>
                */
            QueryString: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure the request to create the query is
                *             idempotent (executes only once). If another <code>CreateNamedQuery</code> request is
                *             received, the same response is returned and another query is not created. If a parameter
                *             has changed, for example, the <code>QueryString</code>, an error is returned.</p>
                *         <important>
                *             <p>This token is listed as not required because Amazon Web Services SDKs (for example
                *                 the Amazon Web Services SDK for Java) auto-generate the token for users. If you are
                *                 not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide
                *                 this token or the action will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
            /**
                * <p>The name of the workgroup in which the named query is being created.</p>
                */
            WorkGroup?: string;
    }
    export namespace CreateNamedQueryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNamedQueryInput) => any;
    }
    export interface CreateNamedQueryOutput {
            /**
                * <p>The unique ID of the query.</p>
                */
            NamedQueryId?: string;
    }
    export namespace CreateNamedQueryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNamedQueryOutput) => any;
    }
    export interface CreatePreparedStatementInput {
            /**
                * <p>The name of the prepared statement.</p>
                */
            StatementName: string | undefined;
            /**
                * <p>The name of the workgroup to which the prepared statement belongs.</p>
                */
            WorkGroup: string | undefined;
            /**
                * <p>The query string for the prepared statement.</p>
                */
            QueryStatement: string | undefined;
            /**
                * <p>The description of the prepared statement.</p>
                */
            Description?: string;
    }
    export namespace CreatePreparedStatementInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePreparedStatementInput) => any;
    }
    export interface CreatePreparedStatementOutput {
    }
    export namespace CreatePreparedStatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePreparedStatementOutput) => any;
    }
    /**
        * <p>The configuration of the workgroup, which includes the location in Amazon S3
        *             where query results are stored, the encryption option, if any, used for query results,
        *             whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether
        *             workgroup settings override query settings, and the data usage limits for the amount of
        *             data scanned per query or per workgroup. The workgroup settings override is specified in
        *                 <code>EnforceWorkGroupConfiguration</code> (true/false) in the
        *                 <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. </p>
        */
    export interface WorkGroupConfiguration {
            /**
                * <p>The configuration for the workgroup, which includes the location in Amazon S3
                *             where query results are stored and the encryption option, if any, used for query
                *             results. To run the query, you must specify the query results location using one of the
                *             ways: either in the workgroup using this setting, or for individual queries
                *             (client-side), using <a>ResultConfiguration$OutputLocation</a>. If none of
                *             them is set, Athena issues an error that no output location is provided. For
                *             more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a>.</p>
                */
            ResultConfiguration?: ResultConfiguration;
            /**
                * <p>If set to "true", the settings for the workgroup override client-side settings. If set
                *             to "false", client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
                */
            EnforceWorkGroupConfiguration?: boolean;
            /**
                * <p>Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.</p>
                */
            PublishCloudWatchMetricsEnabled?: boolean;
            /**
                * <p>The upper data usage limit (cutoff) for the amount of bytes a single query in a
                *             workgroup is allowed to scan.</p>
                */
            BytesScannedCutoffPerQuery?: number;
            /**
                * <p>If set to <code>true</code>, allows members assigned to a workgroup to reference
                *                 Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>,
                *             workgroup members cannot query data from Requester Pays buckets, and queries that
                *             retrieve data from Requester Pays buckets cause an error. The default is
                *                 <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester
                *                 Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer
                *                 Guide</i>.</p>
                */
            RequesterPaysEnabled?: boolean;
            /**
                * <p>The engine version that all queries running on the workgroup use. Queries on the
                *                 <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine
                *             regardless of this setting.</p>
                */
            EngineVersion?: EngineVersion;
    }
    export namespace WorkGroupConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkGroupConfiguration) => any;
    }
    export interface CreateWorkGroupInput {
            /**
                * <p>The workgroup name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The configuration for the workgroup, which includes the location in Amazon S3
                *             where query results are stored, the encryption configuration, if any, used for
                *             encrypting query results, whether the Amazon CloudWatch Metrics are enabled for the
                *             workgroup, the limit for the amount of bytes scanned (cutoff) per query, if it is
                *             specified, and whether workgroup's settings (specified with
                *                 <code>EnforceWorkGroupConfiguration</code>) in the
                *                 <code>WorkGroupConfiguration</code> override client-side settings. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.</p>
                */
            Configuration?: WorkGroupConfiguration;
            /**
                * <p>The workgroup description.</p>
                */
            Description?: string;
            /**
                * <p>A list of comma separated tags to add to the workgroup that is created.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateWorkGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkGroupInput) => any;
    }
    export interface CreateWorkGroupOutput {
    }
    export namespace CreateWorkGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkGroupOutput) => any;
    }
    export interface DeleteDataCatalogInput {
            /**
                * <p>The name of the data catalog to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteDataCatalogInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataCatalogInput) => any;
    }
    export interface DeleteDataCatalogOutput {
    }
    export namespace DeleteDataCatalogOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataCatalogOutput) => any;
    }
    export interface DeleteNamedQueryInput {
            /**
                * <p>The unique ID of the query to delete.</p>
                */
            NamedQueryId?: string;
    }
    export namespace DeleteNamedQueryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNamedQueryInput) => any;
    }
    export interface DeleteNamedQueryOutput {
    }
    export namespace DeleteNamedQueryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNamedQueryOutput) => any;
    }
    export interface DeletePreparedStatementInput {
            /**
                * <p>The name of the prepared statement to delete.</p>
                */
            StatementName: string | undefined;
            /**
                * <p>The workgroup to which the statement to be deleted belongs.</p>
                */
            WorkGroup: string | undefined;
    }
    export namespace DeletePreparedStatementInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePreparedStatementInput) => any;
    }
    export interface DeletePreparedStatementOutput {
    }
    export namespace DeletePreparedStatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePreparedStatementOutput) => any;
    }
    /**
        * <p>A resource, such as a workgroup, was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The name of the Amazon resource.</p>
                */
            ResourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface DeleteWorkGroupInput {
            /**
                * <p>The unique name of the workgroup to delete.</p>
                */
            WorkGroup: string | undefined;
            /**
                * <p>The option to delete the workgroup and its contents even if the workgroup contains any
                *             named queries or query executions.</p>
                */
            RecursiveDeleteOption?: boolean;
    }
    export namespace DeleteWorkGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkGroupInput) => any;
    }
    export interface DeleteWorkGroupOutput {
    }
    export namespace DeleteWorkGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkGroupOutput) => any;
    }
    export interface GetDatabaseInput {
            /**
                * <p>The name of the data catalog that contains the database to return.</p>
                */
            CatalogName: string | undefined;
            /**
                * <p>The name of the database to return.</p>
                */
            DatabaseName: string | undefined;
    }
    export namespace GetDatabaseInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatabaseInput) => any;
    }
    /**
        * <p>Contains metadata information for a database in a data catalog.</p>
        */
    export interface Database {
            /**
                * <p>The name of the database.</p>
                */
            Name: string | undefined;
            /**
                * <p>An optional description of the database.</p>
                */
            Description?: string;
            /**
                * <p>A set of custom key/value pairs.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace Database {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Database) => any;
    }
    export interface GetDatabaseOutput {
            /**
                * <p>The database returned.</p>
                */
            Database?: Database;
    }
    export namespace GetDatabaseOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatabaseOutput) => any;
    }
    /**
        * <p>An exception that Athena received when it called a custom metastore.
        *             Occurs if the error is not caused by user input (<code>InvalidRequestException</code>)
        *             or from the Athena platform (<code>InternalServerException</code>). For
        *             example, if a user-created Lambda function is missing permissions, the
        *                 Lambda
        *             <code>4XX</code> exception is returned in a <code>MetadataException</code>.</p>
        */
    export class MetadataException extends __BaseException {
            readonly name: "MetadataException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MetadataException, __BaseException>);
    }
    export interface GetDataCatalogInput {
            /**
                * <p>The name of the data catalog to return.</p>
                */
            Name: string | undefined;
    }
    export namespace GetDataCatalogInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataCatalogInput) => any;
    }
    /**
        * <p>Contains information about a data catalog in an Amazon Web Services account.</p>
        */
    export interface DataCatalog {
            /**
                * <p>The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign,
                *             or hyphen characters. The remainder of the length constraint of 256 is reserved for use
                *             by Athena.</p>
                */
            Name: string | undefined;
            /**
                * <p>An optional description of the data catalog.</p>
                */
            Description?: string;
            /**
                * <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog,
                *                 <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an
                *                 Glue Data Catalog.</p>
                */
            Type: DataCatalogType | string | undefined;
            /**
                * <p>Specifies the Lambda function or functions to use for the data catalog.
                *             This is a mapping whose values depend on the catalog type. </p>
                *         <ul>
                *             <li>
                *                 <p>For the <code>HIVE</code> data catalog type, use the following syntax. The
                *                         <code>metadata-function</code> parameter is required. <code>The
                *                         sdk-version</code> parameter is optional and defaults to the currently
                *                     supported version.</p>
                *                 <p>
                *                   <code>metadata-function=<i>lambda_arn</i>,
                *                             sdk-version=<i>version_number</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets
                *                     of required parameters, but not both.</p>
                *                 <ul>
                *                   <li>
                *                         <p>If you have one Lambda function that processes metadata
                *                             and another for reading the actual data, use the following syntax. Both
                *                             parameters are required.</p>
                *                         <p>
                *                         <code>metadata-function=<i>lambda_arn</i>,
                *                                     record-function=<i>lambda_arn</i>
                *                         </code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p> If you have a composite Lambda function that processes
                *                             both metadata and data, use the following syntax to specify your Lambda function.</p>
                *                         <p>
                *                         <code>function=<i>lambda_arn</i>
                *                         </code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The
                *                             <code>
                *                      <i>catalog_id</i>
                *                   </code> is the account ID of the
                *                         Amazon Web Services account to which the Glue catalog
                *                     belongs.</p>
                *                 <p>
                *                   <code>catalog-id=<i>catalog_id</i>
                *                   </code>
                *                </p>
                *                 <ul>
                *                   <li>
                *                         <p>The <code>GLUE</code> data catalog type also applies to the default
                *                                 <code>AwsDataCatalog</code> that already exists in your account, of
                *                             which you can have only one and cannot modify.</p>
                *                     </li>
                *                   <li>
                *                         <p>Queries that specify a Glue Data Catalog other than the default
                *                                 <code>AwsDataCatalog</code> must be run on Athena engine
                *                             version 2.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Parameters?: Record<string, string>;
    }
    export namespace DataCatalog {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCatalog) => any;
    }
    export interface GetDataCatalogOutput {
            /**
                * <p>The data catalog returned.</p>
                */
            DataCatalog?: DataCatalog;
    }
    export namespace GetDataCatalogOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataCatalogOutput) => any;
    }
    export interface GetNamedQueryInput {
            /**
                * <p>The unique ID of the query. Use <a>ListNamedQueries</a> to get query
                *             IDs.</p>
                */
            NamedQueryId: string | undefined;
    }
    export namespace GetNamedQueryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNamedQueryInput) => any;
    }
    export interface GetNamedQueryOutput {
            /**
                * <p>Information about the query.</p>
                */
            NamedQuery?: NamedQuery;
    }
    export namespace GetNamedQueryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNamedQueryOutput) => any;
    }
    export interface GetPreparedStatementInput {
            /**
                * <p>The name of the prepared statement to retrieve.</p>
                */
            StatementName: string | undefined;
            /**
                * <p>The workgroup to which the statement to be retrieved belongs.</p>
                */
            WorkGroup: string | undefined;
    }
    export namespace GetPreparedStatementInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPreparedStatementInput) => any;
    }
    export interface GetPreparedStatementOutput {
            /**
                * <p>The name of the prepared statement that was retrieved.</p>
                */
            PreparedStatement?: PreparedStatement;
    }
    export namespace GetPreparedStatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPreparedStatementOutput) => any;
    }
    export interface GetQueryExecutionInput {
            /**
                * <p>The unique ID of the query execution.</p>
                */
            QueryExecutionId: string | undefined;
    }
    export namespace GetQueryExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryExecutionInput) => any;
    }
    export interface GetQueryExecutionOutput {
            /**
                * <p>Information about the query execution.</p>
                */
            QueryExecution?: QueryExecution;
    }
    export namespace GetQueryExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryExecutionOutput) => any;
    }
    export interface GetQueryResultsInput {
            /**
                * <p>The unique ID of the query execution.</p>
                */
            QueryExecutionId: string | undefined;
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results (rows) to return in this request.</p>
                */
            MaxResults?: number;
    }
    export namespace GetQueryResultsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryResultsInput) => any;
    }
    export enum ColumnNullable {
            NOT_NULL = "NOT_NULL",
            NULLABLE = "NULLABLE",
            UNKNOWN = "UNKNOWN"
    }
    /**
        * <p>Information about the columns in a query execution result.</p>
        */
    export interface ColumnInfo {
            /**
                * <p>The catalog to which the query results belong.</p>
                */
            CatalogName?: string;
            /**
                * <p>The schema name (database name) to which the query results belong.</p>
                */
            SchemaName?: string;
            /**
                * <p>The table name for the query results.</p>
                */
            TableName?: string;
            /**
                * <p>The name of the column.</p>
                */
            Name: string | undefined;
            /**
                * <p>A column label.</p>
                */
            Label?: string;
            /**
                * <p>The data type of the column.</p>
                */
            Type: string | undefined;
            /**
                * <p>For <code>DECIMAL</code> data types, specifies the total number of digits, up to 38.
                *             For performance reasons, we recommend up to 18 digits.</p>
                */
            Precision?: number;
            /**
                * <p>For <code>DECIMAL</code> data types, specifies the total number of digits in the
                *             fractional part of the value. Defaults to 0.</p>
                */
            Scale?: number;
            /**
                * <p>Indicates the column's nullable status.</p>
                */
            Nullable?: ColumnNullable | string;
            /**
                * <p>Indicates whether values in the column are case-sensitive.</p>
                */
            CaseSensitive?: boolean;
    }
    export namespace ColumnInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnInfo) => any;
    }
    /**
        * <p>The metadata that describes the column structure and data types of a table of query
        *             results. To return a <code>ResultSetMetadata</code> object, use <a>GetQueryResults</a>.</p>
        */
    export interface ResultSetMetadata {
            /**
                * <p>Information about the columns returned in a query result metadata.</p>
                */
            ColumnInfo?: ColumnInfo[];
    }
    export namespace ResultSetMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResultSetMetadata) => any;
    }
    /**
        * <p>A piece of data (a field in the table).</p>
        */
    export interface Datum {
            /**
                * <p>The value of the datum.</p>
                */
            VarCharValue?: string;
    }
    export namespace Datum {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Datum) => any;
    }
    /**
        * <p>The rows that make up a query result table.</p>
        */
    export interface Row {
            /**
                * <p>The data that populates a row in a query result table.</p>
                */
            Data?: Datum[];
    }
    export namespace Row {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Row) => any;
    }
    /**
        * <p>The metadata and rows that make up a query result set. The metadata describes the
        *             column structure and data types. To return a <code>ResultSet</code> object, use <a>GetQueryResults</a>.</p>
        */
    export interface ResultSet {
            /**
                * <p>The rows in the table.</p>
                */
            Rows?: Row[];
            /**
                * <p>The metadata that describes the column structure and data types of a table of query
                *             results.</p>
                */
            ResultSetMetadata?: ResultSetMetadata;
    }
    export namespace ResultSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResultSet) => any;
    }
    export interface GetQueryResultsOutput {
            /**
                * <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement.
                *         </p>
                */
            UpdateCount?: number;
            /**
                * <p>The results of the query execution.</p>
                */
            ResultSet?: ResultSet;
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace GetQueryResultsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryResultsOutput) => any;
    }
    export interface GetQueryRuntimeStatisticsInput {
            /**
                * <p>The unique ID of the query execution.</p>
                */
            QueryExecutionId: string | undefined;
    }
    export namespace GetQueryRuntimeStatisticsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryRuntimeStatisticsInput) => any;
    }
    /**
        * <p>Statistics such as input rows and bytes read by the query, rows and bytes output by the query,
        *             and the number of rows written by the query.</p>
        */
    export interface QueryRuntimeStatisticsRows {
            /**
                * <p>The number of rows read to execute the query.</p>
                */
            InputRows?: number;
            /**
                * <p>The number of bytes read to execute the query.</p>
                */
            InputBytes?: number;
            /**
                * <p>The number of bytes returned by the query.</p>
                */
            OutputBytes?: number;
            /**
                * <p>The number of rows returned by the query.</p>
                */
            OutputRows?: number;
    }
    export namespace QueryRuntimeStatisticsRows {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryRuntimeStatisticsRows) => any;
    }
    /**
        * <p>Timeline statistics such as query queue time, planning time, execution time, service processing
        *             time, and total execution time.</p>
        */
    export interface QueryRuntimeStatisticsTimeline {
            /**
                * <p>The number of milliseconds that the query was in your query queue waiting for
                *             resources. Note that if transient errors occur, Athena might automatically
                *             add the query back to the queue.</p>
                */
            QueryQueueTimeInMillis?: number;
            /**
                * <p>The number of milliseconds that Athena took to plan the query processing
                *             flow. This includes the time spent retrieving table partitions from the data source.
                *             Note that because the query engine performs the query planning, query planning time is a
                *             subset of engine processing time.</p>
                */
            QueryPlanningTimeInMillis?: number;
            /**
                * <p>The number of milliseconds that the query took to execute.</p>
                */
            EngineExecutionTimeInMillis?: number;
            /**
                * <p>The number of milliseconds that Athena took to finalize and publish the
                *             query results after the query engine finished running the query.</p>
                */
            ServiceProcessingTimeInMillis?: number;
            /**
                * <p>The number of milliseconds that Athena took to run the query.</p>
                */
            TotalExecutionTimeInMillis?: number;
    }
    export namespace QueryRuntimeStatisticsTimeline {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryRuntimeStatisticsTimeline) => any;
    }
    export interface GetTableMetadataInput {
            /**
                * <p>The name of the data catalog that contains the database and table metadata to
                *             return.</p>
                */
            CatalogName: string | undefined;
            /**
                * <p>The name of the database that contains the table metadata to return.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table for which metadata is returned.</p>
                */
            TableName: string | undefined;
    }
    export namespace GetTableMetadataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableMetadataInput) => any;
    }
    /**
        * <p>Contains metadata for a column in a table.</p>
        */
    export interface Column {
            /**
                * <p>The name of the column.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data type of the column.</p>
                */
            Type?: string;
            /**
                * <p>Optional information about the column.</p>
                */
            Comment?: string;
    }
    export namespace Column {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Column) => any;
    }
    /**
        * <p>Contains metadata for a table.</p>
        */
    export interface TableMetadata {
            /**
                * <p>The name of the table.</p>
                */
            Name: string | undefined;
            /**
                * <p>The time that the table was created.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The last time the table was accessed.</p>
                */
            LastAccessTime?: Date;
            /**
                * <p>The type of table. In Athena, only <code>EXTERNAL_TABLE</code> is
                *             supported.</p>
                */
            TableType?: string;
            /**
                * <p>A list of the columns in the table.</p>
                */
            Columns?: Column[];
            /**
                * <p>A list of the partition keys in the table.</p>
                */
            PartitionKeys?: Column[];
            /**
                * <p>A set of custom key/value pairs for table properties.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace TableMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableMetadata) => any;
    }
    export interface GetTableMetadataOutput {
            /**
                * <p>An object that contains table metadata.</p>
                */
            TableMetadata?: TableMetadata;
    }
    export namespace GetTableMetadataOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableMetadataOutput) => any;
    }
    export interface GetWorkGroupInput {
            /**
                * <p>The name of the workgroup.</p>
                */
            WorkGroup: string | undefined;
    }
    export namespace GetWorkGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkGroupInput) => any;
    }
    export enum WorkGroupState {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>A workgroup, which contains a name, description, creation time, state, and other
        *             configuration, listed under <a>WorkGroup$Configuration</a>. Each workgroup
        *             enables you to isolate queries for you or your group of users from other queries in the
        *             same account, to configure the query results location and the encryption configuration
        *             (known as workgroup settings), to enable sending query metrics to Amazon CloudWatch,
        *             and to establish per-query data usage control limits for all queries in a workgroup. The
        *             workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code>
        *             (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.</p>
        */
    export interface WorkGroup {
            /**
                * <p>The workgroup name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The state of the workgroup: ENABLED or DISABLED.</p>
                */
            State?: WorkGroupState | string;
            /**
                * <p>The configuration of the workgroup, which includes the location in Amazon S3
                *             where query results are stored, the encryption configuration, if any, used for query
                *             results; whether the Amazon CloudWatch Metrics are enabled for the workgroup;
                *             whether workgroup settings override client-side settings; and the data usage limits for
                *             the amount of data scanned per query or per workgroup. The workgroup settings override
                *             is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the
                *                 <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.</p>
                */
            Configuration?: WorkGroupConfiguration;
            /**
                * <p>The workgroup description.</p>
                */
            Description?: string;
            /**
                * <p>The date and time the workgroup was created.</p>
                */
            CreationTime?: Date;
    }
    export namespace WorkGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkGroup) => any;
    }
    export interface GetWorkGroupOutput {
            /**
                * <p>Information about the workgroup.</p>
                */
            WorkGroup?: WorkGroup;
    }
    export namespace GetWorkGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkGroupOutput) => any;
    }
    export interface ListDatabasesInput {
            /**
                * <p>The name of the data catalog that contains the databases to return.</p>
                */
            CatalogName: string | undefined;
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies the maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDatabasesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatabasesInput) => any;
    }
    export interface ListDatabasesOutput {
            /**
                * <p>A list of databases from a data catalog.</p>
                */
            DatabaseList?: Database[];
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the NextToken from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListDatabasesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatabasesOutput) => any;
    }
    export interface ListDataCatalogsInput {
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the NextToken from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies the maximum number of data catalogs to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDataCatalogsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataCatalogsInput) => any;
    }
    /**
        * <p>The summary information for the data catalog, which includes its name and type.</p>
        */
    export interface DataCatalogSummary {
            /**
                * <p>The name of the data catalog. The catalog name is unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign,
                *             or hyphen characters. The remainder of the length constraint of 256 is reserved for use
                *             by Athena.</p>
                */
            CatalogName?: string;
            /**
                * <p>The data catalog type.</p>
                */
            Type?: DataCatalogType | string;
    }
    export namespace DataCatalogSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCatalogSummary) => any;
    }
    export interface ListDataCatalogsOutput {
            /**
                * <p>A summary list of data catalogs.</p>
                */
            DataCatalogsSummary?: DataCatalogSummary[];
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the NextToken from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListDataCatalogsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataCatalogsOutput) => any;
    }
    export interface ListEngineVersionsInput {
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of engine versions to return in this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEngineVersionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEngineVersionsInput) => any;
    }
    export interface ListEngineVersionsOutput {
            /**
                * <p>A list of engine versions that are available to choose from.</p>
                */
            EngineVersions?: EngineVersion[];
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListEngineVersionsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEngineVersionsOutput) => any;
    }
    export interface ListNamedQueriesInput {
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of queries to return in this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The name of the workgroup from which the named queries are being returned. If a
                *             workgroup is not specified, the saved queries for the primary workgroup are
                *             returned.</p>
                */
            WorkGroup?: string;
    }
    export namespace ListNamedQueriesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNamedQueriesInput) => any;
    }
    export interface ListNamedQueriesOutput {
            /**
                * <p>The list of unique query IDs.</p>
                */
            NamedQueryIds?: string[];
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListNamedQueriesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNamedQueriesOutput) => any;
    }
    export interface ListPreparedStatementsInput {
            /**
                * <p>The workgroup to list the prepared statements for.</p>
                */
            WorkGroup: string | undefined;
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPreparedStatementsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPreparedStatementsInput) => any;
    }
    /**
        * <p>The name and last modified time of the prepared statement.</p>
        */
    export interface PreparedStatementSummary {
            /**
                * <p>The name of the prepared statement.</p>
                */
            StatementName?: string;
            /**
                * <p>The last modified time of the prepared statement.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace PreparedStatementSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PreparedStatementSummary) => any;
    }
    export interface ListPreparedStatementsOutput {
            /**
                * <p>The list of prepared statements for the workgroup.</p>
                */
            PreparedStatements?: PreparedStatementSummary[];
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListPreparedStatementsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPreparedStatementsOutput) => any;
    }
    export interface ListQueryExecutionsInput {
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of query executions to return in this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The name of the workgroup from which queries are being returned. If a workgroup is not
                *             specified, a list of available query execution IDs for the queries in the primary
                *             workgroup is returned.</p>
                */
            WorkGroup?: string;
    }
    export namespace ListQueryExecutionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQueryExecutionsInput) => any;
    }
    export interface ListQueryExecutionsOutput {
            /**
                * <p>The unique IDs of each query execution as an array of strings.</p>
                */
            QueryExecutionIds?: string[];
            /**
                * <p>A token to be used by the next request if this request is truncated.</p>
                */
            NextToken?: string;
    }
    export namespace ListQueryExecutionsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQueryExecutionsOutput) => any;
    }
    export interface ListTableMetadataInput {
            /**
                * <p>The name of the data catalog for which table metadata should be returned.</p>
                */
            CatalogName: string | undefined;
            /**
                * <p>The name of the database for which table metadata should be returned.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>A regex filter that pattern-matches table names. If no expression is supplied,
                *             metadata for all tables are listed.</p>
                */
            Expression?: string;
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the NextToken from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies the maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTableMetadataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTableMetadataInput) => any;
    }
    export interface ListTableMetadataOutput {
            /**
                * <p>A list of table metadata.</p>
                */
            TableMetadataList?: TableMetadata[];
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the NextToken from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListTableMetadataOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTableMetadataOutput) => any;
    }
    export interface ListTagsForResourceInput {
            /**
                * <p>Lists the tags for the resource with the specified ARN.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The token for the next set of results, or null if there are no additional results for
                *             this request, where the request lists the tags for the resource with the specified
                *             ARN.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned per request that lists the tags for the
                *             resource.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTagsForResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
    }
    export interface ListTagsForResourceOutput {
            /**
                * <p>The list of tags associated with the specified resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A token to be used by the next request if this request is truncated.</p>
                */
            NextToken?: string;
    }
    export namespace ListTagsForResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceOutput) => any;
    }
    export interface ListWorkGroupsInput {
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of workgroups to return in this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListWorkGroupsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkGroupsInput) => any;
    }
    /**
        * <p>The summary information for the workgroup, which includes its name, state,
        *             description, and the date and time it was created.</p>
        */
    export interface WorkGroupSummary {
            /**
                * <p>The name of the workgroup.</p>
                */
            Name?: string;
            /**
                * <p>The state of the workgroup.</p>
                */
            State?: WorkGroupState | string;
            /**
                * <p>The workgroup description.</p>
                */
            Description?: string;
            /**
                * <p>The workgroup creation date and time.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The engine version setting for all queries on the workgroup. Queries on the
                *                 <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine
                *             regardless of this setting.</p>
                */
            EngineVersion?: EngineVersion;
    }
    export namespace WorkGroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkGroupSummary) => any;
    }
    export interface ListWorkGroupsOutput {
            /**
                * <p>A list of <a>WorkGroupSummary</a> objects that include the names,
                *             descriptions, creation times, and states for each workgroup.</p>
                */
            WorkGroups?: WorkGroupSummary[];
            /**
                * <p>A token generated by the Athena service that specifies where to continue
                *             pagination if a previous request was truncated. To obtain the next set of pages, pass in
                *             the <code>NextToken</code> from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListWorkGroupsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkGroupsOutput) => any;
    }
    export interface StartQueryExecutionInput {
            /**
                * <p>The SQL query statements to be executed.</p>
                */
            QueryString: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure the request to create the query is
                *             idempotent (executes only once). If another <code>StartQueryExecution</code> request is
                *             received, the same response is returned and another query is not created. If a parameter
                *             has changed, for example, the <code>QueryString</code>, an error is returned.</p>
                *         <important>
                *             <p>This token is listed as not required because Amazon Web Services SDKs (for example
                *                 the Amazon Web Services SDK for Java) auto-generate the token for users. If you are
                *                 not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide
                *                 this token or the action will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
            /**
                * <p>The database within which the query executes.</p>
                */
            QueryExecutionContext?: QueryExecutionContext;
            /**
                * <p>Specifies information about where and how to save the results of the query execution.
                *             If the query runs in a workgroup, then workgroup's settings may override query settings.
                *             This affects the query results location. The workgroup settings override is specified in
                *             EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.</p>
                */
            ResultConfiguration?: ResultConfiguration;
            /**
                * <p>The name of the workgroup in which the query is being started.</p>
                */
            WorkGroup?: string;
            /**
                * <p>A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.</p>
                */
            ExecutionParameters?: string[];
    }
    export namespace StartQueryExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartQueryExecutionInput) => any;
    }
    export interface StartQueryExecutionOutput {
            /**
                * <p>The unique ID of the query that ran as a result of this request.</p>
                */
            QueryExecutionId?: string;
    }
    export namespace StartQueryExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartQueryExecutionOutput) => any;
    }
    export enum ThrottleReason {
            CONCURRENT_QUERY_LIMIT_EXCEEDED = "CONCURRENT_QUERY_LIMIT_EXCEEDED"
    }
    /**
        * <p>Indicates that the request was throttled.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The reason for the query throttling, for example, when it exceeds the concurrent query
                *             limit.</p>
                */
            Reason?: ThrottleReason | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    export interface StopQueryExecutionInput {
            /**
                * <p>The unique ID of the query execution to stop.</p>
                */
            QueryExecutionId?: string;
    }
    export namespace StopQueryExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopQueryExecutionInput) => any;
    }
    export interface StopQueryExecutionOutput {
    }
    export namespace StopQueryExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopQueryExecutionOutput) => any;
    }
    export interface TagResourceInput {
            /**
                * <p>Specifies the ARN of the Athena resource (workgroup or data catalog) to
                *             which tags are to be added.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>A collection of one or more tags, separated by commas, to be added to an Athena workgroup or data catalog resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceInput) => any;
    }
    export interface TagResourceOutput {
    }
    export namespace TagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceOutput) => any;
    }
    export interface UntagResourceInput {
            /**
                * <p>Specifies the ARN of the resource from which tags are to be removed.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>A comma-separated list of one or more tag keys whose tags are to be removed from the
                *             specified resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceInput) => any;
    }
    export interface UntagResourceOutput {
    }
    export namespace UntagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceOutput) => any;
    }
    export interface UpdateDataCatalogInput {
            /**
                * <p>The name of the data catalog to update. The catalog name must be unique for the
                *                 Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at
                *             sign, or hyphen characters. The remainder of the length constraint of 256 is reserved
                *             for use by Athena.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies the type of data catalog to update. Specify <code>LAMBDA</code> for a
                *             federated catalog, <code>HIVE</code> for an external hive metastore, or
                *                 <code>GLUE</code> for an Glue Data Catalog.</p>
                */
            Type: DataCatalogType | string | undefined;
            /**
                * <p>New or modified text that describes the data catalog.</p>
                */
            Description?: string;
            /**
                * <p>Specifies the Lambda function or functions to use for updating the data
                *             catalog. This is a mapping whose values depend on the catalog type. </p>
                *         <ul>
                *             <li>
                *                 <p>For the <code>HIVE</code> data catalog type, use the following syntax. The
                *                         <code>metadata-function</code> parameter is required. <code>The
                *                         sdk-version</code> parameter is optional and defaults to the currently
                *                     supported version.</p>
                *                 <p>
                *                   <code>metadata-function=<i>lambda_arn</i>,
                *                             sdk-version=<i>version_number</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets
                *                     of required parameters, but not both.</p>
                *                 <ul>
                *                   <li>
                *                         <p>If you have one Lambda function that processes metadata
                *                             and another for reading the actual data, use the following syntax. Both
                *                             parameters are required.</p>
                *                         <p>
                *                         <code>metadata-function=<i>lambda_arn</i>,
                *                                     record-function=<i>lambda_arn</i>
                *                         </code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p> If you have a composite Lambda function that processes
                *                             both metadata and data, use the following syntax to specify your Lambda function.</p>
                *                         <p>
                *                         <code>function=<i>lambda_arn</i>
                *                         </code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Parameters?: Record<string, string>;
    }
    export namespace UpdateDataCatalogInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataCatalogInput) => any;
    }
    export interface UpdateDataCatalogOutput {
    }
    export namespace UpdateDataCatalogOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataCatalogOutput) => any;
    }
    export interface UpdateNamedQueryInput {
            /**
                * <p>The unique identifier (UUID) of the query.</p>
                */
            NamedQueryId: string | undefined;
            /**
                * <p>The name of the query.</p>
                */
            Name: string | undefined;
            /**
                * <p>The query description.</p>
                */
            Description?: string;
            /**
                * <p>The contents of the query with all query statements.</p>
                */
            QueryString: string | undefined;
    }
    export namespace UpdateNamedQueryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNamedQueryInput) => any;
    }
    export interface UpdateNamedQueryOutput {
    }
    export namespace UpdateNamedQueryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNamedQueryOutput) => any;
    }
    export interface UpdatePreparedStatementInput {
            /**
                * <p>The name of the prepared statement.</p>
                */
            StatementName: string | undefined;
            /**
                * <p>The workgroup for the prepared statement.</p>
                */
            WorkGroup: string | undefined;
            /**
                * <p>The query string for the prepared statement.</p>
                */
            QueryStatement: string | undefined;
            /**
                * <p>The description of the prepared statement.</p>
                */
            Description?: string;
    }
    export namespace UpdatePreparedStatementInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePreparedStatementInput) => any;
    }
    export interface UpdatePreparedStatementOutput {
    }
    export namespace UpdatePreparedStatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePreparedStatementOutput) => any;
    }
    /**
        * <p>The information about the updates in the query results, such as output location and
        *             encryption configuration for the query results.</p>
        */
    export interface ResultConfigurationUpdates {
            /**
                * <p>The location in Amazon S3 where your query results are stored, such as
                *                 <code>s3://path/to/query/bucket/</code>. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a> If
                *             workgroup settings override client-side settings, then the query uses the location for
                *             the query results and the encryption configuration that are specified for the workgroup.
                *             The "workgroup settings override" is specified in
                *                 <code>EnforceWorkGroupConfiguration</code> (true/false) in the
                *                 <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.</p>
                */
            OutputLocation?: string;
            /**
                * <p>If set to "true", indicates that the previously-specified query results location (also
                *             known as a client-side setting) for queries in this workgroup should be ignored and set
                *             to null. If set to "false" or not set, and a value is present in the
                *                 <code>OutputLocation</code> in <code>ResultConfigurationUpdates</code> (the
                *             client-side setting), the <code>OutputLocation</code> in the workgroup's
                *                 <code>ResultConfiguration</code> will be updated with the new value. For more
                *             information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override
                *                 Client-Side Settings</a>.</p>
                */
            RemoveOutputLocation?: boolean;
            /**
                * <p>The encryption configuration for the query results.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
            /**
                * <p>If set to "true", indicates that the previously-specified encryption configuration
                *             (also known as the client-side setting) for queries in this workgroup should be ignored
                *             and set to null. If set to "false" or not set, and a value is present in the
                *                 <code>EncryptionConfiguration</code> in <code>ResultConfigurationUpdates</code> (the
                *             client-side setting), the <code>EncryptionConfiguration</code> in the workgroup's
                *                 <code>ResultConfiguration</code> will be updated with the new value. For more
                *             information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override
                *                 Client-Side Settings</a>.</p>
                */
            RemoveEncryptionConfiguration?: boolean;
            /**
                * <p>The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by <a>ResultConfiguration$OutputLocation</a>.
                *             If set, Athena uses the value for <code>ExpectedBucketOwner</code> when it
                *             makes Amazon S3 calls to your specified output location. If the
                *                 <code>ExpectedBucketOwner</code>
                *             Amazon Web Services account ID does not match the actual owner of the Amazon S3
                *             bucket, the call fails with a permissions error.</p>
                *
                *         <p>If workgroup settings override client-side settings, then the query uses the
                *                 <code>ExpectedBucketOwner</code> setting that is specified for the workgroup, and
                *             also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
                */
            ExpectedBucketOwner?: string;
            /**
                * <p>If set to "true", removes the Amazon Web Services account ID previously specified for
                *                 <a>ResultConfiguration$ExpectedBucketOwner</a>. If set to "false" or not
                *             set, and a value is present in the <code>ExpectedBucketOwner</code> in
                *                 <code>ResultConfigurationUpdates</code> (the client-side setting), the
                *                 <code>ExpectedBucketOwner</code> in the workgroup's <code>ResultConfiguration</code>
                *             is updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override
                *                 Client-Side Settings</a>.</p>
                */
            RemoveExpectedBucketOwner?: boolean;
            /**
                * <p>The ACL configuration for the query results.</p>
                */
            AclConfiguration?: AclConfiguration;
            /**
                * <p>If set to <code>true</code>, indicates that the previously-specified ACL configuration
                *             for queries in this workgroup should be ignored and set to null. If set to
                *                 <code>false</code> or not set, and a value is present in the
                *                 <code>AclConfiguration</code> of <code>ResultConfigurationUpdates</code>, the
                *                 <code>AclConfiguration</code> in the workgroup's <code>ResultConfiguration</code> is
                *             updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override
                *                 Client-Side Settings</a>.</p>
                */
            RemoveAclConfiguration?: boolean;
    }
    export namespace ResultConfigurationUpdates {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResultConfigurationUpdates) => any;
    }
    /**
        * <p>The configuration information that will be updated for this workgroup, which includes
        *             the location in Amazon S3 where query results are stored, the encryption option,
        *             if any, used for query results, whether the Amazon CloudWatch Metrics are enabled
        *             for the workgroup, whether the workgroup settings override the client-side settings, and
        *             the data usage limit for the amount of bytes scanned per query, if it is
        *             specified.</p>
        */
    export interface WorkGroupConfigurationUpdates {
            /**
                * <p>If set to "true", the settings for the workgroup override client-side settings. If set
                *             to "false" client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
                */
            EnforceWorkGroupConfiguration?: boolean;
            /**
                * <p>The result configuration information about the queries in this workgroup that will be
                *             updated. Includes the updated results location and an updated option for encrypting
                *             query results.</p>
                */
            ResultConfigurationUpdates?: ResultConfigurationUpdates;
            /**
                * <p>Indicates whether this workgroup enables publishing metrics to Amazon CloudWatch.</p>
                */
            PublishCloudWatchMetricsEnabled?: boolean;
            /**
                * <p>The upper limit (cutoff) for the amount of bytes a single query in a workgroup is
                *             allowed to scan.</p>
                */
            BytesScannedCutoffPerQuery?: number;
            /**
                * <p>Indicates that the data usage control limit per query is removed. <a>WorkGroupConfiguration$BytesScannedCutoffPerQuery</a>
                *          </p>
                */
            RemoveBytesScannedCutoffPerQuery?: boolean;
            /**
                * <p>If set to <code>true</code>, allows members assigned to a workgroup to specify Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup
                *             members cannot query data from Requester Pays buckets, and queries that retrieve data
                *             from Requester Pays buckets cause an error. The default is <code>false</code>. For more
                *             information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a>
                *             in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
                */
            RequesterPaysEnabled?: boolean;
            /**
                * <p>The engine version requested when a workgroup is updated. After the update, all
                *             queries on the workgroup run on the requested engine version. If no value was previously
                *             set, the default is Auto. Queries on the <code>AmazonAthenaPreviewFunctionality</code>
                *             workgroup run on the preview engine regardless of this setting.</p>
                */
            EngineVersion?: EngineVersion;
    }
    export namespace WorkGroupConfigurationUpdates {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkGroupConfigurationUpdates) => any;
    }
    export interface UpdateWorkGroupInput {
            /**
                * <p>The specified workgroup that will be updated.</p>
                */
            WorkGroup: string | undefined;
            /**
                * <p>The workgroup description.</p>
                */
            Description?: string;
            /**
                * <p>The workgroup configuration that will be updated for the given workgroup.</p>
                */
            ConfigurationUpdates?: WorkGroupConfigurationUpdates;
            /**
                * <p>The workgroup state that will be updated for the given workgroup.</p>
                */
            State?: WorkGroupState | string;
    }
    export namespace UpdateWorkGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkGroupInput) => any;
    }
    export interface UpdateWorkGroupOutput {
    }
    export namespace UpdateWorkGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkGroupOutput) => any;
    }
    /**
        * <p>Stage plan information such as name, identifier, sub plans, and remote sources.</p>
        */
    export interface QueryStagePlanNode {
            /**
                * <p>Name of the query stage plan that describes the operation this stage is performing as part of
                *             query execution.</p>
                */
            Name?: string;
            /**
                * <p>Information about the operation this query stage plan node is performing.</p>
                */
            Identifier?: string;
            /**
                * <p>Stage plan information such as name, identifier, sub plans, and remote sources of child plan nodes/</p>
                */
            Children?: QueryStagePlanNode[];
            /**
                * <p>Source plan node IDs.</p>
                */
            RemoteSources?: string[];
    }
    export namespace QueryStagePlanNode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryStagePlanNode) => any;
    }
    /**
        * <p>Stage statistics such as input and output rows and bytes, execution time and stage state. This
        *             information also includes substages and the query stage plan.</p>
        */
    export interface QueryStage {
            /**
                * <p>The identifier for a stage.</p>
                */
            StageId?: number;
            /**
                * <p>State of the stage after query execution.</p>
                */
            State?: string;
            /**
                * <p>The number of bytes output from the stage after execution.</p>
                */
            OutputBytes?: number;
            /**
                * <p>The number of rows output from the stage after execution.</p>
                */
            OutputRows?: number;
            /**
                * <p>The number of bytes input into the stage for execution.</p>
                */
            InputBytes?: number;
            /**
                * <p>The number of rows input into the stage for execution.</p>
                */
            InputRows?: number;
            /**
                * <p>Time taken to execute this stage.</p>
                */
            ExecutionTime?: number;
            /**
                * <p>Stage plan information such as name, identifier, sub plans, and source stages.</p>
                */
            QueryStagePlan?: QueryStagePlanNode;
            /**
                * <p>List of sub query stages that form this stage execution plan.</p>
                */
            SubStages?: QueryStage[];
    }
    export namespace QueryStage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryStage) => any;
    }
    /**
        * <p>The query execution timeline, statistics on input and output rows and bytes, and the different
        *             query stages that form the query execution plan.</p>
        */
    export interface QueryRuntimeStatistics {
            /**
                * <p>Timeline statistics such as query queue time, planning time, execution time, service processing
                *             time, and total execution time.</p>
                */
            Timeline?: QueryRuntimeStatisticsTimeline;
            /**
                * <p>Statistics such as input rows and bytes read by the query, rows and bytes output by the query,
                *             and the number of rows written by the query.</p>
                */
            Rows?: QueryRuntimeStatisticsRows;
            /**
                * <p>Stage statistics such as input and output rows and bytes, execution time, and stage state. This
                *             information also includes substages and the query stage plan.</p>
                */
            OutputStage?: QueryStage;
    }
    export namespace QueryRuntimeStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryRuntimeStatistics) => any;
    }
    export interface GetQueryRuntimeStatisticsOutput {
            /**
                * <p>Runtime statistics about the query execution.</p>
                */
            QueryRuntimeStatistics?: QueryRuntimeStatistics;
    }
    export namespace GetQueryRuntimeStatisticsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryRuntimeStatisticsOutput) => any;
    }
}

declare module '@aws-sdk/client-athena/node_modules/@aws-sdk/client-athena/dist-types/models/AthenaServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Athena service.
        */
    export class AthenaServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

