// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-groundstation' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CancelContactCommandInput, CancelContactCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CancelContactCommand";
    import { CreateConfigCommandInput, CreateConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateConfigCommand";
    import { CreateDataflowEndpointGroupCommandInput, CreateDataflowEndpointGroupCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateDataflowEndpointGroupCommand";
    import { CreateMissionProfileCommandInput, CreateMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateMissionProfileCommand";
    import { DeleteConfigCommandInput, DeleteConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteConfigCommand";
    import { DeleteDataflowEndpointGroupCommandInput, DeleteDataflowEndpointGroupCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteDataflowEndpointGroupCommand";
    import { DeleteMissionProfileCommandInput, DeleteMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteMissionProfileCommand";
    import { DescribeContactCommandInput, DescribeContactCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DescribeContactCommand";
    import { GetConfigCommandInput, GetConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetConfigCommand";
    import { GetDataflowEndpointGroupCommandInput, GetDataflowEndpointGroupCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetDataflowEndpointGroupCommand";
    import { GetMinuteUsageCommandInput, GetMinuteUsageCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetMinuteUsageCommand";
    import { GetMissionProfileCommandInput, GetMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetMissionProfileCommand";
    import { GetSatelliteCommandInput, GetSatelliteCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetSatelliteCommand";
    import { ListConfigsCommandInput, ListConfigsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListConfigsCommand";
    import { ListContactsCommandInput, ListContactsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListContactsCommand";
    import { ListDataflowEndpointGroupsCommandInput, ListDataflowEndpointGroupsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListDataflowEndpointGroupsCommand";
    import { ListGroundStationsCommandInput, ListGroundStationsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListGroundStationsCommand";
    import { ListMissionProfilesCommandInput, ListMissionProfilesCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListMissionProfilesCommand";
    import { ListSatellitesCommandInput, ListSatellitesCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListSatellitesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListTagsForResourceCommand";
    import { ReserveContactCommandInput, ReserveContactCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ReserveContactCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UntagResourceCommand";
    import { UpdateConfigCommandInput, UpdateConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UpdateConfigCommand";
    import { UpdateMissionProfileCommandInput, UpdateMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UpdateMissionProfileCommand";
    import { GroundStationClient } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    /**
        * <p>Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that
        *       enables you to control satellite communications, downlink and process satellite data, and
        *       scale your satellite operations efficiently and cost-effectively without having
        *       to build or manage your own ground station infrastructure.</p>
        */
    export class GroundStation extends GroundStationClient {
            /**
                * <p>Cancels a contact with a specified contact ID.</p>
                */
            cancelContact(args: CancelContactCommandInput, options?: __HttpHandlerOptions): Promise<CancelContactCommandOutput>;
            cancelContact(args: CancelContactCommandInput, cb: (err: any, data?: CancelContactCommandOutput) => void): void;
            cancelContact(args: CancelContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelContactCommandOutput) => void): void;
            /**
                * <p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p>
                *          <p>Only one type of <code>configData</code> can be specified.</p>
                */
            createConfig(args: CreateConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigCommandOutput>;
            createConfig(args: CreateConfigCommandInput, cb: (err: any, data?: CreateConfigCommandOutput) => void): void;
            createConfig(args: CreateConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigCommandOutput) => void): void;
            /**
                * <p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p>
                *          <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code>
                *          to specify which endpoints to use during a contact.</p>
                *          <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code>
                *          must match a <code>DataflowEndpoint</code> in the same group.</p>
                */
            createDataflowEndpointGroup(args: CreateDataflowEndpointGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataflowEndpointGroupCommandOutput>;
            createDataflowEndpointGroup(args: CreateDataflowEndpointGroupCommandInput, cb: (err: any, data?: CreateDataflowEndpointGroupCommandOutput) => void): void;
            createDataflowEndpointGroup(args: CreateDataflowEndpointGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataflowEndpointGroupCommandOutput) => void): void;
            /**
                * <p>Creates a mission profile.</p>
                *          <p>
                *             <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings
                *          has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>
                */
            createMissionProfile(args: CreateMissionProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateMissionProfileCommandOutput>;
            createMissionProfile(args: CreateMissionProfileCommandInput, cb: (err: any, data?: CreateMissionProfileCommandOutput) => void): void;
            createMissionProfile(args: CreateMissionProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMissionProfileCommandOutput) => void): void;
            /**
                * <p>Deletes a <code>Config</code>.</p>
                */
            deleteConfig(args: DeleteConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigCommandOutput>;
            deleteConfig(args: DeleteConfigCommandInput, cb: (err: any, data?: DeleteConfigCommandOutput) => void): void;
            deleteConfig(args: DeleteConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigCommandOutput) => void): void;
            /**
                * <p>Deletes a dataflow endpoint group.</p>
                */
            deleteDataflowEndpointGroup(args: DeleteDataflowEndpointGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataflowEndpointGroupCommandOutput>;
            deleteDataflowEndpointGroup(args: DeleteDataflowEndpointGroupCommandInput, cb: (err: any, data?: DeleteDataflowEndpointGroupCommandOutput) => void): void;
            deleteDataflowEndpointGroup(args: DeleteDataflowEndpointGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataflowEndpointGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a mission profile.</p>
                */
            deleteMissionProfile(args: DeleteMissionProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMissionProfileCommandOutput>;
            deleteMissionProfile(args: DeleteMissionProfileCommandInput, cb: (err: any, data?: DeleteMissionProfileCommandOutput) => void): void;
            deleteMissionProfile(args: DeleteMissionProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMissionProfileCommandOutput) => void): void;
            /**
                * <p>Describes an existing contact.</p>
                */
            describeContact(args: DescribeContactCommandInput, options?: __HttpHandlerOptions): Promise<DescribeContactCommandOutput>;
            describeContact(args: DescribeContactCommandInput, cb: (err: any, data?: DescribeContactCommandOutput) => void): void;
            describeContact(args: DescribeContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeContactCommandOutput) => void): void;
            /**
                * <p>Returns <code>Config</code> information.</p>
                *          <p>Only one <code>Config</code> response can be returned.</p>
                */
            getConfig(args: GetConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigCommandOutput>;
            getConfig(args: GetConfigCommandInput, cb: (err: any, data?: GetConfigCommandOutput) => void): void;
            getConfig(args: GetConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigCommandOutput) => void): void;
            /**
                * <p>Returns the dataflow endpoint group.</p>
                */
            getDataflowEndpointGroup(args: GetDataflowEndpointGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetDataflowEndpointGroupCommandOutput>;
            getDataflowEndpointGroup(args: GetDataflowEndpointGroupCommandInput, cb: (err: any, data?: GetDataflowEndpointGroupCommandOutput) => void): void;
            getDataflowEndpointGroup(args: GetDataflowEndpointGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDataflowEndpointGroupCommandOutput) => void): void;
            /**
                * <p>Returns the number of minutes used by account.</p>
                */
            getMinuteUsage(args: GetMinuteUsageCommandInput, options?: __HttpHandlerOptions): Promise<GetMinuteUsageCommandOutput>;
            getMinuteUsage(args: GetMinuteUsageCommandInput, cb: (err: any, data?: GetMinuteUsageCommandOutput) => void): void;
            getMinuteUsage(args: GetMinuteUsageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMinuteUsageCommandOutput) => void): void;
            /**
                * <p>Returns a mission profile.</p>
                */
            getMissionProfile(args: GetMissionProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetMissionProfileCommandOutput>;
            getMissionProfile(args: GetMissionProfileCommandInput, cb: (err: any, data?: GetMissionProfileCommandOutput) => void): void;
            getMissionProfile(args: GetMissionProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMissionProfileCommandOutput) => void): void;
            /**
                * <p>Returns a satellite.</p>
                */
            getSatellite(args: GetSatelliteCommandInput, options?: __HttpHandlerOptions): Promise<GetSatelliteCommandOutput>;
            getSatellite(args: GetSatelliteCommandInput, cb: (err: any, data?: GetSatelliteCommandOutput) => void): void;
            getSatellite(args: GetSatelliteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSatelliteCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>Config</code> objects.</p>
                */
            listConfigs(args: ListConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigsCommandOutput>;
            listConfigs(args: ListConfigsCommandInput, cb: (err: any, data?: ListConfigsCommandOutput) => void): void;
            listConfigs(args: ListConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigsCommandOutput) => void): void;
            /**
                * <p>Returns a list of contacts.</p>
                *          <p>If <code>statusList</code> contains AVAILABLE, the request must include
                *       <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>.
                *       </p>
                */
            listContacts(args: ListContactsCommandInput, options?: __HttpHandlerOptions): Promise<ListContactsCommandOutput>;
            listContacts(args: ListContactsCommandInput, cb: (err: any, data?: ListContactsCommandOutput) => void): void;
            listContacts(args: ListContactsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListContactsCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>DataflowEndpoint</code> groups.</p>
                */
            listDataflowEndpointGroups(args: ListDataflowEndpointGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListDataflowEndpointGroupsCommandOutput>;
            listDataflowEndpointGroups(args: ListDataflowEndpointGroupsCommandInput, cb: (err: any, data?: ListDataflowEndpointGroupsCommandOutput) => void): void;
            listDataflowEndpointGroups(args: ListDataflowEndpointGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataflowEndpointGroupsCommandOutput) => void): void;
            /**
                * <p>Returns a list of ground stations. </p>
                */
            listGroundStations(args: ListGroundStationsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroundStationsCommandOutput>;
            listGroundStations(args: ListGroundStationsCommandInput, cb: (err: any, data?: ListGroundStationsCommandOutput) => void): void;
            listGroundStations(args: ListGroundStationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroundStationsCommandOutput) => void): void;
            /**
                * <p>Returns a list of mission profiles.</p>
                */
            listMissionProfiles(args: ListMissionProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListMissionProfilesCommandOutput>;
            listMissionProfiles(args: ListMissionProfilesCommandInput, cb: (err: any, data?: ListMissionProfilesCommandOutput) => void): void;
            listMissionProfiles(args: ListMissionProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMissionProfilesCommandOutput) => void): void;
            /**
                * <p>Returns a list of satellites.</p>
                */
            listSatellites(args: ListSatellitesCommandInput, options?: __HttpHandlerOptions): Promise<ListSatellitesCommandOutput>;
            listSatellites(args: ListSatellitesCommandInput, cb: (err: any, data?: ListSatellitesCommandOutput) => void): void;
            listSatellites(args: ListSatellitesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSatellitesCommandOutput) => void): void;
            /**
                * <p>Returns a list of tags for a specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Reserves a contact using specified parameters.</p>
                */
            reserveContact(args: ReserveContactCommandInput, options?: __HttpHandlerOptions): Promise<ReserveContactCommandOutput>;
            reserveContact(args: ReserveContactCommandInput, cb: (err: any, data?: ReserveContactCommandOutput) => void): void;
            reserveContact(args: ReserveContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ReserveContactCommandOutput) => void): void;
            /**
                * <p>Assigns a tag to a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deassigns a resource tag.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the <code>Config</code> used when scheduling contacts.</p>
                *          <p>Updating a <code>Config</code> will not update the execution parameters
                *          for existing future contacts scheduled with this <code>Config</code>.</p>
                */
            updateConfig(args: UpdateConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigCommandOutput>;
            updateConfig(args: UpdateConfigCommandInput, cb: (err: any, data?: UpdateConfigCommandOutput) => void): void;
            updateConfig(args: UpdateConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigCommandOutput) => void): void;
            /**
                * <p>Updates a mission profile.</p>
                *          <p>Updating a mission profile will not update the execution parameters
                *          for existing future contacts.</p>
                */
            updateMissionProfile(args: UpdateMissionProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMissionProfileCommandOutput>;
            updateMissionProfile(args: UpdateMissionProfileCommandInput, cb: (err: any, data?: UpdateMissionProfileCommandOutput) => void): void;
            updateMissionProfile(args: UpdateMissionProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMissionProfileCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CancelContactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { CancelContactRequest, ContactIdResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface CancelContactCommandInput extends CancelContactRequest {
    }
    export interface CancelContactCommandOutput extends ContactIdResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels a contact with a specified contact ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, CancelContactCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, CancelContactCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new CancelContactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelContactCommandInput} for command's `input` shape.
        * @see {@link CancelContactCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class CancelContactCommand extends $Command<CancelContactCommandInput, CancelContactCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: CancelContactCommandInput;
            constructor(input: CancelContactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelContactCommandInput, CancelContactCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ConfigIdResponse, CreateConfigRequest } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface CreateConfigCommandInput extends CreateConfigRequest {
    }
    export interface CreateConfigCommandOutput extends ConfigIdResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p>
        *          <p>Only one type of <code>configData</code> can be specified.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, CreateConfigCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, CreateConfigCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new CreateConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigCommandInput} for command's `input` shape.
        * @see {@link CreateConfigCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class CreateConfigCommand extends $Command<CreateConfigCommandInput, CreateConfigCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: CreateConfigCommandInput;
            constructor(input: CreateConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigCommandInput, CreateConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateDataflowEndpointGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { CreateDataflowEndpointGroupRequest, DataflowEndpointGroupIdResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface CreateDataflowEndpointGroupCommandInput extends CreateDataflowEndpointGroupRequest {
    }
    export interface CreateDataflowEndpointGroupCommandOutput extends DataflowEndpointGroupIdResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p>
        *          <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code>
        *          to specify which endpoints to use during a contact.</p>
        *          <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code>
        *          must match a <code>DataflowEndpoint</code> in the same group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, CreateDataflowEndpointGroupCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, CreateDataflowEndpointGroupCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new CreateDataflowEndpointGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataflowEndpointGroupCommandInput} for command's `input` shape.
        * @see {@link CreateDataflowEndpointGroupCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class CreateDataflowEndpointGroupCommand extends $Command<CreateDataflowEndpointGroupCommandInput, CreateDataflowEndpointGroupCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: CreateDataflowEndpointGroupCommandInput;
            constructor(input: CreateDataflowEndpointGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataflowEndpointGroupCommandInput, CreateDataflowEndpointGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateMissionProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { CreateMissionProfileRequest, MissionProfileIdResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface CreateMissionProfileCommandInput extends CreateMissionProfileRequest {
    }
    export interface CreateMissionProfileCommandOutput extends MissionProfileIdResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a mission profile.</p>
        *          <p>
        *             <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings
        *          has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, CreateMissionProfileCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, CreateMissionProfileCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new CreateMissionProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMissionProfileCommandInput} for command's `input` shape.
        * @see {@link CreateMissionProfileCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class CreateMissionProfileCommand extends $Command<CreateMissionProfileCommandInput, CreateMissionProfileCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: CreateMissionProfileCommandInput;
            constructor(input: CreateMissionProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMissionProfileCommandInput, CreateMissionProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ConfigIdResponse, DeleteConfigRequest } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface DeleteConfigCommandInput extends DeleteConfigRequest {
    }
    export interface DeleteConfigCommandOutput extends ConfigIdResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <code>Config</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, DeleteConfigCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, DeleteConfigCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new DeleteConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class DeleteConfigCommand extends $Command<DeleteConfigCommandInput, DeleteConfigCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: DeleteConfigCommandInput;
            constructor(input: DeleteConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigCommandInput, DeleteConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteDataflowEndpointGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { DataflowEndpointGroupIdResponse, DeleteDataflowEndpointGroupRequest } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface DeleteDataflowEndpointGroupCommandInput extends DeleteDataflowEndpointGroupRequest {
    }
    export interface DeleteDataflowEndpointGroupCommandOutput extends DataflowEndpointGroupIdResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a dataflow endpoint group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, DeleteDataflowEndpointGroupCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, DeleteDataflowEndpointGroupCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new DeleteDataflowEndpointGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataflowEndpointGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteDataflowEndpointGroupCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class DeleteDataflowEndpointGroupCommand extends $Command<DeleteDataflowEndpointGroupCommandInput, DeleteDataflowEndpointGroupCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: DeleteDataflowEndpointGroupCommandInput;
            constructor(input: DeleteDataflowEndpointGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataflowEndpointGroupCommandInput, DeleteDataflowEndpointGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteMissionProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { DeleteMissionProfileRequest, MissionProfileIdResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface DeleteMissionProfileCommandInput extends DeleteMissionProfileRequest {
    }
    export interface DeleteMissionProfileCommandOutput extends MissionProfileIdResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a mission profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, DeleteMissionProfileCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, DeleteMissionProfileCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new DeleteMissionProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMissionProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteMissionProfileCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class DeleteMissionProfileCommand extends $Command<DeleteMissionProfileCommandInput, DeleteMissionProfileCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: DeleteMissionProfileCommandInput;
            constructor(input: DeleteMissionProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMissionProfileCommandInput, DeleteMissionProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DescribeContactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { DescribeContactRequest, DescribeContactResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface DescribeContactCommandInput extends DescribeContactRequest {
    }
    export interface DescribeContactCommandOutput extends DescribeContactResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an existing contact.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, DescribeContactCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, DescribeContactCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new DescribeContactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeContactCommandInput} for command's `input` shape.
        * @see {@link DescribeContactCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class DescribeContactCommand extends $Command<DescribeContactCommandInput, DescribeContactCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: DescribeContactCommandInput;
            constructor(input: DescribeContactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeContactCommandInput, DescribeContactCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { GetConfigRequest, GetConfigResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface GetConfigCommandInput extends GetConfigRequest {
    }
    export interface GetConfigCommandOutput extends GetConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Returns <code>Config</code> information.</p>
        *          <p>Only one <code>Config</code> response can be returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, GetConfigCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, GetConfigCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new GetConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConfigCommandInput} for command's `input` shape.
        * @see {@link GetConfigCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class GetConfigCommand extends $Command<GetConfigCommandInput, GetConfigCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: GetConfigCommandInput;
            constructor(input: GetConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConfigCommandInput, GetConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetDataflowEndpointGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { GetDataflowEndpointGroupRequest, GetDataflowEndpointGroupResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface GetDataflowEndpointGroupCommandInput extends GetDataflowEndpointGroupRequest {
    }
    export interface GetDataflowEndpointGroupCommandOutput extends GetDataflowEndpointGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the dataflow endpoint group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, GetDataflowEndpointGroupCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, GetDataflowEndpointGroupCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new GetDataflowEndpointGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDataflowEndpointGroupCommandInput} for command's `input` shape.
        * @see {@link GetDataflowEndpointGroupCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class GetDataflowEndpointGroupCommand extends $Command<GetDataflowEndpointGroupCommandInput, GetDataflowEndpointGroupCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: GetDataflowEndpointGroupCommandInput;
            constructor(input: GetDataflowEndpointGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDataflowEndpointGroupCommandInput, GetDataflowEndpointGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetMinuteUsageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { GetMinuteUsageRequest, GetMinuteUsageResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface GetMinuteUsageCommandInput extends GetMinuteUsageRequest {
    }
    export interface GetMinuteUsageCommandOutput extends GetMinuteUsageResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the number of minutes used by account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, GetMinuteUsageCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, GetMinuteUsageCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new GetMinuteUsageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMinuteUsageCommandInput} for command's `input` shape.
        * @see {@link GetMinuteUsageCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class GetMinuteUsageCommand extends $Command<GetMinuteUsageCommandInput, GetMinuteUsageCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: GetMinuteUsageCommandInput;
            constructor(input: GetMinuteUsageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMinuteUsageCommandInput, GetMinuteUsageCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetMissionProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { GetMissionProfileRequest, GetMissionProfileResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface GetMissionProfileCommandInput extends GetMissionProfileRequest {
    }
    export interface GetMissionProfileCommandOutput extends GetMissionProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a mission profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, GetMissionProfileCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, GetMissionProfileCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new GetMissionProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMissionProfileCommandInput} for command's `input` shape.
        * @see {@link GetMissionProfileCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class GetMissionProfileCommand extends $Command<GetMissionProfileCommandInput, GetMissionProfileCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: GetMissionProfileCommandInput;
            constructor(input: GetMissionProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMissionProfileCommandInput, GetMissionProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetSatelliteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { GetSatelliteRequest, GetSatelliteResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface GetSatelliteCommandInput extends GetSatelliteRequest {
    }
    export interface GetSatelliteCommandOutput extends GetSatelliteResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a satellite.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, GetSatelliteCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, GetSatelliteCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new GetSatelliteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSatelliteCommandInput} for command's `input` shape.
        * @see {@link GetSatelliteCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class GetSatelliteCommand extends $Command<GetSatelliteCommandInput, GetSatelliteCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: GetSatelliteCommandInput;
            constructor(input: GetSatelliteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSatelliteCommandInput, GetSatelliteCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ListConfigsRequest, ListConfigsResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ListConfigsCommandInput extends ListConfigsRequest {
    }
    export interface ListConfigsCommandOutput extends ListConfigsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>Config</code> objects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ListConfigsCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ListConfigsCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ListConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigsCommandInput} for command's `input` shape.
        * @see {@link ListConfigsCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ListConfigsCommand extends $Command<ListConfigsCommandInput, ListConfigsCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ListConfigsCommandInput;
            constructor(input: ListConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigsCommandInput, ListConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListContactsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ListContactsRequest, ListContactsResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ListContactsCommandInput extends ListContactsRequest {
    }
    export interface ListContactsCommandOutput extends ListContactsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of contacts.</p>
        *          <p>If <code>statusList</code> contains AVAILABLE, the request must include
        *       <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ListContactsCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ListContactsCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ListContactsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListContactsCommandInput} for command's `input` shape.
        * @see {@link ListContactsCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ListContactsCommand extends $Command<ListContactsCommandInput, ListContactsCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ListContactsCommandInput;
            constructor(input: ListContactsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListContactsCommandInput, ListContactsCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListDataflowEndpointGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ListDataflowEndpointGroupsRequest, ListDataflowEndpointGroupsResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ListDataflowEndpointGroupsCommandInput extends ListDataflowEndpointGroupsRequest {
    }
    export interface ListDataflowEndpointGroupsCommandOutput extends ListDataflowEndpointGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>DataflowEndpoint</code> groups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ListDataflowEndpointGroupsCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ListDataflowEndpointGroupsCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ListDataflowEndpointGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataflowEndpointGroupsCommandInput} for command's `input` shape.
        * @see {@link ListDataflowEndpointGroupsCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ListDataflowEndpointGroupsCommand extends $Command<ListDataflowEndpointGroupsCommandInput, ListDataflowEndpointGroupsCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ListDataflowEndpointGroupsCommandInput;
            constructor(input: ListDataflowEndpointGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataflowEndpointGroupsCommandInput, ListDataflowEndpointGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListGroundStationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ListGroundStationsRequest, ListGroundStationsResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ListGroundStationsCommandInput extends ListGroundStationsRequest {
    }
    export interface ListGroundStationsCommandOutput extends ListGroundStationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of ground stations. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ListGroundStationsCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ListGroundStationsCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ListGroundStationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroundStationsCommandInput} for command's `input` shape.
        * @see {@link ListGroundStationsCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ListGroundStationsCommand extends $Command<ListGroundStationsCommandInput, ListGroundStationsCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ListGroundStationsCommandInput;
            constructor(input: ListGroundStationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroundStationsCommandInput, ListGroundStationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListMissionProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ListMissionProfilesRequest, ListMissionProfilesResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ListMissionProfilesCommandInput extends ListMissionProfilesRequest {
    }
    export interface ListMissionProfilesCommandOutput extends ListMissionProfilesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of mission profiles.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ListMissionProfilesCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ListMissionProfilesCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ListMissionProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMissionProfilesCommandInput} for command's `input` shape.
        * @see {@link ListMissionProfilesCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ListMissionProfilesCommand extends $Command<ListMissionProfilesCommandInput, ListMissionProfilesCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ListMissionProfilesCommandInput;
            constructor(input: ListMissionProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMissionProfilesCommandInput, ListMissionProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListSatellitesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ListSatellitesRequest, ListSatellitesResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ListSatellitesCommandInput extends ListSatellitesRequest {
    }
    export interface ListSatellitesCommandOutput extends ListSatellitesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of satellites.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ListSatellitesCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ListSatellitesCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ListSatellitesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSatellitesCommandInput} for command's `input` shape.
        * @see {@link ListSatellitesCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ListSatellitesCommand extends $Command<ListSatellitesCommandInput, ListSatellitesCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ListSatellitesCommandInput;
            constructor(input: ListSatellitesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSatellitesCommandInput, ListSatellitesCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of tags for a specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ListTagsForResourceCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ListTagsForResourceCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ReserveContactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ContactIdResponse, ReserveContactRequest } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface ReserveContactCommandInput extends ReserveContactRequest {
    }
    export interface ReserveContactCommandOutput extends ContactIdResponse, __MetadataBearer {
    }
    /**
        * <p>Reserves a contact using specified parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, ReserveContactCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, ReserveContactCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new ReserveContactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ReserveContactCommandInput} for command's `input` shape.
        * @see {@link ReserveContactCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class ReserveContactCommand extends $Command<ReserveContactCommandInput, ReserveContactCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: ReserveContactCommandInput;
            constructor(input: ReserveContactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ReserveContactCommandInput, ReserveContactCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns a tag to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, TagResourceCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, TagResourceCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deassigns a resource tag.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, UntagResourceCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, UntagResourceCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UpdateConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { ConfigIdResponse, UpdateConfigRequest } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface UpdateConfigCommandInput extends UpdateConfigRequest {
    }
    export interface UpdateConfigCommandOutput extends ConfigIdResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the <code>Config</code> used when scheduling contacts.</p>
        *          <p>Updating a <code>Config</code> will not update the execution parameters
        *          for existing future contacts scheduled with this <code>Config</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, UpdateConfigCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, UpdateConfigCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new UpdateConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class UpdateConfigCommand extends $Command<UpdateConfigCommandInput, UpdateConfigCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: UpdateConfigCommandInput;
            constructor(input: UpdateConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigCommandInput, UpdateConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UpdateMissionProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroundStationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient";
    import { MissionProfileIdResponse, UpdateMissionProfileRequest } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0";
    export interface UpdateMissionProfileCommandInput extends UpdateMissionProfileRequest {
    }
    export interface UpdateMissionProfileCommandOutput extends MissionProfileIdResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a mission profile.</p>
        *          <p>Updating a mission profile will not update the execution parameters
        *          for existing future contacts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GroundStationClient, UpdateMissionProfileCommand } from "@aws-sdk/client-groundstation"; // ES Modules import
        * // const { GroundStationClient, UpdateMissionProfileCommand } = require("@aws-sdk/client-groundstation"); // CommonJS import
        * const client = new GroundStationClient(config);
        * const command = new UpdateMissionProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMissionProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateMissionProfileCommandOutput} for command's `response` shape.
        * @see {@link GroundStationClientResolvedConfig | config} for GroundStationClient's `config` shape.
        *
        */
    export class UpdateMissionProfileCommand extends $Command<UpdateMissionProfileCommandInput, UpdateMissionProfileCommandOutput, GroundStationClientResolvedConfig> {
            readonly input: UpdateMissionProfileCommandInput;
            constructor(input: UpdateMissionProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GroundStationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMissionProfileCommandInput, UpdateMissionProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/GroundStationClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CancelContactCommandInput, CancelContactCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CancelContactCommand";
    import { CreateConfigCommandInput, CreateConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateConfigCommand";
    import { CreateDataflowEndpointGroupCommandInput, CreateDataflowEndpointGroupCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateDataflowEndpointGroupCommand";
    import { CreateMissionProfileCommandInput, CreateMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/CreateMissionProfileCommand";
    import { DeleteConfigCommandInput, DeleteConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteConfigCommand";
    import { DeleteDataflowEndpointGroupCommandInput, DeleteDataflowEndpointGroupCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteDataflowEndpointGroupCommand";
    import { DeleteMissionProfileCommandInput, DeleteMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DeleteMissionProfileCommand";
    import { DescribeContactCommandInput, DescribeContactCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/DescribeContactCommand";
    import { GetConfigCommandInput, GetConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetConfigCommand";
    import { GetDataflowEndpointGroupCommandInput, GetDataflowEndpointGroupCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetDataflowEndpointGroupCommand";
    import { GetMinuteUsageCommandInput, GetMinuteUsageCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetMinuteUsageCommand";
    import { GetMissionProfileCommandInput, GetMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetMissionProfileCommand";
    import { GetSatelliteCommandInput, GetSatelliteCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/GetSatelliteCommand";
    import { ListConfigsCommandInput, ListConfigsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListConfigsCommand";
    import { ListContactsCommandInput, ListContactsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListContactsCommand";
    import { ListDataflowEndpointGroupsCommandInput, ListDataflowEndpointGroupsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListDataflowEndpointGroupsCommand";
    import { ListGroundStationsCommandInput, ListGroundStationsCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListGroundStationsCommand";
    import { ListMissionProfilesCommandInput, ListMissionProfilesCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListMissionProfilesCommand";
    import { ListSatellitesCommandInput, ListSatellitesCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListSatellitesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ListTagsForResourceCommand";
    import { ReserveContactCommandInput, ReserveContactCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/ReserveContactCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UntagResourceCommand";
    import { UpdateConfigCommandInput, UpdateConfigCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UpdateConfigCommand";
    import { UpdateMissionProfileCommandInput, UpdateMissionProfileCommandOutput } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/commands/UpdateMissionProfileCommand";
    export type ServiceInputTypes = CancelContactCommandInput | CreateConfigCommandInput | CreateDataflowEndpointGroupCommandInput | CreateMissionProfileCommandInput | DeleteConfigCommandInput | DeleteDataflowEndpointGroupCommandInput | DeleteMissionProfileCommandInput | DescribeContactCommandInput | GetConfigCommandInput | GetDataflowEndpointGroupCommandInput | GetMinuteUsageCommandInput | GetMissionProfileCommandInput | GetSatelliteCommandInput | ListConfigsCommandInput | ListContactsCommandInput | ListDataflowEndpointGroupsCommandInput | ListGroundStationsCommandInput | ListMissionProfilesCommandInput | ListSatellitesCommandInput | ListTagsForResourceCommandInput | ReserveContactCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateConfigCommandInput | UpdateMissionProfileCommandInput;
    export type ServiceOutputTypes = CancelContactCommandOutput | CreateConfigCommandOutput | CreateDataflowEndpointGroupCommandOutput | CreateMissionProfileCommandOutput | DeleteConfigCommandOutput | DeleteDataflowEndpointGroupCommandOutput | DeleteMissionProfileCommandOutput | DescribeContactCommandOutput | GetConfigCommandOutput | GetDataflowEndpointGroupCommandOutput | GetMinuteUsageCommandOutput | GetMissionProfileCommandOutput | GetSatelliteCommandOutput | ListConfigsCommandOutput | ListContactsCommandOutput | ListDataflowEndpointGroupsCommandOutput | ListGroundStationsCommandOutput | ListMissionProfilesCommandOutput | ListSatellitesCommandOutput | ListTagsForResourceCommandOutput | ReserveContactCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateConfigCommandOutput | UpdateMissionProfileCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type GroundStationClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of GroundStationClient class constructor that set the region, credentials and other options.
        */
    export interface GroundStationClientConfig extends GroundStationClientConfigType {
    }
    type GroundStationClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of GroundStationClient class. This is resolved and normalized from the {@link GroundStationClientConfig | constructor configuration interface}.
        */
    export interface GroundStationClientResolvedConfig extends GroundStationClientResolvedConfigType {
    }
    /**
        * <p>Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that
        *       enables you to control satellite communications, downlink and process satellite data, and
        *       scale your satellite operations efficiently and cost-effectively without having
        *       to build or manage your own ground station infrastructure.</p>
        */
    export class GroundStationClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, GroundStationClientResolvedConfig> {
            /**
                * The resolved configuration of GroundStationClient class. This is resolved and normalized from the {@link GroundStationClientConfig | constructor configuration interface}.
                */
            readonly config: GroundStationClientResolvedConfig;
            constructor(configuration: GroundStationClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { GroundStationServiceException as __BaseException } from "@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/GroundStationServiceException";
    export enum AngleUnits {
            DEGREE_ANGLE = "DEGREE_ANGLE",
            RADIAN = "RADIAN"
    }
    /**
        * <p>Details about an antenna demod decode <code>Config</code> used in a contact.</p>
        */
    export interface AntennaDemodDecodeDetails {
            /**
                * <p>Name of an antenna demod decode output node used in a contact.</p>
                */
            outputNode?: string;
    }
    export namespace AntennaDemodDecodeDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AntennaDemodDecodeDetails) => any;
    }
    export enum BandwidthUnits {
            GHZ = "GHz",
            KHZ = "kHz",
            MHZ = "MHz"
    }
    /**
        * <p>Object that describes the frequency bandwidth. </p>
        */
    export interface FrequencyBandwidth {
            /**
                * <p>Frequency bandwidth value. AWS Ground Station currently has the following bandwidth limitations:</p>
                *             <ul>
                *             <li>
                *                <p>For <code>AntennaDownlinkDemodDecodeconfig</code>, valid values are between 125 kHz to 650 MHz.</p>
                *             </li>
                *             <li>
                *                <p>For <code>AntennaDownlinkconfig</code>, valid values are between 10 kHz to 54 MHz.</p>
                *             </li>
                *             <li>
                *                <p>For <code>AntennaUplinkConfig</code>, valid values are between 10 kHz to 54 MHz.</p>
                *             </li>
                *          </ul>
                */
            value: number | undefined;
            /**
                * <p>Frequency bandwidth units.</p>
                */
            units: BandwidthUnits | string | undefined;
    }
    export namespace FrequencyBandwidth {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FrequencyBandwidth) => any;
    }
    export enum FrequencyUnits {
            GHZ = "GHz",
            KHZ = "kHz",
            MHZ = "MHz"
    }
    /**
        * <p>Object that describes the frequency.</p>
        */
    export interface Frequency {
            /**
                * <p>Frequency value. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.</p>
                */
            value: number | undefined;
            /**
                * <p>Frequency units.</p>
                */
            units: FrequencyUnits | string | undefined;
    }
    export namespace Frequency {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Frequency) => any;
    }
    export enum Polarization {
            LEFT_HAND = "LEFT_HAND",
            NONE = "NONE",
            RIGHT_HAND = "RIGHT_HAND"
    }
    /**
        * <p>Object that describes a spectral <code>Config</code>.</p>
        */
    export interface SpectrumConfig {
            /**
                * <p>Center frequency of a spectral <code>Config</code>. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.</p>
                */
            centerFrequency: Frequency | undefined;
            /**
                * <p>Bandwidth of a spectral <code>Config</code>. AWS Ground Station currently has the following bandwidth limitations:</p>
                *             <ul>
                *             <li>
                *                <p>For <code>AntennaDownlinkDemodDecodeconfig</code>, valid values are between 125 kHz to 650 MHz.</p>
                *             </li>
                *             <li>
                *                <p>For <code>AntennaDownlinkconfig</code> valid values are between 10 kHz to 54 MHz.</p>
                *             </li>
                *             <li>
                *                <p>For <code>AntennaUplinkConfig</code>, valid values are between 10 kHz to 54 MHz.</p>
                *             </li>
                *          </ul>
                */
            bandwidth: FrequencyBandwidth | undefined;
            /**
                * <p>Polarization of a spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.</p>
                */
            polarization?: Polarization | string;
    }
    export namespace SpectrumConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SpectrumConfig) => any;
    }
    /**
        * <p>Information about how AWS Ground Station should configure an
        *          antenna for downlink during a contact.</p>
        */
    export interface AntennaDownlinkConfig {
            /**
                * <p>Object that describes a spectral <code>Config</code>.</p>
                */
            spectrumConfig: SpectrumConfig | undefined;
    }
    export namespace AntennaDownlinkConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AntennaDownlinkConfig) => any;
    }
    /**
        * <p>Information about the decode <code>Config</code>.</p>
        */
    export interface DecodeConfig {
            /**
                * <p>Unvalidated JSON of a decode <code>Config</code>.</p>
                */
            unvalidatedJSON: string | undefined;
    }
    export namespace DecodeConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DecodeConfig) => any;
    }
    /**
        * <p>Information about the demodulation <code>Config</code>.</p>
        */
    export interface DemodulationConfig {
            /**
                * <p>Unvalidated JSON of a demodulation <code>Config</code>.</p>
                */
            unvalidatedJSON: string | undefined;
    }
    export namespace DemodulationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DemodulationConfig) => any;
    }
    /**
        * <p>Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.</p>
        */
    export interface AntennaDownlinkDemodDecodeConfig {
            /**
                * <p>Information about the spectral <code>Config</code>.</p>
                */
            spectrumConfig: SpectrumConfig | undefined;
            /**
                * <p>Information about the demodulation <code>Config</code>.</p>
                */
            demodulationConfig: DemodulationConfig | undefined;
            /**
                * <p>Information about the decode <code>Config</code>.</p>
                */
            decodeConfig: DecodeConfig | undefined;
    }
    export namespace AntennaDownlinkDemodDecodeConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AntennaDownlinkDemodDecodeConfig) => any;
    }
    /**
        * <p>Information about the uplink spectral <code>Config</code>.</p>
        */
    export interface UplinkSpectrumConfig {
            /**
                * <p>Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.</p>
                */
            centerFrequency: Frequency | undefined;
            /**
                * <p>Polarization of an uplink spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.</p>
                */
            polarization?: Polarization | string;
    }
    export namespace UplinkSpectrumConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UplinkSpectrumConfig) => any;
    }
    export enum EirpUnits {
            DBW = "dBW"
    }
    /**
        * <p>Object that represents EIRP.</p>
        */
    export interface Eirp {
            /**
                * <p>Value of an EIRP. Valid values are between 20.0 to 50.0 dBW.</p>
                */
            value: number | undefined;
            /**
                * <p>Units of an EIRP.</p>
                */
            units: EirpUnits | string | undefined;
    }
    export namespace Eirp {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Eirp) => any;
    }
    /**
        * <p>Information about the uplink <code>Config</code> of an antenna.</p>
        */
    export interface AntennaUplinkConfig {
            /**
                * <p>Whether or not uplink transmit is disabled.</p>
                */
            transmitDisabled?: boolean;
            /**
                * <p>Information about the uplink spectral <code>Config</code>.</p>
                */
            spectrumConfig: UplinkSpectrumConfig | undefined;
            /**
                * <p>EIRP of the target.</p>
                */
            targetEirp: Eirp | undefined;
    }
    export namespace AntennaUplinkConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AntennaUplinkConfig) => any;
    }
    /**
        * <p/>
        */
    export interface CancelContactRequest {
            /**
                * <p>UUID of a contact.</p>
                */
            contactId: string | undefined;
    }
    export namespace CancelContactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelContactRequest) => any;
    }
    /**
        * <p/>
        */
    export interface ContactIdResponse {
            /**
                * <p>UUID of a contact.</p>
                */
            contactId?: string;
    }
    export namespace ContactIdResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContactIdResponse) => any;
    }
    /**
        * <p>Dependency encountered an error.</p>
        */
    export class DependencyException extends __BaseException {
            readonly name: "DependencyException";
            readonly $fault: "server";
            /**
                * <p/>
                */
            parameterName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DependencyException, __BaseException>);
    }
    /**
        * <p>One or more parameters are not valid.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * <p/>
                */
            parameterName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>Resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum ConfigCapabilityType {
            ANTENNA_DOWNLINK = "antenna-downlink",
            ANTENNA_DOWNLINK_DEMOD_DECODE = "antenna-downlink-demod-decode",
            ANTENNA_UPLINK = "antenna-uplink",
            DATAFLOW_ENDPOINT = "dataflow-endpoint",
            S3_RECORDING = "s3-recording",
            TRACKING = "tracking",
            UPLINK_ECHO = "uplink-echo"
    }
    /**
        * <p/>
        */
    export interface ConfigIdResponse {
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId?: string;
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType?: ConfigCapabilityType | string;
            /**
                * <p>ARN of a <code>Config</code>.</p>
                */
            configArn?: string;
    }
    export namespace ConfigIdResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigIdResponse) => any;
    }
    /**
        * <p>Information about the dataflow endpoint <code>Config</code>.</p>
        */
    export interface DataflowEndpointConfig {
            /**
                * <p>Name of a dataflow endpoint.</p>
                */
            dataflowEndpointName: string | undefined;
            /**
                * <p>Region of a dataflow endpoint.</p>
                */
            dataflowEndpointRegion?: string;
    }
    export namespace DataflowEndpointConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataflowEndpointConfig) => any;
    }
    /**
        * <p>Information about an S3 recording <code>Config</code>.</p>
        */
    export interface S3RecordingConfig {
            /**
                * <p>ARN of the bucket to record to.</p>
                */
            bucketArn: string | undefined;
            /**
                * <p>ARN of the role Ground Station assumes to write data to the bucket.</p>
                */
            roleArn: string | undefined;
            /**
                * <p>S3 Key prefix to prefice data files.</p>
                */
            prefix?: string;
    }
    export namespace S3RecordingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3RecordingConfig) => any;
    }
    export enum Criticality {
            PREFERRED = "PREFERRED",
            REMOVED = "REMOVED",
            REQUIRED = "REQUIRED"
    }
    /**
        * <p>Object that determines whether tracking should be used during a contact
        *          executed with this <code>Config</code> in the mission profile.</p>
        */
    export interface TrackingConfig {
            /**
                * <p>Current setting for autotrack.</p>
                */
            autotrack: Criticality | string | undefined;
    }
    export namespace TrackingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrackingConfig) => any;
    }
    /**
        * <p>Information about an uplink echo <code>Config</code>.</p>
        *          <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the
        *          specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code>
        *          is used in a contact.</p>
        */
    export interface UplinkEchoConfig {
            /**
                * <p>Whether or not an uplink <code>Config</code> is enabled.</p>
                */
            enabled: boolean | undefined;
            /**
                * <p>ARN of an uplink <code>Config</code>.</p>
                */
            antennaUplinkConfigArn: string | undefined;
    }
    export namespace UplinkEchoConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UplinkEchoConfig) => any;
    }
    /**
        * <p>Object containing the parameters of a <code>Config</code>.</p>
        *          <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
        */
    export type ConfigTypeData = ConfigTypeData.AntennaDownlinkConfigMember | ConfigTypeData.AntennaDownlinkDemodDecodeConfigMember | ConfigTypeData.AntennaUplinkConfigMember | ConfigTypeData.DataflowEndpointConfigMember | ConfigTypeData.S3RecordingConfigMember | ConfigTypeData.TrackingConfigMember | ConfigTypeData.UplinkEchoConfigMember | ConfigTypeData.$UnknownMember;
    export namespace ConfigTypeData {
            /**
                * <p>Information about how AWS Ground Station should configure an antenna for downlink during a contact.</p>
                */
            interface AntennaDownlinkConfigMember {
                    antennaDownlinkConfig: AntennaDownlinkConfig;
                    trackingConfig?: never;
                    dataflowEndpointConfig?: never;
                    antennaDownlinkDemodDecodeConfig?: never;
                    antennaUplinkConfig?: never;
                    uplinkEchoConfig?: never;
                    s3RecordingConfig?: never;
                    $unknown?: never;
            }
            /**
                * <p>Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile. </p>
                */
            interface TrackingConfigMember {
                    antennaDownlinkConfig?: never;
                    trackingConfig: TrackingConfig;
                    dataflowEndpointConfig?: never;
                    antennaDownlinkDemodDecodeConfig?: never;
                    antennaUplinkConfig?: never;
                    uplinkEchoConfig?: never;
                    s3RecordingConfig?: never;
                    $unknown?: never;
            }
            /**
                * <p>Information about the dataflow endpoint <code>Config</code>.</p>
                */
            interface DataflowEndpointConfigMember {
                    antennaDownlinkConfig?: never;
                    trackingConfig?: never;
                    dataflowEndpointConfig: DataflowEndpointConfig;
                    antennaDownlinkDemodDecodeConfig?: never;
                    antennaUplinkConfig?: never;
                    uplinkEchoConfig?: never;
                    s3RecordingConfig?: never;
                    $unknown?: never;
            }
            /**
                * <p>Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.</p>
                */
            interface AntennaDownlinkDemodDecodeConfigMember {
                    antennaDownlinkConfig?: never;
                    trackingConfig?: never;
                    dataflowEndpointConfig?: never;
                    antennaDownlinkDemodDecodeConfig: AntennaDownlinkDemodDecodeConfig;
                    antennaUplinkConfig?: never;
                    uplinkEchoConfig?: never;
                    s3RecordingConfig?: never;
                    $unknown?: never;
            }
            /**
                * <p>Information about how AWS Ground Station should conﬁgure an antenna for uplink during a contact.</p>
                */
            interface AntennaUplinkConfigMember {
                    antennaDownlinkConfig?: never;
                    trackingConfig?: never;
                    dataflowEndpointConfig?: never;
                    antennaDownlinkDemodDecodeConfig?: never;
                    antennaUplinkConfig: AntennaUplinkConfig;
                    uplinkEchoConfig?: never;
                    s3RecordingConfig?: never;
                    $unknown?: never;
            }
            /**
                * <p>Information about an uplink echo <code>Config</code>.</p>
                *          <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>
                */
            interface UplinkEchoConfigMember {
                    antennaDownlinkConfig?: never;
                    trackingConfig?: never;
                    dataflowEndpointConfig?: never;
                    antennaDownlinkDemodDecodeConfig?: never;
                    antennaUplinkConfig?: never;
                    uplinkEchoConfig: UplinkEchoConfig;
                    s3RecordingConfig?: never;
                    $unknown?: never;
            }
            /**
                * <p>Information about an S3 recording <code>Config</code>.</p>
                */
            interface S3RecordingConfigMember {
                    antennaDownlinkConfig?: never;
                    trackingConfig?: never;
                    dataflowEndpointConfig?: never;
                    antennaDownlinkDemodDecodeConfig?: never;
                    antennaUplinkConfig?: never;
                    uplinkEchoConfig?: never;
                    s3RecordingConfig: S3RecordingConfig;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    antennaDownlinkConfig?: never;
                    trackingConfig?: never;
                    dataflowEndpointConfig?: never;
                    antennaDownlinkDemodDecodeConfig?: never;
                    antennaUplinkConfig?: never;
                    uplinkEchoConfig?: never;
                    s3RecordingConfig?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    antennaDownlinkConfig: (value: AntennaDownlinkConfig) => T;
                    trackingConfig: (value: TrackingConfig) => T;
                    dataflowEndpointConfig: (value: DataflowEndpointConfig) => T;
                    antennaDownlinkDemodDecodeConfig: (value: AntennaDownlinkDemodDecodeConfig) => T;
                    antennaUplinkConfig: (value: AntennaUplinkConfig) => T;
                    uplinkEchoConfig: (value: UplinkEchoConfig) => T;
                    s3RecordingConfig: (value: S3RecordingConfig) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: ConfigTypeData, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigTypeData) => any;
    }
    /**
        * <p/>
        */
    export interface CreateConfigRequest {
            /**
                * <p>Name of a <code>Config</code>.</p>
                */
            name: string | undefined;
            /**
                * <p>Parameters of a <code>Config</code>.</p>
                */
            configData: ConfigTypeData | undefined;
            /**
                * <p>Tags assigned to a <code>Config</code>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigRequest) => any;
    }
    /**
        * <p>Account limits for this resource have been exceeded.</p>
        */
    export class ResourceLimitExceededException extends __BaseException {
            readonly name: "ResourceLimitExceededException";
            readonly $fault: "client";
            /**
                * <p/>
                */
            parameterName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceLimitExceededException, __BaseException>);
    }
    /**
        * <p/>
        */
    export interface DeleteConfigRequest {
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId: string | undefined;
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType: ConfigCapabilityType | string | undefined;
    }
    export namespace DeleteConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetConfigRequest {
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId: string | undefined;
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType: ConfigCapabilityType | string | undefined;
    }
    export namespace GetConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetConfigResponse {
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId: string | undefined;
            /**
                * <p>ARN of a <code>Config</code>
                *          </p>
                */
            configArn: string | undefined;
            /**
                * <p>Name of a <code>Config</code>.</p>
                */
            name: string | undefined;
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType?: ConfigCapabilityType | string;
            /**
                * <p>Data elements in a <code>Config</code>.</p>
                */
            configData: ConfigTypeData | undefined;
            /**
                * <p>Tags assigned to a <code>Config</code>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigResponse) => any;
    }
    /**
        * <p/>
        */
    export interface ListConfigsRequest {
            /**
                * <p>Maximum number of <code>Configs</code> returned.</p>
                */
            maxResults?: number;
            /**
                * <p>Next token returned in the request of a previous <code>ListConfigs</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigsRequest) => any;
    }
    /**
        * <p>An item in a list of <code>Config</code> objects.</p>
        */
    export interface ConfigListItem {
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId?: string;
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType?: ConfigCapabilityType | string;
            /**
                * <p>ARN of a <code>Config</code>.</p>
                */
            configArn?: string;
            /**
                * <p>Name of a <code>Config</code>.</p>
                */
            name?: string;
    }
    export namespace ConfigListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigListItem) => any;
    }
    /**
        * <p/>
        */
    export interface ListConfigsResponse {
            /**
                * <p>Next token returned in the response of a previous <code>ListConfigs</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>List of <code>Config</code> items.</p>
                */
            configList?: ConfigListItem[];
    }
    export namespace ListConfigsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigsResponse) => any;
    }
    /**
        * <p/>
        */
    export interface UpdateConfigRequest {
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId: string | undefined;
            /**
                * <p>Name of a <code>Config</code>.</p>
                */
            name: string | undefined;
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType: ConfigCapabilityType | string | undefined;
            /**
                * <p>Parameters of a <code>Config</code>.</p>
                */
            configData: ConfigTypeData | undefined;
    }
    export namespace UpdateConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigRequest) => any;
    }
    /**
        * <p>Information about the socket address.</p>
        */
    export interface SocketAddress {
            /**
                * <p>Name of a socket address.</p>
                */
            name: string | undefined;
            /**
                * <p>Port of a socket address.</p>
                */
            port: number | undefined;
    }
    export namespace SocketAddress {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SocketAddress) => any;
    }
    export enum EndpointStatus {
            created = "created",
            creating = "creating",
            deleted = "deleted",
            deleting = "deleting",
            failed = "failed"
    }
    /**
        * <p>Information about a dataflow endpoint.</p>
        */
    export interface DataflowEndpoint {
            /**
                * <p>Name of a dataflow endpoint.</p>
                */
            name?: string;
            /**
                * <p>Socket address of a dataflow endpoint.</p>
                */
            address?: SocketAddress;
            /**
                * <p>Status of a dataflow endpoint.</p>
                */
            status?: EndpointStatus | string;
            /**
                * <p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>
                */
            mtu?: number;
    }
    export namespace DataflowEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataflowEndpoint) => any;
    }
    /**
        * <p>Information about endpoints.</p>
        */
    export interface SecurityDetails {
            /**
                * <p>A list of subnets where AWS Ground Station places elastic network interfaces to send streams to your instances.</p>
                */
            subnetIds: string[] | undefined;
            /**
                * <p>The security groups to attach to the elastic network interfaces.</p>
                */
            securityGroupIds: string[] | undefined;
            /**
                * <p>ARN to a role needed for connecting streams to your instances. </p>
                */
            roleArn: string | undefined;
    }
    export namespace SecurityDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecurityDetails) => any;
    }
    /**
        * <p>Information about the endpoint details.</p>
        */
    export interface EndpointDetails {
            /**
                * <p>Endpoint security details.</p>
                */
            securityDetails?: SecurityDetails;
            /**
                * <p>A dataflow endpoint.</p>
                */
            endpoint?: DataflowEndpoint;
    }
    export namespace EndpointDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointDetails) => any;
    }
    /**
        * <p>Details about an S3 recording <code>Config</code> used in a contact.</p>
        */
    export interface S3RecordingDetails {
            /**
                * <p>ARN of the bucket used.</p>
                */
            bucketArn?: string;
            /**
                * <p>Template of the S3 key used.</p>
                */
            keyTemplate?: string;
    }
    export namespace S3RecordingDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3RecordingDetails) => any;
    }
    /**
        * <p>Details for certain <code>Config</code> object types in a contact.</p>
        */
    export type ConfigDetails = ConfigDetails.AntennaDemodDecodeDetailsMember | ConfigDetails.EndpointDetailsMember | ConfigDetails.S3RecordingDetailsMember | ConfigDetails.$UnknownMember;
    export namespace ConfigDetails {
            /**
                * <p>Information about the endpoint details.</p>
                */
            interface EndpointDetailsMember {
                    endpointDetails: EndpointDetails;
                    antennaDemodDecodeDetails?: never;
                    s3RecordingDetails?: never;
                    $unknown?: never;
            }
            /**
                * <p>Details for antenna demod decode <code>Config</code> in a contact.</p>
                */
            interface AntennaDemodDecodeDetailsMember {
                    endpointDetails?: never;
                    antennaDemodDecodeDetails: AntennaDemodDecodeDetails;
                    s3RecordingDetails?: never;
                    $unknown?: never;
            }
            /**
                * <p>Details for an S3 recording <code>Config</code> in a contact.</p>
                */
            interface S3RecordingDetailsMember {
                    endpointDetails?: never;
                    antennaDemodDecodeDetails?: never;
                    s3RecordingDetails: S3RecordingDetails;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    endpointDetails?: never;
                    antennaDemodDecodeDetails?: never;
                    s3RecordingDetails?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    endpointDetails: (value: EndpointDetails) => T;
                    antennaDemodDecodeDetails: (value: AntennaDemodDecodeDetails) => T;
                    s3RecordingDetails: (value: S3RecordingDetails) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: ConfigDetails, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigDetails) => any;
    }
    /**
        * <p/>
        */
    export interface DescribeContactRequest {
            /**
                * <p>UUID of a contact.</p>
                */
            contactId: string | undefined;
    }
    export namespace DescribeContactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeContactRequest) => any;
    }
    export enum ContactStatus {
            AVAILABLE = "AVAILABLE",
            AWS_CANCELLED = "AWS_CANCELLED",
            AWS_FAILED = "AWS_FAILED",
            CANCELLED = "CANCELLED",
            CANCELLING = "CANCELLING",
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            FAILED_TO_SCHEDULE = "FAILED_TO_SCHEDULE",
            PASS = "PASS",
            POSTPASS = "POSTPASS",
            PREPASS = "PREPASS",
            SCHEDULED = "SCHEDULED",
            SCHEDULING = "SCHEDULING"
    }
    /**
        * <p>Dataflow details for the destination side.</p>
        */
    export interface Destination {
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType?: ConfigCapabilityType | string;
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId?: string;
            /**
                * <p>Additional details for a <code>Config</code>, if type is dataflow endpoint or antenna demod decode.</p>
                */
            configDetails?: ConfigDetails;
            /**
                * <p>Region of a dataflow destination.</p>
                */
            dataflowDestinationRegion?: string;
    }
    export namespace Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Destination) => any;
    }
    /**
        * <p>Dataflow details for the source side.</p>
        */
    export interface Source {
            /**
                * <p>Type of a <code>Config</code>.</p>
                */
            configType?: ConfigCapabilityType | string;
            /**
                * <p>UUID of a <code>Config</code>.</p>
                */
            configId?: string;
            /**
                * <p>Additional details for a <code>Config</code>, if type is dataflow endpoint or antenna demod decode.</p>
                */
            configDetails?: ConfigDetails;
            /**
                * <p>Region of a dataflow source.</p>
                */
            dataflowSourceRegion?: string;
    }
    export namespace Source {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Source) => any;
    }
    /**
        * <p>Information about a dataflow edge used in a contact.</p>
        */
    export interface DataflowDetail {
            /**
                * <p>Dataflow details for the source side.</p>
                */
            source?: Source;
            /**
                * <p>Dataflow details for the destination side.</p>
                */
            destination?: Destination;
            /**
                * <p>Error message for a dataflow.</p>
                */
            errorMessage?: string;
    }
    export namespace DataflowDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataflowDetail) => any;
    }
    /**
        * <p>Elevation angle of the satellite in the sky during a contact.</p>
        */
    export interface Elevation {
            /**
                * <p>Elevation angle value.</p>
                */
            value: number | undefined;
            /**
                * <p>Elevation angle units.</p>
                */
            unit: AngleUnits | string | undefined;
    }
    export namespace Elevation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Elevation) => any;
    }
    /**
        * <p/>
        */
    export interface DescribeContactResponse {
            /**
                * <p>UUID of a contact.</p>
                */
            contactId?: string;
            /**
                * <p>ARN of a mission profile.</p>
                */
            missionProfileArn?: string;
            /**
                * <p>ARN of a satellite.</p>
                */
            satelliteArn?: string;
            /**
                * <p>Start time of a contact.</p>
                */
            startTime?: Date;
            /**
                * <p>End time of a contact.</p>
                */
            endTime?: Date;
            /**
                * <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
                */
            prePassStartTime?: Date;
            /**
                * <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
                */
            postPassEndTime?: Date;
            /**
                * <p>Ground station for a contact.</p>
                */
            groundStation?: string;
            /**
                * <p>Status of a contact.</p>
                */
            contactStatus?: ContactStatus | string;
            /**
                * <p>Error message for a contact.</p>
                */
            errorMessage?: string;
            /**
                * <p>Maximum elevation angle of a contact.</p>
                */
            maximumElevation?: Elevation;
            /**
                * <p>Tags assigned to a contact.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Region of a contact.</p>
                */
            region?: string;
            /**
                * <p>List describing source and destination details for each dataflow edge.</p>
                */
            dataflowList?: DataflowDetail[];
    }
    export namespace DescribeContactResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeContactResponse) => any;
    }
    /**
        * <p/>
        */
    export interface ListContactsRequest {
            /**
                * <p>Maximum number of contacts returned.</p>
                */
            maxResults?: number;
            /**
                * <p>Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>Status of a contact reservation.</p>
                */
            statusList: (ContactStatus | string)[] | undefined;
            /**
                * <p>Start time of a contact.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>End time of a contact.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>Name of a ground station.</p>
                */
            groundStation?: string;
            /**
                * <p>ARN of a satellite.</p>
                */
            satelliteArn?: string;
            /**
                * <p>ARN of a mission profile.</p>
                */
            missionProfileArn?: string;
    }
    export namespace ListContactsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContactsRequest) => any;
    }
    /**
        * <p>Data describing a contact.</p>
        */
    export interface ContactData {
            /**
                * <p>UUID of a contact.</p>
                */
            contactId?: string;
            /**
                * <p>ARN of a mission profile.</p>
                */
            missionProfileArn?: string;
            /**
                * <p>ARN of a satellite.</p>
                */
            satelliteArn?: string;
            /**
                * <p>Start time of a contact.</p>
                */
            startTime?: Date;
            /**
                * <p>End time of a contact.</p>
                */
            endTime?: Date;
            /**
                * <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
                */
            prePassStartTime?: Date;
            /**
                * <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
                */
            postPassEndTime?: Date;
            /**
                * <p>Name of a ground station.</p>
                */
            groundStation?: string;
            /**
                * <p>Status of a contact.</p>
                */
            contactStatus?: ContactStatus | string;
            /**
                * <p>Error message of a contact.</p>
                */
            errorMessage?: string;
            /**
                * <p>Maximum elevation angle of a contact.</p>
                */
            maximumElevation?: Elevation;
            /**
                * <p>Region of a contact.</p>
                */
            region?: string;
            /**
                * <p>Tags assigned to a contact.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ContactData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContactData) => any;
    }
    /**
        * <p/>
        */
    export interface ListContactsResponse {
            /**
                * <p>Next token returned in the response of a previous <code>ListContacts</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>List of contacts.</p>
                */
            contactList?: ContactData[];
    }
    export namespace ListContactsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContactsResponse) => any;
    }
    /**
        * <p/>
        */
    export interface ReserveContactRequest {
            /**
                * <p>ARN of a mission profile.</p>
                */
            missionProfileArn: string | undefined;
            /**
                * <p>ARN of a satellite</p>
                */
            satelliteArn: string | undefined;
            /**
                * <p>Start time of a contact.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>End time of a contact.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>Name of a ground station.</p>
                */
            groundStation: string | undefined;
            /**
                * <p>Tags assigned to a contact.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ReserveContactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReserveContactRequest) => any;
    }
    /**
        * <p/>
        */
    export interface CreateDataflowEndpointGroupRequest {
            /**
                * <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
                */
            endpointDetails: EndpointDetails[] | undefined;
            /**
                * <p>Tags of a dataflow endpoint group.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateDataflowEndpointGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataflowEndpointGroupRequest) => any;
    }
    /**
        * <p/>
        */
    export interface DataflowEndpointGroupIdResponse {
            /**
                * <p>UUID of a dataflow endpoint group.</p>
                */
            dataflowEndpointGroupId?: string;
    }
    export namespace DataflowEndpointGroupIdResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataflowEndpointGroupIdResponse) => any;
    }
    /**
        * <p/>
        */
    export interface CreateMissionProfileRequest {
            /**
                * <p>Name of a mission profile.</p>
                */
            name: string | undefined;
            /**
                * <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
                */
            contactPrePassDurationSeconds?: number;
            /**
                * <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
                */
            contactPostPassDurationSeconds?: number;
            /**
                * <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
                */
            minimumViableContactDurationSeconds: number | undefined;
            /**
                * <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i>
                *             <code>Config</code> and a <i>to</i>
                *             <code>Config</code>.</p>
                */
            dataflowEdges: string[][] | undefined;
            /**
                * <p>ARN of a tracking <code>Config</code>.</p>
                */
            trackingConfigArn: string | undefined;
            /**
                * <p>Tags assigned to a mission profile.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateMissionProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMissionProfileRequest) => any;
    }
    /**
        * <p/>
        */
    export interface MissionProfileIdResponse {
            /**
                * <p>UUID of a mission profile.</p>
                */
            missionProfileId?: string;
    }
    export namespace MissionProfileIdResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MissionProfileIdResponse) => any;
    }
    /**
        * <p/>
        */
    export interface DeleteDataflowEndpointGroupRequest {
            /**
                * <p>UUID of a dataflow endpoint group.</p>
                */
            dataflowEndpointGroupId: string | undefined;
    }
    export namespace DeleteDataflowEndpointGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataflowEndpointGroupRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetDataflowEndpointGroupRequest {
            /**
                * <p>UUID of a dataflow endpoint group.</p>
                */
            dataflowEndpointGroupId: string | undefined;
    }
    export namespace GetDataflowEndpointGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataflowEndpointGroupRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetDataflowEndpointGroupResponse {
            /**
                * <p>UUID of a dataflow endpoint group.</p>
                */
            dataflowEndpointGroupId?: string;
            /**
                * <p>ARN of a dataflow endpoint group.</p>
                */
            dataflowEndpointGroupArn?: string;
            /**
                * <p>Details of a dataflow endpoint.</p>
                */
            endpointsDetails?: EndpointDetails[];
            /**
                * <p>Tags assigned to a dataflow endpoint group.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetDataflowEndpointGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataflowEndpointGroupResponse) => any;
    }
    /**
        * <p/>
        */
    export interface ListDataflowEndpointGroupsRequest {
            /**
                * <p>Maximum number of dataflow endpoint groups returned.</p>
                */
            maxResults?: number;
            /**
                * <p>Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListDataflowEndpointGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataflowEndpointGroupsRequest) => any;
    }
    /**
        * <p>Item in a list of <code>DataflowEndpoint</code> groups.</p>
        */
    export interface DataflowEndpointListItem {
            /**
                * <p>UUID of a dataflow endpoint group.</p>
                */
            dataflowEndpointGroupId?: string;
            /**
                * <p>ARN of a dataflow endpoint group.</p>
                */
            dataflowEndpointGroupArn?: string;
    }
    export namespace DataflowEndpointListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataflowEndpointListItem) => any;
    }
    /**
        * <p/>
        */
    export interface ListDataflowEndpointGroupsResponse {
            /**
                * <p>Next token returned in the response of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>A list of dataflow endpoint groups.</p>
                */
            dataflowEndpointGroupList?: DataflowEndpointListItem[];
    }
    export namespace ListDataflowEndpointGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataflowEndpointGroupsResponse) => any;
    }
    /**
        * <p/>
        */
    export interface DeleteMissionProfileRequest {
            /**
                * <p>UUID of a mission profile.</p>
                */
            missionProfileId: string | undefined;
    }
    export namespace DeleteMissionProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMissionProfileRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetMinuteUsageRequest {
            /**
                * <p>The month being requested, with a value of 1-12.</p>
                */
            month: number | undefined;
            /**
                * <p>The year being requested, in the format of YYYY.</p>
                */
            year: number | undefined;
    }
    export namespace GetMinuteUsageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMinuteUsageRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetMinuteUsageResponse {
            /**
                * <p>Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.</p>
                */
            isReservedMinutesCustomer?: boolean;
            /**
                * <p>Total number of reserved minutes allocated, specific to the month being requested.</p>
                */
            totalReservedMinuteAllocation?: number;
            /**
                * <p>Upcoming minutes scheduled for an account, specific to the month being requested.</p>
                */
            upcomingMinutesScheduled?: number;
            /**
                * <p>Total scheduled minutes for an account, specific to the month being requested.</p>
                */
            totalScheduledMinutes?: number;
            /**
                * <p>Estimated number of minutes remaining for an account, specific to the month being requested.</p>
                */
            estimatedMinutesRemaining?: number;
    }
    export namespace GetMinuteUsageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMinuteUsageResponse) => any;
    }
    /**
        * <p/>
        */
    export interface GetMissionProfileRequest {
            /**
                * <p>UUID of a mission profile.</p>
                */
            missionProfileId: string | undefined;
    }
    export namespace GetMissionProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMissionProfileRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetMissionProfileResponse {
            /**
                * <p>UUID of a mission profile.</p>
                */
            missionProfileId?: string;
            /**
                * <p>ARN of a mission profile.</p>
                */
            missionProfileArn?: string;
            /**
                * <p>Name of a mission profile.</p>
                */
            name?: string;
            /**
                * <p>Region of a mission profile.</p>
                */
            region?: string;
            /**
                * <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
                */
            contactPrePassDurationSeconds?: number;
            /**
                * <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
                */
            contactPostPassDurationSeconds?: number;
            /**
                * <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
                */
            minimumViableContactDurationSeconds?: number;
            /**
                * <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i>
                *             <code>Config</code> and a <i>to</i>
                *             <code>Config</code>.</p>
                */
            dataflowEdges?: string[][];
            /**
                * <p>ARN of a tracking <code>Config</code>.</p>
                */
            trackingConfigArn?: string;
            /**
                * <p>Tags assigned to a mission profile.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetMissionProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMissionProfileResponse) => any;
    }
    /**
        * <p/>
        */
    export interface GetSatelliteRequest {
            /**
                * <p>UUID of a satellite.</p>
                */
            satelliteId: string | undefined;
    }
    export namespace GetSatelliteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSatelliteRequest) => any;
    }
    /**
        * <p/>
        */
    export interface GetSatelliteResponse {
            /**
                * <p>UUID of a satellite.</p>
                */
            satelliteId?: string;
            /**
                * <p>ARN of a satellite.</p>
                */
            satelliteArn?: string;
            /**
                * <p>NORAD satellite ID number.</p>
                */
            noradSatelliteID?: number;
            /**
                * <p>A list of ground stations to which the satellite is on-boarded.</p>
                */
            groundStations?: string[];
    }
    export namespace GetSatelliteResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSatelliteResponse) => any;
    }
    /**
        * <p/>
        */
    export interface ListGroundStationsRequest {
            /**
                * <p>Satellite ID to retrieve on-boarded ground stations.</p>
                */
            satelliteId?: string;
            /**
                * <p>Maximum number of ground stations returned.</p>
                */
            maxResults?: number;
            /**
                * <p>Next token that can be supplied in the next call to get the next page of ground stations.</p>
                */
            nextToken?: string;
    }
    export namespace ListGroundStationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroundStationsRequest) => any;
    }
    /**
        * <p>Information about the ground station data.</p>
        */
    export interface GroundStationData {
            /**
                * <p>UUID of a ground station.</p>
                */
            groundStationId?: string;
            /**
                * <p>Name of a ground station.</p>
                */
            groundStationName?: string;
            /**
                * <p>Ground station Region.</p>
                */
            region?: string;
    }
    export namespace GroundStationData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroundStationData) => any;
    }
    /**
        * <p/>
        */
    export interface ListGroundStationsResponse {
            /**
                * <p>Next token that can be supplied in the next call to get the next page of ground stations.</p>
                */
            nextToken?: string;
            /**
                * <p>List of ground stations.</p>
                */
            groundStationList?: GroundStationData[];
    }
    export namespace ListGroundStationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroundStationsResponse) => any;
    }
    /**
        * <p/>
        */
    export interface ListTagsForResourceRequest {
            /**
                * <p>ARN of a resource.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    /**
        * <p/>
        */
    export interface ListTagsForResourceResponse {
            /**
                * <p>Tags assigned to a resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p/>
        */
    export interface ListMissionProfilesRequest {
            /**
                * <p>Maximum number of mission profiles returned.</p>
                */
            maxResults?: number;
            /**
                * <p>Next token returned in the request of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListMissionProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMissionProfilesRequest) => any;
    }
    /**
        * <p>Item in a list of mission profiles.</p>
        */
    export interface MissionProfileListItem {
            /**
                * <p>UUID of a mission profile.</p>
                */
            missionProfileId?: string;
            /**
                * <p>ARN of a mission profile.</p>
                */
            missionProfileArn?: string;
            /**
                * <p>Region of a mission profile.</p>
                */
            region?: string;
            /**
                * <p>Name of a mission profile.</p>
                */
            name?: string;
    }
    export namespace MissionProfileListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MissionProfileListItem) => any;
    }
    /**
        * <p/>
        */
    export interface ListMissionProfilesResponse {
            /**
                * <p>Next token returned in the response of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>List of mission profiles.</p>
                */
            missionProfileList?: MissionProfileListItem[];
    }
    export namespace ListMissionProfilesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMissionProfilesResponse) => any;
    }
    /**
        * <p/>
        */
    export interface UpdateMissionProfileRequest {
            /**
                * <p>UUID of a mission profile.</p>
                */
            missionProfileId: string | undefined;
            /**
                * <p>Name of a mission profile.</p>
                */
            name?: string;
            /**
                * <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
                */
            contactPrePassDurationSeconds?: number;
            /**
                * <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
                */
            contactPostPassDurationSeconds?: number;
            /**
                * <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
                */
            minimumViableContactDurationSeconds?: number;
            /**
                * <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i>
                *             <code>Config</code> and a <i>to</i>
                *             <code>Config</code>.</p>
                */
            dataflowEdges?: string[][];
            /**
                * <p>ARN of a tracking <code>Config</code>.</p>
                */
            trackingConfigArn?: string;
    }
    export namespace UpdateMissionProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMissionProfileRequest) => any;
    }
    /**
        * <p/>
        */
    export interface ListSatellitesRequest {
            /**
                * <p>Maximum number of satellites returned.</p>
                */
            maxResults?: number;
            /**
                * <p>Next token that can be supplied in the next call to get the next page of satellites.</p>
                */
            nextToken?: string;
    }
    export namespace ListSatellitesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSatellitesRequest) => any;
    }
    /**
        * <p>Item in a list of satellites.</p>
        */
    export interface SatelliteListItem {
            /**
                * <p>UUID of a satellite.</p>
                */
            satelliteId?: string;
            /**
                * <p>ARN of a satellite.</p>
                */
            satelliteArn?: string;
            /**
                * <p>NORAD satellite ID number.</p>
                */
            noradSatelliteID?: number;
            /**
                * <p>A list of ground stations to which the satellite is on-boarded.</p>
                */
            groundStations?: string[];
    }
    export namespace SatelliteListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SatelliteListItem) => any;
    }
    /**
        * <p/>
        */
    export interface ListSatellitesResponse {
            /**
                * <p>Next token that can be supplied in the next call to get the next page of satellites.</p>
                */
            nextToken?: string;
            /**
                * <p>List of satellites.</p>
                */
            satellites?: SatelliteListItem[];
    }
    export namespace ListSatellitesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSatellitesResponse) => any;
    }
    /**
        * <p/>
        */
    export interface TagResourceRequest {
            /**
                * <p>ARN of a resource tag.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>Tags assigned to a resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    /**
        * <p/>
        */
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    /**
        * <p/>
        */
    export interface UntagResourceRequest {
            /**
                * <p>ARN of a resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>Keys of a resource tag.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    /**
        * <p/>
        */
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-groundstation/node_modules/@aws-sdk/client-groundstation/dist-types/models/GroundStationServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from GroundStation service.
        */
    export class GroundStationServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

