// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-codecommit' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CodeCommitClient } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { AssociateApprovalRuleTemplateWithRepositoryCommandInput, AssociateApprovalRuleTemplateWithRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/AssociateApprovalRuleTemplateWithRepositoryCommand";
    import { BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput, BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchAssociateApprovalRuleTemplateWithRepositoriesCommand";
    import { BatchDescribeMergeConflictsCommandInput, BatchDescribeMergeConflictsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchDescribeMergeConflictsCommand";
    import { BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput, BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand";
    import { BatchGetCommitsCommandInput, BatchGetCommitsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchGetCommitsCommand";
    import { BatchGetRepositoriesCommandInput, BatchGetRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchGetRepositoriesCommand";
    import { CreateApprovalRuleTemplateCommandInput, CreateApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateApprovalRuleTemplateCommand";
    import { CreateBranchCommandInput, CreateBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateBranchCommand";
    import { CreateCommitCommandInput, CreateCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateCommitCommand";
    import { CreatePullRequestApprovalRuleCommandInput, CreatePullRequestApprovalRuleCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreatePullRequestApprovalRuleCommand";
    import { CreatePullRequestCommandInput, CreatePullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreatePullRequestCommand";
    import { CreateRepositoryCommandInput, CreateRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateRepositoryCommand";
    import { CreateUnreferencedMergeCommitCommandInput, CreateUnreferencedMergeCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateUnreferencedMergeCommitCommand";
    import { DeleteApprovalRuleTemplateCommandInput, DeleteApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteApprovalRuleTemplateCommand";
    import { DeleteBranchCommandInput, DeleteBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteBranchCommand";
    import { DeleteCommentContentCommandInput, DeleteCommentContentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteCommentContentCommand";
    import { DeleteFileCommandInput, DeleteFileCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteFileCommand";
    import { DeletePullRequestApprovalRuleCommandInput, DeletePullRequestApprovalRuleCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeletePullRequestApprovalRuleCommand";
    import { DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteRepositoryCommand";
    import { DescribeMergeConflictsCommandInput, DescribeMergeConflictsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DescribeMergeConflictsCommand";
    import { DescribePullRequestEventsCommandInput, DescribePullRequestEventsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DescribePullRequestEventsCommand";
    import { DisassociateApprovalRuleTemplateFromRepositoryCommandInput, DisassociateApprovalRuleTemplateFromRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DisassociateApprovalRuleTemplateFromRepositoryCommand";
    import { EvaluatePullRequestApprovalRulesCommandInput, EvaluatePullRequestApprovalRulesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/EvaluatePullRequestApprovalRulesCommand";
    import { GetApprovalRuleTemplateCommandInput, GetApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetApprovalRuleTemplateCommand";
    import { GetBlobCommandInput, GetBlobCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetBlobCommand";
    import { GetBranchCommandInput, GetBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetBranchCommand";
    import { GetCommentCommandInput, GetCommentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentCommand";
    import { GetCommentReactionsCommandInput, GetCommentReactionsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentReactionsCommand";
    import { GetCommentsForComparedCommitCommandInput, GetCommentsForComparedCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentsForComparedCommitCommand";
    import { GetCommentsForPullRequestCommandInput, GetCommentsForPullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentsForPullRequestCommand";
    import { GetCommitCommandInput, GetCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommitCommand";
    import { GetDifferencesCommandInput, GetDifferencesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetDifferencesCommand";
    import { GetFileCommandInput, GetFileCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetFileCommand";
    import { GetFolderCommandInput, GetFolderCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetFolderCommand";
    import { GetMergeCommitCommandInput, GetMergeCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeCommitCommand";
    import { GetMergeConflictsCommandInput, GetMergeConflictsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeConflictsCommand";
    import { GetMergeOptionsCommandInput, GetMergeOptionsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeOptionsCommand";
    import { GetPullRequestApprovalStatesCommandInput, GetPullRequestApprovalStatesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestApprovalStatesCommand";
    import { GetPullRequestCommandInput, GetPullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestCommand";
    import { GetPullRequestOverrideStateCommandInput, GetPullRequestOverrideStateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestOverrideStateCommand";
    import { GetRepositoryCommandInput, GetRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetRepositoryCommand";
    import { GetRepositoryTriggersCommandInput, GetRepositoryTriggersCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetRepositoryTriggersCommand";
    import { ListApprovalRuleTemplatesCommandInput, ListApprovalRuleTemplatesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListApprovalRuleTemplatesCommand";
    import { ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput, ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListAssociatedApprovalRuleTemplatesForRepositoryCommand";
    import { ListBranchesCommandInput, ListBranchesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListBranchesCommand";
    import { ListPullRequestsCommandInput, ListPullRequestsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListPullRequestsCommand";
    import { ListRepositoriesCommandInput, ListRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListRepositoriesCommand";
    import { ListRepositoriesForApprovalRuleTemplateCommandInput, ListRepositoriesForApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListRepositoriesForApprovalRuleTemplateCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListTagsForResourceCommand";
    import { MergeBranchesByFastForwardCommandInput, MergeBranchesByFastForwardCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesByFastForwardCommand";
    import { MergeBranchesBySquashCommandInput, MergeBranchesBySquashCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesBySquashCommand";
    import { MergeBranchesByThreeWayCommandInput, MergeBranchesByThreeWayCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesByThreeWayCommand";
    import { MergePullRequestByFastForwardCommandInput, MergePullRequestByFastForwardCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestByFastForwardCommand";
    import { MergePullRequestBySquashCommandInput, MergePullRequestBySquashCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestBySquashCommand";
    import { MergePullRequestByThreeWayCommandInput, MergePullRequestByThreeWayCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestByThreeWayCommand";
    import { OverridePullRequestApprovalRulesCommandInput, OverridePullRequestApprovalRulesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/OverridePullRequestApprovalRulesCommand";
    import { PostCommentForComparedCommitCommandInput, PostCommentForComparedCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentForComparedCommitCommand";
    import { PostCommentForPullRequestCommandInput, PostCommentForPullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentForPullRequestCommand";
    import { PostCommentReplyCommandInput, PostCommentReplyCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentReplyCommand";
    import { PutCommentReactionCommandInput, PutCommentReactionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutCommentReactionCommand";
    import { PutFileCommandInput, PutFileCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutFileCommand";
    import { PutRepositoryTriggersCommandInput, PutRepositoryTriggersCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutRepositoryTriggersCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/TagResourceCommand";
    import { TestRepositoryTriggersCommandInput, TestRepositoryTriggersCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/TestRepositoryTriggersCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UntagResourceCommand";
    import { UpdateApprovalRuleTemplateContentCommandInput, UpdateApprovalRuleTemplateContentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateContentCommand";
    import { UpdateApprovalRuleTemplateDescriptionCommandInput, UpdateApprovalRuleTemplateDescriptionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateDescriptionCommand";
    import { UpdateApprovalRuleTemplateNameCommandInput, UpdateApprovalRuleTemplateNameCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateNameCommand";
    import { UpdateCommentCommandInput, UpdateCommentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateCommentCommand";
    import { UpdateDefaultBranchCommandInput, UpdateDefaultBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateDefaultBranchCommand";
    import { UpdatePullRequestApprovalRuleContentCommandInput, UpdatePullRequestApprovalRuleContentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestApprovalRuleContentCommand";
    import { UpdatePullRequestApprovalStateCommandInput, UpdatePullRequestApprovalStateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestApprovalStateCommand";
    import { UpdatePullRequestDescriptionCommandInput, UpdatePullRequestDescriptionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestDescriptionCommand";
    import { UpdatePullRequestStatusCommandInput, UpdatePullRequestStatusCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestStatusCommand";
    import { UpdatePullRequestTitleCommandInput, UpdatePullRequestTitleCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestTitleCommand";
    import { UpdateRepositoryDescriptionCommandInput, UpdateRepositoryDescriptionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateRepositoryDescriptionCommand";
    import { UpdateRepositoryNameCommandInput, UpdateRepositoryNameCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateRepositoryNameCommand";
    /**
        * <fullname>AWS CodeCommit</fullname>
        *         <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for
        *             AWS CodeCommit API along with usage examples.</p>
        *         <p>You can use the AWS CodeCommit API to work with the following objects:</p>
        *
        *             <p>Repositories, by calling the following:</p>
        *           <ul>
        *             <li>
        *                   <p>
        *                   <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>GetRepository</a>, which returns information about a specified repository.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p>
        *               </li>
        *             <li>
        *                   <p>
        *                   <a>UpdateRepositoryName</a>, which changes the name of the
        *                     repository. If you change the name of a repository, no other users of that
        *                     repository can access it until you send them the new HTTPS or SSH URL to
        *                     use.</p>
        *             </li>
        *          </ul>
        *
        *             <p>Branches, by calling the following:</p>
        *             <ul>
        *             <li>
        *                     <p>
        *                   <a>CreateBranch</a>, which creates a branch in a specified
        *                     repository.</p>
        *             </li>
        *             <li>
        *                     <p>
        *                   <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p>
        *                 </li>
        *             <li>
        *                     <p>
        *                   <a>GetBranch</a>, which returns information about a specified branch.</p>
        *             </li>
        *             <li>
        *                     <p>
        *                   <a>ListBranches</a>, which lists all branches for a specified repository.</p>
        *             </li>
        *             <li>
        *                     <p>
        *                   <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Files, by calling the following:</p>
        *         <ul>
        *             <li>
        *                <p>
        *                   <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetBlob</a>, which returns the base-64 encoded content of an
        *                     individual Git blob object in a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p>
        *             </li>
        *          </ul>
        *
        *
        *             <p>Commits, by calling the following:</p>
        *               <ul>
        *             <li>
        *                       <p>
        *                   <a>BatchGetCommits</a>, which returns information about one or more commits in a repository.</p>
        *                   </li>
        *             <li>
        *                <p>
        *                   <a>CreateCommit</a>, which creates a commit for changes to a repository.</p>
        *             </li>
        *             <li>
        *                       <p>
        *                   <a>GetCommit</a>, which returns information about  a commit, including commit
        *                           messages and author and committer information.</p>
        *                   </li>
        *             <li>
        *                       <p>
        *                   <a>GetDifferences</a>, which returns information about the
        *                     differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID,
        *                     or other fully qualified reference).</p>
        *                   </li>
        *          </ul>
        *
        *
        *         <p>Merges, by calling the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the
        *                     purpose of comparing them and identifying any potential conflicts.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions
        *                     of a file in a potential merge.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p>
        *
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetMergeConflicts</a>, which returns information about merge conflicts
        *                     between the source and destination branch in a pull request.</p>
        *             </li>
        *             <li>
        *
        *                 <p>
        *                   <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p>
        *             </li>
        *          </ul>
        *
        *
        *         <p>Pull requests, by calling the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>CreatePullRequestApprovalRule</a>, which creates an approval rule for a specified pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a specified pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p>
        *             </li>
        *             <li>
        *
        *                 <p>
        *                   <a>GetPullRequest</a>, which returns information about a specified pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetPullRequestApprovalStates</a>, which returns information about the approval states for a specified pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetPullRequestOverrideState</a>, which returns information about whether approval rules have been set aside (overriden) for a
        *             pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>ListPullRequests</a>, which lists all pull requests for a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination
        *                     branch for that pull request using the fast-forward merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination
        *                 branch for that pull request using the squash merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination
        *                 branch for that pull request using the three-way merge option.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>OverridePullRequestApprovalRules</a>, which sets aside all approval rule requirements for a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure of an approval rule for a pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdatePullRequestApprovalState</a>, which updates the state of an approval on a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Approval rule templates, by calling the following:</p>
        *         <ul>
        *             <li>
        *                <p>
        *                   <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a template
        *                     with a specified repository. After the template is associated with a repository,
        *                     AWS CodeCommit creates approval rules that match the template conditions on
        *                     every pull request created in the specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which associates a
        *                     template with one or more specified repositories. After the template is
        *                     associated with a repository, AWS CodeCommit creates approval rules that match
        *                     the template conditions on every pull request created in the specified
        *                     repositories.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which removes the
        *                     association between a template and specified repositories so that approval rules
        *                     based on the template are not automatically created when pull requests are
        *                     created in those repositories.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>CreateApprovalRuleTemplate</a>, which creates a template for approval rules that can then be associated with one or more repositories
        *              in your AWS account.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template. It does not remove approval rules on pull requests already created with the template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the
        *                     association between a template and a repository so that approval rules based on
        *                     the template are not automatically created when pull requests are created in the
        *                     specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetApprovalRuleTemplate</a>, which returns information about an approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in the AWS Region in your AWS account.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListAssociatedApprovalRuleTemplatesForRepository</a>, which lists all approval rule templates that are associated with a specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all repositories associated with the specified approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateApprovalRuleTemplateDescription</a>, which updates the description of an
        *                     approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an approval rule template.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Comments in a repository, by calling the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetComment</a>, which returns information about a comment on a commit.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetCommentReactions</a>, which returns information about emoji reactions to comments.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers
        *                     in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>PostCommentReply</a>, which creates a reply to a comment.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>PutCommentReaction</a>, which creates or updates an emoji reaction to a comment.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p>
        *         <ul>
        *             <li>
        *                <p>
        *                   <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p>
        *             </li>
        *          </ul>
        *
        *             <p>Triggers, by calling the following:</p>
        *                 <ul>
        *             <li>
        *                         <p>
        *                   <a>GetRepositoryTriggers</a>, which returns information about triggers configured
        *                             for a repository.</p>
        *             </li>
        *             <li>
        *                         <p>
        *                   <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can
        *                             be used to create or delete triggers.</p>
        *             </li>
        *             <li>
        *                         <p>
        *                   <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger
        *                             by sending data to the trigger target.</p>
        *             </li>
        *          </ul>
        *
        *
        *
        *
        *         <p>For information about how to use AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit User Guide</a>.</p>
        */
    export class CodeCommit extends CodeCommitClient {
            /**
                * <p>Creates an association between an approval rule template and a specified repository.
                *             Then, the next time a pull request is created in the repository where the destination
                *             reference (if specified) matches the destination reference (branch) for the pull
                *             request, an approval rule that matches the template conditions is automatically created
                *             for that pull request. If no destination references are specified in the template, an
                *             approval rule that matches the template contents is created for all pull requests in
                *             that repository.</p>
                */
            associateApprovalRuleTemplateWithRepository(args: AssociateApprovalRuleTemplateWithRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<AssociateApprovalRuleTemplateWithRepositoryCommandOutput>;
            associateApprovalRuleTemplateWithRepository(args: AssociateApprovalRuleTemplateWithRepositoryCommandInput, cb: (err: any, data?: AssociateApprovalRuleTemplateWithRepositoryCommandOutput) => void): void;
            associateApprovalRuleTemplateWithRepository(args: AssociateApprovalRuleTemplateWithRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateApprovalRuleTemplateWithRepositoryCommandOutput) => void): void;
            /**
                * <p>Creates an association between an approval rule template and one or more specified repositories. </p>
                */
            batchAssociateApprovalRuleTemplateWithRepositories(args: BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput, options?: __HttpHandlerOptions): Promise<BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput>;
            batchAssociateApprovalRuleTemplateWithRepositories(args: BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput, cb: (err: any, data?: BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput) => void): void;
            batchAssociateApprovalRuleTemplateWithRepositories(args: BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.</p>
                */
            batchDescribeMergeConflicts(args: BatchDescribeMergeConflictsCommandInput, options?: __HttpHandlerOptions): Promise<BatchDescribeMergeConflictsCommandOutput>;
            batchDescribeMergeConflicts(args: BatchDescribeMergeConflictsCommandInput, cb: (err: any, data?: BatchDescribeMergeConflictsCommandOutput) => void): void;
            batchDescribeMergeConflicts(args: BatchDescribeMergeConflictsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDescribeMergeConflictsCommandOutput) => void): void;
            /**
                * <p>Removes the association between an approval rule template and one or more specified repositories. </p>
                */
            batchDisassociateApprovalRuleTemplateFromRepositories(args: BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput, options?: __HttpHandlerOptions): Promise<BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput>;
            batchDisassociateApprovalRuleTemplateFromRepositories(args: BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput, cb: (err: any, data?: BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput) => void): void;
            batchDisassociateApprovalRuleTemplateFromRepositories(args: BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput) => void): void;
            /**
                * <p>Returns information about the contents of one or more commits in a repository.</p>
                */
            batchGetCommits(args: BatchGetCommitsCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetCommitsCommandOutput>;
            batchGetCommits(args: BatchGetCommitsCommandInput, cb: (err: any, data?: BatchGetCommitsCommandOutput) => void): void;
            batchGetCommits(args: BatchGetCommitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetCommitsCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more repositories.</p>
                *         <note>
                *             <p>The description field for a repository accepts all HTML characters and all valid
                *                 Unicode characters. Applications that do not HTML-encode the description and display
                *                 it in a webpage can expose users to potentially malicious code. Make sure that you
                *                 HTML-encode the description field in any application that uses this API to display
                *                 the repository description on a webpage.</p>
                *          </note>
                */
            batchGetRepositories(args: BatchGetRepositoriesCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetRepositoriesCommandOutput>;
            batchGetRepositories(args: BatchGetRepositoriesCommandInput, cb: (err: any, data?: BatchGetRepositoriesCommandOutput) => void): void;
            batchGetRepositories(args: BatchGetRepositoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetRepositoriesCommandOutput) => void): void;
            /**
                * <p>Creates a template for approval rules that can then be associated with one or more
                *             repositories in your AWS account. When you associate a template with a repository, AWS
                *             CodeCommit creates an approval rule that matches the conditions of the template for all
                *             pull requests that meet the conditions of the template. For more information, see
                *             <a>AssociateApprovalRuleTemplateWithRepository</a>.</p>
                */
            createApprovalRuleTemplate(args: CreateApprovalRuleTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateApprovalRuleTemplateCommandOutput>;
            createApprovalRuleTemplate(args: CreateApprovalRuleTemplateCommandInput, cb: (err: any, data?: CreateApprovalRuleTemplateCommandOutput) => void): void;
            createApprovalRuleTemplate(args: CreateApprovalRuleTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApprovalRuleTemplateCommandOutput) => void): void;
            /**
                * <p>Creates a branch in a repository and points the branch to a commit.</p>
                *         <note>
                *             <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p>
                *          </note>
                */
            createBranch(args: CreateBranchCommandInput, options?: __HttpHandlerOptions): Promise<CreateBranchCommandOutput>;
            createBranch(args: CreateBranchCommandInput, cb: (err: any, data?: CreateBranchCommandOutput) => void): void;
            createBranch(args: CreateBranchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBranchCommandOutput) => void): void;
            /**
                * <p>Creates a commit for a repository on the tip of a specified branch.</p>
                */
            createCommit(args: CreateCommitCommandInput, options?: __HttpHandlerOptions): Promise<CreateCommitCommandOutput>;
            createCommit(args: CreateCommitCommandInput, cb: (err: any, data?: CreateCommitCommandOutput) => void): void;
            createCommit(args: CreateCommitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCommitCommandOutput) => void): void;
            /**
                * <p>Creates a pull request in the specified repository.</p>
                */
            createPullRequest(args: CreatePullRequestCommandInput, options?: __HttpHandlerOptions): Promise<CreatePullRequestCommandOutput>;
            createPullRequest(args: CreatePullRequestCommandInput, cb: (err: any, data?: CreatePullRequestCommandOutput) => void): void;
            createPullRequest(args: CreatePullRequestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePullRequestCommandOutput) => void): void;
            /**
                * <p>Creates an approval rule for a pull request.</p>
                */
            createPullRequestApprovalRule(args: CreatePullRequestApprovalRuleCommandInput, options?: __HttpHandlerOptions): Promise<CreatePullRequestApprovalRuleCommandOutput>;
            createPullRequestApprovalRule(args: CreatePullRequestApprovalRuleCommandInput, cb: (err: any, data?: CreatePullRequestApprovalRuleCommandOutput) => void): void;
            createPullRequestApprovalRule(args: CreatePullRequestApprovalRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePullRequestApprovalRuleCommandOutput) => void): void;
            /**
                * <p>Creates a new, empty repository.</p>
                */
            createRepository(args: CreateRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<CreateRepositoryCommandOutput>;
            createRepository(args: CreateRepositoryCommandInput, cb: (err: any, data?: CreateRepositoryCommandOutput) => void): void;
            createRepository(args: CreateRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRepositoryCommandOutput) => void): void;
            /**
                * <p>Creates an unreferenced commit that represents the result of merging two branches
                *             using a specified merge strategy. This can help you determine the outcome of a potential
                *             merge. This API cannot be used with the fast-forward merge strategy because that
                *             strategy does not create a merge commit.</p>
                *         <note>
                *             <p>This unreferenced merge commit
                *         can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p>
                *          </note>
                */
            createUnreferencedMergeCommit(args: CreateUnreferencedMergeCommitCommandInput, options?: __HttpHandlerOptions): Promise<CreateUnreferencedMergeCommitCommandOutput>;
            createUnreferencedMergeCommit(args: CreateUnreferencedMergeCommitCommandInput, cb: (err: any, data?: CreateUnreferencedMergeCommitCommandOutput) => void): void;
            createUnreferencedMergeCommit(args: CreateUnreferencedMergeCommitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUnreferencedMergeCommitCommandOutput) => void): void;
            /**
                * <p>Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.</p>
                */
            deleteApprovalRuleTemplate(args: DeleteApprovalRuleTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApprovalRuleTemplateCommandOutput>;
            deleteApprovalRuleTemplate(args: DeleteApprovalRuleTemplateCommandInput, cb: (err: any, data?: DeleteApprovalRuleTemplateCommandOutput) => void): void;
            deleteApprovalRuleTemplate(args: DeleteApprovalRuleTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApprovalRuleTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes a branch from a repository, unless that branch is the default branch for the repository. </p>
                */
            deleteBranch(args: DeleteBranchCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBranchCommandOutput>;
            deleteBranch(args: DeleteBranchCommandInput, cb: (err: any, data?: DeleteBranchCommandOutput) => void): void;
            deleteBranch(args: DeleteBranchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBranchCommandOutput) => void): void;
            /**
                * <p>Deletes the content of a comment made on a change, file, or commit in a repository.</p>
                */
            deleteCommentContent(args: DeleteCommentContentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCommentContentCommandOutput>;
            deleteCommentContent(args: DeleteCommentContentCommandInput, cb: (err: any, data?: DeleteCommentContentCommandOutput) => void): void;
            deleteCommentContent(args: DeleteCommentContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCommentContentCommandOutput) => void): void;
            /**
                * <p>Deletes a specified file from a specified branch. A commit is created on the branch
                *             that contains the revision. The file still exists in the commits earlier to the commit
                *             that contains the deletion.</p>
                */
            deleteFile(args: DeleteFileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFileCommandOutput>;
            deleteFile(args: DeleteFileCommandInput, cb: (err: any, data?: DeleteFileCommandOutput) => void): void;
            deleteFile(args: DeleteFileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFileCommandOutput) => void): void;
            /**
                * <p>Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the
                *             approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the
                *             pull request was created. You cannot delete an approval rule from a merged or closed pull request.</p>
                */
            deletePullRequestApprovalRule(args: DeletePullRequestApprovalRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeletePullRequestApprovalRuleCommandOutput>;
            deletePullRequestApprovalRule(args: DeletePullRequestApprovalRuleCommandInput, cb: (err: any, data?: DeletePullRequestApprovalRuleCommandOutput) => void): void;
            deletePullRequestApprovalRule(args: DeletePullRequestApprovalRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePullRequestApprovalRuleCommandOutput) => void): void;
            /**
                * <p>Deletes a repository. If a specified repository was already deleted, a null repository
                *             ID is returned.</p>
                *         <important>
                *             <p>Deleting a repository also deletes all associated objects and metadata. After a repository is
                *                 deleted, all future push calls to the deleted repository fail.</p>
                *          </important>
                */
            deleteRepository(args: DeleteRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRepositoryCommandOutput>;
            deleteRepository(args: DeleteRepositoryCommandInput, cb: (err: any, data?: DeleteRepositoryCommandOutput) => void): void;
            deleteRepository(args: DeleteRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRepositoryCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more merge conflicts in the attempted merge of two
                *             commit specifiers using the squash or three-way merge strategy. If the merge option for
                *             the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.</p>
                */
            describeMergeConflicts(args: DescribeMergeConflictsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMergeConflictsCommandOutput>;
            describeMergeConflicts(args: DescribeMergeConflictsCommandInput, cb: (err: any, data?: DescribeMergeConflictsCommandOutput) => void): void;
            describeMergeConflicts(args: DescribeMergeConflictsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMergeConflictsCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more pull request events.</p>
                */
            describePullRequestEvents(args: DescribePullRequestEventsCommandInput, options?: __HttpHandlerOptions): Promise<DescribePullRequestEventsCommandOutput>;
            describePullRequestEvents(args: DescribePullRequestEventsCommandInput, cb: (err: any, data?: DescribePullRequestEventsCommandOutput) => void): void;
            describePullRequestEvents(args: DescribePullRequestEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePullRequestEventsCommandOutput) => void): void;
            /**
                * <p>Removes the association between a template and a repository so that approval rules
                *             based on the template are not automatically created when pull requests are created in
                *             the specified repository. This does not delete any approval rules previously created for
                *             pull requests through the template association.</p>
                */
            disassociateApprovalRuleTemplateFromRepository(args: DisassociateApprovalRuleTemplateFromRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateApprovalRuleTemplateFromRepositoryCommandOutput>;
            disassociateApprovalRuleTemplateFromRepository(args: DisassociateApprovalRuleTemplateFromRepositoryCommandInput, cb: (err: any, data?: DisassociateApprovalRuleTemplateFromRepositoryCommandOutput) => void): void;
            disassociateApprovalRuleTemplateFromRepository(args: DisassociateApprovalRuleTemplateFromRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateApprovalRuleTemplateFromRepositoryCommandOutput) => void): void;
            /**
                * <p>Evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p>
                */
            evaluatePullRequestApprovalRules(args: EvaluatePullRequestApprovalRulesCommandInput, options?: __HttpHandlerOptions): Promise<EvaluatePullRequestApprovalRulesCommandOutput>;
            evaluatePullRequestApprovalRules(args: EvaluatePullRequestApprovalRulesCommandInput, cb: (err: any, data?: EvaluatePullRequestApprovalRulesCommandOutput) => void): void;
            evaluatePullRequestApprovalRules(args: EvaluatePullRequestApprovalRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EvaluatePullRequestApprovalRulesCommandOutput) => void): void;
            /**
                * <p>Returns information about a specified approval rule template.</p>
                */
            getApprovalRuleTemplate(args: GetApprovalRuleTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetApprovalRuleTemplateCommandOutput>;
            getApprovalRuleTemplate(args: GetApprovalRuleTemplateCommandInput, cb: (err: any, data?: GetApprovalRuleTemplateCommandOutput) => void): void;
            getApprovalRuleTemplate(args: GetApprovalRuleTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApprovalRuleTemplateCommandOutput) => void): void;
            /**
                * <p>Returns the base-64 encoded content of an individual blob in a repository.</p>
                */
            getBlob(args: GetBlobCommandInput, options?: __HttpHandlerOptions): Promise<GetBlobCommandOutput>;
            getBlob(args: GetBlobCommandInput, cb: (err: any, data?: GetBlobCommandOutput) => void): void;
            getBlob(args: GetBlobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlobCommandOutput) => void): void;
            /**
                * <p>Returns information about a repository branch, including its name and the last commit ID.</p>
                */
            getBranch(args: GetBranchCommandInput, options?: __HttpHandlerOptions): Promise<GetBranchCommandOutput>;
            getBranch(args: GetBranchCommandInput, cb: (err: any, data?: GetBranchCommandOutput) => void): void;
            getBranch(args: GetBranchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBranchCommandOutput) => void): void;
            /**
                * <p>Returns the content of a comment made on a change, file, or commit in a repository. </p>
                *             <note>
                *             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
                *         reactions from active identities, use GetCommentReactions.</p>
                *          </note>
                */
            getComment(args: GetCommentCommandInput, options?: __HttpHandlerOptions): Promise<GetCommentCommandOutput>;
            getComment(args: GetCommentCommandInput, cb: (err: any, data?: GetCommentCommandOutput) => void): void;
            getComment(args: GetCommentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCommentCommandOutput) => void): void;
            /**
                * <p>Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.</p>
                */
            getCommentReactions(args: GetCommentReactionsCommandInput, options?: __HttpHandlerOptions): Promise<GetCommentReactionsCommandOutput>;
            getCommentReactions(args: GetCommentReactionsCommandInput, cb: (err: any, data?: GetCommentReactionsCommandOutput) => void): void;
            getCommentReactions(args: GetCommentReactionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCommentReactionsCommandOutput) => void): void;
            /**
                * <p>Returns information about comments made on the comparison between two commits.</p>
                *         <note>
                *             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
                *             reactions from active identities, use GetCommentReactions.</p>
                *          </note>
                */
            getCommentsForComparedCommit(args: GetCommentsForComparedCommitCommandInput, options?: __HttpHandlerOptions): Promise<GetCommentsForComparedCommitCommandOutput>;
            getCommentsForComparedCommit(args: GetCommentsForComparedCommitCommandInput, cb: (err: any, data?: GetCommentsForComparedCommitCommandOutput) => void): void;
            getCommentsForComparedCommit(args: GetCommentsForComparedCommitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCommentsForComparedCommitCommandOutput) => void): void;
            /**
                * <p>Returns comments made on a pull request.</p>
                *         <note>
                *             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
                *             reactions from active identities, use GetCommentReactions.</p>
                *          </note>
                */
            getCommentsForPullRequest(args: GetCommentsForPullRequestCommandInput, options?: __HttpHandlerOptions): Promise<GetCommentsForPullRequestCommandOutput>;
            getCommentsForPullRequest(args: GetCommentsForPullRequestCommandInput, cb: (err: any, data?: GetCommentsForPullRequestCommandOutput) => void): void;
            getCommentsForPullRequest(args: GetCommentsForPullRequestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCommentsForPullRequestCommandOutput) => void): void;
            /**
                * <p>Returns information about a commit, including commit message and committer information.</p>
                */
            getCommit(args: GetCommitCommandInput, options?: __HttpHandlerOptions): Promise<GetCommitCommandOutput>;
            getCommit(args: GetCommitCommandInput, cb: (err: any, data?: GetCommitCommandOutput) => void): void;
            getCommit(args: GetCommitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCommitCommandOutput) => void): void;
            /**
                * <p>Returns information about the differences in a valid commit specifier (such as a
                *             branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be
                *             limited to a specified path.</p>
                */
            getDifferences(args: GetDifferencesCommandInput, options?: __HttpHandlerOptions): Promise<GetDifferencesCommandOutput>;
            getDifferences(args: GetDifferencesCommandInput, cb: (err: any, data?: GetDifferencesCommandOutput) => void): void;
            getDifferences(args: GetDifferencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDifferencesCommandOutput) => void): void;
            /**
                * <p>Returns the base-64 encoded contents of a specified file and its metadata.</p>
                */
            getFile(args: GetFileCommandInput, options?: __HttpHandlerOptions): Promise<GetFileCommandOutput>;
            getFile(args: GetFileCommandInput, cb: (err: any, data?: GetFileCommandOutput) => void): void;
            getFile(args: GetFileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFileCommandOutput) => void): void;
            /**
                * <p>Returns the contents of a specified folder in a repository.</p>
                */
            getFolder(args: GetFolderCommandInput, options?: __HttpHandlerOptions): Promise<GetFolderCommandOutput>;
            getFolder(args: GetFolderCommandInput, cb: (err: any, data?: GetFolderCommandOutput) => void): void;
            getFolder(args: GetFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFolderCommandOutput) => void): void;
            /**
                * <p>Returns information about a specified merge commit.</p>
                */
            getMergeCommit(args: GetMergeCommitCommandInput, options?: __HttpHandlerOptions): Promise<GetMergeCommitCommandOutput>;
            getMergeCommit(args: GetMergeCommitCommandInput, cb: (err: any, data?: GetMergeCommitCommandOutput) => void): void;
            getMergeCommit(args: GetMergeCommitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMergeCommitCommandOutput) => void): void;
            /**
                * <p>Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.</p>
                */
            getMergeConflicts(args: GetMergeConflictsCommandInput, options?: __HttpHandlerOptions): Promise<GetMergeConflictsCommandOutput>;
            getMergeConflicts(args: GetMergeConflictsCommandInput, cb: (err: any, data?: GetMergeConflictsCommandOutput) => void): void;
            getMergeConflicts(args: GetMergeConflictsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMergeConflictsCommandOutput) => void): void;
            /**
                * <p>Returns information about the merge options available for merging two specified
                *             branches. For details about why a merge option is not available, use GetMergeConflicts
                *             or DescribeMergeConflicts.</p>
                */
            getMergeOptions(args: GetMergeOptionsCommandInput, options?: __HttpHandlerOptions): Promise<GetMergeOptionsCommandOutput>;
            getMergeOptions(args: GetMergeOptionsCommandInput, cb: (err: any, data?: GetMergeOptionsCommandOutput) => void): void;
            getMergeOptions(args: GetMergeOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMergeOptionsCommandOutput) => void): void;
            /**
                * <p>Gets information about a pull request in a specified repository.</p>
                */
            getPullRequest(args: GetPullRequestCommandInput, options?: __HttpHandlerOptions): Promise<GetPullRequestCommandOutput>;
            getPullRequest(args: GetPullRequestCommandInput, cb: (err: any, data?: GetPullRequestCommandOutput) => void): void;
            getPullRequest(args: GetPullRequestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPullRequestCommandOutput) => void): void;
            /**
                * <p>Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more
                *         approval rules applied to them.</p>
                */
            getPullRequestApprovalStates(args: GetPullRequestApprovalStatesCommandInput, options?: __HttpHandlerOptions): Promise<GetPullRequestApprovalStatesCommandOutput>;
            getPullRequestApprovalStates(args: GetPullRequestApprovalStatesCommandInput, cb: (err: any, data?: GetPullRequestApprovalStatesCommandOutput) => void): void;
            getPullRequestApprovalStates(args: GetPullRequestApprovalStatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPullRequestApprovalStatesCommandOutput) => void): void;
            /**
                * <p>Returns information about whether approval rules have been set aside (overridden) for a
                *             pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
                */
            getPullRequestOverrideState(args: GetPullRequestOverrideStateCommandInput, options?: __HttpHandlerOptions): Promise<GetPullRequestOverrideStateCommandOutput>;
            getPullRequestOverrideState(args: GetPullRequestOverrideStateCommandInput, cb: (err: any, data?: GetPullRequestOverrideStateCommandOutput) => void): void;
            getPullRequestOverrideState(args: GetPullRequestOverrideStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPullRequestOverrideStateCommandOutput) => void): void;
            /**
                * <p>Returns information about a repository.</p>
                *
                *         <note>
                *             <p>The description field for a repository accepts all HTML characters and all valid
                *                 Unicode characters. Applications that do not HTML-encode the description and display
                *                 it in a webpage can expose users to potentially malicious code. Make sure that you
                *                 HTML-encode the description field in any application that uses this API to display
                *                 the repository description on a webpage.</p>
                *          </note>
                */
            getRepository(args: GetRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<GetRepositoryCommandOutput>;
            getRepository(args: GetRepositoryCommandInput, cb: (err: any, data?: GetRepositoryCommandOutput) => void): void;
            getRepository(args: GetRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRepositoryCommandOutput) => void): void;
            /**
                * <p>Gets information about triggers configured for a repository.</p>
                */
            getRepositoryTriggers(args: GetRepositoryTriggersCommandInput, options?: __HttpHandlerOptions): Promise<GetRepositoryTriggersCommandOutput>;
            getRepositoryTriggers(args: GetRepositoryTriggersCommandInput, cb: (err: any, data?: GetRepositoryTriggersCommandOutput) => void): void;
            getRepositoryTriggers(args: GetRepositoryTriggersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRepositoryTriggersCommandOutput) => void): void;
            /**
                * <p>Lists all approval rule templates in the specified AWS Region in your AWS account. If
                *             an AWS Region is not specified, the AWS Region where you are signed in is used.</p>
                */
            listApprovalRuleTemplates(args: ListApprovalRuleTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListApprovalRuleTemplatesCommandOutput>;
            listApprovalRuleTemplates(args: ListApprovalRuleTemplatesCommandInput, cb: (err: any, data?: ListApprovalRuleTemplatesCommandOutput) => void): void;
            listApprovalRuleTemplates(args: ListApprovalRuleTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApprovalRuleTemplatesCommandOutput) => void): void;
            /**
                * <p>Lists all approval rule templates that are associated with a specified repository.</p>
                */
            listAssociatedApprovalRuleTemplatesForRepository(args: ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput, options?: __HttpHandlerOptions): Promise<ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput>;
            listAssociatedApprovalRuleTemplatesForRepository(args: ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput, cb: (err: any, data?: ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput) => void): void;
            listAssociatedApprovalRuleTemplatesForRepository(args: ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more branches in a repository.</p>
                */
            listBranches(args: ListBranchesCommandInput, options?: __HttpHandlerOptions): Promise<ListBranchesCommandOutput>;
            listBranches(args: ListBranchesCommandInput, cb: (err: any, data?: ListBranchesCommandOutput) => void): void;
            listBranches(args: ListBranchesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListBranchesCommandOutput) => void): void;
            /**
                * <p>Returns a list of pull requests for a specified repository. The return list can be refined by pull request
                *         status or pull request author ARN.</p>
                */
            listPullRequests(args: ListPullRequestsCommandInput, options?: __HttpHandlerOptions): Promise<ListPullRequestsCommandOutput>;
            listPullRequests(args: ListPullRequestsCommandInput, cb: (err: any, data?: ListPullRequestsCommandOutput) => void): void;
            listPullRequests(args: ListPullRequestsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPullRequestsCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more repositories.</p>
                */
            listRepositories(args: ListRepositoriesCommandInput, options?: __HttpHandlerOptions): Promise<ListRepositoriesCommandOutput>;
            listRepositories(args: ListRepositoriesCommandInput, cb: (err: any, data?: ListRepositoriesCommandOutput) => void): void;
            listRepositories(args: ListRepositoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRepositoriesCommandOutput) => void): void;
            /**
                * <p>Lists all repositories associated with the specified approval rule template.</p>
                */
            listRepositoriesForApprovalRuleTemplate(args: ListRepositoriesForApprovalRuleTemplateCommandInput, options?: __HttpHandlerOptions): Promise<ListRepositoriesForApprovalRuleTemplateCommandOutput>;
            listRepositoriesForApprovalRuleTemplate(args: ListRepositoriesForApprovalRuleTemplateCommandInput, cb: (err: any, data?: ListRepositoriesForApprovalRuleTemplateCommandOutput) => void): void;
            listRepositoriesForApprovalRuleTemplate(args: ListRepositoriesForApprovalRuleTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRepositoriesForApprovalRuleTemplateCommandOutput) => void): void;
            /**
                * <p>Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS
                *             CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User
                *                 Guide</i>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Merges two branches using the fast-forward merge strategy.</p>
                */
            mergeBranchesByFastForward(args: MergeBranchesByFastForwardCommandInput, options?: __HttpHandlerOptions): Promise<MergeBranchesByFastForwardCommandOutput>;
            mergeBranchesByFastForward(args: MergeBranchesByFastForwardCommandInput, cb: (err: any, data?: MergeBranchesByFastForwardCommandOutput) => void): void;
            mergeBranchesByFastForward(args: MergeBranchesByFastForwardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MergeBranchesByFastForwardCommandOutput) => void): void;
            /**
                * <p>Merges two branches using the squash merge strategy.</p>
                */
            mergeBranchesBySquash(args: MergeBranchesBySquashCommandInput, options?: __HttpHandlerOptions): Promise<MergeBranchesBySquashCommandOutput>;
            mergeBranchesBySquash(args: MergeBranchesBySquashCommandInput, cb: (err: any, data?: MergeBranchesBySquashCommandOutput) => void): void;
            mergeBranchesBySquash(args: MergeBranchesBySquashCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MergeBranchesBySquashCommandOutput) => void): void;
            /**
                * <p>Merges two specified branches using the three-way merge strategy.</p>
                */
            mergeBranchesByThreeWay(args: MergeBranchesByThreeWayCommandInput, options?: __HttpHandlerOptions): Promise<MergeBranchesByThreeWayCommandOutput>;
            mergeBranchesByThreeWay(args: MergeBranchesByThreeWayCommandInput, cb: (err: any, data?: MergeBranchesByThreeWayCommandOutput) => void): void;
            mergeBranchesByThreeWay(args: MergeBranchesByThreeWayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MergeBranchesByThreeWayCommandOutput) => void): void;
            /**
                * <p>Attempts to merge the source commit of a pull request into the specified destination
                *             branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.</p>
                */
            mergePullRequestByFastForward(args: MergePullRequestByFastForwardCommandInput, options?: __HttpHandlerOptions): Promise<MergePullRequestByFastForwardCommandOutput>;
            mergePullRequestByFastForward(args: MergePullRequestByFastForwardCommandInput, cb: (err: any, data?: MergePullRequestByFastForwardCommandOutput) => void): void;
            mergePullRequestByFastForward(args: MergePullRequestByFastForwardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MergePullRequestByFastForwardCommandOutput) => void): void;
            /**
                * <p>Attempts to merge the source commit of a pull request into the specified destination
                *             branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.</p>
                */
            mergePullRequestBySquash(args: MergePullRequestBySquashCommandInput, options?: __HttpHandlerOptions): Promise<MergePullRequestBySquashCommandOutput>;
            mergePullRequestBySquash(args: MergePullRequestBySquashCommandInput, cb: (err: any, data?: MergePullRequestBySquashCommandOutput) => void): void;
            mergePullRequestBySquash(args: MergePullRequestBySquashCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MergePullRequestBySquashCommandOutput) => void): void;
            /**
                * <p>Attempts to merge the source commit of a pull request into the specified destination
                *             branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.</p>
                */
            mergePullRequestByThreeWay(args: MergePullRequestByThreeWayCommandInput, options?: __HttpHandlerOptions): Promise<MergePullRequestByThreeWayCommandOutput>;
            mergePullRequestByThreeWay(args: MergePullRequestByThreeWayCommandInput, cb: (err: any, data?: MergePullRequestByThreeWayCommandOutput) => void): void;
            mergePullRequestByThreeWay(args: MergePullRequestByThreeWayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MergePullRequestByThreeWayCommandOutput) => void): void;
            /**
                * <p>Sets aside (overrides) all approval rule requirements for a specified pull request.</p>
                */
            overridePullRequestApprovalRules(args: OverridePullRequestApprovalRulesCommandInput, options?: __HttpHandlerOptions): Promise<OverridePullRequestApprovalRulesCommandOutput>;
            overridePullRequestApprovalRules(args: OverridePullRequestApprovalRulesCommandInput, cb: (err: any, data?: OverridePullRequestApprovalRulesCommandOutput) => void): void;
            overridePullRequestApprovalRules(args: OverridePullRequestApprovalRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: OverridePullRequestApprovalRulesCommandOutput) => void): void;
            /**
                * <p>Posts a comment on the comparison between two commits.</p>
                */
            postCommentForComparedCommit(args: PostCommentForComparedCommitCommandInput, options?: __HttpHandlerOptions): Promise<PostCommentForComparedCommitCommandOutput>;
            postCommentForComparedCommit(args: PostCommentForComparedCommitCommandInput, cb: (err: any, data?: PostCommentForComparedCommitCommandOutput) => void): void;
            postCommentForComparedCommit(args: PostCommentForComparedCommitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PostCommentForComparedCommitCommandOutput) => void): void;
            /**
                * <p>Posts a comment on a pull request.</p>
                */
            postCommentForPullRequest(args: PostCommentForPullRequestCommandInput, options?: __HttpHandlerOptions): Promise<PostCommentForPullRequestCommandOutput>;
            postCommentForPullRequest(args: PostCommentForPullRequestCommandInput, cb: (err: any, data?: PostCommentForPullRequestCommandOutput) => void): void;
            postCommentForPullRequest(args: PostCommentForPullRequestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PostCommentForPullRequestCommandOutput) => void): void;
            /**
                * <p>Posts a comment in reply to an existing comment on a comparison between commits or a pull request.</p>
                */
            postCommentReply(args: PostCommentReplyCommandInput, options?: __HttpHandlerOptions): Promise<PostCommentReplyCommandOutput>;
            postCommentReply(args: PostCommentReplyCommandInput, cb: (err: any, data?: PostCommentReplyCommandOutput) => void): void;
            postCommentReply(args: PostCommentReplyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PostCommentReplyCommandOutput) => void): void;
            /**
                * <p>Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or
                *         update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.</p>
                */
            putCommentReaction(args: PutCommentReactionCommandInput, options?: __HttpHandlerOptions): Promise<PutCommentReactionCommandOutput>;
            putCommentReaction(args: PutCommentReactionCommandInput, cb: (err: any, data?: PutCommentReactionCommandOutput) => void): void;
            putCommentReaction(args: PutCommentReactionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutCommentReactionCommandOutput) => void): void;
            /**
                * <p>Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.</p>
                */
            putFile(args: PutFileCommandInput, options?: __HttpHandlerOptions): Promise<PutFileCommandOutput>;
            putFile(args: PutFileCommandInput, cb: (err: any, data?: PutFileCommandOutput) => void): void;
            putFile(args: PutFileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutFileCommandOutput) => void): void;
            /**
                * <p>Replaces all triggers for a repository. Used to create or delete triggers.</p>
                */
            putRepositoryTriggers(args: PutRepositoryTriggersCommandInput, options?: __HttpHandlerOptions): Promise<PutRepositoryTriggersCommandOutput>;
            putRepositoryTriggers(args: PutRepositoryTriggersCommandInput, cb: (err: any, data?: PutRepositoryTriggersCommandOutput) => void): void;
            putRepositoryTriggers(args: PutRepositoryTriggersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRepositoryTriggersCommandOutput) => void): void;
            /**
                * <p>Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources
                *             in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
                *                 Guide</i>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Tests the functionality of repository triggers by sending information to the trigger
                *             target. If real data is available in the repository, the test sends data from the last
                *             commit. If no data is available, sample data is generated.</p>
                */
            testRepositoryTriggers(args: TestRepositoryTriggersCommandInput, options?: __HttpHandlerOptions): Promise<TestRepositoryTriggersCommandOutput>;
            testRepositoryTriggers(args: TestRepositoryTriggersCommandInput, cb: (err: any, data?: TestRepositoryTriggersCommandOutput) => void): void;
            testRepositoryTriggers(args: TestRepositoryTriggersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestRepositoryTriggersCommandOutput) => void): void;
            /**
                * <p>Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS
                *             CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
                *                 Guide</i>.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the content of an approval rule template. You can change the number of
                *             required approvals, the membership of the approval rule, and whether an approval pool is
                *             defined.</p>
                */
            updateApprovalRuleTemplateContent(args: UpdateApprovalRuleTemplateContentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApprovalRuleTemplateContentCommandOutput>;
            updateApprovalRuleTemplateContent(args: UpdateApprovalRuleTemplateContentCommandInput, cb: (err: any, data?: UpdateApprovalRuleTemplateContentCommandOutput) => void): void;
            updateApprovalRuleTemplateContent(args: UpdateApprovalRuleTemplateContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApprovalRuleTemplateContentCommandOutput) => void): void;
            /**
                * <p>Updates the description for a specified approval rule template.</p>
                */
            updateApprovalRuleTemplateDescription(args: UpdateApprovalRuleTemplateDescriptionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApprovalRuleTemplateDescriptionCommandOutput>;
            updateApprovalRuleTemplateDescription(args: UpdateApprovalRuleTemplateDescriptionCommandInput, cb: (err: any, data?: UpdateApprovalRuleTemplateDescriptionCommandOutput) => void): void;
            updateApprovalRuleTemplateDescription(args: UpdateApprovalRuleTemplateDescriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApprovalRuleTemplateDescriptionCommandOutput) => void): void;
            /**
                * <p>Updates the name of a specified approval rule template.</p>
                */
            updateApprovalRuleTemplateName(args: UpdateApprovalRuleTemplateNameCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApprovalRuleTemplateNameCommandOutput>;
            updateApprovalRuleTemplateName(args: UpdateApprovalRuleTemplateNameCommandInput, cb: (err: any, data?: UpdateApprovalRuleTemplateNameCommandOutput) => void): void;
            updateApprovalRuleTemplateName(args: UpdateApprovalRuleTemplateNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApprovalRuleTemplateNameCommandOutput) => void): void;
            /**
                * <p>Replaces the contents of a comment.</p>
                */
            updateComment(args: UpdateCommentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCommentCommandOutput>;
            updateComment(args: UpdateCommentCommandInput, cb: (err: any, data?: UpdateCommentCommandOutput) => void): void;
            updateComment(args: UpdateCommentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCommentCommandOutput) => void): void;
            /**
                * <p>Sets or changes the default branch name for the specified repository.</p>
                *         <note>
                *             <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p>
                *          </note>
                */
            updateDefaultBranch(args: UpdateDefaultBranchCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDefaultBranchCommandOutput>;
            updateDefaultBranch(args: UpdateDefaultBranchCommandInput, cb: (err: any, data?: UpdateDefaultBranchCommandOutput) => void): void;
            updateDefaultBranch(args: UpdateDefaultBranchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDefaultBranchCommandOutput) => void): void;
            /**
                * <p>Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and
                *             the approval pool for approvers. </p>
                */
            updatePullRequestApprovalRuleContent(args: UpdatePullRequestApprovalRuleContentCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePullRequestApprovalRuleContentCommandOutput>;
            updatePullRequestApprovalRuleContent(args: UpdatePullRequestApprovalRuleContentCommandInput, cb: (err: any, data?: UpdatePullRequestApprovalRuleContentCommandOutput) => void): void;
            updatePullRequestApprovalRuleContent(args: UpdatePullRequestApprovalRuleContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePullRequestApprovalRuleContentCommandOutput) => void): void;
            /**
                * <p>Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.</p>
                */
            updatePullRequestApprovalState(args: UpdatePullRequestApprovalStateCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePullRequestApprovalStateCommandOutput>;
            updatePullRequestApprovalState(args: UpdatePullRequestApprovalStateCommandInput, cb: (err: any, data?: UpdatePullRequestApprovalStateCommandOutput) => void): void;
            updatePullRequestApprovalState(args: UpdatePullRequestApprovalStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePullRequestApprovalStateCommandOutput) => void): void;
            /**
                * <p>Replaces the contents of the description of a pull request.</p>
                */
            updatePullRequestDescription(args: UpdatePullRequestDescriptionCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePullRequestDescriptionCommandOutput>;
            updatePullRequestDescription(args: UpdatePullRequestDescriptionCommandInput, cb: (err: any, data?: UpdatePullRequestDescriptionCommandOutput) => void): void;
            updatePullRequestDescription(args: UpdatePullRequestDescriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePullRequestDescriptionCommandOutput) => void): void;
            /**
                * <p>Updates the status of a pull request. </p>
                */
            updatePullRequestStatus(args: UpdatePullRequestStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePullRequestStatusCommandOutput>;
            updatePullRequestStatus(args: UpdatePullRequestStatusCommandInput, cb: (err: any, data?: UpdatePullRequestStatusCommandOutput) => void): void;
            updatePullRequestStatus(args: UpdatePullRequestStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePullRequestStatusCommandOutput) => void): void;
            /**
                * <p>Replaces the title of a pull request.</p>
                */
            updatePullRequestTitle(args: UpdatePullRequestTitleCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePullRequestTitleCommandOutput>;
            updatePullRequestTitle(args: UpdatePullRequestTitleCommandInput, cb: (err: any, data?: UpdatePullRequestTitleCommandOutput) => void): void;
            updatePullRequestTitle(args: UpdatePullRequestTitleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePullRequestTitleCommandOutput) => void): void;
            /**
                * <p>Sets or changes the comment or description for a repository.</p>
                *         <note>
                *             <p>The description field for a repository accepts all HTML characters and all valid
                *                 Unicode characters. Applications that do not HTML-encode the description and display
                *                 it in a webpage can expose users to potentially malicious code. Make sure that you
                *                 HTML-encode the description field in any application that uses this API to display
                *                 the repository description on a webpage.</p>
                *          </note>
                */
            updateRepositoryDescription(args: UpdateRepositoryDescriptionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRepositoryDescriptionCommandOutput>;
            updateRepositoryDescription(args: UpdateRepositoryDescriptionCommandInput, cb: (err: any, data?: UpdateRepositoryDescriptionCommandOutput) => void): void;
            updateRepositoryDescription(args: UpdateRepositoryDescriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRepositoryDescriptionCommandOutput) => void): void;
            /**
                * <p>Renames a repository. The repository name must be unique across the calling AWS
                *             account. Repository names are limited to 100 alphanumeric, dash, and underscore
                *             characters, and cannot include certain characters. The suffix .git is prohibited. For
                *             more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit
                *             User Guide.</p>
                */
            updateRepositoryName(args: UpdateRepositoryNameCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRepositoryNameCommandOutput>;
            updateRepositoryName(args: UpdateRepositoryNameCommandInput, cb: (err: any, data?: UpdateRepositoryNameCommandOutput) => void): void;
            updateRepositoryName(args: UpdateRepositoryNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRepositoryNameCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateApprovalRuleTemplateWithRepositoryCommandInput, AssociateApprovalRuleTemplateWithRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/AssociateApprovalRuleTemplateWithRepositoryCommand";
    import { BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput, BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchAssociateApprovalRuleTemplateWithRepositoriesCommand";
    import { BatchDescribeMergeConflictsCommandInput, BatchDescribeMergeConflictsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchDescribeMergeConflictsCommand";
    import { BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput, BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand";
    import { BatchGetCommitsCommandInput, BatchGetCommitsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchGetCommitsCommand";
    import { BatchGetRepositoriesCommandInput, BatchGetRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchGetRepositoriesCommand";
    import { CreateApprovalRuleTemplateCommandInput, CreateApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateApprovalRuleTemplateCommand";
    import { CreateBranchCommandInput, CreateBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateBranchCommand";
    import { CreateCommitCommandInput, CreateCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateCommitCommand";
    import { CreatePullRequestApprovalRuleCommandInput, CreatePullRequestApprovalRuleCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreatePullRequestApprovalRuleCommand";
    import { CreatePullRequestCommandInput, CreatePullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreatePullRequestCommand";
    import { CreateRepositoryCommandInput, CreateRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateRepositoryCommand";
    import { CreateUnreferencedMergeCommitCommandInput, CreateUnreferencedMergeCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateUnreferencedMergeCommitCommand";
    import { DeleteApprovalRuleTemplateCommandInput, DeleteApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteApprovalRuleTemplateCommand";
    import { DeleteBranchCommandInput, DeleteBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteBranchCommand";
    import { DeleteCommentContentCommandInput, DeleteCommentContentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteCommentContentCommand";
    import { DeleteFileCommandInput, DeleteFileCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteFileCommand";
    import { DeletePullRequestApprovalRuleCommandInput, DeletePullRequestApprovalRuleCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeletePullRequestApprovalRuleCommand";
    import { DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteRepositoryCommand";
    import { DescribeMergeConflictsCommandInput, DescribeMergeConflictsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DescribeMergeConflictsCommand";
    import { DescribePullRequestEventsCommandInput, DescribePullRequestEventsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DescribePullRequestEventsCommand";
    import { DisassociateApprovalRuleTemplateFromRepositoryCommandInput, DisassociateApprovalRuleTemplateFromRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DisassociateApprovalRuleTemplateFromRepositoryCommand";
    import { EvaluatePullRequestApprovalRulesCommandInput, EvaluatePullRequestApprovalRulesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/EvaluatePullRequestApprovalRulesCommand";
    import { GetApprovalRuleTemplateCommandInput, GetApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetApprovalRuleTemplateCommand";
    import { GetBlobCommandInput, GetBlobCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetBlobCommand";
    import { GetBranchCommandInput, GetBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetBranchCommand";
    import { GetCommentCommandInput, GetCommentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentCommand";
    import { GetCommentReactionsCommandInput, GetCommentReactionsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentReactionsCommand";
    import { GetCommentsForComparedCommitCommandInput, GetCommentsForComparedCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentsForComparedCommitCommand";
    import { GetCommentsForPullRequestCommandInput, GetCommentsForPullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentsForPullRequestCommand";
    import { GetCommitCommandInput, GetCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommitCommand";
    import { GetDifferencesCommandInput, GetDifferencesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetDifferencesCommand";
    import { GetFileCommandInput, GetFileCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetFileCommand";
    import { GetFolderCommandInput, GetFolderCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetFolderCommand";
    import { GetMergeCommitCommandInput, GetMergeCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeCommitCommand";
    import { GetMergeConflictsCommandInput, GetMergeConflictsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeConflictsCommand";
    import { GetMergeOptionsCommandInput, GetMergeOptionsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeOptionsCommand";
    import { GetPullRequestApprovalStatesCommandInput, GetPullRequestApprovalStatesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestApprovalStatesCommand";
    import { GetPullRequestCommandInput, GetPullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestCommand";
    import { GetPullRequestOverrideStateCommandInput, GetPullRequestOverrideStateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestOverrideStateCommand";
    import { GetRepositoryCommandInput, GetRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetRepositoryCommand";
    import { GetRepositoryTriggersCommandInput, GetRepositoryTriggersCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetRepositoryTriggersCommand";
    import { ListApprovalRuleTemplatesCommandInput, ListApprovalRuleTemplatesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListApprovalRuleTemplatesCommand";
    import { ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput, ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListAssociatedApprovalRuleTemplatesForRepositoryCommand";
    import { ListBranchesCommandInput, ListBranchesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListBranchesCommand";
    import { ListPullRequestsCommandInput, ListPullRequestsCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListPullRequestsCommand";
    import { ListRepositoriesCommandInput, ListRepositoriesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListRepositoriesCommand";
    import { ListRepositoriesForApprovalRuleTemplateCommandInput, ListRepositoriesForApprovalRuleTemplateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListRepositoriesForApprovalRuleTemplateCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListTagsForResourceCommand";
    import { MergeBranchesByFastForwardCommandInput, MergeBranchesByFastForwardCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesByFastForwardCommand";
    import { MergeBranchesBySquashCommandInput, MergeBranchesBySquashCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesBySquashCommand";
    import { MergeBranchesByThreeWayCommandInput, MergeBranchesByThreeWayCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesByThreeWayCommand";
    import { MergePullRequestByFastForwardCommandInput, MergePullRequestByFastForwardCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestByFastForwardCommand";
    import { MergePullRequestBySquashCommandInput, MergePullRequestBySquashCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestBySquashCommand";
    import { MergePullRequestByThreeWayCommandInput, MergePullRequestByThreeWayCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestByThreeWayCommand";
    import { OverridePullRequestApprovalRulesCommandInput, OverridePullRequestApprovalRulesCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/OverridePullRequestApprovalRulesCommand";
    import { PostCommentForComparedCommitCommandInput, PostCommentForComparedCommitCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentForComparedCommitCommand";
    import { PostCommentForPullRequestCommandInput, PostCommentForPullRequestCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentForPullRequestCommand";
    import { PostCommentReplyCommandInput, PostCommentReplyCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentReplyCommand";
    import { PutCommentReactionCommandInput, PutCommentReactionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutCommentReactionCommand";
    import { PutFileCommandInput, PutFileCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutFileCommand";
    import { PutRepositoryTriggersCommandInput, PutRepositoryTriggersCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutRepositoryTriggersCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/TagResourceCommand";
    import { TestRepositoryTriggersCommandInput, TestRepositoryTriggersCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/TestRepositoryTriggersCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UntagResourceCommand";
    import { UpdateApprovalRuleTemplateContentCommandInput, UpdateApprovalRuleTemplateContentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateContentCommand";
    import { UpdateApprovalRuleTemplateDescriptionCommandInput, UpdateApprovalRuleTemplateDescriptionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateDescriptionCommand";
    import { UpdateApprovalRuleTemplateNameCommandInput, UpdateApprovalRuleTemplateNameCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateNameCommand";
    import { UpdateCommentCommandInput, UpdateCommentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateCommentCommand";
    import { UpdateDefaultBranchCommandInput, UpdateDefaultBranchCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateDefaultBranchCommand";
    import { UpdatePullRequestApprovalRuleContentCommandInput, UpdatePullRequestApprovalRuleContentCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestApprovalRuleContentCommand";
    import { UpdatePullRequestApprovalStateCommandInput, UpdatePullRequestApprovalStateCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestApprovalStateCommand";
    import { UpdatePullRequestDescriptionCommandInput, UpdatePullRequestDescriptionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestDescriptionCommand";
    import { UpdatePullRequestStatusCommandInput, UpdatePullRequestStatusCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestStatusCommand";
    import { UpdatePullRequestTitleCommandInput, UpdatePullRequestTitleCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestTitleCommand";
    import { UpdateRepositoryDescriptionCommandInput, UpdateRepositoryDescriptionCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateRepositoryDescriptionCommand";
    import { UpdateRepositoryNameCommandInput, UpdateRepositoryNameCommandOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateRepositoryNameCommand";
    export type ServiceInputTypes = AssociateApprovalRuleTemplateWithRepositoryCommandInput | BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput | BatchDescribeMergeConflictsCommandInput | BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput | BatchGetCommitsCommandInput | BatchGetRepositoriesCommandInput | CreateApprovalRuleTemplateCommandInput | CreateBranchCommandInput | CreateCommitCommandInput | CreatePullRequestApprovalRuleCommandInput | CreatePullRequestCommandInput | CreateRepositoryCommandInput | CreateUnreferencedMergeCommitCommandInput | DeleteApprovalRuleTemplateCommandInput | DeleteBranchCommandInput | DeleteCommentContentCommandInput | DeleteFileCommandInput | DeletePullRequestApprovalRuleCommandInput | DeleteRepositoryCommandInput | DescribeMergeConflictsCommandInput | DescribePullRequestEventsCommandInput | DisassociateApprovalRuleTemplateFromRepositoryCommandInput | EvaluatePullRequestApprovalRulesCommandInput | GetApprovalRuleTemplateCommandInput | GetBlobCommandInput | GetBranchCommandInput | GetCommentCommandInput | GetCommentReactionsCommandInput | GetCommentsForComparedCommitCommandInput | GetCommentsForPullRequestCommandInput | GetCommitCommandInput | GetDifferencesCommandInput | GetFileCommandInput | GetFolderCommandInput | GetMergeCommitCommandInput | GetMergeConflictsCommandInput | GetMergeOptionsCommandInput | GetPullRequestApprovalStatesCommandInput | GetPullRequestCommandInput | GetPullRequestOverrideStateCommandInput | GetRepositoryCommandInput | GetRepositoryTriggersCommandInput | ListApprovalRuleTemplatesCommandInput | ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput | ListBranchesCommandInput | ListPullRequestsCommandInput | ListRepositoriesCommandInput | ListRepositoriesForApprovalRuleTemplateCommandInput | ListTagsForResourceCommandInput | MergeBranchesByFastForwardCommandInput | MergeBranchesBySquashCommandInput | MergeBranchesByThreeWayCommandInput | MergePullRequestByFastForwardCommandInput | MergePullRequestBySquashCommandInput | MergePullRequestByThreeWayCommandInput | OverridePullRequestApprovalRulesCommandInput | PostCommentForComparedCommitCommandInput | PostCommentForPullRequestCommandInput | PostCommentReplyCommandInput | PutCommentReactionCommandInput | PutFileCommandInput | PutRepositoryTriggersCommandInput | TagResourceCommandInput | TestRepositoryTriggersCommandInput | UntagResourceCommandInput | UpdateApprovalRuleTemplateContentCommandInput | UpdateApprovalRuleTemplateDescriptionCommandInput | UpdateApprovalRuleTemplateNameCommandInput | UpdateCommentCommandInput | UpdateDefaultBranchCommandInput | UpdatePullRequestApprovalRuleContentCommandInput | UpdatePullRequestApprovalStateCommandInput | UpdatePullRequestDescriptionCommandInput | UpdatePullRequestStatusCommandInput | UpdatePullRequestTitleCommandInput | UpdateRepositoryDescriptionCommandInput | UpdateRepositoryNameCommandInput;
    export type ServiceOutputTypes = AssociateApprovalRuleTemplateWithRepositoryCommandOutput | BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput | BatchDescribeMergeConflictsCommandOutput | BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput | BatchGetCommitsCommandOutput | BatchGetRepositoriesCommandOutput | CreateApprovalRuleTemplateCommandOutput | CreateBranchCommandOutput | CreateCommitCommandOutput | CreatePullRequestApprovalRuleCommandOutput | CreatePullRequestCommandOutput | CreateRepositoryCommandOutput | CreateUnreferencedMergeCommitCommandOutput | DeleteApprovalRuleTemplateCommandOutput | DeleteBranchCommandOutput | DeleteCommentContentCommandOutput | DeleteFileCommandOutput | DeletePullRequestApprovalRuleCommandOutput | DeleteRepositoryCommandOutput | DescribeMergeConflictsCommandOutput | DescribePullRequestEventsCommandOutput | DisassociateApprovalRuleTemplateFromRepositoryCommandOutput | EvaluatePullRequestApprovalRulesCommandOutput | GetApprovalRuleTemplateCommandOutput | GetBlobCommandOutput | GetBranchCommandOutput | GetCommentCommandOutput | GetCommentReactionsCommandOutput | GetCommentsForComparedCommitCommandOutput | GetCommentsForPullRequestCommandOutput | GetCommitCommandOutput | GetDifferencesCommandOutput | GetFileCommandOutput | GetFolderCommandOutput | GetMergeCommitCommandOutput | GetMergeConflictsCommandOutput | GetMergeOptionsCommandOutput | GetPullRequestApprovalStatesCommandOutput | GetPullRequestCommandOutput | GetPullRequestOverrideStateCommandOutput | GetRepositoryCommandOutput | GetRepositoryTriggersCommandOutput | ListApprovalRuleTemplatesCommandOutput | ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput | ListBranchesCommandOutput | ListPullRequestsCommandOutput | ListRepositoriesCommandOutput | ListRepositoriesForApprovalRuleTemplateCommandOutput | ListTagsForResourceCommandOutput | MergeBranchesByFastForwardCommandOutput | MergeBranchesBySquashCommandOutput | MergeBranchesByThreeWayCommandOutput | MergePullRequestByFastForwardCommandOutput | MergePullRequestBySquashCommandOutput | MergePullRequestByThreeWayCommandOutput | OverridePullRequestApprovalRulesCommandOutput | PostCommentForComparedCommitCommandOutput | PostCommentForPullRequestCommandOutput | PostCommentReplyCommandOutput | PutCommentReactionCommandOutput | PutFileCommandOutput | PutRepositoryTriggersCommandOutput | TagResourceCommandOutput | TestRepositoryTriggersCommandOutput | UntagResourceCommandOutput | UpdateApprovalRuleTemplateContentCommandOutput | UpdateApprovalRuleTemplateDescriptionCommandOutput | UpdateApprovalRuleTemplateNameCommandOutput | UpdateCommentCommandOutput | UpdateDefaultBranchCommandOutput | UpdatePullRequestApprovalRuleContentCommandOutput | UpdatePullRequestApprovalStateCommandOutput | UpdatePullRequestDescriptionCommandOutput | UpdatePullRequestStatusCommandOutput | UpdatePullRequestTitleCommandOutput | UpdateRepositoryDescriptionCommandOutput | UpdateRepositoryNameCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CodeCommitClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CodeCommitClient class constructor that set the region, credentials and other options.
        */
    export interface CodeCommitClientConfig extends CodeCommitClientConfigType {
    }
    type CodeCommitClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CodeCommitClient class. This is resolved and normalized from the {@link CodeCommitClientConfig | constructor configuration interface}.
        */
    export interface CodeCommitClientResolvedConfig extends CodeCommitClientResolvedConfigType {
    }
    /**
        * <fullname>AWS CodeCommit</fullname>
        *         <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for
        *             AWS CodeCommit API along with usage examples.</p>
        *         <p>You can use the AWS CodeCommit API to work with the following objects:</p>
        *
        *             <p>Repositories, by calling the following:</p>
        *           <ul>
        *             <li>
        *                   <p>
        *                   <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>GetRepository</a>, which returns information about a specified repository.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p>
        *             </li>
        *             <li>
        *                   <p>
        *                   <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p>
        *               </li>
        *             <li>
        *                   <p>
        *                   <a>UpdateRepositoryName</a>, which changes the name of the
        *                     repository. If you change the name of a repository, no other users of that
        *                     repository can access it until you send them the new HTTPS or SSH URL to
        *                     use.</p>
        *             </li>
        *          </ul>
        *
        *             <p>Branches, by calling the following:</p>
        *             <ul>
        *             <li>
        *                     <p>
        *                   <a>CreateBranch</a>, which creates a branch in a specified
        *                     repository.</p>
        *             </li>
        *             <li>
        *                     <p>
        *                   <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p>
        *                 </li>
        *             <li>
        *                     <p>
        *                   <a>GetBranch</a>, which returns information about a specified branch.</p>
        *             </li>
        *             <li>
        *                     <p>
        *                   <a>ListBranches</a>, which lists all branches for a specified repository.</p>
        *             </li>
        *             <li>
        *                     <p>
        *                   <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Files, by calling the following:</p>
        *         <ul>
        *             <li>
        *                <p>
        *                   <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetBlob</a>, which returns the base-64 encoded content of an
        *                     individual Git blob object in a repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p>
        *             </li>
        *          </ul>
        *
        *
        *             <p>Commits, by calling the following:</p>
        *               <ul>
        *             <li>
        *                       <p>
        *                   <a>BatchGetCommits</a>, which returns information about one or more commits in a repository.</p>
        *                   </li>
        *             <li>
        *                <p>
        *                   <a>CreateCommit</a>, which creates a commit for changes to a repository.</p>
        *             </li>
        *             <li>
        *                       <p>
        *                   <a>GetCommit</a>, which returns information about  a commit, including commit
        *                           messages and author and committer information.</p>
        *                   </li>
        *             <li>
        *                       <p>
        *                   <a>GetDifferences</a>, which returns information about the
        *                     differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID,
        *                     or other fully qualified reference).</p>
        *                   </li>
        *          </ul>
        *
        *
        *         <p>Merges, by calling the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the
        *                     purpose of comparing them and identifying any potential conflicts.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions
        *                     of a file in a potential merge.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p>
        *
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetMergeConflicts</a>, which returns information about merge conflicts
        *                     between the source and destination branch in a pull request.</p>
        *             </li>
        *             <li>
        *
        *                 <p>
        *                   <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p>
        *             </li>
        *          </ul>
        *
        *
        *         <p>Pull requests, by calling the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>CreatePullRequestApprovalRule</a>, which creates an approval rule for a specified pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a specified pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p>
        *             </li>
        *             <li>
        *
        *                 <p>
        *                   <a>GetPullRequest</a>, which returns information about a specified pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetPullRequestApprovalStates</a>, which returns information about the approval states for a specified pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetPullRequestOverrideState</a>, which returns information about whether approval rules have been set aside (overriden) for a
        *             pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>ListPullRequests</a>, which lists all pull requests for a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination
        *                     branch for that pull request using the fast-forward merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination
        *                 branch for that pull request using the squash merge option.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination
        *                 branch for that pull request using the three-way merge option.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>OverridePullRequestApprovalRules</a>, which sets aside all approval rule requirements for a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure of an approval rule for a pull request.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdatePullRequestApprovalState</a>, which updates the state of an approval on a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Approval rule templates, by calling the following:</p>
        *         <ul>
        *             <li>
        *                <p>
        *                   <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a template
        *                     with a specified repository. After the template is associated with a repository,
        *                     AWS CodeCommit creates approval rules that match the template conditions on
        *                     every pull request created in the specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which associates a
        *                     template with one or more specified repositories. After the template is
        *                     associated with a repository, AWS CodeCommit creates approval rules that match
        *                     the template conditions on every pull request created in the specified
        *                     repositories.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which removes the
        *                     association between a template and specified repositories so that approval rules
        *                     based on the template are not automatically created when pull requests are
        *                     created in those repositories.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>CreateApprovalRuleTemplate</a>, which creates a template for approval rules that can then be associated with one or more repositories
        *              in your AWS account.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template. It does not remove approval rules on pull requests already created with the template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the
        *                     association between a template and a repository so that approval rules based on
        *                     the template are not automatically created when pull requests are created in the
        *                     specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetApprovalRuleTemplate</a>, which returns information about an approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in the AWS Region in your AWS account.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListAssociatedApprovalRuleTemplatesForRepository</a>, which lists all approval rule templates that are associated with a specified repository.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all repositories associated with the specified approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateApprovalRuleTemplateDescription</a>, which updates the description of an
        *                     approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an approval rule template.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an approval rule template.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Comments in a repository, by calling the following:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetComment</a>, which returns information about a comment on a commit.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetCommentReactions</a>, which returns information about emoji reactions to comments.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers
        *                     in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>PostCommentReply</a>, which creates a reply to a comment.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>PutCommentReaction</a>, which creates or updates an emoji reaction to a comment.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p>
        *             </li>
        *          </ul>
        *
        *         <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p>
        *         <ul>
        *             <li>
        *                <p>
        *                   <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p>
        *             </li>
        *          </ul>
        *
        *             <p>Triggers, by calling the following:</p>
        *                 <ul>
        *             <li>
        *                         <p>
        *                   <a>GetRepositoryTriggers</a>, which returns information about triggers configured
        *                             for a repository.</p>
        *             </li>
        *             <li>
        *                         <p>
        *                   <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can
        *                             be used to create or delete triggers.</p>
        *             </li>
        *             <li>
        *                         <p>
        *                   <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger
        *                             by sending data to the trigger target.</p>
        *             </li>
        *          </ul>
        *
        *
        *
        *
        *         <p>For information about how to use AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit User Guide</a>.</p>
        */
    export class CodeCommitClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CodeCommitClientResolvedConfig> {
            /**
                * The resolved configuration of CodeCommitClient class. This is resolved and normalized from the {@link CodeCommitClientConfig | constructor configuration interface}.
                */
            readonly config: CodeCommitClientResolvedConfig;
            constructor(configuration: CodeCommitClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/AssociateApprovalRuleTemplateWithRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { AssociateApprovalRuleTemplateWithRepositoryInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface AssociateApprovalRuleTemplateWithRepositoryCommandInput extends AssociateApprovalRuleTemplateWithRepositoryInput {
    }
    export interface AssociateApprovalRuleTemplateWithRepositoryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates an association between an approval rule template and a specified repository.
        *             Then, the next time a pull request is created in the repository where the destination
        *             reference (if specified) matches the destination reference (branch) for the pull
        *             request, an approval rule that matches the template conditions is automatically created
        *             for that pull request. If no destination references are specified in the template, an
        *             approval rule that matches the template contents is created for all pull requests in
        *             that repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, AssociateApprovalRuleTemplateWithRepositoryCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, AssociateApprovalRuleTemplateWithRepositoryCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new AssociateApprovalRuleTemplateWithRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateApprovalRuleTemplateWithRepositoryCommandInput} for command's `input` shape.
        * @see {@link AssociateApprovalRuleTemplateWithRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class AssociateApprovalRuleTemplateWithRepositoryCommand extends $Command<AssociateApprovalRuleTemplateWithRepositoryCommandInput, AssociateApprovalRuleTemplateWithRepositoryCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: AssociateApprovalRuleTemplateWithRepositoryCommandInput;
            constructor(input: AssociateApprovalRuleTemplateWithRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateApprovalRuleTemplateWithRepositoryCommandInput, AssociateApprovalRuleTemplateWithRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchAssociateApprovalRuleTemplateWithRepositoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { BatchAssociateApprovalRuleTemplateWithRepositoriesInput, BatchAssociateApprovalRuleTemplateWithRepositoriesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput extends BatchAssociateApprovalRuleTemplateWithRepositoriesInput {
    }
    export interface BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput extends BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an association between an approval rule template and one or more specified repositories. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, BatchAssociateApprovalRuleTemplateWithRepositoriesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, BatchAssociateApprovalRuleTemplateWithRepositoriesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new BatchAssociateApprovalRuleTemplateWithRepositoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput} for command's `input` shape.
        * @see {@link BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class BatchAssociateApprovalRuleTemplateWithRepositoriesCommand extends $Command<BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput, BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput;
            constructor(input: BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchAssociateApprovalRuleTemplateWithRepositoriesCommandInput, BatchAssociateApprovalRuleTemplateWithRepositoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchDescribeMergeConflictsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { BatchDescribeMergeConflictsInput, BatchDescribeMergeConflictsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface BatchDescribeMergeConflictsCommandInput extends BatchDescribeMergeConflictsInput {
    }
    export interface BatchDescribeMergeConflictsCommandOutput extends BatchDescribeMergeConflictsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, BatchDescribeMergeConflictsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, BatchDescribeMergeConflictsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new BatchDescribeMergeConflictsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDescribeMergeConflictsCommandInput} for command's `input` shape.
        * @see {@link BatchDescribeMergeConflictsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class BatchDescribeMergeConflictsCommand extends $Command<BatchDescribeMergeConflictsCommandInput, BatchDescribeMergeConflictsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: BatchDescribeMergeConflictsCommandInput;
            constructor(input: BatchDescribeMergeConflictsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDescribeMergeConflictsCommandInput, BatchDescribeMergeConflictsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { BatchDisassociateApprovalRuleTemplateFromRepositoriesInput, BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput extends BatchDisassociateApprovalRuleTemplateFromRepositoriesInput {
    }
    export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput extends BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, __MetadataBearer {
    }
    /**
        * <p>Removes the association between an approval rule template and one or more specified repositories. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput} for command's `input` shape.
        * @see {@link BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand extends $Command<BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput, BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput;
            constructor(input: BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandInput, BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchGetCommitsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { BatchGetCommitsInput, BatchGetCommitsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface BatchGetCommitsCommandInput extends BatchGetCommitsInput {
    }
    export interface BatchGetCommitsCommandOutput extends BatchGetCommitsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about the contents of one or more commits in a repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, BatchGetCommitsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, BatchGetCommitsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new BatchGetCommitsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetCommitsCommandInput} for command's `input` shape.
        * @see {@link BatchGetCommitsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class BatchGetCommitsCommand extends $Command<BatchGetCommitsCommandInput, BatchGetCommitsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: BatchGetCommitsCommandInput;
            constructor(input: BatchGetCommitsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetCommitsCommandInput, BatchGetCommitsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/BatchGetRepositoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { BatchGetRepositoriesInput, BatchGetRepositoriesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface BatchGetRepositoriesCommandInput extends BatchGetRepositoriesInput {
    }
    export interface BatchGetRepositoriesCommandOutput extends BatchGetRepositoriesOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more repositories.</p>
        *         <note>
        *             <p>The description field for a repository accepts all HTML characters and all valid
        *                 Unicode characters. Applications that do not HTML-encode the description and display
        *                 it in a webpage can expose users to potentially malicious code. Make sure that you
        *                 HTML-encode the description field in any application that uses this API to display
        *                 the repository description on a webpage.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, BatchGetRepositoriesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, BatchGetRepositoriesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new BatchGetRepositoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetRepositoriesCommandInput} for command's `input` shape.
        * @see {@link BatchGetRepositoriesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class BatchGetRepositoriesCommand extends $Command<BatchGetRepositoriesCommandInput, BatchGetRepositoriesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: BatchGetRepositoriesCommandInput;
            constructor(input: BatchGetRepositoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetRepositoriesCommandInput, BatchGetRepositoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateApprovalRuleTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { CreateApprovalRuleTemplateInput, CreateApprovalRuleTemplateOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface CreateApprovalRuleTemplateCommandInput extends CreateApprovalRuleTemplateInput {
    }
    export interface CreateApprovalRuleTemplateCommandOutput extends CreateApprovalRuleTemplateOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a template for approval rules that can then be associated with one or more
        *             repositories in your AWS account. When you associate a template with a repository, AWS
        *             CodeCommit creates an approval rule that matches the conditions of the template for all
        *             pull requests that meet the conditions of the template. For more information, see
        *             <a>AssociateApprovalRuleTemplateWithRepository</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, CreateApprovalRuleTemplateCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, CreateApprovalRuleTemplateCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new CreateApprovalRuleTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApprovalRuleTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateApprovalRuleTemplateCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class CreateApprovalRuleTemplateCommand extends $Command<CreateApprovalRuleTemplateCommandInput, CreateApprovalRuleTemplateCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: CreateApprovalRuleTemplateCommandInput;
            constructor(input: CreateApprovalRuleTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApprovalRuleTemplateCommandInput, CreateApprovalRuleTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateBranchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { CreateBranchInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface CreateBranchCommandInput extends CreateBranchInput {
    }
    export interface CreateBranchCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates a branch in a repository and points the branch to a commit.</p>
        *         <note>
        *             <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, CreateBranchCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, CreateBranchCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new CreateBranchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBranchCommandInput} for command's `input` shape.
        * @see {@link CreateBranchCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class CreateBranchCommand extends $Command<CreateBranchCommandInput, CreateBranchCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: CreateBranchCommandInput;
            constructor(input: CreateBranchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBranchCommandInput, CreateBranchCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateCommitCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { CreateCommitInput, CreateCommitOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface CreateCommitCommandInput extends CreateCommitInput {
    }
    export interface CreateCommitCommandOutput extends CreateCommitOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a commit for a repository on the tip of a specified branch.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, CreateCommitCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, CreateCommitCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new CreateCommitCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCommitCommandInput} for command's `input` shape.
        * @see {@link CreateCommitCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class CreateCommitCommand extends $Command<CreateCommitCommandInput, CreateCommitCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: CreateCommitCommandInput;
            constructor(input: CreateCommitCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCommitCommandInput, CreateCommitCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreatePullRequestApprovalRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { CreatePullRequestApprovalRuleInput, CreatePullRequestApprovalRuleOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface CreatePullRequestApprovalRuleCommandInput extends CreatePullRequestApprovalRuleInput {
    }
    export interface CreatePullRequestApprovalRuleCommandOutput extends CreatePullRequestApprovalRuleOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an approval rule for a pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, CreatePullRequestApprovalRuleCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, CreatePullRequestApprovalRuleCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new CreatePullRequestApprovalRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePullRequestApprovalRuleCommandInput} for command's `input` shape.
        * @see {@link CreatePullRequestApprovalRuleCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class CreatePullRequestApprovalRuleCommand extends $Command<CreatePullRequestApprovalRuleCommandInput, CreatePullRequestApprovalRuleCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: CreatePullRequestApprovalRuleCommandInput;
            constructor(input: CreatePullRequestApprovalRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePullRequestApprovalRuleCommandInput, CreatePullRequestApprovalRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreatePullRequestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { CreatePullRequestInput, CreatePullRequestOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface CreatePullRequestCommandInput extends CreatePullRequestInput {
    }
    export interface CreatePullRequestCommandOutput extends CreatePullRequestOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a pull request in the specified repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, CreatePullRequestCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, CreatePullRequestCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new CreatePullRequestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePullRequestCommandInput} for command's `input` shape.
        * @see {@link CreatePullRequestCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class CreatePullRequestCommand extends $Command<CreatePullRequestCommandInput, CreatePullRequestCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: CreatePullRequestCommandInput;
            constructor(input: CreatePullRequestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePullRequestCommandInput, CreatePullRequestCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { CreateRepositoryInput, CreateRepositoryOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface CreateRepositoryCommandInput extends CreateRepositoryInput {
    }
    export interface CreateRepositoryCommandOutput extends CreateRepositoryOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a new, empty repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, CreateRepositoryCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, CreateRepositoryCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new CreateRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRepositoryCommandInput} for command's `input` shape.
        * @see {@link CreateRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class CreateRepositoryCommand extends $Command<CreateRepositoryCommandInput, CreateRepositoryCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: CreateRepositoryCommandInput;
            constructor(input: CreateRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRepositoryCommandInput, CreateRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/CreateUnreferencedMergeCommitCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { CreateUnreferencedMergeCommitInput, CreateUnreferencedMergeCommitOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface CreateUnreferencedMergeCommitCommandInput extends CreateUnreferencedMergeCommitInput {
    }
    export interface CreateUnreferencedMergeCommitCommandOutput extends CreateUnreferencedMergeCommitOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an unreferenced commit that represents the result of merging two branches
        *             using a specified merge strategy. This can help you determine the outcome of a potential
        *             merge. This API cannot be used with the fast-forward merge strategy because that
        *             strategy does not create a merge commit.</p>
        *         <note>
        *             <p>This unreferenced merge commit
        *         can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, CreateUnreferencedMergeCommitCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, CreateUnreferencedMergeCommitCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new CreateUnreferencedMergeCommitCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUnreferencedMergeCommitCommandInput} for command's `input` shape.
        * @see {@link CreateUnreferencedMergeCommitCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class CreateUnreferencedMergeCommitCommand extends $Command<CreateUnreferencedMergeCommitCommandInput, CreateUnreferencedMergeCommitCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: CreateUnreferencedMergeCommitCommandInput;
            constructor(input: CreateUnreferencedMergeCommitCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUnreferencedMergeCommitCommandInput, CreateUnreferencedMergeCommitCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteApprovalRuleTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DeleteApprovalRuleTemplateInput, DeleteApprovalRuleTemplateOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DeleteApprovalRuleTemplateCommandInput extends DeleteApprovalRuleTemplateInput {
    }
    export interface DeleteApprovalRuleTemplateCommandOutput extends DeleteApprovalRuleTemplateOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DeleteApprovalRuleTemplateCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DeleteApprovalRuleTemplateCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DeleteApprovalRuleTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApprovalRuleTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteApprovalRuleTemplateCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DeleteApprovalRuleTemplateCommand extends $Command<DeleteApprovalRuleTemplateCommandInput, DeleteApprovalRuleTemplateCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DeleteApprovalRuleTemplateCommandInput;
            constructor(input: DeleteApprovalRuleTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApprovalRuleTemplateCommandInput, DeleteApprovalRuleTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteBranchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DeleteBranchInput, DeleteBranchOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DeleteBranchCommandInput extends DeleteBranchInput {
    }
    export interface DeleteBranchCommandOutput extends DeleteBranchOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes a branch from a repository, unless that branch is the default branch for the repository. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DeleteBranchCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DeleteBranchCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DeleteBranchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBranchCommandInput} for command's `input` shape.
        * @see {@link DeleteBranchCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DeleteBranchCommand extends $Command<DeleteBranchCommandInput, DeleteBranchCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DeleteBranchCommandInput;
            constructor(input: DeleteBranchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBranchCommandInput, DeleteBranchCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteCommentContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DeleteCommentContentInput, DeleteCommentContentOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DeleteCommentContentCommandInput extends DeleteCommentContentInput {
    }
    export interface DeleteCommentContentCommandOutput extends DeleteCommentContentOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the content of a comment made on a change, file, or commit in a repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DeleteCommentContentCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DeleteCommentContentCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DeleteCommentContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCommentContentCommandInput} for command's `input` shape.
        * @see {@link DeleteCommentContentCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DeleteCommentContentCommand extends $Command<DeleteCommentContentCommandInput, DeleteCommentContentCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DeleteCommentContentCommandInput;
            constructor(input: DeleteCommentContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCommentContentCommandInput, DeleteCommentContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteFileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DeleteFileInput, DeleteFileOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DeleteFileCommandInput extends DeleteFileInput {
    }
    export interface DeleteFileCommandOutput extends DeleteFileOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified file from a specified branch. A commit is created on the branch
        *             that contains the revision. The file still exists in the commits earlier to the commit
        *             that contains the deletion.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DeleteFileCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DeleteFileCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DeleteFileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFileCommandInput} for command's `input` shape.
        * @see {@link DeleteFileCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DeleteFileCommand extends $Command<DeleteFileCommandInput, DeleteFileCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DeleteFileCommandInput;
            constructor(input: DeleteFileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFileCommandInput, DeleteFileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeletePullRequestApprovalRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DeletePullRequestApprovalRuleInput, DeletePullRequestApprovalRuleOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DeletePullRequestApprovalRuleCommandInput extends DeletePullRequestApprovalRuleInput {
    }
    export interface DeletePullRequestApprovalRuleCommandOutput extends DeletePullRequestApprovalRuleOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the
        *             approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the
        *             pull request was created. You cannot delete an approval rule from a merged or closed pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DeletePullRequestApprovalRuleCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DeletePullRequestApprovalRuleCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DeletePullRequestApprovalRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePullRequestApprovalRuleCommandInput} for command's `input` shape.
        * @see {@link DeletePullRequestApprovalRuleCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DeletePullRequestApprovalRuleCommand extends $Command<DeletePullRequestApprovalRuleCommandInput, DeletePullRequestApprovalRuleCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DeletePullRequestApprovalRuleCommandInput;
            constructor(input: DeletePullRequestApprovalRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePullRequestApprovalRuleCommandInput, DeletePullRequestApprovalRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DeleteRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DeleteRepositoryInput, DeleteRepositoryOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DeleteRepositoryCommandInput extends DeleteRepositoryInput {
    }
    export interface DeleteRepositoryCommandOutput extends DeleteRepositoryOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes a repository. If a specified repository was already deleted, a null repository
        *             ID is returned.</p>
        *         <important>
        *             <p>Deleting a repository also deletes all associated objects and metadata. After a repository is
        *                 deleted, all future push calls to the deleted repository fail.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DeleteRepositoryCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DeleteRepositoryCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DeleteRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRepositoryCommandInput} for command's `input` shape.
        * @see {@link DeleteRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DeleteRepositoryCommand extends $Command<DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DeleteRepositoryCommandInput;
            constructor(input: DeleteRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRepositoryCommandInput, DeleteRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DescribeMergeConflictsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DescribeMergeConflictsInput, DescribeMergeConflictsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DescribeMergeConflictsCommandInput extends DescribeMergeConflictsInput {
    }
    export interface DescribeMergeConflictsCommandOutput extends DescribeMergeConflictsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more merge conflicts in the attempted merge of two
        *             commit specifiers using the squash or three-way merge strategy. If the merge option for
        *             the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DescribeMergeConflictsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DescribeMergeConflictsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DescribeMergeConflictsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMergeConflictsCommandInput} for command's `input` shape.
        * @see {@link DescribeMergeConflictsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DescribeMergeConflictsCommand extends $Command<DescribeMergeConflictsCommandInput, DescribeMergeConflictsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DescribeMergeConflictsCommandInput;
            constructor(input: DescribeMergeConflictsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMergeConflictsCommandInput, DescribeMergeConflictsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DescribePullRequestEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DescribePullRequestEventsInput, DescribePullRequestEventsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DescribePullRequestEventsCommandInput extends DescribePullRequestEventsInput {
    }
    export interface DescribePullRequestEventsCommandOutput extends DescribePullRequestEventsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more pull request events.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DescribePullRequestEventsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DescribePullRequestEventsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DescribePullRequestEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePullRequestEventsCommandInput} for command's `input` shape.
        * @see {@link DescribePullRequestEventsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DescribePullRequestEventsCommand extends $Command<DescribePullRequestEventsCommandInput, DescribePullRequestEventsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DescribePullRequestEventsCommandInput;
            constructor(input: DescribePullRequestEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePullRequestEventsCommandInput, DescribePullRequestEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/DisassociateApprovalRuleTemplateFromRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { DisassociateApprovalRuleTemplateFromRepositoryInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface DisassociateApprovalRuleTemplateFromRepositoryCommandInput extends DisassociateApprovalRuleTemplateFromRepositoryInput {
    }
    export interface DisassociateApprovalRuleTemplateFromRepositoryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the association between a template and a repository so that approval rules
        *             based on the template are not automatically created when pull requests are created in
        *             the specified repository. This does not delete any approval rules previously created for
        *             pull requests through the template association.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, DisassociateApprovalRuleTemplateFromRepositoryCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, DisassociateApprovalRuleTemplateFromRepositoryCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new DisassociateApprovalRuleTemplateFromRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateApprovalRuleTemplateFromRepositoryCommandInput} for command's `input` shape.
        * @see {@link DisassociateApprovalRuleTemplateFromRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class DisassociateApprovalRuleTemplateFromRepositoryCommand extends $Command<DisassociateApprovalRuleTemplateFromRepositoryCommandInput, DisassociateApprovalRuleTemplateFromRepositoryCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: DisassociateApprovalRuleTemplateFromRepositoryCommandInput;
            constructor(input: DisassociateApprovalRuleTemplateFromRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateApprovalRuleTemplateFromRepositoryCommandInput, DisassociateApprovalRuleTemplateFromRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/EvaluatePullRequestApprovalRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { EvaluatePullRequestApprovalRulesInput, EvaluatePullRequestApprovalRulesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface EvaluatePullRequestApprovalRulesCommandInput extends EvaluatePullRequestApprovalRulesInput {
    }
    export interface EvaluatePullRequestApprovalRulesCommandOutput extends EvaluatePullRequestApprovalRulesOutput, __MetadataBearer {
    }
    /**
        * <p>Evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, EvaluatePullRequestApprovalRulesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, EvaluatePullRequestApprovalRulesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new EvaluatePullRequestApprovalRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EvaluatePullRequestApprovalRulesCommandInput} for command's `input` shape.
        * @see {@link EvaluatePullRequestApprovalRulesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class EvaluatePullRequestApprovalRulesCommand extends $Command<EvaluatePullRequestApprovalRulesCommandInput, EvaluatePullRequestApprovalRulesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: EvaluatePullRequestApprovalRulesCommandInput;
            constructor(input: EvaluatePullRequestApprovalRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EvaluatePullRequestApprovalRulesCommandInput, EvaluatePullRequestApprovalRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetApprovalRuleTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetApprovalRuleTemplateInput, GetApprovalRuleTemplateOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetApprovalRuleTemplateCommandInput extends GetApprovalRuleTemplateInput {
    }
    export interface GetApprovalRuleTemplateCommandOutput extends GetApprovalRuleTemplateOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specified approval rule template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetApprovalRuleTemplateCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetApprovalRuleTemplateCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetApprovalRuleTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApprovalRuleTemplateCommandInput} for command's `input` shape.
        * @see {@link GetApprovalRuleTemplateCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetApprovalRuleTemplateCommand extends $Command<GetApprovalRuleTemplateCommandInput, GetApprovalRuleTemplateCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetApprovalRuleTemplateCommandInput;
            constructor(input: GetApprovalRuleTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApprovalRuleTemplateCommandInput, GetApprovalRuleTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetBlobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetBlobInput, GetBlobOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetBlobCommandInput extends GetBlobInput {
    }
    export interface GetBlobCommandOutput extends GetBlobOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the base-64 encoded content of an individual blob in a repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetBlobCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetBlobCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetBlobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBlobCommandInput} for command's `input` shape.
        * @see {@link GetBlobCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetBlobCommand extends $Command<GetBlobCommandInput, GetBlobCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetBlobCommandInput;
            constructor(input: GetBlobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBlobCommandInput, GetBlobCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetBranchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetBranchInput, GetBranchOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetBranchCommandInput extends GetBranchInput {
    }
    export interface GetBranchCommandOutput extends GetBranchOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a repository branch, including its name and the last commit ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetBranchCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetBranchCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetBranchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBranchCommandInput} for command's `input` shape.
        * @see {@link GetBranchCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetBranchCommand extends $Command<GetBranchCommandInput, GetBranchCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetBranchCommandInput;
            constructor(input: GetBranchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBranchCommandInput, GetBranchCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetCommentInput, GetCommentOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetCommentCommandInput extends GetCommentInput {
    }
    export interface GetCommentCommandOutput extends GetCommentOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the content of a comment made on a change, file, or commit in a repository. </p>
        *             <note>
        *             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
        *         reactions from active identities, use GetCommentReactions.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetCommentCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetCommentCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetCommentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCommentCommandInput} for command's `input` shape.
        * @see {@link GetCommentCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetCommentCommand extends $Command<GetCommentCommandInput, GetCommentCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetCommentCommandInput;
            constructor(input: GetCommentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCommentCommandInput, GetCommentCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentReactionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetCommentReactionsInput, GetCommentReactionsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetCommentReactionsCommandInput extends GetCommentReactionsInput {
    }
    export interface GetCommentReactionsCommandOutput extends GetCommentReactionsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetCommentReactionsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetCommentReactionsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetCommentReactionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCommentReactionsCommandInput} for command's `input` shape.
        * @see {@link GetCommentReactionsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetCommentReactionsCommand extends $Command<GetCommentReactionsCommandInput, GetCommentReactionsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetCommentReactionsCommandInput;
            constructor(input: GetCommentReactionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCommentReactionsCommandInput, GetCommentReactionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentsForComparedCommitCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetCommentsForComparedCommitInput, GetCommentsForComparedCommitOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetCommentsForComparedCommitCommandInput extends GetCommentsForComparedCommitInput {
    }
    export interface GetCommentsForComparedCommitCommandOutput extends GetCommentsForComparedCommitOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about comments made on the comparison between two commits.</p>
        *         <note>
        *             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
        *             reactions from active identities, use GetCommentReactions.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetCommentsForComparedCommitCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetCommentsForComparedCommitCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetCommentsForComparedCommitCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCommentsForComparedCommitCommandInput} for command's `input` shape.
        * @see {@link GetCommentsForComparedCommitCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetCommentsForComparedCommitCommand extends $Command<GetCommentsForComparedCommitCommandInput, GetCommentsForComparedCommitCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetCommentsForComparedCommitCommandInput;
            constructor(input: GetCommentsForComparedCommitCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCommentsForComparedCommitCommandInput, GetCommentsForComparedCommitCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommentsForPullRequestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetCommentsForPullRequestInput, GetCommentsForPullRequestOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetCommentsForPullRequestCommandInput extends GetCommentsForPullRequestInput {
    }
    export interface GetCommentsForPullRequestCommandOutput extends GetCommentsForPullRequestOutput, __MetadataBearer {
    }
    /**
        * <p>Returns comments made on a pull request.</p>
        *         <note>
        *             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
        *             reactions from active identities, use GetCommentReactions.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetCommentsForPullRequestCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetCommentsForPullRequestCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetCommentsForPullRequestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCommentsForPullRequestCommandInput} for command's `input` shape.
        * @see {@link GetCommentsForPullRequestCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetCommentsForPullRequestCommand extends $Command<GetCommentsForPullRequestCommandInput, GetCommentsForPullRequestCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetCommentsForPullRequestCommandInput;
            constructor(input: GetCommentsForPullRequestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCommentsForPullRequestCommandInput, GetCommentsForPullRequestCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetCommitCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetCommitInput, GetCommitOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetCommitCommandInput extends GetCommitInput {
    }
    export interface GetCommitCommandOutput extends GetCommitOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a commit, including commit message and committer information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetCommitCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetCommitCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetCommitCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCommitCommandInput} for command's `input` shape.
        * @see {@link GetCommitCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetCommitCommand extends $Command<GetCommitCommandInput, GetCommitCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetCommitCommandInput;
            constructor(input: GetCommitCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCommitCommandInput, GetCommitCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetDifferencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetDifferencesInput, GetDifferencesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetDifferencesCommandInput extends GetDifferencesInput {
    }
    export interface GetDifferencesCommandOutput extends GetDifferencesOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about the differences in a valid commit specifier (such as a
        *             branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be
        *             limited to a specified path.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetDifferencesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetDifferencesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetDifferencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDifferencesCommandInput} for command's `input` shape.
        * @see {@link GetDifferencesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetDifferencesCommand extends $Command<GetDifferencesCommandInput, GetDifferencesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetDifferencesCommandInput;
            constructor(input: GetDifferencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDifferencesCommandInput, GetDifferencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetFileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetFileInput, GetFileOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetFileCommandInput extends GetFileInput {
    }
    export interface GetFileCommandOutput extends GetFileOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the base-64 encoded contents of a specified file and its metadata.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetFileCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetFileCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetFileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFileCommandInput} for command's `input` shape.
        * @see {@link GetFileCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetFileCommand extends $Command<GetFileCommandInput, GetFileCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetFileCommandInput;
            constructor(input: GetFileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFileCommandInput, GetFileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetFolderInput, GetFolderOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetFolderCommandInput extends GetFolderInput {
    }
    export interface GetFolderCommandOutput extends GetFolderOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the contents of a specified folder in a repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetFolderCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetFolderCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFolderCommandInput} for command's `input` shape.
        * @see {@link GetFolderCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetFolderCommand extends $Command<GetFolderCommandInput, GetFolderCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetFolderCommandInput;
            constructor(input: GetFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFolderCommandInput, GetFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeCommitCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetMergeCommitInput, GetMergeCommitOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetMergeCommitCommandInput extends GetMergeCommitInput {
    }
    export interface GetMergeCommitCommandOutput extends GetMergeCommitOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specified merge commit.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetMergeCommitCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetMergeCommitCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetMergeCommitCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMergeCommitCommandInput} for command's `input` shape.
        * @see {@link GetMergeCommitCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetMergeCommitCommand extends $Command<GetMergeCommitCommandInput, GetMergeCommitCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetMergeCommitCommandInput;
            constructor(input: GetMergeCommitCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMergeCommitCommandInput, GetMergeCommitCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeConflictsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetMergeConflictsInput, GetMergeConflictsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetMergeConflictsCommandInput extends GetMergeConflictsInput {
    }
    export interface GetMergeConflictsCommandOutput extends GetMergeConflictsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetMergeConflictsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetMergeConflictsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetMergeConflictsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMergeConflictsCommandInput} for command's `input` shape.
        * @see {@link GetMergeConflictsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetMergeConflictsCommand extends $Command<GetMergeConflictsCommandInput, GetMergeConflictsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetMergeConflictsCommandInput;
            constructor(input: GetMergeConflictsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMergeConflictsCommandInput, GetMergeConflictsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetMergeOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetMergeOptionsInput, GetMergeOptionsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetMergeOptionsCommandInput extends GetMergeOptionsInput {
    }
    export interface GetMergeOptionsCommandOutput extends GetMergeOptionsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about the merge options available for merging two specified
        *             branches. For details about why a merge option is not available, use GetMergeConflicts
        *             or DescribeMergeConflicts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetMergeOptionsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetMergeOptionsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetMergeOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMergeOptionsCommandInput} for command's `input` shape.
        * @see {@link GetMergeOptionsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetMergeOptionsCommand extends $Command<GetMergeOptionsCommandInput, GetMergeOptionsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetMergeOptionsCommandInput;
            constructor(input: GetMergeOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMergeOptionsCommandInput, GetMergeOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestApprovalStatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetPullRequestApprovalStatesInput, GetPullRequestApprovalStatesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetPullRequestApprovalStatesCommandInput extends GetPullRequestApprovalStatesInput {
    }
    export interface GetPullRequestApprovalStatesCommandOutput extends GetPullRequestApprovalStatesOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more
        *         approval rules applied to them.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetPullRequestApprovalStatesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetPullRequestApprovalStatesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetPullRequestApprovalStatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPullRequestApprovalStatesCommandInput} for command's `input` shape.
        * @see {@link GetPullRequestApprovalStatesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetPullRequestApprovalStatesCommand extends $Command<GetPullRequestApprovalStatesCommandInput, GetPullRequestApprovalStatesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetPullRequestApprovalStatesCommandInput;
            constructor(input: GetPullRequestApprovalStatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPullRequestApprovalStatesCommandInput, GetPullRequestApprovalStatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetPullRequestInput, GetPullRequestOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetPullRequestCommandInput extends GetPullRequestInput {
    }
    export interface GetPullRequestCommandOutput extends GetPullRequestOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about a pull request in a specified repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetPullRequestCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetPullRequestCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetPullRequestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPullRequestCommandInput} for command's `input` shape.
        * @see {@link GetPullRequestCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetPullRequestCommand extends $Command<GetPullRequestCommandInput, GetPullRequestCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetPullRequestCommandInput;
            constructor(input: GetPullRequestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPullRequestCommandInput, GetPullRequestCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetPullRequestOverrideStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetPullRequestOverrideStateInput, GetPullRequestOverrideStateOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetPullRequestOverrideStateCommandInput extends GetPullRequestOverrideStateInput {
    }
    export interface GetPullRequestOverrideStateCommandOutput extends GetPullRequestOverrideStateOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about whether approval rules have been set aside (overridden) for a
        *             pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetPullRequestOverrideStateCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetPullRequestOverrideStateCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetPullRequestOverrideStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPullRequestOverrideStateCommandInput} for command's `input` shape.
        * @see {@link GetPullRequestOverrideStateCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetPullRequestOverrideStateCommand extends $Command<GetPullRequestOverrideStateCommandInput, GetPullRequestOverrideStateCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetPullRequestOverrideStateCommandInput;
            constructor(input: GetPullRequestOverrideStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPullRequestOverrideStateCommandInput, GetPullRequestOverrideStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetRepositoryInput, GetRepositoryOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetRepositoryCommandInput extends GetRepositoryInput {
    }
    export interface GetRepositoryCommandOutput extends GetRepositoryOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a repository.</p>
        *
        *         <note>
        *             <p>The description field for a repository accepts all HTML characters and all valid
        *                 Unicode characters. Applications that do not HTML-encode the description and display
        *                 it in a webpage can expose users to potentially malicious code. Make sure that you
        *                 HTML-encode the description field in any application that uses this API to display
        *                 the repository description on a webpage.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetRepositoryCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetRepositoryCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRepositoryCommandInput} for command's `input` shape.
        * @see {@link GetRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetRepositoryCommand extends $Command<GetRepositoryCommandInput, GetRepositoryCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetRepositoryCommandInput;
            constructor(input: GetRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRepositoryCommandInput, GetRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/GetRepositoryTriggersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { GetRepositoryTriggersInput, GetRepositoryTriggersOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface GetRepositoryTriggersCommandInput extends GetRepositoryTriggersInput {
    }
    export interface GetRepositoryTriggersCommandOutput extends GetRepositoryTriggersOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about triggers configured for a repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, GetRepositoryTriggersCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, GetRepositoryTriggersCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new GetRepositoryTriggersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRepositoryTriggersCommandInput} for command's `input` shape.
        * @see {@link GetRepositoryTriggersCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class GetRepositoryTriggersCommand extends $Command<GetRepositoryTriggersCommandInput, GetRepositoryTriggersCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: GetRepositoryTriggersCommandInput;
            constructor(input: GetRepositoryTriggersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRepositoryTriggersCommandInput, GetRepositoryTriggersCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListApprovalRuleTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { ListApprovalRuleTemplatesInput, ListApprovalRuleTemplatesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface ListApprovalRuleTemplatesCommandInput extends ListApprovalRuleTemplatesInput {
    }
    export interface ListApprovalRuleTemplatesCommandOutput extends ListApprovalRuleTemplatesOutput, __MetadataBearer {
    }
    /**
        * <p>Lists all approval rule templates in the specified AWS Region in your AWS account. If
        *             an AWS Region is not specified, the AWS Region where you are signed in is used.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, ListApprovalRuleTemplatesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, ListApprovalRuleTemplatesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new ListApprovalRuleTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListApprovalRuleTemplatesCommandInput} for command's `input` shape.
        * @see {@link ListApprovalRuleTemplatesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class ListApprovalRuleTemplatesCommand extends $Command<ListApprovalRuleTemplatesCommandInput, ListApprovalRuleTemplatesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: ListApprovalRuleTemplatesCommandInput;
            constructor(input: ListApprovalRuleTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListApprovalRuleTemplatesCommandInput, ListApprovalRuleTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListAssociatedApprovalRuleTemplatesForRepositoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { ListAssociatedApprovalRuleTemplatesForRepositoryInput, ListAssociatedApprovalRuleTemplatesForRepositoryOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput extends ListAssociatedApprovalRuleTemplatesForRepositoryInput {
    }
    export interface ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput extends ListAssociatedApprovalRuleTemplatesForRepositoryOutput, __MetadataBearer {
    }
    /**
        * <p>Lists all approval rule templates that are associated with a specified repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, ListAssociatedApprovalRuleTemplatesForRepositoryCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, ListAssociatedApprovalRuleTemplatesForRepositoryCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new ListAssociatedApprovalRuleTemplatesForRepositoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput} for command's `input` shape.
        * @see {@link ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class ListAssociatedApprovalRuleTemplatesForRepositoryCommand extends $Command<ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput, ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput;
            constructor(input: ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssociatedApprovalRuleTemplatesForRepositoryCommandInput, ListAssociatedApprovalRuleTemplatesForRepositoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListBranchesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { ListBranchesInput, ListBranchesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface ListBranchesCommandInput extends ListBranchesInput {
    }
    export interface ListBranchesCommandOutput extends ListBranchesOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more branches in a repository.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, ListBranchesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, ListBranchesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new ListBranchesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListBranchesCommandInput} for command's `input` shape.
        * @see {@link ListBranchesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class ListBranchesCommand extends $Command<ListBranchesCommandInput, ListBranchesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: ListBranchesCommandInput;
            constructor(input: ListBranchesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListBranchesCommandInput, ListBranchesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListPullRequestsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { ListPullRequestsInput, ListPullRequestsOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export interface ListPullRequestsCommandInput extends ListPullRequestsInput {
    }
    export interface ListPullRequestsCommandOutput extends ListPullRequestsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of pull requests for a specified repository. The return list can be refined by pull request
        *         status or pull request author ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, ListPullRequestsCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, ListPullRequestsCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new ListPullRequestsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPullRequestsCommandInput} for command's `input` shape.
        * @see {@link ListPullRequestsCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class ListPullRequestsCommand extends $Command<ListPullRequestsCommandInput, ListPullRequestsCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: ListPullRequestsCommandInput;
            constructor(input: ListPullRequestsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPullRequestsCommandInput, ListPullRequestsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListRepositoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { ListRepositoriesInput, ListRepositoriesOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface ListRepositoriesCommandInput extends ListRepositoriesInput {
    }
    export interface ListRepositoriesCommandOutput extends ListRepositoriesOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more repositories.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, ListRepositoriesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, ListRepositoriesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new ListRepositoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRepositoriesCommandInput} for command's `input` shape.
        * @see {@link ListRepositoriesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class ListRepositoriesCommand extends $Command<ListRepositoriesCommandInput, ListRepositoriesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: ListRepositoriesCommandInput;
            constructor(input: ListRepositoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRepositoriesCommandInput, ListRepositoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListRepositoriesForApprovalRuleTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { ListRepositoriesForApprovalRuleTemplateInput, ListRepositoriesForApprovalRuleTemplateOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface ListRepositoriesForApprovalRuleTemplateCommandInput extends ListRepositoriesForApprovalRuleTemplateInput {
    }
    export interface ListRepositoriesForApprovalRuleTemplateCommandOutput extends ListRepositoriesForApprovalRuleTemplateOutput, __MetadataBearer {
    }
    /**
        * <p>Lists all repositories associated with the specified approval rule template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, ListRepositoriesForApprovalRuleTemplateCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, ListRepositoriesForApprovalRuleTemplateCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new ListRepositoriesForApprovalRuleTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRepositoriesForApprovalRuleTemplateCommandInput} for command's `input` shape.
        * @see {@link ListRepositoriesForApprovalRuleTemplateCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class ListRepositoriesForApprovalRuleTemplateCommand extends $Command<ListRepositoriesForApprovalRuleTemplateCommandInput, ListRepositoriesForApprovalRuleTemplateCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: ListRepositoriesForApprovalRuleTemplateCommandInput;
            constructor(input: ListRepositoriesForApprovalRuleTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRepositoriesForApprovalRuleTemplateCommandInput, ListRepositoriesForApprovalRuleTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { ListTagsForResourceInput, ListTagsForResourceOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceInput {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS
        *             CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User
        *                 Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, ListTagsForResourceCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, ListTagsForResourceCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesByFastForwardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { MergeBranchesByFastForwardInput, MergeBranchesByFastForwardOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface MergeBranchesByFastForwardCommandInput extends MergeBranchesByFastForwardInput {
    }
    export interface MergeBranchesByFastForwardCommandOutput extends MergeBranchesByFastForwardOutput, __MetadataBearer {
    }
    /**
        * <p>Merges two branches using the fast-forward merge strategy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, MergeBranchesByFastForwardCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, MergeBranchesByFastForwardCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new MergeBranchesByFastForwardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MergeBranchesByFastForwardCommandInput} for command's `input` shape.
        * @see {@link MergeBranchesByFastForwardCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class MergeBranchesByFastForwardCommand extends $Command<MergeBranchesByFastForwardCommandInput, MergeBranchesByFastForwardCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: MergeBranchesByFastForwardCommandInput;
            constructor(input: MergeBranchesByFastForwardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MergeBranchesByFastForwardCommandInput, MergeBranchesByFastForwardCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesBySquashCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { MergeBranchesBySquashInput, MergeBranchesBySquashOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface MergeBranchesBySquashCommandInput extends MergeBranchesBySquashInput {
    }
    export interface MergeBranchesBySquashCommandOutput extends MergeBranchesBySquashOutput, __MetadataBearer {
    }
    /**
        * <p>Merges two branches using the squash merge strategy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, MergeBranchesBySquashCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, MergeBranchesBySquashCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new MergeBranchesBySquashCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MergeBranchesBySquashCommandInput} for command's `input` shape.
        * @see {@link MergeBranchesBySquashCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class MergeBranchesBySquashCommand extends $Command<MergeBranchesBySquashCommandInput, MergeBranchesBySquashCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: MergeBranchesBySquashCommandInput;
            constructor(input: MergeBranchesBySquashCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MergeBranchesBySquashCommandInput, MergeBranchesBySquashCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergeBranchesByThreeWayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { MergeBranchesByThreeWayInput, MergeBranchesByThreeWayOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface MergeBranchesByThreeWayCommandInput extends MergeBranchesByThreeWayInput {
    }
    export interface MergeBranchesByThreeWayCommandOutput extends MergeBranchesByThreeWayOutput, __MetadataBearer {
    }
    /**
        * <p>Merges two specified branches using the three-way merge strategy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, MergeBranchesByThreeWayCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, MergeBranchesByThreeWayCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new MergeBranchesByThreeWayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MergeBranchesByThreeWayCommandInput} for command's `input` shape.
        * @see {@link MergeBranchesByThreeWayCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class MergeBranchesByThreeWayCommand extends $Command<MergeBranchesByThreeWayCommandInput, MergeBranchesByThreeWayCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: MergeBranchesByThreeWayCommandInput;
            constructor(input: MergeBranchesByThreeWayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MergeBranchesByThreeWayCommandInput, MergeBranchesByThreeWayCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestByFastForwardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { MergePullRequestByFastForwardInput, MergePullRequestByFastForwardOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface MergePullRequestByFastForwardCommandInput extends MergePullRequestByFastForwardInput {
    }
    export interface MergePullRequestByFastForwardCommandOutput extends MergePullRequestByFastForwardOutput, __MetadataBearer {
    }
    /**
        * <p>Attempts to merge the source commit of a pull request into the specified destination
        *             branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, MergePullRequestByFastForwardCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, MergePullRequestByFastForwardCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new MergePullRequestByFastForwardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MergePullRequestByFastForwardCommandInput} for command's `input` shape.
        * @see {@link MergePullRequestByFastForwardCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class MergePullRequestByFastForwardCommand extends $Command<MergePullRequestByFastForwardCommandInput, MergePullRequestByFastForwardCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: MergePullRequestByFastForwardCommandInput;
            constructor(input: MergePullRequestByFastForwardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MergePullRequestByFastForwardCommandInput, MergePullRequestByFastForwardCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestBySquashCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { MergePullRequestBySquashInput, MergePullRequestBySquashOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface MergePullRequestBySquashCommandInput extends MergePullRequestBySquashInput {
    }
    export interface MergePullRequestBySquashCommandOutput extends MergePullRequestBySquashOutput, __MetadataBearer {
    }
    /**
        * <p>Attempts to merge the source commit of a pull request into the specified destination
        *             branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, MergePullRequestBySquashCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, MergePullRequestBySquashCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new MergePullRequestBySquashCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MergePullRequestBySquashCommandInput} for command's `input` shape.
        * @see {@link MergePullRequestBySquashCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class MergePullRequestBySquashCommand extends $Command<MergePullRequestBySquashCommandInput, MergePullRequestBySquashCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: MergePullRequestBySquashCommandInput;
            constructor(input: MergePullRequestBySquashCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MergePullRequestBySquashCommandInput, MergePullRequestBySquashCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/MergePullRequestByThreeWayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { MergePullRequestByThreeWayInput, MergePullRequestByThreeWayOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface MergePullRequestByThreeWayCommandInput extends MergePullRequestByThreeWayInput {
    }
    export interface MergePullRequestByThreeWayCommandOutput extends MergePullRequestByThreeWayOutput, __MetadataBearer {
    }
    /**
        * <p>Attempts to merge the source commit of a pull request into the specified destination
        *             branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, MergePullRequestByThreeWayCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, MergePullRequestByThreeWayCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new MergePullRequestByThreeWayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MergePullRequestByThreeWayCommandInput} for command's `input` shape.
        * @see {@link MergePullRequestByThreeWayCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class MergePullRequestByThreeWayCommand extends $Command<MergePullRequestByThreeWayCommandInput, MergePullRequestByThreeWayCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: MergePullRequestByThreeWayCommandInput;
            constructor(input: MergePullRequestByThreeWayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MergePullRequestByThreeWayCommandInput, MergePullRequestByThreeWayCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/OverridePullRequestApprovalRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { OverridePullRequestApprovalRulesInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface OverridePullRequestApprovalRulesCommandInput extends OverridePullRequestApprovalRulesInput {
    }
    export interface OverridePullRequestApprovalRulesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets aside (overrides) all approval rule requirements for a specified pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, OverridePullRequestApprovalRulesCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, OverridePullRequestApprovalRulesCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new OverridePullRequestApprovalRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link OverridePullRequestApprovalRulesCommandInput} for command's `input` shape.
        * @see {@link OverridePullRequestApprovalRulesCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class OverridePullRequestApprovalRulesCommand extends $Command<OverridePullRequestApprovalRulesCommandInput, OverridePullRequestApprovalRulesCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: OverridePullRequestApprovalRulesCommandInput;
            constructor(input: OverridePullRequestApprovalRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<OverridePullRequestApprovalRulesCommandInput, OverridePullRequestApprovalRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentForComparedCommitCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { PostCommentForComparedCommitInput, PostCommentForComparedCommitOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface PostCommentForComparedCommitCommandInput extends PostCommentForComparedCommitInput {
    }
    export interface PostCommentForComparedCommitCommandOutput extends PostCommentForComparedCommitOutput, __MetadataBearer {
    }
    /**
        * <p>Posts a comment on the comparison between two commits.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, PostCommentForComparedCommitCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, PostCommentForComparedCommitCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new PostCommentForComparedCommitCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PostCommentForComparedCommitCommandInput} for command's `input` shape.
        * @see {@link PostCommentForComparedCommitCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class PostCommentForComparedCommitCommand extends $Command<PostCommentForComparedCommitCommandInput, PostCommentForComparedCommitCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: PostCommentForComparedCommitCommandInput;
            constructor(input: PostCommentForComparedCommitCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PostCommentForComparedCommitCommandInput, PostCommentForComparedCommitCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentForPullRequestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { PostCommentForPullRequestInput, PostCommentForPullRequestOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface PostCommentForPullRequestCommandInput extends PostCommentForPullRequestInput {
    }
    export interface PostCommentForPullRequestCommandOutput extends PostCommentForPullRequestOutput, __MetadataBearer {
    }
    /**
        * <p>Posts a comment on a pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, PostCommentForPullRequestCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, PostCommentForPullRequestCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new PostCommentForPullRequestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PostCommentForPullRequestCommandInput} for command's `input` shape.
        * @see {@link PostCommentForPullRequestCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class PostCommentForPullRequestCommand extends $Command<PostCommentForPullRequestCommandInput, PostCommentForPullRequestCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: PostCommentForPullRequestCommandInput;
            constructor(input: PostCommentForPullRequestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PostCommentForPullRequestCommandInput, PostCommentForPullRequestCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PostCommentReplyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { PostCommentReplyInput, PostCommentReplyOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface PostCommentReplyCommandInput extends PostCommentReplyInput {
    }
    export interface PostCommentReplyCommandOutput extends PostCommentReplyOutput, __MetadataBearer {
    }
    /**
        * <p>Posts a comment in reply to an existing comment on a comparison between commits or a pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, PostCommentReplyCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, PostCommentReplyCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new PostCommentReplyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PostCommentReplyCommandInput} for command's `input` shape.
        * @see {@link PostCommentReplyCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class PostCommentReplyCommand extends $Command<PostCommentReplyCommandInput, PostCommentReplyCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: PostCommentReplyCommandInput;
            constructor(input: PostCommentReplyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PostCommentReplyCommandInput, PostCommentReplyCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutCommentReactionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { PutCommentReactionInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface PutCommentReactionCommandInput extends PutCommentReactionInput {
    }
    export interface PutCommentReactionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or
        *         update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, PutCommentReactionCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, PutCommentReactionCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new PutCommentReactionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutCommentReactionCommandInput} for command's `input` shape.
        * @see {@link PutCommentReactionCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class PutCommentReactionCommand extends $Command<PutCommentReactionCommandInput, PutCommentReactionCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: PutCommentReactionCommandInput;
            constructor(input: PutCommentReactionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutCommentReactionCommandInput, PutCommentReactionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutFileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { PutFileInput, PutFileOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface PutFileCommandInput extends PutFileInput {
    }
    export interface PutFileCommandOutput extends PutFileOutput, __MetadataBearer {
    }
    /**
        * <p>Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, PutFileCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, PutFileCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new PutFileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutFileCommandInput} for command's `input` shape.
        * @see {@link PutFileCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class PutFileCommand extends $Command<PutFileCommandInput, PutFileCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: PutFileCommandInput;
            constructor(input: PutFileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutFileCommandInput, PutFileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/PutRepositoryTriggersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { PutRepositoryTriggersInput, PutRepositoryTriggersOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface PutRepositoryTriggersCommandInput extends PutRepositoryTriggersInput {
    }
    export interface PutRepositoryTriggersCommandOutput extends PutRepositoryTriggersOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces all triggers for a repository. Used to create or delete triggers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, PutRepositoryTriggersCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, PutRepositoryTriggersCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new PutRepositoryTriggersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRepositoryTriggersCommandInput} for command's `input` shape.
        * @see {@link PutRepositoryTriggersCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class PutRepositoryTriggersCommand extends $Command<PutRepositoryTriggersCommandInput, PutRepositoryTriggersCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: PutRepositoryTriggersCommandInput;
            constructor(input: PutRepositoryTriggersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRepositoryTriggersCommandInput, PutRepositoryTriggersCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { TagResourceInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface TagResourceCommandInput extends TagResourceInput {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources
        *             in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
        *                 Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, TagResourceCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, TagResourceCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/TestRepositoryTriggersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { TestRepositoryTriggersInput, TestRepositoryTriggersOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface TestRepositoryTriggersCommandInput extends TestRepositoryTriggersInput {
    }
    export interface TestRepositoryTriggersCommandOutput extends TestRepositoryTriggersOutput, __MetadataBearer {
    }
    /**
        * <p>Tests the functionality of repository triggers by sending information to the trigger
        *             target. If real data is available in the repository, the test sends data from the last
        *             commit. If no data is available, sample data is generated.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, TestRepositoryTriggersCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, TestRepositoryTriggersCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new TestRepositoryTriggersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestRepositoryTriggersCommandInput} for command's `input` shape.
        * @see {@link TestRepositoryTriggersCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class TestRepositoryTriggersCommand extends $Command<TestRepositoryTriggersCommandInput, TestRepositoryTriggersCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: TestRepositoryTriggersCommandInput;
            constructor(input: TestRepositoryTriggersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestRepositoryTriggersCommandInput, TestRepositoryTriggersCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UntagResourceInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UntagResourceCommandInput extends UntagResourceInput {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS
        *             CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
        *                 Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UntagResourceCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UntagResourceCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdateApprovalRuleTemplateContentInput, UpdateApprovalRuleTemplateContentOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdateApprovalRuleTemplateContentCommandInput extends UpdateApprovalRuleTemplateContentInput {
    }
    export interface UpdateApprovalRuleTemplateContentCommandOutput extends UpdateApprovalRuleTemplateContentOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the content of an approval rule template. You can change the number of
        *             required approvals, the membership of the approval rule, and whether an approval pool is
        *             defined.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdateApprovalRuleTemplateContentCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdateApprovalRuleTemplateContentCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdateApprovalRuleTemplateContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApprovalRuleTemplateContentCommandInput} for command's `input` shape.
        * @see {@link UpdateApprovalRuleTemplateContentCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdateApprovalRuleTemplateContentCommand extends $Command<UpdateApprovalRuleTemplateContentCommandInput, UpdateApprovalRuleTemplateContentCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdateApprovalRuleTemplateContentCommandInput;
            constructor(input: UpdateApprovalRuleTemplateContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApprovalRuleTemplateContentCommandInput, UpdateApprovalRuleTemplateContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateDescriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdateApprovalRuleTemplateDescriptionInput, UpdateApprovalRuleTemplateDescriptionOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdateApprovalRuleTemplateDescriptionCommandInput extends UpdateApprovalRuleTemplateDescriptionInput {
    }
    export interface UpdateApprovalRuleTemplateDescriptionCommandOutput extends UpdateApprovalRuleTemplateDescriptionOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the description for a specified approval rule template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdateApprovalRuleTemplateDescriptionCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdateApprovalRuleTemplateDescriptionCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdateApprovalRuleTemplateDescriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApprovalRuleTemplateDescriptionCommandInput} for command's `input` shape.
        * @see {@link UpdateApprovalRuleTemplateDescriptionCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdateApprovalRuleTemplateDescriptionCommand extends $Command<UpdateApprovalRuleTemplateDescriptionCommandInput, UpdateApprovalRuleTemplateDescriptionCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdateApprovalRuleTemplateDescriptionCommandInput;
            constructor(input: UpdateApprovalRuleTemplateDescriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApprovalRuleTemplateDescriptionCommandInput, UpdateApprovalRuleTemplateDescriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateApprovalRuleTemplateNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdateApprovalRuleTemplateNameInput, UpdateApprovalRuleTemplateNameOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdateApprovalRuleTemplateNameCommandInput extends UpdateApprovalRuleTemplateNameInput {
    }
    export interface UpdateApprovalRuleTemplateNameCommandOutput extends UpdateApprovalRuleTemplateNameOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the name of a specified approval rule template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdateApprovalRuleTemplateNameCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdateApprovalRuleTemplateNameCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdateApprovalRuleTemplateNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApprovalRuleTemplateNameCommandInput} for command's `input` shape.
        * @see {@link UpdateApprovalRuleTemplateNameCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdateApprovalRuleTemplateNameCommand extends $Command<UpdateApprovalRuleTemplateNameCommandInput, UpdateApprovalRuleTemplateNameCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdateApprovalRuleTemplateNameCommandInput;
            constructor(input: UpdateApprovalRuleTemplateNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApprovalRuleTemplateNameCommandInput, UpdateApprovalRuleTemplateNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateCommentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdateCommentInput, UpdateCommentOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdateCommentCommandInput extends UpdateCommentInput {
    }
    export interface UpdateCommentCommandOutput extends UpdateCommentOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces the contents of a comment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdateCommentCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdateCommentCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdateCommentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCommentCommandInput} for command's `input` shape.
        * @see {@link UpdateCommentCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdateCommentCommand extends $Command<UpdateCommentCommandInput, UpdateCommentCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdateCommentCommandInput;
            constructor(input: UpdateCommentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCommentCommandInput, UpdateCommentCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateDefaultBranchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdateDefaultBranchInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdateDefaultBranchCommandInput extends UpdateDefaultBranchInput {
    }
    export interface UpdateDefaultBranchCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets or changes the default branch name for the specified repository.</p>
        *         <note>
        *             <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdateDefaultBranchCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdateDefaultBranchCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdateDefaultBranchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDefaultBranchCommandInput} for command's `input` shape.
        * @see {@link UpdateDefaultBranchCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdateDefaultBranchCommand extends $Command<UpdateDefaultBranchCommandInput, UpdateDefaultBranchCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdateDefaultBranchCommandInput;
            constructor(input: UpdateDefaultBranchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDefaultBranchCommandInput, UpdateDefaultBranchCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestApprovalRuleContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdatePullRequestApprovalRuleContentInput, UpdatePullRequestApprovalRuleContentOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdatePullRequestApprovalRuleContentCommandInput extends UpdatePullRequestApprovalRuleContentInput {
    }
    export interface UpdatePullRequestApprovalRuleContentCommandOutput extends UpdatePullRequestApprovalRuleContentOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and
        *             the approval pool for approvers. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdatePullRequestApprovalRuleContentCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdatePullRequestApprovalRuleContentCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdatePullRequestApprovalRuleContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePullRequestApprovalRuleContentCommandInput} for command's `input` shape.
        * @see {@link UpdatePullRequestApprovalRuleContentCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdatePullRequestApprovalRuleContentCommand extends $Command<UpdatePullRequestApprovalRuleContentCommandInput, UpdatePullRequestApprovalRuleContentCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdatePullRequestApprovalRuleContentCommandInput;
            constructor(input: UpdatePullRequestApprovalRuleContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePullRequestApprovalRuleContentCommandInput, UpdatePullRequestApprovalRuleContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestApprovalStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdatePullRequestApprovalStateInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdatePullRequestApprovalStateCommandInput extends UpdatePullRequestApprovalStateInput {
    }
    export interface UpdatePullRequestApprovalStateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdatePullRequestApprovalStateCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdatePullRequestApprovalStateCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdatePullRequestApprovalStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePullRequestApprovalStateCommandInput} for command's `input` shape.
        * @see {@link UpdatePullRequestApprovalStateCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdatePullRequestApprovalStateCommand extends $Command<UpdatePullRequestApprovalStateCommandInput, UpdatePullRequestApprovalStateCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdatePullRequestApprovalStateCommandInput;
            constructor(input: UpdatePullRequestApprovalStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePullRequestApprovalStateCommandInput, UpdatePullRequestApprovalStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestDescriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdatePullRequestDescriptionInput, UpdatePullRequestDescriptionOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdatePullRequestDescriptionCommandInput extends UpdatePullRequestDescriptionInput {
    }
    export interface UpdatePullRequestDescriptionCommandOutput extends UpdatePullRequestDescriptionOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces the contents of the description of a pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdatePullRequestDescriptionCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdatePullRequestDescriptionCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdatePullRequestDescriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePullRequestDescriptionCommandInput} for command's `input` shape.
        * @see {@link UpdatePullRequestDescriptionCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdatePullRequestDescriptionCommand extends $Command<UpdatePullRequestDescriptionCommandInput, UpdatePullRequestDescriptionCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdatePullRequestDescriptionCommandInput;
            constructor(input: UpdatePullRequestDescriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePullRequestDescriptionCommandInput, UpdatePullRequestDescriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdatePullRequestStatusInput, UpdatePullRequestStatusOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdatePullRequestStatusCommandInput extends UpdatePullRequestStatusInput {
    }
    export interface UpdatePullRequestStatusCommandOutput extends UpdatePullRequestStatusOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the status of a pull request. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdatePullRequestStatusCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdatePullRequestStatusCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdatePullRequestStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePullRequestStatusCommandInput} for command's `input` shape.
        * @see {@link UpdatePullRequestStatusCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdatePullRequestStatusCommand extends $Command<UpdatePullRequestStatusCommandInput, UpdatePullRequestStatusCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdatePullRequestStatusCommandInput;
            constructor(input: UpdatePullRequestStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePullRequestStatusCommandInput, UpdatePullRequestStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdatePullRequestTitleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdatePullRequestTitleInput, UpdatePullRequestTitleOutput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdatePullRequestTitleCommandInput extends UpdatePullRequestTitleInput {
    }
    export interface UpdatePullRequestTitleCommandOutput extends UpdatePullRequestTitleOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces the title of a pull request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdatePullRequestTitleCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdatePullRequestTitleCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdatePullRequestTitleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePullRequestTitleCommandInput} for command's `input` shape.
        * @see {@link UpdatePullRequestTitleCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdatePullRequestTitleCommand extends $Command<UpdatePullRequestTitleCommandInput, UpdatePullRequestTitleCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdatePullRequestTitleCommandInput;
            constructor(input: UpdatePullRequestTitleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePullRequestTitleCommandInput, UpdatePullRequestTitleCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateRepositoryDescriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdateRepositoryDescriptionInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdateRepositoryDescriptionCommandInput extends UpdateRepositoryDescriptionInput {
    }
    export interface UpdateRepositoryDescriptionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets or changes the comment or description for a repository.</p>
        *         <note>
        *             <p>The description field for a repository accepts all HTML characters and all valid
        *                 Unicode characters. Applications that do not HTML-encode the description and display
        *                 it in a webpage can expose users to potentially malicious code. Make sure that you
        *                 HTML-encode the description field in any application that uses this API to display
        *                 the repository description on a webpage.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdateRepositoryDescriptionCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdateRepositoryDescriptionCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdateRepositoryDescriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRepositoryDescriptionCommandInput} for command's `input` shape.
        * @see {@link UpdateRepositoryDescriptionCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdateRepositoryDescriptionCommand extends $Command<UpdateRepositoryDescriptionCommandInput, UpdateRepositoryDescriptionCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdateRepositoryDescriptionCommandInput;
            constructor(input: UpdateRepositoryDescriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRepositoryDescriptionCommandInput, UpdateRepositoryDescriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/commands/UpdateRepositoryNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeCommitClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/CodeCommitClient";
    import { UpdateRepositoryNameInput } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1";
    export interface UpdateRepositoryNameCommandInput extends UpdateRepositoryNameInput {
    }
    export interface UpdateRepositoryNameCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Renames a repository. The repository name must be unique across the calling AWS
        *             account. Repository names are limited to 100 alphanumeric, dash, and underscore
        *             characters, and cannot include certain characters. The suffix .git is prohibited. For
        *             more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit
        *             User Guide.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeCommitClient, UpdateRepositoryNameCommand } from "@aws-sdk/client-codecommit"; // ES Modules import
        * // const { CodeCommitClient, UpdateRepositoryNameCommand } = require("@aws-sdk/client-codecommit"); // CommonJS import
        * const client = new CodeCommitClient(config);
        * const command = new UpdateRepositoryNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRepositoryNameCommandInput} for command's `input` shape.
        * @see {@link UpdateRepositoryNameCommandOutput} for command's `response` shape.
        * @see {@link CodeCommitClientResolvedConfig | config} for CodeCommitClient's `config` shape.
        *
        */
    export class UpdateRepositoryNameCommand extends $Command<UpdateRepositoryNameCommandInput, UpdateRepositoryNameCommandOutput, CodeCommitClientResolvedConfig> {
            readonly input: UpdateRepositoryNameCommandInput;
            constructor(input: UpdateRepositoryNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeCommitClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRepositoryNameCommandInput, UpdateRepositoryNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CodeCommitServiceException as __BaseException } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/CodeCommitServiceException";
    /**
        * <p>The specified Amazon Resource Name (ARN) does not exist in the AWS account.</p>
        */
    export class ActorDoesNotExistException extends __BaseException {
            readonly name: "ActorDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ActorDoesNotExistException, __BaseException>);
    }
    export enum ApprovalState {
            APPROVE = "APPROVE",
            REVOKE = "REVOKE"
    }
    /**
        * <p>Returns information about a specific approval on a pull request.</p>
        */
    export interface Approval {
            /**
                * <p>The Amazon Resource Name (ARN) of the user.</p>
                */
            userArn?: string;
            /**
                * <p>The state of the approval, APPROVE or REVOKE. REVOKE states are not stored.</p>
                */
            approvalState?: ApprovalState | string;
    }
    export namespace Approval {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Approval) => any;
    }
    /**
        * <p>Returns information about the template that created the approval rule for a pull request.</p>
        */
    export interface OriginApprovalRuleTemplate {
            /**
                * <p>The ID of the template that created the approval rule.</p>
                */
            approvalRuleTemplateId?: string;
            /**
                * <p>The name of the template that created the approval rule.</p>
                */
            approvalRuleTemplateName?: string;
    }
    export namespace OriginApprovalRuleTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OriginApprovalRuleTemplate) => any;
    }
    /**
        * <p>Returns information about an approval rule.</p>
        */
    export interface ApprovalRule {
            /**
                * <p>The system-generated ID of the approval rule.</p>
                */
            approvalRuleId?: string;
            /**
                * <p>The name of the approval rule.</p>
                */
            approvalRuleName?: string;
            /**
                * <p>The content of the approval rule.</p>
                */
            approvalRuleContent?: string;
            /**
                * <p>The SHA-256 hash signature for the content of the approval rule.</p>
                */
            ruleContentSha256?: string;
            /**
                * <p>The date the approval rule was most recently changed, in timestamp format.</p>
                */
            lastModifiedDate?: Date;
            /**
                * <p>The date the approval rule was created, in timestamp format.</p>
                */
            creationDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.</p>
                */
            lastModifiedUser?: string;
            /**
                * <p>The approval rule template used to create the rule.</p>
                */
            originApprovalRuleTemplate?: OriginApprovalRuleTemplate;
    }
    export namespace ApprovalRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApprovalRule) => any;
    }
    /**
        * <p>The content for the approval rule is empty. You must provide some content for an approval rule. The content cannot be null.</p>
        */
    export class ApprovalRuleContentRequiredException extends __BaseException {
            readonly name: "ApprovalRuleContentRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleContentRequiredException, __BaseException>);
    }
    /**
        * <p>The specified approval rule does not exist.</p>
        */
    export class ApprovalRuleDoesNotExistException extends __BaseException {
            readonly name: "ApprovalRuleDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Returns information about an event for an approval rule.</p>
        */
    export interface ApprovalRuleEventMetadata {
            /**
                * <p>The name of the approval rule.</p>
                */
            approvalRuleName?: string;
            /**
                * <p>The system-generated ID of the approval rule.</p>
                */
            approvalRuleId?: string;
            /**
                * <p>The content of the approval rule.</p>
                */
            approvalRuleContent?: string;
    }
    export namespace ApprovalRuleEventMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApprovalRuleEventMetadata) => any;
    }
    /**
        * <p>An approval rule with that name already exists. Approval rule names must be unique
        *             within the scope of a pull request.</p>
        */
    export class ApprovalRuleNameAlreadyExistsException extends __BaseException {
            readonly name: "ApprovalRuleNameAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleNameAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>An approval rule name is required, but was not specified.</p>
        */
    export class ApprovalRuleNameRequiredException extends __BaseException {
            readonly name: "ApprovalRuleNameRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleNameRequiredException, __BaseException>);
    }
    export enum OverrideStatus {
            OVERRIDE = "OVERRIDE",
            REVOKE = "REVOKE"
    }
    /**
        * <p>Returns information about an override event for approval rules for a pull request.</p>
        */
    export interface ApprovalRuleOverriddenEventMetadata {
            /**
                * <p>The revision ID of the pull request when the override event occurred.</p>
                */
            revisionId?: string;
            /**
                * <p>The status of the override event.</p>
                */
            overrideStatus?: OverrideStatus | string;
    }
    export namespace ApprovalRuleOverriddenEventMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApprovalRuleOverriddenEventMetadata) => any;
    }
    /**
        * <p>Returns information about an approval rule template.</p>
        */
    export interface ApprovalRuleTemplate {
            /**
                * <p>The system-generated ID of the approval rule template.</p>
                */
            approvalRuleTemplateId?: string;
            /**
                * <p>The name of the approval rule template.</p>
                */
            approvalRuleTemplateName?: string;
            /**
                * <p>The description of the approval rule template.</p>
                */
            approvalRuleTemplateDescription?: string;
            /**
                * <p>The content of the approval rule template.</p>
                */
            approvalRuleTemplateContent?: string;
            /**
                * <p>The SHA-256 hash signature for the content of the approval rule template.</p>
                */
            ruleContentSha256?: string;
            /**
                * <p>The date the approval rule template was most recently changed, in timestamp format.</p>
                */
            lastModifiedDate?: Date;
            /**
                * <p>The date the approval rule template was created, in timestamp format.</p>
                */
            creationDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.</p>
                */
            lastModifiedUser?: string;
    }
    export namespace ApprovalRuleTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApprovalRuleTemplate) => any;
    }
    /**
        * <p>The content for the approval rule template is empty. You must provide some content for an approval rule template. The content cannot be null.</p>
        */
    export class ApprovalRuleTemplateContentRequiredException extends __BaseException {
            readonly name: "ApprovalRuleTemplateContentRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleTemplateContentRequiredException, __BaseException>);
    }
    /**
        * <p>The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the AWS Region where the template
        *         was created, and then try again.</p>
        */
    export class ApprovalRuleTemplateDoesNotExistException extends __BaseException {
            readonly name: "ApprovalRuleTemplateDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleTemplateDoesNotExistException, __BaseException>);
    }
    /**
        * <p>The approval rule template is associated with one or more repositories. You cannot delete a template that is associated with a repository. Remove
        *         all associations, and then try again.</p>
        */
    export class ApprovalRuleTemplateInUseException extends __BaseException {
            readonly name: "ApprovalRuleTemplateInUseException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleTemplateInUseException, __BaseException>);
    }
    /**
        * <p>You cannot create an approval rule template with that name because a template with
        *             that name already exists in this AWS Region for your AWS account. Approval rule template
        *             names must be unique.</p>
        */
    export class ApprovalRuleTemplateNameAlreadyExistsException extends __BaseException {
            readonly name: "ApprovalRuleTemplateNameAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleTemplateNameAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>An approval rule template name is required, but was not specified.</p>
        */
    export class ApprovalRuleTemplateNameRequiredException extends __BaseException {
            readonly name: "ApprovalRuleTemplateNameRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalRuleTemplateNameRequiredException, __BaseException>);
    }
    /**
        * <p>Returns information about a change in the approval state for a pull request.</p>
        */
    export interface ApprovalStateChangedEventMetadata {
            /**
                * <p>The revision ID of the pull request when the approval state changed.</p>
                */
            revisionId?: string;
            /**
                * <p>The approval status for the pull request.</p>
                */
            approvalStatus?: ApprovalState | string;
    }
    export namespace ApprovalStateChangedEventMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApprovalStateChangedEventMetadata) => any;
    }
    /**
        * <p>An approval state is required, but was not specified.</p>
        */
    export class ApprovalStateRequiredException extends __BaseException {
            readonly name: "ApprovalStateRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApprovalStateRequiredException, __BaseException>);
    }
    export interface AssociateApprovalRuleTemplateWithRepositoryInput {
            /**
                * <p>The name for the approval rule template. </p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>The name of the repository that you want to associate with the template.</p>
                */
            repositoryName: string | undefined;
    }
    export namespace AssociateApprovalRuleTemplateWithRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateApprovalRuleTemplateWithRepositoryInput) => any;
    }
    /**
        * <p>An encryption integrity check failed.</p>
        */
    export class EncryptionIntegrityChecksFailedException extends __BaseException {
            readonly name: "EncryptionIntegrityChecksFailedException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EncryptionIntegrityChecksFailedException, __BaseException>);
    }
    /**
        * <p>An encryption key could not be accessed.</p>
        */
    export class EncryptionKeyAccessDeniedException extends __BaseException {
            readonly name: "EncryptionKeyAccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EncryptionKeyAccessDeniedException, __BaseException>);
    }
    /**
        * <p>The encryption key is disabled.</p>
        */
    export class EncryptionKeyDisabledException extends __BaseException {
            readonly name: "EncryptionKeyDisabledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EncryptionKeyDisabledException, __BaseException>);
    }
    /**
        * <p>No encryption key was found.</p>
        */
    export class EncryptionKeyNotFoundException extends __BaseException {
            readonly name: "EncryptionKeyNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EncryptionKeyNotFoundException, __BaseException>);
    }
    /**
        * <p>The encryption key is not available.</p>
        */
    export class EncryptionKeyUnavailableException extends __BaseException {
            readonly name: "EncryptionKeyUnavailableException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EncryptionKeyUnavailableException, __BaseException>);
    }
    /**
        * <p>The name of the approval rule template is not valid. Template names must be between 1
        *             and 100 valid characters in length. For more information about limits in AWS CodeCommit,
        *             see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">AWS
        *                 CodeCommit User Guide</a>.</p>
        */
    export class InvalidApprovalRuleTemplateNameException extends __BaseException {
            readonly name: "InvalidApprovalRuleTemplateNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidApprovalRuleTemplateNameException, __BaseException>);
    }
    /**
        * <p>A specified repository name is not valid.</p>
        *
        *         <note>
        *             <p>This exception occurs only when a specified repository name is not valid. Other
        *                 exceptions occur when a required repository parameter is missing, or when a
        *                 specified repository does not exist.</p>
        *          </note>
        */
    export class InvalidRepositoryNameException extends __BaseException {
            readonly name: "InvalidRepositoryNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryNameException, __BaseException>);
    }
    /**
        * <p>The maximum number of approval rule templates for a repository has been exceeded. You cannot associate more than 25
        *         approval rule templates with a repository.</p>
        */
    export class MaximumRuleTemplatesAssociatedWithRepositoryException extends __BaseException {
            readonly name: "MaximumRuleTemplatesAssociatedWithRepositoryException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumRuleTemplatesAssociatedWithRepositoryException, __BaseException>);
    }
    /**
        * <p>The specified repository does not exist.</p>
        */
    export class RepositoryDoesNotExistException extends __BaseException {
            readonly name: "RepositoryDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryDoesNotExistException, __BaseException>);
    }
    /**
        * <p>A repository name is required, but was not specified.</p>
        */
    export class RepositoryNameRequiredException extends __BaseException {
            readonly name: "RepositoryNameRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryNameRequiredException, __BaseException>);
    }
    /**
        * <p>The specified Amazon Resource Name (ARN) does not exist in the AWS account.</p>
        */
    export class AuthorDoesNotExistException extends __BaseException {
            readonly name: "AuthorDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthorDoesNotExistException, __BaseException>);
    }
    export interface BatchAssociateApprovalRuleTemplateWithRepositoriesInput {
            /**
                * <p>The name of the template you want to associate with one or more repositories.</p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>The names of the repositories you want to associate with the template.</p>
                *         <note>
                *             <p>The length constraint limit is for each string in the array. The array itself can be empty.</p>
                *          </note>
                */
            repositoryNames: string[] | undefined;
    }
    export namespace BatchAssociateApprovalRuleTemplateWithRepositoriesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateApprovalRuleTemplateWithRepositoriesInput) => any;
    }
    /**
        * <p>Returns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories operation.</p>
        */
    export interface BatchAssociateApprovalRuleTemplateWithRepositoriesError {
            /**
                * <p>The name of the repository where the association was not made.</p>
                */
            repositoryName?: string;
            /**
                * <p>An error code that specifies whether the repository name was not valid or not found.</p>
                */
            errorCode?: string;
            /**
                * <p>An error message that provides details about why the repository name was not found or not valid.</p>
                */
            errorMessage?: string;
    }
    export namespace BatchAssociateApprovalRuleTemplateWithRepositoriesError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateApprovalRuleTemplateWithRepositoriesError) => any;
    }
    export interface BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
            /**
                * <p>A list of names of the repositories that have been associated with the template.</p>
                */
            associatedRepositoryNames: string[] | undefined;
            /**
                * <p>A list of any errors that might have occurred while attempting to create the association between the template and the repositories.</p>
                */
            errors: BatchAssociateApprovalRuleTemplateWithRepositoriesError[] | undefined;
    }
    export namespace BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateApprovalRuleTemplateWithRepositoriesOutput) => any;
    }
    /**
        * <p>The maximum number of allowed repository names was exceeded. Currently, this number is 100.</p>
        */
    export class MaximumRepositoryNamesExceededException extends __BaseException {
            readonly name: "MaximumRepositoryNamesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumRepositoryNamesExceededException, __BaseException>);
    }
    /**
        * <p>At least one repository name object is required, but was not specified.</p>
        */
    export class RepositoryNamesRequiredException extends __BaseException {
            readonly name: "RepositoryNamesRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryNamesRequiredException, __BaseException>);
    }
    export enum ConflictDetailLevelTypeEnum {
            FILE_LEVEL = "FILE_LEVEL",
            LINE_LEVEL = "LINE_LEVEL"
    }
    export enum ConflictResolutionStrategyTypeEnum {
            ACCEPT_DESTINATION = "ACCEPT_DESTINATION",
            ACCEPT_SOURCE = "ACCEPT_SOURCE",
            AUTOMERGE = "AUTOMERGE",
            NONE = "NONE"
    }
    export enum MergeOptionTypeEnum {
            FAST_FORWARD_MERGE = "FAST_FORWARD_MERGE",
            SQUASH_MERGE = "SQUASH_MERGE",
            THREE_WAY_MERGE = "THREE_WAY_MERGE"
    }
    export interface BatchDescribeMergeConflictsInput {
            /**
                * <p>The name of the repository that contains the merge conflicts you want to review.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The merge option or strategy you want to use to merge the code.</p>
                */
            mergeOption: MergeOptionTypeEnum | string | undefined;
            /**
                * <p>The maximum number of merge hunks to include in the output.</p>
                */
            maxMergeHunks?: number;
            /**
                * <p>The maximum number of files to include in the output.</p>
                */
            maxConflictFiles?: number;
            /**
                * <p>The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.</p>
                */
            filePaths?: string[];
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
    }
    export namespace BatchDescribeMergeConflictsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeMergeConflictsInput) => any;
    }
    export enum FileModeTypeEnum {
            EXECUTABLE = "EXECUTABLE",
            NORMAL = "NORMAL",
            SYMLINK = "SYMLINK"
    }
    /**
        * <p>Information about file modes in a merge or pull request.</p>
        */
    export interface FileModes {
            /**
                * <p>The file mode of a file in the source of a merge or pull request.</p>
                */
            source?: FileModeTypeEnum | string;
            /**
                * <p>The file mode of a file in the destination of a merge or pull request.</p>
                */
            destination?: FileModeTypeEnum | string;
            /**
                * <p>The file mode of a file in the base of a merge or pull request.</p>
                */
            base?: FileModeTypeEnum | string;
    }
    export namespace FileModes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileModes) => any;
    }
    /**
        * <p>Information about the size of files in a merge or pull request.</p>
        */
    export interface FileSizes {
            /**
                * <p>The  size of a file in the source of a merge or pull request.</p>
                */
            source?: number;
            /**
                * <p>The size of a file in the destination of a merge or pull request.</p>
                */
            destination?: number;
            /**
                * <p>The size of a file in the base of a merge or pull request.</p>
                */
            base?: number;
    }
    export namespace FileSizes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileSizes) => any;
    }
    /**
        * <p>Information about whether a file is binary or textual in a merge or pull request operation.</p>
        */
    export interface IsBinaryFile {
            /**
                * <p>The binary or non-binary status of file in the source of a merge or pull request.</p>
                */
            source?: boolean;
            /**
                * <p>The binary or non-binary status of a file in the destination of a merge or pull request.</p>
                */
            destination?: boolean;
            /**
                * <p>The binary or non-binary status of a file in the base of a merge or pull request.</p>
                */
            base?: boolean;
    }
    export namespace IsBinaryFile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IsBinaryFile) => any;
    }
    export enum ChangeTypeEnum {
            ADDED = "A",
            DELETED = "D",
            MODIFIED = "M"
    }
    /**
        * <p>Information about the file operation conflicts in a merge operation.</p>
        */
    export interface MergeOperations {
            /**
                * <p>The operation (add, modify, or delete) on a file in the source of a merge or pull
                *             request.</p>
                */
            source?: ChangeTypeEnum | string;
            /**
                * <p>The operation on a file in the destination of a merge or pull request.</p>
                */
            destination?: ChangeTypeEnum | string;
    }
    export namespace MergeOperations {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeOperations) => any;
    }
    export enum ObjectTypeEnum {
            DIRECTORY = "DIRECTORY",
            FILE = "FILE",
            GIT_LINK = "GIT_LINK",
            SYMBOLIC_LINK = "SYMBOLIC_LINK"
    }
    /**
        * <p>Information about the type of an object in a merge operation.</p>
        */
    export interface ObjectTypes {
            /**
                * <p>The type of the object in the source branch.</p>
                */
            source?: ObjectTypeEnum | string;
            /**
                * <p>The type of the object in the destination branch.</p>
                */
            destination?: ObjectTypeEnum | string;
            /**
                * <p>The type of the object in the base commit of the merge.</p>
                */
            base?: ObjectTypeEnum | string;
    }
    export namespace ObjectTypes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ObjectTypes) => any;
    }
    /**
        * <p>Information about the metadata for a conflict in a merge operation.</p>
        */
    export interface ConflictMetadata {
            /**
                * <p>The path of the file that contains conflicts.</p>
                */
            filePath?: string;
            /**
                * <p>The file sizes of the file in the source, destination, and base of the merge.</p>
                */
            fileSizes?: FileSizes;
            /**
                * <p>The file modes of the file in the source, destination, and base of the merge.</p>
                */
            fileModes?: FileModes;
            /**
                * <p>Information about any object type conflicts in a merge operation.</p>
                */
            objectTypes?: ObjectTypes;
            /**
                * <p>The number of conflicts, including both hunk conflicts and metadata conflicts.</p>
                */
            numberOfConflicts?: number;
            /**
                * <p>A boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.</p>
                */
            isBinaryFile?: IsBinaryFile;
            /**
                * <p>A boolean value indicating whether there are conflicts in the content of a file.</p>
                */
            contentConflict?: boolean;
            /**
                * <p>A boolean value indicating whether there are conflicts in the file mode of a file.</p>
                */
            fileModeConflict?: boolean;
            /**
                * <p>A boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.</p>
                */
            objectTypeConflict?: boolean;
            /**
                * <p>Whether an add, modify, or delete operation caused the conflict between the source and destination of the merge.</p>
                */
            mergeOperations?: MergeOperations;
    }
    export namespace ConflictMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConflictMetadata) => any;
    }
    /**
        * <p>Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.</p>
        */
    export interface MergeHunkDetail {
            /**
                * <p>The start position of the hunk in the merge result.</p>
                */
            startLine?: number;
            /**
                * <p>The end position of the hunk in the merge result.</p>
                */
            endLine?: number;
            /**
                * <p>The base-64 encoded content of the hunk merged region that might contain a
                *             conflict.</p>
                */
            hunkContent?: string;
    }
    export namespace MergeHunkDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeHunkDetail) => any;
    }
    /**
        * <p>Information about merge hunks in a merge or pull request operation.</p>
        */
    export interface MergeHunk {
            /**
                * <p>A Boolean value indicating whether a combination of hunks contains a conflict.
                *             Conflicts occur when the same file or the same lines in a file were modified in both the
                *             source and destination of a merge or pull request. Valid values include true, false, and
                *             null. True when the hunk represents a conflict and one or more files contains a line
                *             conflict. File mode conflicts in a merge do not set this to true.</p>
                */
            isConflict?: boolean;
            /**
                * <p>Information about the merge hunk in the source of a merge or pull request.</p>
                */
            source?: MergeHunkDetail;
            /**
                * <p>Information about the merge hunk in the destination of a merge or pull request.</p>
                */
            destination?: MergeHunkDetail;
            /**
                * <p>Information about the merge hunk in the base of a merge or pull request.</p>
                */
            base?: MergeHunkDetail;
    }
    export namespace MergeHunk {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeHunk) => any;
    }
    /**
        * <p>Information about conflicts in a merge operation.</p>
        */
    export interface Conflict {
            /**
                * <p>Metadata about a conflict in a merge operation.</p>
                */
            conflictMetadata?: ConflictMetadata;
            /**
                * <p>A list of hunks that contain the differences between files or lines causing the conflict.</p>
                */
            mergeHunks?: MergeHunk[];
    }
    export namespace Conflict {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Conflict) => any;
    }
    /**
        * <p>Returns information about errors in a BatchDescribeMergeConflicts operation.</p>
        */
    export interface BatchDescribeMergeConflictsError {
            /**
                * <p>The path to the file.</p>
                */
            filePath: string | undefined;
            /**
                * <p>The name of the exception.</p>
                */
            exceptionName: string | undefined;
            /**
                * <p>The message provided by the exception.</p>
                */
            message: string | undefined;
    }
    export namespace BatchDescribeMergeConflictsError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeMergeConflictsError) => any;
    }
    export interface BatchDescribeMergeConflictsOutput {
            /**
                * <p>A list of conflicts for each file, including the conflict metadata and the hunks of the differences between the files.</p>
                */
            conflicts: Conflict[] | undefined;
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            nextToken?: string;
            /**
                * <p>A list of any errors returned while describing the merge conflicts for each file.</p>
                */
            errors?: BatchDescribeMergeConflictsError[];
            /**
                * <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
                */
            destinationCommitId: string | undefined;
            /**
                * <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
                */
            sourceCommitId: string | undefined;
            /**
                * <p>The commit ID of the merge base.</p>
                */
            baseCommitId?: string;
    }
    export namespace BatchDescribeMergeConflictsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeMergeConflictsOutput) => any;
    }
    /**
        * <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>
        */
    export class CommitDoesNotExistException extends __BaseException {
            readonly name: "CommitDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommitDoesNotExistException, __BaseException>);
    }
    /**
        * <p>A commit was not specified.</p>
        */
    export class CommitRequiredException extends __BaseException {
            readonly name: "CommitRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommitRequiredException, __BaseException>);
    }
    /**
        * <p>The specified commit is not valid.</p>
        */
    export class InvalidCommitException extends __BaseException {
            readonly name: "InvalidCommitException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCommitException, __BaseException>);
    }
    /**
        * <p>The specified conflict detail level is not valid.</p>
        */
    export class InvalidConflictDetailLevelException extends __BaseException {
            readonly name: "InvalidConflictDetailLevelException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidConflictDetailLevelException, __BaseException>);
    }
    /**
        * <p>The specified conflict resolution strategy is not valid.</p>
        */
    export class InvalidConflictResolutionStrategyException extends __BaseException {
            readonly name: "InvalidConflictResolutionStrategyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidConflictResolutionStrategyException, __BaseException>);
    }
    /**
        * <p>The specified continuation token is not valid.</p>
        */
    export class InvalidContinuationTokenException extends __BaseException {
            readonly name: "InvalidContinuationTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidContinuationTokenException, __BaseException>);
    }
    /**
        * <p>The specified value for the number of conflict files to return is not valid.</p>
        */
    export class InvalidMaxConflictFilesException extends __BaseException {
            readonly name: "InvalidMaxConflictFilesException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidMaxConflictFilesException, __BaseException>);
    }
    /**
        * <p>The specified value for the number of merge hunks to return is not valid.</p>
        */
    export class InvalidMaxMergeHunksException extends __BaseException {
            readonly name: "InvalidMaxMergeHunksException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidMaxMergeHunksException, __BaseException>);
    }
    /**
        * <p>The specified merge option is not valid for this operation. Not all merge strategies are supported for all operations.</p>
        */
    export class InvalidMergeOptionException extends __BaseException {
            readonly name: "InvalidMergeOptionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidMergeOptionException, __BaseException>);
    }
    /**
        * <p>The number of files to load exceeds the allowed limit.</p>
        */
    export class MaximumFileContentToLoadExceededException extends __BaseException {
            readonly name: "MaximumFileContentToLoadExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumFileContentToLoadExceededException, __BaseException>);
    }
    /**
        * <p>The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.</p>
        */
    export class MaximumItemsToCompareExceededException extends __BaseException {
            readonly name: "MaximumItemsToCompareExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumItemsToCompareExceededException, __BaseException>);
    }
    /**
        * <p>A merge option or stategy is required, and none was provided.</p>
        */
    export class MergeOptionRequiredException extends __BaseException {
            readonly name: "MergeOptionRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MergeOptionRequiredException, __BaseException>);
    }
    /**
        * <p>The divergence between the tips of the provided commit specifiers is too great to determine whether there might be
        *             any merge conflicts. Locally compare the specifiers using <code>git diff</code> or a diff tool.</p>
        */
    export class TipsDivergenceExceededException extends __BaseException {
            readonly name: "TipsDivergenceExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TipsDivergenceExceededException, __BaseException>);
    }
    export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesInput {
            /**
                * <p>The name of the template that you want to disassociate from one or more repositories.</p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>The repository names that you want to disassociate from the approval rule
                *             template.</p>
                *         <note>
                *             <p>The length constraint limit is for each string in the array. The array itself can be empty.</p>
                *          </note>
                */
            repositoryNames: string[] | undefined;
    }
    export namespace BatchDisassociateApprovalRuleTemplateFromRepositoriesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) => any;
    }
    /**
        * <p>Returns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories operation.</p>
        */
    export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesError {
            /**
                * <p>The name of the repository where the association with the template was not able to be removed.</p>
                */
            repositoryName?: string;
            /**
                * <p>An error code that specifies whether the repository name was not valid or not
                *             found.</p>
                */
            errorCode?: string;
            /**
                * <p>An error message that provides details about why the repository name was either not found or not valid.</p>
                */
            errorMessage?: string;
    }
    export namespace BatchDisassociateApprovalRuleTemplateFromRepositoriesError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateApprovalRuleTemplateFromRepositoriesError) => any;
    }
    export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
            /**
                * <p>A list of repository names that have had their association with the template
                *             removed.</p>
                */
            disassociatedRepositoryNames: string[] | undefined;
            /**
                * <p>A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.</p>
                */
            errors: BatchDisassociateApprovalRuleTemplateFromRepositoriesError[] | undefined;
    }
    export namespace BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput) => any;
    }
    export interface BatchGetCommitsInput {
            /**
                * <p>The full commit IDs of the commits to get information about.</p>
                *         <note>
                *             <p>You must supply the full SHA IDs of each commit. You cannot use shortened SHA
                *                 IDs.</p>
                *         </note>
                */
            commitIds: string[] | undefined;
            /**
                * <p>The name of the repository that contains the commits.</p>
                */
            repositoryName: string | undefined;
    }
    export namespace BatchGetCommitsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetCommitsInput) => any;
    }
    /**
        * <p>Information about the user who made a specified commit.</p>
        */
    export interface UserInfo {
            /**
                * <p>The name of the user who made the specified commit.</p>
                */
            name?: string;
            /**
                * <p>The email address associated with the user who made the commit, if any.</p>
                */
            email?: string;
            /**
                * <p>The date when the specified commit was commited, in timestamp format with GMT offset.</p>
                */
            date?: string;
    }
    export namespace UserInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserInfo) => any;
    }
    /**
        * <p>Returns information about a specific commit.</p>
        */
    export interface Commit {
            /**
                * <p>The full SHA ID of the specified commit. </p>
                */
            commitId?: string;
            /**
                * <p>Tree information for the specified commit.</p>
                */
            treeId?: string;
            /**
                * <p>A list of parent commits for the specified commit. Each parent commit ID is the full commit ID.</p>
                */
            parents?: string[];
            /**
                * <p>The commit message associated with the specified commit.</p>
                */
            message?: string;
            /**
                * <p>Information about the author of the specified commit. Information includes
                *             the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured
                *             in Git.</p>
                */
            author?: UserInfo;
            /**
                * <p>Information about the person who committed the specified commit, also known as the committer. Information includes
                *         the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured
                *         in Git.</p>
                *         <p>For more information
                *             about the difference between an author and a committer in Git, see <a href="http://git-scm.com/book/ch2-3.html">Viewing the Commit History</a> in Pro Git
                *             by Scott Chacon and Ben Straub.</p>
                */
            committer?: UserInfo;
            /**
                * <p>Any other data associated with the specified commit.</p>
                */
            additionalData?: string;
    }
    export namespace Commit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Commit) => any;
    }
    /**
        * <p>Returns information about errors in a BatchGetCommits operation.</p>
        */
    export interface BatchGetCommitsError {
            /**
                * <p>A commit ID that either could not be found or was not in a valid format.</p>
                */
            commitId?: string;
            /**
                * <p>An error code that specifies whether the commit ID was not valid or not found.</p>
                */
            errorCode?: string;
            /**
                * <p>An error message that provides detail about why the commit ID either was not found or was not valid.</p>
                */
            errorMessage?: string;
    }
    export namespace BatchGetCommitsError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetCommitsError) => any;
    }
    export interface BatchGetCommitsOutput {
            /**
                * <p>An array of commit data type objects, each of which contains information about a specified commit.</p>
                */
            commits?: Commit[];
            /**
                * <p>Returns any commit IDs for which information could not be found. For example, if one
                *             of the commit IDs was a shortened SHA ID or that commit was not found in the specified
                *             repository, the ID returns an error object with more information.</p>
                */
            errors?: BatchGetCommitsError[];
    }
    export namespace BatchGetCommitsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetCommitsOutput) => any;
    }
    /**
        * <p>The maximum number of allowed commit IDs in a batch request is 100. Verify that your batch requests contains no more than 100 commit IDs, and then try again.</p>
        */
    export class CommitIdsLimitExceededException extends __BaseException {
            readonly name: "CommitIdsLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommitIdsLimitExceededException, __BaseException>);
    }
    /**
        * <p>A list of commit IDs is required, but was either not specified or the list was empty.</p>
        */
    export class CommitIdsListRequiredException extends __BaseException {
            readonly name: "CommitIdsListRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommitIdsListRequiredException, __BaseException>);
    }
    /**
        * <p>Represents the input of a batch get repositories operation.</p>
        */
    export interface BatchGetRepositoriesInput {
            /**
                * <p>The names of the repositories to get information about.</p>
                *         <note>
                *             <p>The length constraint limit is for each string in the array. The array itself can be empty.</p>
                *          </note>
                */
            repositoryNames: string[] | undefined;
    }
    export namespace BatchGetRepositoriesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetRepositoriesInput) => any;
    }
    /**
        * <p>Information about a repository.</p>
        */
    export interface RepositoryMetadata {
            /**
                * <p>The ID of the AWS account associated with the repository.</p>
                */
            accountId?: string;
            /**
                * <p>The ID of the repository.</p>
                */
            repositoryId?: string;
            /**
                * <p>The repository's name.</p>
                */
            repositoryName?: string;
            /**
                * <p>A comment or description about the repository.</p>
                */
            repositoryDescription?: string;
            /**
                * <p>The repository's default branch name.</p>
                */
            defaultBranch?: string;
            /**
                * <p>The date and time the repository was last modified, in timestamp format.</p>
                */
            lastModifiedDate?: Date;
            /**
                * <p>The date and time the repository was created, in timestamp format.</p>
                */
            creationDate?: Date;
            /**
                * <p>The URL to use for cloning the repository over HTTPS.</p>
                */
            cloneUrlHttp?: string;
            /**
                * <p>The URL to use for cloning the repository over SSH.</p>
                */
            cloneUrlSsh?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the repository.</p>
                */
            Arn?: string;
    }
    export namespace RepositoryMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryMetadata) => any;
    }
    /**
        * <p>Represents the output of a batch get repositories operation.</p>
        */
    export interface BatchGetRepositoriesOutput {
            /**
                * <p>A list of repositories returned by the batch get repositories operation.</p>
                */
            repositories?: RepositoryMetadata[];
            /**
                * <p>Returns a list of repository names for which information could not be found.</p>
                */
            repositoriesNotFound?: string[];
    }
    export namespace BatchGetRepositoriesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetRepositoriesOutput) => any;
    }
    /**
        * <p>The before commit ID and the after commit ID are the same, which is not valid. The before commit ID and the after commit ID must be different commit IDs.</p>
        */
    export class BeforeCommitIdAndAfterCommitIdAreSameException extends __BaseException {
            readonly name: "BeforeCommitIdAndAfterCommitIdAreSameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BeforeCommitIdAndAfterCommitIdAreSameException, __BaseException>);
    }
    /**
        * <p>The specified blob does not exist.</p>
        */
    export class BlobIdDoesNotExistException extends __BaseException {
            readonly name: "BlobIdDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BlobIdDoesNotExistException, __BaseException>);
    }
    /**
        * <p>A blob ID is required, but was not specified.</p>
        */
    export class BlobIdRequiredException extends __BaseException {
            readonly name: "BlobIdRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BlobIdRequiredException, __BaseException>);
    }
    /**
        * <p>Returns information about a specific Git blob object.</p>
        */
    export interface BlobMetadata {
            /**
                * <p>The full ID of the blob.</p>
                */
            blobId?: string;
            /**
                * <p>The path to the blob and associated file name, if any.</p>
                */
            path?: string;
            /**
                * <p>The file mode permissions of the blob. File mode permission codes include:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>100644</code> indicates read/write</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>100755</code> indicates read/write/execute</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>160000</code> indicates a submodule</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>120000</code> indicates a symlink</p>
                *             </li>
                *          </ul>
                */
            mode?: string;
    }
    export namespace BlobMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BlobMetadata) => any;
    }
    /**
        * <p>The specified branch does not exist.</p>
        */
    export class BranchDoesNotExistException extends __BaseException {
            readonly name: "BranchDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BranchDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Returns information about a branch.</p>
        */
    export interface BranchInfo {
            /**
                * <p>The name of the branch.</p>
                */
            branchName?: string;
            /**
                * <p>The ID of the last commit made to the branch.</p>
                */
            commitId?: string;
    }
    export namespace BranchInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BranchInfo) => any;
    }
    /**
        * <p>Cannot create the branch with the specified name because the commit conflicts with an existing branch with the same name.
        *             Branch names must be unique.</p>
        */
    export class BranchNameExistsException extends __BaseException {
            readonly name: "BranchNameExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BranchNameExistsException, __BaseException>);
    }
    /**
        * <p>The specified branch name is not valid because it is a tag name. Enter the name of a
        *             branch in the repository. For a list of valid branch names, use <a>ListBranches</a>.</p>
        */
    export class BranchNameIsTagNameException extends __BaseException {
            readonly name: "BranchNameIsTagNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BranchNameIsTagNameException, __BaseException>);
    }
    /**
        * <p>A branch name is required, but was not specified.</p>
        */
    export class BranchNameRequiredException extends __BaseException {
            readonly name: "BranchNameRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BranchNameRequiredException, __BaseException>);
    }
    /**
        * <p>The approval rule cannot be deleted from the pull request because it was created by an
        *             approval rule template and applied to the pull request automatically.</p>
        */
    export class CannotDeleteApprovalRuleFromTemplateException extends __BaseException {
            readonly name: "CannotDeleteApprovalRuleFromTemplateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CannotDeleteApprovalRuleFromTemplateException, __BaseException>);
    }
    /**
        * <p>The approval rule cannot be modified for the pull request because it was created by an
        *             approval rule template and applied to the pull request automatically.</p>
        */
    export class CannotModifyApprovalRuleFromTemplateException extends __BaseException {
            readonly name: "CannotModifyApprovalRuleFromTemplateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CannotModifyApprovalRuleFromTemplateException, __BaseException>);
    }
    /**
        * <p>A client request token is required. A client request token is an unique,
        *             client-generated idempotency token that, when provided in a request, ensures the request
        *             cannot be repeated with a changed parameter. If a request is received with the same
        *             parameters and a token is included, the request returns information about the initial
        *             request that used that token.</p>
        */
    export class ClientRequestTokenRequiredException extends __BaseException {
            readonly name: "ClientRequestTokenRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ClientRequestTokenRequiredException, __BaseException>);
    }
    export interface CreateApprovalRuleTemplateInput {
            /**
                * <p>The name of the approval rule template. Provide descriptive names, because this name
                *             is applied to the approval rules created automatically in associated
                *             repositories.</p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>The content of the approval rule that is created on pull requests in associated
                *             repositories. If you specify one or more destination references (branches), approval
                *             rules are created in an associated repository only if their destination references
                *             (branches) match those specified in the template.</p>
                *         <note>
                *             <p>When you create the content of the approval rule template, you can specify
                *                 approvers in an approval pool in one of two ways:</p>
                *             <ul>
                *                <li>
                *                     <p>
                *                      <b>CodeCommitApprovers</b>: This option only
                *                         requires an AWS account and a resource. It can be used for both IAM users
                *                         and federated access users whose name matches the provided resource name.
                *                         This is a very powerful option that offers a great deal of flexibility. For
                *                         example, if you specify the AWS account <i>123456789012</i>
                *                         and <i>Mary_Major</i>, all of the following are counted as
                *                         approvals coming from that user:</p>
                *                     <ul>
                *                      <li>
                *                             <p>An IAM user in the account
                *                                 (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p>
                *                         </li>
                *                      <li>
                *                             <p>A federated user identified in IAM as Mary_Major
                *                                 (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p>
                *                         </li>
                *                   </ul>
                *                     <p>This option does not recognize an active session of someone assuming the
                *                         role of CodeCommitReview with a role session name of
                *                             <i>Mary_Major</i>
                *                             (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>)
                *                         unless you include a wildcard (*Mary_Major).</p>
                *                 </li>
                *                <li>
                *                     <p>
                *                      <b>Fully qualified ARN</b>: This option allows
                *                         you to specify the fully qualified Amazon Resource Name (ARN) of the IAM
                *                         user or role. </p>
                *                 </li>
                *             </ul>
                *             <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM
                *                     Identifiers</a> in the <i>IAM User Guide</i>.</p>
                *
                *         </note>
                */
            approvalRuleTemplateContent: string | undefined;
            /**
                * <p>The description of the approval rule template. Consider providing a description that
                *             explains what this template does and when it might be appropriate to associate it with
                *             repositories.</p>
                */
            approvalRuleTemplateDescription?: string;
    }
    export namespace CreateApprovalRuleTemplateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApprovalRuleTemplateInput) => any;
    }
    export interface CreateApprovalRuleTemplateOutput {
            /**
                * <p>The content and structure of the created approval rule template.</p>
                */
            approvalRuleTemplate: ApprovalRuleTemplate | undefined;
    }
    export namespace CreateApprovalRuleTemplateOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApprovalRuleTemplateOutput) => any;
    }
    /**
        * <p>The content of the approval rule template is not valid.</p>
        */
    export class InvalidApprovalRuleTemplateContentException extends __BaseException {
            readonly name: "InvalidApprovalRuleTemplateContentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidApprovalRuleTemplateContentException, __BaseException>);
    }
    /**
        * <p>The description for the approval rule template is not valid because it exceeds the
        *             maximum characters allowed for a description. For more information about limits in AWS
        *             CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">AWS CodeCommit User
        *             Guide</a>.</p>
        */
    export class InvalidApprovalRuleTemplateDescriptionException extends __BaseException {
            readonly name: "InvalidApprovalRuleTemplateDescriptionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidApprovalRuleTemplateDescriptionException, __BaseException>);
    }
    /**
        * <p>The maximum number of approval rule templates has been exceeded for this AWS Region. </p>
        */
    export class NumberOfRuleTemplatesExceededException extends __BaseException {
            readonly name: "NumberOfRuleTemplatesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NumberOfRuleTemplatesExceededException, __BaseException>);
    }
    /**
        * <p>A commit ID was not specified.</p>
        */
    export class CommitIdRequiredException extends __BaseException {
            readonly name: "CommitIdRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommitIdRequiredException, __BaseException>);
    }
    /**
        * <p>Represents the input of a create branch operation.</p>
        */
    export interface CreateBranchInput {
            /**
                * <p>The name of the repository in which you want to create the new branch.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The name of the new branch to create.</p>
                */
            branchName: string | undefined;
            /**
                * <p>The ID of the commit to point the new branch to.</p>
                */
            commitId: string | undefined;
    }
    export namespace CreateBranchInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBranchInput) => any;
    }
    /**
        * <p>The specified reference name is not valid.</p>
        */
    export class InvalidBranchNameException extends __BaseException {
            readonly name: "InvalidBranchNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidBranchNameException, __BaseException>);
    }
    /**
        * <p>The specified commit ID is not valid.</p>
        */
    export class InvalidCommitIdException extends __BaseException {
            readonly name: "InvalidCommitIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCommitIdException, __BaseException>);
    }
    /**
        * <p>The commit message is too long. Provide a shorter string. </p>
        */
    export class CommitMessageLengthExceededException extends __BaseException {
            readonly name: "CommitMessageLengthExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommitMessageLengthExceededException, __BaseException>);
    }
    /**
        * <p>A file that is deleted as part of a commit.</p>
        */
    export interface DeleteFileEntry {
            /**
                * <p>The full path of the file to be deleted, including the name of the file.</p>
                */
            filePath: string | undefined;
    }
    export namespace DeleteFileEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFileEntry) => any;
    }
    /**
        * <p>Information about a source file that is part of changes made in a commit.</p>
        */
    export interface SourceFileSpecifier {
            /**
                * <p>The full path to the file, including the name of the file.</p>
                */
            filePath: string | undefined;
            /**
                * <p>Whether to remove the source file from the parent commit.</p>
                */
            isMove?: boolean;
    }
    export namespace SourceFileSpecifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceFileSpecifier) => any;
    }
    /**
        * <p>Information about a file added or updated as part of a commit.</p>
        */
    export interface PutFileEntry {
            /**
                * <p>The full path to the file in the repository, including the name of the file.</p>
                */
            filePath: string | undefined;
            /**
                * <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
                */
            fileMode?: FileModeTypeEnum | string;
            /**
                * <p>The content of the file, if a source file is not specified.</p>
                */
            fileContent?: Uint8Array;
            /**
                * <p>The name and full path of the file that contains the changes you want to make as part of the commit,
                *         if you are not providing the file content directly.</p>
                */
            sourceFile?: SourceFileSpecifier;
    }
    export namespace PutFileEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFileEntry) => any;
    }
    /**
        * <p>Information about the file mode changes.</p>
        */
    export interface SetFileModeEntry {
            /**
                * <p>The full path to the file, including the name of the file.</p>
                */
            filePath: string | undefined;
            /**
                * <p>The file mode for the file.</p>
                */
            fileMode: FileModeTypeEnum | string | undefined;
    }
    export namespace SetFileModeEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetFileModeEntry) => any;
    }
    export interface CreateCommitInput {
            /**
                * <p>The name of the repository where you create the commit.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The name of the branch where you create the commit.</p>
                */
            branchName: string | undefined;
            /**
                * <p>The ID of the commit that is the parent of the commit you create. Not required if this
                *             is an empty repository.</p>
                */
            parentCommitId?: string;
            /**
                * <p>The name of the author who created the commit. This information is used as both the
                *             author and committer for the commit.</p>
                */
            authorName?: string;
            /**
                * <p>The email address of the person who created the commit.</p>
                */
            email?: string;
            /**
                * <p>The commit message you want to include in the commit. Commit messages are limited to
                *             256 KB. If no message is specified, a default message is used.</p>
                */
            commitMessage?: string;
            /**
                * <p>If the commit contains deletions, whether to keep a folder or folder structure if the
                *             changes leave the folders empty. If true, a ..gitkeep file is created for empty folders.
                *             The default is false.</p>
                */
            keepEmptyFolders?: boolean;
            /**
                * <p>The files to add or update in this commit.</p>
                */
            putFiles?: PutFileEntry[];
            /**
                * <p>The files to delete in this commit. These files still exist in earlier commits.</p>
                */
            deleteFiles?: DeleteFileEntry[];
            /**
                * <p>The file modes to update for files in this commit.</p>
                */
            setFileModes?: SetFileModeEntry[];
    }
    export namespace CreateCommitInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCommitInput) => any;
    }
    /**
        * <p>A file to be added, updated, or deleted as part of a commit.</p>
        */
    export interface FileMetadata {
            /**
                * <p>The full path to the file to be added or updated, including the name of the
                *             file.</p>
                */
            absolutePath?: string;
            /**
                * <p>The blob ID that contains the file information.</p>
                */
            blobId?: string;
            /**
                * <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
                */
            fileMode?: FileModeTypeEnum | string;
    }
    export namespace FileMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileMetadata) => any;
    }
    export interface CreateCommitOutput {
            /**
                * <p>The full commit ID of the commit that contains your committed file changes.</p>
                */
            commitId?: string;
            /**
                * <p>The full SHA-1 pointer of the tree information for the commit that contains the commited file changes.</p>
                */
            treeId?: string;
            /**
                * <p>The files added as part of the committed file changes.</p>
                */
            filesAdded?: FileMetadata[];
            /**
                * <p>The files updated as part of the commited file changes.</p>
                */
            filesUpdated?: FileMetadata[];
            /**
                * <p>The files deleted as part of the committed file changes.</p>
                */
            filesDeleted?: FileMetadata[];
    }
    export namespace CreateCommitOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCommitOutput) => any;
    }
    /**
        * <p>A file cannot be added to the repository because the specified path name has the same name as a file that already exists in this repository.
        *         Either provide a different name for the file, or specify a different path for the file.</p>
        */
    export class DirectoryNameConflictsWithFileNameException extends __BaseException {
            readonly name: "DirectoryNameConflictsWithFileNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DirectoryNameConflictsWithFileNameException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because both a source file and file content have been
        *             specified for the same file. You cannot provide both. Either specify a source file or
        *             provide the file content directly.</p>
        */
    export class FileContentAndSourceFileSpecifiedException extends __BaseException {
            readonly name: "FileContentAndSourceFileSpecifiedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileContentAndSourceFileSpecifiedException, __BaseException>);
    }
    /**
        * <p>The file cannot be added because it is too large. The maximum file size is 6 MB, and
        *             the combined file content change size is 7 MB. Consider making these changes using a Git
        *             client.</p>
        */
    export class FileContentSizeLimitExceededException extends __BaseException {
            readonly name: "FileContentSizeLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileContentSizeLimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified file does not exist. Verify that you have used the correct file name,
        *             full path, and extension.</p>
        */
    export class FileDoesNotExistException extends __BaseException {
            readonly name: "FileDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileDoesNotExistException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because no files have been specified as added, updated, or changed (PutFile or DeleteFile) for the commit.</p>
        */
    export class FileEntryRequiredException extends __BaseException {
            readonly name: "FileEntryRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileEntryRequiredException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because no file mode has been specified. A file mode is
        *             required to update mode permissions for a file.</p>
        */
    export class FileModeRequiredException extends __BaseException {
            readonly name: "FileModeRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileModeRequiredException, __BaseException>);
    }
    /**
        * <p>A file cannot be added to the repository because the specified file name has the same name as a directory in this repository. Either provide
        *         another name for the file, or add the file in a directory that does not match the file name.</p>
        */
    export class FileNameConflictsWithDirectoryNameException extends __BaseException {
            readonly name: "FileNameConflictsWithDirectoryNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileNameConflictsWithDirectoryNameException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because a specified file path points to a submodule. Verify that the destination files
        *         have valid file paths that do not point to a submodule.</p>
        */
    export class FilePathConflictsWithSubmodulePathException extends __BaseException {
            readonly name: "FilePathConflictsWithSubmodulePathException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FilePathConflictsWithSubmodulePathException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because at least one of the overall changes in the commit results in a
        *             folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes,
        *         or split the changes across multiple folders.</p>
        */
    export class FolderContentSizeLimitExceededException extends __BaseException {
            readonly name: "FolderContentSizeLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FolderContentSizeLimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified deletion parameter is not valid.</p>
        */
    export class InvalidDeletionParameterException extends __BaseException {
            readonly name: "InvalidDeletionParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDeletionParameterException, __BaseException>);
    }
    /**
        * <p>The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters
        *         allowed for an email address.</p>
        */
    export class InvalidEmailException extends __BaseException {
            readonly name: "InvalidEmailException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEmailException, __BaseException>);
    }
    /**
        * <p>The specified file mode permission is not valid. For a list of valid file mode permissions, see <a>PutFile</a>. </p>
        */
    export class InvalidFileModeException extends __BaseException {
            readonly name: "InvalidFileModeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFileModeException, __BaseException>);
    }
    /**
        * <p>The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you
        *         want to add or update a file.</p>
        */
    export class InvalidParentCommitIdException extends __BaseException {
            readonly name: "InvalidParentCommitIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParentCommitIdException, __BaseException>);
    }
    /**
        * <p>The specified path is not valid.</p>
        */
    export class InvalidPathException extends __BaseException {
            readonly name: "InvalidPathException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPathException, __BaseException>);
    }
    /**
        * <p>The number of specified files to change as part of this commit exceeds the maximum number of files
        *         that can be changed in a single commit. Consider using a Git client for these changes.</p>
        */
    export class MaximumFileEntriesExceededException extends __BaseException {
            readonly name: "MaximumFileEntriesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumFileEntriesExceededException, __BaseException>);
    }
    /**
        * <p>The user name is not valid because it has exceeded the character limit for author names. </p>
        */
    export class NameLengthExceededException extends __BaseException {
            readonly name: "NameLengthExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NameLengthExceededException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because no changes will be made to the repository as a result of this commit. A commit must contain at least one change.</p>
        */
    export class NoChangeException extends __BaseException {
            readonly name: "NoChangeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoChangeException, __BaseException>);
    }
    /**
        * <p>The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.</p>
        */
    export class ParentCommitDoesNotExistException extends __BaseException {
            readonly name: "ParentCommitDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParentCommitDoesNotExistException, __BaseException>);
    }
    /**
        * <p>The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head
        *         of the branch, use <a>GetBranch</a>.</p>
        */
    export class ParentCommitIdOutdatedException extends __BaseException {
            readonly name: "ParentCommitIdOutdatedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParentCommitIdOutdatedException, __BaseException>);
    }
    /**
        * <p>A parent commit ID is required. To view the full commit ID of a branch in a repository, use <a>GetBranch</a> or a Git command
        *         (for example, git pull or git log).</p>
        */
    export class ParentCommitIdRequiredException extends __BaseException {
            readonly name: "ParentCommitIdRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParentCommitIdRequiredException, __BaseException>);
    }
    /**
        * <p>The folderPath for a location cannot be null.</p>
        */
    export class PathRequiredException extends __BaseException {
            readonly name: "PathRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PathRequiredException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because one or more files specified in the commit reference both a file and a folder.</p>
        */
    export class PutFileEntryConflictException extends __BaseException {
            readonly name: "PutFileEntryConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PutFileEntryConflictException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because one of the changes specifies copying or moving a .gitkeep file.</p>
        */
    export class RestrictedSourceFileException extends __BaseException {
            readonly name: "RestrictedSourceFileException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RestrictedSourceFileException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because one or more changes in this commit duplicate actions in the same file path. For example,
        *         you cannot make the same delete request to the same file in the same file path twice, or make a delete request and a move request to the same
        *         file as part of the same commit.</p>
        */
    export class SamePathRequestException extends __BaseException {
            readonly name: "SamePathRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SamePathRequestException, __BaseException>);
    }
    /**
        * <p>The commit cannot be created because no source files or file content have been specified for the commit.</p>
        */
    export class SourceFileOrContentRequiredException extends __BaseException {
            readonly name: "SourceFileOrContentRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SourceFileOrContentRequiredException, __BaseException>);
    }
    /**
        * <p>Returns information about a target for a pull request.</p>
        */
    export interface Target {
            /**
                * <p>The name of the repository that contains the pull request.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>
                */
            sourceReference: string | undefined;
            /**
                * <p>The branch of the repository where the pull request changes are merged. Also known as
                *             the destination branch.</p>
                */
            destinationReference?: string;
    }
    export namespace Target {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Target) => any;
    }
    export interface CreatePullRequestInput {
            /**
                * <p>The title of the pull request. This title is used to identify the pull request to
                *             other users in the repository.</p>
                */
            title: string | undefined;
            /**
                * <p>A description of the pull request.</p>
                */
            description?: string;
            /**
                * <p>The targets for the pull request, including the source of the code to be reviewed (the
                *             source branch) and the destination where the creator of the pull request intends the
                *             code to be merged after the pull request is closed (the destination branch).</p>
                */
            targets: Target[] | undefined;
            /**
                * <p>A unique, client-generated idempotency token that, when provided in a request, ensures
                *             the request cannot be repeated with a changed parameter. If a request is received with
                *             the same parameters and a token is included, the request returns information about the
                *             initial request that used that token.</p>
                *         <note>
                *             <p>The AWS SDKs prepopulate client request tokens. If you are using an AWS SDK, an
                *                 idempotency token is created for you.</p>
                *         </note>
                */
            clientRequestToken?: string;
    }
    export namespace CreatePullRequestInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePullRequestInput) => any;
    }
    export enum PullRequestStatusEnum {
            CLOSED = "CLOSED",
            OPEN = "OPEN"
    }
    /**
        * <p>Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.</p>
        */
    export interface MergeMetadata {
            /**
                * <p>A Boolean value indicating whether the merge has been made.</p>
                */
            isMerged?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>
                */
            mergedBy?: string;
            /**
                * <p>The commit ID for the merge commit, if any.</p>
                */
            mergeCommitId?: string;
            /**
                * <p>The merge strategy used in the merge.</p>
                */
            mergeOption?: MergeOptionTypeEnum | string;
    }
    export namespace MergeMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeMetadata) => any;
    }
    /**
        * <p>Returns information about a pull request target.</p>
        */
    export interface PullRequestTarget {
            /**
                * <p>The name of the repository that contains the pull request source and destination branches.</p>
                */
            repositoryName?: string;
            /**
                * <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>
                */
            sourceReference?: string;
            /**
                * <p>The branch of the repository where the pull request changes are merged. Also known as
                *             the destination branch. </p>
                */
            destinationReference?: string;
            /**
                * <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>
                */
            destinationCommit?: string;
            /**
                * <p>The full commit ID of the tip of the source branch used to create the pull request. If
                *             the pull request branch is updated by a push while the pull request is open, the commit
                *             ID changes to reflect the new tip of the branch.</p>
                */
            sourceCommit?: string;
            /**
                * <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
                */
            mergeBase?: string;
            /**
                * <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>
                */
            mergeMetadata?: MergeMetadata;
    }
    export namespace PullRequestTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PullRequestTarget) => any;
    }
    /**
        * <p>Returns information about a pull request.</p>
        */
    export interface PullRequest {
            /**
                * <p>The system-generated ID of the pull request. </p>
                */
            pullRequestId?: string;
            /**
                * <p>The user-defined title of the pull request. This title is displayed in the list of
                *             pull requests to other repository users.</p>
                */
            title?: string;
            /**
                * <p>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</p>
                */
            description?: string;
            /**
                * <p>The day and time of the last user or system activity on the pull request, in timestamp format.</p>
                */
            lastActivityDate?: Date;
            /**
                * <p>The date and time the pull request was originally created, in timestamp format.</p>
                */
            creationDate?: Date;
            /**
                * <p>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</p>
                */
            pullRequestStatus?: PullRequestStatusEnum | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who created the pull request.</p>
                */
            authorArn?: string;
            /**
                * <p>The targets of the pull request, including the source branch and destination branch for the pull request.</p>
                */
            pullRequestTargets?: PullRequestTarget[];
            /**
                * <p>A unique, client-generated idempotency token that, when provided in a request, ensures
                *             the request cannot be repeated with a changed parameter. If a request is received with
                *             the same parameters and a token is included, the request returns information about the
                *             initial request that used that token.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The system-generated revision ID for the pull request.</p>
                */
            revisionId?: string;
            /**
                * <p>The approval rules applied to the pull request.</p>
                */
            approvalRules?: ApprovalRule[];
    }
    export namespace PullRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PullRequest) => any;
    }
    export interface CreatePullRequestOutput {
            /**
                * <p>Information about the newly created pull request.</p>
                */
            pullRequest: PullRequest | undefined;
    }
    export namespace CreatePullRequestOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePullRequestOutput) => any;
    }
    /**
        * <p>The client request token is not valid. Either the token is not in a valid format, or
        *             the token has been used in a previous request and cannot be reused.</p>
        */
    export class IdempotencyParameterMismatchException extends __BaseException {
            readonly name: "IdempotencyParameterMismatchException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IdempotencyParameterMismatchException, __BaseException>);
    }
    /**
        * <p>The client request token is not valid.</p>
        */
    export class InvalidClientRequestTokenException extends __BaseException {
            readonly name: "InvalidClientRequestTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidClientRequestTokenException, __BaseException>);
    }
    /**
        * <p>The pull request description is not valid. Descriptions cannot be more than 1,000
        *             characters.</p>
        */
    export class InvalidDescriptionException extends __BaseException {
            readonly name: "InvalidDescriptionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDescriptionException, __BaseException>);
    }
    /**
        * <p>The specified reference name format is not valid. Reference names must conform to the
        *             Git references format (for example, refs/heads/master). For more information, see <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-References">Git Internals -
        *                 Git References</a> or consult your Git documentation.</p>
        */
    export class InvalidReferenceNameException extends __BaseException {
            readonly name: "InvalidReferenceNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidReferenceNameException, __BaseException>);
    }
    /**
        * <p>The target for the pull request is not valid. A target must contain the full values for the repository name, source branch, and destination branch for the pull request.</p>
        */
    export class InvalidTargetException extends __BaseException {
            readonly name: "InvalidTargetException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTargetException, __BaseException>);
    }
    /**
        * <p>The targets for the pull request is not valid or not in a valid format. Targets are a list of target objects. Each target object must contain the full values for
        *             the repository name, source branch, and destination branch for a pull request.</p>
        */
    export class InvalidTargetsException extends __BaseException {
            readonly name: "InvalidTargetsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTargetsException, __BaseException>);
    }
    /**
        * <p>The title of the pull request is not valid. Pull request titles cannot exceed 100 characters in length.</p>
        */
    export class InvalidTitleException extends __BaseException {
            readonly name: "InvalidTitleException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTitleException, __BaseException>);
    }
    /**
        * <p>You cannot create the pull request because the repository has too many open pull requests.
        *             The maximum number of open pull requests for a repository is 1,000. Close one or more open pull requests, and then try again.</p>
        */
    export class MaximumOpenPullRequestsExceededException extends __BaseException {
            readonly name: "MaximumOpenPullRequestsExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumOpenPullRequestsExceededException, __BaseException>);
    }
    /**
        * <p>You cannot include more than one repository in a pull request. Make sure you have specified only one repository name in your request, and then try again.</p>
        */
    export class MultipleRepositoriesInPullRequestException extends __BaseException {
            readonly name: "MultipleRepositoriesInPullRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MultipleRepositoriesInPullRequestException, __BaseException>);
    }
    /**
        * <p>The specified reference does not exist. You must provide a full commit ID.</p>
        */
    export class ReferenceDoesNotExistException extends __BaseException {
            readonly name: "ReferenceDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReferenceDoesNotExistException, __BaseException>);
    }
    /**
        * <p>A reference name is required, but none was provided.</p>
        */
    export class ReferenceNameRequiredException extends __BaseException {
            readonly name: "ReferenceNameRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReferenceNameRequiredException, __BaseException>);
    }
    /**
        * <p>The specified reference is not a supported type. </p>
        */
    export class ReferenceTypeNotSupportedException extends __BaseException {
            readonly name: "ReferenceTypeNotSupportedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReferenceTypeNotSupportedException, __BaseException>);
    }
    /**
        * <p>The source branch and destination branch for the pull request are the same. You must
        *             specify different branches for the source and destination.</p>
        */
    export class SourceAndDestinationAreSameException extends __BaseException {
            readonly name: "SourceAndDestinationAreSameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SourceAndDestinationAreSameException, __BaseException>);
    }
    /**
        * <p>A pull request target is required. It cannot be empty or null. A pull request target must contain the full values for the repository name, source branch, and destination branch for the pull request.</p>
        */
    export class TargetRequiredException extends __BaseException {
            readonly name: "TargetRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TargetRequiredException, __BaseException>);
    }
    /**
        * <p>An array of target objects is required. It cannot be empty or null.</p>
        */
    export class TargetsRequiredException extends __BaseException {
            readonly name: "TargetsRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TargetsRequiredException, __BaseException>);
    }
    /**
        * <p>A pull request title is required. It cannot be empty or null.</p>
        */
    export class TitleRequiredException extends __BaseException {
            readonly name: "TitleRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TitleRequiredException, __BaseException>);
    }
    export interface CreatePullRequestApprovalRuleInput {
            /**
                * <p>The system-generated ID of the pull request for which you want to create the approval rule.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name for the approval rule.</p>
                */
            approvalRuleName: string | undefined;
            /**
                * <p>The content of the approval rule, including the number of approvals needed and the structure of an approval pool defined for approvals, if any. For more information
                *         about approval pools, see the AWS CodeCommit User Guide.</p>
                *         <note>
                *             <p>When you create the content of the approval rule, you can specify approvers in an
                *                 approval pool in one of two ways:</p>
                *             <ul>
                *                <li>
                *                     <p>
                *                      <b>CodeCommitApprovers</b>: This option only
                *                         requires an AWS account and a resource. It can be used for both IAM users
                *                         and federated access users whose name matches the provided resource name.
                *                         This is a very powerful option that offers a great deal of flexibility. For
                *                         example, if you specify the AWS account <i>123456789012</i>
                *                         and <i>Mary_Major</i>, all of the following would be counted
                *                         as approvals coming from that user:</p>
                *                     <ul>
                *                      <li>
                *                             <p>An IAM user in the account
                *                                     (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p>
                *                         </li>
                *                      <li>
                *                             <p>A federated user identified in IAM as Mary_Major
                *                                     (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p>
                *                         </li>
                *                   </ul>
                *                     <p>This option does not recognize an active session of someone assuming the
                *                         role of CodeCommitReview with a role session name of
                *                             <i>Mary_Major</i>
                *                             (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>)
                *                         unless you include a wildcard (*Mary_Major).</p>
                *                 </li>
                *                <li>
                *                     <p>
                *                      <b>Fully qualified ARN</b>: This option allows
                *                         you to specify the fully qualified Amazon Resource Name (ARN) of the IAM
                *                         user or role. </p>
                *                 </li>
                *             </ul>
                *             <p>For more information about IAM ARNs, wildcards, and formats, see
                *                <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM
                *                 Identifiers</a> in the <i>IAM User Guide</i>.</p>
                *
                *         </note>
                */
            approvalRuleContent: string | undefined;
    }
    export namespace CreatePullRequestApprovalRuleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePullRequestApprovalRuleInput) => any;
    }
    export interface CreatePullRequestApprovalRuleOutput {
            /**
                * <p>Information about the created approval rule.</p>
                */
            approvalRule: ApprovalRule | undefined;
    }
    export namespace CreatePullRequestApprovalRuleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePullRequestApprovalRuleOutput) => any;
    }
    /**
        * <p>The content for the approval rule is not valid.</p>
        */
    export class InvalidApprovalRuleContentException extends __BaseException {
            readonly name: "InvalidApprovalRuleContentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidApprovalRuleContentException, __BaseException>);
    }
    /**
        * <p>The name for the approval rule is not valid.</p>
        */
    export class InvalidApprovalRuleNameException extends __BaseException {
            readonly name: "InvalidApprovalRuleNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidApprovalRuleNameException, __BaseException>);
    }
    /**
        * <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>
        */
    export class InvalidPullRequestIdException extends __BaseException {
            readonly name: "InvalidPullRequestIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPullRequestIdException, __BaseException>);
    }
    /**
        * <p>The approval rule cannot be added. The pull request has the maximum number of approval rules associated with it.</p>
        */
    export class NumberOfRulesExceededException extends __BaseException {
            readonly name: "NumberOfRulesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NumberOfRulesExceededException, __BaseException>);
    }
    /**
        * <p>The pull request status cannot be updated because it is already closed.</p>
        */
    export class PullRequestAlreadyClosedException extends __BaseException {
            readonly name: "PullRequestAlreadyClosedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PullRequestAlreadyClosedException, __BaseException>);
    }
    /**
        * <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>
        */
    export class PullRequestDoesNotExistException extends __BaseException {
            readonly name: "PullRequestDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PullRequestDoesNotExistException, __BaseException>);
    }
    /**
        * <p>A pull request ID is required, but none was provided.</p>
        */
    export class PullRequestIdRequiredException extends __BaseException {
            readonly name: "PullRequestIdRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PullRequestIdRequiredException, __BaseException>);
    }
    /**
        * <p>Represents the input of a create repository operation.</p>
        */
    export interface CreateRepositoryInput {
            /**
                * <p>The name of the new repository to be created.</p>
                *         <note>
                *             <p>The repository name must be unique across the calling AWS account. Repository names
                *                 are limited to 100 alphanumeric, dash, and underscore characters, and cannot include
                *                 certain characters. For more information about the limits on repository names, see
                *                     <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the <i>AWS CodeCommit User Guide</i>. The
                *                 suffix .git is prohibited.</p>
                *          </note>
                */
            repositoryName: string | undefined;
            /**
                * <p>A comment or description about the new repository.</p>
                *         <note>
                *             <p>The description field for a repository accepts all HTML characters and all valid
                *                 Unicode characters. Applications that do not HTML-encode the description and display
                *                 it in a webpage can expose users to potentially malicious code. Make sure that you
                *                 HTML-encode the description field in any application that uses this API to display
                *                 the repository description on a webpage.</p>
                *          </note>
                */
            repositoryDescription?: string;
            /**
                * <p>One or more tag key-value pairs to use when tagging this repository.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRepositoryInput) => any;
    }
    /**
        * <p>Represents the output of a create repository operation.</p>
        */
    export interface CreateRepositoryOutput {
            /**
                * <p>Information about the newly created repository.</p>
                */
            repositoryMetadata?: RepositoryMetadata;
    }
    export namespace CreateRepositoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRepositoryOutput) => any;
    }
    /**
        * <p>The specified repository description is not valid.</p>
        */
    export class InvalidRepositoryDescriptionException extends __BaseException {
            readonly name: "InvalidRepositoryDescriptionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryDescriptionException, __BaseException>);
    }
    /**
        * <p>The specified tag is not valid. Key names cannot be prefixed with aws:.</p>
        */
    export class InvalidSystemTagUsageException extends __BaseException {
            readonly name: "InvalidSystemTagUsageException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSystemTagUsageException, __BaseException>);
    }
    /**
        * <p>The map of tags is not valid.</p>
        */
    export class InvalidTagsMapException extends __BaseException {
            readonly name: "InvalidTagsMapException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTagsMapException, __BaseException>);
    }
    /**
        * <p>A repository resource limit was exceeded.</p>
        */
    export class RepositoryLimitExceededException extends __BaseException {
            readonly name: "RepositoryLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryLimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified repository name already exists.</p>
        */
    export class RepositoryNameExistsException extends __BaseException {
            readonly name: "RepositoryNameExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryNameExistsException, __BaseException>);
    }
    /**
        * <p>The tag policy is not valid.</p>
        */
    export class TagPolicyException extends __BaseException {
            readonly name: "TagPolicyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagPolicyException, __BaseException>);
    }
    /**
        * <p>The maximum number of tags for an AWS CodeCommit resource has been exceeded.</p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    /**
        * <p>The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.</p>
        */
    export class ConcurrentReferenceUpdateException extends __BaseException {
            readonly name: "ConcurrentReferenceUpdateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentReferenceUpdateException, __BaseException>);
    }
    export enum ReplacementTypeEnum {
            KEEP_BASE = "KEEP_BASE",
            KEEP_DESTINATION = "KEEP_DESTINATION",
            KEEP_SOURCE = "KEEP_SOURCE",
            USE_NEW_CONTENT = "USE_NEW_CONTENT"
    }
    /**
        * <p>Information about a replacement content entry in the conflict of a merge or pull request operation.</p>
        */
    export interface ReplaceContentEntry {
            /**
                * <p>The path of the conflicting file.</p>
                */
            filePath: string | undefined;
            /**
                * <p>The replacement type to use when determining how to resolve the conflict.</p>
                */
            replacementType: ReplacementTypeEnum | string | undefined;
            /**
                * <p>The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.</p>
                */
            content?: Uint8Array;
            /**
                * <p>The file mode to apply during conflict resoltion.</p>
                */
            fileMode?: FileModeTypeEnum | string;
    }
    export namespace ReplaceContentEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplaceContentEntry) => any;
    }
    /**
        * <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
        *             resolving conflicts during a merge.</p>
        */
    export interface ConflictResolution {
            /**
                * <p>Files to have content replaced as part of the merge conflict resolution.</p>
                */
            replaceContents?: ReplaceContentEntry[];
            /**
                * <p>Files to be deleted as part of the merge conflict resolution.</p>
                */
            deleteFiles?: DeleteFileEntry[];
            /**
                * <p>File modes that are set as part of the merge conflict resolution.</p>
                */
            setFileModes?: SetFileModeEntry[];
    }
    export namespace ConflictResolution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConflictResolution) => any;
    }
    export interface CreateUnreferencedMergeCommitInput {
            /**
                * <p>The name of the repository where you want to create the unreferenced merge commit.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The merge option or strategy you want to use to merge the code.</p>
                */
            mergeOption: MergeOptionTypeEnum | string | undefined;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>The name of the author who created the unreferenced commit. This information is used
                *             as both the author and committer for the commit.</p>
                */
            authorName?: string;
            /**
                * <p>The email address for the person who created the unreferenced commit.</p>
                */
            email?: string;
            /**
                * <p>The commit message for the unreferenced commit.</p>
                */
            commitMessage?: string;
            /**
                * <p>If the commit contains deletions, whether to keep a folder or folder structure if the
                *             changes leave the folders empty. If this is specified as true, a .gitkeep file is
                *             created for empty folders. The default is false.</p>
                */
            keepEmptyFolders?: boolean;
            /**
                * <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
                *             resolving conflicts during a merge.</p>
                */
            conflictResolution?: ConflictResolution;
    }
    export namespace CreateUnreferencedMergeCommitInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUnreferencedMergeCommitInput) => any;
    }
    export interface CreateUnreferencedMergeCommitOutput {
            /**
                * <p>The full commit ID of the commit that contains your merge results.</p>
                */
            commitId?: string;
            /**
                * <p>The full SHA-1 pointer of the tree information for the commit that contains the merge results.</p>
                */
            treeId?: string;
    }
    export namespace CreateUnreferencedMergeCommitOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUnreferencedMergeCommitOutput) => any;
    }
    /**
        * <p>The specified conflict resolution list is not valid.</p>
        */
    export class InvalidConflictResolutionException extends __BaseException {
            readonly name: "InvalidConflictResolutionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidConflictResolutionException, __BaseException>);
    }
    /**
        * <p>Automerge was specified for resolving the conflict, but the replacement type is not valid or content is missing. </p>
        */
    export class InvalidReplacementContentException extends __BaseException {
            readonly name: "InvalidReplacementContentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidReplacementContentException, __BaseException>);
    }
    /**
        * <p>Automerge was specified for resolving the conflict, but the specified replacement type is not valid.</p>
        */
    export class InvalidReplacementTypeException extends __BaseException {
            readonly name: "InvalidReplacementTypeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidReplacementTypeException, __BaseException>);
    }
    /**
        * <p>The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.</p>
        */
    export class ManualMergeRequiredException extends __BaseException {
            readonly name: "ManualMergeRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ManualMergeRequiredException, __BaseException>);
    }
    /**
        * <p>The number of allowed conflict resolution entries was exceeded.</p>
        */
    export class MaximumConflictResolutionEntriesExceededException extends __BaseException {
            readonly name: "MaximumConflictResolutionEntriesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumConflictResolutionEntriesExceededException, __BaseException>);
    }
    /**
        * <p>More than one conflict resolution entries exists for the conflict. A conflict can have only one conflict resolution entry.</p>
        */
    export class MultipleConflictResolutionEntriesException extends __BaseException {
            readonly name: "MultipleConflictResolutionEntriesException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MultipleConflictResolutionEntriesException, __BaseException>);
    }
    /**
        * <p>USE_NEW_CONTENT was specified, but no replacement content has been provided.</p>
        */
    export class ReplacementContentRequiredException extends __BaseException {
            readonly name: "ReplacementContentRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReplacementContentRequiredException, __BaseException>);
    }
    /**
        * <p>A replacement type is required.</p>
        */
    export class ReplacementTypeRequiredException extends __BaseException {
            readonly name: "ReplacementTypeRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReplacementTypeRequiredException, __BaseException>);
    }
    export interface DeleteApprovalRuleTemplateInput {
            /**
                * <p>The name of the approval rule template to delete.</p>
                */
            approvalRuleTemplateName: string | undefined;
    }
    export namespace DeleteApprovalRuleTemplateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApprovalRuleTemplateInput) => any;
    }
    export interface DeleteApprovalRuleTemplateOutput {
            /**
                * <p>The system-generated ID of the deleted approval rule template. If the template has
                *             been previously deleted, the only response is a 200 OK.</p>
                */
            approvalRuleTemplateId: string | undefined;
    }
    export namespace DeleteApprovalRuleTemplateOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApprovalRuleTemplateOutput) => any;
    }
    /**
        * <p>The specified branch is the default branch for the repository, and cannot be deleted. To delete this branch, you must first set another branch as the default branch.</p>
        */
    export class DefaultBranchCannotBeDeletedException extends __BaseException {
            readonly name: "DefaultBranchCannotBeDeletedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DefaultBranchCannotBeDeletedException, __BaseException>);
    }
    /**
        * <p>Represents the input of a delete branch operation.</p>
        */
    export interface DeleteBranchInput {
            /**
                * <p>The name of the repository that contains the branch to be deleted.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The name of the branch to delete.</p>
                */
            branchName: string | undefined;
    }
    export namespace DeleteBranchInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBranchInput) => any;
    }
    /**
        * <p>Represents the output of a delete branch operation.</p>
        */
    export interface DeleteBranchOutput {
            /**
                * <p>Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.</p>
                */
            deletedBranch?: BranchInfo;
    }
    export namespace DeleteBranchOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBranchOutput) => any;
    }
    /**
        * <p>This comment has already been deleted. You cannot edit or delete a deleted comment.</p>
        */
    export class CommentDeletedException extends __BaseException {
            readonly name: "CommentDeletedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommentDeletedException, __BaseException>);
    }
    /**
        * <p>No comment exists with the provided ID. Verify that you have used the correct ID, and
        *             then try again.</p>
        */
    export class CommentDoesNotExistException extends __BaseException {
            readonly name: "CommentDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommentDoesNotExistException, __BaseException>);
    }
    /**
        * <p>The comment ID is missing or null. A comment ID is required.</p>
        */
    export class CommentIdRequiredException extends __BaseException {
            readonly name: "CommentIdRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommentIdRequiredException, __BaseException>);
    }
    export interface DeleteCommentContentInput {
            /**
                * <p>The unique, system-generated ID of the comment. To get this ID, use  <a>GetCommentsForComparedCommit</a>
                *          or <a>GetCommentsForPullRequest</a>.</p>
                */
            commentId: string | undefined;
    }
    export namespace DeleteCommentContentInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCommentContentInput) => any;
    }
    /**
        * <p>Returns information about a specific comment.</p>
        */
    export interface Comment {
            /**
                * <p>The system-generated comment ID.</p>
                */
            commentId?: string;
            /**
                * <p>The content of the comment.</p>
                */
            content?: string;
            /**
                * <p>The ID of the comment for which this comment is a reply, if any.</p>
                */
            inReplyTo?: string;
            /**
                * <p>The date and time the comment was created, in timestamp format.</p>
                */
            creationDate?: Date;
            /**
                * <p>The date and time the comment was most recently modified, in timestamp format.</p>
                */
            lastModifiedDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>
                */
            authorArn?: string;
            /**
                * <p>A Boolean value indicating whether the comment has been deleted.</p>
                */
            deleted?: boolean;
            /**
                * <p>A unique, client-generated idempotency token that, when provided in a request, ensures
                *             the request cannot be repeated with a changed parameter. If a request is received with
                *             the same parameters and a token is included, the request returns information about the
                *             initial request that used that token.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.</p>
                */
            callerReactions?: string[];
            /**
                * <p>A string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.</p>
                */
            reactionCounts?: Record<string, number>;
    }
    export namespace Comment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Comment) => any;
    }
    export interface DeleteCommentContentOutput {
            /**
                * <p>Information about the comment you just deleted.</p>
                */
            comment?: Comment;
    }
    export namespace DeleteCommentContentOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCommentContentOutput) => any;
    }
    /**
        * <p>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</p>
        */
    export class InvalidCommentIdException extends __BaseException {
            readonly name: "InvalidCommentIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCommentIdException, __BaseException>);
    }
    export interface DeleteFileInput {
            /**
                * <p>The name of the repository that contains the file to delete.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The name of the branch where the commit that deletes the file is made.</p>
                */
            branchName: string | undefined;
            /**
                * <p>The fully qualified path to the file that to be deleted, including the full name and
                *             extension of that file. For example, /examples/file.md is a fully qualified path to a
                *             file named file.md in a folder named examples.</p>
                */
            filePath: string | undefined;
            /**
                * <p>The ID of the commit that is the tip of the branch where you want to create the commit
                *             that deletes the file. This must be the HEAD commit for the branch. The commit that
                *             deletes the file is created from this commit ID.</p>
                */
            parentCommitId: string | undefined;
            /**
                * <p>If a file is the only object in the folder or directory, specifies whether to delete
                *             the folder or directory that contains the file. By default, empty folders are deleted.
                *             This includes empty folders that are part of the directory structure. For example, if
                *             the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the
                *             last file in dir4 also deletes the empty folders dir4, dir3, and dir2.</p>
                */
            keepEmptyFolders?: boolean;
            /**
                * <p>The commit message you want to include as part of deleting the file. Commit messages
                *             are limited to 256 KB. If no message is specified, a default message is used.</p>
                */
            commitMessage?: string;
            /**
                * <p>The name of the author of the commit that deletes the file. If no name is specified,
                *             the user's ARN is used as the author name and committer name.</p>
                */
            name?: string;
            /**
                * <p>The email address for the commit that deletes the file. If no email address is
                *             specified, the email address is left blank.</p>
                */
            email?: string;
    }
    export namespace DeleteFileInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFileInput) => any;
    }
    export interface DeleteFileOutput {
            /**
                * <p>The full commit ID of the commit that contains the change that deletes the file.</p>
                */
            commitId: string | undefined;
            /**
                * <p>The blob ID removed from the tree as part of deleting the file.</p>
                */
            blobId: string | undefined;
            /**
                * <p>The full SHA-1 pointer of the tree information for the commit that contains the delete file change.</p>
                */
            treeId: string | undefined;
            /**
                * <p>The fully qualified path to the file to be deleted, including the full name and
                *             extension of that file.</p>
                */
            filePath: string | undefined;
    }
    export namespace DeleteFileOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFileOutput) => any;
    }
    export interface DeletePullRequestApprovalRuleInput {
            /**
                * <p>The system-generated ID of the pull request that contains the approval rule you want to delete.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name of the approval rule you want to delete.</p>
                */
            approvalRuleName: string | undefined;
    }
    export namespace DeletePullRequestApprovalRuleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePullRequestApprovalRuleInput) => any;
    }
    export interface DeletePullRequestApprovalRuleOutput {
            /**
                * <p>The ID of the deleted approval rule. </p>
                *         <note>
                *             <p>If the approval rule was deleted in an earlier API call, the response is 200 OK without
                *                 content.</p>
                *          </note>
                */
            approvalRuleId: string | undefined;
    }
    export namespace DeletePullRequestApprovalRuleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePullRequestApprovalRuleOutput) => any;
    }
    /**
        * <p>Represents the input of a delete repository operation.</p>
        */
    export interface DeleteRepositoryInput {
            /**
                * <p>The name of the repository to delete.</p>
                */
            repositoryName: string | undefined;
    }
    export namespace DeleteRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRepositoryInput) => any;
    }
    /**
        * <p>Represents the output of a delete repository operation.</p>
        */
    export interface DeleteRepositoryOutput {
            /**
                * <p>The ID of the repository that was deleted.</p>
                */
            repositoryId?: string;
    }
    export namespace DeleteRepositoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRepositoryOutput) => any;
    }
    export interface DescribeMergeConflictsInput {
            /**
                * <p>The name of the repository where you want to get information about a merge conflict.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The merge option or strategy you want to use to merge the code.</p>
                */
            mergeOption: MergeOptionTypeEnum | string | undefined;
            /**
                * <p>The maximum number of merge hunks to include in the output.</p>
                */
            maxMergeHunks?: number;
            /**
                * <p>The path of the target files used to describe the conflicts. </p>
                */
            filePath: string | undefined;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeMergeConflictsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMergeConflictsInput) => any;
    }
    export interface DescribeMergeConflictsOutput {
            /**
                * <p>Contains metadata about the conflicts found in the merge.</p>
                */
            conflictMetadata: ConflictMetadata | undefined;
            /**
                * <p>A list of merge hunks of the differences between the files or lines.</p>
                */
            mergeHunks: MergeHunk[] | undefined;
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            nextToken?: string;
            /**
                * <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
                */
            destinationCommitId: string | undefined;
            /**
                * <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
                */
            sourceCommitId: string | undefined;
            /**
                * <p>The commit ID of the merge base.</p>
                */
            baseCommitId?: string;
    }
    export namespace DescribeMergeConflictsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMergeConflictsOutput) => any;
    }
    export enum PullRequestEventType {
            PULL_REQUEST_APPROVAL_RULE_CREATED = "PULL_REQUEST_APPROVAL_RULE_CREATED",
            PULL_REQUEST_APPROVAL_RULE_DELETED = "PULL_REQUEST_APPROVAL_RULE_DELETED",
            PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN = "PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN",
            PULL_REQUEST_APPROVAL_RULE_UPDATED = "PULL_REQUEST_APPROVAL_RULE_UPDATED",
            PULL_REQUEST_APPROVAL_STATE_CHANGED = "PULL_REQUEST_APPROVAL_STATE_CHANGED",
            PULL_REQUEST_CREATED = "PULL_REQUEST_CREATED",
            PULL_REQUEST_MERGE_STATE_CHANGED = "PULL_REQUEST_MERGE_STATE_CHANGED",
            PULL_REQUEST_SOURCE_REFERENCE_UPDATED = "PULL_REQUEST_SOURCE_REFERENCE_UPDATED",
            PULL_REQUEST_STATUS_CHANGED = "PULL_REQUEST_STATUS_CHANGED"
    }
    export interface DescribePullRequestEventsInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>Optional. The pull request event type about which you want to return information.</p>
                */
            pullRequestEventType?: PullRequestEventType | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user whose actions resulted in the event.
                *             Examples include updating the pull request with more commits or changing the status of a
                *             pull request.</p>
                */
            actorArn?: string;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results.
                *             The default is 100 events, which is also the maximum number of events that can be returned in a result.</p>
                */
            maxResults?: number;
    }
    export namespace DescribePullRequestEventsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePullRequestEventsInput) => any;
    }
    /**
        * <p>Metadata about the pull request that is used when comparing the pull request source with its destination.</p>
        */
    export interface PullRequestCreatedEventMetadata {
            /**
                * <p>The name of the repository where the pull request was created.</p>
                */
            repositoryName?: string;
            /**
                * <p>The commit ID on the source branch used when the pull request was created.</p>
                */
            sourceCommitId?: string;
            /**
                * <p>The commit ID of the tip of the branch specified as the destination branch when the pull request was created.</p>
                */
            destinationCommitId?: string;
            /**
                * <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
                */
            mergeBase?: string;
    }
    export namespace PullRequestCreatedEventMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PullRequestCreatedEventMetadata) => any;
    }
    /**
        * <p>Returns information about the change in the merge state for a pull request event. </p>
        */
    export interface PullRequestMergedStateChangedEventMetadata {
            /**
                * <p>The name of the repository where the pull request was created.</p>
                */
            repositoryName?: string;
            /**
                * <p>The name of the branch that the pull request is merged into.</p>
                */
            destinationReference?: string;
            /**
                * <p>Information about the merge state change event.</p>
                */
            mergeMetadata?: MergeMetadata;
    }
    export namespace PullRequestMergedStateChangedEventMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PullRequestMergedStateChangedEventMetadata) => any;
    }
    /**
        * <p>Information about an update to the source branch of a pull request.</p>
        */
    export interface PullRequestSourceReferenceUpdatedEventMetadata {
            /**
                * <p>The name of the repository where the pull request was updated.</p>
                */
            repositoryName?: string;
            /**
                * <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</p>
                */
            afterCommitId?: string;
            /**
                * <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
                */
            mergeBase?: string;
    }
    export namespace PullRequestSourceReferenceUpdatedEventMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PullRequestSourceReferenceUpdatedEventMetadata) => any;
    }
    /**
        * <p>Information about a change to the status of a pull request.</p>
        */
    export interface PullRequestStatusChangedEventMetadata {
            /**
                * <p>The changed status of the pull request.</p>
                */
            pullRequestStatus?: PullRequestStatusEnum | string;
    }
    export namespace PullRequestStatusChangedEventMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PullRequestStatusChangedEventMetadata) => any;
    }
    /**
        * <p>Returns information about a pull request event.</p>
        */
    export interface PullRequestEvent {
            /**
                * <p>The system-generated ID of the pull request.</p>
                */
            pullRequestId?: string;
            /**
                * <p>The day and time of the pull request event, in timestamp format.</p>
                */
            eventDate?: Date;
            /**
                * <p>The type of the pull request event (for example, a status change event
                *             (PULL_REQUEST_STATUS_CHANGED) or update event
                *             (PULL_REQUEST_SOURCE_REFERENCE_UPDATED)).</p>
                */
            pullRequestEventType?: PullRequestEventType | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user whose actions resulted in the event.
                *             Examples include updating the pull request with more commits or changing the status of a
                *             pull request.</p>
                */
            actorArn?: string;
            /**
                * <p>Information about the source and destination branches for the pull request.</p>
                */
            pullRequestCreatedEventMetadata?: PullRequestCreatedEventMetadata;
            /**
                * <p>Information about the change in status for the pull request event.</p>
                */
            pullRequestStatusChangedEventMetadata?: PullRequestStatusChangedEventMetadata;
            /**
                * <p>Information about the updated source branch for the pull request event. </p>
                */
            pullRequestSourceReferenceUpdatedEventMetadata?: PullRequestSourceReferenceUpdatedEventMetadata;
            /**
                * <p>Information about the change in mergability state for the pull request event.</p>
                */
            pullRequestMergedStateChangedEventMetadata?: PullRequestMergedStateChangedEventMetadata;
            /**
                * <p>Information about a pull request event.</p>
                */
            approvalRuleEventMetadata?: ApprovalRuleEventMetadata;
            /**
                * <p>Information about an approval state change for a pull request.</p>
                */
            approvalStateChangedEventMetadata?: ApprovalStateChangedEventMetadata;
            /**
                * <p>Information about an approval rule override event for a pull request.</p>
                */
            approvalRuleOverriddenEventMetadata?: ApprovalRuleOverriddenEventMetadata;
    }
    export namespace PullRequestEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PullRequestEvent) => any;
    }
    export interface DescribePullRequestEventsOutput {
            /**
                * <p>Information about the pull request events.</p>
                */
            pullRequestEvents: PullRequestEvent[] | undefined;
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            nextToken?: string;
    }
    export namespace DescribePullRequestEventsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePullRequestEventsOutput) => any;
    }
    /**
        * <p>The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the user who initiated the change for the pull request,
        *             and then try again.</p>
        */
    export class InvalidActorArnException extends __BaseException {
            readonly name: "InvalidActorArnException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidActorArnException, __BaseException>);
    }
    /**
        * <p>The specified number of maximum results is not valid.</p>
        */
    export class InvalidMaxResultsException extends __BaseException {
            readonly name: "InvalidMaxResultsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidMaxResultsException, __BaseException>);
    }
    /**
        * <p>The pull request event type is not valid. </p>
        */
    export class InvalidPullRequestEventTypeException extends __BaseException {
            readonly name: "InvalidPullRequestEventTypeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPullRequestEventTypeException, __BaseException>);
    }
    export interface DisassociateApprovalRuleTemplateFromRepositoryInput {
            /**
                * <p>The name of the approval rule template to disassociate from a specified repository.</p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>The name of the repository you want to disassociate from the template.</p>
                */
            repositoryName: string | undefined;
    }
    export namespace DisassociateApprovalRuleTemplateFromRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateApprovalRuleTemplateFromRepositoryInput) => any;
    }
    export interface EvaluatePullRequestApprovalRulesInput {
            /**
                * <p>The system-generated ID of the pull request you want to evaluate.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The system-generated ID for the pull request revision. To retrieve the most recent
                *             revision ID for a pull request, use
                *             <a>GetPullRequest</a>.</p>
                */
            revisionId: string | undefined;
    }
    export namespace EvaluatePullRequestApprovalRulesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluatePullRequestApprovalRulesInput) => any;
    }
    /**
        * <p>Returns information about the approval rules applied to a pull request and whether conditions have been met.</p>
        */
    export interface Evaluation {
            /**
                * <p>Whether the state of the pull request is approved.</p>
                */
            approved?: boolean;
            /**
                * <p>Whether the approval rule requirements for the pull request have been overridden and no longer need to be met.</p>
                */
            overridden?: boolean;
            /**
                * <p>The names of the approval rules that have had their conditions met.</p>
                */
            approvalRulesSatisfied?: string[];
            /**
                * <p>The names of the approval rules that have not had their conditions met.</p>
                */
            approvalRulesNotSatisfied?: string[];
    }
    export namespace Evaluation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Evaluation) => any;
    }
    export interface EvaluatePullRequestApprovalRulesOutput {
            /**
                * <p>The result of the evaluation, including the names of the rules whose conditions have been met (if any), the names of the rules whose conditions have
                *         not been met (if any), whether the pull request is in the approved state, and whether the pull request approval rule has been set aside by an override. </p>
                */
            evaluation: Evaluation | undefined;
    }
    export namespace EvaluatePullRequestApprovalRulesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluatePullRequestApprovalRulesOutput) => any;
    }
    /**
        * <p>The revision ID is not valid. Use GetPullRequest to determine the value.</p>
        */
    export class InvalidRevisionIdException extends __BaseException {
            readonly name: "InvalidRevisionIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRevisionIdException, __BaseException>);
    }
    /**
        * <p>A revision ID is required, but was not provided.</p>
        */
    export class RevisionIdRequiredException extends __BaseException {
            readonly name: "RevisionIdRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RevisionIdRequiredException, __BaseException>);
    }
    /**
        * <p>The revision ID provided in the request does not match the current revision ID. Use GetPullRequest to retrieve the current revision ID.</p>
        */
    export class RevisionNotCurrentException extends __BaseException {
            readonly name: "RevisionNotCurrentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RevisionNotCurrentException, __BaseException>);
    }
    export interface GetApprovalRuleTemplateInput {
            /**
                * <p>The name of the approval rule template for which you want to get information.</p>
                */
            approvalRuleTemplateName: string | undefined;
    }
    export namespace GetApprovalRuleTemplateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApprovalRuleTemplateInput) => any;
    }
    export interface GetApprovalRuleTemplateOutput {
            /**
                * <p>The content and structure of the approval rule template.</p>
                */
            approvalRuleTemplate: ApprovalRuleTemplate | undefined;
    }
    export namespace GetApprovalRuleTemplateOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApprovalRuleTemplateOutput) => any;
    }
    /**
        * <p>The specified file exceeds the file size limit for AWS CodeCommit. For more information about limits in AWS CodeCommit, see
        *             <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">AWS CodeCommit User Guide</a>.</p>
        */
    export class FileTooLargeException extends __BaseException {
            readonly name: "FileTooLargeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileTooLargeException, __BaseException>);
    }
    /**
        * <p>Represents the input of a get blob operation.</p>
        */
    export interface GetBlobInput {
            /**
                * <p>The name of the repository that contains the blob.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The ID of the blob, which is its SHA-1 pointer.</p>
                */
            blobId: string | undefined;
    }
    export namespace GetBlobInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlobInput) => any;
    }
    /**
        * <p>Represents the output of a get blob operation.</p>
        */
    export interface GetBlobOutput {
            /**
                * <p>The content of the blob, usually a file.</p>
                */
            content: Uint8Array | undefined;
    }
    export namespace GetBlobOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlobOutput) => any;
    }
    /**
        * <p>The specified blob is not valid.</p>
        */
    export class InvalidBlobIdException extends __BaseException {
            readonly name: "InvalidBlobIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidBlobIdException, __BaseException>);
    }
    /**
        * <p>Represents the input of a get branch operation.</p>
        */
    export interface GetBranchInput {
            /**
                * <p>The name of the repository that contains the branch for which you want to retrieve information.</p>
                */
            repositoryName?: string;
            /**
                * <p>The name of the branch for which you want to retrieve information.</p>
                */
            branchName?: string;
    }
    export namespace GetBranchInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBranchInput) => any;
    }
    /**
        * <p>Represents the output of a get branch operation.</p>
        */
    export interface GetBranchOutput {
            /**
                * <p>The name of the branch.</p>
                */
            branch?: BranchInfo;
    }
    export namespace GetBranchOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBranchOutput) => any;
    }
    export interface GetCommentInput {
            /**
                * <p>The unique, system-generated ID of the comment. To get this ID, use  <a>GetCommentsForComparedCommit</a>
                *             or <a>GetCommentsForPullRequest</a>.</p>
                */
            commentId: string | undefined;
    }
    export namespace GetCommentInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentInput) => any;
    }
    export interface GetCommentOutput {
            /**
                * <p>The contents of the comment.</p>
                */
            comment?: Comment;
    }
    export namespace GetCommentOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentOutput) => any;
    }
    export interface GetCommentReactionsInput {
            /**
                * <p>The ID of the comment for which you want to get reactions information.</p>
                */
            commentId: string | undefined;
            /**
                * <p>Optional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information.</p>
                */
            reactionUserArn?: string;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the results. </p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results.  The default is the same as the allowed maximum, 1,000.</p>
                */
            maxResults?: number;
    }
    export namespace GetCommentReactionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentReactionsInput) => any;
    }
    /**
        * <p>Information about the values for reactions to a comment. AWS CodeCommit supports a limited set of reactions.</p>
        */
    export interface ReactionValueFormats {
            /**
                * <p>The Emoji Version 1.0 graphic of the reaction. These graphics are interpreted slightly differently on different operating systems.</p>
                */
            emoji?: string;
            /**
                * <p>The emoji short code for the reaction. Short codes are interpreted slightly differently on different operating systems. </p>
                */
            shortCode?: string;
            /**
                * <p>The Unicode codepoint for the reaction.</p>
                */
            unicode?: string;
    }
    export namespace ReactionValueFormats {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReactionValueFormats) => any;
    }
    /**
        * <p>Information about the reaction values provided by users on a comment.</p>
        */
    export interface ReactionForComment {
            /**
                * <p>The reaction for a specified comment.</p>
                */
            reaction?: ReactionValueFormats;
            /**
                * <p>The Amazon Resource Names (ARNs) of users who have provided reactions to the comment.</p>
                */
            reactionUsers?: string[];
            /**
                * <p>A numerical count of users who reacted with the specified emoji whose identities have been subsequently deleted
                *             from IAM. While these IAM users or roles no longer exist, the reactions might still appear in total reaction counts.</p>
                */
            reactionsFromDeletedUsersCount?: number;
    }
    export namespace ReactionForComment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReactionForComment) => any;
    }
    export interface GetCommentReactionsOutput {
            /**
                * <p>An array of reactions to the specified comment.</p>
                */
            reactionsForComment: ReactionForComment[] | undefined;
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            nextToken?: string;
    }
    export namespace GetCommentReactionsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentReactionsOutput) => any;
    }
    /**
        * <p>The Amazon Resource Name (ARN) of the user or identity is not valid.</p>
        */
    export class InvalidReactionUserArnException extends __BaseException {
            readonly name: "InvalidReactionUserArnException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidReactionUserArnException, __BaseException>);
    }
    export interface GetCommentsForComparedCommitInput {
            /**
                * <p>The name of the repository where you want to compare commits.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>To establish the directionality of the comparison, the full commit ID of the before
                *             commit.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>To establish the directionality of the comparison, the full commit ID of the after
                *             commit.</p>
                */
            afterCommitId: string | undefined;
            /**
                * <p>An enumeration token that when provided in a request, returns the next batch of the results. </p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results. The
                *             default is 100 comments, but you can configure up to 500.</p>
                */
            maxResults?: number;
    }
    export namespace GetCommentsForComparedCommitInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentsForComparedCommitInput) => any;
    }
    export enum RelativeFileVersionEnum {
            AFTER = "AFTER",
            BEFORE = "BEFORE"
    }
    /**
        * <p>Returns information about the location of a change or comment in the comparison between two commits or a pull request.</p>
        */
    export interface Location {
            /**
                * <p>The name of the file being compared, including its extension and subdirectory, if any.</p>
                */
            filePath?: string;
            /**
                * <p>The position of a change in a compared file, in line number format.</p>
                */
            filePosition?: number;
            /**
                * <p>In a comparison of commits or a pull request, whether the change is in the before or
                *             after of that comparison.</p>
                */
            relativeFileVersion?: RelativeFileVersionEnum | string;
    }
    export namespace Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Location) => any;
    }
    /**
        * <p>Returns information about comments on the comparison between two commits.</p>
        */
    export interface CommentsForComparedCommit {
            /**
                * <p>The name of the repository that contains the compared commits.</p>
                */
            repositoryName?: string;
            /**
                * <p>The full commit ID of the commit used to establish the before of the
                *             comparison.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>The full commit ID of the commit used to establish the after of the comparison.</p>
                */
            afterCommitId?: string;
            /**
                * <p>The full blob ID of the commit used to establish the before of the comparison.</p>
                */
            beforeBlobId?: string;
            /**
                * <p>The full blob ID of the commit used to establish the after of the comparison.</p>
                */
            afterBlobId?: string;
            /**
                * <p>Location information about the comment on the comparison, including the file name,
                *             line number, and whether the version of the file where the comment was made is BEFORE or
                *             AFTER.</p>
                */
            location?: Location;
            /**
                * <p>An array of comment objects. Each comment object contains information about a comment on the comparison
                *          between commits.</p>
                */
            comments?: Comment[];
    }
    export namespace CommentsForComparedCommit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommentsForComparedCommit) => any;
    }
    export interface GetCommentsForComparedCommitOutput {
            /**
                * <p>A list of comment objects on the compared commit.</p>
                */
            commentsForComparedCommitData?: CommentsForComparedCommit[];
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            nextToken?: string;
    }
    export namespace GetCommentsForComparedCommitOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentsForComparedCommitOutput) => any;
    }
    export interface GetCommentsForPullRequestInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name of the repository that contains the pull request.</p>
                */
            repositoryName?: string;
            /**
                * <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.</p>
                */
            afterCommitId?: string;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results. The default is 100 comments.
                *             You can return up to 500 comments with a single request.</p>
                */
            maxResults?: number;
    }
    export namespace GetCommentsForPullRequestInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentsForPullRequestInput) => any;
    }
    /**
        * <p>Returns information about comments on a pull request.</p>
        */
    export interface CommentsForPullRequest {
            /**
                * <p>The system-generated ID of the pull request.</p>
                */
            pullRequestId?: string;
            /**
                * <p>The name of the repository that contains the pull request.</p>
                */
            repositoryName?: string;
            /**
                * <p>The full commit ID of the commit that was the tip of the destination branch when the
                *             pull request was created. This commit is superceded by the after commit in the source
                *             branch when and if you merge the source branch into the destination branch.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>The full commit ID of the commit that was the tip of the source branch at the time the
                *             comment was made. </p>
                */
            afterCommitId?: string;
            /**
                * <p>The full blob ID of the file on which you want to comment on the destination commit.</p>
                */
            beforeBlobId?: string;
            /**
                * <p>The full blob ID of the file on which you want to comment on the source commit.</p>
                */
            afterBlobId?: string;
            /**
                * <p>Location information about the comment on the pull request, including the file name,
                *             line number, and whether the version of the file where the comment was made is BEFORE
                *             (destination branch) or AFTER (source branch).</p>
                */
            location?: Location;
            /**
                * <p>An array of comment objects. Each comment object contains information about a comment on the pull request.</p>
                */
            comments?: Comment[];
    }
    export namespace CommentsForPullRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommentsForPullRequest) => any;
    }
    export interface GetCommentsForPullRequestOutput {
            /**
                * <p>An array of comment objects on the pull request.</p>
                */
            commentsForPullRequestData?: CommentsForPullRequest[];
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            nextToken?: string;
    }
    export namespace GetCommentsForPullRequestOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommentsForPullRequestOutput) => any;
    }
    /**
        * <p>The repository does not contain any pull requests with that pull request ID. Use GetPullRequest to verify the correct repository name for the pull request ID.</p>
        */
    export class RepositoryNotAssociatedWithPullRequestException extends __BaseException {
            readonly name: "RepositoryNotAssociatedWithPullRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryNotAssociatedWithPullRequestException, __BaseException>);
    }
    /**
        * <p>The specified commit ID does not exist.</p>
        */
    export class CommitIdDoesNotExistException extends __BaseException {
            readonly name: "CommitIdDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommitIdDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Represents the input of a get commit operation.</p>
        */
    export interface GetCommitInput {
            /**
                * <p>The name of the repository to which the commit was made.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The commit ID. Commit IDs are the full SHA ID of the commit.</p>
                */
            commitId: string | undefined;
    }
    export namespace GetCommitInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommitInput) => any;
    }
    /**
        * <p>Represents the output of a get commit operation.</p>
        */
    export interface GetCommitOutput {
            /**
                * <p>A commit data type object that contains information about the specified commit.</p>
                */
            commit: Commit | undefined;
    }
    export namespace GetCommitOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommitOutput) => any;
    }
    export interface GetDifferencesInput {
            /**
                * <p>The name of the repository where you want to get differences.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, the full commit ID). Optional. If not specified, all changes before the
                *                 <code>afterCommitSpecifier</code> value are shown. If you do not use
                *                 <code>beforeCommitSpecifier</code> in your request, consider limiting the results
                *             with <code>maxResults</code>.</p>
                */
            beforeCommitSpecifier?: string;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit.</p>
                */
            afterCommitSpecifier: string | undefined;
            /**
                * <p>The file path in which to check for differences. Limits the results to this path. Can
                *             also be used to specify the previous name of a directory or folder. If
                *                 <code>beforePath</code> and <code>afterPath</code> are not specified, differences
                *             are shown for all paths.</p>
                */
            beforePath?: string;
            /**
                * <p>The file path in which to check differences. Limits the results to this path. Can also
                *             be used to specify the changed name of a directory or folder, if it has changed. If not
                *             specified, differences are shown for all paths.</p>
                */
            afterPath?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results.</p>
                */
            MaxResults?: number;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace GetDifferencesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDifferencesInput) => any;
    }
    /**
        * <p>Returns information about a set of differences for a commit specifier.</p>
        */
    export interface Difference {
            /**
                * <p>Information about a <code>beforeBlob</code> data type object, including the ID,
                *             the file mode permission code, and the path.</p>
                */
            beforeBlob?: BlobMetadata;
            /**
                * <p>Information about an <code>afterBlob</code> data type object, including the ID,
                *             the file mode permission code, and the path.</p>
                */
            afterBlob?: BlobMetadata;
            /**
                * <p>Whether the change type of the difference is an addition (A), deletion (D), or modification (M).</p>
                */
            changeType?: ChangeTypeEnum | string;
    }
    export namespace Difference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Difference) => any;
    }
    export interface GetDifferencesOutput {
            /**
                * <p>A data type object that contains information about the differences, including whether
                *             the difference is added, modified, or deleted (A, D, M).</p>
                */
            differences?: Difference[];
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            NextToken?: string;
    }
    export namespace GetDifferencesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDifferencesOutput) => any;
    }
    /**
        * <p>The specified path does not exist.</p>
        */
    export class PathDoesNotExistException extends __BaseException {
            readonly name: "PathDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PathDoesNotExistException, __BaseException>);
    }
    export interface GetFileInput {
            /**
                * <p>The name of the repository that contains the file.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The fully quaified reference that identifies the commit that contains the file. For
                *             example, you can specify a full commit ID, a tag, a branch name, or a reference such as
                *             refs/heads/master. If none is provided, the head commit is used.</p>
                */
            commitSpecifier?: string;
            /**
                * <p>The fully qualified path to the file, including the full name and extension of the
                *             file. For example, /examples/file.md is the fully qualified path to a file named file.md
                *             in a folder named examples.</p>
                */
            filePath: string | undefined;
    }
    export namespace GetFileInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFileInput) => any;
    }
    export interface GetFileOutput {
            /**
                * <p>The full commit ID of the commit that contains the content returned by GetFile.</p>
                */
            commitId: string | undefined;
            /**
                * <p>The blob ID of the object that represents the file content.</p>
                */
            blobId: string | undefined;
            /**
                * <p>The fully qualified path to the specified file. Returns the name and extension of the
                *             file.</p>
                */
            filePath: string | undefined;
            /**
                * <p>The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.</p>
                *         <note>
                *             <p>The file mode permissions returned by this API are not the standard file mode
                *                 permission values, such as 100644, but rather extrapolated values. See the supported
                *                 return values.</p>
                *         </note>
                */
            fileMode: FileModeTypeEnum | string | undefined;
            /**
                * <p>The size of the contents of the file, in bytes.</p>
                */
            fileSize: number | undefined;
            /**
                * <p>The base-64 encoded binary data object that represents the content of the file.</p>
                */
            fileContent: Uint8Array | undefined;
    }
    export namespace GetFileOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFileOutput) => any;
    }
    /**
        * <p>The specified folder does not exist. Either the folder name is not correct, or you did
        *             not enter the full path to the folder.</p>
        */
    export class FolderDoesNotExistException extends __BaseException {
            readonly name: "FolderDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FolderDoesNotExistException, __BaseException>);
    }
    export interface GetFolderInput {
            /**
                * <p>The name of the repository.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>A fully qualified reference used to identify a commit that contains the version of the
                *             folder's content to return. A fully qualified reference can be a commit ID, branch name,
                *             tag, or reference such as HEAD. If no specifier is provided, the folder content is
                *             returned as it exists in the HEAD commit.</p>
                */
            commitSpecifier?: string;
            /**
                * <p>The fully qualified path to the folder whose contents are returned, including the
                *             folder name. For example, /examples is a fully-qualified path to a folder named examples
                *             that was created off of the root directory (/) of a repository. </p>
                */
            folderPath: string | undefined;
    }
    export namespace GetFolderInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFolderInput) => any;
    }
    /**
        * <p>Returns information about a file in a repository.</p>
        */
    export interface File {
            /**
                * <p>The blob ID that contains the file information.</p>
                */
            blobId?: string;
            /**
                * <p>The fully qualified path to the file in the repository.</p>
                */
            absolutePath?: string;
            /**
                * <p>The relative path of the file from the folder where the query originated.</p>
                */
            relativePath?: string;
            /**
                * <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
                */
            fileMode?: FileModeTypeEnum | string;
    }
    export namespace File {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: File) => any;
    }
    /**
        * <p>Returns information about a folder in a repository.</p>
        */
    export interface Folder {
            /**
                * <p>The full SHA-1 pointer of the tree information for the commit that contains the folder.</p>
                */
            treeId?: string;
            /**
                * <p>The fully qualified path of the folder in the repository.</p>
                */
            absolutePath?: string;
            /**
                * <p>The relative path of the specified folder from the folder where the query originated.</p>
                */
            relativePath?: string;
    }
    export namespace Folder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Folder) => any;
    }
    /**
        * <p>Returns information about a submodule reference in a repository folder.</p>
        */
    export interface SubModule {
            /**
                * <p>The commit ID that contains the reference to the submodule.</p>
                */
            commitId?: string;
            /**
                * <p>The fully qualified path to the folder that contains the reference to the submodule.</p>
                */
            absolutePath?: string;
            /**
                * <p>The relative path of the submodule from the folder where the query originated.</p>
                */
            relativePath?: string;
    }
    export namespace SubModule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubModule) => any;
    }
    /**
        * <p>Returns information about a symbolic link in a repository folder.</p>
        */
    export interface SymbolicLink {
            /**
                * <p>The blob ID that contains the information about the symbolic link.</p>
                */
            blobId?: string;
            /**
                * <p>The fully qualified path to the folder that contains the symbolic link.</p>
                */
            absolutePath?: string;
            /**
                * <p>The relative path of the symbolic link from the folder where the query originated.</p>
                */
            relativePath?: string;
            /**
                * <p>The file mode permissions of the blob that cotains information about the symbolic link.</p>
                */
            fileMode?: FileModeTypeEnum | string;
    }
    export namespace SymbolicLink {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SymbolicLink) => any;
    }
    export interface GetFolderOutput {
            /**
                * <p>The full commit ID used as a reference for the returned version of the folder
                *             content.</p>
                */
            commitId: string | undefined;
            /**
                * <p>The fully qualified path of the folder whose contents are returned.</p>
                */
            folderPath: string | undefined;
            /**
                * <p>The full SHA-1 pointer of the tree information for the commit that contains the folder.</p>
                */
            treeId?: string;
            /**
                * <p>The list of folders that exist under the specified folder, if any.</p>
                */
            subFolders?: Folder[];
            /**
                * <p>The list of files in the specified folder, if any.</p>
                */
            files?: File[];
            /**
                * <p>The list of symbolic links to other files and folders in the specified folder, if
                *             any.</p>
                */
            symbolicLinks?: SymbolicLink[];
            /**
                * <p>The list of submodules in the specified folder, if any.</p>
                */
            subModules?: SubModule[];
    }
    export namespace GetFolderOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFolderOutput) => any;
    }
    export interface GetMergeCommitInput {
            /**
                * <p>The name of the repository that contains the merge commit about which you want to get information.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
    }
    export namespace GetMergeCommitInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMergeCommitInput) => any;
    }
    export interface GetMergeCommitOutput {
            /**
                * <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
                */
            sourceCommitId?: string;
            /**
                * <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
                */
            destinationCommitId?: string;
            /**
                * <p>The commit ID of the merge base.</p>
                */
            baseCommitId?: string;
            /**
                * <p>The commit ID for the merge commit created when the source branch was merged into the
                *             destination branch. If the fast-forward merge strategy was used, there is no merge
                *             commit.</p>
                */
            mergedCommitId?: string;
    }
    export namespace GetMergeCommitOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMergeCommitOutput) => any;
    }
    export interface GetMergeConflictsInput {
            /**
                * <p>The name of the repository where the pull request was created.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The merge option or strategy you want to use to merge the code.  </p>
                */
            mergeOption: MergeOptionTypeEnum | string | undefined;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>The maximum number of files to include in the output.</p>
                */
            maxConflictFiles?: number;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
    }
    export namespace GetMergeConflictsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMergeConflictsInput) => any;
    }
    export interface GetMergeConflictsOutput {
            /**
                * <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
                */
            mergeable: boolean | undefined;
            /**
                * <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
                */
            destinationCommitId: string | undefined;
            /**
                * <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
                */
            sourceCommitId: string | undefined;
            /**
                * <p>The commit ID of the merge base.</p>
                */
            baseCommitId?: string;
            /**
                * <p>A list of metadata for any conflicting files. If the specified merge strategy is
                *             FAST_FORWARD_MERGE, this list is always empty.</p>
                */
            conflictMetadataList: ConflictMetadata[] | undefined;
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            nextToken?: string;
    }
    export namespace GetMergeConflictsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMergeConflictsOutput) => any;
    }
    /**
        * <p>The destination commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID. </p>
        */
    export class InvalidDestinationCommitSpecifierException extends __BaseException {
            readonly name: "InvalidDestinationCommitSpecifierException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDestinationCommitSpecifierException, __BaseException>);
    }
    /**
        * <p>The source commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID.</p>
        */
    export class InvalidSourceCommitSpecifierException extends __BaseException {
            readonly name: "InvalidSourceCommitSpecifierException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSourceCommitSpecifierException, __BaseException>);
    }
    export interface GetMergeOptionsInput {
            /**
                * <p>The name of the repository that contains the commits about which you want to get merge options.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
    }
    export namespace GetMergeOptionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMergeOptionsInput) => any;
    }
    export interface GetMergeOptionsOutput {
            /**
                * <p>The merge option or strategy used to merge the code.</p>
                */
            mergeOptions: (MergeOptionTypeEnum | string)[] | undefined;
            /**
                * <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
                */
            sourceCommitId: string | undefined;
            /**
                * <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
                */
            destinationCommitId: string | undefined;
            /**
                * <p>The commit ID of the merge base.</p>
                */
            baseCommitId: string | undefined;
    }
    export namespace GetMergeOptionsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMergeOptionsOutput) => any;
    }
    export interface GetPullRequestInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
    }
    export namespace GetPullRequestInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPullRequestInput) => any;
    }
    export interface GetPullRequestOutput {
            /**
                * <p>Information about the specified pull request.</p>
                */
            pullRequest: PullRequest | undefined;
    }
    export namespace GetPullRequestOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPullRequestOutput) => any;
    }
    export interface GetPullRequestApprovalStatesInput {
            /**
                * <p>The system-generated ID for the pull request.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The system-generated ID for the pull request revision.</p>
                */
            revisionId: string | undefined;
    }
    export namespace GetPullRequestApprovalStatesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPullRequestApprovalStatesInput) => any;
    }
    export interface GetPullRequestApprovalStatesOutput {
            /**
                * <p>Information about users who have approved the pull request.</p>
                */
            approvals?: Approval[];
    }
    export namespace GetPullRequestApprovalStatesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPullRequestApprovalStatesOutput) => any;
    }
    export interface GetPullRequestOverrideStateInput {
            /**
                * <p>The ID of the pull request for which you want to get information about whether approval rules have been set aside (overridden).</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The system-generated ID of the revision for the pull request. To retrieve the most
                *             recent revision ID, use
                *             <a>GetPullRequest</a>.</p>
                */
            revisionId: string | undefined;
    }
    export namespace GetPullRequestOverrideStateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPullRequestOverrideStateInput) => any;
    }
    export interface GetPullRequestOverrideStateOutput {
            /**
                * <p>A Boolean value that indicates whether a pull request has had its rules set aside (TRUE) or whether all approval rules still apply (FALSE).</p>
                */
            overridden?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
                */
            overrider?: string;
    }
    export namespace GetPullRequestOverrideStateOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPullRequestOverrideStateOutput) => any;
    }
    /**
        * <p>Represents the input of a get repository operation.</p>
        */
    export interface GetRepositoryInput {
            /**
                * <p>The name of the repository to get information about.</p>
                */
            repositoryName: string | undefined;
    }
    export namespace GetRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryInput) => any;
    }
    /**
        * <p>Represents the output of a get repository operation.</p>
        */
    export interface GetRepositoryOutput {
            /**
                * <p>Information about the repository.</p>
                */
            repositoryMetadata?: RepositoryMetadata;
    }
    export namespace GetRepositoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryOutput) => any;
    }
    /**
        * <p>Represents the input of a get repository triggers operation.</p>
        */
    export interface GetRepositoryTriggersInput {
            /**
                * <p>The name of the repository for which the trigger is configured.</p>
                */
            repositoryName: string | undefined;
    }
    export namespace GetRepositoryTriggersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryTriggersInput) => any;
    }
    export enum RepositoryTriggerEventEnum {
            ALL = "all",
            CREATE_REFERENCE = "createReference",
            DELETE_REFERENCE = "deleteReference",
            UPDATE_REFERENCE = "updateReference"
    }
    /**
        * <p>Information about a trigger for a repository.</p>
        */
    export interface RepositoryTrigger {
            /**
                * <p>The name of the trigger.</p>
                */
            name: string | undefined;
            /**
                * <p>The ARN of the resource that is the target for a trigger (for example, the ARN of a
                *             topic in Amazon SNS).</p>
                */
            destinationArn: string | undefined;
            /**
                * <p>Any custom data associated with the trigger to be included in the information sent to
                *             the target of the trigger.</p>
                */
            customData?: string;
            /**
                * <p>The branches to be included in the trigger configuration. If you specify an empty
                *             array, the trigger applies to all branches.</p>
                *         <note>
                *             <p>Although no content is required in the array, you must include the array itself.</p>
                *         </note>
                */
            branches?: string[];
            /**
                * <p>The repository events that cause the trigger to run actions in another service, such
                *             as sending a notification through Amazon SNS.
                *
                *         </p>
                *          <note>
                *             <p>The valid value "all" cannot be used with any other values.</p>
                *          </note>
                */
            events: (RepositoryTriggerEventEnum | string)[] | undefined;
    }
    export namespace RepositoryTrigger {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryTrigger) => any;
    }
    /**
        * <p>Represents the output of a get repository triggers operation.</p>
        */
    export interface GetRepositoryTriggersOutput {
            /**
                * <p>The system-generated unique ID for the trigger.</p>
                */
            configurationId?: string;
            /**
                * <p>The JSON block of configuration information for each trigger.</p>
                */
            triggers?: RepositoryTrigger[];
    }
    export namespace GetRepositoryTriggersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRepositoryTriggersOutput) => any;
    }
    export interface ListApprovalRuleTemplatesInput {
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results.</p>
                */
            maxResults?: number;
    }
    export namespace ListApprovalRuleTemplatesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApprovalRuleTemplatesInput) => any;
    }
    export interface ListApprovalRuleTemplatesOutput {
            /**
                * <p>The names of all the approval rule templates found in the AWS Region for your AWS account.</p>
                */
            approvalRuleTemplateNames?: string[];
            /**
                * <p>An enumeration token that allows the operation to batch the next results of the operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListApprovalRuleTemplatesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApprovalRuleTemplatesOutput) => any;
    }
    export interface ListAssociatedApprovalRuleTemplatesForRepositoryInput {
            /**
                * <p>The name of the repository for which you want to list all associated approval rule templates.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results.</p>
                */
            maxResults?: number;
    }
    export namespace ListAssociatedApprovalRuleTemplatesForRepositoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedApprovalRuleTemplatesForRepositoryInput) => any;
    }
    export interface ListAssociatedApprovalRuleTemplatesForRepositoryOutput {
            /**
                * <p>The names of all approval rule templates associated with the repository.</p>
                */
            approvalRuleTemplateNames?: string[];
            /**
                * <p>An enumeration token that allows the operation to batch the next results of the operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListAssociatedApprovalRuleTemplatesForRepositoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedApprovalRuleTemplatesForRepositoryOutput) => any;
    }
    /**
        * <p>Represents the input of a list branches operation.</p>
        */
    export interface ListBranchesInput {
            /**
                * <p>The name of the repository that contains the branches.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>An enumeration token that allows the operation to batch the results.</p>
                */
            nextToken?: string;
    }
    export namespace ListBranchesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBranchesInput) => any;
    }
    /**
        * <p>Represents the output of a list branches operation.</p>
        */
    export interface ListBranchesOutput {
            /**
                * <p>The list of branch names.</p>
                */
            branches?: string[];
            /**
                * <p>An enumeration token that returns the batch of the results.</p>
                */
            nextToken?: string;
    }
    export namespace ListBranchesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBranchesOutput) => any;
    }
    /**
        * <p>The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the author of the pull request, and then try again.</p>
        */
    export class InvalidAuthorArnException extends __BaseException {
            readonly name: "InvalidAuthorArnException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAuthorArnException, __BaseException>);
    }
    /**
        * <p>The pull request status is not valid. The only valid values are <code>OPEN</code> and <code>CLOSED</code>.</p>
        */
    export class InvalidPullRequestStatusException extends __BaseException {
            readonly name: "InvalidPullRequestStatusException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPullRequestStatusException, __BaseException>);
    }
    export interface ListPullRequestsInput {
            /**
                * <p>The name of the repository for which you want to list pull requests.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results
                *         to pull requests created by that user.</p>
                */
            authorArn?: string;
            /**
                * <p>Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.</p>
                */
            pullRequestStatus?: PullRequestStatusEnum | string;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results.</p>
                */
            maxResults?: number;
    }
    export namespace ListPullRequestsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPullRequestsInput) => any;
    }
    export interface ListPullRequestsOutput {
            /**
                * <p>The system-generated IDs of the pull requests.</p>
                */
            pullRequestIds: string[] | undefined;
            /**
                * <p>An enumeration token that allows the operation to batch the next results of the operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListPullRequestsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPullRequestsOutput) => any;
    }
    /**
        * <p>The specified sort order is not valid.</p>
        */
    export class InvalidOrderException extends __BaseException {
            readonly name: "InvalidOrderException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOrderException, __BaseException>);
    }
    /**
        * <p>The specified sort by value is not valid.</p>
        */
    export class InvalidSortByException extends __BaseException {
            readonly name: "InvalidSortByException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSortByException, __BaseException>);
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CodeCommitServiceException as __BaseException } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/CodeCommitServiceException";
    import { ApprovalRule, ApprovalRuleTemplate, ApprovalState, Comment, ConflictDetailLevelTypeEnum, ConflictResolution, ConflictResolutionStrategyTypeEnum, FileModeTypeEnum, Location, OverrideStatus, PullRequest, PullRequestStatusEnum, RepositoryTrigger } from "@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/models_0";
    export enum OrderEnum {
            ASCENDING = "ascending",
            DESCENDING = "descending"
    }
    export enum SortByEnum {
            MODIFIED_DATE = "lastModifiedDate",
            REPOSITORY_NAME = "repositoryName"
    }
    /**
        * <p>Represents the input of a list repositories operation.</p>
        */
    export interface ListRepositoriesInput {
            /**
                * <p>An enumeration token that allows the operation to batch the results of the operation.
                *             Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit,
                *             another page of 1,000 records is retrieved.</p>
                */
            nextToken?: string;
            /**
                * <p>The criteria used to sort the results of a list repositories operation.</p>
                */
            sortBy?: SortByEnum | string;
            /**
                * <p>The order in which to sort the results of a list repositories operation.</p>
                */
            order?: OrderEnum | string;
    }
    export namespace ListRepositoriesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesInput) => any;
    }
    /**
        * <p>Information about a repository name and ID.</p>
        */
    export interface RepositoryNameIdPair {
            /**
                * <p>The name associated with the repository.</p>
                */
            repositoryName?: string;
            /**
                * <p>The ID associated with the repository.</p>
                */
            repositoryId?: string;
    }
    export namespace RepositoryNameIdPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryNameIdPair) => any;
    }
    /**
        * <p>Represents the output of a list repositories operation.</p>
        */
    export interface ListRepositoriesOutput {
            /**
                * <p>Lists the repositories called by the list repositories operation.</p>
                */
            repositories?: RepositoryNameIdPair[];
            /**
                * <p>An enumeration token that allows the operation to batch the results of the operation.
                *             Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit,
                *             another page of 1,000 records is retrieved.</p>
                */
            nextToken?: string;
    }
    export namespace ListRepositoriesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesOutput) => any;
    }
    export interface ListRepositoriesForApprovalRuleTemplateInput {
            /**
                * <p>The name of the approval rule template for which you want to list repositories that are associated with that template.</p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
            /**
                * <p>A non-zero, non-negative integer used to limit the number of returned results.</p>
                */
            maxResults?: number;
    }
    export namespace ListRepositoriesForApprovalRuleTemplateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesForApprovalRuleTemplateInput) => any;
    }
    export interface ListRepositoriesForApprovalRuleTemplateOutput {
            /**
                * <p>A list of repository names that are associated with the specified approval rule template.</p>
                */
            repositoryNames?: string[];
            /**
                * <p>An enumeration token that allows the operation to batch the next results of the operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListRepositoriesForApprovalRuleTemplateOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRepositoriesForApprovalRuleTemplateOutput) => any;
    }
    /**
        * <p>The value for the resource ARN is not valid. For more information about resources in AWS CodeCommit, see
        *             <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a>
        *             in the AWS CodeCommit User Guide.</p>
        */
    export class InvalidResourceArnException extends __BaseException {
            readonly name: "InvalidResourceArnException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResourceArnException, __BaseException>);
    }
    export interface ListTagsForResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource for which you want to get information
                *             about tags, if any.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            nextToken?: string;
    }
    export namespace ListTagsForResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
    }
    export interface ListTagsForResourceOutput {
            /**
                * <p>A list of tag key and value pairs associated with the specified resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>An enumeration token that allows the operation to batch the next results of the operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListTagsForResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceOutput) => any;
    }
    /**
        * <p>A valid Amazon Resource Name (ARN) for an AWS CodeCommit resource is required. For a list of valid resources in AWS CodeCommit, see
        *             <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a>
        *             in the AWS CodeCommit User Guide.</p>
        */
    export class ResourceArnRequiredException extends __BaseException {
            readonly name: "ResourceArnRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceArnRequiredException, __BaseException>);
    }
    /**
        * <p>The specified target branch is not valid.</p>
        */
    export class InvalidTargetBranchException extends __BaseException {
            readonly name: "InvalidTargetBranchException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTargetBranchException, __BaseException>);
    }
    export interface MergeBranchesByFastForwardInput {
            /**
                * <p>The name of the repository where you want to merge two branches.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The branch where the merge is applied.</p>
                */
            targetBranch?: string;
    }
    export namespace MergeBranchesByFastForwardInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeBranchesByFastForwardInput) => any;
    }
    export interface MergeBranchesByFastForwardOutput {
            /**
                * <p>The commit ID of the merge in the destination or target branch.</p>
                */
            commitId?: string;
            /**
                * <p>The tree ID of the merge in the destination or target branch.</p>
                */
            treeId?: string;
    }
    export namespace MergeBranchesByFastForwardOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeBranchesByFastForwardOutput) => any;
    }
    export interface MergeBranchesBySquashInput {
            /**
                * <p>The name of the repository where you want to merge two branches.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The branch where the merge is applied. </p>
                */
            targetBranch?: string;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>The name of the author who created the commit. This information is used as both the
                *             author and committer for the commit.</p>
                */
            authorName?: string;
            /**
                * <p>The email address of the person merging the branches. This information is used in the
                *             commit information for the merge.</p>
                */
            email?: string;
            /**
                * <p>The commit message for the merge.</p>
                */
            commitMessage?: string;
            /**
                * <p>If the commit contains deletions, whether to keep a folder or folder structure if the
                *             changes leave the folders empty. If this is specified as true, a .gitkeep file is
                *             created for empty folders. The default is false.</p>
                */
            keepEmptyFolders?: boolean;
            /**
                * <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
                *             resolving conflicts during a merge.</p>
                */
            conflictResolution?: ConflictResolution;
    }
    export namespace MergeBranchesBySquashInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeBranchesBySquashInput) => any;
    }
    export interface MergeBranchesBySquashOutput {
            /**
                * <p>The commit ID of the merge in the destination or target branch.</p>
                */
            commitId?: string;
            /**
                * <p>The tree ID of the merge in the destination or target branch.</p>
                */
            treeId?: string;
    }
    export namespace MergeBranchesBySquashOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeBranchesBySquashOutput) => any;
    }
    export interface MergeBranchesByThreeWayInput {
            /**
                * <p>The name of the repository where you want to merge two branches.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            sourceCommitSpecifier: string | undefined;
            /**
                * <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
                *             (for example, a branch name or a full commit ID).</p>
                */
            destinationCommitSpecifier: string | undefined;
            /**
                * <p>The branch where the merge is applied. </p>
                */
            targetBranch?: string;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>The name of the author who created the commit. This information is used as both the
                *             author and committer for the commit.</p>
                */
            authorName?: string;
            /**
                * <p>The email address of the person merging the branches. This information is used in the
                *             commit information for the merge.</p>
                */
            email?: string;
            /**
                * <p>The commit message to include in the commit information for the merge.</p>
                */
            commitMessage?: string;
            /**
                * <p>If the commit contains deletions, whether to keep a folder or folder structure if the
                *             changes leave the folders empty. If true, a .gitkeep file is created for empty folders.
                *             The default is false.</p>
                */
            keepEmptyFolders?: boolean;
            /**
                * <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
                *             resolving conflicts during a merge.</p>
                */
            conflictResolution?: ConflictResolution;
    }
    export namespace MergeBranchesByThreeWayInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeBranchesByThreeWayInput) => any;
    }
    export interface MergeBranchesByThreeWayOutput {
            /**
                * <p>The commit ID of the merge in the destination or target branch.</p>
                */
            commitId?: string;
            /**
                * <p>The tree ID of the merge in the destination or target branch.</p>
                */
            treeId?: string;
    }
    export namespace MergeBranchesByThreeWayOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeBranchesByThreeWayOutput) => any;
    }
    export interface MergePullRequestByFastForwardInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name of the repository where the pull request was created.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an
                *         exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.</p>
                */
            sourceCommitId?: string;
    }
    export namespace MergePullRequestByFastForwardInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergePullRequestByFastForwardInput) => any;
    }
    export interface MergePullRequestByFastForwardOutput {
            /**
                * <p>Information about the specified pull request, including the merge.</p>
                */
            pullRequest?: PullRequest;
    }
    export namespace MergePullRequestByFastForwardOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergePullRequestByFastForwardOutput) => any;
    }
    /**
        * <p>The pull request cannot be merged because one or more approval rules applied to the pull request have conditions that have not been met.</p>
        */
    export class PullRequestApprovalRulesNotSatisfiedException extends __BaseException {
            readonly name: "PullRequestApprovalRulesNotSatisfiedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PullRequestApprovalRulesNotSatisfiedException, __BaseException>);
    }
    /**
        * <p>The tip of the source branch in the destination repository does not match the tip of the source branch specified in your request.
        *             The pull request might have been updated. Make sure that you have the latest changes.</p>
        */
    export class TipOfSourceReferenceIsDifferentException extends __BaseException {
            readonly name: "TipOfSourceReferenceIsDifferentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TipOfSourceReferenceIsDifferentException, __BaseException>);
    }
    export interface MergePullRequestBySquashInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name of the repository where the pull request was created.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an
                *             exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.</p>
                */
            sourceCommitId?: string;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>The commit message to include in the commit information for the merge.</p>
                */
            commitMessage?: string;
            /**
                * <p>The name of the author who created the commit. This information is used as both the
                *             author and committer for the commit.</p>
                */
            authorName?: string;
            /**
                * <p>The email address of the person merging the branches. This information is used in the
                *             commit information for the merge.</p>
                */
            email?: string;
            /**
                * <p>If the commit contains deletions, whether to keep a folder or folder structure if the
                *             changes leave the folders empty. If true, a .gitkeep file is created for empty folders.
                *             The default is false.</p>
                */
            keepEmptyFolders?: boolean;
            /**
                * <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
                *             resolving conflicts during a merge.</p>
                */
            conflictResolution?: ConflictResolution;
    }
    export namespace MergePullRequestBySquashInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergePullRequestBySquashInput) => any;
    }
    export interface MergePullRequestBySquashOutput {
            /**
                * <p>Returns information about a pull request.</p>
                */
            pullRequest?: PullRequest;
    }
    export namespace MergePullRequestBySquashOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergePullRequestBySquashOutput) => any;
    }
    export interface MergePullRequestByThreeWayInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name of the repository where the pull request was created.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an
                *             exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.</p>
                */
            sourceCommitId?: string;
            /**
                * <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
                *             which returns a not-mergeable result if the same file has differences in both branches.
                *             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
                *             both branches has differences on the same line.</p>
                */
            conflictDetailLevel?: ConflictDetailLevelTypeEnum | string;
            /**
                * <p>Specifies which branch to use when resolving conflicts, or whether to attempt
                *             automatically merging two versions of a file. The default is NONE, which requires any
                *             conflicts to be resolved manually before the merge operation is successful.</p>
                */
            conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | string;
            /**
                * <p>The commit message to include in the commit information for the merge.</p>
                */
            commitMessage?: string;
            /**
                * <p>The name of the author who created the commit. This information is used as both the
                *             author and committer for the commit.</p>
                */
            authorName?: string;
            /**
                * <p>The email address of the person merging the branches. This information is used in the
                *             commit information for the merge.</p>
                */
            email?: string;
            /**
                * <p>If the commit contains deletions, whether to keep a folder or folder structure if the
                *             changes leave the folders empty. If true, a .gitkeep file is created for empty folders.
                *             The default is false.</p>
                */
            keepEmptyFolders?: boolean;
            /**
                * <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
                *             resolving conflicts during a merge.</p>
                */
            conflictResolution?: ConflictResolution;
    }
    export namespace MergePullRequestByThreeWayInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergePullRequestByThreeWayInput) => any;
    }
    export interface MergePullRequestByThreeWayOutput {
            /**
                * <p>Returns information about a pull request.</p>
                */
            pullRequest?: PullRequest;
    }
    export namespace MergePullRequestByThreeWayOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergePullRequestByThreeWayOutput) => any;
    }
    /**
        * <p>The override status is not valid. Valid statuses are OVERRIDE and REVOKE.</p>
        */
    export class InvalidOverrideStatusException extends __BaseException {
            readonly name: "InvalidOverrideStatusException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOverrideStatusException, __BaseException>);
    }
    /**
        * <p>The pull request has already had its approval rules set to override.</p>
        */
    export class OverrideAlreadySetException extends __BaseException {
            readonly name: "OverrideAlreadySetException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OverrideAlreadySetException, __BaseException>);
    }
    export interface OverridePullRequestApprovalRulesInput {
            /**
                * <p>The system-generated ID of the pull request for which you want to override all
                *             approval rule requirements. To get this information, use
                *             <a>GetPullRequest</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request.
                *             To get the revision ID, use GetPullRequest.</p>
                */
            revisionId: string | undefined;
            /**
                * <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply
                *         approval rule requirements (REVOKE). REVOKE status is not stored.</p>
                */
            overrideStatus: OverrideStatus | string | undefined;
    }
    export namespace OverridePullRequestApprovalRulesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OverridePullRequestApprovalRulesInput) => any;
    }
    /**
        * <p>An override status is required, but no value was provided. Valid values include OVERRIDE and REVOKE.</p>
        */
    export class OverrideStatusRequiredException extends __BaseException {
            readonly name: "OverrideStatusRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OverrideStatusRequiredException, __BaseException>);
    }
    /**
        * <p>The comment is empty. You must provide some content for a comment. The content cannot be null.</p>
        */
    export class CommentContentRequiredException extends __BaseException {
            readonly name: "CommentContentRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommentContentRequiredException, __BaseException>);
    }
    /**
        * <p>The comment is too large. Comments are limited to 1,000 characters.</p>
        */
    export class CommentContentSizeLimitExceededException extends __BaseException {
            readonly name: "CommentContentSizeLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommentContentSizeLimitExceededException, __BaseException>);
    }
    /**
        * <p>The location of the file is not valid. Make sure that you include the file name and
        *             extension.</p>
        */
    export class InvalidFileLocationException extends __BaseException {
            readonly name: "InvalidFileLocationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFileLocationException, __BaseException>);
    }
    /**
        * <p>The position is not valid. Make sure that the line number exists in the version of the file you want to comment on.</p>
        */
    export class InvalidFilePositionException extends __BaseException {
            readonly name: "InvalidFilePositionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFilePositionException, __BaseException>);
    }
    /**
        * <p>Either the enum is not in a valid format, or the specified file version enum is not valid in respect to the current file version.</p>
        */
    export class InvalidRelativeFileVersionEnumException extends __BaseException {
            readonly name: "InvalidRelativeFileVersionEnumException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRelativeFileVersionEnumException, __BaseException>);
    }
    export interface PostCommentForComparedCommitInput {
            /**
                * <p>The name of the repository where you want to post a comment on the comparison between commits.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>To establish the directionality of the comparison, the full commit ID of the before
                *             commit. Required for commenting on any commit unless that commit is the initial
                *             commit.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>To establish the directionality of the comparison, the full commit ID of the after
                *             commit.</p>
                */
            afterCommitId: string | undefined;
            /**
                * <p>The location of the comparison where you want to comment.</p>
                */
            location?: Location;
            /**
                * <p>The content of the comment you want to make.</p>
                */
            content: string | undefined;
            /**
                * <p>A unique, client-generated idempotency token that, when provided in a request, ensures
                *             the request cannot be repeated with a changed parameter. If a request is received with
                *             the same parameters and a token is included, the request returns information about the
                *             initial request that used that token.</p>
                */
            clientRequestToken?: string;
    }
    export namespace PostCommentForComparedCommitInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostCommentForComparedCommitInput) => any;
    }
    export interface PostCommentForComparedCommitOutput {
            /**
                * <p>The name of the repository where you posted a comment on the comparison between commits.</p>
                */
            repositoryName?: string;
            /**
                * <p>In the directionality you established, the full commit ID of the before commit.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>In the directionality you established, the full commit ID of the after commit.</p>
                */
            afterCommitId?: string;
            /**
                * <p>In the directionality you established, the blob ID of the before blob.</p>
                */
            beforeBlobId?: string;
            /**
                * <p>In the directionality you established, the blob ID of the after blob.</p>
                */
            afterBlobId?: string;
            /**
                * <p>The location of the comment in the comparison between the two commits.</p>
                */
            location?: Location;
            /**
                * <p>The content of the comment you posted.</p>
                */
            comment?: Comment;
    }
    export namespace PostCommentForComparedCommitOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostCommentForComparedCommitOutput) => any;
    }
    export interface PostCommentForPullRequestInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name of the repository where you want to post a comment on a pull request.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.</p>
                */
            beforeCommitId: string | undefined;
            /**
                * <p>The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.</p>
                */
            afterCommitId: string | undefined;
            /**
                * <p>The location of the change where you want to post your comment. If no location is
                *             provided, the comment is posted as a general comment on the pull request difference
                *             between the before commit ID and the after commit ID.</p>
                */
            location?: Location;
            /**
                * <p>The content of your comment on the change.</p>
                */
            content: string | undefined;
            /**
                * <p>A unique, client-generated idempotency token that, when provided in a request, ensures
                *             the request cannot be repeated with a changed parameter. If a request is received with
                *             the same parameters and a token is included, the request returns information about the
                *             initial request that used that token.</p>
                */
            clientRequestToken?: string;
    }
    export namespace PostCommentForPullRequestInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostCommentForPullRequestInput) => any;
    }
    export interface PostCommentForPullRequestOutput {
            /**
                * <p>The name of the repository where you posted a comment on a pull request.</p>
                */
            repositoryName?: string;
            /**
                * <p>The system-generated ID of the pull request. </p>
                */
            pullRequestId?: string;
            /**
                * <p>The full commit ID of the commit in the source branch used to create the pull request,
                *             or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.</p>
                */
            beforeCommitId?: string;
            /**
                * <p>The full commit ID of the commit in the destination branch where the pull request is
                *             merged.</p>
                */
            afterCommitId?: string;
            /**
                * <p>In the directionality of the pull request, the blob ID of the before blob.</p>
                */
            beforeBlobId?: string;
            /**
                * <p>In the directionality of the pull request, the blob ID of the after blob.</p>
                */
            afterBlobId?: string;
            /**
                * <p>The location of the change where you posted your comment.</p>
                */
            location?: Location;
            /**
                * <p>The content of the comment you posted.</p>
                */
            comment?: Comment;
    }
    export namespace PostCommentForPullRequestOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostCommentForPullRequestOutput) => any;
    }
    export interface PostCommentReplyInput {
            /**
                * <p>The system-generated ID of the comment to which you want to reply. To get this ID, use <a>GetCommentsForComparedCommit</a>
                *         or <a>GetCommentsForPullRequest</a>.</p>
                */
            inReplyTo: string | undefined;
            /**
                * <p>A unique, client-generated idempotency token that, when provided in a request, ensures
                *             the request cannot be repeated with a changed parameter. If a request is received with
                *             the same parameters and a token is included, the request returns information about the
                *             initial request that used that token.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The contents of your reply to a comment.</p>
                */
            content: string | undefined;
    }
    export namespace PostCommentReplyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostCommentReplyInput) => any;
    }
    export interface PostCommentReplyOutput {
            /**
                * <p>Information about the reply to a comment.</p>
                */
            comment?: Comment;
    }
    export namespace PostCommentReplyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostCommentReplyOutput) => any;
    }
    /**
        * <p>The value of the reaction is not valid. For more information, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit User Guide</a>.</p>
        */
    export class InvalidReactionValueException extends __BaseException {
            readonly name: "InvalidReactionValueException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidReactionValueException, __BaseException>);
    }
    export interface PutCommentReactionInput {
            /**
                * <p>The ID of the comment to which you want to add or update a reaction.</p>
                */
            commentId: string | undefined;
            /**
                * <p>The emoji reaction you want to add or update. To remove a reaction, provide a value of blank or null. You can also provide the value of none.
                *             For information about emoji reaction values supported in AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-commit-comment.html#emoji-reaction-table">AWS CodeCommit User Guide</a>.</p>
                */
            reactionValue: string | undefined;
    }
    export namespace PutCommentReactionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCommentReactionInput) => any;
    }
    /**
        * <p>The number of reactions has been exceeded. Reactions are limited to one reaction per user for each individual comment ID.</p>
        */
    export class ReactionLimitExceededException extends __BaseException {
            readonly name: "ReactionLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReactionLimitExceededException, __BaseException>);
    }
    /**
        * <p>A reaction value is required. </p>
        */
    export class ReactionValueRequiredException extends __BaseException {
            readonly name: "ReactionValueRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReactionValueRequiredException, __BaseException>);
    }
    /**
        * <p>The file cannot be added because it is empty. Empty files cannot be added to the repository with this API.</p>
        */
    export class FileContentRequiredException extends __BaseException {
            readonly name: "FileContentRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FileContentRequiredException, __BaseException>);
    }
    export interface PutFileInput {
            /**
                * <p>The name of the repository where you want to add or update the file.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The name of the branch where you want to add or update the file. If this is an empty
                *             repository, this branch is created.</p>
                */
            branchName: string | undefined;
            /**
                * <p>The content of the file, in binary object format. </p>
                */
            fileContent: Uint8Array | undefined;
            /**
                * <p>The name of the file you want to add or update, including the relative path to the file in the repository.</p>
                *         <note>
                *             <p>If the path does not currently exist in the repository, the path is created as part of adding
                *                 the file.</p>
                *          </note>
                */
            filePath: string | undefined;
            /**
                * <p>The file mode permissions of the blob. Valid file mode permissions are listed
                *             here.</p>
                */
            fileMode?: FileModeTypeEnum | string;
            /**
                * <p>The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository,
                *             no commit ID is required. If this is not an empty repository, a commit ID is required. </p>
                *         <p>The commit ID must match the ID of the head commit at the time of the operation.
                *             Otherwise, an error occurs, and the file is not added or updated.</p>
                */
            parentCommitId?: string;
            /**
                * <p>A message about why this file was added or updated. Although it is optional, a message
                *             makes the commit history for your repository more useful.</p>
                */
            commitMessage?: string;
            /**
                * <p>The name of the person adding or updating the file. Although it is optional, a name
                *             makes the commit history for your repository more useful.</p>
                */
            name?: string;
            /**
                * <p>An email address for the person adding or updating the file.</p>
                */
            email?: string;
    }
    export namespace PutFileInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFileInput) => any;
    }
    export interface PutFileOutput {
            /**
                * <p>The full SHA ID of the commit that contains this file change.</p>
                */
            commitId: string | undefined;
            /**
                * <p>The ID of the blob, which is its SHA-1 pointer.</p>
                */
            blobId: string | undefined;
            /**
                * <p>The full SHA-1 pointer of the tree information for the commit that contains this file change.</p>
                */
            treeId: string | undefined;
    }
    export namespace PutFileOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFileOutput) => any;
    }
    /**
        * <p>The file was not added or updated because the content of the file is exactly the same as the content of that file in the repository and branch
        *         that you specified.</p>
        */
    export class SameFileContentException extends __BaseException {
            readonly name: "SameFileContentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SameFileContentException, __BaseException>);
    }
    /**
        * <p>One or more branch names specified for the trigger is not valid.</p>
        */
    export class InvalidRepositoryTriggerBranchNameException extends __BaseException {
            readonly name: "InvalidRepositoryTriggerBranchNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryTriggerBranchNameException, __BaseException>);
    }
    /**
        * <p>The custom data provided for the trigger is not valid.</p>
        */
    export class InvalidRepositoryTriggerCustomDataException extends __BaseException {
            readonly name: "InvalidRepositoryTriggerCustomDataException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryTriggerCustomDataException, __BaseException>);
    }
    /**
        * <p>The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.</p>
        */
    export class InvalidRepositoryTriggerDestinationArnException extends __BaseException {
            readonly name: "InvalidRepositoryTriggerDestinationArnException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryTriggerDestinationArnException, __BaseException>);
    }
    /**
        * <p>One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events.</p>
        */
    export class InvalidRepositoryTriggerEventsException extends __BaseException {
            readonly name: "InvalidRepositoryTriggerEventsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryTriggerEventsException, __BaseException>);
    }
    /**
        * <p>The name of the trigger is not valid.</p>
        */
    export class InvalidRepositoryTriggerNameException extends __BaseException {
            readonly name: "InvalidRepositoryTriggerNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryTriggerNameException, __BaseException>);
    }
    /**
        * <p>The AWS Region for the trigger target does not match the AWS Region for the
        *             repository. Triggers must be created in the same Region as the target for the
        *             trigger.</p>
        */
    export class InvalidRepositoryTriggerRegionException extends __BaseException {
            readonly name: "InvalidRepositoryTriggerRegionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRepositoryTriggerRegionException, __BaseException>);
    }
    /**
        * <p>The number of branches for the trigger was exceeded.</p>
        */
    export class MaximumBranchesExceededException extends __BaseException {
            readonly name: "MaximumBranchesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumBranchesExceededException, __BaseException>);
    }
    /**
        * <p>The number of triggers allowed for the repository was exceeded.</p>
        */
    export class MaximumRepositoryTriggersExceededException extends __BaseException {
            readonly name: "MaximumRepositoryTriggersExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumRepositoryTriggersExceededException, __BaseException>);
    }
    /**
        * <p>Represents the input of a put repository triggers operation.</p>
        */
    export interface PutRepositoryTriggersInput {
            /**
                * <p>The name of the repository where you want to create or update the trigger.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The JSON block of configuration information for each trigger.</p>
                */
            triggers: RepositoryTrigger[] | undefined;
    }
    export namespace PutRepositoryTriggersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRepositoryTriggersInput) => any;
    }
    /**
        * <p>Represents the output of a put repository triggers operation.</p>
        */
    export interface PutRepositoryTriggersOutput {
            /**
                * <p>The system-generated unique ID for the create or update operation.</p>
                */
            configurationId?: string;
    }
    export namespace PutRepositoryTriggersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRepositoryTriggersOutput) => any;
    }
    /**
        * <p>At least one branch name is required, but was not specified in the trigger
        *             configuration.</p>
        */
    export class RepositoryTriggerBranchNameListRequiredException extends __BaseException {
            readonly name: "RepositoryTriggerBranchNameListRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryTriggerBranchNameListRequiredException, __BaseException>);
    }
    /**
        * <p>A destination ARN for the target service for the trigger is required, but was not
        *             specified.</p>
        */
    export class RepositoryTriggerDestinationArnRequiredException extends __BaseException {
            readonly name: "RepositoryTriggerDestinationArnRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryTriggerDestinationArnRequiredException, __BaseException>);
    }
    /**
        * <p>At least one event for the trigger is required, but was not specified.</p>
        */
    export class RepositoryTriggerEventsListRequiredException extends __BaseException {
            readonly name: "RepositoryTriggerEventsListRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryTriggerEventsListRequiredException, __BaseException>);
    }
    /**
        * <p>A name for the trigger is required, but was not specified.</p>
        */
    export class RepositoryTriggerNameRequiredException extends __BaseException {
            readonly name: "RepositoryTriggerNameRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryTriggerNameRequiredException, __BaseException>);
    }
    /**
        * <p>The list of triggers for the repository is required, but was not specified.</p>
        */
    export class RepositoryTriggersListRequiredException extends __BaseException {
            readonly name: "RepositoryTriggersListRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RepositoryTriggersListRequiredException, __BaseException>);
    }
    export interface TagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to which you want to add or update tags.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The key-value pair to use when tagging this repository.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceInput) => any;
    }
    /**
        * <p>A map of tags is required.</p>
        */
    export class TagsMapRequiredException extends __BaseException {
            readonly name: "TagsMapRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagsMapRequiredException, __BaseException>);
    }
    /**
        * <p>Represents the input of a test repository triggers operation.</p>
        */
    export interface TestRepositoryTriggersInput {
            /**
                * <p>The name of the repository in which to test the triggers.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The list of triggers to test.</p>
                */
            triggers: RepositoryTrigger[] | undefined;
    }
    export namespace TestRepositoryTriggersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestRepositoryTriggersInput) => any;
    }
    /**
        * <p>A trigger failed to run.</p>
        */
    export interface RepositoryTriggerExecutionFailure {
            /**
                * <p>The name of the trigger that did not run.</p>
                */
            trigger?: string;
            /**
                * <p>Message information about the trigger that did not run.</p>
                */
            failureMessage?: string;
    }
    export namespace RepositoryTriggerExecutionFailure {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryTriggerExecutionFailure) => any;
    }
    /**
        * <p>Represents the output of a test repository triggers operation.</p>
        */
    export interface TestRepositoryTriggersOutput {
            /**
                * <p>The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.</p>
                */
            successfulExecutions?: string[];
            /**
                * <p>The list of triggers that were not tested. This list provides the names of the
                *             triggers that could not be tested, separated by commas.</p>
                */
            failedExecutions?: RepositoryTriggerExecutionFailure[];
    }
    export namespace TestRepositoryTriggersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestRepositoryTriggersOutput) => any;
    }
    /**
        * <p>The list of tags is not valid.</p>
        */
    export class InvalidTagKeysListException extends __BaseException {
            readonly name: "InvalidTagKeysListException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTagKeysListException, __BaseException>);
    }
    /**
        * <p>A list of tag keys is required. The list cannot be empty or null.</p>
        */
    export class TagKeysListRequiredException extends __BaseException {
            readonly name: "TagKeysListRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagKeysListRequiredException, __BaseException>);
    }
    export interface UntagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to which you want to remove tags.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tag key for each tag that you want to remove from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceInput) => any;
    }
    /**
        * <p>The SHA-256 hash signature for the rule content is not valid.</p>
        */
    export class InvalidRuleContentSha256Exception extends __BaseException {
            readonly name: "InvalidRuleContentSha256Exception";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRuleContentSha256Exception, __BaseException>);
    }
    export interface UpdateApprovalRuleTemplateContentInput {
            /**
                * <p>The name of the approval rule template where you want to update the content of the rule. </p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>The content that replaces the existing content of the rule. Content statements must be
                *             complete. You cannot provide only the changes.</p>
                */
            newRuleContent: string | undefined;
            /**
                * <p>The SHA-256 hash signature for the content of the approval rule. You can retrieve this
                *             information by using
                *             <a>GetPullRequest</a>.</p>
                */
            existingRuleContentSha256?: string;
    }
    export namespace UpdateApprovalRuleTemplateContentInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApprovalRuleTemplateContentInput) => any;
    }
    export interface UpdateApprovalRuleTemplateContentOutput {
            /**
                * <p>Returns information about an approval rule template.</p>
                */
            approvalRuleTemplate: ApprovalRuleTemplate | undefined;
    }
    export namespace UpdateApprovalRuleTemplateContentOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApprovalRuleTemplateContentOutput) => any;
    }
    export interface UpdateApprovalRuleTemplateDescriptionInput {
            /**
                * <p>The name of the template for which you want to update the description.</p>
                */
            approvalRuleTemplateName: string | undefined;
            /**
                * <p>The updated description of the approval rule template.</p>
                */
            approvalRuleTemplateDescription: string | undefined;
    }
    export namespace UpdateApprovalRuleTemplateDescriptionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApprovalRuleTemplateDescriptionInput) => any;
    }
    export interface UpdateApprovalRuleTemplateDescriptionOutput {
            /**
                * <p>The structure and content of the updated approval rule template.</p>
                */
            approvalRuleTemplate: ApprovalRuleTemplate | undefined;
    }
    export namespace UpdateApprovalRuleTemplateDescriptionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApprovalRuleTemplateDescriptionOutput) => any;
    }
    export interface UpdateApprovalRuleTemplateNameInput {
            /**
                * <p>The current name of the approval rule template.</p>
                */
            oldApprovalRuleTemplateName: string | undefined;
            /**
                * <p>The new name you want to apply to the approval rule template.</p>
                */
            newApprovalRuleTemplateName: string | undefined;
    }
    export namespace UpdateApprovalRuleTemplateNameInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApprovalRuleTemplateNameInput) => any;
    }
    export interface UpdateApprovalRuleTemplateNameOutput {
            /**
                * <p>The structure and content of the updated approval rule template.</p>
                */
            approvalRuleTemplate: ApprovalRuleTemplate | undefined;
    }
    export namespace UpdateApprovalRuleTemplateNameOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApprovalRuleTemplateNameOutput) => any;
    }
    /**
        * <p>You cannot modify or delete this comment. Only comment authors can modify or delete their comments.</p>
        */
    export class CommentNotCreatedByCallerException extends __BaseException {
            readonly name: "CommentNotCreatedByCallerException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CommentNotCreatedByCallerException, __BaseException>);
    }
    export interface UpdateCommentInput {
            /**
                * <p>The system-generated ID of the comment you want to update. To get this ID, use <a>GetCommentsForComparedCommit</a>
                *             or <a>GetCommentsForPullRequest</a>.</p>
                */
            commentId: string | undefined;
            /**
                * <p>The updated content to replace the existing content of the comment.</p>
                */
            content: string | undefined;
    }
    export namespace UpdateCommentInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCommentInput) => any;
    }
    export interface UpdateCommentOutput {
            /**
                * <p>Information about the updated comment.</p>
                */
            comment?: Comment;
    }
    export namespace UpdateCommentOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCommentOutput) => any;
    }
    /**
        * <p>Represents the input of an update default branch operation.</p>
        */
    export interface UpdateDefaultBranchInput {
            /**
                * <p>The name of the repository to set or change the default branch for.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The name of the branch to set as the default.</p>
                */
            defaultBranchName: string | undefined;
    }
    export namespace UpdateDefaultBranchInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDefaultBranchInput) => any;
    }
    export interface UpdatePullRequestApprovalRuleContentInput {
            /**
                * <p>The system-generated ID of the pull request.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The name of the approval rule you want to update.</p>
                */
            approvalRuleName: string | undefined;
            /**
                * <p>The SHA-256 hash signature for the content of the approval rule. You can retrieve this
                *             information by using
                *             <a>GetPullRequest</a>.</p>
                */
            existingRuleContentSha256?: string;
            /**
                * <p>The updated content for the approval rule.</p>
                *         <note>
                *             <p>When you update the content of the approval rule, you can specify approvers in an
                *                 approval pool in one of two ways:</p>
                *             <ul>
                *                <li>
                *                     <p>
                *                      <b>CodeCommitApprovers</b>: This option only
                *                         requires an AWS account and a resource. It can be used for both IAM users
                *                         and federated access users whose name matches the provided resource name.
                *                         This is a very powerful option that offers a great deal of flexibility. For
                *                         example, if you specify the AWS account <i>123456789012</i>
                *                         and <i>Mary_Major</i>, all of the following are counted as
                *                         approvals coming from that user:</p>
                *                     <ul>
                *                      <li>
                *                             <p>An IAM user in the account
                *                                 (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p>
                *                         </li>
                *                      <li>
                *                             <p>A federated user identified in IAM as Mary_Major
                *                                 (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p>
                *                         </li>
                *                   </ul>
                *                     <p>This option does not recognize an active session of someone assuming the
                *                         role of CodeCommitReview with a role session name of
                *                             <i>Mary_Major</i>
                *                             (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>)
                *                         unless you include a wildcard (*Mary_Major).</p>
                *                 </li>
                *                <li>
                *                     <p>
                *                      <b>Fully qualified ARN</b>: This option allows
                *                         you to specify the fully qualified Amazon Resource Name (ARN) of the IAM
                *                         user or role. </p>
                *                 </li>
                *             </ul>
                *             <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM
                *                     Identifiers</a> in the <i>IAM User Guide</i>.</p>
                *
                *         </note>
                */
            newRuleContent: string | undefined;
    }
    export namespace UpdatePullRequestApprovalRuleContentInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestApprovalRuleContentInput) => any;
    }
    export interface UpdatePullRequestApprovalRuleContentOutput {
            /**
                * <p>Information about the updated approval rule.</p>
                */
            approvalRule: ApprovalRule | undefined;
    }
    export namespace UpdatePullRequestApprovalRuleContentOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestApprovalRuleContentOutput) => any;
    }
    /**
        * <p>The state for the approval is not valid. Valid values include APPROVE and REVOKE. </p>
        */
    export class InvalidApprovalStateException extends __BaseException {
            readonly name: "InvalidApprovalStateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidApprovalStateException, __BaseException>);
    }
    /**
        * <p>The number of approvals required for the approval rule exceeds the maximum number allowed.</p>
        */
    export class MaximumNumberOfApprovalsExceededException extends __BaseException {
            readonly name: "MaximumNumberOfApprovalsExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumNumberOfApprovalsExceededException, __BaseException>);
    }
    /**
        * <p>The approval cannot be applied because the user approving the pull request matches the user who created the pull request. You cannot approve a pull
        *         request that you created.</p>
        */
    export class PullRequestCannotBeApprovedByAuthorException extends __BaseException {
            readonly name: "PullRequestCannotBeApprovedByAuthorException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PullRequestCannotBeApprovedByAuthorException, __BaseException>);
    }
    export interface UpdatePullRequestApprovalStateInput {
            /**
                * <p>The system-generated ID of the pull request.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The system-generated ID of the revision.</p>
                */
            revisionId: string | undefined;
            /**
                * <p>The approval state to associate with the user on the pull request.</p>
                */
            approvalState: ApprovalState | string | undefined;
    }
    export namespace UpdatePullRequestApprovalStateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestApprovalStateInput) => any;
    }
    export interface UpdatePullRequestDescriptionInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The updated content of the description for the pull request. This content replaces the
                *             existing description.</p>
                */
            description: string | undefined;
    }
    export namespace UpdatePullRequestDescriptionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestDescriptionInput) => any;
    }
    export interface UpdatePullRequestDescriptionOutput {
            /**
                * <p>Information about the updated pull request.</p>
                */
            pullRequest: PullRequest | undefined;
    }
    export namespace UpdatePullRequestDescriptionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestDescriptionOutput) => any;
    }
    /**
        * <p>The pull request status update is not valid. The only valid update is from <code>OPEN</code> to <code>CLOSED</code>.</p>
        */
    export class InvalidPullRequestStatusUpdateException extends __BaseException {
            readonly name: "InvalidPullRequestStatusUpdateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPullRequestStatusUpdateException, __BaseException>);
    }
    /**
        * <p>A pull request status is required, but none was provided.</p>
        */
    export class PullRequestStatusRequiredException extends __BaseException {
            readonly name: "PullRequestStatusRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PullRequestStatusRequiredException, __BaseException>);
    }
    export interface UpdatePullRequestStatusInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The status of the pull request. The only valid operations are to update the status
                *             from <code>OPEN</code> to <code>OPEN</code>, <code>OPEN</code> to <code>CLOSED</code> or
                *             from <code>CLOSED</code> to <code>CLOSED</code>.</p>
                */
            pullRequestStatus: PullRequestStatusEnum | string | undefined;
    }
    export namespace UpdatePullRequestStatusInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestStatusInput) => any;
    }
    export interface UpdatePullRequestStatusOutput {
            /**
                * <p>Information about the pull request.</p>
                */
            pullRequest: PullRequest | undefined;
    }
    export namespace UpdatePullRequestStatusOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestStatusOutput) => any;
    }
    export interface UpdatePullRequestTitleInput {
            /**
                * <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>
                */
            pullRequestId: string | undefined;
            /**
                * <p>The updated title of the pull request. This replaces the existing title.</p>
                */
            title: string | undefined;
    }
    export namespace UpdatePullRequestTitleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestTitleInput) => any;
    }
    export interface UpdatePullRequestTitleOutput {
            /**
                * <p>Information about the updated pull request.</p>
                */
            pullRequest: PullRequest | undefined;
    }
    export namespace UpdatePullRequestTitleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePullRequestTitleOutput) => any;
    }
    /**
        * <p>Represents the input of an update repository description operation.</p>
        */
    export interface UpdateRepositoryDescriptionInput {
            /**
                * <p>The name of the repository to set or change the comment or description for.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.</p>
                */
            repositoryDescription?: string;
    }
    export namespace UpdateRepositoryDescriptionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRepositoryDescriptionInput) => any;
    }
    /**
        * <p>Represents the input of an update repository description operation.</p>
        */
    export interface UpdateRepositoryNameInput {
            /**
                * <p>The current name of the repository.</p>
                */
            oldName: string | undefined;
            /**
                * <p>The new name for the repository.</p>
                */
            newName: string | undefined;
    }
    export namespace UpdateRepositoryNameInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRepositoryNameInput) => any;
    }
}

declare module '@aws-sdk/client-codecommit/node_modules/@aws-sdk/client-codecommit/dist-types/models/CodeCommitServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CodeCommit service.
        */
    export class CodeCommitServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

