// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-mediapackage' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ConfigureLogsCommandInput, ConfigureLogsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ConfigureLogsCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateChannelCommand";
    import { CreateHarvestJobCommandInput, CreateHarvestJobCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateHarvestJobCommand";
    import { CreateOriginEndpointCommandInput, CreateOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateOriginEndpointCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DeleteChannelCommand";
    import { DeleteOriginEndpointCommandInput, DeleteOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DeleteOriginEndpointCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeChannelCommand";
    import { DescribeHarvestJobCommandInput, DescribeHarvestJobCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeHarvestJobCommand";
    import { DescribeOriginEndpointCommandInput, DescribeOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeOriginEndpointCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListChannelsCommand";
    import { ListHarvestJobsCommandInput, ListHarvestJobsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListHarvestJobsCommand";
    import { ListOriginEndpointsCommandInput, ListOriginEndpointsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListOriginEndpointsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListTagsForResourceCommand";
    import { RotateChannelCredentialsCommandInput, RotateChannelCredentialsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/RotateChannelCredentialsCommand";
    import { RotateIngestEndpointCredentialsCommandInput, RotateIngestEndpointCredentialsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/RotateIngestEndpointCredentialsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UpdateChannelCommand";
    import { UpdateOriginEndpointCommandInput, UpdateOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UpdateOriginEndpointCommand";
    import { MediaPackageClient } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    /**
        * AWS Elemental MediaPackage
        */
    export class MediaPackage extends MediaPackageClient {
            /**
                * Changes the Channel's properities to configure log subscription
                */
            configureLogs(args: ConfigureLogsCommandInput, options?: __HttpHandlerOptions): Promise<ConfigureLogsCommandOutput>;
            configureLogs(args: ConfigureLogsCommandInput, cb: (err: any, data?: ConfigureLogsCommandOutput) => void): void;
            configureLogs(args: ConfigureLogsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfigureLogsCommandOutput) => void): void;
            /**
                * Creates a new Channel.
                */
            createChannel(args: CreateChannelCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelCommandOutput>;
            createChannel(args: CreateChannelCommandInput, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            createChannel(args: CreateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            /**
                * Creates a new HarvestJob record.
                */
            createHarvestJob(args: CreateHarvestJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateHarvestJobCommandOutput>;
            createHarvestJob(args: CreateHarvestJobCommandInput, cb: (err: any, data?: CreateHarvestJobCommandOutput) => void): void;
            createHarvestJob(args: CreateHarvestJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHarvestJobCommandOutput) => void): void;
            /**
                * Creates a new OriginEndpoint record.
                */
            createOriginEndpoint(args: CreateOriginEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreateOriginEndpointCommandOutput>;
            createOriginEndpoint(args: CreateOriginEndpointCommandInput, cb: (err: any, data?: CreateOriginEndpointCommandOutput) => void): void;
            createOriginEndpoint(args: CreateOriginEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOriginEndpointCommandOutput) => void): void;
            /**
                * Deletes an existing Channel.
                */
            deleteChannel(args: DeleteChannelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelCommandOutput>;
            deleteChannel(args: DeleteChannelCommandInput, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            deleteChannel(args: DeleteChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            /**
                * Deletes an existing OriginEndpoint.
                */
            deleteOriginEndpoint(args: DeleteOriginEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOriginEndpointCommandOutput>;
            deleteOriginEndpoint(args: DeleteOriginEndpointCommandInput, cb: (err: any, data?: DeleteOriginEndpointCommandOutput) => void): void;
            deleteOriginEndpoint(args: DeleteOriginEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOriginEndpointCommandOutput) => void): void;
            /**
                * Gets details about a Channel.
                */
            describeChannel(args: DescribeChannelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelCommandOutput>;
            describeChannel(args: DescribeChannelCommandInput, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            describeChannel(args: DescribeChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            /**
                * Gets details about an existing HarvestJob.
                */
            describeHarvestJob(args: DescribeHarvestJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeHarvestJobCommandOutput>;
            describeHarvestJob(args: DescribeHarvestJobCommandInput, cb: (err: any, data?: DescribeHarvestJobCommandOutput) => void): void;
            describeHarvestJob(args: DescribeHarvestJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeHarvestJobCommandOutput) => void): void;
            /**
                * Gets details about an existing OriginEndpoint.
                */
            describeOriginEndpoint(args: DescribeOriginEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOriginEndpointCommandOutput>;
            describeOriginEndpoint(args: DescribeOriginEndpointCommandInput, cb: (err: any, data?: DescribeOriginEndpointCommandOutput) => void): void;
            describeOriginEndpoint(args: DescribeOriginEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOriginEndpointCommandOutput) => void): void;
            /**
                * Returns a collection of Channels.
                */
            listChannels(args: ListChannelsCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelsCommandOutput>;
            listChannels(args: ListChannelsCommandInput, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            listChannels(args: ListChannelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            /**
                * Returns a collection of HarvestJob records.
                */
            listHarvestJobs(args: ListHarvestJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListHarvestJobsCommandOutput>;
            listHarvestJobs(args: ListHarvestJobsCommandInput, cb: (err: any, data?: ListHarvestJobsCommandOutput) => void): void;
            listHarvestJobs(args: ListHarvestJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListHarvestJobsCommandOutput) => void): void;
            /**
                * Returns a collection of OriginEndpoint records.
                */
            listOriginEndpoints(args: ListOriginEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<ListOriginEndpointsCommandOutput>;
            listOriginEndpoints(args: ListOriginEndpointsCommandInput, cb: (err: any, data?: ListOriginEndpointsCommandOutput) => void): void;
            listOriginEndpoints(args: ListOriginEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOriginEndpointsCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead
                */
            rotateChannelCredentials(args: RotateChannelCredentialsCommandInput, options?: __HttpHandlerOptions): Promise<RotateChannelCredentialsCommandOutput>;
            rotateChannelCredentials(args: RotateChannelCredentialsCommandInput, cb: (err: any, data?: RotateChannelCredentialsCommandOutput) => void): void;
            rotateChannelCredentials(args: RotateChannelCredentialsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RotateChannelCredentialsCommandOutput) => void): void;
            /**
                * Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.
                */
            rotateIngestEndpointCredentials(args: RotateIngestEndpointCredentialsCommandInput, options?: __HttpHandlerOptions): Promise<RotateIngestEndpointCredentialsCommandOutput>;
            rotateIngestEndpointCredentials(args: RotateIngestEndpointCredentialsCommandInput, cb: (err: any, data?: RotateIngestEndpointCredentialsCommandOutput) => void): void;
            rotateIngestEndpointCredentials(args: RotateIngestEndpointCredentialsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RotateIngestEndpointCredentialsCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * Updates an existing Channel.
                */
            updateChannel(args: UpdateChannelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateChannelCommandOutput>;
            updateChannel(args: UpdateChannelCommandInput, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            updateChannel(args: UpdateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            /**
                * Updates an existing OriginEndpoint.
                */
            updateOriginEndpoint(args: UpdateOriginEndpointCommandInput, options?: __HttpHandlerOptions): Promise<UpdateOriginEndpointCommandOutput>;
            updateOriginEndpoint(args: UpdateOriginEndpointCommandInput, cb: (err: any, data?: UpdateOriginEndpointCommandOutput) => void): void;
            updateOriginEndpoint(args: UpdateOriginEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateOriginEndpointCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ConfigureLogsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { ConfigureLogsRequest, ConfigureLogsResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface ConfigureLogsCommandInput extends ConfigureLogsRequest {
    }
    export interface ConfigureLogsCommandOutput extends ConfigureLogsResponse, __MetadataBearer {
    }
    /**
        * Changes the Channel's properities to configure log subscription
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, ConfigureLogsCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, ConfigureLogsCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new ConfigureLogsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfigureLogsCommandInput} for command's `input` shape.
        * @see {@link ConfigureLogsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class ConfigureLogsCommand extends $Command<ConfigureLogsCommandInput, ConfigureLogsCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: ConfigureLogsCommandInput;
            constructor(input: ConfigureLogsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfigureLogsCommandInput, ConfigureLogsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { CreateChannelRequest, CreateChannelResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface CreateChannelCommandInput extends CreateChannelRequest {
    }
    export interface CreateChannelCommandOutput extends CreateChannelResponse, __MetadataBearer {
    }
    /**
        * Creates a new Channel.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, CreateChannelCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, CreateChannelCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new CreateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelCommandInput} for command's `input` shape.
        * @see {@link CreateChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class CreateChannelCommand extends $Command<CreateChannelCommandInput, CreateChannelCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: CreateChannelCommandInput;
            constructor(input: CreateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelCommandInput, CreateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateHarvestJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { CreateHarvestJobRequest, CreateHarvestJobResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface CreateHarvestJobCommandInput extends CreateHarvestJobRequest {
    }
    export interface CreateHarvestJobCommandOutput extends CreateHarvestJobResponse, __MetadataBearer {
    }
    /**
        * Creates a new HarvestJob record.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, CreateHarvestJobCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, CreateHarvestJobCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new CreateHarvestJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateHarvestJobCommandInput} for command's `input` shape.
        * @see {@link CreateHarvestJobCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class CreateHarvestJobCommand extends $Command<CreateHarvestJobCommandInput, CreateHarvestJobCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: CreateHarvestJobCommandInput;
            constructor(input: CreateHarvestJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHarvestJobCommandInput, CreateHarvestJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateOriginEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { CreateOriginEndpointRequest, CreateOriginEndpointResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface CreateOriginEndpointCommandInput extends CreateOriginEndpointRequest {
    }
    export interface CreateOriginEndpointCommandOutput extends CreateOriginEndpointResponse, __MetadataBearer {
    }
    /**
        * Creates a new OriginEndpoint record.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, CreateOriginEndpointCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, CreateOriginEndpointCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new CreateOriginEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOriginEndpointCommandInput} for command's `input` shape.
        * @see {@link CreateOriginEndpointCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class CreateOriginEndpointCommand extends $Command<CreateOriginEndpointCommandInput, CreateOriginEndpointCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: CreateOriginEndpointCommandInput;
            constructor(input: CreateOriginEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOriginEndpointCommandInput, CreateOriginEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DeleteChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { DeleteChannelRequest, DeleteChannelResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface DeleteChannelCommandInput extends DeleteChannelRequest {
    }
    export interface DeleteChannelCommandOutput extends DeleteChannelResponse, __MetadataBearer {
    }
    /**
        * Deletes an existing Channel.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, DeleteChannelCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, DeleteChannelCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new DeleteChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class DeleteChannelCommand extends $Command<DeleteChannelCommandInput, DeleteChannelCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: DeleteChannelCommandInput;
            constructor(input: DeleteChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelCommandInput, DeleteChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DeleteOriginEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { DeleteOriginEndpointRequest, DeleteOriginEndpointResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface DeleteOriginEndpointCommandInput extends DeleteOriginEndpointRequest {
    }
    export interface DeleteOriginEndpointCommandOutput extends DeleteOriginEndpointResponse, __MetadataBearer {
    }
    /**
        * Deletes an existing OriginEndpoint.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, DeleteOriginEndpointCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, DeleteOriginEndpointCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new DeleteOriginEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOriginEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteOriginEndpointCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class DeleteOriginEndpointCommand extends $Command<DeleteOriginEndpointCommandInput, DeleteOriginEndpointCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: DeleteOriginEndpointCommandInput;
            constructor(input: DeleteOriginEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOriginEndpointCommandInput, DeleteOriginEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { DescribeChannelRequest, DescribeChannelResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface DescribeChannelCommandInput extends DescribeChannelRequest {
    }
    export interface DescribeChannelCommandOutput extends DescribeChannelResponse, __MetadataBearer {
    }
    /**
        * Gets details about a Channel.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, DescribeChannelCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, DescribeChannelCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new DescribeChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class DescribeChannelCommand extends $Command<DescribeChannelCommandInput, DescribeChannelCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: DescribeChannelCommandInput;
            constructor(input: DescribeChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelCommandInput, DescribeChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeHarvestJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { DescribeHarvestJobRequest, DescribeHarvestJobResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface DescribeHarvestJobCommandInput extends DescribeHarvestJobRequest {
    }
    export interface DescribeHarvestJobCommandOutput extends DescribeHarvestJobResponse, __MetadataBearer {
    }
    /**
        * Gets details about an existing HarvestJob.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, DescribeHarvestJobCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, DescribeHarvestJobCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new DescribeHarvestJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeHarvestJobCommandInput} for command's `input` shape.
        * @see {@link DescribeHarvestJobCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class DescribeHarvestJobCommand extends $Command<DescribeHarvestJobCommandInput, DescribeHarvestJobCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: DescribeHarvestJobCommandInput;
            constructor(input: DescribeHarvestJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeHarvestJobCommandInput, DescribeHarvestJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeOriginEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { DescribeOriginEndpointRequest, DescribeOriginEndpointResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface DescribeOriginEndpointCommandInput extends DescribeOriginEndpointRequest {
    }
    export interface DescribeOriginEndpointCommandOutput extends DescribeOriginEndpointResponse, __MetadataBearer {
    }
    /**
        * Gets details about an existing OriginEndpoint.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, DescribeOriginEndpointCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, DescribeOriginEndpointCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new DescribeOriginEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOriginEndpointCommandInput} for command's `input` shape.
        * @see {@link DescribeOriginEndpointCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class DescribeOriginEndpointCommand extends $Command<DescribeOriginEndpointCommandInput, DescribeOriginEndpointCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: DescribeOriginEndpointCommandInput;
            constructor(input: DescribeOriginEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOriginEndpointCommandInput, DescribeOriginEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListChannelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { ListChannelsRequest, ListChannelsResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface ListChannelsCommandInput extends ListChannelsRequest {
    }
    export interface ListChannelsCommandOutput extends ListChannelsResponse, __MetadataBearer {
    }
    /**
        * Returns a collection of Channels.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, ListChannelsCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, ListChannelsCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new ListChannelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelsCommandInput} for command's `input` shape.
        * @see {@link ListChannelsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class ListChannelsCommand extends $Command<ListChannelsCommandInput, ListChannelsCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: ListChannelsCommandInput;
            constructor(input: ListChannelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelsCommandInput, ListChannelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListHarvestJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { ListHarvestJobsRequest, ListHarvestJobsResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface ListHarvestJobsCommandInput extends ListHarvestJobsRequest {
    }
    export interface ListHarvestJobsCommandOutput extends ListHarvestJobsResponse, __MetadataBearer {
    }
    /**
        * Returns a collection of HarvestJob records.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, ListHarvestJobsCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, ListHarvestJobsCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new ListHarvestJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListHarvestJobsCommandInput} for command's `input` shape.
        * @see {@link ListHarvestJobsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class ListHarvestJobsCommand extends $Command<ListHarvestJobsCommandInput, ListHarvestJobsCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: ListHarvestJobsCommandInput;
            constructor(input: ListHarvestJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListHarvestJobsCommandInput, ListHarvestJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListOriginEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { ListOriginEndpointsRequest, ListOriginEndpointsResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface ListOriginEndpointsCommandInput extends ListOriginEndpointsRequest {
    }
    export interface ListOriginEndpointsCommandOutput extends ListOriginEndpointsResponse, __MetadataBearer {
    }
    /**
        * Returns a collection of OriginEndpoint records.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, ListOriginEndpointsCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, ListOriginEndpointsCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new ListOriginEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOriginEndpointsCommandInput} for command's `input` shape.
        * @see {@link ListOriginEndpointsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class ListOriginEndpointsCommand extends $Command<ListOriginEndpointsCommandInput, ListOriginEndpointsCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: ListOriginEndpointsCommandInput;
            constructor(input: ListOriginEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOriginEndpointsCommandInput, ListOriginEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, MediaPackageClientResolvedConfig> {
        readonly input: ListTagsForResourceCommandInput;
        constructor(input: ListTagsForResourceCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/RotateChannelCredentialsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { RotateChannelCredentialsRequest, RotateChannelCredentialsResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface RotateChannelCredentialsCommandInput extends RotateChannelCredentialsRequest {
    }
    export interface RotateChannelCredentialsCommandOutput extends RotateChannelCredentialsResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, RotateChannelCredentialsCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, RotateChannelCredentialsCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new RotateChannelCredentialsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RotateChannelCredentialsCommandInput} for command's `input` shape.
        * @see {@link RotateChannelCredentialsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class RotateChannelCredentialsCommand extends $Command<RotateChannelCredentialsCommandInput, RotateChannelCredentialsCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: RotateChannelCredentialsCommandInput;
            constructor(input: RotateChannelCredentialsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RotateChannelCredentialsCommandInput, RotateChannelCredentialsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/RotateIngestEndpointCredentialsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { RotateIngestEndpointCredentialsRequest, RotateIngestEndpointCredentialsResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface RotateIngestEndpointCredentialsCommandInput extends RotateIngestEndpointCredentialsRequest {
    }
    export interface RotateIngestEndpointCredentialsCommandOutput extends RotateIngestEndpointCredentialsResponse, __MetadataBearer {
    }
    /**
        * Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, RotateIngestEndpointCredentialsCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, RotateIngestEndpointCredentialsCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new RotateIngestEndpointCredentialsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RotateIngestEndpointCredentialsCommandInput} for command's `input` shape.
        * @see {@link RotateIngestEndpointCredentialsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class RotateIngestEndpointCredentialsCommand extends $Command<RotateIngestEndpointCredentialsCommandInput, RotateIngestEndpointCredentialsCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: RotateIngestEndpointCredentialsCommandInput;
            constructor(input: RotateIngestEndpointCredentialsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RotateIngestEndpointCredentialsCommandInput, RotateIngestEndpointCredentialsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { TagResourceRequest } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, MediaPackageClientResolvedConfig> {
        readonly input: TagResourceCommandInput;
        constructor(input: TagResourceCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { UntagResourceRequest } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, MediaPackageClientResolvedConfig> {
        readonly input: UntagResourceCommandInput;
        constructor(input: UntagResourceCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UpdateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { UpdateChannelRequest, UpdateChannelResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface UpdateChannelCommandInput extends UpdateChannelRequest {
    }
    export interface UpdateChannelCommandOutput extends UpdateChannelResponse, __MetadataBearer {
    }
    /**
        * Updates an existing Channel.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, UpdateChannelCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, UpdateChannelCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new UpdateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateChannelCommandInput} for command's `input` shape.
        * @see {@link UpdateChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class UpdateChannelCommand extends $Command<UpdateChannelCommandInput, UpdateChannelCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: UpdateChannelCommandInput;
            constructor(input: UpdateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateChannelCommandInput, UpdateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UpdateOriginEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient";
    import { UpdateOriginEndpointRequest, UpdateOriginEndpointResponse } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0";
    export interface UpdateOriginEndpointCommandInput extends UpdateOriginEndpointRequest {
    }
    export interface UpdateOriginEndpointCommandOutput extends UpdateOriginEndpointResponse, __MetadataBearer {
    }
    /**
        * Updates an existing OriginEndpoint.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageClient, UpdateOriginEndpointCommand } from "@aws-sdk/client-mediapackage"; // ES Modules import
        * // const { MediaPackageClient, UpdateOriginEndpointCommand } = require("@aws-sdk/client-mediapackage"); // CommonJS import
        * const client = new MediaPackageClient(config);
        * const command = new UpdateOriginEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateOriginEndpointCommandInput} for command's `input` shape.
        * @see {@link UpdateOriginEndpointCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageClientResolvedConfig | config} for MediaPackageClient's `config` shape.
        *
        */
    export class UpdateOriginEndpointCommand extends $Command<UpdateOriginEndpointCommandInput, UpdateOriginEndpointCommandOutput, MediaPackageClientResolvedConfig> {
            readonly input: UpdateOriginEndpointCommandInput;
            constructor(input: UpdateOriginEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateOriginEndpointCommandInput, UpdateOriginEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/MediaPackageClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { ConfigureLogsCommandInput, ConfigureLogsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ConfigureLogsCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateChannelCommand";
    import { CreateHarvestJobCommandInput, CreateHarvestJobCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateHarvestJobCommand";
    import { CreateOriginEndpointCommandInput, CreateOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/CreateOriginEndpointCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DeleteChannelCommand";
    import { DeleteOriginEndpointCommandInput, DeleteOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DeleteOriginEndpointCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeChannelCommand";
    import { DescribeHarvestJobCommandInput, DescribeHarvestJobCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeHarvestJobCommand";
    import { DescribeOriginEndpointCommandInput, DescribeOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/DescribeOriginEndpointCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListChannelsCommand";
    import { ListHarvestJobsCommandInput, ListHarvestJobsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListHarvestJobsCommand";
    import { ListOriginEndpointsCommandInput, ListOriginEndpointsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListOriginEndpointsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/ListTagsForResourceCommand";
    import { RotateChannelCredentialsCommandInput, RotateChannelCredentialsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/RotateChannelCredentialsCommand";
    import { RotateIngestEndpointCredentialsCommandInput, RotateIngestEndpointCredentialsCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/RotateIngestEndpointCredentialsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UpdateChannelCommand";
    import { UpdateOriginEndpointCommandInput, UpdateOriginEndpointCommandOutput } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/commands/UpdateOriginEndpointCommand";
    export type ServiceInputTypes = ConfigureLogsCommandInput | CreateChannelCommandInput | CreateHarvestJobCommandInput | CreateOriginEndpointCommandInput | DeleteChannelCommandInput | DeleteOriginEndpointCommandInput | DescribeChannelCommandInput | DescribeHarvestJobCommandInput | DescribeOriginEndpointCommandInput | ListChannelsCommandInput | ListHarvestJobsCommandInput | ListOriginEndpointsCommandInput | ListTagsForResourceCommandInput | RotateChannelCredentialsCommandInput | RotateIngestEndpointCredentialsCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateChannelCommandInput | UpdateOriginEndpointCommandInput;
    export type ServiceOutputTypes = ConfigureLogsCommandOutput | CreateChannelCommandOutput | CreateHarvestJobCommandOutput | CreateOriginEndpointCommandOutput | DeleteChannelCommandOutput | DeleteOriginEndpointCommandOutput | DescribeChannelCommandOutput | DescribeHarvestJobCommandOutput | DescribeOriginEndpointCommandOutput | ListChannelsCommandOutput | ListHarvestJobsCommandOutput | ListOriginEndpointsCommandOutput | ListTagsForResourceCommandOutput | RotateChannelCredentialsCommandOutput | RotateIngestEndpointCredentialsCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateChannelCommandOutput | UpdateOriginEndpointCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MediaPackageClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MediaPackageClient class constructor that set the region, credentials and other options.
        */
    export interface MediaPackageClientConfig extends MediaPackageClientConfigType {
    }
    type MediaPackageClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MediaPackageClient class. This is resolved and normalized from the {@link MediaPackageClientConfig | constructor configuration interface}.
        */
    export interface MediaPackageClientResolvedConfig extends MediaPackageClientResolvedConfigType {
    }
    /**
        * AWS Elemental MediaPackage
        */
    export class MediaPackageClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MediaPackageClientResolvedConfig> {
            /**
                * The resolved configuration of MediaPackageClient class. This is resolved and normalized from the {@link MediaPackageClientConfig | constructor configuration interface}.
                */
            readonly config: MediaPackageClientResolvedConfig;
            constructor(configuration: MediaPackageClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MediaPackageServiceException as __BaseException } from "@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/MediaPackageServiceException";
    export enum __AdTriggersElement {
            BREAK = "BREAK",
            DISTRIBUTOR_ADVERTISEMENT = "DISTRIBUTOR_ADVERTISEMENT",
            DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY = "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY",
            DISTRIBUTOR_PLACEMENT_OPPORTUNITY = "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
            PROVIDER_ADVERTISEMENT = "PROVIDER_ADVERTISEMENT",
            PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY = "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
            PROVIDER_PLACEMENT_OPPORTUNITY = "PROVIDER_PLACEMENT_OPPORTUNITY",
            SPLICE_INSERT = "SPLICE_INSERT"
    }
    export enum __PeriodTriggersElement {
            ADS = "ADS"
    }
    /**
        * Configure egress access logging.
        */
    export interface EgressAccessLogs {
            /**
                * Customize the log group name.
                */
            LogGroupName?: string;
    }
    export namespace EgressAccessLogs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EgressAccessLogs) => any;
    }
    /**
        * An endpoint for ingesting source content for a Channel.
        */
    export interface IngestEndpoint {
            /**
                * The system generated unique identifier for the IngestEndpoint
                */
            Id?: string;
            /**
                * The system generated password for ingest authentication.
                */
            Password?: string;
            /**
                * The ingest URL to which the source stream should be sent.
                */
            Url?: string;
            /**
                * The system generated username for ingest authentication.
                */
            Username?: string;
    }
    export namespace IngestEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IngestEndpoint) => any;
    }
    /**
        * An HTTP Live Streaming (HLS) ingest resource configuration.
        */
    export interface HlsIngest {
            /**
                * A list of endpoints to which the source stream should be sent.
                */
            IngestEndpoints?: IngestEndpoint[];
    }
    export namespace HlsIngest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsIngest) => any;
    }
    /**
        * Configure ingress access logging.
        */
    export interface IngressAccessLogs {
            /**
                * Customize the log group name.
                */
            LogGroupName?: string;
    }
    export namespace IngressAccessLogs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IngressAccessLogs) => any;
    }
    /**
        * A Channel resource configuration.
        */
    export interface Channel {
            /**
                * The Amazon Resource Name (ARN) assigned to the Channel.
                */
            Arn?: string;
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * An HTTP Live Streaming (HLS) ingest resource configuration.
                */
            HlsIngest?: HlsIngest;
            /**
                * The ID of the Channel.
                */
            Id?: string;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace Channel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Channel) => any;
    }
    /**
        * Configuration parameters for where in an S3 bucket to place the harvested content
        */
    export interface S3Destination {
            /**
                * The name of an S3 bucket within which harvested content will be exported
                */
            BucketName: string | undefined;
            /**
                * The key in the specified S3 bucket where the harvested top-level manifest will be placed.
                */
            ManifestKey: string | undefined;
            /**
                * The IAM role used to write to the specified S3 bucket
                */
            RoleArn: string | undefined;
    }
    export namespace S3Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Destination) => any;
    }
    export enum Status {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * A HarvestJob resource configuration
        */
    export interface HarvestJob {
            /**
                * The Amazon Resource Name (ARN) assigned to the HarvestJob.
                */
            Arn?: string;
            /**
                * The ID of the Channel that the HarvestJob will harvest from.
                */
            ChannelId?: string;
            /**
                * The time the HarvestJob was submitted
                */
            CreatedAt?: string;
            /**
                * The end of the time-window which will be harvested.
                */
            EndTime?: string;
            /**
                * The ID of the HarvestJob. The ID must be unique within the region
                * and it cannot be changed after the HarvestJob is submitted.
                */
            Id?: string;
            /**
                * The ID of the OriginEndpoint that the HarvestJob will harvest from.
                * This cannot be changed after the HarvestJob is submitted.
                */
            OriginEndpointId?: string;
            /**
                * Configuration parameters for where in an S3 bucket to place the harvested content
                */
            S3Destination?: S3Destination;
            /**
                * The start of the time-window which will be harvested.
                */
            StartTime?: string;
            /**
                * The current status of the HarvestJob. Consider setting up a CloudWatch Event to listen for
                * HarvestJobs as they succeed or fail. In the event of failure, the CloudWatch Event will
                * include an explanation of why the HarvestJob failed.
                */
            Status?: Status | string;
    }
    export namespace HarvestJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HarvestJob) => any;
    }
    export enum AdMarkers {
            DATERANGE = "DATERANGE",
            NONE = "NONE",
            PASSTHROUGH = "PASSTHROUGH",
            SCTE35_ENHANCED = "SCTE35_ENHANCED"
    }
    export enum PlaylistType {
            EVENT = "EVENT",
            NONE = "NONE",
            VOD = "VOD"
    }
    /**
        * A HTTP Live Streaming (HLS) manifest configuration.
        */
    export interface HlsManifest {
            /**
                * This setting controls how ad markers are included in the packaged OriginEndpoint.
                * "NONE" will omit all SCTE-35 ad markers from the output.
                * "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad
                * markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.
                * "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35
                * messages in the input source.
                * "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events
                * in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value
                * that is greater than 0.
                */
            AdMarkers?: AdMarkers | string;
            /**
                * The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
                */
            Id: string | undefined;
            /**
                * When enabled, an I-Frame only stream will be included in the output.
                */
            IncludeIframeOnlyStream?: boolean;
            /**
                * An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
                */
            ManifestName?: string;
            /**
                * The HTTP Live Streaming (HLS) playlist type.
                * When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE
                * entry will be included in the media playlist.
                */
            PlaylistType?: PlaylistType | string;
            /**
                * Time window (in seconds) contained in each parent manifest.
                */
            PlaylistWindowSeconds?: number;
            /**
                * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag
                * inserted into manifests. Additionally, when an interval is specified
                * ID3Timed Metadata messages will be generated every 5 seconds using the
                * ingest time of the content.
                * If the interval is not specified, or set to 0, then
                * no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no
                * ID3Timed Metadata messages will be generated. Note that irrespective
                * of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,
                * it will be passed through to HLS output.
                */
            ProgramDateTimeIntervalSeconds?: number;
            /**
                * The URL of the packaged OriginEndpoint for consumption.
                */
            Url?: string;
    }
    export namespace HlsManifest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsManifest) => any;
    }
    export enum AdsOnDeliveryRestrictions {
            BOTH = "BOTH",
            NONE = "NONE",
            RESTRICTED = "RESTRICTED",
            UNRESTRICTED = "UNRESTRICTED"
    }
    /**
        * A HTTP Live Streaming (HLS) manifest configuration.
        */
    export interface HlsManifestCreateOrUpdateParameters {
            /**
                * This setting controls how ad markers are included in the packaged OriginEndpoint.
                * "NONE" will omit all SCTE-35 ad markers from the output.
                * "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad
                * markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.
                * "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35
                * messages in the input source.
                * "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events
                * in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value
                * that is greater than 0.
                */
            AdMarkers?: AdMarkers | string;
            /**
                * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no
                * ad markers are output.  Specify multiple items to create ad markers for all of the included
                * message types.
                */
            AdTriggers?: (__AdTriggersElement | string)[];
            /**
                * This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
                * determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
                * ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
                * contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
                * messages of the types specified in AdTriggers that do not contain delivery restrictions will
                * be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
                * AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
                * and are always treated as ads if specified in AdTriggers.
                */
            AdsOnDeliveryRestrictions?: AdsOnDeliveryRestrictions | string;
            /**
                * The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
                */
            Id: string | undefined;
            /**
                * When enabled, an I-Frame only stream will be included in the output.
                */
            IncludeIframeOnlyStream?: boolean;
            /**
                * An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
                */
            ManifestName?: string;
            /**
                * The HTTP Live Streaming (HLS) playlist type.
                * When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE
                * entry will be included in the media playlist.
                */
            PlaylistType?: PlaylistType | string;
            /**
                * Time window (in seconds) contained in each parent manifest.
                */
            PlaylistWindowSeconds?: number;
            /**
                * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag
                * inserted into manifests. Additionally, when an interval is specified
                * ID3Timed Metadata messages will be generated every 5 seconds using the
                * ingest time of the content.
                * If the interval is not specified, or set to 0, then
                * no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no
                * ID3Timed Metadata messages will be generated. Note that irrespective
                * of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,
                * it will be passed through to HLS output.
                */
            ProgramDateTimeIntervalSeconds?: number;
    }
    export namespace HlsManifestCreateOrUpdateParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsManifestCreateOrUpdateParameters) => any;
    }
    /**
        * CDN Authorization credentials
        */
    export interface Authorization {
            /**
                * The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.
                */
            CdnIdentifierSecret: string | undefined;
            /**
                * The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
                */
            SecretsRoleArn: string | undefined;
    }
    export namespace Authorization {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Authorization) => any;
    }
    export enum PresetSpeke20Audio {
            PRESET_AUDIO_1 = "PRESET-AUDIO-1",
            PRESET_AUDIO_2 = "PRESET-AUDIO-2",
            PRESET_AUDIO_3 = "PRESET-AUDIO-3",
            SHARED = "SHARED",
            UNENCRYPTED = "UNENCRYPTED"
    }
    export enum PresetSpeke20Video {
            PRESET_VIDEO_1 = "PRESET-VIDEO-1",
            PRESET_VIDEO_2 = "PRESET-VIDEO-2",
            PRESET_VIDEO_3 = "PRESET-VIDEO-3",
            PRESET_VIDEO_4 = "PRESET-VIDEO-4",
            PRESET_VIDEO_5 = "PRESET-VIDEO-5",
            PRESET_VIDEO_6 = "PRESET-VIDEO-6",
            PRESET_VIDEO_7 = "PRESET-VIDEO-7",
            PRESET_VIDEO_8 = "PRESET-VIDEO-8",
            SHARED = "SHARED",
            UNENCRYPTED = "UNENCRYPTED"
    }
    /**
        * Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0.
        * The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream.
        * To configure the encryption contract, specify which audio and video encryption presets to use.
        * Note the following considerations when using encryptionContractConfiguration:
        * encryptionContractConfiguration can be used for DASH or CMAF endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification.
        * You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
        */
    export interface EncryptionContractConfiguration {
            /**
                * A collection of audio encryption presets.
                */
            PresetSpeke20Audio: PresetSpeke20Audio | string | undefined;
            /**
                * A collection of video encryption presets.
                */
            PresetSpeke20Video: PresetSpeke20Video | string | undefined;
    }
    export namespace EncryptionContractConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionContractConfiguration) => any;
    }
    /**
        * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
        */
    export interface SpekeKeyProvider {
            /**
                * An Amazon Resource Name (ARN) of a Certificate Manager certificate
                * that MediaPackage will use for enforcing secure end-to-end data
                * transfer with the key provider service.
                */
            CertificateArn?: string;
            /**
                * Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0.
                * The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream.
                * To configure the encryption contract, specify which audio and video encryption presets to use.
                * Note the following considerations when using encryptionContractConfiguration:
                * encryptionContractConfiguration can be used for DASH or CMAF endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification.
                * You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
                */
            EncryptionContractConfiguration?: EncryptionContractConfiguration;
            /**
                * The resource ID to include in key requests.
                */
            ResourceId: string | undefined;
            /**
                * An Amazon Resource Name (ARN) of an IAM role that AWS Elemental
                * MediaPackage will assume when accessing the key provider service.
                */
            RoleArn: string | undefined;
            /**
                * The system IDs to include in key requests.
                */
            SystemIds: string[] | undefined;
            /**
                * The URL of the external key provider service.
                */
            Url: string | undefined;
    }
    export namespace SpekeKeyProvider {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SpekeKeyProvider) => any;
    }
    /**
        * A Common Media Application Format (CMAF) encryption configuration.
        */
    export interface CmafEncryption {
            /**
                * An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).
                */
            ConstantInitializationVector?: string;
            /**
                * Time (in seconds) between each encryption key rotation.
                */
            KeyRotationIntervalSeconds?: number;
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace CmafEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CmafEncryption) => any;
    }
    export enum StreamOrder {
            ORIGINAL = "ORIGINAL",
            VIDEO_BITRATE_ASCENDING = "VIDEO_BITRATE_ASCENDING",
            VIDEO_BITRATE_DESCENDING = "VIDEO_BITRATE_DESCENDING"
    }
    /**
        * A StreamSelection configuration.
        */
    export interface StreamSelection {
            /**
                * The maximum video bitrate (bps) to include in output.
                */
            MaxVideoBitsPerSecond?: number;
            /**
                * The minimum video bitrate (bps) to include in output.
                */
            MinVideoBitsPerSecond?: number;
            /**
                * A directive that determines the order of streams in the output.
                */
            StreamOrder?: StreamOrder | string;
    }
    export namespace StreamSelection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamSelection) => any;
    }
    /**
        * A Common Media Application Format (CMAF) packaging configuration.
        */
    export interface CmafPackage {
            /**
                * A Common Media Application Format (CMAF) encryption configuration.
                */
            Encryption?: CmafEncryption;
            /**
                * A list of HLS manifest configurations
                */
            HlsManifests?: HlsManifest[];
            /**
                * Duration (in seconds) of each segment. Actual segments will be
                * rounded to the nearest multiple of the source segment duration.
                */
            SegmentDurationSeconds?: number;
            /**
                * An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
                */
            SegmentPrefix?: string;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
    }
    export namespace CmafPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CmafPackage) => any;
    }
    /**
        * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
        */
    export interface DashEncryption {
            /**
                * Time (in seconds) between each encryption key rotation.
                */
            KeyRotationIntervalSeconds?: number;
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace DashEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashEncryption) => any;
    }
    export enum ManifestLayout {
            COMPACT = "COMPACT",
            FULL = "FULL"
    }
    export enum Profile {
            DVB_DASH_2014 = "DVB_DASH_2014",
            HBBTV_1_5 = "HBBTV_1_5",
            HYBRIDCAST = "HYBRIDCAST",
            NONE = "NONE"
    }
    export enum SegmentTemplateFormat {
            NUMBER_WITH_DURATION = "NUMBER_WITH_DURATION",
            NUMBER_WITH_TIMELINE = "NUMBER_WITH_TIMELINE",
            TIME_WITH_TIMELINE = "TIME_WITH_TIMELINE"
    }
    export enum UtcTiming {
            HTTP_HEAD = "HTTP-HEAD",
            HTTP_ISO = "HTTP-ISO",
            HTTP_XSDATE = "HTTP-XSDATE",
            NONE = "NONE"
    }
    /**
        * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        */
    export interface DashPackage {
            /**
                * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no
                * ad markers are output.  Specify multiple items to create ad markers for all of the included
                * message types.
                */
            AdTriggers?: (__AdTriggersElement | string)[];
            /**
                * This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
                * determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
                * ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
                * contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
                * messages of the types specified in AdTriggers that do not contain delivery restrictions will
                * be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
                * AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
                * and are always treated as ads if specified in AdTriggers.
                */
            AdsOnDeliveryRestrictions?: AdsOnDeliveryRestrictions | string;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
                */
            Encryption?: DashEncryption;
            /**
                * When enabled, an I-Frame only stream will be included in the output.
                */
            IncludeIframeOnlyStream?: boolean;
            /**
                * Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
                */
            ManifestLayout?: ManifestLayout | string;
            /**
                * Time window (in seconds) contained in each manifest.
                */
            ManifestWindowSeconds?: number;
            /**
                * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
                */
            MinBufferTimeSeconds?: number;
            /**
                * Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
                */
            MinUpdatePeriodSeconds?: number;
            /**
                * A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH)
                * Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not
                * be partitioned into more than one period. If the list contains "ADS", new periods will be created where
                * the Channel source contains SCTE-35 ad markers.
                */
            PeriodTriggers?: (__PeriodTriggersElement | string)[];
            /**
                * The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled. When set to "DVB-DASH_2014", DVB-DASH 2014 compliant output is enabled.
                */
            Profile?: Profile | string;
            /**
                * Duration (in seconds) of each segment. Actual segments will be
                * rounded to the nearest multiple of the source segment duration.
                */
            SegmentDurationSeconds?: number;
            /**
                * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
                */
            SegmentTemplateFormat?: SegmentTemplateFormat | string;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
            /**
                * Duration (in seconds) to delay live content before presentation.
                */
            SuggestedPresentationDelaySeconds?: number;
            /**
                * Determines the type of UTCTiming included in the Media Presentation Description (MPD)
                */
            UtcTiming?: UtcTiming | string;
            /**
                * Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
                */
            UtcTimingUri?: string;
    }
    export namespace DashPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashPackage) => any;
    }
    export enum EncryptionMethod {
            AES_128 = "AES_128",
            SAMPLE_AES = "SAMPLE_AES"
    }
    /**
        * An HTTP Live Streaming (HLS) encryption configuration.
        */
    export interface HlsEncryption {
            /**
                * A constant initialization vector for encryption (optional).
                * When not specified the initialization vector will be periodically rotated.
                */
            ConstantInitializationVector?: string;
            /**
                * The encryption method to use.
                */
            EncryptionMethod?: EncryptionMethod | string;
            /**
                * Interval (in seconds) between each encryption key rotation.
                */
            KeyRotationIntervalSeconds?: number;
            /**
                * When enabled, the EXT-X-KEY tag will be repeated in output manifests.
                */
            RepeatExtXKey?: boolean;
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace HlsEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsEncryption) => any;
    }
    /**
        * An HTTP Live Streaming (HLS) packaging configuration.
        */
    export interface HlsPackage {
            /**
                * This setting controls how ad markers are included in the packaged OriginEndpoint.
                * "NONE" will omit all SCTE-35 ad markers from the output.
                * "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad
                * markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.
                * "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35
                * messages in the input source.
                * "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events
                * in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value
                * that is greater than 0.
                */
            AdMarkers?: AdMarkers | string;
            /**
                * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no
                * ad markers are output.  Specify multiple items to create ad markers for all of the included
                * message types.
                */
            AdTriggers?: (__AdTriggersElement | string)[];
            /**
                * This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
                * determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
                * ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
                * contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
                * messages of the types specified in AdTriggers that do not contain delivery restrictions will
                * be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
                * AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
                * and are always treated as ads if specified in AdTriggers.
                */
            AdsOnDeliveryRestrictions?: AdsOnDeliveryRestrictions | string;
            /**
                * An HTTP Live Streaming (HLS) encryption configuration.
                */
            Encryption?: HlsEncryption;
            /**
                * When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
                */
            IncludeDvbSubtitles?: boolean;
            /**
                * When enabled, an I-Frame only stream will be included in the output.
                */
            IncludeIframeOnlyStream?: boolean;
            /**
                * The HTTP Live Streaming (HLS) playlist type.
                * When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE
                * entry will be included in the media playlist.
                */
            PlaylistType?: PlaylistType | string;
            /**
                * Time window (in seconds) contained in each parent manifest.
                */
            PlaylistWindowSeconds?: number;
            /**
                * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag
                * inserted into manifests. Additionally, when an interval is specified
                * ID3Timed Metadata messages will be generated every 5 seconds using the
                * ingest time of the content.
                * If the interval is not specified, or set to 0, then
                * no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no
                * ID3Timed Metadata messages will be generated. Note that irrespective
                * of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,
                * it will be passed through to HLS output.
                */
            ProgramDateTimeIntervalSeconds?: number;
            /**
                * Duration (in seconds) of each fragment. Actual fragments will be
                * rounded to the nearest multiple of the source fragment duration.
                */
            SegmentDurationSeconds?: number;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
            /**
                * When enabled, audio streams will be placed in rendition groups in the output.
                */
            UseAudioRenditionGroup?: boolean;
    }
    export namespace HlsPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsPackage) => any;
    }
    /**
        * A Microsoft Smooth Streaming (MSS) encryption configuration.
        */
    export interface MssEncryption {
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace MssEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MssEncryption) => any;
    }
    /**
        * A Microsoft Smooth Streaming (MSS) packaging configuration.
        */
    export interface MssPackage {
            /**
                * A Microsoft Smooth Streaming (MSS) encryption configuration.
                */
            Encryption?: MssEncryption;
            /**
                * The time window (in seconds) contained in each manifest.
                */
            ManifestWindowSeconds?: number;
            /**
                * The duration (in seconds) of each segment.
                */
            SegmentDurationSeconds?: number;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
    }
    export namespace MssPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MssPackage) => any;
    }
    export enum Origination {
            ALLOW = "ALLOW",
            DENY = "DENY"
    }
    /**
        * An OriginEndpoint resource configuration.
        */
    export interface OriginEndpoint {
            /**
                * The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The ID of the Channel the OriginEndpoint is associated with.
                */
            ChannelId?: string;
            /**
                * A Common Media Application Format (CMAF) packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * A short text description of the OriginEndpoint.
                */
            Description?: string;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the OriginEndpoint.
                */
            Id?: string;
            /**
                * A short string appended to the end of the OriginEndpoint URL.
                */
            ManifestName?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) packaging configuration.
                */
            MssPackage?: MssPackage;
            /**
                * Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
                * may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
                * requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
                */
            Origination?: Origination | string;
            /**
                * Maximum duration (seconds) of content to retain for startover playback.
                * If not specified, startover playback will be disabled for the OriginEndpoint.
                */
            StartoverWindowSeconds?: number;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
            /**
                * Amount of delay (seconds) to enforce on the playback of live content.
                * If not specified, there will be no time delay in effect for the OriginEndpoint.
                */
            TimeDelaySeconds?: number;
            /**
                * The URL of the packaged OriginEndpoint for consumption.
                */
            Url?: string;
            /**
                * A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
                */
            Whitelist?: string[];
    }
    export namespace OriginEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OriginEndpoint) => any;
    }
    /**
        * A Common Media Application Format (CMAF) packaging configuration.
        */
    export interface CmafPackageCreateOrUpdateParameters {
            /**
                * A Common Media Application Format (CMAF) encryption configuration.
                */
            Encryption?: CmafEncryption;
            /**
                * A list of HLS manifest configurations
                */
            HlsManifests?: HlsManifestCreateOrUpdateParameters[];
            /**
                * Duration (in seconds) of each segment. Actual segments will be
                * rounded to the nearest multiple of the source segment duration.
                */
            SegmentDurationSeconds?: number;
            /**
                * An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
                */
            SegmentPrefix?: string;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
    }
    export namespace CmafPackageCreateOrUpdateParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CmafPackageCreateOrUpdateParameters) => any;
    }
    /**
        * the option to configure log subscription.
        */
    export interface ConfigureLogsRequest {
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of the channel to log subscription.
                */
            Id: string | undefined;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
    }
    export namespace ConfigureLogsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureLogsRequest) => any;
    }
    export interface ConfigureLogsResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the Channel.
                */
            Arn?: string;
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * An HTTP Live Streaming (HLS) ingest resource configuration.
                */
            HlsIngest?: HlsIngest;
            /**
                * The ID of the Channel.
                */
            Id?: string;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace ConfigureLogsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureLogsResponse) => any;
    }
    /**
        * The client is not authorized to access the requested resource.
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * An unexpected error occurred.
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    /**
        * The requested resource does not exist.
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * An unexpected error occurred.
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * The client has exceeded their resource or throttling limits.
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * The parameters sent in the request are not valid.
        */
    export class UnprocessableEntityException extends __BaseException {
            readonly name: "UnprocessableEntityException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnprocessableEntityException, __BaseException>);
    }
    /**
        * A new Channel configuration.
        */
    export interface CreateChannelRequest {
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * The ID of the Channel. The ID must be unique within the region and it
                * cannot be changed after a Channel is created.
                */
            Id: string | undefined;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelRequest) => any;
    }
    export interface CreateChannelResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the Channel.
                */
            Arn?: string;
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * An HTTP Live Streaming (HLS) ingest resource configuration.
                */
            HlsIngest?: HlsIngest;
            /**
                * The ID of the Channel.
                */
            Id?: string;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelResponse) => any;
    }
    /**
        * Configuration parameters used to create a new HarvestJob.
        */
    export interface CreateHarvestJobRequest {
            /**
                * The end of the time-window which will be harvested
                */
            EndTime: string | undefined;
            /**
                * The ID of the HarvestJob. The ID must be unique within the region
                * and it cannot be changed after the HarvestJob is submitted
                */
            Id: string | undefined;
            /**
                * The ID of the OriginEndpoint that the HarvestJob will harvest from.
                * This cannot be changed after the HarvestJob is submitted.
                */
            OriginEndpointId: string | undefined;
            /**
                * Configuration parameters for where in an S3 bucket to place the harvested content
                */
            S3Destination: S3Destination | undefined;
            /**
                * The start of the time-window which will be harvested
                */
            StartTime: string | undefined;
    }
    export namespace CreateHarvestJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHarvestJobRequest) => any;
    }
    export interface CreateHarvestJobResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the HarvestJob.
                */
            Arn?: string;
            /**
                * The ID of the Channel that the HarvestJob will harvest from.
                */
            ChannelId?: string;
            /**
                * The time the HarvestJob was submitted
                */
            CreatedAt?: string;
            /**
                * The end of the time-window which will be harvested.
                */
            EndTime?: string;
            /**
                * The ID of the HarvestJob. The ID must be unique within the region
                * and it cannot be changed after the HarvestJob is submitted.
                */
            Id?: string;
            /**
                * The ID of the OriginEndpoint that the HarvestJob will harvest from.
                * This cannot be changed after the HarvestJob is submitted.
                */
            OriginEndpointId?: string;
            /**
                * Configuration parameters for where in an S3 bucket to place the harvested content
                */
            S3Destination?: S3Destination;
            /**
                * The start of the time-window which will be harvested.
                */
            StartTime?: string;
            /**
                * The current status of the HarvestJob. Consider setting up a CloudWatch Event to listen for
                * HarvestJobs as they succeed or fail. In the event of failure, the CloudWatch Event will
                * include an explanation of why the HarvestJob failed.
                */
            Status?: Status | string;
    }
    export namespace CreateHarvestJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHarvestJobResponse) => any;
    }
    /**
        * Configuration parameters used to create a new OriginEndpoint.
        */
    export interface CreateOriginEndpointRequest {
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The ID of the Channel that the OriginEndpoint will be associated with.
                * This cannot be changed after the OriginEndpoint is created.
                */
            ChannelId: string | undefined;
            /**
                * A Common Media Application Format (CMAF) packaging configuration.
                */
            CmafPackage?: CmafPackageCreateOrUpdateParameters;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * A short text description of the OriginEndpoint.
                */
            Description?: string;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the OriginEndpoint.  The ID must be unique within the region
                * and it cannot be changed after the OriginEndpoint is created.
                */
            Id: string | undefined;
            /**
                * A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
                */
            ManifestName?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) packaging configuration.
                */
            MssPackage?: MssPackage;
            /**
                * Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
                * may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
                * requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
                */
            Origination?: Origination | string;
            /**
                * Maximum duration (seconds) of content to retain for startover playback.
                * If not specified, startover playback will be disabled for the OriginEndpoint.
                */
            StartoverWindowSeconds?: number;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
            /**
                * Amount of delay (seconds) to enforce on the playback of live content.
                * If not specified, there will be no time delay in effect for the OriginEndpoint.
                */
            TimeDelaySeconds?: number;
            /**
                * A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
                */
            Whitelist?: string[];
    }
    export namespace CreateOriginEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOriginEndpointRequest) => any;
    }
    export interface CreateOriginEndpointResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The ID of the Channel the OriginEndpoint is associated with.
                */
            ChannelId?: string;
            /**
                * A Common Media Application Format (CMAF) packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * A short text description of the OriginEndpoint.
                */
            Description?: string;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the OriginEndpoint.
                */
            Id?: string;
            /**
                * A short string appended to the end of the OriginEndpoint URL.
                */
            ManifestName?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) packaging configuration.
                */
            MssPackage?: MssPackage;
            /**
                * Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
                * may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
                * requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
                */
            Origination?: Origination | string;
            /**
                * Maximum duration (seconds) of content to retain for startover playback.
                * If not specified, startover playback will be disabled for the OriginEndpoint.
                */
            StartoverWindowSeconds?: number;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
            /**
                * Amount of delay (seconds) to enforce on the playback of live content.
                * If not specified, there will be no time delay in effect for the OriginEndpoint.
                */
            TimeDelaySeconds?: number;
            /**
                * The URL of the packaged OriginEndpoint for consumption.
                */
            Url?: string;
            /**
                * A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
                */
            Whitelist?: string[];
    }
    export namespace CreateOriginEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOriginEndpointResponse) => any;
    }
    export interface DeleteChannelRequest {
            /**
                * The ID of the Channel to delete.
                */
            Id: string | undefined;
    }
    export namespace DeleteChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelRequest) => any;
    }
    export interface DeleteChannelResponse {
    }
    export namespace DeleteChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelResponse) => any;
    }
    export interface DeleteOriginEndpointRequest {
            /**
                * The ID of the OriginEndpoint to delete.
                */
            Id: string | undefined;
    }
    export namespace DeleteOriginEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOriginEndpointRequest) => any;
    }
    export interface DeleteOriginEndpointResponse {
    }
    export namespace DeleteOriginEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOriginEndpointResponse) => any;
    }
    export interface DescribeChannelRequest {
            /**
                * The ID of a Channel.
                */
            Id: string | undefined;
    }
    export namespace DescribeChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelRequest) => any;
    }
    export interface DescribeChannelResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the Channel.
                */
            Arn?: string;
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * An HTTP Live Streaming (HLS) ingest resource configuration.
                */
            HlsIngest?: HlsIngest;
            /**
                * The ID of the Channel.
                */
            Id?: string;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelResponse) => any;
    }
    export interface DescribeHarvestJobRequest {
            /**
                * The ID of the HarvestJob.
                */
            Id: string | undefined;
    }
    export namespace DescribeHarvestJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHarvestJobRequest) => any;
    }
    export interface DescribeHarvestJobResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the HarvestJob.
                */
            Arn?: string;
            /**
                * The ID of the Channel that the HarvestJob will harvest from.
                */
            ChannelId?: string;
            /**
                * The time the HarvestJob was submitted
                */
            CreatedAt?: string;
            /**
                * The end of the time-window which will be harvested.
                */
            EndTime?: string;
            /**
                * The ID of the HarvestJob. The ID must be unique within the region
                * and it cannot be changed after the HarvestJob is submitted.
                */
            Id?: string;
            /**
                * The ID of the OriginEndpoint that the HarvestJob will harvest from.
                * This cannot be changed after the HarvestJob is submitted.
                */
            OriginEndpointId?: string;
            /**
                * Configuration parameters for where in an S3 bucket to place the harvested content
                */
            S3Destination?: S3Destination;
            /**
                * The start of the time-window which will be harvested.
                */
            StartTime?: string;
            /**
                * The current status of the HarvestJob. Consider setting up a CloudWatch Event to listen for
                * HarvestJobs as they succeed or fail. In the event of failure, the CloudWatch Event will
                * include an explanation of why the HarvestJob failed.
                */
            Status?: Status | string;
    }
    export namespace DescribeHarvestJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHarvestJobResponse) => any;
    }
    export interface DescribeOriginEndpointRequest {
            /**
                * The ID of the OriginEndpoint.
                */
            Id: string | undefined;
    }
    export namespace DescribeOriginEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOriginEndpointRequest) => any;
    }
    export interface DescribeOriginEndpointResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The ID of the Channel the OriginEndpoint is associated with.
                */
            ChannelId?: string;
            /**
                * A Common Media Application Format (CMAF) packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * A short text description of the OriginEndpoint.
                */
            Description?: string;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the OriginEndpoint.
                */
            Id?: string;
            /**
                * A short string appended to the end of the OriginEndpoint URL.
                */
            ManifestName?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) packaging configuration.
                */
            MssPackage?: MssPackage;
            /**
                * Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
                * may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
                * requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
                */
            Origination?: Origination | string;
            /**
                * Maximum duration (seconds) of content to retain for startover playback.
                * If not specified, startover playback will be disabled for the OriginEndpoint.
                */
            StartoverWindowSeconds?: number;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
            /**
                * Amount of delay (seconds) to enforce on the playback of live content.
                * If not specified, there will be no time delay in effect for the OriginEndpoint.
                */
            TimeDelaySeconds?: number;
            /**
                * The URL of the packaged OriginEndpoint for consumption.
                */
            Url?: string;
            /**
                * A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
                */
            Whitelist?: string[];
    }
    export namespace DescribeOriginEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOriginEndpointResponse) => any;
    }
    export interface ListChannelsRequest {
            /**
                * Upper bound on number of records to return.
                */
            MaxResults?: number;
            /**
                * A token used to resume pagination from the end of a previous request.
                */
            NextToken?: string;
    }
    export namespace ListChannelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsRequest) => any;
    }
    export interface ListChannelsResponse {
            /**
                * A list of Channel records.
                */
            Channels?: Channel[];
            /**
                * A token that can be used to resume pagination from the end of the collection.
                */
            NextToken?: string;
    }
    export namespace ListChannelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsResponse) => any;
    }
    export interface ListHarvestJobsRequest {
            /**
                * When specified, the request will return only HarvestJobs associated with the given Channel ID.
                */
            IncludeChannelId?: string;
            /**
                * When specified, the request will return only HarvestJobs in the given status.
                */
            IncludeStatus?: string;
            /**
                * The upper bound on the number of records to return.
                */
            MaxResults?: number;
            /**
                * A token used to resume pagination from the end of a previous request.
                */
            NextToken?: string;
    }
    export namespace ListHarvestJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHarvestJobsRequest) => any;
    }
    export interface ListHarvestJobsResponse {
            /**
                * A list of HarvestJob records.
                */
            HarvestJobs?: HarvestJob[];
            /**
                * A token that can be used to resume pagination from the end of the collection.
                */
            NextToken?: string;
    }
    export namespace ListHarvestJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHarvestJobsResponse) => any;
    }
    export interface ListOriginEndpointsRequest {
            /**
                * When specified, the request will return only OriginEndpoints associated with the given Channel ID.
                */
            ChannelId?: string;
            /**
                * The upper bound on the number of records to return.
                */
            MaxResults?: number;
            /**
                * A token used to resume pagination from the end of a previous request.
                */
            NextToken?: string;
    }
    export namespace ListOriginEndpointsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOriginEndpointsRequest) => any;
    }
    export interface ListOriginEndpointsResponse {
            /**
                * A token that can be used to resume pagination from the end of the collection.
                */
            NextToken?: string;
            /**
                * A list of OriginEndpoint records.
                */
            OriginEndpoints?: OriginEndpoint[];
    }
    export namespace ListOriginEndpointsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOriginEndpointsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface RotateChannelCredentialsRequest {
            /**
                * The ID of the channel to update.
                */
            Id: string | undefined;
    }
    export namespace RotateChannelCredentialsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateChannelCredentialsRequest) => any;
    }
    export interface RotateChannelCredentialsResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the Channel.
                */
            Arn?: string;
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * An HTTP Live Streaming (HLS) ingest resource configuration.
                */
            HlsIngest?: HlsIngest;
            /**
                * The ID of the Channel.
                */
            Id?: string;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace RotateChannelCredentialsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateChannelCredentialsResponse) => any;
    }
    export interface RotateIngestEndpointCredentialsRequest {
            /**
                * The ID of the channel the IngestEndpoint is on.
                */
            Id: string | undefined;
            /**
                * The id of the IngestEndpoint whose credentials should be rotated
                */
            IngestEndpointId: string | undefined;
    }
    export namespace RotateIngestEndpointCredentialsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateIngestEndpointCredentialsRequest) => any;
    }
    export interface RotateIngestEndpointCredentialsResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the Channel.
                */
            Arn?: string;
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * An HTTP Live Streaming (HLS) ingest resource configuration.
                */
            HlsIngest?: HlsIngest;
            /**
                * The ID of the Channel.
                */
            Id?: string;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace RotateIngestEndpointCredentialsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateIngestEndpointCredentialsResponse) => any;
    }
    export interface TagResourceRequest {
            ResourceArn: string | undefined;
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            ResourceArn: string | undefined;
            /**
                * The key(s) of tag to be deleted
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    /**
        * Configuration parameters used to update the Channel.
        */
    export interface UpdateChannelRequest {
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * The ID of the Channel to update.
                */
            Id: string | undefined;
    }
    export namespace UpdateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelRequest) => any;
    }
    export interface UpdateChannelResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the Channel.
                */
            Arn?: string;
            /**
                * A short text description of the Channel.
                */
            Description?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * An HTTP Live Streaming (HLS) ingest resource configuration.
                */
            HlsIngest?: HlsIngest;
            /**
                * The ID of the Channel.
                */
            Id?: string;
            /**
                * Configure ingress access logging.
                */
            IngressAccessLogs?: IngressAccessLogs;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdateChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelResponse) => any;
    }
    /**
        * Configuration parameters used to update an existing OriginEndpoint.
        */
    export interface UpdateOriginEndpointRequest {
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * A Common Media Application Format (CMAF) packaging configuration.
                */
            CmafPackage?: CmafPackageCreateOrUpdateParameters;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * A short text description of the OriginEndpoint.
                */
            Description?: string;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the OriginEndpoint to update.
                */
            Id: string | undefined;
            /**
                * A short string that will be appended to the end of the Endpoint URL.
                */
            ManifestName?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) packaging configuration.
                */
            MssPackage?: MssPackage;
            /**
                * Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
                * may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
                * requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
                */
            Origination?: Origination | string;
            /**
                * Maximum duration (in seconds) of content to retain for startover playback.
                * If not specified, startover playback will be disabled for the OriginEndpoint.
                */
            StartoverWindowSeconds?: number;
            /**
                * Amount of delay (in seconds) to enforce on the playback of live content.
                * If not specified, there will be no time delay in effect for the OriginEndpoint.
                */
            TimeDelaySeconds?: number;
            /**
                * A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
                */
            Whitelist?: string[];
    }
    export namespace UpdateOriginEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOriginEndpointRequest) => any;
    }
    export interface UpdateOriginEndpointResponse {
            /**
                * The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The ID of the Channel the OriginEndpoint is associated with.
                */
            ChannelId?: string;
            /**
                * A Common Media Application Format (CMAF) packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * A short text description of the OriginEndpoint.
                */
            Description?: string;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the OriginEndpoint.
                */
            Id?: string;
            /**
                * A short string appended to the end of the OriginEndpoint URL.
                */
            ManifestName?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) packaging configuration.
                */
            MssPackage?: MssPackage;
            /**
                * Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
                * may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
                * requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
                */
            Origination?: Origination | string;
            /**
                * Maximum duration (seconds) of content to retain for startover playback.
                * If not specified, startover playback will be disabled for the OriginEndpoint.
                */
            StartoverWindowSeconds?: number;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
            /**
                * Amount of delay (seconds) to enforce on the playback of live content.
                * If not specified, there will be no time delay in effect for the OriginEndpoint.
                */
            TimeDelaySeconds?: number;
            /**
                * The URL of the packaged OriginEndpoint for consumption.
                */
            Url?: string;
            /**
                * A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
                */
            Whitelist?: string[];
    }
    export namespace UpdateOriginEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOriginEndpointResponse) => any;
    }
}

declare module '@aws-sdk/client-mediapackage/node_modules/@aws-sdk/client-mediapackage/dist-types/models/MediaPackageServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from MediaPackage service.
        */
    export class MediaPackageServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

