// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-sms' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateAppCommandInput, CreateAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/CreateAppCommand";
    import { CreateReplicationJobCommandInput, CreateReplicationJobCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/CreateReplicationJobCommand";
    import { DeleteAppCommandInput, DeleteAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppCommand";
    import { DeleteAppLaunchConfigurationCommandInput, DeleteAppLaunchConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppLaunchConfigurationCommand";
    import { DeleteAppReplicationConfigurationCommandInput, DeleteAppReplicationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppReplicationConfigurationCommand";
    import { DeleteAppValidationConfigurationCommandInput, DeleteAppValidationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppValidationConfigurationCommand";
    import { DeleteReplicationJobCommandInput, DeleteReplicationJobCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteReplicationJobCommand";
    import { DeleteServerCatalogCommandInput, DeleteServerCatalogCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteServerCatalogCommand";
    import { DisassociateConnectorCommandInput, DisassociateConnectorCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DisassociateConnectorCommand";
    import { GenerateChangeSetCommandInput, GenerateChangeSetCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GenerateChangeSetCommand";
    import { GenerateTemplateCommandInput, GenerateTemplateCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GenerateTemplateCommand";
    import { GetAppCommandInput, GetAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppCommand";
    import { GetAppLaunchConfigurationCommandInput, GetAppLaunchConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppLaunchConfigurationCommand";
    import { GetAppReplicationConfigurationCommandInput, GetAppReplicationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppReplicationConfigurationCommand";
    import { GetAppValidationConfigurationCommandInput, GetAppValidationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppValidationConfigurationCommand";
    import { GetAppValidationOutputCommandInput, GetAppValidationOutputCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppValidationOutputCommand";
    import { GetConnectorsCommandInput, GetConnectorsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetConnectorsCommand";
    import { GetReplicationJobsCommandInput, GetReplicationJobsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetReplicationJobsCommand";
    import { GetReplicationRunsCommandInput, GetReplicationRunsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetReplicationRunsCommand";
    import { GetServersCommandInput, GetServersCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetServersCommand";
    import { ImportAppCatalogCommandInput, ImportAppCatalogCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ImportAppCatalogCommand";
    import { ImportServerCatalogCommandInput, ImportServerCatalogCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ImportServerCatalogCommand";
    import { LaunchAppCommandInput, LaunchAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/LaunchAppCommand";
    import { ListAppsCommandInput, ListAppsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ListAppsCommand";
    import { NotifyAppValidationOutputCommandInput, NotifyAppValidationOutputCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/NotifyAppValidationOutputCommand";
    import { PutAppLaunchConfigurationCommandInput, PutAppLaunchConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppLaunchConfigurationCommand";
    import { PutAppReplicationConfigurationCommandInput, PutAppReplicationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppReplicationConfigurationCommand";
    import { PutAppValidationConfigurationCommandInput, PutAppValidationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppValidationConfigurationCommand";
    import { StartAppReplicationCommandInput, StartAppReplicationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartAppReplicationCommand";
    import { StartOnDemandAppReplicationCommandInput, StartOnDemandAppReplicationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartOnDemandAppReplicationCommand";
    import { StartOnDemandReplicationRunCommandInput, StartOnDemandReplicationRunCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartOnDemandReplicationRunCommand";
    import { StopAppReplicationCommandInput, StopAppReplicationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StopAppReplicationCommand";
    import { TerminateAppCommandInput, TerminateAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/TerminateAppCommand";
    import { UpdateAppCommandInput, UpdateAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/UpdateAppCommand";
    import { UpdateReplicationJobCommandInput, UpdateReplicationJobCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/UpdateReplicationJobCommand";
    import { SMSClient } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    /**
        * <important>
        *             <p>
        *                <b>Product update</b>
        *             </p>
        *             <p>We recommend <a href="http://aws.amazon.com/application-migration-service">Amazon Web Services Application Migration Service</a> (Amazon Web Services
        *                 MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is
        *                 unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March
        *                 2023.</p>
        *          </important>
        *
        *         <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your
        *             on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following
        *             resources:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a href="http://aws.amazon.com/server-migration-service/">Server Migration Service
        *                     product page</a>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/server-migration-service/latest/userguide/">Server Migration Service User Guide</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class SMS extends SMSClient {
            /**
                * <p>Creates an application. An application consists of one or more server groups. Each
                *             server group contain one or more servers.</p>
                */
            createApp(args: CreateAppCommandInput, options?: __HttpHandlerOptions): Promise<CreateAppCommandOutput>;
            createApp(args: CreateAppCommandInput, cb: (err: any, data?: CreateAppCommandOutput) => void): void;
            createApp(args: CreateAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAppCommandOutput) => void): void;
            /**
                * <p>Creates a replication job. The replication job schedules periodic replication runs
                *             to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image
                *             (AMI).</p>
                */
            createReplicationJob(args: CreateReplicationJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateReplicationJobCommandOutput>;
            createReplicationJob(args: CreateReplicationJobCommandInput, cb: (err: any, data?: CreateReplicationJobCommandOutput) => void): void;
            createReplicationJob(args: CreateReplicationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReplicationJobCommandOutput) => void): void;
            /**
                * <p>Deletes the specified application. Optionally deletes the launched stack associated with
                *             the application and all Server Migration Service replication jobs for servers in the application.</p>
                */
            deleteApp(args: DeleteAppCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppCommandOutput>;
            deleteApp(args: DeleteAppCommandInput, cb: (err: any, data?: DeleteAppCommandOutput) => void): void;
            deleteApp(args: DeleteAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppCommandOutput) => void): void;
            /**
                * <p>Deletes the launch configuration for the specified application.</p>
                */
            deleteAppLaunchConfiguration(args: DeleteAppLaunchConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppLaunchConfigurationCommandOutput>;
            deleteAppLaunchConfiguration(args: DeleteAppLaunchConfigurationCommandInput, cb: (err: any, data?: DeleteAppLaunchConfigurationCommandOutput) => void): void;
            deleteAppLaunchConfiguration(args: DeleteAppLaunchConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppLaunchConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the replication configuration for the specified application.</p>
                */
            deleteAppReplicationConfiguration(args: DeleteAppReplicationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppReplicationConfigurationCommandOutput>;
            deleteAppReplicationConfiguration(args: DeleteAppReplicationConfigurationCommandInput, cb: (err: any, data?: DeleteAppReplicationConfigurationCommandOutput) => void): void;
            deleteAppReplicationConfiguration(args: DeleteAppReplicationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppReplicationConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the validation configuration for the specified application.</p>
                */
            deleteAppValidationConfiguration(args: DeleteAppValidationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppValidationConfigurationCommandOutput>;
            deleteAppValidationConfiguration(args: DeleteAppValidationConfigurationCommandInput, cb: (err: any, data?: DeleteAppValidationConfigurationCommandOutput) => void): void;
            deleteAppValidationConfiguration(args: DeleteAppValidationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppValidationConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified replication job.</p>
                *         <p>After you delete a replication job, there are no further replication runs. Amazon Web Services
                *             deletes the contents of the Amazon S3 bucket used to store Server Migration Service artifacts. The AMIs created
                *             by the replication runs are not deleted.</p>
                */
            deleteReplicationJob(args: DeleteReplicationJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReplicationJobCommandOutput>;
            deleteReplicationJob(args: DeleteReplicationJobCommandInput, cb: (err: any, data?: DeleteReplicationJobCommandOutput) => void): void;
            deleteReplicationJob(args: DeleteReplicationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReplicationJobCommandOutput) => void): void;
            /**
                * <p>Deletes all servers from your server catalog.</p>
                */
            deleteServerCatalog(args: DeleteServerCatalogCommandInput, options?: __HttpHandlerOptions): Promise<DeleteServerCatalogCommandOutput>;
            deleteServerCatalog(args: DeleteServerCatalogCommandInput, cb: (err: any, data?: DeleteServerCatalogCommandOutput) => void): void;
            deleteServerCatalog(args: DeleteServerCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteServerCatalogCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified connector from Server Migration Service.</p>
                *         <p>After you disassociate a connector, it is no longer available to support
                *             replication jobs.</p>
                */
            disassociateConnector(args: DisassociateConnectorCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateConnectorCommandOutput>;
            disassociateConnector(args: DisassociateConnectorCommandInput, cb: (err: any, data?: DisassociateConnectorCommandOutput) => void): void;
            disassociateConnector(args: DisassociateConnectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateConnectorCommandOutput) => void): void;
            /**
                * <p>Generates a target change set for a currently launched stack and writes it to an Amazon S3
                *             object in the customer’s Amazon S3 bucket.</p>
                */
            generateChangeSet(args: GenerateChangeSetCommandInput, options?: __HttpHandlerOptions): Promise<GenerateChangeSetCommandOutput>;
            generateChangeSet(args: GenerateChangeSetCommandInput, cb: (err: any, data?: GenerateChangeSetCommandOutput) => void): void;
            generateChangeSet(args: GenerateChangeSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateChangeSetCommandOutput) => void): void;
            /**
                * <p>Generates an CloudFormation template based on the current launch configuration and writes it to
                *             an Amazon S3 object in the customer’s Amazon S3 bucket.</p>
                */
            generateTemplate(args: GenerateTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GenerateTemplateCommandOutput>;
            generateTemplate(args: GenerateTemplateCommandInput, cb: (err: any, data?: GenerateTemplateCommandOutput) => void): void;
            generateTemplate(args: GenerateTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateTemplateCommandOutput) => void): void;
            /**
                * <p>Retrieve information about the specified application.</p>
                */
            getApp(args: GetAppCommandInput, options?: __HttpHandlerOptions): Promise<GetAppCommandOutput>;
            getApp(args: GetAppCommandInput, cb: (err: any, data?: GetAppCommandOutput) => void): void;
            getApp(args: GetAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppCommandOutput) => void): void;
            /**
                * <p>Retrieves the application launch configuration associated with the specified application.</p>
                */
            getAppLaunchConfiguration(args: GetAppLaunchConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetAppLaunchConfigurationCommandOutput>;
            getAppLaunchConfiguration(args: GetAppLaunchConfigurationCommandInput, cb: (err: any, data?: GetAppLaunchConfigurationCommandOutput) => void): void;
            getAppLaunchConfiguration(args: GetAppLaunchConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppLaunchConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves the application replication configuration associated with the specified
                *             application.</p>
                */
            getAppReplicationConfiguration(args: GetAppReplicationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetAppReplicationConfigurationCommandOutput>;
            getAppReplicationConfiguration(args: GetAppReplicationConfigurationCommandInput, cb: (err: any, data?: GetAppReplicationConfigurationCommandOutput) => void): void;
            getAppReplicationConfiguration(args: GetAppReplicationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppReplicationConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a configuration for validating an application.</p>
                */
            getAppValidationConfiguration(args: GetAppValidationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetAppValidationConfigurationCommandOutput>;
            getAppValidationConfiguration(args: GetAppValidationConfigurationCommandInput, cb: (err: any, data?: GetAppValidationConfigurationCommandOutput) => void): void;
            getAppValidationConfiguration(args: GetAppValidationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppValidationConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves output from validating an application.</p>
                */
            getAppValidationOutput(args: GetAppValidationOutputCommandInput, options?: __HttpHandlerOptions): Promise<GetAppValidationOutputCommandOutput>;
            getAppValidationOutput(args: GetAppValidationOutputCommandInput, cb: (err: any, data?: GetAppValidationOutputCommandOutput) => void): void;
            getAppValidationOutput(args: GetAppValidationOutputCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppValidationOutputCommandOutput) => void): void;
            /**
                * <p>Describes the connectors registered with the Server Migration Service.</p>
                */
            getConnectors(args: GetConnectorsCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectorsCommandOutput>;
            getConnectors(args: GetConnectorsCommandInput, cb: (err: any, data?: GetConnectorsCommandOutput) => void): void;
            getConnectors(args: GetConnectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectorsCommandOutput) => void): void;
            /**
                * <p>Describes the specified replication job or all of your replication jobs.</p>
                */
            getReplicationJobs(args: GetReplicationJobsCommandInput, options?: __HttpHandlerOptions): Promise<GetReplicationJobsCommandOutput>;
            getReplicationJobs(args: GetReplicationJobsCommandInput, cb: (err: any, data?: GetReplicationJobsCommandOutput) => void): void;
            getReplicationJobs(args: GetReplicationJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetReplicationJobsCommandOutput) => void): void;
            /**
                * <p>Describes the replication runs for the specified replication job.</p>
                */
            getReplicationRuns(args: GetReplicationRunsCommandInput, options?: __HttpHandlerOptions): Promise<GetReplicationRunsCommandOutput>;
            getReplicationRuns(args: GetReplicationRunsCommandInput, cb: (err: any, data?: GetReplicationRunsCommandOutput) => void): void;
            getReplicationRuns(args: GetReplicationRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetReplicationRunsCommandOutput) => void): void;
            /**
                * <p>Describes the servers in your server catalog.</p>
                *         <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p>
                */
            getServers(args: GetServersCommandInput, options?: __HttpHandlerOptions): Promise<GetServersCommandOutput>;
            getServers(args: GetServersCommandInput, cb: (err: any, data?: GetServersCommandOutput) => void): void;
            getServers(args: GetServersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServersCommandOutput) => void): void;
            /**
                * <p>Allows application import from Migration Hub.</p>
                */
            importAppCatalog(args: ImportAppCatalogCommandInput, options?: __HttpHandlerOptions): Promise<ImportAppCatalogCommandOutput>;
            importAppCatalog(args: ImportAppCatalogCommandInput, cb: (err: any, data?: ImportAppCatalogCommandOutput) => void): void;
            importAppCatalog(args: ImportAppCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportAppCatalogCommandOutput) => void): void;
            /**
                * <p>Gathers a complete list of on-premises servers. Connectors must be installed and
                *             monitoring all servers to import.</p>
                *         <p>This call returns immediately, but might take additional time to retrieve all the
                *             servers.</p>
                */
            importServerCatalog(args: ImportServerCatalogCommandInput, options?: __HttpHandlerOptions): Promise<ImportServerCatalogCommandOutput>;
            importServerCatalog(args: ImportServerCatalogCommandInput, cb: (err: any, data?: ImportServerCatalogCommandOutput) => void): void;
            importServerCatalog(args: ImportServerCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportServerCatalogCommandOutput) => void): void;
            /**
                * <p>Launches the specified application as a stack in CloudFormation.</p>
                */
            launchApp(args: LaunchAppCommandInput, options?: __HttpHandlerOptions): Promise<LaunchAppCommandOutput>;
            launchApp(args: LaunchAppCommandInput, cb: (err: any, data?: LaunchAppCommandOutput) => void): void;
            launchApp(args: LaunchAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: LaunchAppCommandOutput) => void): void;
            /**
                * <p>Retrieves summaries for all applications.</p>
                */
            listApps(args: ListAppsCommandInput, options?: __HttpHandlerOptions): Promise<ListAppsCommandOutput>;
            listApps(args: ListAppsCommandInput, cb: (err: any, data?: ListAppsCommandOutput) => void): void;
            listApps(args: ListAppsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAppsCommandOutput) => void): void;
            /**
                * <p>Provides information to Server Migration Service about whether application validation is successful.</p>
                */
            notifyAppValidationOutput(args: NotifyAppValidationOutputCommandInput, options?: __HttpHandlerOptions): Promise<NotifyAppValidationOutputCommandOutput>;
            notifyAppValidationOutput(args: NotifyAppValidationOutputCommandInput, cb: (err: any, data?: NotifyAppValidationOutputCommandOutput) => void): void;
            notifyAppValidationOutput(args: NotifyAppValidationOutputCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: NotifyAppValidationOutputCommandOutput) => void): void;
            /**
                * <p>Creates or updates the launch configuration for the specified application.</p>
                */
            putAppLaunchConfiguration(args: PutAppLaunchConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutAppLaunchConfigurationCommandOutput>;
            putAppLaunchConfiguration(args: PutAppLaunchConfigurationCommandInput, cb: (err: any, data?: PutAppLaunchConfigurationCommandOutput) => void): void;
            putAppLaunchConfiguration(args: PutAppLaunchConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAppLaunchConfigurationCommandOutput) => void): void;
            /**
                * <p>Creates or updates the replication configuration for the specified application.</p>
                */
            putAppReplicationConfiguration(args: PutAppReplicationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutAppReplicationConfigurationCommandOutput>;
            putAppReplicationConfiguration(args: PutAppReplicationConfigurationCommandInput, cb: (err: any, data?: PutAppReplicationConfigurationCommandOutput) => void): void;
            putAppReplicationConfiguration(args: PutAppReplicationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAppReplicationConfigurationCommandOutput) => void): void;
            /**
                * <p>Creates or updates a validation configuration for the specified application.</p>
                */
            putAppValidationConfiguration(args: PutAppValidationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutAppValidationConfigurationCommandOutput>;
            putAppValidationConfiguration(args: PutAppValidationConfigurationCommandInput, cb: (err: any, data?: PutAppValidationConfigurationCommandOutput) => void): void;
            putAppValidationConfiguration(args: PutAppValidationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAppValidationConfigurationCommandOutput) => void): void;
            /**
                * <p>Starts replicating the specified application by creating replication jobs for each server in the
                *             application.</p>
                */
            startAppReplication(args: StartAppReplicationCommandInput, options?: __HttpHandlerOptions): Promise<StartAppReplicationCommandOutput>;
            startAppReplication(args: StartAppReplicationCommandInput, cb: (err: any, data?: StartAppReplicationCommandOutput) => void): void;
            startAppReplication(args: StartAppReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartAppReplicationCommandOutput) => void): void;
            /**
                * <p>Starts an on-demand replication run for the specified application.</p>
                */
            startOnDemandAppReplication(args: StartOnDemandAppReplicationCommandInput, options?: __HttpHandlerOptions): Promise<StartOnDemandAppReplicationCommandOutput>;
            startOnDemandAppReplication(args: StartOnDemandAppReplicationCommandInput, cb: (err: any, data?: StartOnDemandAppReplicationCommandOutput) => void): void;
            startOnDemandAppReplication(args: StartOnDemandAppReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartOnDemandAppReplicationCommandOutput) => void): void;
            /**
                * <p>Starts an on-demand replication run for the specified replication job. This
                *             replication run starts immediately. This replication run is in addition to the ones
                *             already scheduled.</p>
                *         <p>There is a limit on the number of on-demand replications runs that you can request
                *             in a 24-hour period.</p>
                */
            startOnDemandReplicationRun(args: StartOnDemandReplicationRunCommandInput, options?: __HttpHandlerOptions): Promise<StartOnDemandReplicationRunCommandOutput>;
            startOnDemandReplicationRun(args: StartOnDemandReplicationRunCommandInput, cb: (err: any, data?: StartOnDemandReplicationRunCommandOutput) => void): void;
            startOnDemandReplicationRun(args: StartOnDemandReplicationRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartOnDemandReplicationRunCommandOutput) => void): void;
            /**
                * <p>Stops replicating the specified application by deleting the replication job for each server in
                *             the application.</p>
                */
            stopAppReplication(args: StopAppReplicationCommandInput, options?: __HttpHandlerOptions): Promise<StopAppReplicationCommandOutput>;
            stopAppReplication(args: StopAppReplicationCommandInput, cb: (err: any, data?: StopAppReplicationCommandOutput) => void): void;
            stopAppReplication(args: StopAppReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopAppReplicationCommandOutput) => void): void;
            /**
                * <p>Terminates the stack for the specified application.</p>
                */
            terminateApp(args: TerminateAppCommandInput, options?: __HttpHandlerOptions): Promise<TerminateAppCommandOutput>;
            terminateApp(args: TerminateAppCommandInput, cb: (err: any, data?: TerminateAppCommandOutput) => void): void;
            terminateApp(args: TerminateAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TerminateAppCommandOutput) => void): void;
            /**
                * <p>Updates the specified application.</p>
                */
            updateApp(args: UpdateAppCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAppCommandOutput>;
            updateApp(args: UpdateAppCommandInput, cb: (err: any, data?: UpdateAppCommandOutput) => void): void;
            updateApp(args: UpdateAppCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAppCommandOutput) => void): void;
            /**
                * <p>Updates the specified settings for the specified replication job.</p>
                */
            updateReplicationJob(args: UpdateReplicationJobCommandInput, options?: __HttpHandlerOptions): Promise<UpdateReplicationJobCommandOutput>;
            updateReplicationJob(args: UpdateReplicationJobCommandInput, cb: (err: any, data?: UpdateReplicationJobCommandOutput) => void): void;
            updateReplicationJob(args: UpdateReplicationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateReplicationJobCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/CreateAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAppRequest, CreateAppResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface CreateAppCommandInput extends CreateAppRequest {
    }
    export interface CreateAppCommandOutput extends CreateAppResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an application. An application consists of one or more server groups. Each
        *             server group contain one or more servers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, CreateAppCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, CreateAppCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new CreateAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAppCommandInput} for command's `input` shape.
        * @see {@link CreateAppCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class CreateAppCommand extends $Command<CreateAppCommandInput, CreateAppCommandOutput, SMSClientResolvedConfig> {
            readonly input: CreateAppCommandInput;
            constructor(input: CreateAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAppCommandInput, CreateAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/CreateReplicationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateReplicationJobRequest, CreateReplicationJobResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface CreateReplicationJobCommandInput extends CreateReplicationJobRequest {
    }
    export interface CreateReplicationJobCommandOutput extends CreateReplicationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a replication job. The replication job schedules periodic replication runs
        *             to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image
        *             (AMI).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, CreateReplicationJobCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, CreateReplicationJobCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new CreateReplicationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReplicationJobCommandInput} for command's `input` shape.
        * @see {@link CreateReplicationJobCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class CreateReplicationJobCommand extends $Command<CreateReplicationJobCommandInput, CreateReplicationJobCommandOutput, SMSClientResolvedConfig> {
            readonly input: CreateReplicationJobCommandInput;
            constructor(input: CreateReplicationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReplicationJobCommandInput, CreateReplicationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAppRequest, DeleteAppResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface DeleteAppCommandInput extends DeleteAppRequest {
    }
    export interface DeleteAppCommandOutput extends DeleteAppResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified application. Optionally deletes the launched stack associated with
        *             the application and all Server Migration Service replication jobs for servers in the application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, DeleteAppCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, DeleteAppCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new DeleteAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppCommandInput} for command's `input` shape.
        * @see {@link DeleteAppCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class DeleteAppCommand extends $Command<DeleteAppCommandInput, DeleteAppCommandOutput, SMSClientResolvedConfig> {
            readonly input: DeleteAppCommandInput;
            constructor(input: DeleteAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppCommandInput, DeleteAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppLaunchConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAppLaunchConfigurationRequest, DeleteAppLaunchConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface DeleteAppLaunchConfigurationCommandInput extends DeleteAppLaunchConfigurationRequest {
    }
    export interface DeleteAppLaunchConfigurationCommandOutput extends DeleteAppLaunchConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the launch configuration for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, DeleteAppLaunchConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, DeleteAppLaunchConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new DeleteAppLaunchConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppLaunchConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteAppLaunchConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class DeleteAppLaunchConfigurationCommand extends $Command<DeleteAppLaunchConfigurationCommandInput, DeleteAppLaunchConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: DeleteAppLaunchConfigurationCommandInput;
            constructor(input: DeleteAppLaunchConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppLaunchConfigurationCommandInput, DeleteAppLaunchConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppReplicationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAppReplicationConfigurationRequest, DeleteAppReplicationConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface DeleteAppReplicationConfigurationCommandInput extends DeleteAppReplicationConfigurationRequest {
    }
    export interface DeleteAppReplicationConfigurationCommandOutput extends DeleteAppReplicationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the replication configuration for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, DeleteAppReplicationConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, DeleteAppReplicationConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new DeleteAppReplicationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppReplicationConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteAppReplicationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class DeleteAppReplicationConfigurationCommand extends $Command<DeleteAppReplicationConfigurationCommandInput, DeleteAppReplicationConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: DeleteAppReplicationConfigurationCommandInput;
            constructor(input: DeleteAppReplicationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppReplicationConfigurationCommandInput, DeleteAppReplicationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppValidationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAppValidationConfigurationRequest, DeleteAppValidationConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface DeleteAppValidationConfigurationCommandInput extends DeleteAppValidationConfigurationRequest {
    }
    export interface DeleteAppValidationConfigurationCommandOutput extends DeleteAppValidationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the validation configuration for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, DeleteAppValidationConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, DeleteAppValidationConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new DeleteAppValidationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppValidationConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteAppValidationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class DeleteAppValidationConfigurationCommand extends $Command<DeleteAppValidationConfigurationCommandInput, DeleteAppValidationConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: DeleteAppValidationConfigurationCommandInput;
            constructor(input: DeleteAppValidationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppValidationConfigurationCommandInput, DeleteAppValidationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteReplicationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteReplicationJobRequest, DeleteReplicationJobResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface DeleteReplicationJobCommandInput extends DeleteReplicationJobRequest {
    }
    export interface DeleteReplicationJobCommandOutput extends DeleteReplicationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified replication job.</p>
        *         <p>After you delete a replication job, there are no further replication runs. Amazon Web Services
        *             deletes the contents of the Amazon S3 bucket used to store Server Migration Service artifacts. The AMIs created
        *             by the replication runs are not deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, DeleteReplicationJobCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, DeleteReplicationJobCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new DeleteReplicationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReplicationJobCommandInput} for command's `input` shape.
        * @see {@link DeleteReplicationJobCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class DeleteReplicationJobCommand extends $Command<DeleteReplicationJobCommandInput, DeleteReplicationJobCommandOutput, SMSClientResolvedConfig> {
            readonly input: DeleteReplicationJobCommandInput;
            constructor(input: DeleteReplicationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReplicationJobCommandInput, DeleteReplicationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteServerCatalogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteServerCatalogRequest, DeleteServerCatalogResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface DeleteServerCatalogCommandInput extends DeleteServerCatalogRequest {
    }
    export interface DeleteServerCatalogCommandOutput extends DeleteServerCatalogResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes all servers from your server catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, DeleteServerCatalogCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, DeleteServerCatalogCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new DeleteServerCatalogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteServerCatalogCommandInput} for command's `input` shape.
        * @see {@link DeleteServerCatalogCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class DeleteServerCatalogCommand extends $Command<DeleteServerCatalogCommandInput, DeleteServerCatalogCommandOutput, SMSClientResolvedConfig> {
            readonly input: DeleteServerCatalogCommandInput;
            constructor(input: DeleteServerCatalogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteServerCatalogCommandInput, DeleteServerCatalogCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DisassociateConnectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateConnectorRequest, DisassociateConnectorResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface DisassociateConnectorCommandInput extends DisassociateConnectorRequest {
    }
    export interface DisassociateConnectorCommandOutput extends DisassociateConnectorResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified connector from Server Migration Service.</p>
        *         <p>After you disassociate a connector, it is no longer available to support
        *             replication jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, DisassociateConnectorCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, DisassociateConnectorCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new DisassociateConnectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateConnectorCommandInput} for command's `input` shape.
        * @see {@link DisassociateConnectorCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class DisassociateConnectorCommand extends $Command<DisassociateConnectorCommandInput, DisassociateConnectorCommandOutput, SMSClientResolvedConfig> {
            readonly input: DisassociateConnectorCommandInput;
            constructor(input: DisassociateConnectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateConnectorCommandInput, DisassociateConnectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GenerateChangeSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GenerateChangeSetRequest, GenerateChangeSetResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GenerateChangeSetCommandInput extends GenerateChangeSetRequest {
    }
    export interface GenerateChangeSetCommandOutput extends GenerateChangeSetResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a target change set for a currently launched stack and writes it to an Amazon S3
        *             object in the customer’s Amazon S3 bucket.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GenerateChangeSetCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GenerateChangeSetCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GenerateChangeSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateChangeSetCommandInput} for command's `input` shape.
        * @see {@link GenerateChangeSetCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GenerateChangeSetCommand extends $Command<GenerateChangeSetCommandInput, GenerateChangeSetCommandOutput, SMSClientResolvedConfig> {
            readonly input: GenerateChangeSetCommandInput;
            constructor(input: GenerateChangeSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateChangeSetCommandInput, GenerateChangeSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GenerateTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GenerateTemplateRequest, GenerateTemplateResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GenerateTemplateCommandInput extends GenerateTemplateRequest {
    }
    export interface GenerateTemplateCommandOutput extends GenerateTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Generates an CloudFormation template based on the current launch configuration and writes it to
        *             an Amazon S3 object in the customer’s Amazon S3 bucket.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GenerateTemplateCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GenerateTemplateCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GenerateTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateTemplateCommandInput} for command's `input` shape.
        * @see {@link GenerateTemplateCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GenerateTemplateCommand extends $Command<GenerateTemplateCommandInput, GenerateTemplateCommandOutput, SMSClientResolvedConfig> {
            readonly input: GenerateTemplateCommandInput;
            constructor(input: GenerateTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateTemplateCommandInput, GenerateTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAppRequest, GetAppResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetAppCommandInput extends GetAppRequest {
    }
    export interface GetAppCommandOutput extends GetAppResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve information about the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetAppCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetAppCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppCommandInput} for command's `input` shape.
        * @see {@link GetAppCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetAppCommand extends $Command<GetAppCommandInput, GetAppCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetAppCommandInput;
            constructor(input: GetAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppCommandInput, GetAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppLaunchConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAppLaunchConfigurationRequest, GetAppLaunchConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetAppLaunchConfigurationCommandInput extends GetAppLaunchConfigurationRequest {
    }
    export interface GetAppLaunchConfigurationCommandOutput extends GetAppLaunchConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the application launch configuration associated with the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetAppLaunchConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetAppLaunchConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetAppLaunchConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppLaunchConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetAppLaunchConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetAppLaunchConfigurationCommand extends $Command<GetAppLaunchConfigurationCommandInput, GetAppLaunchConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetAppLaunchConfigurationCommandInput;
            constructor(input: GetAppLaunchConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppLaunchConfigurationCommandInput, GetAppLaunchConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppReplicationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAppReplicationConfigurationRequest, GetAppReplicationConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetAppReplicationConfigurationCommandInput extends GetAppReplicationConfigurationRequest {
    }
    export interface GetAppReplicationConfigurationCommandOutput extends GetAppReplicationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the application replication configuration associated with the specified
        *             application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetAppReplicationConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetAppReplicationConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetAppReplicationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppReplicationConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetAppReplicationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetAppReplicationConfigurationCommand extends $Command<GetAppReplicationConfigurationCommandInput, GetAppReplicationConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetAppReplicationConfigurationCommandInput;
            constructor(input: GetAppReplicationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppReplicationConfigurationCommandInput, GetAppReplicationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppValidationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAppValidationConfigurationRequest, GetAppValidationConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetAppValidationConfigurationCommandInput extends GetAppValidationConfigurationRequest {
    }
    export interface GetAppValidationConfigurationCommandOutput extends GetAppValidationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a configuration for validating an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetAppValidationConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetAppValidationConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetAppValidationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppValidationConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetAppValidationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetAppValidationConfigurationCommand extends $Command<GetAppValidationConfigurationCommandInput, GetAppValidationConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetAppValidationConfigurationCommandInput;
            constructor(input: GetAppValidationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppValidationConfigurationCommandInput, GetAppValidationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppValidationOutputCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAppValidationOutputRequest, GetAppValidationOutputResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetAppValidationOutputCommandInput extends GetAppValidationOutputRequest {
    }
    export interface GetAppValidationOutputCommandOutput extends GetAppValidationOutputResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves output from validating an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetAppValidationOutputCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetAppValidationOutputCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetAppValidationOutputCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppValidationOutputCommandInput} for command's `input` shape.
        * @see {@link GetAppValidationOutputCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetAppValidationOutputCommand extends $Command<GetAppValidationOutputCommandInput, GetAppValidationOutputCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetAppValidationOutputCommandInput;
            constructor(input: GetAppValidationOutputCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppValidationOutputCommandInput, GetAppValidationOutputCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetConnectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConnectorsRequest, GetConnectorsResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetConnectorsCommandInput extends GetConnectorsRequest {
    }
    export interface GetConnectorsCommandOutput extends GetConnectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the connectors registered with the Server Migration Service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetConnectorsCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetConnectorsCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetConnectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectorsCommandInput} for command's `input` shape.
        * @see {@link GetConnectorsCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetConnectorsCommand extends $Command<GetConnectorsCommandInput, GetConnectorsCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetConnectorsCommandInput;
            constructor(input: GetConnectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectorsCommandInput, GetConnectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetReplicationJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetReplicationJobsRequest, GetReplicationJobsResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetReplicationJobsCommandInput extends GetReplicationJobsRequest {
    }
    export interface GetReplicationJobsCommandOutput extends GetReplicationJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the specified replication job or all of your replication jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetReplicationJobsCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetReplicationJobsCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetReplicationJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetReplicationJobsCommandInput} for command's `input` shape.
        * @see {@link GetReplicationJobsCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetReplicationJobsCommand extends $Command<GetReplicationJobsCommandInput, GetReplicationJobsCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetReplicationJobsCommandInput;
            constructor(input: GetReplicationJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetReplicationJobsCommandInput, GetReplicationJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetReplicationRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetReplicationRunsRequest, GetReplicationRunsResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetReplicationRunsCommandInput extends GetReplicationRunsRequest {
    }
    export interface GetReplicationRunsCommandOutput extends GetReplicationRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the replication runs for the specified replication job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetReplicationRunsCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetReplicationRunsCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetReplicationRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetReplicationRunsCommandInput} for command's `input` shape.
        * @see {@link GetReplicationRunsCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetReplicationRunsCommand extends $Command<GetReplicationRunsCommandInput, GetReplicationRunsCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetReplicationRunsCommandInput;
            constructor(input: GetReplicationRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetReplicationRunsCommandInput, GetReplicationRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetServersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetServersRequest, GetServersResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface GetServersCommandInput extends GetServersRequest {
    }
    export interface GetServersCommandOutput extends GetServersResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the servers in your server catalog.</p>
        *         <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, GetServersCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, GetServersCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new GetServersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServersCommandInput} for command's `input` shape.
        * @see {@link GetServersCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class GetServersCommand extends $Command<GetServersCommandInput, GetServersCommandOutput, SMSClientResolvedConfig> {
            readonly input: GetServersCommandInput;
            constructor(input: GetServersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServersCommandInput, GetServersCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ImportAppCatalogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ImportAppCatalogRequest, ImportAppCatalogResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface ImportAppCatalogCommandInput extends ImportAppCatalogRequest {
    }
    export interface ImportAppCatalogCommandOutput extends ImportAppCatalogResponse, __MetadataBearer {
    }
    /**
        * <p>Allows application import from Migration Hub.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, ImportAppCatalogCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, ImportAppCatalogCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new ImportAppCatalogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportAppCatalogCommandInput} for command's `input` shape.
        * @see {@link ImportAppCatalogCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class ImportAppCatalogCommand extends $Command<ImportAppCatalogCommandInput, ImportAppCatalogCommandOutput, SMSClientResolvedConfig> {
            readonly input: ImportAppCatalogCommandInput;
            constructor(input: ImportAppCatalogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportAppCatalogCommandInput, ImportAppCatalogCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ImportServerCatalogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ImportServerCatalogRequest, ImportServerCatalogResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface ImportServerCatalogCommandInput extends ImportServerCatalogRequest {
    }
    export interface ImportServerCatalogCommandOutput extends ImportServerCatalogResponse, __MetadataBearer {
    }
    /**
        * <p>Gathers a complete list of on-premises servers. Connectors must be installed and
        *             monitoring all servers to import.</p>
        *         <p>This call returns immediately, but might take additional time to retrieve all the
        *             servers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, ImportServerCatalogCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, ImportServerCatalogCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new ImportServerCatalogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportServerCatalogCommandInput} for command's `input` shape.
        * @see {@link ImportServerCatalogCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class ImportServerCatalogCommand extends $Command<ImportServerCatalogCommandInput, ImportServerCatalogCommandOutput, SMSClientResolvedConfig> {
            readonly input: ImportServerCatalogCommandInput;
            constructor(input: ImportServerCatalogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportServerCatalogCommandInput, ImportServerCatalogCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/LaunchAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LaunchAppRequest, LaunchAppResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface LaunchAppCommandInput extends LaunchAppRequest {
    }
    export interface LaunchAppCommandOutput extends LaunchAppResponse, __MetadataBearer {
    }
    /**
        * <p>Launches the specified application as a stack in CloudFormation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, LaunchAppCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, LaunchAppCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new LaunchAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link LaunchAppCommandInput} for command's `input` shape.
        * @see {@link LaunchAppCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class LaunchAppCommand extends $Command<LaunchAppCommandInput, LaunchAppCommandOutput, SMSClientResolvedConfig> {
            readonly input: LaunchAppCommandInput;
            constructor(input: LaunchAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<LaunchAppCommandInput, LaunchAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ListAppsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAppsRequest, ListAppsResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface ListAppsCommandInput extends ListAppsRequest {
    }
    export interface ListAppsCommandOutput extends ListAppsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves summaries for all applications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, ListAppsCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, ListAppsCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new ListAppsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAppsCommandInput} for command's `input` shape.
        * @see {@link ListAppsCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class ListAppsCommand extends $Command<ListAppsCommandInput, ListAppsCommandOutput, SMSClientResolvedConfig> {
            readonly input: ListAppsCommandInput;
            constructor(input: ListAppsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAppsCommandInput, ListAppsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/NotifyAppValidationOutputCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { NotifyAppValidationOutputRequest, NotifyAppValidationOutputResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface NotifyAppValidationOutputCommandInput extends NotifyAppValidationOutputRequest {
    }
    export interface NotifyAppValidationOutputCommandOutput extends NotifyAppValidationOutputResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information to Server Migration Service about whether application validation is successful.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, NotifyAppValidationOutputCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, NotifyAppValidationOutputCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new NotifyAppValidationOutputCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link NotifyAppValidationOutputCommandInput} for command's `input` shape.
        * @see {@link NotifyAppValidationOutputCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class NotifyAppValidationOutputCommand extends $Command<NotifyAppValidationOutputCommandInput, NotifyAppValidationOutputCommandOutput, SMSClientResolvedConfig> {
            readonly input: NotifyAppValidationOutputCommandInput;
            constructor(input: NotifyAppValidationOutputCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<NotifyAppValidationOutputCommandInput, NotifyAppValidationOutputCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppLaunchConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutAppLaunchConfigurationRequest, PutAppLaunchConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface PutAppLaunchConfigurationCommandInput extends PutAppLaunchConfigurationRequest {
    }
    export interface PutAppLaunchConfigurationCommandOutput extends PutAppLaunchConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates the launch configuration for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, PutAppLaunchConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, PutAppLaunchConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new PutAppLaunchConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAppLaunchConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutAppLaunchConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class PutAppLaunchConfigurationCommand extends $Command<PutAppLaunchConfigurationCommandInput, PutAppLaunchConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: PutAppLaunchConfigurationCommandInput;
            constructor(input: PutAppLaunchConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAppLaunchConfigurationCommandInput, PutAppLaunchConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppReplicationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutAppReplicationConfigurationRequest, PutAppReplicationConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface PutAppReplicationConfigurationCommandInput extends PutAppReplicationConfigurationRequest {
    }
    export interface PutAppReplicationConfigurationCommandOutput extends PutAppReplicationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates the replication configuration for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, PutAppReplicationConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, PutAppReplicationConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new PutAppReplicationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAppReplicationConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutAppReplicationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class PutAppReplicationConfigurationCommand extends $Command<PutAppReplicationConfigurationCommandInput, PutAppReplicationConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: PutAppReplicationConfigurationCommandInput;
            constructor(input: PutAppReplicationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAppReplicationConfigurationCommandInput, PutAppReplicationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppValidationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutAppValidationConfigurationRequest, PutAppValidationConfigurationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface PutAppValidationConfigurationCommandInput extends PutAppValidationConfigurationRequest {
    }
    export interface PutAppValidationConfigurationCommandOutput extends PutAppValidationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates a validation configuration for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, PutAppValidationConfigurationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, PutAppValidationConfigurationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new PutAppValidationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAppValidationConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutAppValidationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class PutAppValidationConfigurationCommand extends $Command<PutAppValidationConfigurationCommandInput, PutAppValidationConfigurationCommandOutput, SMSClientResolvedConfig> {
            readonly input: PutAppValidationConfigurationCommandInput;
            constructor(input: PutAppValidationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAppValidationConfigurationCommandInput, PutAppValidationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartAppReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartAppReplicationRequest, StartAppReplicationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface StartAppReplicationCommandInput extends StartAppReplicationRequest {
    }
    export interface StartAppReplicationCommandOutput extends StartAppReplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Starts replicating the specified application by creating replication jobs for each server in the
        *             application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, StartAppReplicationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, StartAppReplicationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new StartAppReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartAppReplicationCommandInput} for command's `input` shape.
        * @see {@link StartAppReplicationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class StartAppReplicationCommand extends $Command<StartAppReplicationCommandInput, StartAppReplicationCommandOutput, SMSClientResolvedConfig> {
            readonly input: StartAppReplicationCommandInput;
            constructor(input: StartAppReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartAppReplicationCommandInput, StartAppReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartOnDemandAppReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartOnDemandAppReplicationRequest, StartOnDemandAppReplicationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface StartOnDemandAppReplicationCommandInput extends StartOnDemandAppReplicationRequest {
    }
    export interface StartOnDemandAppReplicationCommandOutput extends StartOnDemandAppReplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an on-demand replication run for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, StartOnDemandAppReplicationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, StartOnDemandAppReplicationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new StartOnDemandAppReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartOnDemandAppReplicationCommandInput} for command's `input` shape.
        * @see {@link StartOnDemandAppReplicationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class StartOnDemandAppReplicationCommand extends $Command<StartOnDemandAppReplicationCommandInput, StartOnDemandAppReplicationCommandOutput, SMSClientResolvedConfig> {
            readonly input: StartOnDemandAppReplicationCommandInput;
            constructor(input: StartOnDemandAppReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartOnDemandAppReplicationCommandInput, StartOnDemandAppReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartOnDemandReplicationRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartOnDemandReplicationRunRequest, StartOnDemandReplicationRunResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface StartOnDemandReplicationRunCommandInput extends StartOnDemandReplicationRunRequest {
    }
    export interface StartOnDemandReplicationRunCommandOutput extends StartOnDemandReplicationRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an on-demand replication run for the specified replication job. This
        *             replication run starts immediately. This replication run is in addition to the ones
        *             already scheduled.</p>
        *         <p>There is a limit on the number of on-demand replications runs that you can request
        *             in a 24-hour period.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, StartOnDemandReplicationRunCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, StartOnDemandReplicationRunCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new StartOnDemandReplicationRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartOnDemandReplicationRunCommandInput} for command's `input` shape.
        * @see {@link StartOnDemandReplicationRunCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class StartOnDemandReplicationRunCommand extends $Command<StartOnDemandReplicationRunCommandInput, StartOnDemandReplicationRunCommandOutput, SMSClientResolvedConfig> {
            readonly input: StartOnDemandReplicationRunCommandInput;
            constructor(input: StartOnDemandReplicationRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartOnDemandReplicationRunCommandInput, StartOnDemandReplicationRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StopAppReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopAppReplicationRequest, StopAppReplicationResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface StopAppReplicationCommandInput extends StopAppReplicationRequest {
    }
    export interface StopAppReplicationCommandOutput extends StopAppReplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Stops replicating the specified application by deleting the replication job for each server in
        *             the application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, StopAppReplicationCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, StopAppReplicationCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new StopAppReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopAppReplicationCommandInput} for command's `input` shape.
        * @see {@link StopAppReplicationCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class StopAppReplicationCommand extends $Command<StopAppReplicationCommandInput, StopAppReplicationCommandOutput, SMSClientResolvedConfig> {
            readonly input: StopAppReplicationCommandInput;
            constructor(input: StopAppReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopAppReplicationCommandInput, StopAppReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/TerminateAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TerminateAppRequest, TerminateAppResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface TerminateAppCommandInput extends TerminateAppRequest {
    }
    export interface TerminateAppCommandOutput extends TerminateAppResponse, __MetadataBearer {
    }
    /**
        * <p>Terminates the stack for the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, TerminateAppCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, TerminateAppCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new TerminateAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TerminateAppCommandInput} for command's `input` shape.
        * @see {@link TerminateAppCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class TerminateAppCommand extends $Command<TerminateAppCommandInput, TerminateAppCommandOutput, SMSClientResolvedConfig> {
            readonly input: TerminateAppCommandInput;
            constructor(input: TerminateAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TerminateAppCommandInput, TerminateAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/UpdateAppCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAppRequest, UpdateAppResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface UpdateAppCommandInput extends UpdateAppRequest {
    }
    export interface UpdateAppCommandOutput extends UpdateAppResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, UpdateAppCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, UpdateAppCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new UpdateAppCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAppCommandInput} for command's `input` shape.
        * @see {@link UpdateAppCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class UpdateAppCommand extends $Command<UpdateAppCommandInput, UpdateAppCommandOutput, SMSClientResolvedConfig> {
            readonly input: UpdateAppCommandInput;
            constructor(input: UpdateAppCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAppCommandInput, UpdateAppCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/UpdateReplicationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateReplicationJobRequest, UpdateReplicationJobResponse } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient";
    export interface UpdateReplicationJobCommandInput extends UpdateReplicationJobRequest {
    }
    export interface UpdateReplicationJobCommandOutput extends UpdateReplicationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified settings for the specified replication job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SMSClient, UpdateReplicationJobCommand } from "@aws-sdk/client-sms"; // ES Modules import
        * // const { SMSClient, UpdateReplicationJobCommand } = require("@aws-sdk/client-sms"); // CommonJS import
        * const client = new SMSClient(config);
        * const command = new UpdateReplicationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateReplicationJobCommandInput} for command's `input` shape.
        * @see {@link UpdateReplicationJobCommandOutput} for command's `response` shape.
        * @see {@link SMSClientResolvedConfig | config} for SMSClient's `config` shape.
        *
        */
    export class UpdateReplicationJobCommand extends $Command<UpdateReplicationJobCommandInput, UpdateReplicationJobCommandOutput, SMSClientResolvedConfig> {
            readonly input: UpdateReplicationJobCommandInput;
            constructor(input: UpdateReplicationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateReplicationJobCommandInput, UpdateReplicationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/SMSClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateAppCommandInput, CreateAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/CreateAppCommand";
    import { CreateReplicationJobCommandInput, CreateReplicationJobCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/CreateReplicationJobCommand";
    import { DeleteAppCommandInput, DeleteAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppCommand";
    import { DeleteAppLaunchConfigurationCommandInput, DeleteAppLaunchConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppLaunchConfigurationCommand";
    import { DeleteAppReplicationConfigurationCommandInput, DeleteAppReplicationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppReplicationConfigurationCommand";
    import { DeleteAppValidationConfigurationCommandInput, DeleteAppValidationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteAppValidationConfigurationCommand";
    import { DeleteReplicationJobCommandInput, DeleteReplicationJobCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteReplicationJobCommand";
    import { DeleteServerCatalogCommandInput, DeleteServerCatalogCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DeleteServerCatalogCommand";
    import { DisassociateConnectorCommandInput, DisassociateConnectorCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/DisassociateConnectorCommand";
    import { GenerateChangeSetCommandInput, GenerateChangeSetCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GenerateChangeSetCommand";
    import { GenerateTemplateCommandInput, GenerateTemplateCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GenerateTemplateCommand";
    import { GetAppCommandInput, GetAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppCommand";
    import { GetAppLaunchConfigurationCommandInput, GetAppLaunchConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppLaunchConfigurationCommand";
    import { GetAppReplicationConfigurationCommandInput, GetAppReplicationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppReplicationConfigurationCommand";
    import { GetAppValidationConfigurationCommandInput, GetAppValidationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppValidationConfigurationCommand";
    import { GetAppValidationOutputCommandInput, GetAppValidationOutputCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetAppValidationOutputCommand";
    import { GetConnectorsCommandInput, GetConnectorsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetConnectorsCommand";
    import { GetReplicationJobsCommandInput, GetReplicationJobsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetReplicationJobsCommand";
    import { GetReplicationRunsCommandInput, GetReplicationRunsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetReplicationRunsCommand";
    import { GetServersCommandInput, GetServersCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/GetServersCommand";
    import { ImportAppCatalogCommandInput, ImportAppCatalogCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ImportAppCatalogCommand";
    import { ImportServerCatalogCommandInput, ImportServerCatalogCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ImportServerCatalogCommand";
    import { LaunchAppCommandInput, LaunchAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/LaunchAppCommand";
    import { ListAppsCommandInput, ListAppsCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/ListAppsCommand";
    import { NotifyAppValidationOutputCommandInput, NotifyAppValidationOutputCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/NotifyAppValidationOutputCommand";
    import { PutAppLaunchConfigurationCommandInput, PutAppLaunchConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppLaunchConfigurationCommand";
    import { PutAppReplicationConfigurationCommandInput, PutAppReplicationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppReplicationConfigurationCommand";
    import { PutAppValidationConfigurationCommandInput, PutAppValidationConfigurationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/PutAppValidationConfigurationCommand";
    import { StartAppReplicationCommandInput, StartAppReplicationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartAppReplicationCommand";
    import { StartOnDemandAppReplicationCommandInput, StartOnDemandAppReplicationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartOnDemandAppReplicationCommand";
    import { StartOnDemandReplicationRunCommandInput, StartOnDemandReplicationRunCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StartOnDemandReplicationRunCommand";
    import { StopAppReplicationCommandInput, StopAppReplicationCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/StopAppReplicationCommand";
    import { TerminateAppCommandInput, TerminateAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/TerminateAppCommand";
    import { UpdateAppCommandInput, UpdateAppCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/UpdateAppCommand";
    import { UpdateReplicationJobCommandInput, UpdateReplicationJobCommandOutput } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/commands/UpdateReplicationJobCommand";
    export type ServiceInputTypes = CreateAppCommandInput | CreateReplicationJobCommandInput | DeleteAppCommandInput | DeleteAppLaunchConfigurationCommandInput | DeleteAppReplicationConfigurationCommandInput | DeleteAppValidationConfigurationCommandInput | DeleteReplicationJobCommandInput | DeleteServerCatalogCommandInput | DisassociateConnectorCommandInput | GenerateChangeSetCommandInput | GenerateTemplateCommandInput | GetAppCommandInput | GetAppLaunchConfigurationCommandInput | GetAppReplicationConfigurationCommandInput | GetAppValidationConfigurationCommandInput | GetAppValidationOutputCommandInput | GetConnectorsCommandInput | GetReplicationJobsCommandInput | GetReplicationRunsCommandInput | GetServersCommandInput | ImportAppCatalogCommandInput | ImportServerCatalogCommandInput | LaunchAppCommandInput | ListAppsCommandInput | NotifyAppValidationOutputCommandInput | PutAppLaunchConfigurationCommandInput | PutAppReplicationConfigurationCommandInput | PutAppValidationConfigurationCommandInput | StartAppReplicationCommandInput | StartOnDemandAppReplicationCommandInput | StartOnDemandReplicationRunCommandInput | StopAppReplicationCommandInput | TerminateAppCommandInput | UpdateAppCommandInput | UpdateReplicationJobCommandInput;
    export type ServiceOutputTypes = CreateAppCommandOutput | CreateReplicationJobCommandOutput | DeleteAppCommandOutput | DeleteAppLaunchConfigurationCommandOutput | DeleteAppReplicationConfigurationCommandOutput | DeleteAppValidationConfigurationCommandOutput | DeleteReplicationJobCommandOutput | DeleteServerCatalogCommandOutput | DisassociateConnectorCommandOutput | GenerateChangeSetCommandOutput | GenerateTemplateCommandOutput | GetAppCommandOutput | GetAppLaunchConfigurationCommandOutput | GetAppReplicationConfigurationCommandOutput | GetAppValidationConfigurationCommandOutput | GetAppValidationOutputCommandOutput | GetConnectorsCommandOutput | GetReplicationJobsCommandOutput | GetReplicationRunsCommandOutput | GetServersCommandOutput | ImportAppCatalogCommandOutput | ImportServerCatalogCommandOutput | LaunchAppCommandOutput | ListAppsCommandOutput | NotifyAppValidationOutputCommandOutput | PutAppLaunchConfigurationCommandOutput | PutAppReplicationConfigurationCommandOutput | PutAppValidationConfigurationCommandOutput | StartAppReplicationCommandOutput | StartOnDemandAppReplicationCommandOutput | StartOnDemandReplicationRunCommandOutput | StopAppReplicationCommandOutput | TerminateAppCommandOutput | UpdateAppCommandOutput | UpdateReplicationJobCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SMSClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SMSClient class constructor that set the region, credentials and other options.
        */
    export interface SMSClientConfig extends SMSClientConfigType {
    }
    type SMSClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SMSClient class. This is resolved and normalized from the {@link SMSClientConfig | constructor configuration interface}.
        */
    export interface SMSClientResolvedConfig extends SMSClientResolvedConfigType {
    }
    /**
        * <important>
        *             <p>
        *                <b>Product update</b>
        *             </p>
        *             <p>We recommend <a href="http://aws.amazon.com/application-migration-service">Amazon Web Services Application Migration Service</a> (Amazon Web Services
        *                 MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is
        *                 unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March
        *                 2023.</p>
        *          </important>
        *
        *         <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your
        *             on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following
        *             resources:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a href="http://aws.amazon.com/server-migration-service/">Server Migration Service
        *                     product page</a>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a href="https://docs.aws.amazon.com/server-migration-service/latest/userguide/">Server Migration Service User Guide</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export class SMSClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SMSClientResolvedConfig> {
            /**
                * The resolved configuration of SMSClient class. This is resolved and normalized from the {@link SMSClientConfig | constructor configuration interface}.
                */
            readonly config: SMSClientResolvedConfig;
            constructor(configuration: SMSClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SMSServiceException as __BaseException } from "@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/SMSServiceException";
    export enum AppLaunchConfigurationStatus {
            Configured = "CONFIGURED",
            NotConfigured = "NOT_CONFIGURED"
    }
    export enum AppLaunchStatus {
            ConfigurationInProgress = "CONFIGURATION_IN_PROGRESS",
            ConfigurationInvalid = "CONFIGURATION_INVALID",
            DeltaLaunchFailed = "DELTA_LAUNCH_FAILED",
            DeltaLaunchInProgress = "DELTA_LAUNCH_IN_PROGRESS",
            LaunchFailed = "LAUNCH_FAILED",
            LaunchInProgress = "LAUNCH_IN_PROGRESS",
            LaunchPending = "LAUNCH_PENDING",
            Launched = "LAUNCHED",
            PartiallyLaunched = "PARTIALLY_LAUNCHED",
            ReadyForConfiguration = "READY_FOR_CONFIGURATION",
            ReadyForLaunch = "READY_FOR_LAUNCH",
            TerminateFailed = "TERMINATE_FAILED",
            TerminateInProgress = "TERMINATE_IN_PROGRESS",
            Terminated = "TERMINATED",
            ValidationInProgress = "VALIDATION_IN_PROGRESS"
    }
    export enum AppReplicationConfigurationStatus {
            Configured = "CONFIGURED",
            NotConfigured = "NOT_CONFIGURED"
    }
    export enum AppReplicationStatus {
            ConfigurationInProgress = "CONFIGURATION_IN_PROGRESS",
            ConfigurationInvalid = "CONFIGURATION_INVALID",
            DeltaReplicated = "DELTA_REPLICATED",
            DeltaReplicationFailed = "DELTA_REPLICATION_FAILED",
            DeltaReplicationInProgress = "DELTA_REPLICATION_IN_PROGRESS",
            PartiallyReplicated = "PARTIALLY_REPLICATED",
            ReadyForConfiguration = "READY_FOR_CONFIGURATION",
            ReadyForReplication = "READY_FOR_REPLICATION",
            Replicated = "REPLICATED",
            ReplicationFailed = "REPLICATION_FAILED",
            ReplicationInProgress = "REPLICATION_IN_PROGRESS",
            ReplicationPending = "REPLICATION_PENDING",
            ReplicationStopFailed = "REPLICATION_STOP_FAILED",
            ReplicationStopped = "REPLICATION_STOPPED",
            ReplicationStopping = "REPLICATION_STOPPING",
            ValidationInProgress = "VALIDATION_IN_PROGRESS"
    }
    /**
        * <p>Details about the latest launch of an application.</p>
        */
    export interface LaunchDetails {
            /**
                * <p>The latest time that this application was launched successfully.</p>
                */
            latestLaunchTime?: Date;
            /**
                * <p>The name of the latest stack launched for this application.</p>
                */
            stackName?: string;
            /**
                * <p>The ID of the latest stack launched for this application.</p>
                */
            stackId?: string;
    }
    export namespace LaunchDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchDetails) => any;
    }
    export enum AppStatus {
            Active = "ACTIVE",
            Creating = "CREATING",
            DELETE_FAILED = "DELETE_FAILED",
            Deleted = "DELETED",
            Deleting = "DELETING",
            Updating = "UPDATING"
    }
    /**
        * <p>Information about the application.</p>
        */
    export interface AppSummary {
            /**
                * <p>The unique ID of the application.</p>
                */
            appId?: string;
            /**
                * <p>The ID of the application.</p>
                */
            importedAppId?: string;
            /**
                * <p>The name of the application.</p>
                */
            name?: string;
            /**
                * <p>The description of the application.</p>
                */
            description?: string;
            /**
                * <p>Status of the application.</p>
                */
            status?: AppStatus | string;
            /**
                * <p>A message related to the status of the application</p>
                */
            statusMessage?: string;
            /**
                * <p>Status of the replication configuration.</p>
                */
            replicationConfigurationStatus?: AppReplicationConfigurationStatus | string;
            /**
                * <p>The replication status of the application.</p>
                */
            replicationStatus?: AppReplicationStatus | string;
            /**
                * <p>A message related to the replication status of the application.</p>
                */
            replicationStatusMessage?: string;
            /**
                * <p>The timestamp of the application's most recent successful replication.</p>
                */
            latestReplicationTime?: Date;
            /**
                * <p>Status of the launch configuration.</p>
                */
            launchConfigurationStatus?: AppLaunchConfigurationStatus | string;
            /**
                * <p>The launch status of the application.</p>
                */
            launchStatus?: AppLaunchStatus | string;
            /**
                * <p>A message related to the launch status of the application.</p>
                */
            launchStatusMessage?: string;
            /**
                * <p>Details about the latest launch of the application.</p>
                */
            launchDetails?: LaunchDetails;
            /**
                * <p>The creation time of the application.</p>
                */
            creationTime?: Date;
            /**
                * <p>The last modified time of the application.</p>
                */
            lastModified?: Date;
            /**
                * <p>The name of the service role in the customer's account used by Server Migration Service.</p>
                */
            roleName?: string;
            /**
                * <p>The number of server groups present in the application.</p>
                */
            totalServerGroups?: number;
            /**
                * <p>The number of servers present in the application.</p>
                */
            totalServers?: number;
    }
    export namespace AppSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppSummary) => any;
    }
    export enum AppValidationStrategy {
            SSM = "SSM"
    }
    export enum ScriptType {
            POWERSHELL_SCRIPT = "POWERSHELL_SCRIPT",
            SHELL_SCRIPT = "SHELL_SCRIPT"
    }
    /**
        * <p>Location of an Amazon S3 object.</p>
        */
    export interface S3Location {
            /**
                * <p>The Amazon S3 bucket name.</p>
                */
            bucket?: string;
            /**
                * <p>The Amazon S3 bucket key.</p>
                */
            key?: string;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    /**
        * <p>Contains the location of a validation script.</p>
        */
    export interface Source {
            /**
                * <p>Location of an Amazon S3 object.</p>
                */
            s3Location?: S3Location;
    }
    export namespace Source {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Source) => any;
    }
    /**
        * <p>Contains validation parameters.</p>
        */
    export interface SSMValidationParameters {
            /**
                * <p>The location of the validation script.</p>
                */
            source?: Source;
            /**
                * <p>The ID of the instance. The instance must have the following tag: UserForSMSApplicationValidation=true.</p>
                */
            instanceId?: string;
            /**
                * <p>The type of validation script.</p>
                */
            scriptType?: ScriptType | string;
            /**
                * <p>The command to run the validation script.</p>
                */
            command?: string;
            /**
                * <p>The timeout interval, in seconds.</p>
                */
            executionTimeoutSeconds?: number;
            /**
                * <p>The name of the S3 bucket for output.</p>
                */
            outputS3BucketName?: string;
    }
    export namespace SSMValidationParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SSMValidationParameters) => any;
    }
    /**
        * <p>Configuration for validating an application.</p>
        */
    export interface AppValidationConfiguration {
            /**
                * <p>The ID of the validation.</p>
                */
            validationId?: string;
            /**
                * <p>The name of the configuration.</p>
                */
            name?: string;
            /**
                * <p>The validation strategy.</p>
                */
            appValidationStrategy?: AppValidationStrategy | string;
            /**
                * <p>The validation parameters.</p>
                */
            ssmValidationParameters?: SSMValidationParameters;
    }
    export namespace AppValidationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppValidationConfiguration) => any;
    }
    /**
        * <p>Contains the location of validation output.</p>
        */
    export interface SSMOutput {
            /**
                * <p>Location of an Amazon S3 object.</p>
                */
            s3Location?: S3Location;
    }
    export namespace SSMOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SSMOutput) => any;
    }
    /**
        * <p>Output from validating an application.</p>
        */
    export interface AppValidationOutput {
            /**
                * <p>Output from using SSM to validate the application.</p>
                */
            ssmOutput?: SSMOutput;
    }
    export namespace AppValidationOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppValidationOutput) => any;
    }
    export enum ServerType {
            VirtualMachine = "VIRTUAL_MACHINE"
    }
    export enum VmManagerType {
            hyperVManager = "HYPERV-MANAGER",
            scvmm = "SCVMM",
            vSphere = "VSPHERE"
    }
    /**
        * <p>Represents a VM server location.</p>
        */
    export interface VmServerAddress {
            /**
                * <p>The ID of the VM manager.</p>
                */
            vmManagerId?: string;
            /**
                * <p>The ID of the VM.</p>
                */
            vmId?: string;
    }
    export namespace VmServerAddress {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VmServerAddress) => any;
    }
    /**
        * <p>Represents a VM server.</p>
        */
    export interface VmServer {
            /**
                * <p>The VM server location.</p>
                */
            vmServerAddress?: VmServerAddress;
            /**
                * <p>The name of the VM.</p>
                */
            vmName?: string;
            /**
                * <p>The name of the VM manager.</p>
                */
            vmManagerName?: string;
            /**
                * <p>The type of VM management product.</p>
                */
            vmManagerType?: VmManagerType | string;
            /**
                * <p>The VM folder path in the vCenter Server virtual machine inventory tree.</p>
                */
            vmPath?: string;
    }
    export namespace VmServer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VmServer) => any;
    }
    /**
        * <p>Represents a server.</p>
        */
    export interface Server {
            /**
                * <p>The ID of the server.</p>
                */
            serverId?: string;
            /**
                * <p>The type of server.</p>
                */
            serverType?: ServerType | string;
            /**
                * <p>Information about the VM server.</p>
                */
            vmServer?: VmServer;
            /**
                * <p>The ID of the replication job.</p>
                */
            replicationJobId?: string;
            /**
                * <p>Indicates whether the replication job is deleted or failed.</p>
                */
            replicationJobTerminated?: boolean;
    }
    export namespace Server {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Server) => any;
    }
    /**
        * <p>Logical grouping of servers.</p>
        */
    export interface ServerGroup {
            /**
                * <p>The ID of a server group.</p>
                */
            serverGroupId?: string;
            /**
                * <p>The name of a server group.</p>
                */
            name?: string;
            /**
                * <p>The servers that belong to a server group.</p>
                */
            serverList?: Server[];
    }
    export namespace ServerGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerGroup) => any;
    }
    /**
        * <p>Key/value pair that can be assigned to an application.</p>
        */
    export interface Tag {
            /**
                * <p>The tag key.</p>
                */
            key?: string;
            /**
                * <p>The tag value.</p>
                */
            value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateAppRequest {
            /**
                * <p>The name of the new application.</p>
                */
            name?: string;
            /**
                * <p>The description of the new application</p>
                */
            description?: string;
            /**
                * <p>The name of the service role in the customer's account to be used by Server Migration Service.</p>
                */
            roleName?: string;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of
                *             application creation.</p>
                */
            clientToken?: string;
            /**
                * <p>The server groups to include in the application.</p>
                */
            serverGroups?: ServerGroup[];
            /**
                * <p>The tags to be associated with the application.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppRequest) => any;
    }
    export interface CreateAppResponse {
            /**
                * <p>A summary description of the application.</p>
                */
            appSummary?: AppSummary;
            /**
                * <p>The server groups included in the application.</p>
                */
            serverGroups?: ServerGroup[];
            /**
                * <p>The tags associated with the application.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppResponse) => any;
    }
    /**
        * <p>An internal error occurred.</p>
        */
    export class InternalError extends __BaseException {
            readonly name: "InternalError";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalError, __BaseException>);
    }
    /**
        * <p>A specified parameter is not valid.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>A required parameter is missing.</p>
        */
    export class MissingRequiredParameterException extends __BaseException {
            readonly name: "MissingRequiredParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MissingRequiredParameterException, __BaseException>);
    }
    /**
        * <p>This operation is not allowed.</p>
        */
    export class OperationNotPermittedException extends __BaseException {
            readonly name: "OperationNotPermittedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationNotPermittedException, __BaseException>);
    }
    /**
        * <p>You lack permissions needed to perform this operation. Check your IAM policies,
        *             and ensure that you are using the correct access keys.</p>
        */
    export class UnauthorizedOperationException extends __BaseException {
            readonly name: "UnauthorizedOperationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedOperationException, __BaseException>);
    }
    export enum LicenseType {
            AWS = "AWS",
            BYOL = "BYOL"
    }
    export interface CreateReplicationJobRequest {
            /**
                * <p>The ID of the server.</p>
                */
            serverId: string | undefined;
            /**
                * <p>The seed replication time.</p>
                */
            seedReplicationTime: Date | undefined;
            /**
                * <p>The time between consecutive replication runs, in hours.</p>
                */
            frequency?: number;
            /**
                * <p>Indicates whether to run the replication job one time.</p>
                */
            runOnce?: boolean;
            /**
                * <p>The license type to be used for the AMI created by a successful replication
                *             run.</p>
                */
            licenseType?: LicenseType | string;
            /**
                * <p>The name of the IAM role to be used by the Server Migration Service.</p>
                */
            roleName?: string;
            /**
                * <p>The description of the replication job.</p>
                */
            description?: string;
            /**
                * <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the
                *             maximum number is reached and a new AMI is created.</p>
                */
            numberOfRecentAmisToKeep?: number;
            /**
                * <p>Indicates whether the replication job produces encrypted AMIs.</p>
                */
            encrypted?: boolean;
            /**
                * <p>The ID of the KMS key for replication jobs that produce encrypted AMIs.
                *             This value can be any of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>KMS key alias</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key alias</p>
                *             </li>
                *          </ul>
                *         <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the
                *             customer's default KMS key for Amazon EBS is used. </p>
                */
            kmsKeyId?: string;
    }
    export namespace CreateReplicationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationJobRequest) => any;
    }
    export interface CreateReplicationJobResponse {
            /**
                * <p>The unique identifier of the replication job.</p>
                */
            replicationJobId?: string;
    }
    export namespace CreateReplicationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationJobResponse) => any;
    }
    /**
        * <p>There are no connectors available.</p>
        */
    export class NoConnectorsAvailableException extends __BaseException {
            readonly name: "NoConnectorsAvailableException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoConnectorsAvailableException, __BaseException>);
    }
    /**
        * <p>The specified replication job already exists.</p>
        */
    export class ReplicationJobAlreadyExistsException extends __BaseException {
            readonly name: "ReplicationJobAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReplicationJobAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The specified server cannot be replicated.</p>
        */
    export class ServerCannotBeReplicatedException extends __BaseException {
            readonly name: "ServerCannotBeReplicatedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServerCannotBeReplicatedException, __BaseException>);
    }
    /**
        * <p>The service is temporarily unavailable.</p>
        */
    export class TemporarilyUnavailableException extends __BaseException {
            readonly name: "TemporarilyUnavailableException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TemporarilyUnavailableException, __BaseException>);
    }
    export interface DeleteAppRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
            /**
                * <p>Indicates whether to stop all replication jobs corresponding to the servers
                *             in the application while deleting the application.</p>
                */
            forceStopAppReplication?: boolean;
            /**
                * <p>Indicates whether to terminate the stack corresponding to the
                *             application while deleting the application.</p>
                */
            forceTerminateApp?: boolean;
    }
    export namespace DeleteAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppRequest) => any;
    }
    export interface DeleteAppResponse {
    }
    export namespace DeleteAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppResponse) => any;
    }
    export interface DeleteAppLaunchConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace DeleteAppLaunchConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppLaunchConfigurationRequest) => any;
    }
    export interface DeleteAppLaunchConfigurationResponse {
    }
    export namespace DeleteAppLaunchConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppLaunchConfigurationResponse) => any;
    }
    export interface DeleteAppReplicationConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace DeleteAppReplicationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppReplicationConfigurationRequest) => any;
    }
    export interface DeleteAppReplicationConfigurationResponse {
    }
    export namespace DeleteAppReplicationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppReplicationConfigurationResponse) => any;
    }
    export interface DeleteAppValidationConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId: string | undefined;
    }
    export namespace DeleteAppValidationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppValidationConfigurationRequest) => any;
    }
    export interface DeleteAppValidationConfigurationResponse {
    }
    export namespace DeleteAppValidationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppValidationConfigurationResponse) => any;
    }
    export interface DeleteReplicationJobRequest {
            /**
                * <p>The ID of the replication job.</p>
                */
            replicationJobId: string | undefined;
    }
    export namespace DeleteReplicationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationJobRequest) => any;
    }
    export interface DeleteReplicationJobResponse {
    }
    export namespace DeleteReplicationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationJobResponse) => any;
    }
    /**
        * <p>The specified replication job does not exist.</p>
        */
    export class ReplicationJobNotFoundException extends __BaseException {
            readonly name: "ReplicationJobNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReplicationJobNotFoundException, __BaseException>);
    }
    export interface DeleteServerCatalogRequest {
    }
    export namespace DeleteServerCatalogRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServerCatalogRequest) => any;
    }
    export interface DeleteServerCatalogResponse {
    }
    export namespace DeleteServerCatalogResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServerCatalogResponse) => any;
    }
    export interface DisassociateConnectorRequest {
            /**
                * <p>The ID of the connector.</p>
                */
            connectorId: string | undefined;
    }
    export namespace DisassociateConnectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateConnectorRequest) => any;
    }
    export interface DisassociateConnectorResponse {
    }
    export namespace DisassociateConnectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateConnectorResponse) => any;
    }
    export enum OutputFormat {
            JSON = "JSON",
            YAML = "YAML"
    }
    export interface GenerateChangeSetRequest {
            /**
                * <p>The ID of the application associated with the change set.</p>
                */
            appId?: string;
            /**
                * <p>The format for the change set.</p>
                */
            changesetFormat?: OutputFormat | string;
    }
    export namespace GenerateChangeSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateChangeSetRequest) => any;
    }
    export interface GenerateChangeSetResponse {
            /**
                * <p>The location of the Amazon S3 object.</p>
                */
            s3Location?: S3Location;
    }
    export namespace GenerateChangeSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateChangeSetResponse) => any;
    }
    export interface GenerateTemplateRequest {
            /**
                * <p>The ID of the application associated with the CloudFormation template.</p>
                */
            appId?: string;
            /**
                * <p>The format for generating the CloudFormation template.</p>
                */
            templateFormat?: OutputFormat | string;
    }
    export namespace GenerateTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateTemplateRequest) => any;
    }
    export interface GenerateTemplateResponse {
            /**
                * <p>The location of the Amazon S3 object.</p>
                */
            s3Location?: S3Location;
    }
    export namespace GenerateTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateTemplateResponse) => any;
    }
    export interface GetAppRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace GetAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppRequest) => any;
    }
    export interface GetAppResponse {
            /**
                * <p>Information about the application.</p>
                */
            appSummary?: AppSummary;
            /**
                * <p>The server groups that belong to the application.</p>
                */
            serverGroups?: ServerGroup[];
            /**
                * <p>The tags associated with the application.</p>
                */
            tags?: Tag[];
    }
    export namespace GetAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppResponse) => any;
    }
    export interface GetAppLaunchConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace GetAppLaunchConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppLaunchConfigurationRequest) => any;
    }
    /**
        * <p>A script that runs on first launch of an Amazon EC2 instance. Used for configuring the
        *             server during launch.</p>
        */
    export interface UserData {
            /**
                * <p>Amazon S3 location of the user-data script.</p>
                */
            s3Location?: S3Location;
    }
    export namespace UserData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserData) => any;
    }
    /**
        * <p>Launch configuration for a server.</p>
        */
    export interface ServerLaunchConfiguration {
            /**
                * <p>The ID of the server with which the launch configuration is associated.</p>
                */
            server?: Server;
            /**
                * <p>The logical ID of the server in the CloudFormation template.</p>
                */
            logicalId?: string;
            /**
                * <p>The ID of the VPC into which the server should be launched.</p>
                */
            vpc?: string;
            /**
                * <p>The ID of the subnet the server should be launched into.</p>
                */
            subnet?: string;
            /**
                * <p>The ID of the security group that applies to the launched server.</p>
                */
            securityGroup?: string;
            /**
                * <p>The name of the Amazon EC2 SSH key to be used for connecting to the launched server.</p>
                */
            ec2KeyName?: string;
            /**
                * <p>Location of the user-data script to be executed when launching the server.</p>
                */
            userData?: UserData;
            /**
                * <p>The instance type to use when launching the server.</p>
                */
            instanceType?: string;
            /**
                * <p>Indicates whether a publicly accessible IP address is created when launching the server.</p>
                */
            associatePublicIpAddress?: boolean;
            /**
                * <p>The name of the IAM instance profile.</p>
                */
            iamInstanceProfileName?: string;
            /**
                * <p>Location of an Amazon S3 object.</p>
                */
            configureScript?: S3Location;
            /**
                * <p>The type of configuration script.</p>
                */
            configureScriptType?: ScriptType | string;
    }
    export namespace ServerLaunchConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerLaunchConfiguration) => any;
    }
    /**
        * <p>Launch configuration for a server group.</p>
        */
    export interface ServerGroupLaunchConfiguration {
            /**
                * <p>The ID of the server group with which the launch configuration is
                *             associated.</p>
                */
            serverGroupId?: string;
            /**
                * <p>The launch order of servers in the server group.</p>
                */
            launchOrder?: number;
            /**
                * <p>The launch configuration for servers in the server group.</p>
                */
            serverLaunchConfigurations?: ServerLaunchConfiguration[];
    }
    export namespace ServerGroupLaunchConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerGroupLaunchConfiguration) => any;
    }
    export interface GetAppLaunchConfigurationResponse {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
            /**
                * <p>The name of the service role in the customer's account that CloudFormation uses to launch the
                *             application.</p>
                */
            roleName?: string;
            /**
                * <p>Indicates whether the application is configured to launch automatically after replication is complete.</p>
                */
            autoLaunch?: boolean;
            /**
                * <p>The launch configurations for server groups in this application.</p>
                */
            serverGroupLaunchConfigurations?: ServerGroupLaunchConfiguration[];
    }
    export namespace GetAppLaunchConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppLaunchConfigurationResponse) => any;
    }
    export interface GetAppReplicationConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace GetAppReplicationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppReplicationConfigurationRequest) => any;
    }
    /**
        * <p>The replication parameters for replicating a server.</p>
        */
    export interface ServerReplicationParameters {
            /**
                * <p>The seed time for creating a replication job for the server.</p>
                */
            seedTime?: Date;
            /**
                * <p>The frequency of creating replication jobs for the server.</p>
                */
            frequency?: number;
            /**
                * <p>Indicates whether to run the replication job one time.</p>
                */
            runOnce?: boolean;
            /**
                * <p>The license type for creating a replication job for the server.</p>
                */
            licenseType?: LicenseType | string;
            /**
                * <p>The number of recent AMIs to keep when creating a replication job for this server.</p>
                */
            numberOfRecentAmisToKeep?: number;
            /**
                * <p>Indicates whether the replication job produces encrypted AMIs.</p>
                */
            encrypted?: boolean;
            /**
                * <p>The ID of the KMS key for replication jobs that produce encrypted AMIs.
                *             This value can be any of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>KMS key alias</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key alias</p>
                *             </li>
                *          </ul>
                *         <p>If encrypted is enabled but a KMS key ID is not specified, the
                *             customer's default KMS key for Amazon EBS is used.</p>
                */
            kmsKeyId?: string;
    }
    export namespace ServerReplicationParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerReplicationParameters) => any;
    }
    /**
        * <p>Replication configuration of a server.</p>
        */
    export interface ServerReplicationConfiguration {
            /**
                * <p>The ID of the server with which this replication configuration is
                *             associated.</p>
                */
            server?: Server;
            /**
                * <p>The parameters for replicating the server.</p>
                */
            serverReplicationParameters?: ServerReplicationParameters;
    }
    export namespace ServerReplicationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerReplicationConfiguration) => any;
    }
    /**
        * <p>Replication configuration for a server group.</p>
        */
    export interface ServerGroupReplicationConfiguration {
            /**
                * <p>The ID of the server group with which this replication configuration is
                *             associated.</p>
                */
            serverGroupId?: string;
            /**
                * <p>The replication configuration for servers in the server group.</p>
                */
            serverReplicationConfigurations?: ServerReplicationConfiguration[];
    }
    export namespace ServerGroupReplicationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerGroupReplicationConfiguration) => any;
    }
    export interface GetAppReplicationConfigurationResponse {
            /**
                * <p>The replication configurations associated with server groups in this application.</p>
                */
            serverGroupReplicationConfigurations?: ServerGroupReplicationConfiguration[];
    }
    export namespace GetAppReplicationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppReplicationConfigurationResponse) => any;
    }
    export interface GetAppValidationConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId: string | undefined;
    }
    export namespace GetAppValidationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppValidationConfigurationRequest) => any;
    }
    export enum ServerValidationStrategy {
            USERDATA = "USERDATA"
    }
    /**
        * <p>Contains validation parameters.</p>
        */
    export interface UserDataValidationParameters {
            /**
                * <p>The location of the validation script.</p>
                */
            source?: Source;
            /**
                * <p>The type of validation script.</p>
                */
            scriptType?: ScriptType | string;
    }
    export namespace UserDataValidationParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserDataValidationParameters) => any;
    }
    /**
        * <p>Configuration for validating an instance.</p>
        */
    export interface ServerValidationConfiguration {
            /**
                * <p>Represents a server.</p>
                */
            server?: Server;
            /**
                * <p>The ID of the validation.</p>
                */
            validationId?: string;
            /**
                * <p>The name of the configuration.</p>
                */
            name?: string;
            /**
                * <p>The validation strategy.</p>
                */
            serverValidationStrategy?: ServerValidationStrategy | string;
            /**
                * <p>The validation parameters.</p>
                */
            userDataValidationParameters?: UserDataValidationParameters;
    }
    export namespace ServerValidationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerValidationConfiguration) => any;
    }
    /**
        * <p>Configuration for validating an instance.</p>
        */
    export interface ServerGroupValidationConfiguration {
            /**
                * <p>The ID of the server group.</p>
                */
            serverGroupId?: string;
            /**
                * <p>The validation configuration.</p>
                */
            serverValidationConfigurations?: ServerValidationConfiguration[];
    }
    export namespace ServerGroupValidationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerGroupValidationConfiguration) => any;
    }
    export interface GetAppValidationConfigurationResponse {
            /**
                * <p>The configuration for application validation.</p>
                */
            appValidationConfigurations?: AppValidationConfiguration[];
            /**
                * <p>The configuration for instance validation.</p>
                */
            serverGroupValidationConfigurations?: ServerGroupValidationConfiguration[];
    }
    export namespace GetAppValidationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppValidationConfigurationResponse) => any;
    }
    export interface GetAppValidationOutputRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId: string | undefined;
    }
    export namespace GetAppValidationOutputRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppValidationOutputRequest) => any;
    }
    /**
        * <p>Contains output from validating an instance.</p>
        */
    export interface ServerValidationOutput {
            /**
                * <p>Represents a server.</p>
                */
            server?: Server;
    }
    export namespace ServerValidationOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerValidationOutput) => any;
    }
    export enum ValidationStatus {
            Failed = "FAILED",
            InProgress = "IN_PROGRESS",
            Pending = "PENDING",
            ReadyForValidation = "READY_FOR_VALIDATION",
            Succeeded = "SUCCEEDED"
    }
    /**
        * <p>Contains validation output.</p>
        */
    export interface ValidationOutput {
            /**
                * <p>The ID of the validation.</p>
                */
            validationId?: string;
            /**
                * <p>The name of the validation.</p>
                */
            name?: string;
            /**
                * <p>The status of the validation.</p>
                */
            status?: ValidationStatus | string;
            /**
                * <p>The status message.</p>
                */
            statusMessage?: string;
            /**
                * <p>The latest time that the validation was performed.</p>
                */
            latestValidationTime?: Date;
            /**
                * <p>The output from validating an application.</p>
                */
            appValidationOutput?: AppValidationOutput;
            /**
                * <p>The output from validation an instance.</p>
                */
            serverValidationOutput?: ServerValidationOutput;
    }
    export namespace ValidationOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationOutput) => any;
    }
    export interface GetAppValidationOutputResponse {
            /**
                * <p>The validation output.</p>
                */
            validationOutputList?: ValidationOutput[];
    }
    export namespace GetAppValidationOutputResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppValidationOutputResponse) => any;
    }
    export interface GetConnectorsRequest {
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in a single call. The default value is 50.
                *             To retrieve the remaining results, make another call with the returned
                *                 <code>NextToken</code> value.</p>
                */
            maxResults?: number;
    }
    export namespace GetConnectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectorsRequest) => any;
    }
    export enum ConnectorCapability {
            hyperVManager = "HYPERV-MANAGER",
            scvmm = "SCVMM",
            smsOptimized = "SMS_OPTIMIZED",
            snapshotBatching = "SNAPSHOT_BATCHING",
            vSphere = "VSPHERE"
    }
    export enum ConnectorStatus {
            Healthy = "HEALTHY",
            Unhealthy = "UNHEALTHY"
    }
    /**
        * <p>Represents a connector.</p>
        */
    export interface Connector {
            /**
                * <p>The ID of the connector.</p>
                */
            connectorId?: string;
            /**
                * <p>The connector version.</p>
                */
            version?: string;
            /**
                * <p>The status of the connector.</p>
                */
            status?: ConnectorStatus | string;
            /**
                * <p>The capabilities of the connector.</p>
                */
            capabilityList?: (ConnectorCapability | string)[];
            /**
                * <p>The name of the VM manager.</p>
                */
            vmManagerName?: string;
            /**
                * <p>The VM management product.</p>
                */
            vmManagerType?: VmManagerType | string;
            /**
                * <p>The ID of the VM manager.</p>
                */
            vmManagerId?: string;
            /**
                * <p>The IP address of the connector.</p>
                */
            ipAddress?: string;
            /**
                * <p>The MAC address of the connector.</p>
                */
            macAddress?: string;
            /**
                * <p>The time the connector was associated.</p>
                */
            associatedOn?: Date;
    }
    export namespace Connector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Connector) => any;
    }
    export interface GetConnectorsResponse {
            /**
                * <p>Information about the registered connectors.</p>
                */
            connectorList?: Connector[];
            /**
                * <p>The token required to retrieve the next set of results. This value is null when
                *             there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace GetConnectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectorsResponse) => any;
    }
    export interface GetReplicationJobsRequest {
            /**
                * <p>The ID of the replication job.</p>
                */
            replicationJobId?: string;
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in a single call. The default value is 50.
                *             To retrieve the remaining results, make another call with the returned
                *                 <code>NextToken</code> value.</p>
                */
            maxResults?: number;
    }
    export namespace GetReplicationJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetReplicationJobsRequest) => any;
    }
    /**
        * <p>Details of the current stage of a replication run.</p>
        */
    export interface ReplicationRunStageDetails {
            /**
                * <p>The current stage of a replication run.</p>
                */
            stage?: string;
            /**
                * <p>The progress of the current stage of a replication run.</p>
                */
            stageProgress?: string;
    }
    export namespace ReplicationRunStageDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationRunStageDetails) => any;
    }
    export enum ReplicationRunState {
            Active = "ACTIVE",
            Completed = "COMPLETED",
            Deleted = "DELETED",
            Deleting = "DELETING",
            Failed = "FAILED",
            Missed = "MISSED",
            Pending = "PENDING"
    }
    export enum ReplicationRunType {
            Automatic = "AUTOMATIC",
            OnDemand = "ON_DEMAND"
    }
    /**
        * <p>Represents a replication run.</p>
        */
    export interface ReplicationRun {
            /**
                * <p>The ID of the replication run.</p>
                */
            replicationRunId?: string;
            /**
                * <p>The state of the replication run.</p>
                */
            state?: ReplicationRunState | string;
            /**
                * <p>The type of replication run.</p>
                */
            type?: ReplicationRunType | string;
            /**
                * <p>Details about the current stage of the replication run.</p>
                */
            stageDetails?: ReplicationRunStageDetails;
            /**
                * <p>The description of the current status of the replication job.</p>
                */
            statusMessage?: string;
            /**
                * <p>The ID of the Amazon Machine Image (AMI) from the replication
                *             run.</p>
                */
            amiId?: string;
            /**
                * <p>The start time of the next replication run.</p>
                */
            scheduledStartTime?: Date;
            /**
                * <p>The completion time of the last replication run.</p>
                */
            completedTime?: Date;
            /**
                * <p>The description of the replication run.</p>
                */
            description?: string;
            /**
                * <p>Indicates whether the replication run should produce an encrypted AMI.</p>
                */
            encrypted?: boolean;
            /**
                * <p>The ID of the KMS key for replication jobs that produce encrypted AMIs.
                *             This value can be any of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>KMS key alias</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key alias</p>
                *             </li>
                *          </ul>
                *         <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the
                *             customer's default KMS key for Amazon EBS is used. </p>
                */
            kmsKeyId?: string;
    }
    export namespace ReplicationRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationRun) => any;
    }
    export enum ReplicationJobState {
            Active = "ACTIVE",
            Completed = "COMPLETED",
            Deleted = "DELETED",
            Deleting = "DELETING",
            Failed = "FAILED",
            Failing = "FAILING",
            PausedOnFailure = "PAUSED_ON_FAILURE",
            Pending = "PENDING"
    }
    /**
        * <p>Represents a replication job.</p>
        */
    export interface ReplicationJob {
            /**
                * <p>The ID of the replication job.</p>
                */
            replicationJobId?: string;
            /**
                * <p>The ID of the server.</p>
                */
            serverId?: string;
            /**
                * <p>The type of server.</p>
                */
            serverType?: ServerType | string;
            /**
                * <p>Information about the VM server.</p>
                */
            vmServer?: VmServer;
            /**
                * <p>The seed replication time.</p>
                */
            seedReplicationTime?: Date;
            /**
                * <p>The time between consecutive replication runs, in hours.</p>
                */
            frequency?: number;
            /**
                * <p>Indicates whether to run the replication job one time.</p>
                */
            runOnce?: boolean;
            /**
                * <p>The start time of the next replication run.</p>
                */
            nextReplicationRunStartTime?: Date;
            /**
                * <p>The license type to be used for the AMI created by a successful replication
                *             run.</p>
                */
            licenseType?: LicenseType | string;
            /**
                * <p>The name of the IAM role to be used by Server Migration Service.</p>
                */
            roleName?: string;
            /**
                * <p>The ID of the latest Amazon Machine Image (AMI).</p>
                */
            latestAmiId?: string;
            /**
                * <p>The state of the replication job.</p>
                */
            state?: ReplicationJobState | string;
            /**
                * <p>The description of the current status of the replication job.</p>
                */
            statusMessage?: string;
            /**
                * <p>The description of the replication job.</p>
                */
            description?: string;
            /**
                * <p>The number of recent AMIs to keep in the customer's account for a replication job. By
                *             default, the value is set to zero, meaning that all AMIs are kept.</p>
                */
            numberOfRecentAmisToKeep?: number;
            /**
                * <p>Indicates whether the replication job should produce encrypted AMIs.</p>
                */
            encrypted?: boolean;
            /**
                * <p>The ID of the KMS key for replication jobs that produce encrypted AMIs.
                *             This value can be any of the following: </p>
                *         <ul>
                *             <li>
                *                 <p>KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>KMS key alias</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key alias</p>
                *             </li>
                *          </ul>
                *         <p>If encrypted is enabled but a KMS key ID is not specified, the
                *             customer's default KMS key for Amazon EBS is used.</p>
                */
            kmsKeyId?: string;
            /**
                * <p>Information about the replication runs.</p>
                */
            replicationRunList?: ReplicationRun[];
    }
    export namespace ReplicationJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationJob) => any;
    }
    export interface GetReplicationJobsResponse {
            /**
                * <p>Information about the replication jobs.</p>
                */
            replicationJobList?: ReplicationJob[];
            /**
                * <p>The token required to retrieve the next set of results. This value is null when
                *             there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace GetReplicationJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetReplicationJobsResponse) => any;
    }
    export interface GetReplicationRunsRequest {
            /**
                * <p>The ID of the replication job.</p>
                */
            replicationJobId: string | undefined;
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in a single call. The default value is 50.
                *             To retrieve the remaining results, make another call with the returned
                *                 <code>NextToken</code> value.</p>
                */
            maxResults?: number;
    }
    export namespace GetReplicationRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetReplicationRunsRequest) => any;
    }
    export interface GetReplicationRunsResponse {
            /**
                * <p>Information about the replication job.</p>
                */
            replicationJob?: ReplicationJob;
            /**
                * <p>Information about the replication runs.</p>
                */
            replicationRunList?: ReplicationRun[];
            /**
                * <p>The token required to retrieve the next set of results. This value is null when
                *             there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace GetReplicationRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetReplicationRunsResponse) => any;
    }
    export interface GetServersRequest {
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in a single call. The default value is 50.
                *             To retrieve the remaining results, make another call with the returned
                *                 <code>NextToken</code> value.</p>
                */
            maxResults?: number;
            /**
                * <p>The server addresses.</p>
                */
            vmServerAddressList?: VmServerAddress[];
    }
    export namespace GetServersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServersRequest) => any;
    }
    export enum ServerCatalogStatus {
            Available = "AVAILABLE",
            Deleted = "DELETED",
            Expired = "EXPIRED",
            Importing = "IMPORTING",
            NotImported = "NOT_IMPORTED"
    }
    export interface GetServersResponse {
            /**
                * <p>The time when the server was last modified.</p>
                */
            lastModifiedOn?: Date;
            /**
                * <p>The status of the server catalog.</p>
                */
            serverCatalogStatus?: ServerCatalogStatus | string;
            /**
                * <p>Information about the servers.</p>
                */
            serverList?: Server[];
            /**
                * <p>The token required to retrieve the next set of results. This value is null when
                *             there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace GetServersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServersResponse) => any;
    }
    export interface ImportAppCatalogRequest {
            /**
                * <p>The name of the service role. If you omit this parameter, we create a service-linked role
                *             for Migration Hub in your account. Otherwise, the role that you provide must have the <a href="https://docs.aws.amazon.com/migrationhub/latest/ug/new-customer-setup.html#sms-managed">policy
                *                 and trust policy</a> described in the <i>Migration Hub User Guide</i>.</p>
                */
            roleName?: string;
    }
    export namespace ImportAppCatalogRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportAppCatalogRequest) => any;
    }
    export interface ImportAppCatalogResponse {
    }
    export namespace ImportAppCatalogResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportAppCatalogResponse) => any;
    }
    export interface ImportServerCatalogRequest {
    }
    export namespace ImportServerCatalogRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportServerCatalogRequest) => any;
    }
    export interface ImportServerCatalogResponse {
    }
    export namespace ImportServerCatalogResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportServerCatalogResponse) => any;
    }
    export interface LaunchAppRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace LaunchAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchAppRequest) => any;
    }
    export interface LaunchAppResponse {
    }
    export namespace LaunchAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchAppResponse) => any;
    }
    export interface ListAppsRequest {
            /**
                * <p>The unique application IDs.</p>
                */
            appIds?: string[];
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in a single call. The default value is 100. To
                *             retrieve the remaining results, make another call with the returned
                *                 <code>NextToken</code> value. </p>
                */
            maxResults?: number;
    }
    export namespace ListAppsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppsRequest) => any;
    }
    export interface ListAppsResponse {
            /**
                * <p>The application summaries.</p>
                */
            apps?: AppSummary[];
            /**
                * <p>The token required to retrieve the next set of results. This value is null when there
                *             are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListAppsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppsResponse) => any;
    }
    /**
        * <p>Contains the status of validating an application.</p>
        */
    export interface NotificationContext {
            /**
                * <p>The ID of the validation.</p>
                */
            validationId?: string;
            /**
                * <p>The status of the validation.</p>
                */
            status?: ValidationStatus | string;
            /**
                * <p>The status message.</p>
                */
            statusMessage?: string;
    }
    export namespace NotificationContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationContext) => any;
    }
    export interface NotifyAppValidationOutputRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId: string | undefined;
            /**
                * <p>The notification information.</p>
                */
            notificationContext?: NotificationContext;
    }
    export namespace NotifyAppValidationOutputRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyAppValidationOutputRequest) => any;
    }
    export interface NotifyAppValidationOutputResponse {
    }
    export namespace NotifyAppValidationOutputResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyAppValidationOutputResponse) => any;
    }
    export interface PutAppLaunchConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
            /**
                * <p>The name of service role in the customer's account that CloudFormation uses to launch the
                *             application.</p>
                */
            roleName?: string;
            /**
                * <p>Indicates whether the application is configured to launch automatically after replication is complete.</p>
                */
            autoLaunch?: boolean;
            /**
                * <p>Information about the launch configurations for server groups in the application.</p>
                */
            serverGroupLaunchConfigurations?: ServerGroupLaunchConfiguration[];
    }
    export namespace PutAppLaunchConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppLaunchConfigurationRequest) => any;
    }
    export interface PutAppLaunchConfigurationResponse {
    }
    export namespace PutAppLaunchConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppLaunchConfigurationResponse) => any;
    }
    export interface PutAppReplicationConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
            /**
                * <p>Information about the replication configurations for server groups in the application.</p>
                */
            serverGroupReplicationConfigurations?: ServerGroupReplicationConfiguration[];
    }
    export namespace PutAppReplicationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppReplicationConfigurationRequest) => any;
    }
    export interface PutAppReplicationConfigurationResponse {
    }
    export namespace PutAppReplicationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppReplicationConfigurationResponse) => any;
    }
    export interface PutAppValidationConfigurationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId: string | undefined;
            /**
                * <p>The configuration for application validation.</p>
                */
            appValidationConfigurations?: AppValidationConfiguration[];
            /**
                * <p>The configuration for instance validation.</p>
                */
            serverGroupValidationConfigurations?: ServerGroupValidationConfiguration[];
    }
    export namespace PutAppValidationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppValidationConfigurationRequest) => any;
    }
    export interface PutAppValidationConfigurationResponse {
    }
    export namespace PutAppValidationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppValidationConfigurationResponse) => any;
    }
    export interface StartAppReplicationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace StartAppReplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAppReplicationRequest) => any;
    }
    export interface StartAppReplicationResponse {
    }
    export namespace StartAppReplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAppReplicationResponse) => any;
    }
    export interface StartOnDemandAppReplicationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId: string | undefined;
            /**
                * <p>The description of the replication run.</p>
                */
            description?: string;
    }
    export namespace StartOnDemandAppReplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartOnDemandAppReplicationRequest) => any;
    }
    export interface StartOnDemandAppReplicationResponse {
    }
    export namespace StartOnDemandAppReplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartOnDemandAppReplicationResponse) => any;
    }
    /**
        * <p>The user has the required permissions, so the request would have succeeded,
        *             but a dry run was performed.</p>
        */
    export class DryRunOperationException extends __BaseException {
            readonly name: "DryRunOperationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DryRunOperationException, __BaseException>);
    }
    /**
        * <p>You have exceeded the number of on-demand replication runs you can request in a
        *             24-hour period.</p>
        */
    export class ReplicationRunLimitExceededException extends __BaseException {
            readonly name: "ReplicationRunLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReplicationRunLimitExceededException, __BaseException>);
    }
    export interface StartOnDemandReplicationRunRequest {
            /**
                * <p>The ID of the replication job.</p>
                */
            replicationJobId: string | undefined;
            /**
                * <p>The description of the replication run.</p>
                */
            description?: string;
    }
    export namespace StartOnDemandReplicationRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartOnDemandReplicationRunRequest) => any;
    }
    export interface StartOnDemandReplicationRunResponse {
            /**
                * <p>The ID of the replication run.</p>
                */
            replicationRunId?: string;
    }
    export namespace StartOnDemandReplicationRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartOnDemandReplicationRunResponse) => any;
    }
    export interface StopAppReplicationRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace StopAppReplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAppReplicationRequest) => any;
    }
    export interface StopAppReplicationResponse {
    }
    export namespace StopAppReplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAppReplicationResponse) => any;
    }
    export interface TerminateAppRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
    }
    export namespace TerminateAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateAppRequest) => any;
    }
    export interface TerminateAppResponse {
    }
    export namespace TerminateAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateAppResponse) => any;
    }
    export interface UpdateAppRequest {
            /**
                * <p>The ID of the application.</p>
                */
            appId?: string;
            /**
                * <p>The new name of the application.</p>
                */
            name?: string;
            /**
                * <p>The new description of the application.</p>
                */
            description?: string;
            /**
                * <p>The name of the service role in the customer's account used by Server Migration Service.</p>
                */
            roleName?: string;
            /**
                * <p>The server groups in the application to update.</p>
                */
            serverGroups?: ServerGroup[];
            /**
                * <p>The tags to associate with the application.</p>
                */
            tags?: Tag[];
    }
    export namespace UpdateAppRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAppRequest) => any;
    }
    export interface UpdateAppResponse {
            /**
                * <p>A summary description of the application.</p>
                */
            appSummary?: AppSummary;
            /**
                * <p>The updated server groups in the application.</p>
                */
            serverGroups?: ServerGroup[];
            /**
                * <p>The tags associated with the application.</p>
                */
            tags?: Tag[];
    }
    export namespace UpdateAppResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAppResponse) => any;
    }
    export interface UpdateReplicationJobRequest {
            /**
                * <p>The ID of the replication job.</p>
                */
            replicationJobId: string | undefined;
            /**
                * <p>The time between consecutive replication runs, in hours.</p>
                */
            frequency?: number;
            /**
                * <p>The start time of the next replication run.</p>
                */
            nextReplicationRunStartTime?: Date;
            /**
                * <p>The license type to be used for the AMI created by a successful replication
                *             run.</p>
                */
            licenseType?: LicenseType | string;
            /**
                * <p>The name of the IAM role to be used by Server Migration Service.</p>
                */
            roleName?: string;
            /**
                * <p>The description of the replication job.</p>
                */
            description?: string;
            /**
                * <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the
                *             maximum number is reached and a new AMI is created.</p>
                */
            numberOfRecentAmisToKeep?: number;
            /**
                * <p>When true, the replication job produces encrypted AMIs. For more information,
                *                 <code>KmsKeyId</code>.</p>
                */
            encrypted?: boolean;
            /**
                * <p>The ID of the KMS key for replication jobs that produce encrypted AMIs.
                *             This value can be any of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>KMS key alias</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key ID</p>
                *             </li>
                *             <li>
                *                 <p>ARN referring to the KMS key alias</p>
                *             </li>
                *          </ul>
                *         <p>If encrypted is enabled but a KMS key ID is not specified, the
                *             customer's default KMS key for Amazon EBS is used.</p>
                */
            kmsKeyId?: string;
    }
    export namespace UpdateReplicationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateReplicationJobRequest) => any;
    }
    export interface UpdateReplicationJobResponse {
    }
    export namespace UpdateReplicationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateReplicationJobResponse) => any;
    }
}

declare module '@aws-sdk/client-sms/node_modules/@aws-sdk/client-sms/dist-types/models/SMSServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SMS service.
        */
    export class SMSServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

