// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-elastic-load-balancing-v2' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddListenerCertificatesCommandInput, AddListenerCertificatesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/AddListenerCertificatesCommand";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/AddTagsCommand";
    import { CreateListenerCommandInput, CreateListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateListenerCommand";
    import { CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateLoadBalancerCommand";
    import { CreateRuleCommandInput, CreateRuleCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateRuleCommand";
    import { CreateTargetGroupCommandInput, CreateTargetGroupCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateTargetGroupCommand";
    import { DeleteListenerCommandInput, DeleteListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteListenerCommand";
    import { DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteLoadBalancerCommand";
    import { DeleteRuleCommandInput, DeleteRuleCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteRuleCommand";
    import { DeleteTargetGroupCommandInput, DeleteTargetGroupCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteTargetGroupCommand";
    import { DeregisterTargetsCommandInput, DeregisterTargetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeregisterTargetsCommand";
    import { DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeAccountLimitsCommand";
    import { DescribeListenerCertificatesCommandInput, DescribeListenerCertificatesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeListenerCertificatesCommand";
    import { DescribeListenersCommandInput, DescribeListenersCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeListenersCommand";
    import { DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeLoadBalancerAttributesCommand";
    import { DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeLoadBalancersCommand";
    import { DescribeRulesCommandInput, DescribeRulesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeRulesCommand";
    import { DescribeSSLPoliciesCommandInput, DescribeSSLPoliciesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeSSLPoliciesCommand";
    import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTagsCommand";
    import { DescribeTargetGroupAttributesCommandInput, DescribeTargetGroupAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetGroupAttributesCommand";
    import { DescribeTargetGroupsCommandInput, DescribeTargetGroupsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetGroupsCommand";
    import { DescribeTargetHealthCommandInput, DescribeTargetHealthCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetHealthCommand";
    import { ModifyListenerCommandInput, ModifyListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyListenerCommand";
    import { ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyLoadBalancerAttributesCommand";
    import { ModifyRuleCommandInput, ModifyRuleCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyRuleCommand";
    import { ModifyTargetGroupAttributesCommandInput, ModifyTargetGroupAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyTargetGroupAttributesCommand";
    import { ModifyTargetGroupCommandInput, ModifyTargetGroupCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyTargetGroupCommand";
    import { RegisterTargetsCommandInput, RegisterTargetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RegisterTargetsCommand";
    import { RemoveListenerCertificatesCommandInput, RemoveListenerCertificatesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RemoveListenerCertificatesCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RemoveTagsCommand";
    import { SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetIpAddressTypeCommand";
    import { SetRulePrioritiesCommandInput, SetRulePrioritiesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetRulePrioritiesCommand";
    import { SetSecurityGroupsCommandInput, SetSecurityGroupsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetSecurityGroupsCommand";
    import { SetSubnetsCommandInput, SetSubnetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetSubnetsCommand";
    import { ElasticLoadBalancingV2Client } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    /**
        * <fullname>Elastic Load Balancing</fullname>
        *
        *          <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances.
        *       This enables you to increase the availability of your application. The load balancer also
        *       monitors the health of its registered targets and ensures that it routes traffic only to
        *       healthy targets. You configure your load balancer to accept incoming traffic by specifying one
        *       or more listeners, which are configured with a protocol and port number for connections from
        *       clients to the load balancer. You configure a target group with a protocol and port number for
        *       connections from the load balancer to the targets, and with health check settings to be used
        *       when checking the health status of the targets.</p>
        *
        *          <p>Elastic Load Balancing supports the following types of load balancers: Application Load
        *       Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This
        *       reference covers the following load balancer types:</p>
        *          <ul>
        *             <li>
        *                <p>Application Load Balancer - Operates at the application layer (layer 7) and supports
        *           HTTP and HTTPS.</p>
        *             </li>
        *             <li>
        *                <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP,
        *           TLS, and UDP.</p>
        *             </li>
        *             <li>
        *                <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p>
        *             </li>
        *          </ul>
        *
        *          <p>For more information, see the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/">Elastic Load Balancing User
        *       Guide</a>.</p>
        *
        *
        *
        *
        *
        *
        *
        *          <p>All Elastic Load Balancing operations are idempotent, which means that they complete at
        *       most one time. If you repeat an operation, it succeeds.</p>
        */
    export class ElasticLoadBalancingV2 extends ElasticLoadBalancingV2Client {
            /**
                * <p>Adds the specified SSL server certificate to the certificate list for the specified HTTPS
                *       or TLS listener.</p>
                *          <p>If the certificate in already in the certificate list, the call is successful but the
                *       certificate is not added again.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html">HTTPS
                *         listeners</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html">TLS
                *         listeners</a> in the <i>Network Load Balancers Guide</i>.</p>
                */
            addListenerCertificates(args: AddListenerCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<AddListenerCertificatesCommandOutput>;
            addListenerCertificates(args: AddListenerCertificatesCommandInput, cb: (err: any, data?: AddListenerCertificatesCommandOutput) => void): void;
            addListenerCertificates(args: AddListenerCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddListenerCertificatesCommandOutput) => void): void;
            /**
                * <p>Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your
                *       Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups,
                *       listeners, and rules.</p>
                *          <p>Each tag consists of a key and an optional value. If a resource already has a tag with the
                *       same key, <code>AddTags</code> updates its value.</p>
                */
            addTags(args: AddTagsCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsCommandOutput>;
            addTags(args: AddTagsCommandInput, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            addTags(args: AddTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            /**
                * <p>Creates a listener for the specified Application Load Balancer, Network Load Balancer, or
                *       Gateway Load Balancer.</p>
                *
                *
                *          <p>For more information, see the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html">Listeners for
                *             your Application Load Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html">Listeners for
                *             your Network Load Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html">Listeners for your
                *             Gateway Load Balancers</a>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>This operation is idempotent, which means that it completes at most one time. If you
                *       attempt to create multiple listeners with the same settings, each call succeeds.</p>
                */
            createListener(args: CreateListenerCommandInput, options?: __HttpHandlerOptions): Promise<CreateListenerCommandOutput>;
            createListener(args: CreateListenerCommandInput, cb: (err: any, data?: CreateListenerCommandOutput) => void): void;
            createListener(args: CreateListenerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateListenerCommandOutput) => void): void;
            /**
                * <p>Creates an Application Load Balancer, Network Load Balancer, or Gateway Load
                *       Balancer.</p>
                *
                *
                *
                *          <p>For more information, see the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html">Application Load Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html">Network Load
                *             Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html">Gateway Load
                *             Balancers</a>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>This operation is idempotent, which means that it completes at most one time. If you
                *       attempt to create multiple load balancers with the same settings, each call succeeds.</p>
                */
            createLoadBalancer(args: CreateLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoadBalancerCommandOutput>;
            createLoadBalancer(args: CreateLoadBalancerCommandInput, cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void): void;
            createLoadBalancer(args: CreateLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Creates a rule for the specified listener. The listener must be associated with an
                *       Application Load Balancer.</p>
                *          <p>Each rule consists of a priority, one or more actions, and one or more conditions. Rules
                *       are evaluated in priority order, from the lowest value to the highest value. When the
                *       conditions for a rule are met, its actions are performed. If the conditions for no rules are
                *       met, the actions for the default rule are performed. For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules">Listener rules</a> in the <i>Application Load Balancers Guide</i>.</p>
                */
            createRule(args: CreateRuleCommandInput, options?: __HttpHandlerOptions): Promise<CreateRuleCommandOutput>;
            createRule(args: CreateRuleCommandInput, cb: (err: any, data?: CreateRuleCommandOutput) => void): void;
            createRule(args: CreateRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRuleCommandOutput) => void): void;
            /**
                * <p>Creates a target group.</p>
                *
                *
                *
                *          <p>For more information, see the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html">Target
                *             groups for your Application Load Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html">Target groups
                *             for your Network Load Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html">Target groups for your
                *             Gateway Load Balancers</a>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>This operation is idempotent, which means that it completes at most one time. If you
                *       attempt to create multiple target groups with the same settings, each call succeeds.</p>
                */
            createTargetGroup(args: CreateTargetGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateTargetGroupCommandOutput>;
            createTargetGroup(args: CreateTargetGroupCommandInput, cb: (err: any, data?: CreateTargetGroupCommandOutput) => void): void;
            createTargetGroup(args: CreateTargetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTargetGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified listener.</p>
                *          <p>Alternatively, your listener is deleted when you delete the load balancer to which it is
                *         attached.</p>
                */
            deleteListener(args: DeleteListenerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteListenerCommandOutput>;
            deleteListener(args: DeleteListenerCommandInput, cb: (err: any, data?: DeleteListenerCommandOutput) => void): void;
            deleteListener(args: DeleteListenerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteListenerCommandOutput) => void): void;
            /**
                * <p>Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load
                *       Balancer. Deleting a load balancer also deletes its listeners.</p>
                *          <p>You can't delete a load balancer if deletion protection is enabled. If the load balancer
                *       does not exist or has already been deleted, the call succeeds.</p>
                *          <p>Deleting a load balancer does not affect its registered targets. For example, your EC2
                *       instances continue to run and are still registered to their target groups. If you no longer
                *       need these EC2 instances, you can stop or terminate them.</p>
                */
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoadBalancerCommandOutput>;
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void): void;
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Deletes the specified rule.</p>
                *          <p>You can't delete the default rule.</p>
                */
            deleteRule(args: DeleteRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRuleCommandOutput>;
            deleteRule(args: DeleteRuleCommandInput, cb: (err: any, data?: DeleteRuleCommandOutput) => void): void;
            deleteRule(args: DeleteRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRuleCommandOutput) => void): void;
            /**
                * <p>Deletes the specified target group.</p>
                *          <p>You can delete a target group if it is not referenced by any actions. Deleting a target
                *       group also deletes any associated health checks. Deleting a target group does not affect its
                *       registered targets. For example, any EC2 instances continue to run until you stop or terminate
                *       them.</p>
                */
            deleteTargetGroup(args: DeleteTargetGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTargetGroupCommandOutput>;
            deleteTargetGroup(args: DeleteTargetGroupCommandInput, cb: (err: any, data?: DeleteTargetGroupCommandOutput) => void): void;
            deleteTargetGroup(args: DeleteTargetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTargetGroupCommandOutput) => void): void;
            /**
                * <p>Deregisters the specified targets from the specified target group. After the targets are
                *       deregistered, they no longer receive traffic from the load balancer.</p>
                */
            deregisterTargets(args: DeregisterTargetsCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterTargetsCommandOutput>;
            deregisterTargets(args: DeregisterTargetsCommandInput, cb: (err: any, data?: DeregisterTargetsCommandOutput) => void): void;
            deregisterTargets(args: DeregisterTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterTargetsCommandOutput) => void): void;
            /**
                * <p>Describes the current Elastic Load Balancing resource limits for your Amazon Web Services
                *       account.</p>
                *          <p>For more information, see the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Quotas for your
                *             Application Load Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Quotas for your
                *             Network Load Balancers</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html">Quotas for your Gateway
                *             Load Balancers</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            describeAccountLimits(args: DescribeAccountLimitsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountLimitsCommandOutput>;
            describeAccountLimits(args: DescribeAccountLimitsCommandInput, cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void): void;
            describeAccountLimits(args: DescribeAccountLimitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void): void;
            /**
                * <p>Describes the default certificate and the certificate list for the specified HTTPS or TLS
                *       listener.</p>
                *          <p>If the default certificate is also in the certificate list, it appears twice in the
                *       results (once with <code>IsDefault</code> set to true and once with <code>IsDefault</code> set
                *       to false).</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates">SSL certificates</a> in the <i>Application Load Balancers Guide</i> or
                *         <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate">Server certificates</a> in the <i>Network Load Balancers
                *       Guide</i>.</p>
                */
            describeListenerCertificates(args: DescribeListenerCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeListenerCertificatesCommandOutput>;
            describeListenerCertificates(args: DescribeListenerCertificatesCommandInput, cb: (err: any, data?: DescribeListenerCertificatesCommandOutput) => void): void;
            describeListenerCertificates(args: DescribeListenerCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeListenerCertificatesCommandOutput) => void): void;
            /**
                * <p>Describes the specified listeners or the listeners for the specified Application Load
                *       Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load
                *       balancer or one or more listeners.</p>
                */
            describeListeners(args: DescribeListenersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeListenersCommandOutput>;
            describeListeners(args: DescribeListenersCommandInput, cb: (err: any, data?: DescribeListenersCommandOutput) => void): void;
            describeListeners(args: DescribeListenersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeListenersCommandOutput) => void): void;
            /**
                * <p>Describes the attributes for the specified Application Load Balancer, Network Load
                *       Balancer, or Gateway Load Balancer.</p>
                *
                *          <p>For more information, see the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Application Load Balancers
                *             Guide</i>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Network Load Balancers
                *             Guide</i>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Gateway Load Balancers
                *             Guide</i>
                *                </p>
                *             </li>
                *          </ul>
                */
            describeLoadBalancerAttributes(args: DescribeLoadBalancerAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoadBalancerAttributesCommandOutput>;
            describeLoadBalancerAttributes(args: DescribeLoadBalancerAttributesCommandInput, cb: (err: any, data?: DescribeLoadBalancerAttributesCommandOutput) => void): void;
            describeLoadBalancerAttributes(args: DescribeLoadBalancerAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoadBalancerAttributesCommandOutput) => void): void;
            /**
                * <p>Describes the specified load balancers or all of your load balancers.</p>
                */
            describeLoadBalancers(args: DescribeLoadBalancersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoadBalancersCommandOutput>;
            describeLoadBalancers(args: DescribeLoadBalancersCommandInput, cb: (err: any, data?: DescribeLoadBalancersCommandOutput) => void): void;
            describeLoadBalancers(args: DescribeLoadBalancersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoadBalancersCommandOutput) => void): void;
            /**
                * <p>Describes the specified rules or the rules for the specified listener. You must specify
                *       either a listener or one or more rules.</p>
                */
            describeRules(args: DescribeRulesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRulesCommandOutput>;
            describeRules(args: DescribeRulesCommandInput, cb: (err: any, data?: DescribeRulesCommandOutput) => void): void;
            describeRules(args: DescribeRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRulesCommandOutput) => void): void;
            /**
                * <p>Describes the specified policies or all policies used for SSL negotiation.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> or
                *         <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
                */
            describeSSLPolicies(args: DescribeSSLPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSSLPoliciesCommandOutput>;
            describeSSLPolicies(args: DescribeSSLPoliciesCommandInput, cb: (err: any, data?: DescribeSSLPoliciesCommandOutput) => void): void;
            describeSSLPolicies(args: DescribeSSLPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSSLPoliciesCommandOutput) => void): void;
            /**
                * <p>Describes the tags for the specified Elastic Load Balancing resources. You can describe
                *       the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load
                *       Balancers, target groups, listeners, or rules.</p>
                */
            describeTags(args: DescribeTagsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTagsCommandOutput>;
            describeTags(args: DescribeTagsCommandInput, cb: (err: any, data?: DescribeTagsCommandOutput) => void): void;
            describeTags(args: DescribeTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTagsCommandOutput) => void): void;
            /**
                * <p>Describes the attributes for the specified target group.</p>
                *          <p>For more information, see the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Application Load Balancers
                *             Guide</i>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Network Load Balancers
                *             Guide</i>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Gateway Load Balancers
                *             Guide</i>
                *                </p>
                *             </li>
                *          </ul>
                */
            describeTargetGroupAttributes(args: DescribeTargetGroupAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTargetGroupAttributesCommandOutput>;
            describeTargetGroupAttributes(args: DescribeTargetGroupAttributesCommandInput, cb: (err: any, data?: DescribeTargetGroupAttributesCommandOutput) => void): void;
            describeTargetGroupAttributes(args: DescribeTargetGroupAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTargetGroupAttributesCommandOutput) => void): void;
            /**
                * <p>Describes the specified target groups or all of your target groups. By default, all target
                *       groups are described. Alternatively, you can specify one of the following to filter the
                *       results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of
                *       one or more target groups.</p>
                */
            describeTargetGroups(args: DescribeTargetGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTargetGroupsCommandOutput>;
            describeTargetGroups(args: DescribeTargetGroupsCommandInput, cb: (err: any, data?: DescribeTargetGroupsCommandOutput) => void): void;
            describeTargetGroups(args: DescribeTargetGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTargetGroupsCommandOutput) => void): void;
            /**
                * <p>Describes the health of the specified targets or all of your targets.</p>
                */
            describeTargetHealth(args: DescribeTargetHealthCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTargetHealthCommandOutput>;
            describeTargetHealth(args: DescribeTargetHealthCommandInput, cb: (err: any, data?: DescribeTargetHealthCommandOutput) => void): void;
            describeTargetHealth(args: DescribeTargetHealthCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTargetHealthCommandOutput) => void): void;
            /**
                * <p>Replaces the specified properties of the specified listener. Any properties that you do
                *       not specify remain unchanged.</p>
                *          <p>Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy
                *       and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP
                *       to TLS, you must add the security policy and default certificate properties.</p>
                *          <p>To add an item to a list, remove an item from a list, or update an item in a list, you
                *       must provide the entire list. For example, to add an action, specify a list with the current
                *       actions plus the new action.</p>
                */
            modifyListener(args: ModifyListenerCommandInput, options?: __HttpHandlerOptions): Promise<ModifyListenerCommandOutput>;
            modifyListener(args: ModifyListenerCommandInput, cb: (err: any, data?: ModifyListenerCommandOutput) => void): void;
            modifyListener(args: ModifyListenerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyListenerCommandOutput) => void): void;
            /**
                * <p>Modifies the specified attributes of the specified Application Load Balancer, Network Load
                *       Balancer, or Gateway Load Balancer.</p>
                *          <p>If any of the specified attributes can't be modified as requested, the call fails. Any
                *       existing attributes that you do not modify retain their current values.</p>
                */
            modifyLoadBalancerAttributes(args: ModifyLoadBalancerAttributesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyLoadBalancerAttributesCommandOutput>;
            modifyLoadBalancerAttributes(args: ModifyLoadBalancerAttributesCommandInput, cb: (err: any, data?: ModifyLoadBalancerAttributesCommandOutput) => void): void;
            modifyLoadBalancerAttributes(args: ModifyLoadBalancerAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyLoadBalancerAttributesCommandOutput) => void): void;
            /**
                * <p>Replaces the specified properties of the specified rule. Any properties that you do not
                *       specify are unchanged.</p>
                *          <p>To add an item to a list, remove an item from a list, or update an item in a list, you
                *       must provide the entire list. For example, to add an action, specify a list with the current
                *       actions plus the new action.</p>
                */
            modifyRule(args: ModifyRuleCommandInput, options?: __HttpHandlerOptions): Promise<ModifyRuleCommandOutput>;
            modifyRule(args: ModifyRuleCommandInput, cb: (err: any, data?: ModifyRuleCommandOutput) => void): void;
            modifyRule(args: ModifyRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyRuleCommandOutput) => void): void;
            /**
                * <p>Modifies the health checks used when evaluating the health state of the targets in the
                *       specified target group.</p>
                *          <p>If the protocol of the target group is TCP, TLS, UDP, or TCP_UDP, you can't modify the
                *       health check protocol, interval, timeout, or success codes.</p>
                */
            modifyTargetGroup(args: ModifyTargetGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyTargetGroupCommandOutput>;
            modifyTargetGroup(args: ModifyTargetGroupCommandInput, cb: (err: any, data?: ModifyTargetGroupCommandOutput) => void): void;
            modifyTargetGroup(args: ModifyTargetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyTargetGroupCommandOutput) => void): void;
            /**
                * <p>Modifies the specified attributes of the specified target group.</p>
                */
            modifyTargetGroupAttributes(args: ModifyTargetGroupAttributesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyTargetGroupAttributesCommandOutput>;
            modifyTargetGroupAttributes(args: ModifyTargetGroupAttributesCommandInput, cb: (err: any, data?: ModifyTargetGroupAttributesCommandOutput) => void): void;
            modifyTargetGroupAttributes(args: ModifyTargetGroupAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyTargetGroupAttributesCommandOutput) => void): void;
            /**
                * <p>Registers the specified targets with the specified target group.</p>
                *
                *          <p>If the target is an EC2 instance, it must be in the <code>running</code> state when you
                *       register it.</p>
                *
                *          <p>By default, the load balancer routes requests to registered targets using the protocol and
                *       port for the target group. Alternatively, you can override the port for a target when you
                *       register it. You can register each EC2 instance or IP address with the same target group
                *       multiple times using different ports.</p>
                *
                *          <p>With a Network Load Balancer, you cannot register instances by instance ID if they have
                *       the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3,
                *       and T1. You can register instances of these types by IP address.</p>
                */
            registerTargets(args: RegisterTargetsCommandInput, options?: __HttpHandlerOptions): Promise<RegisterTargetsCommandOutput>;
            registerTargets(args: RegisterTargetsCommandInput, cb: (err: any, data?: RegisterTargetsCommandOutput) => void): void;
            registerTargets(args: RegisterTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterTargetsCommandOutput) => void): void;
            /**
                * <p>Removes the specified certificate from the certificate list for the specified HTTPS or TLS
                *       listener.</p>
                */
            removeListenerCertificates(args: RemoveListenerCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<RemoveListenerCertificatesCommandOutput>;
            removeListenerCertificates(args: RemoveListenerCertificatesCommandInput, cb: (err: any, data?: RemoveListenerCertificatesCommandOutput) => void): void;
            removeListenerCertificates(args: RemoveListenerCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveListenerCertificatesCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified Elastic Load Balancing resources. You can
                *       remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway
                *       Load Balancers, target groups, listeners, or rules.</p>
                */
            removeTags(args: RemoveTagsCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsCommandOutput>;
            removeTags(args: RemoveTagsCommandInput, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            removeTags(args: RemoveTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            /**
                * <p>Sets the type of IP addresses used by the subnets of the specified Application Load
                *       Balancer or Network Load Balancer.</p>
                */
            setIpAddressType(args: SetIpAddressTypeCommandInput, options?: __HttpHandlerOptions): Promise<SetIpAddressTypeCommandOutput>;
            setIpAddressType(args: SetIpAddressTypeCommandInput, cb: (err: any, data?: SetIpAddressTypeCommandOutput) => void): void;
            setIpAddressType(args: SetIpAddressTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIpAddressTypeCommandOutput) => void): void;
            /**
                * <p>Sets the priorities of the specified rules.</p>
                *          <p>You can reorder the rules as long as there are no priority conflicts in the new order. Any
                *       existing rules that you do not specify retain their current priority.</p>
                */
            setRulePriorities(args: SetRulePrioritiesCommandInput, options?: __HttpHandlerOptions): Promise<SetRulePrioritiesCommandOutput>;
            setRulePriorities(args: SetRulePrioritiesCommandInput, cb: (err: any, data?: SetRulePrioritiesCommandOutput) => void): void;
            setRulePriorities(args: SetRulePrioritiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetRulePrioritiesCommandOutput) => void): void;
            /**
                * <p>Associates the specified security groups with the specified Application Load Balancer. The
                *       specified security groups override the previously associated security groups.</p>
                *          <p>You can't specify a security group for a Network Load Balancer or Gateway Load
                *       Balancer.</p>
                */
            setSecurityGroups(args: SetSecurityGroupsCommandInput, options?: __HttpHandlerOptions): Promise<SetSecurityGroupsCommandOutput>;
            setSecurityGroups(args: SetSecurityGroupsCommandInput, cb: (err: any, data?: SetSecurityGroupsCommandOutput) => void): void;
            setSecurityGroups(args: SetSecurityGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetSecurityGroupsCommandOutput) => void): void;
            /**
                * <p>Enables the Availability Zones for the specified public subnets for the specified
                *       Application Load Balancer or Network Load Balancer. The specified subnets replace the
                *       previously enabled subnets.</p>
                *          <p>When you specify subnets for a Network Load Balancer, you must include all subnets that
                *       were enabled previously, with their existing configurations, plus any additional
                *       subnets.</p>
                */
            setSubnets(args: SetSubnetsCommandInput, options?: __HttpHandlerOptions): Promise<SetSubnetsCommandOutput>;
            setSubnets(args: SetSubnetsCommandInput, cb: (err: any, data?: SetSubnetsCommandOutput) => void): void;
            setSubnets(args: SetSubnetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetSubnetsCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/AddListenerCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { AddListenerCertificatesInput, AddListenerCertificatesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface AddListenerCertificatesCommandInput extends AddListenerCertificatesInput {
    }
    export interface AddListenerCertificatesCommandOutput extends AddListenerCertificatesOutput, __MetadataBearer {
    }
    /**
        * <p>Adds the specified SSL server certificate to the certificate list for the specified HTTPS
        *       or TLS listener.</p>
        *          <p>If the certificate in already in the certificate list, the call is successful but the
        *       certificate is not added again.</p>
        *
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html">HTTPS
        *         listeners</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html">TLS
        *         listeners</a> in the <i>Network Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, AddListenerCertificatesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, AddListenerCertificatesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new AddListenerCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddListenerCertificatesCommandInput} for command's `input` shape.
        * @see {@link AddListenerCertificatesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class AddListenerCertificatesCommand extends $Command<AddListenerCertificatesCommandInput, AddListenerCertificatesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: AddListenerCertificatesCommandInput;
            constructor(input: AddListenerCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddListenerCertificatesCommandInput, AddListenerCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/AddTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { AddTagsInput, AddTagsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface AddTagsCommandInput extends AddTagsInput {
    }
    export interface AddTagsCommandOutput extends AddTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your
        *       Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups,
        *       listeners, and rules.</p>
        *          <p>Each tag consists of a key and an optional value. If a resource already has a tag with the
        *       same key, <code>AddTags</code> updates its value.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, AddTagsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, AddTagsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new AddTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsCommandInput} for command's `input` shape.
        * @see {@link AddTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class AddTagsCommand extends $Command<AddTagsCommandInput, AddTagsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: AddTagsCommandInput;
            constructor(input: AddTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsCommandInput, AddTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateListenerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { CreateListenerInput, CreateListenerOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface CreateListenerCommandInput extends CreateListenerInput {
    }
    export interface CreateListenerCommandOutput extends CreateListenerOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a listener for the specified Application Load Balancer, Network Load Balancer, or
        *       Gateway Load Balancer.</p>
        *
        *
        *          <p>For more information, see the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html">Listeners for
        *             your Application Load Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html">Listeners for
        *             your Network Load Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html">Listeners for your
        *             Gateway Load Balancers</a>
        *                </p>
        *             </li>
        *          </ul>
        *
        *          <p>This operation is idempotent, which means that it completes at most one time. If you
        *       attempt to create multiple listeners with the same settings, each call succeeds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, CreateListenerCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, CreateListenerCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new CreateListenerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateListenerCommandInput} for command's `input` shape.
        * @see {@link CreateListenerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class CreateListenerCommand extends $Command<CreateListenerCommandInput, CreateListenerCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: CreateListenerCommandInput;
            constructor(input: CreateListenerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateListenerCommandInput, CreateListenerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { CreateLoadBalancerInput, CreateLoadBalancerOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface CreateLoadBalancerCommandInput extends CreateLoadBalancerInput {
    }
    export interface CreateLoadBalancerCommandOutput extends CreateLoadBalancerOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an Application Load Balancer, Network Load Balancer, or Gateway Load
        *       Balancer.</p>
        *
        *
        *
        *          <p>For more information, see the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html">Application Load Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html">Network Load
        *             Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html">Gateway Load
        *             Balancers</a>
        *                </p>
        *             </li>
        *          </ul>
        *
        *          <p>This operation is idempotent, which means that it completes at most one time. If you
        *       attempt to create multiple load balancers with the same settings, each call succeeds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, CreateLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, CreateLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new CreateLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link CreateLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class CreateLoadBalancerCommand extends $Command<CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: CreateLoadBalancerCommandInput;
            constructor(input: CreateLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { CreateRuleInput, CreateRuleOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface CreateRuleCommandInput extends CreateRuleInput {
    }
    export interface CreateRuleCommandOutput extends CreateRuleOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a rule for the specified listener. The listener must be associated with an
        *       Application Load Balancer.</p>
        *          <p>Each rule consists of a priority, one or more actions, and one or more conditions. Rules
        *       are evaluated in priority order, from the lowest value to the highest value. When the
        *       conditions for a rule are met, its actions are performed. If the conditions for no rules are
        *       met, the actions for the default rule are performed. For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules">Listener rules</a> in the <i>Application Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, CreateRuleCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, CreateRuleCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new CreateRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRuleCommandInput} for command's `input` shape.
        * @see {@link CreateRuleCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class CreateRuleCommand extends $Command<CreateRuleCommandInput, CreateRuleCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: CreateRuleCommandInput;
            constructor(input: CreateRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRuleCommandInput, CreateRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateTargetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { CreateTargetGroupInput, CreateTargetGroupOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface CreateTargetGroupCommandInput extends CreateTargetGroupInput {
    }
    export interface CreateTargetGroupCommandOutput extends CreateTargetGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a target group.</p>
        *
        *
        *
        *          <p>For more information, see the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html">Target
        *             groups for your Application Load Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html">Target groups
        *             for your Network Load Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html">Target groups for your
        *             Gateway Load Balancers</a>
        *                </p>
        *             </li>
        *          </ul>
        *
        *          <p>This operation is idempotent, which means that it completes at most one time. If you
        *       attempt to create multiple target groups with the same settings, each call succeeds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, CreateTargetGroupCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, CreateTargetGroupCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new CreateTargetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTargetGroupCommandInput} for command's `input` shape.
        * @see {@link CreateTargetGroupCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class CreateTargetGroupCommand extends $Command<CreateTargetGroupCommandInput, CreateTargetGroupCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: CreateTargetGroupCommandInput;
            constructor(input: CreateTargetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTargetGroupCommandInput, CreateTargetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteListenerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DeleteListenerInput, DeleteListenerOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DeleteListenerCommandInput extends DeleteListenerInput {
    }
    export interface DeleteListenerCommandOutput extends DeleteListenerOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified listener.</p>
        *          <p>Alternatively, your listener is deleted when you delete the load balancer to which it is
        *         attached.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DeleteListenerCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DeleteListenerCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DeleteListenerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteListenerCommandInput} for command's `input` shape.
        * @see {@link DeleteListenerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DeleteListenerCommand extends $Command<DeleteListenerCommandInput, DeleteListenerCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DeleteListenerCommandInput;
            constructor(input: DeleteListenerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteListenerCommandInput, DeleteListenerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DeleteLoadBalancerInput, DeleteLoadBalancerOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DeleteLoadBalancerCommandInput extends DeleteLoadBalancerInput {
    }
    export interface DeleteLoadBalancerCommandOutput extends DeleteLoadBalancerOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load
        *       Balancer. Deleting a load balancer also deletes its listeners.</p>
        *          <p>You can't delete a load balancer if deletion protection is enabled. If the load balancer
        *       does not exist or has already been deleted, the call succeeds.</p>
        *          <p>Deleting a load balancer does not affect its registered targets. For example, your EC2
        *       instances continue to run and are still registered to their target groups. If you no longer
        *       need these EC2 instances, you can stop or terminate them.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DeleteLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DeleteLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DeleteLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link DeleteLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DeleteLoadBalancerCommand extends $Command<DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DeleteLoadBalancerCommandInput;
            constructor(input: DeleteLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DeleteRuleInput, DeleteRuleOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DeleteRuleCommandInput extends DeleteRuleInput {
    }
    export interface DeleteRuleCommandOutput extends DeleteRuleOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified rule.</p>
        *          <p>You can't delete the default rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DeleteRuleCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DeleteRuleCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DeleteRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRuleCommandInput} for command's `input` shape.
        * @see {@link DeleteRuleCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DeleteRuleCommand extends $Command<DeleteRuleCommandInput, DeleteRuleCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DeleteRuleCommandInput;
            constructor(input: DeleteRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRuleCommandInput, DeleteRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteTargetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DeleteTargetGroupInput, DeleteTargetGroupOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DeleteTargetGroupCommandInput extends DeleteTargetGroupInput {
    }
    export interface DeleteTargetGroupCommandOutput extends DeleteTargetGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified target group.</p>
        *          <p>You can delete a target group if it is not referenced by any actions. Deleting a target
        *       group also deletes any associated health checks. Deleting a target group does not affect its
        *       registered targets. For example, any EC2 instances continue to run until you stop or terminate
        *       them.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DeleteTargetGroupCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DeleteTargetGroupCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DeleteTargetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTargetGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteTargetGroupCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DeleteTargetGroupCommand extends $Command<DeleteTargetGroupCommandInput, DeleteTargetGroupCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DeleteTargetGroupCommandInput;
            constructor(input: DeleteTargetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTargetGroupCommandInput, DeleteTargetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeregisterTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DeregisterTargetsInput, DeregisterTargetsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DeregisterTargetsCommandInput extends DeregisterTargetsInput {
    }
    export interface DeregisterTargetsCommandOutput extends DeregisterTargetsOutput, __MetadataBearer {
    }
    /**
        * <p>Deregisters the specified targets from the specified target group. After the targets are
        *       deregistered, they no longer receive traffic from the load balancer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DeregisterTargetsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DeregisterTargetsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DeregisterTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterTargetsCommandInput} for command's `input` shape.
        * @see {@link DeregisterTargetsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DeregisterTargetsCommand extends $Command<DeregisterTargetsCommandInput, DeregisterTargetsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DeregisterTargetsCommandInput;
            constructor(input: DeregisterTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterTargetsCommandInput, DeregisterTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeAccountLimitsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeAccountLimitsInput, DescribeAccountLimitsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeAccountLimitsCommandInput extends DescribeAccountLimitsInput {
    }
    export interface DescribeAccountLimitsCommandOutput extends DescribeAccountLimitsOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the current Elastic Load Balancing resource limits for your Amazon Web Services
        *       account.</p>
        *          <p>For more information, see the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Quotas for your
        *             Application Load Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Quotas for your
        *             Network Load Balancers</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html">Quotas for your Gateway
        *             Load Balancers</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeAccountLimitsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeAccountLimitsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeAccountLimitsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountLimitsCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountLimitsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeAccountLimitsCommand extends $Command<DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeAccountLimitsCommandInput;
            constructor(input: DescribeAccountLimitsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeListenerCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeListenerCertificatesInput, DescribeListenerCertificatesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeListenerCertificatesCommandInput extends DescribeListenerCertificatesInput {
    }
    export interface DescribeListenerCertificatesCommandOutput extends DescribeListenerCertificatesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the default certificate and the certificate list for the specified HTTPS or TLS
        *       listener.</p>
        *          <p>If the default certificate is also in the certificate list, it appears twice in the
        *       results (once with <code>IsDefault</code> set to true and once with <code>IsDefault</code> set
        *       to false).</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates">SSL certificates</a> in the <i>Application Load Balancers Guide</i> or
        *         <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate">Server certificates</a> in the <i>Network Load Balancers
        *       Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeListenerCertificatesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeListenerCertificatesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeListenerCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeListenerCertificatesCommandInput} for command's `input` shape.
        * @see {@link DescribeListenerCertificatesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeListenerCertificatesCommand extends $Command<DescribeListenerCertificatesCommandInput, DescribeListenerCertificatesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeListenerCertificatesCommandInput;
            constructor(input: DescribeListenerCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeListenerCertificatesCommandInput, DescribeListenerCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeListenersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeListenersInput, DescribeListenersOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeListenersCommandInput extends DescribeListenersInput {
    }
    export interface DescribeListenersCommandOutput extends DescribeListenersOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified listeners or the listeners for the specified Application Load
        *       Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load
        *       balancer or one or more listeners.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeListenersCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeListenersCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeListenersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeListenersCommandInput} for command's `input` shape.
        * @see {@link DescribeListenersCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeListenersCommand extends $Command<DescribeListenersCommandInput, DescribeListenersCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeListenersCommandInput;
            constructor(input: DescribeListenersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeListenersCommandInput, DescribeListenersCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeLoadBalancerAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeLoadBalancerAttributesInput, DescribeLoadBalancerAttributesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeLoadBalancerAttributesCommandInput extends DescribeLoadBalancerAttributesInput {
    }
    export interface DescribeLoadBalancerAttributesCommandOutput extends DescribeLoadBalancerAttributesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the attributes for the specified Application Load Balancer, Network Load
        *       Balancer, or Gateway Load Balancer.</p>
        *
        *          <p>For more information, see the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Application Load Balancers
        *             Guide</i>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Network Load Balancers
        *             Guide</i>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Gateway Load Balancers
        *             Guide</i>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeLoadBalancerAttributesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeLoadBalancerAttributesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeLoadBalancerAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoadBalancerAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeLoadBalancerAttributesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeLoadBalancerAttributesCommand extends $Command<DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeLoadBalancerAttributesCommandInput;
            constructor(input: DescribeLoadBalancerAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeLoadBalancersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeLoadBalancersInput, DescribeLoadBalancersOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeLoadBalancersCommandInput extends DescribeLoadBalancersInput {
    }
    export interface DescribeLoadBalancersCommandOutput extends DescribeLoadBalancersOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified load balancers or all of your load balancers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeLoadBalancersCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeLoadBalancersCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeLoadBalancersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoadBalancersCommandInput} for command's `input` shape.
        * @see {@link DescribeLoadBalancersCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeLoadBalancersCommand extends $Command<DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeLoadBalancersCommandInput;
            constructor(input: DescribeLoadBalancersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeRulesInput, DescribeRulesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeRulesCommandInput extends DescribeRulesInput {
    }
    export interface DescribeRulesCommandOutput extends DescribeRulesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified rules or the rules for the specified listener. You must specify
        *       either a listener or one or more rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeRulesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeRulesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRulesCommandInput} for command's `input` shape.
        * @see {@link DescribeRulesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeRulesCommand extends $Command<DescribeRulesCommandInput, DescribeRulesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeRulesCommandInput;
            constructor(input: DescribeRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRulesCommandInput, DescribeRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeSSLPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeSSLPoliciesInput, DescribeSSLPoliciesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeSSLPoliciesCommandInput extends DescribeSSLPoliciesInput {
    }
    export interface DescribeSSLPoliciesCommandOutput extends DescribeSSLPoliciesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified policies or all policies used for SSL negotiation.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> or
        *         <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeSSLPoliciesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeSSLPoliciesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeSSLPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSSLPoliciesCommandInput} for command's `input` shape.
        * @see {@link DescribeSSLPoliciesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeSSLPoliciesCommand extends $Command<DescribeSSLPoliciesCommandInput, DescribeSSLPoliciesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeSSLPoliciesCommandInput;
            constructor(input: DescribeSSLPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSSLPoliciesCommandInput, DescribeSSLPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeTagsInput, DescribeTagsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeTagsCommandInput extends DescribeTagsInput {
    }
    export interface DescribeTagsCommandOutput extends DescribeTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the tags for the specified Elastic Load Balancing resources. You can describe
        *       the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load
        *       Balancers, target groups, listeners, or rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeTagsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeTagsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTagsCommandInput} for command's `input` shape.
        * @see {@link DescribeTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeTagsCommand extends $Command<DescribeTagsCommandInput, DescribeTagsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeTagsCommandInput;
            constructor(input: DescribeTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTagsCommandInput, DescribeTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetGroupAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeTargetGroupAttributesInput, DescribeTargetGroupAttributesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeTargetGroupAttributesCommandInput extends DescribeTargetGroupAttributesInput {
    }
    export interface DescribeTargetGroupAttributesCommandOutput extends DescribeTargetGroupAttributesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the attributes for the specified target group.</p>
        *          <p>For more information, see the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Application Load Balancers
        *             Guide</i>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Network Load Balancers
        *             Guide</i>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Gateway Load Balancers
        *             Guide</i>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeTargetGroupAttributesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeTargetGroupAttributesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeTargetGroupAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTargetGroupAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeTargetGroupAttributesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeTargetGroupAttributesCommand extends $Command<DescribeTargetGroupAttributesCommandInput, DescribeTargetGroupAttributesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeTargetGroupAttributesCommandInput;
            constructor(input: DescribeTargetGroupAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTargetGroupAttributesCommandInput, DescribeTargetGroupAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeTargetGroupsInput, DescribeTargetGroupsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeTargetGroupsCommandInput extends DescribeTargetGroupsInput {
    }
    export interface DescribeTargetGroupsCommandOutput extends DescribeTargetGroupsOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified target groups or all of your target groups. By default, all target
        *       groups are described. Alternatively, you can specify one of the following to filter the
        *       results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of
        *       one or more target groups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeTargetGroupsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeTargetGroupsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeTargetGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTargetGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeTargetGroupsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeTargetGroupsCommand extends $Command<DescribeTargetGroupsCommandInput, DescribeTargetGroupsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeTargetGroupsCommandInput;
            constructor(input: DescribeTargetGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTargetGroupsCommandInput, DescribeTargetGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetHealthCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { DescribeTargetHealthInput, DescribeTargetHealthOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface DescribeTargetHealthCommandInput extends DescribeTargetHealthInput {
    }
    export interface DescribeTargetHealthCommandOutput extends DescribeTargetHealthOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the health of the specified targets or all of your targets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, DescribeTargetHealthCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, DescribeTargetHealthCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new DescribeTargetHealthCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTargetHealthCommandInput} for command's `input` shape.
        * @see {@link DescribeTargetHealthCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class DescribeTargetHealthCommand extends $Command<DescribeTargetHealthCommandInput, DescribeTargetHealthCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: DescribeTargetHealthCommandInput;
            constructor(input: DescribeTargetHealthCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTargetHealthCommandInput, DescribeTargetHealthCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyListenerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { ModifyListenerInput, ModifyListenerOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface ModifyListenerCommandInput extends ModifyListenerInput {
    }
    export interface ModifyListenerCommandOutput extends ModifyListenerOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces the specified properties of the specified listener. Any properties that you do
        *       not specify remain unchanged.</p>
        *          <p>Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy
        *       and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP
        *       to TLS, you must add the security policy and default certificate properties.</p>
        *          <p>To add an item to a list, remove an item from a list, or update an item in a list, you
        *       must provide the entire list. For example, to add an action, specify a list with the current
        *       actions plus the new action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, ModifyListenerCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, ModifyListenerCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new ModifyListenerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyListenerCommandInput} for command's `input` shape.
        * @see {@link ModifyListenerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class ModifyListenerCommand extends $Command<ModifyListenerCommandInput, ModifyListenerCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: ModifyListenerCommandInput;
            constructor(input: ModifyListenerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyListenerCommandInput, ModifyListenerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyLoadBalancerAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { ModifyLoadBalancerAttributesInput, ModifyLoadBalancerAttributesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface ModifyLoadBalancerAttributesCommandInput extends ModifyLoadBalancerAttributesInput {
    }
    export interface ModifyLoadBalancerAttributesCommandOutput extends ModifyLoadBalancerAttributesOutput, __MetadataBearer {
    }
    /**
        * <p>Modifies the specified attributes of the specified Application Load Balancer, Network Load
        *       Balancer, or Gateway Load Balancer.</p>
        *          <p>If any of the specified attributes can't be modified as requested, the call fails. Any
        *       existing attributes that you do not modify retain their current values.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, ModifyLoadBalancerAttributesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, ModifyLoadBalancerAttributesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new ModifyLoadBalancerAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyLoadBalancerAttributesCommandInput} for command's `input` shape.
        * @see {@link ModifyLoadBalancerAttributesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class ModifyLoadBalancerAttributesCommand extends $Command<ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: ModifyLoadBalancerAttributesCommandInput;
            constructor(input: ModifyLoadBalancerAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { ModifyRuleInput, ModifyRuleOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface ModifyRuleCommandInput extends ModifyRuleInput {
    }
    export interface ModifyRuleCommandOutput extends ModifyRuleOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces the specified properties of the specified rule. Any properties that you do not
        *       specify are unchanged.</p>
        *          <p>To add an item to a list, remove an item from a list, or update an item in a list, you
        *       must provide the entire list. For example, to add an action, specify a list with the current
        *       actions plus the new action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, ModifyRuleCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, ModifyRuleCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new ModifyRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyRuleCommandInput} for command's `input` shape.
        * @see {@link ModifyRuleCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class ModifyRuleCommand extends $Command<ModifyRuleCommandInput, ModifyRuleCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: ModifyRuleCommandInput;
            constructor(input: ModifyRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyRuleCommandInput, ModifyRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyTargetGroupAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { ModifyTargetGroupAttributesInput, ModifyTargetGroupAttributesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface ModifyTargetGroupAttributesCommandInput extends ModifyTargetGroupAttributesInput {
    }
    export interface ModifyTargetGroupAttributesCommandOutput extends ModifyTargetGroupAttributesOutput, __MetadataBearer {
    }
    /**
        * <p>Modifies the specified attributes of the specified target group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, ModifyTargetGroupAttributesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, ModifyTargetGroupAttributesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new ModifyTargetGroupAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyTargetGroupAttributesCommandInput} for command's `input` shape.
        * @see {@link ModifyTargetGroupAttributesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class ModifyTargetGroupAttributesCommand extends $Command<ModifyTargetGroupAttributesCommandInput, ModifyTargetGroupAttributesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: ModifyTargetGroupAttributesCommandInput;
            constructor(input: ModifyTargetGroupAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyTargetGroupAttributesCommandInput, ModifyTargetGroupAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyTargetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { ModifyTargetGroupInput, ModifyTargetGroupOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface ModifyTargetGroupCommandInput extends ModifyTargetGroupInput {
    }
    export interface ModifyTargetGroupCommandOutput extends ModifyTargetGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Modifies the health checks used when evaluating the health state of the targets in the
        *       specified target group.</p>
        *          <p>If the protocol of the target group is TCP, TLS, UDP, or TCP_UDP, you can't modify the
        *       health check protocol, interval, timeout, or success codes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, ModifyTargetGroupCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, ModifyTargetGroupCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new ModifyTargetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyTargetGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyTargetGroupCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class ModifyTargetGroupCommand extends $Command<ModifyTargetGroupCommandInput, ModifyTargetGroupCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: ModifyTargetGroupCommandInput;
            constructor(input: ModifyTargetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyTargetGroupCommandInput, ModifyTargetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RegisterTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { RegisterTargetsInput, RegisterTargetsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface RegisterTargetsCommandInput extends RegisterTargetsInput {
    }
    export interface RegisterTargetsCommandOutput extends RegisterTargetsOutput, __MetadataBearer {
    }
    /**
        * <p>Registers the specified targets with the specified target group.</p>
        *
        *          <p>If the target is an EC2 instance, it must be in the <code>running</code> state when you
        *       register it.</p>
        *
        *          <p>By default, the load balancer routes requests to registered targets using the protocol and
        *       port for the target group. Alternatively, you can override the port for a target when you
        *       register it. You can register each EC2 instance or IP address with the same target group
        *       multiple times using different ports.</p>
        *
        *          <p>With a Network Load Balancer, you cannot register instances by instance ID if they have
        *       the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3,
        *       and T1. You can register instances of these types by IP address.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, RegisterTargetsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, RegisterTargetsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new RegisterTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterTargetsCommandInput} for command's `input` shape.
        * @see {@link RegisterTargetsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class RegisterTargetsCommand extends $Command<RegisterTargetsCommandInput, RegisterTargetsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: RegisterTargetsCommandInput;
            constructor(input: RegisterTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterTargetsCommandInput, RegisterTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RemoveListenerCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { RemoveListenerCertificatesInput, RemoveListenerCertificatesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface RemoveListenerCertificatesCommandInput extends RemoveListenerCertificatesInput {
    }
    export interface RemoveListenerCertificatesCommandOutput extends RemoveListenerCertificatesOutput, __MetadataBearer {
    }
    /**
        * <p>Removes the specified certificate from the certificate list for the specified HTTPS or TLS
        *       listener.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, RemoveListenerCertificatesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, RemoveListenerCertificatesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new RemoveListenerCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveListenerCertificatesCommandInput} for command's `input` shape.
        * @see {@link RemoveListenerCertificatesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class RemoveListenerCertificatesCommand extends $Command<RemoveListenerCertificatesCommandInput, RemoveListenerCertificatesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: RemoveListenerCertificatesCommandInput;
            constructor(input: RemoveListenerCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveListenerCertificatesCommandInput, RemoveListenerCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RemoveTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { RemoveTagsInput, RemoveTagsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface RemoveTagsCommandInput extends RemoveTagsInput {
    }
    export interface RemoveTagsCommandOutput extends RemoveTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified Elastic Load Balancing resources. You can
        *       remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway
        *       Load Balancers, target groups, listeners, or rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, RemoveTagsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, RemoveTagsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new RemoveTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class RemoveTagsCommand extends $Command<RemoveTagsCommandInput, RemoveTagsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: RemoveTagsCommandInput;
            constructor(input: RemoveTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsCommandInput, RemoveTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetIpAddressTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { SetIpAddressTypeInput, SetIpAddressTypeOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface SetIpAddressTypeCommandInput extends SetIpAddressTypeInput {
    }
    export interface SetIpAddressTypeCommandOutput extends SetIpAddressTypeOutput, __MetadataBearer {
    }
    /**
        * <p>Sets the type of IP addresses used by the subnets of the specified Application Load
        *       Balancer or Network Load Balancer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, SetIpAddressTypeCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, SetIpAddressTypeCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new SetIpAddressTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIpAddressTypeCommandInput} for command's `input` shape.
        * @see {@link SetIpAddressTypeCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class SetIpAddressTypeCommand extends $Command<SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: SetIpAddressTypeCommandInput;
            constructor(input: SetIpAddressTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetRulePrioritiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { SetRulePrioritiesInput, SetRulePrioritiesOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface SetRulePrioritiesCommandInput extends SetRulePrioritiesInput {
    }
    export interface SetRulePrioritiesCommandOutput extends SetRulePrioritiesOutput, __MetadataBearer {
    }
    /**
        * <p>Sets the priorities of the specified rules.</p>
        *          <p>You can reorder the rules as long as there are no priority conflicts in the new order. Any
        *       existing rules that you do not specify retain their current priority.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, SetRulePrioritiesCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, SetRulePrioritiesCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new SetRulePrioritiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetRulePrioritiesCommandInput} for command's `input` shape.
        * @see {@link SetRulePrioritiesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class SetRulePrioritiesCommand extends $Command<SetRulePrioritiesCommandInput, SetRulePrioritiesCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: SetRulePrioritiesCommandInput;
            constructor(input: SetRulePrioritiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetRulePrioritiesCommandInput, SetRulePrioritiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetSecurityGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { SetSecurityGroupsInput, SetSecurityGroupsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface SetSecurityGroupsCommandInput extends SetSecurityGroupsInput {
    }
    export interface SetSecurityGroupsCommandOutput extends SetSecurityGroupsOutput, __MetadataBearer {
    }
    /**
        * <p>Associates the specified security groups with the specified Application Load Balancer. The
        *       specified security groups override the previously associated security groups.</p>
        *          <p>You can't specify a security group for a Network Load Balancer or Gateway Load
        *       Balancer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, SetSecurityGroupsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, SetSecurityGroupsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new SetSecurityGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetSecurityGroupsCommandInput} for command's `input` shape.
        * @see {@link SetSecurityGroupsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class SetSecurityGroupsCommand extends $Command<SetSecurityGroupsCommandInput, SetSecurityGroupsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: SetSecurityGroupsCommandInput;
            constructor(input: SetSecurityGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetSecurityGroupsCommandInput, SetSecurityGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetSubnetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client";
    import { SetSubnetsInput, SetSubnetsOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0";
    export interface SetSubnetsCommandInput extends SetSubnetsInput {
    }
    export interface SetSubnetsCommandOutput extends SetSubnetsOutput, __MetadataBearer {
    }
    /**
        * <p>Enables the Availability Zones for the specified public subnets for the specified
        *       Application Load Balancer or Network Load Balancer. The specified subnets replace the
        *       previously enabled subnets.</p>
        *          <p>When you specify subnets for a Network Load Balancer, you must include all subnets that
        *       were enabled previously, with their existing configurations, plus any additional
        *       subnets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingV2Client, SetSubnetsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
        * // const { ElasticLoadBalancingV2Client, SetSubnetsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
        * const client = new ElasticLoadBalancingV2Client(config);
        * const command = new SetSubnetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetSubnetsCommandInput} for command's `input` shape.
        * @see {@link SetSubnetsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
        *
        */
    export class SetSubnetsCommand extends $Command<SetSubnetsCommandInput, SetSubnetsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
            readonly input: SetSubnetsCommandInput;
            constructor(input: SetSubnetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetSubnetsCommandInput, SetSubnetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/ElasticLoadBalancingV2Client' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddListenerCertificatesCommandInput, AddListenerCertificatesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/AddListenerCertificatesCommand";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/AddTagsCommand";
    import { CreateListenerCommandInput, CreateListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateListenerCommand";
    import { CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateLoadBalancerCommand";
    import { CreateRuleCommandInput, CreateRuleCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateRuleCommand";
    import { CreateTargetGroupCommandInput, CreateTargetGroupCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/CreateTargetGroupCommand";
    import { DeleteListenerCommandInput, DeleteListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteListenerCommand";
    import { DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteLoadBalancerCommand";
    import { DeleteRuleCommandInput, DeleteRuleCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteRuleCommand";
    import { DeleteTargetGroupCommandInput, DeleteTargetGroupCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeleteTargetGroupCommand";
    import { DeregisterTargetsCommandInput, DeregisterTargetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DeregisterTargetsCommand";
    import { DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeAccountLimitsCommand";
    import { DescribeListenerCertificatesCommandInput, DescribeListenerCertificatesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeListenerCertificatesCommand";
    import { DescribeListenersCommandInput, DescribeListenersCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeListenersCommand";
    import { DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeLoadBalancerAttributesCommand";
    import { DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeLoadBalancersCommand";
    import { DescribeRulesCommandInput, DescribeRulesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeRulesCommand";
    import { DescribeSSLPoliciesCommandInput, DescribeSSLPoliciesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeSSLPoliciesCommand";
    import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTagsCommand";
    import { DescribeTargetGroupAttributesCommandInput, DescribeTargetGroupAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetGroupAttributesCommand";
    import { DescribeTargetGroupsCommandInput, DescribeTargetGroupsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetGroupsCommand";
    import { DescribeTargetHealthCommandInput, DescribeTargetHealthCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/DescribeTargetHealthCommand";
    import { ModifyListenerCommandInput, ModifyListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyListenerCommand";
    import { ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyLoadBalancerAttributesCommand";
    import { ModifyRuleCommandInput, ModifyRuleCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyRuleCommand";
    import { ModifyTargetGroupAttributesCommandInput, ModifyTargetGroupAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyTargetGroupAttributesCommand";
    import { ModifyTargetGroupCommandInput, ModifyTargetGroupCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/ModifyTargetGroupCommand";
    import { RegisterTargetsCommandInput, RegisterTargetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RegisterTargetsCommand";
    import { RemoveListenerCertificatesCommandInput, RemoveListenerCertificatesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RemoveListenerCertificatesCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/RemoveTagsCommand";
    import { SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetIpAddressTypeCommand";
    import { SetRulePrioritiesCommandInput, SetRulePrioritiesCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetRulePrioritiesCommand";
    import { SetSecurityGroupsCommandInput, SetSecurityGroupsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetSecurityGroupsCommand";
    import { SetSubnetsCommandInput, SetSubnetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/commands/SetSubnetsCommand";
    export type ServiceInputTypes = AddListenerCertificatesCommandInput | AddTagsCommandInput | CreateListenerCommandInput | CreateLoadBalancerCommandInput | CreateRuleCommandInput | CreateTargetGroupCommandInput | DeleteListenerCommandInput | DeleteLoadBalancerCommandInput | DeleteRuleCommandInput | DeleteTargetGroupCommandInput | DeregisterTargetsCommandInput | DescribeAccountLimitsCommandInput | DescribeListenerCertificatesCommandInput | DescribeListenersCommandInput | DescribeLoadBalancerAttributesCommandInput | DescribeLoadBalancersCommandInput | DescribeRulesCommandInput | DescribeSSLPoliciesCommandInput | DescribeTagsCommandInput | DescribeTargetGroupAttributesCommandInput | DescribeTargetGroupsCommandInput | DescribeTargetHealthCommandInput | ModifyListenerCommandInput | ModifyLoadBalancerAttributesCommandInput | ModifyRuleCommandInput | ModifyTargetGroupAttributesCommandInput | ModifyTargetGroupCommandInput | RegisterTargetsCommandInput | RemoveListenerCertificatesCommandInput | RemoveTagsCommandInput | SetIpAddressTypeCommandInput | SetRulePrioritiesCommandInput | SetSecurityGroupsCommandInput | SetSubnetsCommandInput;
    export type ServiceOutputTypes = AddListenerCertificatesCommandOutput | AddTagsCommandOutput | CreateListenerCommandOutput | CreateLoadBalancerCommandOutput | CreateRuleCommandOutput | CreateTargetGroupCommandOutput | DeleteListenerCommandOutput | DeleteLoadBalancerCommandOutput | DeleteRuleCommandOutput | DeleteTargetGroupCommandOutput | DeregisterTargetsCommandOutput | DescribeAccountLimitsCommandOutput | DescribeListenerCertificatesCommandOutput | DescribeListenersCommandOutput | DescribeLoadBalancerAttributesCommandOutput | DescribeLoadBalancersCommandOutput | DescribeRulesCommandOutput | DescribeSSLPoliciesCommandOutput | DescribeTagsCommandOutput | DescribeTargetGroupAttributesCommandOutput | DescribeTargetGroupsCommandOutput | DescribeTargetHealthCommandOutput | ModifyListenerCommandOutput | ModifyLoadBalancerAttributesCommandOutput | ModifyRuleCommandOutput | ModifyTargetGroupAttributesCommandOutput | ModifyTargetGroupCommandOutput | RegisterTargetsCommandOutput | RemoveListenerCertificatesCommandOutput | RemoveTagsCommandOutput | SetIpAddressTypeCommandOutput | SetRulePrioritiesCommandOutput | SetSecurityGroupsCommandOutput | SetSubnetsCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ElasticLoadBalancingV2ClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ElasticLoadBalancingV2Client class constructor that set the region, credentials and other options.
        */
    export interface ElasticLoadBalancingV2ClientConfig extends ElasticLoadBalancingV2ClientConfigType {
    }
    type ElasticLoadBalancingV2ClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ElasticLoadBalancingV2Client class. This is resolved and normalized from the {@link ElasticLoadBalancingV2ClientConfig | constructor configuration interface}.
        */
    export interface ElasticLoadBalancingV2ClientResolvedConfig extends ElasticLoadBalancingV2ClientResolvedConfigType {
    }
    /**
        * <fullname>Elastic Load Balancing</fullname>
        *
        *          <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances.
        *       This enables you to increase the availability of your application. The load balancer also
        *       monitors the health of its registered targets and ensures that it routes traffic only to
        *       healthy targets. You configure your load balancer to accept incoming traffic by specifying one
        *       or more listeners, which are configured with a protocol and port number for connections from
        *       clients to the load balancer. You configure a target group with a protocol and port number for
        *       connections from the load balancer to the targets, and with health check settings to be used
        *       when checking the health status of the targets.</p>
        *
        *          <p>Elastic Load Balancing supports the following types of load balancers: Application Load
        *       Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This
        *       reference covers the following load balancer types:</p>
        *          <ul>
        *             <li>
        *                <p>Application Load Balancer - Operates at the application layer (layer 7) and supports
        *           HTTP and HTTPS.</p>
        *             </li>
        *             <li>
        *                <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP,
        *           TLS, and UDP.</p>
        *             </li>
        *             <li>
        *                <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p>
        *             </li>
        *          </ul>
        *
        *          <p>For more information, see the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/">Elastic Load Balancing User
        *       Guide</a>.</p>
        *
        *
        *
        *
        *
        *
        *
        *          <p>All Elastic Load Balancing operations are idempotent, which means that they complete at
        *       most one time. If you repeat an operation, it succeeds.</p>
        */
    export class ElasticLoadBalancingV2Client extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ElasticLoadBalancingV2ClientResolvedConfig> {
            /**
                * The resolved configuration of ElasticLoadBalancingV2Client class. This is resolved and normalized from the {@link ElasticLoadBalancingV2ClientConfig | constructor configuration interface}.
                */
            readonly config: ElasticLoadBalancingV2ClientResolvedConfig;
            constructor(configuration: ElasticLoadBalancingV2ClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ElasticLoadBalancingV2ServiceException as __BaseException } from "@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/ElasticLoadBalancingV2ServiceException";
    export enum AuthenticateCognitoActionConditionalBehaviorEnum {
            ALLOW = "allow",
            AUTHENTICATE = "authenticate",
            DENY = "deny"
    }
    /**
        * <p>Request parameters to use when integrating with Amazon Cognito to authenticate
        *       users.</p>
        */
    export interface AuthenticateCognitoActionConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Cognito user pool.</p>
                */
            UserPoolArn: string | undefined;
            /**
                * <p>The ID of the Amazon Cognito user pool client.</p>
                */
            UserPoolClientId: string | undefined;
            /**
                * <p>The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.</p>
                */
            UserPoolDomain: string | undefined;
            /**
                * <p>The name of the cookie used to maintain session information. The default is
                *       AWSELBAuthSessionCookie.</p>
                */
            SessionCookieName?: string;
            /**
                * <p>The set of user claims to be requested from the IdP. The default is
                *       <code>openid</code>.</p>
                *          <p>To verify which scope values your IdP supports and how to separate multiple values, see
                *       the documentation for your IdP.</p>
                */
            Scope?: string;
            /**
                * <p>The maximum duration of the authentication session, in seconds. The default is 604800
                *       seconds (7 days).</p>
                */
            SessionTimeout?: number;
            /**
                * <p>The query parameters (up to 10) to include in the redirect request to the authorization
                *       endpoint.</p>
                */
            AuthenticationRequestExtraParams?: Record<string, string>;
            /**
                * <p>The behavior if the user is not authenticated. The following are possible values:</p>
                *          <ul>
                *             <li>
                *                <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p>
                *             </li>
                *             <li>
                *                <p>allow<code></code> - Allow the request to be forwarded to the target.</p>
                *             </li>
                *             <li>
                *                <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is
                *           the default value.</p>
                *             </li>
                *          </ul>
                */
            OnUnauthenticatedRequest?: AuthenticateCognitoActionConditionalBehaviorEnum | string;
    }
    export namespace AuthenticateCognitoActionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthenticateCognitoActionConfig) => any;
    }
    export enum AuthenticateOidcActionConditionalBehaviorEnum {
            ALLOW = "allow",
            AUTHENTICATE = "authenticate",
            DENY = "deny"
    }
    /**
        * <p>Request parameters when using an identity provider (IdP) that is compliant with OpenID
        *       Connect (OIDC) to authenticate users.</p>
        */
    export interface AuthenticateOidcActionConfig {
            /**
                * <p>The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS
                *       protocol, the domain, and the path.</p>
                */
            Issuer: string | undefined;
            /**
                * <p>The authorization endpoint of the IdP. This must be a full URL, including the HTTPS
                *       protocol, the domain, and the path.</p>
                */
            AuthorizationEndpoint: string | undefined;
            /**
                * <p>The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the
                *       domain, and the path.</p>
                */
            TokenEndpoint: string | undefined;
            /**
                * <p>The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol,
                *       the domain, and the path.</p>
                */
            UserInfoEndpoint: string | undefined;
            /**
                * <p>The OAuth 2.0 client identifier.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you
                *       are modifying a rule, you can omit this parameter if you set
                *         <code>UseExistingClientSecret</code> to true.</p>
                */
            ClientSecret?: string;
            /**
                * <p>The name of the cookie used to maintain session information. The default is
                *       AWSELBAuthSessionCookie.</p>
                */
            SessionCookieName?: string;
            /**
                * <p>The set of user claims to be requested from the IdP. The default is
                *       <code>openid</code>.</p>
                *          <p>To verify which scope values your IdP supports and how to separate multiple values, see
                *       the documentation for your IdP.</p>
                */
            Scope?: string;
            /**
                * <p>The maximum duration of the authentication session, in seconds. The default is 604800
                *       seconds (7 days).</p>
                */
            SessionTimeout?: number;
            /**
                * <p>The query parameters (up to 10) to include in the redirect request to the authorization
                *       endpoint.</p>
                */
            AuthenticationRequestExtraParams?: Record<string, string>;
            /**
                * <p>The behavior if the user is not authenticated. The following are possible values:</p>
                *          <ul>
                *             <li>
                *                <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p>
                *             </li>
                *             <li>
                *                <p>allow<code></code> - Allow the request to be forwarded to the target.</p>
                *             </li>
                *             <li>
                *                <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is
                *           the default value.</p>
                *             </li>
                *          </ul>
                */
            OnUnauthenticatedRequest?: AuthenticateOidcActionConditionalBehaviorEnum | string;
            /**
                * <p>Indicates whether to use the existing client secret when modifying a rule. If you are
                *       creating a rule, you can omit this parameter or set it to false.</p>
                */
            UseExistingClientSecret?: boolean;
    }
    export namespace AuthenticateOidcActionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthenticateOidcActionConfig) => any;
    }
    /**
        * <p>Information about an action that returns a custom HTTP response.</p>
        */
    export interface FixedResponseActionConfig {
            /**
                * <p>The message.</p>
                */
            MessageBody?: string;
            /**
                * <p>The HTTP response code (2XX, 4XX, or 5XX).</p>
                */
            StatusCode: string | undefined;
            /**
                * <p>The content type.</p>
                *          <p>Valid Values: text/plain | text/css | text/html | application/javascript |
                *       application/json</p>
                */
            ContentType?: string;
    }
    export namespace FixedResponseActionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FixedResponseActionConfig) => any;
    }
    /**
        * <p>Information about how traffic will be distributed between multiple target groups in a
        *       forward rule.</p>
        */
    export interface TargetGroupTuple {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn?: string;
            /**
                * <p>The weight. The range is 0 to 999.</p>
                */
            Weight?: number;
    }
    export namespace TargetGroupTuple {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetGroupTuple) => any;
    }
    /**
        * <p>Information about the target group stickiness for a rule.</p>
        */
    export interface TargetGroupStickinessConfig {
            /**
                * <p>Indicates whether target group stickiness is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The time period, in seconds, during which requests from a client should be routed to the
                *       same target group. The range is 1-604800 seconds (7 days).</p>
                */
            DurationSeconds?: number;
    }
    export namespace TargetGroupStickinessConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetGroupStickinessConfig) => any;
    }
    /**
        * <p>Information about a forward action.</p>
        */
    export interface ForwardActionConfig {
            /**
                * <p>One or more target groups. For Network Load Balancers, you can specify a single target
                *       group.</p>
                */
            TargetGroups?: TargetGroupTuple[];
            /**
                * <p>The target group stickiness for the rule.</p>
                */
            TargetGroupStickinessConfig?: TargetGroupStickinessConfig;
    }
    export namespace ForwardActionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ForwardActionConfig) => any;
    }
    export enum RedirectActionStatusCodeEnum {
            HTTP_301 = "HTTP_301",
            HTTP_302 = "HTTP_302"
    }
    /**
        * <p>Information about a redirect action.</p>
        *          <p>A URI consists of the following components: protocol://hostname:port/path?query. You must
        *       modify at least one of the following components to avoid a redirect loop: protocol, hostname,
        *       port, or path. Any components that you do not modify retain their original values.</p>
        *          <p>You can reuse URI components using the following reserved keywords:</p>
        *          <ul>
        *             <li>
        *                <p>#{protocol}</p>
        *             </li>
        *             <li>
        *                <p>#{host}</p>
        *             </li>
        *             <li>
        *                <p>#{port}</p>
        *             </li>
        *             <li>
        *                <p>#{path} (the leading "/" is removed)</p>
        *             </li>
        *             <li>
        *                <p>#{query}</p>
        *             </li>
        *          </ul>
        *          <p>For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}",
        *       or the query to "#{query}&value=xyz".</p>
        */
    export interface RedirectActionConfig {
            /**
                * <p>The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP,
                *       HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.</p>
                */
            Protocol?: string;
            /**
                * <p>The port. You can specify a value from 1 to 65535 or #{port}.</p>
                */
            Port?: string;
            /**
                * <p>The hostname. This component is not percent-encoded. The hostname can contain
                *       #{host}.</p>
                */
            Host?: string;
            /**
                * <p>The absolute path, starting with the leading "/". This component is not percent-encoded.
                *       The path can contain #{host}, #{path}, and #{port}.</p>
                */
            Path?: string;
            /**
                * <p>The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include
                *       the leading "?", as it is automatically added. You can specify any of the reserved
                *       keywords.</p>
                */
            Query?: string;
            /**
                * <p>The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP
                *       302).</p>
                */
            StatusCode: RedirectActionStatusCodeEnum | string | undefined;
    }
    export namespace RedirectActionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedirectActionConfig) => any;
    }
    export enum ActionTypeEnum {
            AUTHENTICATE_COGNITO = "authenticate-cognito",
            AUTHENTICATE_OIDC = "authenticate-oidc",
            FIXED_RESPONSE = "fixed-response",
            FORWARD = "forward",
            REDIRECT = "redirect"
    }
    /**
        * <p>Information about an action.</p>
        *          <p>Each rule must include exactly one of the following types of actions:
        *       <code>forward</code>, <code>fixed-response</code>, or <code>redirect</code>, and it must be
        *       the last action to be performed.</p>
        */
    export interface Action {
            /**
                * <p>The type of action.</p>
                */
            Type: ActionTypeEnum | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the target group. Specify only when <code>Type</code> is
                *         <code>forward</code> and you want to route to a single target group. To route to one or more
                *       target groups, use <code>ForwardConfig</code> instead.</p>
                */
            TargetGroupArn?: string;
            /**
                * <p>[HTTPS listeners] Information about an identity provider that is compliant with OpenID
                *       Connect (OIDC). Specify only when <code>Type</code> is <code>authenticate-oidc</code>.</p>
                */
            AuthenticateOidcConfig?: AuthenticateOidcActionConfig;
            /**
                * <p>[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only
                *       when <code>Type</code> is <code>authenticate-cognito</code>.</p>
                */
            AuthenticateCognitoConfig?: AuthenticateCognitoActionConfig;
            /**
                * <p>The order for the action. This value is required for rules with multiple actions. The
                *       action with the lowest value for order is performed first.</p>
                */
            Order?: number;
            /**
                * <p>[Application Load Balancer] Information for creating a redirect action. Specify only when
                *         <code>Type</code> is <code>redirect</code>.</p>
                */
            RedirectConfig?: RedirectActionConfig;
            /**
                * <p>[Application Load Balancer] Information for creating an action that returns a custom HTTP
                *       response. Specify only when <code>Type</code> is <code>fixed-response</code>.</p>
                */
            FixedResponseConfig?: FixedResponseActionConfig;
            /**
                * <p>Information for creating an action that distributes requests among one or more target
                *       groups. For Network Load Balancers, you can specify a single target group. Specify only when
                *         <code>Type</code> is <code>forward</code>. If you specify both <code>ForwardConfig</code>
                *       and <code>TargetGroupArn</code>, you can specify only one target group using
                *         <code>ForwardConfig</code> and it must be the same target group specified in
                *         <code>TargetGroupArn</code>.</p>
                */
            ForwardConfig?: ForwardActionConfig;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    /**
        * <p>Information about an SSL server certificate.</p>
        */
    export interface Certificate {
            /**
                * <p>The Amazon Resource Name (ARN) of the certificate.</p>
                */
            CertificateArn?: string;
            /**
                * <p>Indicates whether the certificate is the default certificate. Do not set this value when
                *       specifying a certificate as an input. This value is not included in the output when describing
                *       a listener, but is included when describing listener certificates.</p>
                */
            IsDefault?: boolean;
    }
    export namespace Certificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Certificate) => any;
    }
    export interface AddListenerCertificatesInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the listener.</p>
                */
            ListenerArn: string | undefined;
            /**
                * <p>The certificate to add. You can specify one certificate per call. Set
                *         <code>CertificateArn</code> to the certificate ARN but do not set
                *       <code>IsDefault</code>.</p>
                */
            Certificates: Certificate[] | undefined;
    }
    export namespace AddListenerCertificatesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddListenerCertificatesInput) => any;
    }
    export interface AddListenerCertificatesOutput {
            /**
                * <p>Information about the certificates in the certificate list.</p>
                */
            Certificates?: Certificate[];
    }
    export namespace AddListenerCertificatesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddListenerCertificatesOutput) => any;
    }
    /**
        * <p>The specified certificate does not exist.</p>
        */
    export class CertificateNotFoundException extends __BaseException {
            readonly name: "CertificateNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CertificateNotFoundException, __BaseException>);
    }
    /**
        * <p>The specified listener does not exist.</p>
        */
    export class ListenerNotFoundException extends __BaseException {
            readonly name: "ListenerNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ListenerNotFoundException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of certificates per load balancer.</p>
        */
    export class TooManyCertificatesException extends __BaseException {
            readonly name: "TooManyCertificatesException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyCertificatesException, __BaseException>);
    }
    /**
        * <p>Information about a tag.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value of the tag.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface AddTagsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArns: string[] | undefined;
            /**
                * <p>The tags.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace AddTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsInput) => any;
    }
    export interface AddTagsOutput {
    }
    export namespace AddTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsOutput) => any;
    }
    /**
        * <p>A tag key was specified more than once.</p>
        */
    export class DuplicateTagKeysException extends __BaseException {
            readonly name: "DuplicateTagKeysException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateTagKeysException, __BaseException>);
    }
    /**
        * <p>The specified load balancer does not exist.</p>
        */
    export class LoadBalancerNotFoundException extends __BaseException {
            readonly name: "LoadBalancerNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LoadBalancerNotFoundException, __BaseException>);
    }
    /**
        * <p>The specified rule does not exist.</p>
        */
    export class RuleNotFoundException extends __BaseException {
            readonly name: "RuleNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RuleNotFoundException, __BaseException>);
    }
    /**
        * <p>The specified target group does not exist.</p>
        */
    export class TargetGroupNotFoundException extends __BaseException {
            readonly name: "TargetGroupNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TargetGroupNotFoundException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of tags per load balancer.</p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    /**
        * <p>The specified allocation ID does not exist.</p>
        */
    export class AllocationIdNotFoundException extends __BaseException {
            readonly name: "AllocationIdNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AllocationIdNotFoundException, __BaseException>);
    }
    /**
        * <p>The specified ALPN policy is not supported.</p>
        */
    export class ALPNPolicyNotSupportedException extends __BaseException {
            readonly name: "ALPNPolicyNotSupportedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ALPNPolicyNotSupportedException, __BaseException>);
    }
    /**
        * <p>Information about a static IP address for a load balancer.</p>
        */
    export interface LoadBalancerAddress {
            /**
                * <p>The static IP address.</p>
                */
            IpAddress?: string;
            /**
                * <p>[Network Load Balancers] The allocation ID of the Elastic IP address for an
                *       internal-facing load balancer.</p>
                */
            AllocationId?: string;
            /**
                * <p>[Network Load Balancers] The private IPv4 address for an internal load balancer.</p>
                */
            PrivateIPv4Address?: string;
            /**
                * <p>[Network Load Balancers] The IPv6 address.</p>
                */
            IPv6Address?: string;
    }
    export namespace LoadBalancerAddress {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerAddress) => any;
    }
    /**
        * <p>Information about an Availability Zone.</p>
        */
    export interface AvailabilityZone {
            /**
                * <p>The name of the Availability Zone.</p>
                */
            ZoneName?: string;
            /**
                * <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
                */
            SubnetId?: string;
            /**
                * <p>[Application Load Balancers on Outposts] The ID of the Outpost.</p>
                */
            OutpostId?: string;
            /**
                * <p>[Network Load Balancers] If you need static IP addresses for your load balancer, you can
                *       specify one Elastic IP address per Availability Zone when you create an internal-facing load
                *       balancer. For internal load balancers, you can specify a private IP address from the IPv4
                *       range of the subnet.</p>
                */
            LoadBalancerAddresses?: LoadBalancerAddress[];
    }
    export namespace AvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailabilityZone) => any;
    }
    /**
        * <p>The specified Availability Zone is not supported.</p>
        */
    export class AvailabilityZoneNotSupportedException extends __BaseException {
            readonly name: "AvailabilityZoneNotSupportedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AvailabilityZoneNotSupportedException, __BaseException>);
    }
    /**
        * <p>Information about a cipher used in a policy.</p>
        */
    export interface Cipher {
            /**
                * <p>The name of the cipher.</p>
                */
            Name?: string;
            /**
                * <p>The priority of the cipher.</p>
                */
            Priority?: number;
    }
    export namespace Cipher {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Cipher) => any;
    }
    export type ProtocolEnum = "GENEVE" | "HTTP" | "HTTPS" | "TCP" | "TCP_UDP" | "TLS" | "UDP";
    export interface CreateListenerInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn: string | undefined;
            /**
                * <p>The protocol for connections from clients to the load balancer. For Application Load
                *       Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the
                *       supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP
                *       protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load
                *       Balancer.</p>
                */
            Protocol?: ProtocolEnum | string;
            /**
                * <p>The port on which the load balancer is listening. You cannot specify a port for a Gateway
                *       Load Balancer.</p>
                */
            Port?: number;
            /**
                * <p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are
                *       supported.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> and
                *         <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
                */
            SslPolicy?: string;
            /**
                * <p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide
                *       exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set
                *         <code>IsDefault</code>.</p>
                */
            Certificates?: Certificate[];
            /**
                * <p>The actions for the default rule.</p>
                */
            DefaultActions: Action[] | undefined;
            /**
                * <p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You
                *       can specify one policy name. The following are the possible values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>HTTP1Only</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HTTP2Only</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HTTP2Optional</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HTTP2Preferred</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>None</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN
                *         policies</a> in the <i>Network Load Balancers Guide</i>.</p>
                */
            AlpnPolicy?: string[];
            /**
                * <p>The tags to assign to the listener.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateListenerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateListenerInput) => any;
    }
    /**
        * <p>Information about a listener.</p>
        */
    export interface Listener {
            /**
                * <p>The Amazon Resource Name (ARN) of the listener.</p>
                */
            ListenerArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn?: string;
            /**
                * <p>The port on which the load balancer is listening.</p>
                */
            Port?: number;
            /**
                * <p>The protocol for connections from clients to the load balancer.</p>
                */
            Protocol?: ProtocolEnum | string;
            /**
                * <p>[HTTPS or TLS listener] The default certificate for the listener.</p>
                */
            Certificates?: Certificate[];
            /**
                * <p>[HTTPS or TLS listener] The security policy that defines which protocols and ciphers are
                *       supported.</p>
                */
            SslPolicy?: string;
            /**
                * <p>The default actions for the listener.</p>
                */
            DefaultActions?: Action[];
            /**
                * <p>[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN)
                *       policy.</p>
                */
            AlpnPolicy?: string[];
    }
    export namespace Listener {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Listener) => any;
    }
    export interface CreateListenerOutput {
            /**
                * <p>Information about the listener.</p>
                */
            Listeners?: Listener[];
    }
    export namespace CreateListenerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateListenerOutput) => any;
    }
    /**
        * <p>A listener with the specified port already exists.</p>
        */
    export class DuplicateListenerException extends __BaseException {
            readonly name: "DuplicateListenerException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateListenerException, __BaseException>);
    }
    /**
        * <p>The specified configuration is not valid with this protocol.</p>
        */
    export class IncompatibleProtocolsException extends __BaseException {
            readonly name: "IncompatibleProtocolsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IncompatibleProtocolsException, __BaseException>);
    }
    /**
        * <p>The requested configuration is not valid.</p>
        */
    export class InvalidConfigurationRequestException extends __BaseException {
            readonly name: "InvalidConfigurationRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidConfigurationRequestException, __BaseException>);
    }
    /**
        * <p>The requested action is not valid.</p>
        */
    export class InvalidLoadBalancerActionException extends __BaseException {
            readonly name: "InvalidLoadBalancerActionException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidLoadBalancerActionException, __BaseException>);
    }
    /**
        * <p>The specified SSL policy does not exist.</p>
        */
    export class SSLPolicyNotFoundException extends __BaseException {
            readonly name: "SSLPolicyNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SSLPolicyNotFoundException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of load balancers per target group.</p>
        */
    export class TargetGroupAssociationLimitException extends __BaseException {
            readonly name: "TargetGroupAssociationLimitException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TargetGroupAssociationLimitException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of actions per rule.</p>
        */
    export class TooManyActionsException extends __BaseException {
            readonly name: "TooManyActionsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyActionsException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of listeners per load balancer.</p>
        */
    export class TooManyListenersException extends __BaseException {
            readonly name: "TooManyListenersException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyListenersException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of times a target can be registered with a load
        *       balancer.</p>
        */
    export class TooManyRegistrationsForTargetIdException extends __BaseException {
            readonly name: "TooManyRegistrationsForTargetIdException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRegistrationsForTargetIdException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of targets.</p>
        */
    export class TooManyTargetsException extends __BaseException {
            readonly name: "TooManyTargetsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTargetsException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of unique target groups per load balancer across
        *       all listeners. If a target group is used by multiple actions for a load balancer, it is
        *       counted as only one use.</p>
        */
    export class TooManyUniqueTargetGroupsPerLoadBalancerException extends __BaseException {
            readonly name: "TooManyUniqueTargetGroupsPerLoadBalancerException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyUniqueTargetGroupsPerLoadBalancerException, __BaseException>);
    }
    /**
        * <p>The specified protocol is not supported.</p>
        */
    export class UnsupportedProtocolException extends __BaseException {
            readonly name: "UnsupportedProtocolException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedProtocolException, __BaseException>);
    }
    export enum IpAddressType {
            DUALSTACK = "dualstack",
            IPV4 = "ipv4"
    }
    export enum LoadBalancerSchemeEnum {
            INTERNAL = "internal",
            INTERNET_FACING = "internet-facing"
    }
    /**
        * <p>Information about a subnet mapping.</p>
        */
    export interface SubnetMapping {
            /**
                * <p>The ID of the subnet.</p>
                */
            SubnetId?: string;
            /**
                * <p>[Network Load Balancers] The allocation ID of the Elastic IP address for an
                *       internet-facing load balancer.</p>
                */
            AllocationId?: string;
            /**
                * <p>[Network Load Balancers] The private IPv4 address for an internal load balancer.</p>
                */
            PrivateIPv4Address?: string;
            /**
                * <p>[Network Load Balancers] The IPv6 address.</p>
                */
            IPv6Address?: string;
    }
    export namespace SubnetMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubnetMapping) => any;
    }
    export enum LoadBalancerTypeEnum {
            APPLICATION = "application",
            GATEWAY = "gateway",
            NETWORK = "network"
    }
    export interface CreateLoadBalancerInput {
            /**
                * <p>The name of the load balancer.</p>
                *          <p>This name must be unique per region per account, can have a maximum of 32 characters, must
                *       contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must
                *       not begin with "internal-".</p>
                */
            Name: string | undefined;
            /**
                * <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You
                *       must specify either subnets or subnet mappings, but not both. To specify an Elastic IP
                *       address, specify subnet mappings instead of subnets.</p>
                *          <p>[Application Load Balancers] You must specify subnets from at least two Availability
                *       Zones.</p>
                *          <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>
                *          <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local
                *       Zones.</p>
                *          <p>[Network Load Balancers] You can specify subnets from one or more Availability
                *       Zones.</p>
                *          <p>[Gateway Load Balancers] You can specify subnets from one or more Availability
                *       Zones.</p>
                */
            Subnets?: string[];
            /**
                * <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You
                *       must specify either subnets or subnet mappings, but not both.</p>
                *          <p>[Application Load Balancers] You must specify subnets from at least two Availability
                *       Zones. You cannot specify Elastic IP addresses for your subnets.</p>
                *          <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>
                *          <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local
                *       Zones.</p>
                *          <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. You
                *       can specify one Elastic IP address per subnet if you need static IP addresses for your
                *       internet-facing load balancer. For internal load balancers, you can specify one private IP
                *       address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you
                *       can specify one IPv6 address per subnet.</p>
                *          <p>[Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You
                *       cannot specify Elastic IP addresses for your subnets.</p>
                */
            SubnetMappings?: SubnetMapping[];
            /**
                * <p>[Application Load Balancers] The IDs of the security groups for the load balancer.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an
                *       Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes.
                *       Therefore, Internet-facing load balancers can route requests from clients over the
                *       internet.</p>
                *          <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an
                *       internal load balancer is publicly resolvable to the private IP addresses of the nodes.
                *       Therefore, internal load balancers can route requests only from clients with access to the VPC
                *       for the load balancer.</p>
                *          <p>The default is an Internet-facing load balancer.</p>
                *          <p>You cannot specify a scheme for a Gateway Load Balancer.</p>
                */
            Scheme?: LoadBalancerSchemeEnum | string;
            /**
                * <p>The tags to assign to the load balancer.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The type of load balancer. The default is <code>application</code>.</p>
                */
            Type?: LoadBalancerTypeEnum | string;
            /**
                * <p>The type of IP addresses used by the subnets for your load balancer. The possible values
                *       are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6
                *       addresses). </p>
                */
            IpAddressType?: IpAddressType | string;
            /**
                * <p>[Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP
                *       pool).</p>
                */
            CustomerOwnedIpv4Pool?: string;
    }
    export namespace CreateLoadBalancerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerInput) => any;
    }
    export enum LoadBalancerStateEnum {
            ACTIVE = "active",
            ACTIVE_IMPAIRED = "active_impaired",
            FAILED = "failed",
            PROVISIONING = "provisioning"
    }
    /**
        * <p>Information about the state of the load balancer.</p>
        */
    export interface LoadBalancerState {
            /**
                * <p>The state code. The initial state of the load balancer is <code>provisioning</code>. After
                *       the load balancer is fully set up and ready to route traffic, its state is
                *       <code>active</code>. If load balancer is routing traffic but does not have the resources it
                *       needs to scale, its state is<code>active_impaired</code>. If the load balancer could not be
                *       set up, its state is <code>failed</code>.</p>
                */
            Code?: LoadBalancerStateEnum | string;
            /**
                * <p>A description of the state.</p>
                */
            Reason?: string;
    }
    export namespace LoadBalancerState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerState) => any;
    }
    /**
        * <p>Information about a load balancer.</p>
        */
    export interface LoadBalancer {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn?: string;
            /**
                * <p>The public DNS name of the load balancer.</p>
                */
            DNSName?: string;
            /**
                * <p>The ID of the Amazon Route 53 hosted zone associated with the load balancer.</p>
                */
            CanonicalHostedZoneId?: string;
            /**
                * <p>The date and time the load balancer was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an
                *       Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes.
                *       Therefore, Internet-facing load balancers can route requests from clients over the
                *       internet.</p>
                *          <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an
                *       internal load balancer is publicly resolvable to the private IP addresses of the nodes.
                *       Therefore, internal load balancers can route requests only from clients with access to the VPC
                *       for the load balancer.</p>
                */
            Scheme?: LoadBalancerSchemeEnum | string;
            /**
                * <p>The ID of the VPC for the load balancer.</p>
                */
            VpcId?: string;
            /**
                * <p>The state of the load balancer.</p>
                */
            State?: LoadBalancerState;
            /**
                * <p>The type of load balancer.</p>
                */
            Type?: LoadBalancerTypeEnum | string;
            /**
                * <p>The subnets for the load balancer.</p>
                */
            AvailabilityZones?: AvailabilityZone[];
            /**
                * <p>The IDs of the security groups for the load balancer.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The type of IP addresses used by the subnets for your load balancer. The possible values
                *       are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6
                *       addresses).</p>
                */
            IpAddressType?: IpAddressType | string;
            /**
                * <p>[Application Load Balancers on Outposts] The ID of the customer-owned address pool.</p>
                */
            CustomerOwnedIpv4Pool?: string;
    }
    export namespace LoadBalancer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancer) => any;
    }
    export interface CreateLoadBalancerOutput {
            /**
                * <p>Information about the load balancer.</p>
                */
            LoadBalancers?: LoadBalancer[];
    }
    export namespace CreateLoadBalancerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerOutput) => any;
    }
    /**
        * <p>A load balancer with the specified name already exists.</p>
        */
    export class DuplicateLoadBalancerNameException extends __BaseException {
            readonly name: "DuplicateLoadBalancerNameException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateLoadBalancerNameException, __BaseException>);
    }
    /**
        * <p>The requested scheme is not valid.</p>
        */
    export class InvalidSchemeException extends __BaseException {
            readonly name: "InvalidSchemeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSchemeException, __BaseException>);
    }
    /**
        * <p>The specified security group does not exist.</p>
        */
    export class InvalidSecurityGroupException extends __BaseException {
            readonly name: "InvalidSecurityGroupException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSecurityGroupException, __BaseException>);
    }
    /**
        * <p>The specified subnet is out of available addresses.</p>
        */
    export class InvalidSubnetException extends __BaseException {
            readonly name: "InvalidSubnetException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSubnetException, __BaseException>);
    }
    /**
        * <p>This operation is not allowed.</p>
        */
    export class OperationNotPermittedException extends __BaseException {
            readonly name: "OperationNotPermittedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationNotPermittedException, __BaseException>);
    }
    /**
        * <p>A specified resource is in use.</p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    /**
        * <p>The specified subnet does not exist.</p>
        */
    export class SubnetNotFoundException extends __BaseException {
            readonly name: "SubnetNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubnetNotFoundException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of load balancers for your Amazon Web Services
        *       account.</p>
        */
    export class TooManyLoadBalancersException extends __BaseException {
            readonly name: "TooManyLoadBalancersException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyLoadBalancersException, __BaseException>);
    }
    /**
        * <p>Information about a host header condition.</p>
        */
    export interface HostHeaderConditionConfig {
            /**
                * <p>One or more host names. The maximum size of each name is 128 characters. The comparison is
                *       case insensitive. The following wildcard characters are supported: * (matches 0 or more
                *       characters) and ? (matches exactly 1 character).</p>
                *          <p>If you specify multiple strings, the condition is satisfied if one of the strings matches
                *       the host name.</p>
                */
            Values?: string[];
    }
    export namespace HostHeaderConditionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HostHeaderConditionConfig) => any;
    }
    /**
        * <p>Information about an HTTP header condition.</p>
        *          <p>There is a set of standard HTTP header fields. You can also define custom HTTP header
        *       fields.</p>
        */
    export interface HttpHeaderConditionConfig {
            /**
                * <p>The name of the HTTP header field. The maximum size is 40 characters. The header name is
                *       case insensitive. The allowed characters are specified by RFC 7230. Wildcards are not
                *       supported.</p>
                *          <p>You can't use an HTTP header condition to specify the host header. Use <a>HostHeaderConditionConfig</a> to specify a host header condition.</p>
                */
            HttpHeaderName?: string;
            /**
                * <p>One or more strings to compare against the value of the HTTP header. The maximum size of
                *       each string is 128 characters. The comparison strings are case insensitive. The following
                *       wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1
                *       character).</p>
                *          <p>If the same header appears multiple times in the request, we search them in order until a
                *       match is found.</p>
                *          <p>If you specify multiple strings, the condition is satisfied if one of the strings matches
                *       the value of the HTTP header. To require that all of the strings are a match, create one
                *       condition per string.</p>
                */
            Values?: string[];
    }
    export namespace HttpHeaderConditionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HttpHeaderConditionConfig) => any;
    }
    /**
        * <p>Information about an HTTP method condition.</p>
        *          <p>HTTP defines a set of request methods, also referred to as HTTP verbs. For more
        *       information, see the <a href="https://www.iana.org/assignments/http-methods/http-methods.xhtml">HTTP Method
        *         Registry</a>. You can also define custom HTTP methods.</p>
        */
    export interface HttpRequestMethodConditionConfig {
            /**
                * <p>The name of the request method. The maximum size is 40 characters. The allowed characters
                *       are A-Z, hyphen (-), and underscore (_). The comparison is case sensitive. Wildcards are not
                *       supported; therefore, the method name must be an exact match.</p>
                *          <p>If you specify multiple strings, the condition is satisfied if one of the strings matches
                *       the HTTP request method. We recommend that you route GET and HEAD requests in the same way,
                *       because the response to a HEAD request may be cached.</p>
                */
            Values?: string[];
    }
    export namespace HttpRequestMethodConditionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HttpRequestMethodConditionConfig) => any;
    }
    /**
        * <p>Information about a path pattern condition.</p>
        */
    export interface PathPatternConditionConfig {
            /**
                * <p>One or more path patterns to compare against the request URL. The maximum size of each
                *       string is 128 characters. The comparison is case sensitive. The following wildcard characters
                *       are supported: * (matches 0 or more characters) and ? (matches exactly 1 character).</p>
                *          <p>If you specify multiple strings, the condition is satisfied if one of them matches the
                *       request URL. The path pattern is compared only to the path of the URL, not to its query
                *       string. To compare against the query string, use <a>QueryStringConditionConfig</a>.</p>
                */
            Values?: string[];
    }
    export namespace PathPatternConditionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PathPatternConditionConfig) => any;
    }
    /**
        * <p>Information about a key/value pair.</p>
        */
    export interface QueryStringKeyValuePair {
            /**
                * <p>The key. You can omit the key.</p>
                */
            Key?: string;
            /**
                * <p>The value.</p>
                */
            Value?: string;
    }
    export namespace QueryStringKeyValuePair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryStringKeyValuePair) => any;
    }
    /**
        * <p>Information about a query string condition.</p>
        *          <p>The query string component of a URI starts after the first '?' character and is terminated
        *       by either a '#' character or the end of the URI. A typical query string contains key/value
        *       pairs separated by '&' characters. The allowed characters are specified by RFC 3986. Any
        *       character can be percentage encoded.</p>
        */
    export interface QueryStringConditionConfig {
            /**
                * <p>One or more key/value pairs or values to find in the query string. The maximum size of
                *       each string is 128 characters. The comparison is case insensitive. The following wildcard
                *       characters are supported: * (matches 0 or more characters) and ? (matches exactly 1
                *       character). To search for a literal '*' or '?' character in a query string, you must escape
                *       these characters in <code>Values</code> using a '\' character.</p>
                *          <p>If you specify multiple key/value pairs or values, the condition is satisfied if one of
                *       them is found in the query string.</p>
                */
            Values?: QueryStringKeyValuePair[];
    }
    export namespace QueryStringConditionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryStringConditionConfig) => any;
    }
    /**
        * <p>Information about a source IP condition.</p>
        *          <p>You can use this condition to route based on the IP address of the source that connects to
        *       the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the
        *       IP address of the client.</p>
        */
    export interface SourceIpConditionConfig {
            /**
                * <p>One or more source IP addresses, in CIDR format. You can use both IPv4 and IPv6 addresses.
                *       Wildcards are not supported.</p>
                *          <p>If you specify multiple addresses, the condition is satisfied if the source IP address of
                *       the request matches one of the CIDR blocks. This condition is not satisfied by the addresses
                *       in the X-Forwarded-For header. To search for addresses in the X-Forwarded-For header, use
                *         <a>HttpHeaderConditionConfig</a>.</p>
                */
            Values?: string[];
    }
    export namespace SourceIpConditionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceIpConditionConfig) => any;
    }
    /**
        * <p>Information about a condition for a rule.</p>
        *          <p>Each rule can optionally include up to one of each of the following conditions:
        *         <code>http-request-method</code>, <code>host-header</code>, <code>path-pattern</code>, and
        *         <code>source-ip</code>. Each rule can also optionally include one or more of each of the
        *       following conditions: <code>http-header</code> and <code>query-string</code>. Note that the
        *       value for a condition cannot be empty.</p>
        */
    export interface RuleCondition {
            /**
                * <p>The field in the HTTP request. The following are the possible values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>http-header</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>http-request-method</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>host-header</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>path-pattern</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>query-string</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>source-ip</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Field?: string;
            /**
                * <p>The condition value. Specify only when <code>Field</code> is <code>host-header</code> or
                *         <code>path-pattern</code>. Alternatively, to specify multiple host names or multiple path
                *       patterns, use <code>HostHeaderConfig</code> or <code>PathPatternConfig</code>.</p>
                *          <p>If <code>Field</code> is <code>host-header</code> and you are not using
                *         <code>HostHeaderConfig</code>, you can specify a single host name (for example,
                *       my.example.com) in <code>Values</code>. A host name is case insensitive, can be up to 128
                *       characters in length, and can contain any of the following characters.</p>
                *          <ul>
                *             <li>
                *                <p>A-Z, a-z, 0-9</p>
                *             </li>
                *             <li>
                *                <p>- .</p>
                *             </li>
                *             <li>
                *                <p>* (matches 0 or more characters)</p>
                *             </li>
                *             <li>
                *                <p>? (matches exactly 1 character)</p>
                *             </li>
                *          </ul>
                *          <p>If <code>Field</code> is <code>path-pattern</code> and you are not using
                *         <code>PathPatternConfig</code>, you can specify a single path pattern (for example, /img/*)
                *       in <code>Values</code>. A path pattern is case-sensitive, can be up to 128 characters in
                *       length, and can contain any of the following characters.</p>
                *          <ul>
                *             <li>
                *                <p>A-Z, a-z, 0-9</p>
                *             </li>
                *             <li>
                *                <p>_ - . $ / ~ " ' @ : +</p>
                *             </li>
                *             <li>
                *                <p>& (using &amp;)</p>
                *             </li>
                *             <li>
                *                <p>* (matches 0 or more characters)</p>
                *             </li>
                *             <li>
                *                <p>? (matches exactly 1 character)</p>
                *             </li>
                *          </ul>
                */
            Values?: string[];
            /**
                * <p>Information for a host header condition. Specify only when <code>Field</code> is
                *         <code>host-header</code>.</p>
                */
            HostHeaderConfig?: HostHeaderConditionConfig;
            /**
                * <p>Information for a path pattern condition. Specify only when <code>Field</code> is
                *         <code>path-pattern</code>.</p>
                */
            PathPatternConfig?: PathPatternConditionConfig;
            /**
                * <p>Information for an HTTP header condition. Specify only when <code>Field</code> is
                *         <code>http-header</code>.</p>
                */
            HttpHeaderConfig?: HttpHeaderConditionConfig;
            /**
                * <p>Information for a query string condition. Specify only when <code>Field</code> is
                *         <code>query-string</code>.</p>
                */
            QueryStringConfig?: QueryStringConditionConfig;
            /**
                * <p>Information for an HTTP method condition. Specify only when <code>Field</code> is
                *         <code>http-request-method</code>.</p>
                */
            HttpRequestMethodConfig?: HttpRequestMethodConditionConfig;
            /**
                * <p>Information for a source IP condition. Specify only when <code>Field</code> is
                *         <code>source-ip</code>.</p>
                */
            SourceIpConfig?: SourceIpConditionConfig;
    }
    export namespace RuleCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleCondition) => any;
    }
    export interface CreateRuleInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the listener.</p>
                */
            ListenerArn: string | undefined;
            /**
                * <p>The conditions.</p>
                */
            Conditions: RuleCondition[] | undefined;
            /**
                * <p>The rule priority. A listener can't have multiple rules with the same priority.</p>
                */
            Priority: number | undefined;
            /**
                * <p>The actions.</p>
                */
            Actions: Action[] | undefined;
            /**
                * <p>The tags to assign to the rule.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateRuleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleInput) => any;
    }
    /**
        * <p>Information about a rule.</p>
        */
    export interface Rule {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule.</p>
                */
            RuleArn?: string;
            /**
                * <p>The priority.</p>
                */
            Priority?: string;
            /**
                * <p>The conditions. Each rule can include zero or one of the following conditions:
                *         <code>http-request-method</code>, <code>host-header</code>, <code>path-pattern</code>, and
                *         <code>source-ip</code>, and zero or more of the following conditions:
                *         <code>http-header</code> and <code>query-string</code>.</p>
                */
            Conditions?: RuleCondition[];
            /**
                * <p>The actions. Each rule must include exactly one of the following types of actions:
                *         <code>forward</code>, <code>redirect</code>, or <code>fixed-response</code>, and it must be
                *       the last action to be performed.</p>
                */
            Actions?: Action[];
            /**
                * <p>Indicates whether this is the default rule.</p>
                */
            IsDefault?: boolean;
    }
    export namespace Rule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    export interface CreateRuleOutput {
            /**
                * <p>Information about the rule.</p>
                */
            Rules?: Rule[];
    }
    export namespace CreateRuleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleOutput) => any;
    }
    /**
        * <p>The specified priority is in use.</p>
        */
    export class PriorityInUseException extends __BaseException {
            readonly name: "PriorityInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PriorityInUseException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of rules per load balancer.</p>
        */
    export class TooManyRulesException extends __BaseException {
            readonly name: "TooManyRulesException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRulesException, __BaseException>);
    }
    /**
        * <p>You've reached the limit on the number of target groups for your Amazon Web Services
        *       account.</p>
        */
    export class TooManyTargetGroupsException extends __BaseException {
            readonly name: "TooManyTargetGroupsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTargetGroupsException, __BaseException>);
    }
    export enum TargetGroupIpAddressTypeEnum {
            IPV4 = "ipv4",
            IPV6 = "ipv6"
    }
    /**
        * <p>The codes to use when checking for a successful response from a target. If the protocol
        *       version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes. </p>
        */
    export interface Matcher {
            /**
                * <p>For Application Load Balancers, you can specify values between 200 and 499, and the
                *       default value is 200. You can specify multiple values (for example, "200,202") or a range of
                *       values (for example, "200-299").</p>
                *          <p>For Network Load Balancers and Gateway Load Balancers, this must be "200–399".</p>
                *          <p>Note that when using shorthand syntax, some values such as commas need to be
                *       escaped.</p>
                */
            HttpCode?: string;
            /**
                * <p>You can specify values between 0 and 99. You can specify multiple values (for example,
                *       "0,1") or a range of values (for example, "0-5"). The default value is 12.</p>
                */
            GrpcCode?: string;
    }
    export namespace Matcher {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Matcher) => any;
    }
    export enum TargetTypeEnum {
            ALB = "alb",
            INSTANCE = "instance",
            IP = "ip",
            LAMBDA = "lambda"
    }
    export interface CreateTargetGroupInput {
            /**
                * <p>The name of the target group.</p>
                *          <p>This name must be unique per region per account, can have a maximum of 32 characters, must
                *       contain only alphanumeric characters or hyphens, and must not begin or end with a
                *       hyphen.</p>
                */
            Name: string | undefined;
            /**
                * <p>The protocol to use for routing traffic to the targets. For Application Load Balancers,
                *       the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported
                *       protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is
                *       GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a
                *       Lambda function, this parameter does not apply.</p>
                */
            Protocol?: ProtocolEnum | string;
            /**
                * <p>[HTTP/HTTPS protocol] The protocol version. Specify <code>GRPC</code> to send requests to
                *       targets using gRPC. Specify <code>HTTP2</code> to send requests to targets using HTTP/2. The
                *       default is <code>HTTP1</code>, which sends requests to targets using HTTP/1.1.</p>
                */
            ProtocolVersion?: string;
            /**
                * <p>The port on which the targets receive traffic. This port is used unless you specify a port
                *       override when registering the target. If the target is a Lambda function, this parameter does
                *       not apply. If the protocol is GENEVE, the supported port is 6081.</p>
                */
            Port?: number;
            /**
                * <p>The identifier of the virtual private cloud (VPC). If the target is a Lambda function,
                *       this parameter does not apply. Otherwise, this parameter is required.</p>
                */
            VpcId?: string;
            /**
                * <p>The protocol the load balancer uses when performing health checks on targets. For
                *       Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load
                *       Balancers, the default is TCP. The TCP protocol is not supported for health checks if the
                *       protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are
                *       not supported for health checks.</p>
                */
            HealthCheckProtocol?: ProtocolEnum | string;
            /**
                * <p>The port the load balancer uses when performing health checks on targets. If the protocol
                *       is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is <code>traffic-port</code>, which is
                *       the port on which each target receives traffic from the load balancer. If the protocol is
                *       GENEVE, the default is port 80.</p>
                */
            HealthCheckPort?: string;
            /**
                * <p>Indicates whether health checks are enabled. If the target type is <code>lambda</code>,
                *       health checks are disabled by default but can be enabled. If the target type is
                *         <code>instance</code>, <code>ip</code>, or <code>alb</code>, health checks are always
                *       enabled and cannot be disabled.</p>
                */
            HealthCheckEnabled?: boolean;
            /**
                * <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
                *          <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
                *          <p>[GRPC protocol version] The path of a custom health check method with the format
                *       /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
                */
            HealthCheckPath?: string;
            /**
                * <p>The approximate amount of time, in seconds, between health checks of an individual target.
                *       If the target group protocol is HTTP or HTTPS, the default is 30 seconds.
                *       If the target group protocol is TCP, TLS, UDP, or TCP_UDP, the supported values are 10 and 30
                *       seconds and the default is 30 seconds.
                *       If the target group protocol is GENEVE, the default is 10 seconds.
                *       If the target type is <code>lambda</code>, the default is 35 seconds.</p>
                */
            HealthCheckIntervalSeconds?: number;
            /**
                * <p>The amount of time, in seconds, during which no response from a target means a failed
                *       health check. For target groups with a protocol of HTTP, HTTPS, or GENEVE, the default is 5
                *       seconds. For target groups with a protocol of TCP or TLS, this value must be 6 seconds for
                *       HTTP health checks and 10 seconds for TCP and HTTPS health checks. If the target type is
                *         <code>lambda</code>, the default is 30 seconds.</p>
                */
            HealthCheckTimeoutSeconds?: number;
            /**
                * <p>The number of consecutive health checks successes required before considering an unhealthy
                *       target healthy. For target groups with a protocol of HTTP or HTTPS, the default is 5. For
                *       target groups with a protocol of TCP, TLS, or GENEVE, the default is 3. If the target type is
                *         <code>lambda</code>, the default is 5.</p>
                */
            HealthyThresholdCount?: number;
            /**
                * <p>The number of consecutive health check failures required before considering a target
                *       unhealthy. If the target group protocol is HTTP or HTTPS, the default is 2. If the target
                *       group protocol is TCP or TLS, this value must be the same as the healthy threshold count. If
                *       the target group protocol is GENEVE, the default is 3. If the target type is
                *         <code>lambda</code>, the default is 2.</p>
                */
            UnhealthyThresholdCount?: number;
            /**
                * <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful
                *       response from a target.</p>
                */
            Matcher?: Matcher;
            /**
                * <p>The type of target that you must specify when registering targets with this target group.
                *       You can't specify targets for a target group using more than one target type.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>instance</code> - Register targets by instance ID. This is the default
                *           value.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ip</code> - Register targets by IP address. You can specify IP addresses from
                *           the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range
                *           (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10).
                *           You can't specify publicly routable IP addresses.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>lambda</code> - Register a single Lambda function as a target.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>alb</code> - Register a single Application Load Balancer as a target.</p>
                *             </li>
                *          </ul>
                */
            TargetType?: TargetTypeEnum | string;
            /**
                * <p>The tags to assign to the target group.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The type of IP address used for this target group. The possible values are
                *         <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified,
                *       the IP address type defaults to <code>ipv4</code>.</p>
                */
            IpAddressType?: TargetGroupIpAddressTypeEnum | string;
    }
    export namespace CreateTargetGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTargetGroupInput) => any;
    }
    /**
        * <p>Information about a target group.</p>
        */
    export interface TargetGroup {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn?: string;
            /**
                * <p>The name of the target group.</p>
                */
            TargetGroupName?: string;
            /**
                * <p>The protocol to use for routing traffic to the targets.</p>
                */
            Protocol?: ProtocolEnum | string;
            /**
                * <p>The port on which the targets are listening. Not used if the target is a Lambda
                *       function.</p>
                */
            Port?: number;
            /**
                * <p>The ID of the VPC for the targets.</p>
                */
            VpcId?: string;
            /**
                * <p>The protocol to use to connect with the target. The GENEVE, TLS, UDP, and TCP_UDP
                *       protocols are not supported for health checks.</p>
                */
            HealthCheckProtocol?: ProtocolEnum | string;
            /**
                * <p>The port to use to connect with the target.</p>
                */
            HealthCheckPort?: string;
            /**
                * <p>Indicates whether health checks are enabled.</p>
                */
            HealthCheckEnabled?: boolean;
            /**
                * <p>The approximate amount of time, in seconds, between health checks of an individual
                *       target.</p>
                */
            HealthCheckIntervalSeconds?: number;
            /**
                * <p>The amount of time, in seconds, during which no response means a failed health
                *       check.</p>
                */
            HealthCheckTimeoutSeconds?: number;
            /**
                * <p>The number of consecutive health checks successes required before considering an unhealthy
                *       target healthy.</p>
                */
            HealthyThresholdCount?: number;
            /**
                * <p>The number of consecutive health check failures required before considering the target
                *       unhealthy.</p>
                */
            UnhealthyThresholdCount?: number;
            /**
                * <p>The destination for health checks on the targets.</p>
                */
            HealthCheckPath?: string;
            /**
                * <p>The HTTP or gRPC codes to use when checking for a successful response from a
                *       target.</p>
                */
            Matcher?: Matcher;
            /**
                * <p>The Amazon Resource Names (ARN) of the load balancers that route traffic to this target
                *       group.</p>
                */
            LoadBalancerArns?: string[];
            /**
                * <p>The type of target that you must specify when registering targets with this target group.
                *       The possible values are <code>instance</code> (register targets by instance ID),
                *         <code>ip</code> (register targets by IP address), <code>lambda</code> (register a single
                *       Lambda function as a target), or <code>alb</code> (register a single Application Load Balancer
                *       as a target).</p>
                */
            TargetType?: TargetTypeEnum | string;
            /**
                * <p>[HTTP/HTTPS protocol] The protocol version. The possible values are <code>GRPC</code>,
                *         <code>HTTP1</code>, and <code>HTTP2</code>.</p>
                */
            ProtocolVersion?: string;
            /**
                * <p>The type of IP address used for this target group. The possible values are
                *         <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified,
                *       the IP address type defaults to <code>ipv4</code>.</p>
                */
            IpAddressType?: TargetGroupIpAddressTypeEnum | string;
    }
    export namespace TargetGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetGroup) => any;
    }
    export interface CreateTargetGroupOutput {
            /**
                * <p>Information about the target group.</p>
                */
            TargetGroups?: TargetGroup[];
    }
    export namespace CreateTargetGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTargetGroupOutput) => any;
    }
    /**
        * <p>A target group with the specified name already exists.</p>
        */
    export class DuplicateTargetGroupNameException extends __BaseException {
            readonly name: "DuplicateTargetGroupNameException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateTargetGroupNameException, __BaseException>);
    }
    export interface DeleteListenerInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the listener.</p>
                */
            ListenerArn: string | undefined;
    }
    export namespace DeleteListenerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteListenerInput) => any;
    }
    export interface DeleteListenerOutput {
    }
    export namespace DeleteListenerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteListenerOutput) => any;
    }
    export interface DeleteLoadBalancerInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn: string | undefined;
    }
    export namespace DeleteLoadBalancerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerInput) => any;
    }
    export interface DeleteLoadBalancerOutput {
    }
    export namespace DeleteLoadBalancerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerOutput) => any;
    }
    export interface DeleteRuleInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule.</p>
                */
            RuleArn: string | undefined;
    }
    export namespace DeleteRuleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleInput) => any;
    }
    export interface DeleteRuleOutput {
    }
    export namespace DeleteRuleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleOutput) => any;
    }
    export interface DeleteTargetGroupInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn: string | undefined;
    }
    export namespace DeleteTargetGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTargetGroupInput) => any;
    }
    export interface DeleteTargetGroupOutput {
    }
    export namespace DeleteTargetGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTargetGroupOutput) => any;
    }
    /**
        * <p>Information about a target.</p>
        */
    export interface TargetDescription {
            /**
                * <p>The ID of the target. If the target type of the target group is <code>instance</code>,
                *       specify an instance ID. If the target type is <code>ip</code>, specify an IP address. If the
                *       target type is <code>lambda</code>, specify the ARN of the Lambda function. If the target type
                *       is <code>alb</code>, specify the ARN of the Application Load Balancer target. </p>
                */
            Id: string | undefined;
            /**
                * <p>The port on which the target is listening. If the target group protocol is GENEVE, the
                *       supported port is 6081. If the target type is <code>alb</code>, the targeted Application Load
                *       Balancer must have at least one listener whose port matches the target group port. Not used if
                *       the target is a Lambda function.</p>
                */
            Port?: number;
            /**
                * <p>An Availability Zone or <code>all</code>. This determines whether the target receives
                *       traffic from the load balancer nodes in the specified Availability Zone or from all enabled
                *       Availability Zones for the load balancer.</p>
                *          <p>This parameter is not supported if the target type of the target group is
                *         <code>instance</code> or <code>alb</code>.</p>
                *          <p>If the target type is <code>ip</code> and the IP address is in a subnet of the VPC for the
                *       target group, the Availability Zone is automatically detected and this parameter is optional.
                *       If the IP address is outside the VPC, this parameter is required.</p>
                *          <p>With an Application Load Balancer, if the target type is <code>ip</code> and the IP
                *       address is outside the VPC for the target group, the only supported value is
                *       <code>all</code>.</p>
                *          <p>If the target type is <code>lambda</code>, this parameter is optional and the only
                *       supported value is <code>all</code>.</p>
                */
            AvailabilityZone?: string;
    }
    export namespace TargetDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetDescription) => any;
    }
    export interface DeregisterTargetsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn: string | undefined;
            /**
                * <p>The targets. If you specified a port override when you registered a target, you must
                *       specify both the target ID and the port when you deregister it.</p>
                */
            Targets: TargetDescription[] | undefined;
    }
    export namespace DeregisterTargetsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTargetsInput) => any;
    }
    export interface DeregisterTargetsOutput {
    }
    export namespace DeregisterTargetsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTargetsOutput) => any;
    }
    /**
        * <p>The specified target does not exist, is not in the same VPC as the target group, or has an
        *       unsupported instance type.</p>
        */
    export class InvalidTargetException extends __BaseException {
            readonly name: "InvalidTargetException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTargetException, __BaseException>);
    }
    export interface DescribeAccountLimitsInput {
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *       call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeAccountLimitsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountLimitsInput) => any;
    }
    /**
        * <p>Information about an Elastic Load Balancing resource limit for your Amazon Web Services
        *       account.</p>
        */
    export interface Limit {
            /**
                * <p>The name of the limit. The possible values are:</p>
                *          <ul>
                *             <li>
                *                <p>application-load-balancers</p>
                *             </li>
                *             <li>
                *                <p>condition-values-per-alb-rule</p>
                *             </li>
                *             <li>
                *                <p>condition-wildcards-per-alb-rule</p>
                *             </li>
                *             <li>
                *                <p>gateway-load-balancers</p>
                *             </li>
                *             <li>
                *                <p>gateway-load-balancers-per-vpc</p>
                *             </li>
                *             <li>
                *                <p>geneve-target-groups</p>
                *             </li>
                *             <li>
                *                <p>listeners-per-application-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>listeners-per-network-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>network-load-balancers</p>
                *             </li>
                *             <li>
                *                <p>rules-per-application-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>target-groups</p>
                *             </li>
                *             <li>
                *                <p>target-groups-per-action-on-application-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>target-groups-per-action-on-network-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>target-groups-per-application-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>targets-per-application-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>targets-per-availability-zone-per-gateway-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>targets-per-availability-zone-per-network-load-balancer</p>
                *             </li>
                *             <li>
                *                <p>targets-per-network-load-balancer</p>
                *             </li>
                *          </ul>
                */
            Name?: string;
            /**
                * <p>The maximum value of the limit.</p>
                */
            Max?: string;
    }
    export namespace Limit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Limit) => any;
    }
    export interface DescribeAccountLimitsOutput {
            /**
                * <p>Information about the limits.</p>
                */
            Limits?: Limit[];
            /**
                * <p>If there are additional results, this is the marker for the next set of results.
                *       Otherwise, this is null.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeAccountLimitsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountLimitsOutput) => any;
    }
    export interface DescribeListenerCertificatesInput {
            /**
                * <p>The Amazon Resource Names (ARN) of the listener.</p>
                */
            ListenerArn: string | undefined;
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *       call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeListenerCertificatesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeListenerCertificatesInput) => any;
    }
    export interface DescribeListenerCertificatesOutput {
            /**
                * <p>Information about the certificates.</p>
                */
            Certificates?: Certificate[];
            /**
                * <p>If there are additional results, this is the marker for the next set of results.
                *       Otherwise, this is null.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeListenerCertificatesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeListenerCertificatesOutput) => any;
    }
    export interface DescribeListenersInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn?: string;
            /**
                * <p>The Amazon Resource Names (ARN) of the listeners.</p>
                */
            ListenerArns?: string[];
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *       call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeListenersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeListenersInput) => any;
    }
    export interface DescribeListenersOutput {
            /**
                * <p>Information about the listeners.</p>
                */
            Listeners?: Listener[];
            /**
                * <p>If there are additional results, this is the marker for the next set of results.
                *       Otherwise, this is null.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeListenersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeListenersOutput) => any;
    }
    export interface DescribeLoadBalancerAttributesInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn: string | undefined;
    }
    export namespace DescribeLoadBalancerAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerAttributesInput) => any;
    }
    /**
        * <p>Information about a load balancer attribute.</p>
        */
    export interface LoadBalancerAttribute {
            /**
                * <p>The name of the attribute.</p>
                *
                *          <p>The following attribute is supported by all load balancers:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>deletion_protection.enabled</code> - Indicates whether deletion protection is
                *           enabled. The value is <code>true</code> or <code>false</code>. The default is
                *             <code>false</code>.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following attributes are supported by both Application Load Balancers and Network Load
                *       Balancers:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>access_logs.s3.enabled</code> - Indicates whether access logs are enabled. The
                *           value is <code>true</code> or <code>false</code>. The default is
                *           <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>access_logs.s3.bucket</code> - The name of the S3 bucket for the access logs.
                *           This attribute is required if access logs are enabled. The bucket must exist in the same
                *           region as the load balancer and have a bucket policy that grants Elastic Load Balancing
                *           permissions to write to the bucket.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>access_logs.s3.prefix</code> - The prefix for the location in the S3 bucket for the
                *           access logs.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ipv6.deny_all_igw_traffic</code> - Blocks internet gateway (IGW) access to the
                *           load balancer. It is set to <code>false</code> for internet-facing load balancers and
                *             <code>true</code> for internal load balancers, preventing unintended access to your
                *           internal load balancer through an internet gateway.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following attributes are supported by only Application Load Balancers:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>idle_timeout.timeout_seconds</code> - The idle timeout value, in seconds. The
                *           valid range is 1-4000 seconds. The default is 60 seconds.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>routing.http.desync_mitigation_mode</code> - Determines how the load balancer
                *           handles requests that might pose a security risk to your application. The possible values
                *           are <code>monitor</code>, <code>defensive</code>, and <code>strictest</code>. The default
                *           is <code>defensive</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>routing.http.drop_invalid_header_fields.enabled</code> - Indicates whether HTTP
                *           headers with invalid header fields are removed by the load balancer (<code>true</code>) or
                *           routed to targets (<code>false</code>). The default is <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>routing.http.preserve_host_header.enabled</code> - Indicates whether the
                *           Application Load Balancer should preserve the <code>Host</code> header in the HTTP request
                *           and send it to the target without any change. The possible values are <code>true</code>
                *           and <code>false</code>. The default is <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>routing.http.x_amzn_tls_version_and_cipher_suite.enabled</code> - Indicates
                *           whether the two headers (<code>x-amzn-tls-version</code> and
                *             <code>x-amzn-tls-cipher-suite</code>), which contain information about the negotiated
                *           TLS version and cipher suite, are added to the client request before sending it to the
                *           target. The <code>x-amzn-tls-version</code> header has information about the TLS protocol
                *           version negotiated with the client, and the <code>x-amzn-tls-cipher-suite</code> header
                *           has information about the cipher suite negotiated with the client. Both headers are in
                *           OpenSSL format. The possible values for the attribute are <code>true</code> and
                *             <code>false</code>. The default is <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>routing.http.xff_client_port.enabled</code> - Indicates whether the
                *             <code>X-Forwarded-For</code> header should preserve the source port that the client used
                *           to connect to the load balancer. The possible values are <code>true</code> and
                *             <code>false</code>. The default is <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>routing.http.xff_header_processing.mode</code> - Enables you to modify,
                *           preserve, or remove the <code>X-Forwarded-For</code> header in the HTTP request before the
                *           Application Load Balancer sends the request to the target. The possible values are
                *             <code>append</code>, <code>preserve</code>, and <code>remove</code>. The default is
                *             <code>append</code>.</p>
                *                <ul>
                *                   <li>
                *                      <p>If the value is <code>append</code>, the Application Load Balancer adds the client
                *               IP address (of the last hop) to the <code>X-Forwarded-For</code> header in the HTTP
                *               request before it sends it to targets.</p>
                *                   </li>
                *                   <li>
                *                      <p>If the value is <code>preserve</code> the Application Load Balancer preserves the
                *                 <code>X-Forwarded-For</code> header in the HTTP request, and sends it to targets
                *               without any change.</p>
                *                   </li>
                *                   <li>
                *                      <p>If the value is <code>remove</code>, the Application Load Balancer removes the
                *                 <code>X-Forwarded-For</code> header in the HTTP request before it sends it to
                *               targets.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>routing.http2.enabled</code> - Indicates whether HTTP/2 is enabled. The possible
                *           values are <code>true</code> and <code>false</code>. The default is <code>true</code>.
                *           Elastic Load Balancing requires that message header names contain only alphanumeric
                *           characters and hyphens.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>waf.fail_open.enabled</code> - Indicates whether to allow a WAF-enabled load
                *           balancer to route requests to targets if it is unable to forward the request to Amazon Web Services WAF. The possible values are <code>true</code> and <code>false</code>. The
                *           default is <code>false</code>.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following attribute is supported by Network Load Balancers and Gateway Load
                *       Balancers:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>load_balancing.cross_zone.enabled</code> - Indicates whether cross-zone load
                *           balancing is enabled. The possible values are <code>true</code> and <code>false</code>.
                *           The default is <code>false</code>.</p>
                *             </li>
                *          </ul>
                */
            Key?: string;
            /**
                * <p>The value of the attribute.</p>
                */
            Value?: string;
    }
    export namespace LoadBalancerAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerAttribute) => any;
    }
    export interface DescribeLoadBalancerAttributesOutput {
            /**
                * <p>Information about the load balancer attributes.</p>
                */
            Attributes?: LoadBalancerAttribute[];
    }
    export namespace DescribeLoadBalancerAttributesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerAttributesOutput) => any;
    }
    export interface DescribeLoadBalancersInput {
            /**
                * <p>The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load
                *       balancers in a single call.</p>
                */
            LoadBalancerArns?: string[];
            /**
                * <p>The names of the load balancers.</p>
                */
            Names?: string[];
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *       call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeLoadBalancersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancersInput) => any;
    }
    export interface DescribeLoadBalancersOutput {
            /**
                * <p>Information about the load balancers.</p>
                */
            LoadBalancers?: LoadBalancer[];
            /**
                * <p>If there are additional results, this is the marker for the next set of results.
                *       Otherwise, this is null.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeLoadBalancersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancersOutput) => any;
    }
    export interface DescribeRulesInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the listener.</p>
                */
            ListenerArn?: string;
            /**
                * <p>The Amazon Resource Names (ARN) of the rules.</p>
                */
            RuleArns?: string[];
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *       call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeRulesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRulesInput) => any;
    }
    export interface DescribeRulesOutput {
            /**
                * <p>Information about the rules.</p>
                */
            Rules?: Rule[];
            /**
                * <p>If there are additional results, this is the marker for the next set of results.
                *       Otherwise, this is null.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeRulesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRulesOutput) => any;
    }
    export interface DescribeSSLPoliciesInput {
            /**
                * <p>The names of the policies.</p>
                */
            Names?: string[];
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *       call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
            /**
                * <p> The type of load balancer. The default lists the SSL policies for all load
                *       balancers.</p>
                */
            LoadBalancerType?: LoadBalancerTypeEnum | string;
    }
    export namespace DescribeSSLPoliciesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSSLPoliciesInput) => any;
    }
    /**
        * <p>Information about a policy used for SSL negotiation.</p>
        */
    export interface SslPolicy {
            /**
                * <p>The protocols.</p>
                */
            SslProtocols?: string[];
            /**
                * <p>The ciphers.</p>
                */
            Ciphers?: Cipher[];
            /**
                * <p>The name of the policy.</p>
                */
            Name?: string;
            /**
                * <p> The supported load balancers. </p>
                */
            SupportedLoadBalancerTypes?: string[];
    }
    export namespace SslPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SslPolicy) => any;
    }
    export interface DescribeSSLPoliciesOutput {
            /**
                * <p>Information about the security policies.</p>
                */
            SslPolicies?: SslPolicy[];
            /**
                * <p>If there are additional results, this is the marker for the next set of results.
                *       Otherwise, this is null.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeSSLPoliciesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSSLPoliciesOutput) => any;
    }
    export interface DescribeTagsInput {
            /**
                * <p>The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a
                *       single call.</p>
                */
            ResourceArns: string[] | undefined;
    }
    export namespace DescribeTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTagsInput) => any;
    }
    /**
        * <p>The tags associated with a resource.</p>
        */
    export interface TagDescription {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>Information about the tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace TagDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagDescription) => any;
    }
    export interface DescribeTagsOutput {
            /**
                * <p>Information about the tags.</p>
                */
            TagDescriptions?: TagDescription[];
    }
    export namespace DescribeTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTagsOutput) => any;
    }
    export interface DescribeTargetGroupAttributesInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn: string | undefined;
    }
    export namespace DescribeTargetGroupAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetGroupAttributesInput) => any;
    }
    /**
        * <p>Information about a target group attribute.</p>
        */
    export interface TargetGroupAttribute {
            /**
                * <p>The name of the attribute.</p>
                *
                *          <p>The following attribute is supported by all load balancers:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>deregistration_delay.timeout_seconds</code> - The amount of time, in seconds,
                *           for Elastic Load Balancing to wait before changing the state of a deregistering target
                *           from <code>draining</code> to <code>unused</code>. The range is 0-3600 seconds. The
                *           default value is 300 seconds. If the target is a Lambda function, this attribute is not
                *           supported.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following attributes are supported by both Application Load Balancers and Network Load
                *       Balancers:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>stickiness.enabled</code> - Indicates whether sticky sessions are enabled. The
                *           value is <code>true</code> or <code>false</code>. The default is
                *           <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>stickiness.type</code> - The type of sticky sessions. The possible values are
                *             <code>lb_cookie</code> and <code>app_cookie</code> for Application Load Balancers or
                *             <code>source_ip</code> for Network Load Balancers.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following attributes are supported only if the load balancer is an Application Load
                *       Balancer and the target is an instance or an IP address:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>load_balancing.algorithm.type</code> - The load balancing algorithm determines
                *           how the load balancer selects targets when routing requests. The value is
                *             <code>round_robin</code> or <code>least_outstanding_requests</code>. The default is
                *             <code>round_robin</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>slow_start.duration_seconds</code> - The time period, in seconds, during which a
                *           newly registered target receives an increasing share of the traffic to the target group.
                *           After this time period ends, the target receives its full share of traffic. The range is
                *           30-900 seconds (15 minutes). The default is 0 seconds (disabled).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>stickiness.app_cookie.cookie_name</code> - Indicates the name of the
                *           application-based cookie. Names that start with the following prefixes are not allowed:
                *             <code>AWSALB</code>, <code>AWSALBAPP</code>, and <code>AWSALBTG</code>; they're reserved
                *           for use by the load balancer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>stickiness.app_cookie.duration_seconds</code> - The time period, in seconds,
                *           during which requests from a client should be routed to the same target. After this time
                *           period expires, the application-based cookie is considered stale. The range is 1 second to
                *           1 week (604800 seconds). The default value is 1 day (86400 seconds).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>stickiness.lb_cookie.duration_seconds</code> - The time period, in seconds,
                *           during which requests from a client should be routed to the same target. After this time
                *           period expires, the load balancer-generated cookie is considered stale. The range is 1
                *           second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following attribute is supported only if the load balancer is an Application Load
                *       Balancer and the target is a Lambda function:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>lambda.multi_value_headers.enabled</code> - Indicates whether the request and
                *           response headers that are exchanged between the load balancer and the Lambda function
                *           include arrays of values or strings. The value is <code>true</code> or <code>false</code>.
                *           The default is <code>false</code>. If the value is <code>false</code> and the request
                *           contains a duplicate header field name or query parameter key, the load balancer uses the
                *           last value sent by the client.</p>
                *             </li>
                *          </ul>
                *
                *          <p>The following attributes are supported only by Network Load Balancers:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>deregistration_delay.connection_termination.enabled</code> - Indicates whether
                *           the load balancer terminates connections at the end of the deregistration timeout. The
                *           value is <code>true</code> or <code>false</code>. The default is
                *           <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>preserve_client_ip.enabled</code> - Indicates whether client IP preservation is
                *           enabled. The value is <code>true</code> or <code>false</code>. The default is disabled if
                *           the target group type is IP address and the target group protocol is TCP or TLS.
                *           Otherwise, the default is enabled. Client IP preservation cannot be disabled for UDP and
                *           TCP_UDP target groups.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>proxy_protocol_v2.enabled</code> - Indicates whether Proxy Protocol version 2 is
                *           enabled. The value is <code>true</code> or <code>false</code>. The default is
                *             <code>false</code>.</p>
                *             </li>
                *          </ul>
                */
            Key?: string;
            /**
                * <p>The value of the attribute.</p>
                */
            Value?: string;
    }
    export namespace TargetGroupAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetGroupAttribute) => any;
    }
    export interface DescribeTargetGroupAttributesOutput {
            /**
                * <p>Information about the target group attributes</p>
                */
            Attributes?: TargetGroupAttribute[];
    }
    export namespace DescribeTargetGroupAttributesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetGroupAttributesOutput) => any;
    }
    export interface DescribeTargetGroupsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn?: string;
            /**
                * <p>The Amazon Resource Names (ARN) of the target groups.</p>
                */
            TargetGroupArns?: string[];
            /**
                * <p>The names of the target groups.</p>
                */
            Names?: string[];
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *       call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeTargetGroupsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetGroupsInput) => any;
    }
    export interface DescribeTargetGroupsOutput {
            /**
                * <p>Information about the target groups.</p>
                */
            TargetGroups?: TargetGroup[];
            /**
                * <p>If there are additional results, this is the marker for the next set of results.
                *       Otherwise, this is null.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeTargetGroupsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetGroupsOutput) => any;
    }
    export interface DescribeTargetHealthInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn: string | undefined;
            /**
                * <p>The targets.</p>
                */
            Targets?: TargetDescription[];
    }
    export namespace DescribeTargetHealthInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetHealthInput) => any;
    }
    export enum TargetHealthReasonEnum {
            DEREGISTRATION_IN_PROGRESS = "Target.DeregistrationInProgress",
            FAILED_HEALTH_CHECKS = "Target.FailedHealthChecks",
            HEALTH_CHECK_DISABLED = "Target.HealthCheckDisabled",
            INITIAL_HEALTH_CHECKING = "Elb.InitialHealthChecking",
            INTERNAL_ERROR = "Elb.InternalError",
            INVALID_STATE = "Target.InvalidState",
            IP_UNUSABLE = "Target.IpUnusable",
            NOT_IN_USE = "Target.NotInUse",
            NOT_REGISTERED = "Target.NotRegistered",
            REGISTRATION_IN_PROGRESS = "Elb.RegistrationInProgress",
            RESPONSE_CODE_MISMATCH = "Target.ResponseCodeMismatch",
            TIMEOUT = "Target.Timeout"
    }
    export enum TargetHealthStateEnum {
            DRAINING = "draining",
            HEALTHY = "healthy",
            INITIAL = "initial",
            UNAVAILABLE = "unavailable",
            UNHEALTHY = "unhealthy",
            UNUSED = "unused"
    }
    /**
        * <p>Information about the current health of a target.</p>
        */
    export interface TargetHealth {
            /**
                * <p>The state of the target.</p>
                */
            State?: TargetHealthStateEnum | string;
            /**
                * <p>The reason code.</p>
                *
                *          <p>If the target state is <code>healthy</code>, a reason code is not provided.</p>
                *
                *          <p>If the target state is <code>initial</code>, the reason code can be one of the following
                *       values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Elb.RegistrationInProgress</code> - The target is in the process of being registered
                *           with the load balancer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Elb.InitialHealthChecking</code> - The load balancer is still sending the target the
                *           minimum number of health checks required to determine its health status.</p>
                *             </li>
                *          </ul>
                *
                *          <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following
                *       values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Target.ResponseCodeMismatch</code> - The health checks did not return an
                *           expected HTTP code. Applies only to Application Load Balancers and Gateway Load
                *           Balancers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Target.Timeout</code> - The health check requests timed out. Applies only to
                *           Application Load Balancers and Gateway Load Balancers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Target.FailedHealthChecks</code> - The load balancer received an error while
                *           establishing a connection to the target or the target response was malformed.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Elb.InternalError</code> - The health checks failed due to an internal error.
                *           Applies only to Application Load Balancers.</p>
                *             </li>
                *          </ul>
                *
                *          <p>If the target state is <code>unused</code>, the reason code can be one of the following
                *       values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Target.NotRegistered</code> - The target is not registered with the target
                *           group.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Target.NotInUse</code> - The target group is not used by any load balancer or
                *           the target is in an Availability Zone that is not enabled for its load balancer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Target.InvalidState</code> - The target is in the stopped or terminated
                *           state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Target.IpUnusable</code> - The target IP address is reserved for use by a load
                *           balancer.</p>
                *             </li>
                *          </ul>
                *
                *          <p>If the target state is <code>draining</code>, the reason code can be the following
                *       value:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Target.DeregistrationInProgress</code> - The target is in the process of being
                *           deregistered and the deregistration delay period has not expired.</p>
                *             </li>
                *          </ul>
                *
                *          <p>If the target state is <code>unavailable</code>, the reason code can be the following
                *       value:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Target.HealthCheckDisabled</code> - Health checks are disabled for the target
                *           group. Applies only to Application Load Balancers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Elb.InternalError</code> - Target health is unavailable due to an internal
                *           error. Applies only to Network Load Balancers.</p>
                *             </li>
                *          </ul>
                */
            Reason?: TargetHealthReasonEnum | string;
            /**
                * <p>A description of the target health that provides additional details. If the state is
                *         <code>healthy</code>, a description is not provided.</p>
                */
            Description?: string;
    }
    export namespace TargetHealth {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetHealth) => any;
    }
    /**
        * <p>Information about the health of a target.</p>
        */
    export interface TargetHealthDescription {
            /**
                * <p>The description of the target.</p>
                */
            Target?: TargetDescription;
            /**
                * <p>The port to use to connect with the target.</p>
                */
            HealthCheckPort?: string;
            /**
                * <p>The health information for the target.</p>
                */
            TargetHealth?: TargetHealth;
    }
    export namespace TargetHealthDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetHealthDescription) => any;
    }
    export interface DescribeTargetHealthOutput {
            /**
                * <p>Information about the health of the targets.</p>
                */
            TargetHealthDescriptions?: TargetHealthDescription[];
    }
    export namespace DescribeTargetHealthOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetHealthOutput) => any;
    }
    /**
        * <p>The health of the specified targets could not be retrieved due to an internal
        *       error.</p>
        */
    export class HealthUnavailableException extends __BaseException {
            readonly name: "HealthUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<HealthUnavailableException, __BaseException>);
    }
    export interface ModifyListenerInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the listener.</p>
                */
            ListenerArn: string | undefined;
            /**
                * <p>The port for connections from clients to the load balancer. You cannot specify a port for
                *       a Gateway Load Balancer.</p>
                */
            Port?: number;
            /**
                * <p>The protocol for connections from clients to the load balancer. Application Load Balancers
                *       support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and
                *       TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is
                *       enabled. You cannot specify a protocol for a Gateway Load Balancer.</p>
                */
            Protocol?: ProtocolEnum | string;
            /**
                * <p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are
                *       supported.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> or
                *         <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
                */
            SslPolicy?: string;
            /**
                * <p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide
                *       exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set
                *         <code>IsDefault</code>.</p>
                */
            Certificates?: Certificate[];
            /**
                * <p>The actions for the default rule.</p>
                */
            DefaultActions?: Action[];
            /**
                * <p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You
                *       can specify one policy name. The following are the possible values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>HTTP1Only</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HTTP2Only</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HTTP2Optional</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HTTP2Preferred</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>None</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN
                *         policies</a> in the <i>Network Load Balancers Guide</i>.</p>
                */
            AlpnPolicy?: string[];
    }
    export namespace ModifyListenerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyListenerInput) => any;
    }
    export interface ModifyListenerOutput {
            /**
                * <p>Information about the modified listener.</p>
                */
            Listeners?: Listener[];
    }
    export namespace ModifyListenerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyListenerOutput) => any;
    }
    export interface ModifyLoadBalancerAttributesInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn: string | undefined;
            /**
                * <p>The load balancer attributes.</p>
                */
            Attributes: LoadBalancerAttribute[] | undefined;
    }
    export namespace ModifyLoadBalancerAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyLoadBalancerAttributesInput) => any;
    }
    export interface ModifyLoadBalancerAttributesOutput {
            /**
                * <p>Information about the load balancer attributes.</p>
                */
            Attributes?: LoadBalancerAttribute[];
    }
    export namespace ModifyLoadBalancerAttributesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyLoadBalancerAttributesOutput) => any;
    }
    export interface ModifyRuleInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule.</p>
                */
            RuleArn: string | undefined;
            /**
                * <p>The conditions.</p>
                */
            Conditions?: RuleCondition[];
            /**
                * <p>The actions.</p>
                */
            Actions?: Action[];
    }
    export namespace ModifyRuleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyRuleInput) => any;
    }
    export interface ModifyRuleOutput {
            /**
                * <p>Information about the modified rule.</p>
                */
            Rules?: Rule[];
    }
    export namespace ModifyRuleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyRuleOutput) => any;
    }
    export interface ModifyTargetGroupInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn: string | undefined;
            /**
                * <p>The protocol the load balancer uses when performing health checks on targets. For
                *       Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load
                *       Balancers, the default is TCP. The TCP protocol is not supported for health checks if the
                *       protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the
                *       protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP
                *       protocols are not supported for health checks.</p>
                */
            HealthCheckProtocol?: ProtocolEnum | string;
            /**
                * <p>The port the load balancer uses when performing health checks on targets.</p>
                */
            HealthCheckPort?: string;
            /**
                * <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
                *          <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
                *          <p>[GRPC protocol version] The path of a custom health check method with the format
                *       /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
                */
            HealthCheckPath?: string;
            /**
                * <p>Indicates whether health checks are enabled.</p>
                */
            HealthCheckEnabled?: boolean;
            /**
                * <p>The approximate amount of time, in seconds, between health checks of an individual target.
                *       For TCP health checks, the supported values are 10 or 30 seconds.</p>
                */
            HealthCheckIntervalSeconds?: number;
            /**
                * <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means
                *       a failed health check.</p>
                */
            HealthCheckTimeoutSeconds?: number;
            /**
                * <p>The number of consecutive health checks successes required before considering an unhealthy
                *       target healthy.</p>
                */
            HealthyThresholdCount?: number;
            /**
                * <p>The number of consecutive health check failures required before considering the target
                *       unhealthy. For target groups with a protocol of TCP or TLS, this value must be the same as the
                *       healthy threshold count.</p>
                */
            UnhealthyThresholdCount?: number;
            /**
                * <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful
                *       response from a target.</p>
                */
            Matcher?: Matcher;
    }
    export namespace ModifyTargetGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyTargetGroupInput) => any;
    }
    export interface ModifyTargetGroupOutput {
            /**
                * <p>Information about the modified target group.</p>
                */
            TargetGroups?: TargetGroup[];
    }
    export namespace ModifyTargetGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyTargetGroupOutput) => any;
    }
    export interface ModifyTargetGroupAttributesInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn: string | undefined;
            /**
                * <p>The attributes.</p>
                */
            Attributes: TargetGroupAttribute[] | undefined;
    }
    export namespace ModifyTargetGroupAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyTargetGroupAttributesInput) => any;
    }
    export interface ModifyTargetGroupAttributesOutput {
            /**
                * <p>Information about the attributes.</p>
                */
            Attributes?: TargetGroupAttribute[];
    }
    export namespace ModifyTargetGroupAttributesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyTargetGroupAttributesOutput) => any;
    }
    export interface RegisterTargetsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the target group.</p>
                */
            TargetGroupArn: string | undefined;
            /**
                * <p>The targets.</p>
                */
            Targets: TargetDescription[] | undefined;
    }
    export namespace RegisterTargetsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTargetsInput) => any;
    }
    export interface RegisterTargetsOutput {
    }
    export namespace RegisterTargetsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTargetsOutput) => any;
    }
    export interface RemoveListenerCertificatesInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the listener.</p>
                */
            ListenerArn: string | undefined;
            /**
                * <p>The certificate to remove. You can specify one certificate per call. Set
                *         <code>CertificateArn</code> to the certificate ARN but do not set
                *       <code>IsDefault</code>.</p>
                */
            Certificates: Certificate[] | undefined;
    }
    export namespace RemoveListenerCertificatesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveListenerCertificatesInput) => any;
    }
    export interface RemoveListenerCertificatesOutput {
    }
    export namespace RemoveListenerCertificatesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveListenerCertificatesOutput) => any;
    }
    export interface RemoveTagsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArns: string[] | undefined;
            /**
                * <p>The tag keys for the tags to remove.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace RemoveTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsInput) => any;
    }
    export interface RemoveTagsOutput {
    }
    export namespace RemoveTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsOutput) => any;
    }
    export interface SetIpAddressTypeInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn: string | undefined;
            /**
                * <p>The IP address type. The possible values are <code>ipv4</code> (for IPv4 addresses) and
                *         <code>dualstack</code> (for IPv4 and IPv6 addresses).
                *        You can’t specify
                *         <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener.</p>
                */
            IpAddressType: IpAddressType | string | undefined;
    }
    export namespace SetIpAddressTypeInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIpAddressTypeInput) => any;
    }
    export interface SetIpAddressTypeOutput {
            /**
                * <p>The IP address type.</p>
                */
            IpAddressType?: IpAddressType | string;
    }
    export namespace SetIpAddressTypeOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIpAddressTypeOutput) => any;
    }
    /**
        * <p>Information about the priorities for the rules for a listener.</p>
        */
    export interface RulePriorityPair {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule.</p>
                */
            RuleArn?: string;
            /**
                * <p>The rule priority.</p>
                */
            Priority?: number;
    }
    export namespace RulePriorityPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RulePriorityPair) => any;
    }
    export interface SetRulePrioritiesInput {
            /**
                * <p>The rule priorities.</p>
                */
            RulePriorities: RulePriorityPair[] | undefined;
    }
    export namespace SetRulePrioritiesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetRulePrioritiesInput) => any;
    }
    export interface SetRulePrioritiesOutput {
            /**
                * <p>Information about the rules.</p>
                */
            Rules?: Rule[];
    }
    export namespace SetRulePrioritiesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetRulePrioritiesOutput) => any;
    }
    export interface SetSecurityGroupsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn: string | undefined;
            /**
                * <p>The IDs of the security groups.</p>
                */
            SecurityGroups: string[] | undefined;
    }
    export namespace SetSecurityGroupsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSecurityGroupsInput) => any;
    }
    export interface SetSecurityGroupsOutput {
            /**
                * <p>The IDs of the security groups associated with the load balancer.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace SetSecurityGroupsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSecurityGroupsOutput) => any;
    }
    export interface SetSubnetsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            LoadBalancerArn: string | undefined;
            /**
                * <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You
                *       must specify either subnets or subnet mappings.</p>
                *          <p>[Application Load Balancers] You must specify subnets from at least two Availability
                *       Zones.</p>
                *          <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>
                *          <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local
                *       Zones.</p>
                *          <p>[Network Load Balancers] You can specify subnets from one or more Availability
                *       Zones.</p>
                */
            Subnets?: string[];
            /**
                * <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You
                *       must specify either subnets or subnet mappings.</p>
                *          <p>[Application Load Balancers] You must specify subnets from at least two Availability
                *       Zones. You cannot specify Elastic IP addresses for your subnets.</p>
                *          <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>
                *          <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local
                *       Zones.</p>
                *          <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. You
                *       can specify one Elastic IP address per subnet if you need static IP addresses for your
                *       internet-facing load balancer. For internal load balancers, you can specify one private IP
                *       address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you
                *       can specify one IPv6 address per subnet.</p>
                */
            SubnetMappings?: SubnetMapping[];
            /**
                * <p>[Network Load Balancers] The type of IP addresses used by the subnets for your load
                *       balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and
                *         <code>dualstack</code> (for IPv4 and IPv6 addresses). You can’t specify
                *         <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener.
                *       .</p>
                */
            IpAddressType?: IpAddressType | string;
    }
    export namespace SetSubnetsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSubnetsInput) => any;
    }
    export interface SetSubnetsOutput {
            /**
                * <p>Information about the subnets.</p>
                */
            AvailabilityZones?: AvailabilityZone[];
            /**
                * <p>[Network Load Balancers] The IP address type.</p>
                */
            IpAddressType?: IpAddressType | string;
    }
    export namespace SetSubnetsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSubnetsOutput) => any;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing-v2/node_modules/@aws-sdk/client-elastic-load-balancing-v2/dist-types/models/ElasticLoadBalancingV2ServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ElasticLoadBalancingV2 service.
        */
    export class ElasticLoadBalancingV2ServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

