// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-docdb' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/AddSourceIdentifierToSubscriptionCommand";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/AddTagsToResourceCommand";
    import { ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ApplyPendingMaintenanceActionCommand";
    import { CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CopyDBClusterParameterGroupCommand";
    import { CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CopyDBClusterSnapshotCommand";
    import { CreateDBClusterCommandInput, CreateDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterCommand";
    import { CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterParameterGroupCommand";
    import { CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterSnapshotCommand";
    import { CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBInstanceCommand";
    import { CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBSubnetGroupCommand";
    import { CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateEventSubscriptionCommand";
    import { CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateGlobalClusterCommand";
    import { DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterCommand";
    import { DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterParameterGroupCommand";
    import { DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterSnapshotCommand";
    import { DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBInstanceCommand";
    import { DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBSubnetGroupCommand";
    import { DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteEventSubscriptionCommand";
    import { DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteGlobalClusterCommand";
    import { DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeCertificatesCommand";
    import { DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterParameterGroupsCommand";
    import { DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterParametersCommand";
    import { DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClustersCommand";
    import { DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterSnapshotAttributesCommand";
    import { DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterSnapshotsCommand";
    import { DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBEngineVersionsCommand";
    import { DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBInstancesCommand";
    import { DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBSubnetGroupsCommand";
    import { DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEngineDefaultClusterParametersCommand";
    import { DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventCategoriesCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventsCommand";
    import { DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventSubscriptionsCommand";
    import { DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeGlobalClustersCommand";
    import { DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeOrderableDBInstanceOptionsCommand";
    import { DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribePendingMaintenanceActionsCommand";
    import { FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/FailoverDBClusterCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterCommand";
    import { ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterParameterGroupCommand";
    import { ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterSnapshotAttributeCommand";
    import { ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBInstanceCommand";
    import { ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBSubnetGroupCommand";
    import { ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyEventSubscriptionCommand";
    import { ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyGlobalClusterCommand";
    import { RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RebootDBInstanceCommand";
    import { RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveFromGlobalClusterCommand";
    import { RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveSourceIdentifierFromSubscriptionCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveTagsFromResourceCommand";
    import { ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ResetDBClusterParameterGroupCommand";
    import { RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RestoreDBClusterFromSnapshotCommand";
    import { RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RestoreDBClusterToPointInTimeCommand";
    import { StartDBClusterCommandInput, StartDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/StartDBClusterCommand";
    import { StopDBClusterCommandInput, StopDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/StopDBClusterCommand";
    import { DocDBClient } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    /**
        * <p>Amazon DocumentDB API documentation</p>
        */
    export class DocDB extends DocDBClient {
            /**
                * <p>Adds a source identifier to an existing event notification
                *             subscription.</p>
                */
            addSourceIdentifierToSubscription(args: AddSourceIdentifierToSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<AddSourceIdentifierToSubscriptionCommandOutput>;
            addSourceIdentifierToSubscription(args: AddSourceIdentifierToSubscriptionCommandInput, cb: (err: any, data?: AddSourceIdentifierToSubscriptionCommandOutput) => void): void;
            addSourceIdentifierToSubscription(args: AddSourceIdentifierToSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddSourceIdentifierToSubscriptionCommandOutput) => void): void;
            /**
                * <p>Adds metadata tags to an Amazon DocumentDB resource. You can use these tags
                *             with cost allocation reporting to track costs that are associated
                *             with Amazon DocumentDB resources or in a <code>Condition</code> statement in
                *             an Identity and Access Management (IAM) policy for Amazon DocumentDB.</p>
                */
            addTagsToResource(args: AddTagsToResourceCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsToResourceCommandOutput>;
            addTagsToResource(args: AddTagsToResourceCommandInput, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            addTagsToResource(args: AddTagsToResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            /**
                * <p>Applies a pending maintenance action to a resource (for example,
                *             to an Amazon DocumentDB instance).</p>
                */
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, options?: __HttpHandlerOptions): Promise<ApplyPendingMaintenanceActionCommandOutput>;
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, cb: (err: any, data?: ApplyPendingMaintenanceActionCommandOutput) => void): void;
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ApplyPendingMaintenanceActionCommandOutput) => void): void;
            /**
                * <p>Copies the specified cluster parameter group.</p>
                */
            copyDBClusterParameterGroup(args: CopyDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<CopyDBClusterParameterGroupCommandOutput>;
            copyDBClusterParameterGroup(args: CopyDBClusterParameterGroupCommandInput, cb: (err: any, data?: CopyDBClusterParameterGroupCommandOutput) => void): void;
            copyDBClusterParameterGroup(args: CopyDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Copies a snapshot of a cluster.</p>
                *
                *         <p>To copy a cluster snapshot from a shared manual cluster snapshot,
                *             <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon
                *             Resource Name (ARN) of the shared cluster snapshot. You can only
                *             copy a shared DB cluster snapshot, whether encrypted or not, in the
                *             same Amazon Web Services Region.</p>
                *
                *         <p>To cancel the copy operation after it is in progress, delete the
                *             target cluster snapshot identified by
                *             <code>TargetDBClusterSnapshotIdentifier</code> while that cluster
                *             snapshot is in the <i>copying</i> status.</p>
                */
            copyDBClusterSnapshot(args: CopyDBClusterSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CopyDBClusterSnapshotCommandOutput>;
            copyDBClusterSnapshot(args: CopyDBClusterSnapshotCommandInput, cb: (err: any, data?: CopyDBClusterSnapshotCommandOutput) => void): void;
            copyDBClusterSnapshot(args: CopyDBClusterSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyDBClusterSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a new Amazon DocumentDB cluster.</p>
                */
            createDBCluster(args: CreateDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBClusterCommandOutput>;
            createDBCluster(args: CreateDBClusterCommandInput, cb: (err: any, data?: CreateDBClusterCommandOutput) => void): void;
            createDBCluster(args: CreateDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBClusterCommandOutput) => void): void;
            /**
                * <p>Creates a new cluster parameter group.</p>
                *         <p>Parameters in a cluster parameter group apply to all of the
                *             instances in a cluster.</p>
                *         <p>A cluster parameter group is initially created with the default
                *             parameters for the database engine used by instances in the cluster.
                *             In Amazon DocumentDB, you cannot make modifications directly to the
                *             <code>default.docdb3.6</code> cluster parameter group. If your
                *             Amazon DocumentDB cluster is using the default cluster parameter group and you
                *             want to modify a value in it, you must first <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html">
                *                 create a new parameter group</a>
                *             or <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html">
                *                 copy an existing parameter group</a>,
                *             modify it, and then apply the modified parameter group to your
                *             cluster. For the new cluster parameter group and associated settings
                *             to take effect, you must then reboot the instances in the cluster
                *             without failover. For more information,
                *             see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html">
                *                 Modifying Amazon DocumentDB Cluster Parameter Groups</a>.
                *             </p>
                */
            createDBClusterParameterGroup(args: CreateDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBClusterParameterGroupCommandOutput>;
            createDBClusterParameterGroup(args: CreateDBClusterParameterGroupCommandInput, cb: (err: any, data?: CreateDBClusterParameterGroupCommandOutput) => void): void;
            createDBClusterParameterGroup(args: CreateDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Creates a snapshot of a cluster. </p>
                */
            createDBClusterSnapshot(args: CreateDBClusterSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBClusterSnapshotCommandOutput>;
            createDBClusterSnapshot(args: CreateDBClusterSnapshotCommandInput, cb: (err: any, data?: CreateDBClusterSnapshotCommandOutput) => void): void;
            createDBClusterSnapshot(args: CreateDBClusterSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBClusterSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a new instance.</p>
                */
            createDBInstance(args: CreateDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBInstanceCommandOutput>;
            createDBInstance(args: CreateDBInstanceCommandInput, cb: (err: any, data?: CreateDBInstanceCommandOutput) => void): void;
            createDBInstance(args: CreateDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBInstanceCommandOutput) => void): void;
            /**
                * <p>Creates a new subnet group. subnet groups must contain at least one subnet in at
                *             least two Availability Zones in the Amazon Web Services Region.</p>
                */
            createDBSubnetGroup(args: CreateDBSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBSubnetGroupCommandOutput>;
            createDBSubnetGroup(args: CreateDBSubnetGroupCommandInput, cb: (err: any, data?: CreateDBSubnetGroupCommandOutput) => void): void;
            createDBSubnetGroup(args: CreateDBSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.</p>
                *         <p>You can specify the type of source (<code>SourceType</code>) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (<code>SourceIds</code>) that trigger the events, and you can provide a list of event categories (<code>EventCategories</code>) for events that you want to be notified of. For example, you can specify <code>SourceType = db-instance</code>, <code>SourceIds = mydbinstance1, mydbinstance2</code> and <code>EventCategories = Availability, Backup</code>.</p>
                *         <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code> (such as <code>SourceType = db-instance</code> and <code>SourceIdentifier = myDBInstance1</code>), you are notified of all the <code>db-instance</code> events for the specified source. If you specify a <code>SourceType</code> but do not specify a <code>SourceIdentifier</code>, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the <code>SourceType</code> or the <code>SourceIdentifier</code>, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.</p>
                */
            createEventSubscription(args: CreateEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<CreateEventSubscriptionCommandOutput>;
            createEventSubscription(args: CreateEventSubscriptionCommandInput, cb: (err: any, data?: CreateEventSubscriptionCommandOutput) => void): void;
            createEventSubscription(args: CreateEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.</p>
                *         <p></p>
                *         <p>You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. </p>
                *         <note>
                *             <p>This action only applies to Amazon DocumentDB clusters.</p>
                *         </note>
                */
            createGlobalCluster(args: CreateGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<CreateGlobalClusterCommandOutput>;
            createGlobalCluster(args: CreateGlobalClusterCommandInput, cb: (err: any, data?: CreateGlobalClusterCommandOutput) => void): void;
            createGlobalCluster(args: CreateGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.</p>
                *         <p></p>
                */
            deleteDBCluster(args: DeleteDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBClusterCommandOutput>;
            deleteDBCluster(args: DeleteDBClusterCommandInput, cb: (err: any, data?: DeleteDBClusterCommandOutput) => void): void;
            deleteDBCluster(args: DeleteDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBClusterCommandOutput) => void): void;
            /**
                * <p>Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.</p>
                */
            deleteDBClusterParameterGroup(args: DeleteDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBClusterParameterGroupCommandOutput>;
            deleteDBClusterParameterGroup(args: DeleteDBClusterParameterGroupCommandInput, cb: (err: any, data?: DeleteDBClusterParameterGroupCommandOutput) => void): void;
            deleteDBClusterParameterGroup(args: DeleteDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p>
                *         <note>
                *             <p>The cluster snapshot must be in the <code>available</code> state to be deleted.</p>
                *         </note>
                */
            deleteDBClusterSnapshot(args: DeleteDBClusterSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBClusterSnapshotCommandOutput>;
            deleteDBClusterSnapshot(args: DeleteDBClusterSnapshotCommandInput, cb: (err: any, data?: DeleteDBClusterSnapshotCommandOutput) => void): void;
            deleteDBClusterSnapshot(args: DeleteDBClusterSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBClusterSnapshotCommandOutput) => void): void;
            /**
                * <p>Deletes a previously provisioned instance.</p>
                */
            deleteDBInstance(args: DeleteDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBInstanceCommandOutput>;
            deleteDBInstance(args: DeleteDBInstanceCommandInput, cb: (err: any, data?: DeleteDBInstanceCommandOutput) => void): void;
            deleteDBInstance(args: DeleteDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBInstanceCommandOutput) => void): void;
            /**
                * <p>Deletes a subnet group.</p>
                *         <note>
                *             <p>The specified database subnet group must not be associated with any DB
                *                 instances.</p>
                *         </note>
                */
            deleteDBSubnetGroup(args: DeleteDBSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBSubnetGroupCommandOutput>;
            deleteDBSubnetGroup(args: DeleteDBSubnetGroupCommandInput, cb: (err: any, data?: DeleteDBSubnetGroupCommandOutput) => void): void;
            deleteDBSubnetGroup(args: DeleteDBSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon DocumentDB event notification subscription.</p>
                */
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventSubscriptionCommandOutput>;
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, cb: (err: any, data?: DeleteEventSubscriptionCommandOutput) => void): void;
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.</p>
                *         <note>
                *             <p>This action only applies to Amazon DocumentDB clusters.</p>
                *         </note>
                */
            deleteGlobalCluster(args: DeleteGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGlobalClusterCommandOutput>;
            deleteGlobalCluster(args: DeleteGlobalClusterCommandInput, cb: (err: any, data?: DeleteGlobalClusterCommandOutput) => void): void;
            deleteGlobalCluster(args: DeleteGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.</p>
                */
            describeCertificates(args: DescribeCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCertificatesCommandOutput>;
            describeCertificates(args: DescribeCertificatesCommandInput, cb: (err: any, data?: DescribeCertificatesCommandOutput) => void): void;
            describeCertificates(args: DescribeCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCertificatesCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list contains only the description of the specified cluster parameter group. </p>
                */
            describeDBClusterParameterGroups(args: DescribeDBClusterParameterGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterParameterGroupsCommandOutput>;
            describeDBClusterParameterGroups(args: DescribeDBClusterParameterGroupsCommandInput, cb: (err: any, data?: DescribeDBClusterParameterGroupsCommandOutput) => void): void;
            describeDBClusterParameterGroups(args: DescribeDBClusterParameterGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterParameterGroupsCommandOutput) => void): void;
            /**
                * <p>Returns the detailed parameter list for a particular cluster parameter
                *             group.</p>
                */
            describeDBClusterParameters(args: DescribeDBClusterParametersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterParametersCommandOutput>;
            describeDBClusterParameters(args: DescribeDBClusterParametersCommandInput, cb: (err: any, data?: DescribeDBClusterParametersCommandOutput) => void): void;
            describeDBClusterParameters(args: DescribeDBClusterParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterParametersCommandOutput) => void): void;
            /**
                * <p>Returns information about provisioned Amazon DocumentDB clusters. This API
                *             operation supports pagination. For certain management features
                *             such as cluster and instance lifecycle management, Amazon DocumentDB leverages
                *             operational technology that is shared with Amazon RDS and Amazon
                *             Neptune. Use the <code>filterName=engine,Values=docdb</code> filter
                *             parameter to return only Amazon DocumentDB clusters.</p>
                */
            describeDBClusters(args: DescribeDBClustersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClustersCommandOutput>;
            describeDBClusters(args: DescribeDBClustersCommandInput, cb: (err: any, data?: DescribeDBClustersCommandOutput) => void): void;
            describeDBClusters(args: DescribeDBClustersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClustersCommandOutput) => void): void;
            /**
                * <p>Returns a list of cluster snapshot attribute names and values for a manual DB
                *             cluster snapshot.</p>
                *         <p>When you share snapshots with other Amazon Web Services accounts,
                *                 <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p>
                */
            describeDBClusterSnapshotAttributes(args: DescribeDBClusterSnapshotAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterSnapshotAttributesCommandOutput>;
            describeDBClusterSnapshotAttributes(args: DescribeDBClusterSnapshotAttributesCommandInput, cb: (err: any, data?: DescribeDBClusterSnapshotAttributesCommandOutput) => void): void;
            describeDBClusterSnapshotAttributes(args: DescribeDBClusterSnapshotAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterSnapshotAttributesCommandOutput) => void): void;
            /**
                * <p>Returns information about cluster snapshots. This API operation supports pagination.</p>
                */
            describeDBClusterSnapshots(args: DescribeDBClusterSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterSnapshotsCommandOutput>;
            describeDBClusterSnapshots(args: DescribeDBClusterSnapshotsCommandInput, cb: (err: any, data?: DescribeDBClusterSnapshotsCommandOutput) => void): void;
            describeDBClusterSnapshots(args: DescribeDBClusterSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterSnapshotsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the available engines.</p>
                */
            describeDBEngineVersions(args: DescribeDBEngineVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBEngineVersionsCommandOutput>;
            describeDBEngineVersions(args: DescribeDBEngineVersionsCommandInput, cb: (err: any, data?: DescribeDBEngineVersionsCommandOutput) => void): void;
            describeDBEngineVersions(args: DescribeDBEngineVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBEngineVersionsCommandOutput) => void): void;
            /**
                * <p>Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.</p>
                */
            describeDBInstances(args: DescribeDBInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBInstancesCommandOutput>;
            describeDBInstances(args: DescribeDBInstancesCommandInput, cb: (err: any, data?: DescribeDBInstancesCommandOutput) => void): void;
            describeDBInstances(args: DescribeDBInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBInstancesCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>DBSubnetGroup</code> descriptions. If a
                *                 <code>DBSubnetGroupName</code> is specified, the list will contain only the descriptions of the specified <code>DBSubnetGroup</code>.</p>
                */
            describeDBSubnetGroups(args: DescribeDBSubnetGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBSubnetGroupsCommandOutput>;
            describeDBSubnetGroups(args: DescribeDBSubnetGroupsCommandInput, cb: (err: any, data?: DescribeDBSubnetGroupsCommandOutput) => void): void;
            describeDBSubnetGroups(args: DescribeDBSubnetGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBSubnetGroupsCommandOutput) => void): void;
            /**
                * <p>Returns the default engine and system parameter information for the cluster database
                *             engine.</p>
                */
            describeEngineDefaultClusterParameters(args: DescribeEngineDefaultClusterParametersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEngineDefaultClusterParametersCommandOutput>;
            describeEngineDefaultClusterParameters(args: DescribeEngineDefaultClusterParametersCommandInput, cb: (err: any, data?: DescribeEngineDefaultClusterParametersCommandOutput) => void): void;
            describeEngineDefaultClusterParameters(args: DescribeEngineDefaultClusterParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEngineDefaultClusterParametersCommandOutput) => void): void;
            /**
                * <p>Displays a list of categories for all event source types, or, if specified, for a
                *             specified source type. </p>
                */
            describeEventCategories(args: DescribeEventCategoriesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventCategoriesCommandOutput>;
            describeEventCategories(args: DescribeEventCategoriesCommandInput, cb: (err: any, data?: DescribeEventCategoriesCommandOutput) => void): void;
            describeEventCategories(args: DescribeEventCategoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventCategoriesCommandOutput) => void): void;
            /**
                * <p>Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.</p>
                */
            describeEvents(args: DescribeEventsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventsCommandOutput>;
            describeEvents(args: DescribeEventsCommandInput, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            describeEvents(args: DescribeEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            /**
                * <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p>
                *         <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p>
                */
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventSubscriptionsCommandOutput>;
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, cb: (err: any, data?: DescribeEventSubscriptionsCommandOutput) => void): void;
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventSubscriptionsCommandOutput) => void): void;
            /**
                * <p>Returns information about Amazon DocumentDB global  clusters. This API supports pagination.</p>
                *         <note>
                *             <p>This action only applies to Amazon DocumentDB clusters.</p>
                *         </note>
                */
            describeGlobalClusters(args: DescribeGlobalClustersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGlobalClustersCommandOutput>;
            describeGlobalClusters(args: DescribeGlobalClustersCommandInput, cb: (err: any, data?: DescribeGlobalClustersCommandOutput) => void): void;
            describeGlobalClusters(args: DescribeGlobalClustersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGlobalClustersCommandOutput) => void): void;
            /**
                * <p>Returns a list of orderable instance options for the specified engine.</p>
                */
            describeOrderableDBInstanceOptions(args: DescribeOrderableDBInstanceOptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrderableDBInstanceOptionsCommandOutput>;
            describeOrderableDBInstanceOptions(args: DescribeOrderableDBInstanceOptionsCommandInput, cb: (err: any, data?: DescribeOrderableDBInstanceOptionsCommandOutput) => void): void;
            describeOrderableDBInstanceOptions(args: DescribeOrderableDBInstanceOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrderableDBInstanceOptionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of resources (for example, instances) that have at least one pending
                *             maintenance action.</p>
                */
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribePendingMaintenanceActionsCommandOutput>;
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, cb: (err: any, data?: DescribePendingMaintenanceActionsCommandOutput) => void): void;
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePendingMaintenanceActionsCommandOutput) => void): void;
            /**
                * <p>Forces a failover for a cluster.</p>
                *         <p>A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).</p>
                *         <p>If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.</p>
                */
            failoverDBCluster(args: FailoverDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<FailoverDBClusterCommandOutput>;
            failoverDBCluster(args: FailoverDBClusterCommandInput, cb: (err: any, data?: FailoverDBClusterCommandOutput) => void): void;
            failoverDBCluster(args: FailoverDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: FailoverDBClusterCommandOutput) => void): void;
            /**
                * <p>Lists all tags on an Amazon DocumentDB resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database
                *             configuration parameters by specifying these parameters and the new values in the
                *             request. </p>
                */
            modifyDBCluster(args: ModifyDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBClusterCommandOutput>;
            modifyDBCluster(args: ModifyDBClusterCommandInput, cb: (err: any, data?: ModifyDBClusterCommandOutput) => void): void;
            modifyDBCluster(args: ModifyDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBClusterCommandOutput) => void): void;
            /**
                * <p> Modifies the parameters of a cluster parameter group. To modify more than one
                *             parameter, submit a list of the following: <code>ParameterName</code>,
                *                 <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20
                *             parameters can be modified in a single request. </p>
                *         <note>
                *             <p>Changes to dynamic parameters are applied immediately. Changes to static
                *                 parameters require a reboot or maintenance window
                *
                *                 before the change can take effect.</p>
                *         </note>
                *         <important>
                *             <p>After you create a cluster parameter group, you should wait at least 5 minutes
                *                 before creating your first cluster that uses that cluster parameter group as
                *                 the default parameter group. This allows Amazon DocumentDB to fully complete the create action
                *                 before the parameter group is used as the default for a new cluster. This step is
                *                 especially important for parameters that are critical when creating the default
                *                 database for a cluster, such as the character set for the default database
                *                 defined by the <code>character_set_database</code> parameter.</p>
                *         </important>
                */
            modifyDBClusterParameterGroup(args: ModifyDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBClusterParameterGroupCommandOutput>;
            modifyDBClusterParameterGroup(args: ModifyDBClusterParameterGroupCommandInput, cb: (err: any, data?: ModifyDBClusterParameterGroupCommandOutput) => void): void;
            modifyDBClusterParameterGroup(args: ModifyDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.</p>
                *         <p>To share a manual cluster snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code>, and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value <code>all</code> to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p>
                */
            modifyDBClusterSnapshotAttribute(args: ModifyDBClusterSnapshotAttributeCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBClusterSnapshotAttributeCommandOutput>;
            modifyDBClusterSnapshotAttribute(args: ModifyDBClusterSnapshotAttributeCommandInput, cb: (err: any, data?: ModifyDBClusterSnapshotAttributeCommandOutput) => void): void;
            modifyDBClusterSnapshotAttribute(args: ModifyDBClusterSnapshotAttributeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBClusterSnapshotAttributeCommandOutput) => void): void;
            /**
                * <p>Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.</p>
                */
            modifyDBInstance(args: ModifyDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBInstanceCommandOutput>;
            modifyDBInstance(args: ModifyDBInstanceCommandInput, cb: (err: any, data?: ModifyDBInstanceCommandOutput) => void): void;
            modifyDBInstance(args: ModifyDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBInstanceCommandOutput) => void): void;
            /**
                * <p>Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.</p>
                */
            modifyDBSubnetGroup(args: ModifyDBSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBSubnetGroupCommandOutput>;
            modifyDBSubnetGroup(args: ModifyDBSubnetGroupCommandInput, cb: (err: any, data?: ModifyDBSubnetGroupCommandOutput) => void): void;
            modifyDBSubnetGroup(args: ModifyDBSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Modifies an existing Amazon DocumentDB event notification subscription.</p>
                */
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<ModifyEventSubscriptionCommandOutput>;
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, cb: (err: any, data?: ModifyEventSubscriptionCommandOutput) => void): void;
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.</p>
                *         <note>
                *             <p>This action only applies to Amazon DocumentDB clusters.</p>
                *         </note>
                */
            modifyGlobalCluster(args: ModifyGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<ModifyGlobalClusterCommandOutput>;
            modifyGlobalCluster(args: ModifyGlobalClusterCommandInput, cb: (err: any, data?: ModifyGlobalClusterCommandOutput) => void): void;
            modifyGlobalCluster(args: ModifyGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyGlobalClusterCommandOutput) => void): void;
            /**
                * <p>You might need to reboot your instance, usually for maintenance reasons. For
                *             example, if you make certain changes, or if you change the cluster parameter group
                *             that is associated with the instance, you must reboot the instance for the changes to
                *             take effect. </p>
                *         <p>Rebooting an instance restarts the database engine service. Rebooting an instance
                *             results in a momentary outage, during which the instance status is set to
                *                 <i>rebooting</i>. </p>
                */
            rebootDBInstance(args: RebootDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<RebootDBInstanceCommandOutput>;
            rebootDBInstance(args: RebootDBInstanceCommandInput, cb: (err: any, data?: RebootDBInstanceCommandOutput) => void): void;
            rebootDBInstance(args: RebootDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootDBInstanceCommandOutput) => void): void;
            /**
                * <p>Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. </p>
                *         <note>
                *             <p>This action only applies to Amazon DocumentDB clusters.</p>
                *         </note>
                */
            removeFromGlobalCluster(args: RemoveFromGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<RemoveFromGlobalClusterCommandOutput>;
            removeFromGlobalCluster(args: RemoveFromGlobalClusterCommandInput, cb: (err: any, data?: RemoveFromGlobalClusterCommandOutput) => void): void;
            removeFromGlobalCluster(args: RemoveFromGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveFromGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Removes a source identifier from an existing Amazon DocumentDB event notification
                *             subscription.</p>
                */
            removeSourceIdentifierFromSubscription(args: RemoveSourceIdentifierFromSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<RemoveSourceIdentifierFromSubscriptionCommandOutput>;
            removeSourceIdentifierFromSubscription(args: RemoveSourceIdentifierFromSubscriptionCommandInput, cb: (err: any, data?: RemoveSourceIdentifierFromSubscriptionCommandOutput) => void): void;
            removeSourceIdentifierFromSubscription(args: RemoveSourceIdentifierFromSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveSourceIdentifierFromSubscriptionCommandOutput) => void): void;
            /**
                * <p>Removes metadata tags from an Amazon DocumentDB resource.</p>
                */
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsFromResourceCommandOutput>;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            /**
                * <p> Modifies the parameters of a cluster parameter group to the default value. To
                *             reset specific parameters, submit a list of the following: <code>ParameterName</code>
                *             and <code>ApplyMethod</code>. To reset the entire cluster parameter group, specify
                *             the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code>
                *             parameters. </p>
                *         <p> When you reset the entire group, dynamic parameters are updated immediately and
                *             static parameters are set to <code>pending-reboot</code> to take effect on the next DB
                *             instance reboot.</p>
                */
            resetDBClusterParameterGroup(args: ResetDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<ResetDBClusterParameterGroupCommandOutput>;
            resetDBClusterParameterGroup(args: ResetDBClusterParameterGroupCommandInput, cb: (err: any, data?: ResetDBClusterParameterGroupCommandOutput) => void): void;
            resetDBClusterParameterGroup(args: ResetDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Creates a new cluster from a snapshot or cluster snapshot.</p>
                *         <p>If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.</p>
                *         <p>If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.</p>
                */
            restoreDBClusterFromSnapshot(args: RestoreDBClusterFromSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBClusterFromSnapshotCommandOutput>;
            restoreDBClusterFromSnapshot(args: RestoreDBClusterFromSnapshotCommandInput, cb: (err: any, data?: RestoreDBClusterFromSnapshotCommandOutput) => void): void;
            restoreDBClusterFromSnapshot(args: RestoreDBClusterFromSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBClusterFromSnapshotCommandOutput) => void): void;
            /**
                * <p>Restores a cluster to an arbitrary point in time. Users can restore to any point in
                *             time before <code>LatestRestorableTime</code> for up to
                *                 <code>BackupRetentionPeriod</code> days. The target cluster is created from the
                *             source cluster with the same configuration as the original cluster, except that
                *             the new cluster is created with the default security group. </p>
                */
            restoreDBClusterToPointInTime(args: RestoreDBClusterToPointInTimeCommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBClusterToPointInTimeCommandOutput>;
            restoreDBClusterToPointInTime(args: RestoreDBClusterToPointInTimeCommandInput, cb: (err: any, data?: RestoreDBClusterToPointInTimeCommandOutput) => void): void;
            restoreDBClusterToPointInTime(args: RestoreDBClusterToPointInTimeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBClusterToPointInTimeCommandOutput) => void): void;
            /**
                * <p>Restarts the stopped cluster that is specified by <code>DBClusterIdentifier</code>.
                *             For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and
                *                 Starting an Amazon DocumentDB Cluster</a>.</p>
                */
            startDBCluster(args: StartDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<StartDBClusterCommandOutput>;
            startDBCluster(args: StartDBClusterCommandInput, cb: (err: any, data?: StartDBClusterCommandOutput) => void): void;
            startDBCluster(args: StartDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDBClusterCommandOutput) => void): void;
            /**
                * <p>Stops the running cluster that is specified by <code>DBClusterIdentifier</code>. The
                *             cluster must be in the <i>available</i> state. For more information, see
                *                 <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and
                *                 Starting an Amazon DocumentDB Cluster</a>.</p>
                */
            stopDBCluster(args: StopDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<StopDBClusterCommandOutput>;
            stopDBCluster(args: StopDBClusterCommandInput, cb: (err: any, data?: StopDBClusterCommandOutput) => void): void;
            stopDBCluster(args: StopDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDBClusterCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/AddSourceIdentifierToSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { AddSourceIdentifierToSubscriptionMessage, AddSourceIdentifierToSubscriptionResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface AddSourceIdentifierToSubscriptionCommandInput extends AddSourceIdentifierToSubscriptionMessage {
    }
    export interface AddSourceIdentifierToSubscriptionCommandOutput extends AddSourceIdentifierToSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Adds a source identifier to an existing event notification
        *             subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, AddSourceIdentifierToSubscriptionCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, AddSourceIdentifierToSubscriptionCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new AddSourceIdentifierToSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddSourceIdentifierToSubscriptionCommandInput} for command's `input` shape.
        * @see {@link AddSourceIdentifierToSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class AddSourceIdentifierToSubscriptionCommand extends $Command<AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput, DocDBClientResolvedConfig> {
            readonly input: AddSourceIdentifierToSubscriptionCommandInput;
            constructor(input: AddSourceIdentifierToSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/AddTagsToResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { AddTagsToResourceMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface AddTagsToResourceCommandInput extends AddTagsToResourceMessage {
    }
    export interface AddTagsToResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds metadata tags to an Amazon DocumentDB resource. You can use these tags
        *             with cost allocation reporting to track costs that are associated
        *             with Amazon DocumentDB resources or in a <code>Condition</code> statement in
        *             an Identity and Access Management (IAM) policy for Amazon DocumentDB.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, AddTagsToResourceCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, AddTagsToResourceCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new AddTagsToResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsToResourceCommandInput} for command's `input` shape.
        * @see {@link AddTagsToResourceCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class AddTagsToResourceCommand extends $Command<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput, DocDBClientResolvedConfig> {
            readonly input: AddTagsToResourceCommandInput;
            constructor(input: AddTagsToResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ApplyPendingMaintenanceActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ApplyPendingMaintenanceActionMessage, ApplyPendingMaintenanceActionResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ApplyPendingMaintenanceActionCommandInput extends ApplyPendingMaintenanceActionMessage {
    }
    export interface ApplyPendingMaintenanceActionCommandOutput extends ApplyPendingMaintenanceActionResult, __MetadataBearer {
    }
    /**
        * <p>Applies a pending maintenance action to a resource (for example,
        *             to an Amazon DocumentDB instance).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ApplyPendingMaintenanceActionCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ApplyPendingMaintenanceActionCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ApplyPendingMaintenanceActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ApplyPendingMaintenanceActionCommandInput} for command's `input` shape.
        * @see {@link ApplyPendingMaintenanceActionCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ApplyPendingMaintenanceActionCommand extends $Command<ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ApplyPendingMaintenanceActionCommandInput;
            constructor(input: ApplyPendingMaintenanceActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CopyDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CopyDBClusterParameterGroupMessage, CopyDBClusterParameterGroupResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CopyDBClusterParameterGroupCommandInput extends CopyDBClusterParameterGroupMessage {
    }
    export interface CopyDBClusterParameterGroupCommandOutput extends CopyDBClusterParameterGroupResult, __MetadataBearer {
    }
    /**
        * <p>Copies the specified cluster parameter group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CopyDBClusterParameterGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CopyDBClusterParameterGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CopyDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link CopyDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CopyDBClusterParameterGroupCommand extends $Command<CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CopyDBClusterParameterGroupCommandInput;
            constructor(input: CopyDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CopyDBClusterSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CopyDBClusterSnapshotMessage, CopyDBClusterSnapshotResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CopyDBClusterSnapshotCommandInput extends CopyDBClusterSnapshotMessage {
    }
    export interface CopyDBClusterSnapshotCommandOutput extends CopyDBClusterSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Copies a snapshot of a cluster.</p>
        *
        *         <p>To copy a cluster snapshot from a shared manual cluster snapshot,
        *             <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon
        *             Resource Name (ARN) of the shared cluster snapshot. You can only
        *             copy a shared DB cluster snapshot, whether encrypted or not, in the
        *             same Amazon Web Services Region.</p>
        *
        *         <p>To cancel the copy operation after it is in progress, delete the
        *             target cluster snapshot identified by
        *             <code>TargetDBClusterSnapshotIdentifier</code> while that cluster
        *             snapshot is in the <i>copying</i> status.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CopyDBClusterSnapshotCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CopyDBClusterSnapshotCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CopyDBClusterSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyDBClusterSnapshotCommandInput} for command's `input` shape.
        * @see {@link CopyDBClusterSnapshotCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CopyDBClusterSnapshotCommand extends $Command<CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CopyDBClusterSnapshotCommandInput;
            constructor(input: CopyDBClusterSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CreateDBClusterMessage, CreateDBClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CreateDBClusterCommandInput extends CreateDBClusterMessage {
    }
    export interface CreateDBClusterCommandOutput extends CreateDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new Amazon DocumentDB cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CreateDBClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CreateDBClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CreateDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBClusterCommandInput} for command's `input` shape.
        * @see {@link CreateDBClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CreateDBClusterCommand extends $Command<CreateDBClusterCommandInput, CreateDBClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CreateDBClusterCommandInput;
            constructor(input: CreateDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBClusterCommandInput, CreateDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CreateDBClusterParameterGroupMessage, CreateDBClusterParameterGroupResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CreateDBClusterParameterGroupCommandInput extends CreateDBClusterParameterGroupMessage {
    }
    export interface CreateDBClusterParameterGroupCommandOutput extends CreateDBClusterParameterGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new cluster parameter group.</p>
        *         <p>Parameters in a cluster parameter group apply to all of the
        *             instances in a cluster.</p>
        *         <p>A cluster parameter group is initially created with the default
        *             parameters for the database engine used by instances in the cluster.
        *             In Amazon DocumentDB, you cannot make modifications directly to the
        *             <code>default.docdb3.6</code> cluster parameter group. If your
        *             Amazon DocumentDB cluster is using the default cluster parameter group and you
        *             want to modify a value in it, you must first <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html">
        *                 create a new parameter group</a>
        *             or <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html">
        *                 copy an existing parameter group</a>,
        *             modify it, and then apply the modified parameter group to your
        *             cluster. For the new cluster parameter group and associated settings
        *             to take effect, you must then reboot the instances in the cluster
        *             without failover. For more information,
        *             see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html">
        *                 Modifying Amazon DocumentDB Cluster Parameter Groups</a>.
        *             </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CreateDBClusterParameterGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CreateDBClusterParameterGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CreateDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link CreateDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CreateDBClusterParameterGroupCommand extends $Command<CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CreateDBClusterParameterGroupCommandInput;
            constructor(input: CreateDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CreateDBClusterSnapshotMessage, CreateDBClusterSnapshotResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CreateDBClusterSnapshotCommandInput extends CreateDBClusterSnapshotMessage {
    }
    export interface CreateDBClusterSnapshotCommandOutput extends CreateDBClusterSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a snapshot of a cluster. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CreateDBClusterSnapshotCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CreateDBClusterSnapshotCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CreateDBClusterSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBClusterSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateDBClusterSnapshotCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CreateDBClusterSnapshotCommand extends $Command<CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CreateDBClusterSnapshotCommandInput;
            constructor(input: CreateDBClusterSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CreateDBInstanceMessage, CreateDBInstanceResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CreateDBInstanceCommandInput extends CreateDBInstanceMessage {
    }
    export interface CreateDBInstanceCommandOutput extends CreateDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CreateDBInstanceCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CreateDBInstanceCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CreateDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBInstanceCommandInput} for command's `input` shape.
        * @see {@link CreateDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CreateDBInstanceCommand extends $Command<CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CreateDBInstanceCommandInput;
            constructor(input: CreateDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CreateDBSubnetGroupMessage, CreateDBSubnetGroupResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CreateDBSubnetGroupCommandInput extends CreateDBSubnetGroupMessage {
    }
    export interface CreateDBSubnetGroupCommandOutput extends CreateDBSubnetGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new subnet group. subnet groups must contain at least one subnet in at
        *             least two Availability Zones in the Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CreateDBSubnetGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CreateDBSubnetGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CreateDBSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link CreateDBSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CreateDBSubnetGroupCommand extends $Command<CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CreateDBSubnetGroupCommandInput;
            constructor(input: CreateDBSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CreateEventSubscriptionMessage, CreateEventSubscriptionResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CreateEventSubscriptionCommandInput extends CreateEventSubscriptionMessage {
    }
    export interface CreateEventSubscriptionCommandOutput extends CreateEventSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.</p>
        *         <p>You can specify the type of source (<code>SourceType</code>) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (<code>SourceIds</code>) that trigger the events, and you can provide a list of event categories (<code>EventCategories</code>) for events that you want to be notified of. For example, you can specify <code>SourceType = db-instance</code>, <code>SourceIds = mydbinstance1, mydbinstance2</code> and <code>EventCategories = Availability, Backup</code>.</p>
        *         <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code> (such as <code>SourceType = db-instance</code> and <code>SourceIdentifier = myDBInstance1</code>), you are notified of all the <code>db-instance</code> events for the specified source. If you specify a <code>SourceType</code> but do not specify a <code>SourceIdentifier</code>, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the <code>SourceType</code> or the <code>SourceIdentifier</code>, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CreateEventSubscriptionCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CreateEventSubscriptionCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CreateEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link CreateEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CreateEventSubscriptionCommand extends $Command<CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CreateEventSubscriptionCommandInput;
            constructor(input: CreateEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CreateGlobalClusterMessage, CreateGlobalClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface CreateGlobalClusterCommandInput extends CreateGlobalClusterMessage {
    }
    export interface CreateGlobalClusterCommandOutput extends CreateGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.</p>
        *         <p></p>
        *         <p>You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. </p>
        *         <note>
        *             <p>This action only applies to Amazon DocumentDB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, CreateGlobalClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, CreateGlobalClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new CreateGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link CreateGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class CreateGlobalClusterCommand extends $Command<CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: CreateGlobalClusterCommandInput;
            constructor(input: CreateGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DeleteDBClusterMessage, DeleteDBClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DeleteDBClusterCommandInput extends DeleteDBClusterMessage {
    }
    export interface DeleteDBClusterCommandOutput extends DeleteDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.</p>
        *         <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DeleteDBClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DeleteDBClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DeleteDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBClusterCommandInput} for command's `input` shape.
        * @see {@link DeleteDBClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DeleteDBClusterCommand extends $Command<DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DeleteDBClusterCommandInput;
            constructor(input: DeleteDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DeleteDBClusterParameterGroupMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DeleteDBClusterParameterGroupCommandInput extends DeleteDBClusterParameterGroupMessage {
    }
    export interface DeleteDBClusterParameterGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DeleteDBClusterParameterGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DeleteDBClusterParameterGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DeleteDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DeleteDBClusterParameterGroupCommand extends $Command<DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DeleteDBClusterParameterGroupCommandInput;
            constructor(input: DeleteDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DeleteDBClusterSnapshotMessage, DeleteDBClusterSnapshotResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DeleteDBClusterSnapshotCommandInput extends DeleteDBClusterSnapshotMessage {
    }
    export interface DeleteDBClusterSnapshotCommandOutput extends DeleteDBClusterSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p>
        *         <note>
        *             <p>The cluster snapshot must be in the <code>available</code> state to be deleted.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DeleteDBClusterSnapshotCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DeleteDBClusterSnapshotCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DeleteDBClusterSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBClusterSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeleteDBClusterSnapshotCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DeleteDBClusterSnapshotCommand extends $Command<DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DeleteDBClusterSnapshotCommandInput;
            constructor(input: DeleteDBClusterSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DeleteDBInstanceMessage, DeleteDBInstanceResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DeleteDBInstanceCommandInput extends DeleteDBInstanceMessage {
    }
    export interface DeleteDBInstanceCommandOutput extends DeleteDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a previously provisioned instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DeleteDBInstanceCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DeleteDBInstanceCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DeleteDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBInstanceCommandInput} for command's `input` shape.
        * @see {@link DeleteDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DeleteDBInstanceCommand extends $Command<DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DeleteDBInstanceCommandInput;
            constructor(input: DeleteDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DeleteDBSubnetGroupMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DeleteDBSubnetGroupCommandInput extends DeleteDBSubnetGroupMessage {
    }
    export interface DeleteDBSubnetGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a subnet group.</p>
        *         <note>
        *             <p>The specified database subnet group must not be associated with any DB
        *                 instances.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DeleteDBSubnetGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DeleteDBSubnetGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DeleteDBSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteDBSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DeleteDBSubnetGroupCommand extends $Command<DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DeleteDBSubnetGroupCommandInput;
            constructor(input: DeleteDBSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DeleteEventSubscriptionMessage, DeleteEventSubscriptionResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DeleteEventSubscriptionCommandInput extends DeleteEventSubscriptionMessage {
    }
    export interface DeleteEventSubscriptionCommandOutput extends DeleteEventSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon DocumentDB event notification subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DeleteEventSubscriptionCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DeleteEventSubscriptionCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DeleteEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link DeleteEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DeleteEventSubscriptionCommand extends $Command<DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DeleteEventSubscriptionCommandInput;
            constructor(input: DeleteEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DeleteGlobalClusterMessage, DeleteGlobalClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DeleteGlobalClusterCommandInput extends DeleteGlobalClusterMessage {
    }
    export interface DeleteGlobalClusterCommandOutput extends DeleteGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.</p>
        *         <note>
        *             <p>This action only applies to Amazon DocumentDB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DeleteGlobalClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DeleteGlobalClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DeleteGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link DeleteGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DeleteGlobalClusterCommand extends $Command<DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DeleteGlobalClusterCommandInput;
            constructor(input: DeleteGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { CertificateMessage, DescribeCertificatesMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeCertificatesCommandInput extends DescribeCertificatesMessage {
    }
    export interface DescribeCertificatesCommandOutput extends CertificateMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeCertificatesCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeCertificatesCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCertificatesCommandInput} for command's `input` shape.
        * @see {@link DescribeCertificatesCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeCertificatesCommand extends $Command<DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeCertificatesCommandInput;
            constructor(input: DescribeCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterParameterGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBClusterParameterGroupsMessage, DescribeDBClusterParameterGroupsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBClusterParameterGroupsCommandInput extends DescribeDBClusterParameterGroupsMessage {
    }
    export interface DescribeDBClusterParameterGroupsCommandOutput extends DBClusterParameterGroupsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list contains only the description of the specified cluster parameter group. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBClusterParameterGroupsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBClusterParameterGroupsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBClusterParameterGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterParameterGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterParameterGroupsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBClusterParameterGroupsCommand extends $Command<DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBClusterParameterGroupsCommandInput;
            constructor(input: DescribeDBClusterParameterGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBClusterParameterGroupDetails, DescribeDBClusterParametersMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBClusterParametersCommandInput extends DescribeDBClusterParametersMessage {
    }
    export interface DescribeDBClusterParametersCommandOutput extends DBClusterParameterGroupDetails, __MetadataBearer {
    }
    /**
        * <p>Returns the detailed parameter list for a particular cluster parameter
        *             group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBClusterParametersCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBClusterParametersCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBClusterParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterParametersCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterParametersCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBClusterParametersCommand extends $Command<DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBClusterParametersCommandInput;
            constructor(input: DescribeDBClusterParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClustersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBClusterMessage, DescribeDBClustersMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBClustersCommandInput extends DescribeDBClustersMessage {
    }
    export interface DescribeDBClustersCommandOutput extends DBClusterMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about provisioned Amazon DocumentDB clusters. This API
        *             operation supports pagination. For certain management features
        *             such as cluster and instance lifecycle management, Amazon DocumentDB leverages
        *             operational technology that is shared with Amazon RDS and Amazon
        *             Neptune. Use the <code>filterName=engine,Values=docdb</code> filter
        *             parameter to return only Amazon DocumentDB clusters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBClustersCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBClustersCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBClustersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClustersCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClustersCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBClustersCommand extends $Command<DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBClustersCommandInput;
            constructor(input: DescribeDBClustersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterSnapshotAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribeDBClusterSnapshotAttributesMessage, DescribeDBClusterSnapshotAttributesResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBClusterSnapshotAttributesCommandInput extends DescribeDBClusterSnapshotAttributesMessage {
    }
    export interface DescribeDBClusterSnapshotAttributesCommandOutput extends DescribeDBClusterSnapshotAttributesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of cluster snapshot attribute names and values for a manual DB
        *             cluster snapshot.</p>
        *         <p>When you share snapshots with other Amazon Web Services accounts,
        *                 <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBClusterSnapshotAttributesCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBClusterSnapshotAttributesCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBClusterSnapshotAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterSnapshotAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterSnapshotAttributesCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBClusterSnapshotAttributesCommand extends $Command<DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBClusterSnapshotAttributesCommandInput;
            constructor(input: DescribeDBClusterSnapshotAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBClusterSnapshotMessage, DescribeDBClusterSnapshotsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBClusterSnapshotsCommandInput extends DescribeDBClusterSnapshotsMessage {
    }
    export interface DescribeDBClusterSnapshotsCommandOutput extends DBClusterSnapshotMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about cluster snapshots. This API operation supports pagination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBClusterSnapshotsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBClusterSnapshotsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBClusterSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterSnapshotsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBClusterSnapshotsCommand extends $Command<DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBClusterSnapshotsCommandInput;
            constructor(input: DescribeDBClusterSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBEngineVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBEngineVersionMessage, DescribeDBEngineVersionsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBEngineVersionsCommandInput extends DescribeDBEngineVersionsMessage {
    }
    export interface DescribeDBEngineVersionsCommandOutput extends DBEngineVersionMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the available engines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBEngineVersionsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBEngineVersionsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBEngineVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBEngineVersionsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBEngineVersionsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBEngineVersionsCommand extends $Command<DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBEngineVersionsCommandInput;
            constructor(input: DescribeDBEngineVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBInstanceMessage, DescribeDBInstancesMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBInstancesCommandInput extends DescribeDBInstancesMessage {
    }
    export interface DescribeDBInstancesCommandOutput extends DBInstanceMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBInstancesCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBInstancesCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBInstancesCommandInput} for command's `input` shape.
        * @see {@link DescribeDBInstancesCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBInstancesCommand extends $Command<DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBInstancesCommandInput;
            constructor(input: DescribeDBInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBSubnetGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBSubnetGroupMessage, DescribeDBSubnetGroupsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeDBSubnetGroupsCommandInput extends DescribeDBSubnetGroupsMessage {
    }
    export interface DescribeDBSubnetGroupsCommandOutput extends DBSubnetGroupMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>DBSubnetGroup</code> descriptions. If a
        *                 <code>DBSubnetGroupName</code> is specified, the list will contain only the descriptions of the specified <code>DBSubnetGroup</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeDBSubnetGroupsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeDBSubnetGroupsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeDBSubnetGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBSubnetGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBSubnetGroupsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeDBSubnetGroupsCommand extends $Command<DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeDBSubnetGroupsCommandInput;
            constructor(input: DescribeDBSubnetGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEngineDefaultClusterParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribeEngineDefaultClusterParametersMessage, DescribeEngineDefaultClusterParametersResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeEngineDefaultClusterParametersCommandInput extends DescribeEngineDefaultClusterParametersMessage {
    }
    export interface DescribeEngineDefaultClusterParametersCommandOutput extends DescribeEngineDefaultClusterParametersResult, __MetadataBearer {
    }
    /**
        * <p>Returns the default engine and system parameter information for the cluster database
        *             engine.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeEngineDefaultClusterParametersCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeEngineDefaultClusterParametersCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeEngineDefaultClusterParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEngineDefaultClusterParametersCommandInput} for command's `input` shape.
        * @see {@link DescribeEngineDefaultClusterParametersCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeEngineDefaultClusterParametersCommand extends $Command<DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeEngineDefaultClusterParametersCommandInput;
            constructor(input: DescribeEngineDefaultClusterParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventCategoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribeEventCategoriesMessage, EventCategoriesMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeEventCategoriesCommandInput extends DescribeEventCategoriesMessage {
    }
    export interface DescribeEventCategoriesCommandOutput extends EventCategoriesMessage, __MetadataBearer {
    }
    /**
        * <p>Displays a list of categories for all event source types, or, if specified, for a
        *             specified source type. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeEventCategoriesCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeEventCategoriesCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeEventCategoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventCategoriesCommandInput} for command's `input` shape.
        * @see {@link DescribeEventCategoriesCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeEventCategoriesCommand extends $Command<DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeEventCategoriesCommandInput;
            constructor(input: DescribeEventCategoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribeEventsMessage, EventsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeEventsCommandInput extends DescribeEventsMessage {
    }
    export interface DescribeEventsCommandOutput extends EventsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeEventsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeEventsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeEventsCommand extends $Command<DescribeEventsCommandInput, DescribeEventsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeEventsCommandInput;
            constructor(input: DescribeEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventsCommandInput, DescribeEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventSubscriptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribeEventSubscriptionsMessage, EventSubscriptionsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeEventSubscriptionsCommandInput extends DescribeEventSubscriptionsMessage {
    }
    export interface DescribeEventSubscriptionsCommandOutput extends EventSubscriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p>
        *         <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeEventSubscriptionsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeEventSubscriptionsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeEventSubscriptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventSubscriptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventSubscriptionsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeEventSubscriptionsCommand extends $Command<DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeEventSubscriptionsCommandInput;
            constructor(input: DescribeEventSubscriptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeGlobalClustersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribeGlobalClustersMessage, GlobalClustersMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeGlobalClustersCommandInput extends DescribeGlobalClustersMessage {
    }
    export interface DescribeGlobalClustersCommandOutput extends GlobalClustersMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about Amazon DocumentDB global  clusters. This API supports pagination.</p>
        *         <note>
        *             <p>This action only applies to Amazon DocumentDB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeGlobalClustersCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeGlobalClustersCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeGlobalClustersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeGlobalClustersCommandInput} for command's `input` shape.
        * @see {@link DescribeGlobalClustersCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeGlobalClustersCommand extends $Command<DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeGlobalClustersCommandInput;
            constructor(input: DescribeGlobalClustersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeOrderableDBInstanceOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribeOrderableDBInstanceOptionsMessage, OrderableDBInstanceOptionsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribeOrderableDBInstanceOptionsCommandInput extends DescribeOrderableDBInstanceOptionsMessage {
    }
    export interface DescribeOrderableDBInstanceOptionsCommandOutput extends OrderableDBInstanceOptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of orderable instance options for the specified engine.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribeOrderableDBInstanceOptionsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribeOrderableDBInstanceOptionsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribeOrderableDBInstanceOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrderableDBInstanceOptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeOrderableDBInstanceOptionsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribeOrderableDBInstanceOptionsCommand extends $Command<DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribeOrderableDBInstanceOptionsCommandInput;
            constructor(input: DescribeOrderableDBInstanceOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribePendingMaintenanceActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DescribePendingMaintenanceActionsMessage, PendingMaintenanceActionsMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface DescribePendingMaintenanceActionsCommandInput extends DescribePendingMaintenanceActionsMessage {
    }
    export interface DescribePendingMaintenanceActionsCommandOutput extends PendingMaintenanceActionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of resources (for example, instances) that have at least one pending
        *             maintenance action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, DescribePendingMaintenanceActionsCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, DescribePendingMaintenanceActionsCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new DescribePendingMaintenanceActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePendingMaintenanceActionsCommandInput} for command's `input` shape.
        * @see {@link DescribePendingMaintenanceActionsCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class DescribePendingMaintenanceActionsCommand extends $Command<DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput, DocDBClientResolvedConfig> {
            readonly input: DescribePendingMaintenanceActionsCommandInput;
            constructor(input: DescribePendingMaintenanceActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/FailoverDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { FailoverDBClusterMessage, FailoverDBClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface FailoverDBClusterCommandInput extends FailoverDBClusterMessage {
    }
    export interface FailoverDBClusterCommandOutput extends FailoverDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Forces a failover for a cluster.</p>
        *         <p>A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).</p>
        *         <p>If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, FailoverDBClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, FailoverDBClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new FailoverDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link FailoverDBClusterCommandInput} for command's `input` shape.
        * @see {@link FailoverDBClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class FailoverDBClusterCommand extends $Command<FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: FailoverDBClusterCommandInput;
            constructor(input: FailoverDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ListTagsForResourceMessage, TagListMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceMessage {
    }
    export interface ListTagsForResourceCommandOutput extends TagListMessage, __MetadataBearer {
    }
    /**
        * <p>Lists all tags on an Amazon DocumentDB resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ListTagsForResourceCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ListTagsForResourceCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ModifyDBClusterMessage, ModifyDBClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ModifyDBClusterCommandInput extends ModifyDBClusterMessage {
    }
    export interface ModifyDBClusterCommandOutput extends ModifyDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database
        *             configuration parameters by specifying these parameters and the new values in the
        *             request. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ModifyDBClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ModifyDBClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ModifyDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBClusterCommandInput} for command's `input` shape.
        * @see {@link ModifyDBClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ModifyDBClusterCommand extends $Command<ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ModifyDBClusterCommandInput;
            constructor(input: ModifyDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBClusterParameterGroupNameMessage, ModifyDBClusterParameterGroupMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ModifyDBClusterParameterGroupCommandInput extends ModifyDBClusterParameterGroupMessage {
    }
    export interface ModifyDBClusterParameterGroupCommandOutput extends DBClusterParameterGroupNameMessage, __MetadataBearer {
    }
    /**
        * <p> Modifies the parameters of a cluster parameter group. To modify more than one
        *             parameter, submit a list of the following: <code>ParameterName</code>,
        *                 <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20
        *             parameters can be modified in a single request. </p>
        *         <note>
        *             <p>Changes to dynamic parameters are applied immediately. Changes to static
        *                 parameters require a reboot or maintenance window
        *
        *                 before the change can take effect.</p>
        *         </note>
        *         <important>
        *             <p>After you create a cluster parameter group, you should wait at least 5 minutes
        *                 before creating your first cluster that uses that cluster parameter group as
        *                 the default parameter group. This allows Amazon DocumentDB to fully complete the create action
        *                 before the parameter group is used as the default for a new cluster. This step is
        *                 especially important for parameters that are critical when creating the default
        *                 database for a cluster, such as the character set for the default database
        *                 defined by the <code>character_set_database</code> parameter.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ModifyDBClusterParameterGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ModifyDBClusterParameterGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ModifyDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ModifyDBClusterParameterGroupCommand extends $Command<ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ModifyDBClusterParameterGroupCommandInput;
            constructor(input: ModifyDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterSnapshotAttributeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ModifyDBClusterSnapshotAttributeMessage, ModifyDBClusterSnapshotAttributeResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ModifyDBClusterSnapshotAttributeCommandInput extends ModifyDBClusterSnapshotAttributeMessage {
    }
    export interface ModifyDBClusterSnapshotAttributeCommandOutput extends ModifyDBClusterSnapshotAttributeResult, __MetadataBearer {
    }
    /**
        * <p>Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.</p>
        *         <p>To share a manual cluster snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code>, and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value <code>all</code> to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ModifyDBClusterSnapshotAttributeCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ModifyDBClusterSnapshotAttributeCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ModifyDBClusterSnapshotAttributeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBClusterSnapshotAttributeCommandInput} for command's `input` shape.
        * @see {@link ModifyDBClusterSnapshotAttributeCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ModifyDBClusterSnapshotAttributeCommand extends $Command<ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ModifyDBClusterSnapshotAttributeCommandInput;
            constructor(input: ModifyDBClusterSnapshotAttributeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ModifyDBInstanceMessage, ModifyDBInstanceResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ModifyDBInstanceCommandInput extends ModifyDBInstanceMessage {
    }
    export interface ModifyDBInstanceCommandOutput extends ModifyDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ModifyDBInstanceCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ModifyDBInstanceCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ModifyDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBInstanceCommandInput} for command's `input` shape.
        * @see {@link ModifyDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ModifyDBInstanceCommand extends $Command<ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ModifyDBInstanceCommandInput;
            constructor(input: ModifyDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ModifyDBSubnetGroupMessage, ModifyDBSubnetGroupResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ModifyDBSubnetGroupCommandInput extends ModifyDBSubnetGroupMessage {
    }
    export interface ModifyDBSubnetGroupCommandOutput extends ModifyDBSubnetGroupResult, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ModifyDBSubnetGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ModifyDBSubnetGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ModifyDBSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyDBSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ModifyDBSubnetGroupCommand extends $Command<ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ModifyDBSubnetGroupCommandInput;
            constructor(input: ModifyDBSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ModifyEventSubscriptionMessage, ModifyEventSubscriptionResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ModifyEventSubscriptionCommandInput extends ModifyEventSubscriptionMessage {
    }
    export interface ModifyEventSubscriptionCommandOutput extends ModifyEventSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing Amazon DocumentDB event notification subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ModifyEventSubscriptionCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ModifyEventSubscriptionCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ModifyEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link ModifyEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ModifyEventSubscriptionCommand extends $Command<ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ModifyEventSubscriptionCommandInput;
            constructor(input: ModifyEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { ModifyGlobalClusterMessage, ModifyGlobalClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ModifyGlobalClusterCommandInput extends ModifyGlobalClusterMessage {
    }
    export interface ModifyGlobalClusterCommandOutput extends ModifyGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.</p>
        *         <note>
        *             <p>This action only applies to Amazon DocumentDB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ModifyGlobalClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ModifyGlobalClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ModifyGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link ModifyGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ModifyGlobalClusterCommand extends $Command<ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ModifyGlobalClusterCommandInput;
            constructor(input: ModifyGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RebootDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { RebootDBInstanceMessage, RebootDBInstanceResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface RebootDBInstanceCommandInput extends RebootDBInstanceMessage {
    }
    export interface RebootDBInstanceCommandOutput extends RebootDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>You might need to reboot your instance, usually for maintenance reasons. For
        *             example, if you make certain changes, or if you change the cluster parameter group
        *             that is associated with the instance, you must reboot the instance for the changes to
        *             take effect. </p>
        *         <p>Rebooting an instance restarts the database engine service. Rebooting an instance
        *             results in a momentary outage, during which the instance status is set to
        *                 <i>rebooting</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, RebootDBInstanceCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, RebootDBInstanceCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new RebootDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootDBInstanceCommandInput} for command's `input` shape.
        * @see {@link RebootDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class RebootDBInstanceCommand extends $Command<RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput, DocDBClientResolvedConfig> {
            readonly input: RebootDBInstanceCommandInput;
            constructor(input: RebootDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveFromGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { RemoveFromGlobalClusterMessage, RemoveFromGlobalClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface RemoveFromGlobalClusterCommandInput extends RemoveFromGlobalClusterMessage {
    }
    export interface RemoveFromGlobalClusterCommandOutput extends RemoveFromGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. </p>
        *         <note>
        *             <p>This action only applies to Amazon DocumentDB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, RemoveFromGlobalClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, RemoveFromGlobalClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new RemoveFromGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveFromGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link RemoveFromGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class RemoveFromGlobalClusterCommand extends $Command<RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: RemoveFromGlobalClusterCommandInput;
            constructor(input: RemoveFromGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveSourceIdentifierFromSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { RemoveSourceIdentifierFromSubscriptionMessage, RemoveSourceIdentifierFromSubscriptionResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface RemoveSourceIdentifierFromSubscriptionCommandInput extends RemoveSourceIdentifierFromSubscriptionMessage {
    }
    export interface RemoveSourceIdentifierFromSubscriptionCommandOutput extends RemoveSourceIdentifierFromSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Removes a source identifier from an existing Amazon DocumentDB event notification
        *             subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, RemoveSourceIdentifierFromSubscriptionCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, RemoveSourceIdentifierFromSubscriptionCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new RemoveSourceIdentifierFromSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveSourceIdentifierFromSubscriptionCommandInput} for command's `input` shape.
        * @see {@link RemoveSourceIdentifierFromSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class RemoveSourceIdentifierFromSubscriptionCommand extends $Command<RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput, DocDBClientResolvedConfig> {
            readonly input: RemoveSourceIdentifierFromSubscriptionCommandInput;
            constructor(input: RemoveSourceIdentifierFromSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveTagsFromResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { RemoveTagsFromResourceMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface RemoveTagsFromResourceCommandInput extends RemoveTagsFromResourceMessage {
    }
    export interface RemoveTagsFromResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes metadata tags from an Amazon DocumentDB resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, RemoveTagsFromResourceCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, RemoveTagsFromResourceCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new RemoveTagsFromResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsFromResourceCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsFromResourceCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class RemoveTagsFromResourceCommand extends $Command<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput, DocDBClientResolvedConfig> {
            readonly input: RemoveTagsFromResourceCommandInput;
            constructor(input: RemoveTagsFromResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ResetDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { DBClusterParameterGroupNameMessage, ResetDBClusterParameterGroupMessage } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface ResetDBClusterParameterGroupCommandInput extends ResetDBClusterParameterGroupMessage {
    }
    export interface ResetDBClusterParameterGroupCommandOutput extends DBClusterParameterGroupNameMessage, __MetadataBearer {
    }
    /**
        * <p> Modifies the parameters of a cluster parameter group to the default value. To
        *             reset specific parameters, submit a list of the following: <code>ParameterName</code>
        *             and <code>ApplyMethod</code>. To reset the entire cluster parameter group, specify
        *             the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code>
        *             parameters. </p>
        *         <p> When you reset the entire group, dynamic parameters are updated immediately and
        *             static parameters are set to <code>pending-reboot</code> to take effect on the next DB
        *             instance reboot.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, ResetDBClusterParameterGroupCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, ResetDBClusterParameterGroupCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new ResetDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link ResetDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class ResetDBClusterParameterGroupCommand extends $Command<ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput, DocDBClientResolvedConfig> {
            readonly input: ResetDBClusterParameterGroupCommandInput;
            constructor(input: ResetDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RestoreDBClusterFromSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { RestoreDBClusterFromSnapshotMessage, RestoreDBClusterFromSnapshotResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface RestoreDBClusterFromSnapshotCommandInput extends RestoreDBClusterFromSnapshotMessage {
    }
    export interface RestoreDBClusterFromSnapshotCommandOutput extends RestoreDBClusterFromSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new cluster from a snapshot or cluster snapshot.</p>
        *         <p>If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.</p>
        *         <p>If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, RestoreDBClusterFromSnapshotCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, RestoreDBClusterFromSnapshotCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new RestoreDBClusterFromSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBClusterFromSnapshotCommandInput} for command's `input` shape.
        * @see {@link RestoreDBClusterFromSnapshotCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class RestoreDBClusterFromSnapshotCommand extends $Command<RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput, DocDBClientResolvedConfig> {
            readonly input: RestoreDBClusterFromSnapshotCommandInput;
            constructor(input: RestoreDBClusterFromSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RestoreDBClusterToPointInTimeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { RestoreDBClusterToPointInTimeMessage, RestoreDBClusterToPointInTimeResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface RestoreDBClusterToPointInTimeCommandInput extends RestoreDBClusterToPointInTimeMessage {
    }
    export interface RestoreDBClusterToPointInTimeCommandOutput extends RestoreDBClusterToPointInTimeResult, __MetadataBearer {
    }
    /**
        * <p>Restores a cluster to an arbitrary point in time. Users can restore to any point in
        *             time before <code>LatestRestorableTime</code> for up to
        *                 <code>BackupRetentionPeriod</code> days. The target cluster is created from the
        *             source cluster with the same configuration as the original cluster, except that
        *             the new cluster is created with the default security group. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, RestoreDBClusterToPointInTimeCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, RestoreDBClusterToPointInTimeCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new RestoreDBClusterToPointInTimeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBClusterToPointInTimeCommandInput} for command's `input` shape.
        * @see {@link RestoreDBClusterToPointInTimeCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class RestoreDBClusterToPointInTimeCommand extends $Command<RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput, DocDBClientResolvedConfig> {
            readonly input: RestoreDBClusterToPointInTimeCommandInput;
            constructor(input: RestoreDBClusterToPointInTimeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/StartDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { StartDBClusterMessage, StartDBClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface StartDBClusterCommandInput extends StartDBClusterMessage {
    }
    export interface StartDBClusterCommandOutput extends StartDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Restarts the stopped cluster that is specified by <code>DBClusterIdentifier</code>.
        *             For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and
        *                 Starting an Amazon DocumentDB Cluster</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, StartDBClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, StartDBClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new StartDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDBClusterCommandInput} for command's `input` shape.
        * @see {@link StartDBClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class StartDBClusterCommand extends $Command<StartDBClusterCommandInput, StartDBClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: StartDBClusterCommandInput;
            constructor(input: StartDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDBClusterCommandInput, StartDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/StopDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DocDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient";
    import { StopDBClusterMessage, StopDBClusterResult } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0";
    export interface StopDBClusterCommandInput extends StopDBClusterMessage {
    }
    export interface StopDBClusterCommandOutput extends StopDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Stops the running cluster that is specified by <code>DBClusterIdentifier</code>. The
        *             cluster must be in the <i>available</i> state. For more information, see
        *                 <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and
        *                 Starting an Amazon DocumentDB Cluster</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DocDBClient, StopDBClusterCommand } from "@aws-sdk/client-docdb"; // ES Modules import
        * // const { DocDBClient, StopDBClusterCommand } = require("@aws-sdk/client-docdb"); // CommonJS import
        * const client = new DocDBClient(config);
        * const command = new StopDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDBClusterCommandInput} for command's `input` shape.
        * @see {@link StopDBClusterCommandOutput} for command's `response` shape.
        * @see {@link DocDBClientResolvedConfig | config} for DocDBClient's `config` shape.
        *
        */
    export class StopDBClusterCommand extends $Command<StopDBClusterCommandInput, StopDBClusterCommandOutput, DocDBClientResolvedConfig> {
            readonly input: StopDBClusterCommandInput;
            constructor(input: StopDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DocDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDBClusterCommandInput, StopDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/DocDBClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/AddSourceIdentifierToSubscriptionCommand";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/AddTagsToResourceCommand";
    import { ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ApplyPendingMaintenanceActionCommand";
    import { CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CopyDBClusterParameterGroupCommand";
    import { CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CopyDBClusterSnapshotCommand";
    import { CreateDBClusterCommandInput, CreateDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterCommand";
    import { CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterParameterGroupCommand";
    import { CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBClusterSnapshotCommand";
    import { CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBInstanceCommand";
    import { CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateDBSubnetGroupCommand";
    import { CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateEventSubscriptionCommand";
    import { CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/CreateGlobalClusterCommand";
    import { DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterCommand";
    import { DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterParameterGroupCommand";
    import { DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBClusterSnapshotCommand";
    import { DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBInstanceCommand";
    import { DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteDBSubnetGroupCommand";
    import { DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteEventSubscriptionCommand";
    import { DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DeleteGlobalClusterCommand";
    import { DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeCertificatesCommand";
    import { DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterParameterGroupsCommand";
    import { DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterParametersCommand";
    import { DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClustersCommand";
    import { DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterSnapshotAttributesCommand";
    import { DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBClusterSnapshotsCommand";
    import { DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBEngineVersionsCommand";
    import { DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBInstancesCommand";
    import { DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeDBSubnetGroupsCommand";
    import { DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEngineDefaultClusterParametersCommand";
    import { DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventCategoriesCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventsCommand";
    import { DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeEventSubscriptionsCommand";
    import { DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeGlobalClustersCommand";
    import { DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribeOrderableDBInstanceOptionsCommand";
    import { DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/DescribePendingMaintenanceActionsCommand";
    import { FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/FailoverDBClusterCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterCommand";
    import { ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterParameterGroupCommand";
    import { ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBClusterSnapshotAttributeCommand";
    import { ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBInstanceCommand";
    import { ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyDBSubnetGroupCommand";
    import { ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyEventSubscriptionCommand";
    import { ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ModifyGlobalClusterCommand";
    import { RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RebootDBInstanceCommand";
    import { RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveFromGlobalClusterCommand";
    import { RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveSourceIdentifierFromSubscriptionCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RemoveTagsFromResourceCommand";
    import { ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/ResetDBClusterParameterGroupCommand";
    import { RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RestoreDBClusterFromSnapshotCommand";
    import { RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/RestoreDBClusterToPointInTimeCommand";
    import { StartDBClusterCommandInput, StartDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/StartDBClusterCommand";
    import { StopDBClusterCommandInput, StopDBClusterCommandOutput } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/commands/StopDBClusterCommand";
    export type ServiceInputTypes = AddSourceIdentifierToSubscriptionCommandInput | AddTagsToResourceCommandInput | ApplyPendingMaintenanceActionCommandInput | CopyDBClusterParameterGroupCommandInput | CopyDBClusterSnapshotCommandInput | CreateDBClusterCommandInput | CreateDBClusterParameterGroupCommandInput | CreateDBClusterSnapshotCommandInput | CreateDBInstanceCommandInput | CreateDBSubnetGroupCommandInput | CreateEventSubscriptionCommandInput | CreateGlobalClusterCommandInput | DeleteDBClusterCommandInput | DeleteDBClusterParameterGroupCommandInput | DeleteDBClusterSnapshotCommandInput | DeleteDBInstanceCommandInput | DeleteDBSubnetGroupCommandInput | DeleteEventSubscriptionCommandInput | DeleteGlobalClusterCommandInput | DescribeCertificatesCommandInput | DescribeDBClusterParameterGroupsCommandInput | DescribeDBClusterParametersCommandInput | DescribeDBClusterSnapshotAttributesCommandInput | DescribeDBClusterSnapshotsCommandInput | DescribeDBClustersCommandInput | DescribeDBEngineVersionsCommandInput | DescribeDBInstancesCommandInput | DescribeDBSubnetGroupsCommandInput | DescribeEngineDefaultClusterParametersCommandInput | DescribeEventCategoriesCommandInput | DescribeEventSubscriptionsCommandInput | DescribeEventsCommandInput | DescribeGlobalClustersCommandInput | DescribeOrderableDBInstanceOptionsCommandInput | DescribePendingMaintenanceActionsCommandInput | FailoverDBClusterCommandInput | ListTagsForResourceCommandInput | ModifyDBClusterCommandInput | ModifyDBClusterParameterGroupCommandInput | ModifyDBClusterSnapshotAttributeCommandInput | ModifyDBInstanceCommandInput | ModifyDBSubnetGroupCommandInput | ModifyEventSubscriptionCommandInput | ModifyGlobalClusterCommandInput | RebootDBInstanceCommandInput | RemoveFromGlobalClusterCommandInput | RemoveSourceIdentifierFromSubscriptionCommandInput | RemoveTagsFromResourceCommandInput | ResetDBClusterParameterGroupCommandInput | RestoreDBClusterFromSnapshotCommandInput | RestoreDBClusterToPointInTimeCommandInput | StartDBClusterCommandInput | StopDBClusterCommandInput;
    export type ServiceOutputTypes = AddSourceIdentifierToSubscriptionCommandOutput | AddTagsToResourceCommandOutput | ApplyPendingMaintenanceActionCommandOutput | CopyDBClusterParameterGroupCommandOutput | CopyDBClusterSnapshotCommandOutput | CreateDBClusterCommandOutput | CreateDBClusterParameterGroupCommandOutput | CreateDBClusterSnapshotCommandOutput | CreateDBInstanceCommandOutput | CreateDBSubnetGroupCommandOutput | CreateEventSubscriptionCommandOutput | CreateGlobalClusterCommandOutput | DeleteDBClusterCommandOutput | DeleteDBClusterParameterGroupCommandOutput | DeleteDBClusterSnapshotCommandOutput | DeleteDBInstanceCommandOutput | DeleteDBSubnetGroupCommandOutput | DeleteEventSubscriptionCommandOutput | DeleteGlobalClusterCommandOutput | DescribeCertificatesCommandOutput | DescribeDBClusterParameterGroupsCommandOutput | DescribeDBClusterParametersCommandOutput | DescribeDBClusterSnapshotAttributesCommandOutput | DescribeDBClusterSnapshotsCommandOutput | DescribeDBClustersCommandOutput | DescribeDBEngineVersionsCommandOutput | DescribeDBInstancesCommandOutput | DescribeDBSubnetGroupsCommandOutput | DescribeEngineDefaultClusterParametersCommandOutput | DescribeEventCategoriesCommandOutput | DescribeEventSubscriptionsCommandOutput | DescribeEventsCommandOutput | DescribeGlobalClustersCommandOutput | DescribeOrderableDBInstanceOptionsCommandOutput | DescribePendingMaintenanceActionsCommandOutput | FailoverDBClusterCommandOutput | ListTagsForResourceCommandOutput | ModifyDBClusterCommandOutput | ModifyDBClusterParameterGroupCommandOutput | ModifyDBClusterSnapshotAttributeCommandOutput | ModifyDBInstanceCommandOutput | ModifyDBSubnetGroupCommandOutput | ModifyEventSubscriptionCommandOutput | ModifyGlobalClusterCommandOutput | RebootDBInstanceCommandOutput | RemoveFromGlobalClusterCommandOutput | RemoveSourceIdentifierFromSubscriptionCommandOutput | RemoveTagsFromResourceCommandOutput | ResetDBClusterParameterGroupCommandOutput | RestoreDBClusterFromSnapshotCommandOutput | RestoreDBClusterToPointInTimeCommandOutput | StartDBClusterCommandOutput | StopDBClusterCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type DocDBClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of DocDBClient class constructor that set the region, credentials and other options.
        */
    export interface DocDBClientConfig extends DocDBClientConfigType {
    }
    type DocDBClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of DocDBClient class. This is resolved and normalized from the {@link DocDBClientConfig | constructor configuration interface}.
        */
    export interface DocDBClientResolvedConfig extends DocDBClientResolvedConfigType {
    }
    /**
        * <p>Amazon DocumentDB API documentation</p>
        */
    export class DocDBClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, DocDBClientResolvedConfig> {
            /**
                * The resolved configuration of DocDBClient class. This is resolved and normalized from the {@link DocDBClientConfig | constructor configuration interface}.
                */
            readonly config: DocDBClientResolvedConfig;
            constructor(configuration: DocDBClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { DocDBServiceException as __BaseException } from "@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/DocDBServiceException";
    /**
        * <p>Represents the input to <a>AddSourceIdentifierToSubscription</a>.
        *         </p>
        */
    export interface AddSourceIdentifierToSubscriptionMessage {
            /**
                * <p>The name of the Amazon DocumentDB event notification subscription that you
                *             want to add a source identifier to.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p>The identifier of the event source to be added:</p>
                *         <ul>
                *             <li>
                *                 <p>If the source type is an instance, a
                *                     <code>DBInstanceIdentifier</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a security group, a
                *                     <code>DBSecurityGroupName</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a parameter group, a
                *                     <code>DBParameterGroupName</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a snapshot, a
                *                     <code>DBSnapshotIdentifier</code> must be provided.</p>
                *             </li>
                *          </ul>
                */
            SourceIdentifier: string | undefined;
    }
    export namespace AddSourceIdentifierToSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddSourceIdentifierToSubscriptionMessage) => any;
    }
    /**
        * <p>Detailed information about an event to which you have subscribed.</p>
        */
    export interface EventSubscription {
            /**
                * <p>The Amazon Web Services customer account that is associated with the Amazon DocumentDB event notification
                *             subscription.</p>
                */
            CustomerAwsId?: string;
            /**
                * <p>The Amazon DocumentDB event notification subscription ID.</p>
                */
            CustSubscriptionId?: string;
            /**
                * <p>The topic ARN of the Amazon DocumentDB event notification subscription.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The status of the Amazon DocumentDB event notification subscription.</p>
                *         <p>Constraints:</p>
                *         <p>Can be one of the following: <code>creating</code>, <code>modifying</code>,
                *                 <code>deleting</code>, <code>active</code>, <code>no-permission</code>,
                *                 <code>topic-not-exist</code>
                *          </p>
                *         <p>The <code>no-permission</code> status indicates that Amazon DocumentDB no longer has permission
                *             to post to the SNS topic. The <code>topic-not-exist</code> status indicates that the
                *             topic was deleted after the subscription was created.</p>
                */
            Status?: string;
            /**
                * <p>The time at which the Amazon DocumentDB event notification subscription was created.</p>
                */
            SubscriptionCreationTime?: string;
            /**
                * <p>The source type for the Amazon DocumentDB event notification subscription.</p>
                */
            SourceType?: string;
            /**
                * <p>A list of source IDs for the Amazon DocumentDB event notification subscription.</p>
                */
            SourceIdsList?: string[];
            /**
                * <p>A list of event categories for the Amazon DocumentDB event notification subscription.</p>
                */
            EventCategoriesList?: string[];
            /**
                * <p>A Boolean value indicating whether the subscription is enabled. A value of
                *                 <code>true</code> indicates that the subscription is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) for the event subscription.</p>
                */
            EventSubscriptionArn?: string;
    }
    export namespace EventSubscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSubscription) => any;
    }
    export interface AddSourceIdentifierToSubscriptionResult {
            /**
                * <p>Detailed information about an event to which you have subscribed.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace AddSourceIdentifierToSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddSourceIdentifierToSubscriptionResult) => any;
    }
    /**
        * <p>The requested source could not be found. </p>
        */
    export class SourceNotFoundFault extends __BaseException {
            readonly name: "SourceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SourceNotFoundFault, __BaseException>);
    }
    /**
        * <p>The subscription name does not exist. </p>
        */
    export class SubscriptionNotFoundFault extends __BaseException {
            readonly name: "SubscriptionNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubscriptionNotFoundFault, __BaseException>);
    }
    /**
        * <p>Metadata assigned to an Amazon DocumentDB resource consisting of a key-value pair.</p>
        */
    export interface Tag {
            /**
                * <p>The required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with "<code>aws:</code>" or "<code>rds:</code>". The string can contain only the set of Unicode letters, digits, white space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").</p>
                */
            Key?: string;
            /**
                * <p>The optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with "<code>aws:</code>" or "<code>rds:</code>". The string can contain only the set of Unicode letters, digits, white space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Represents the input to <a>AddTagsToResource</a>.
        *         </p>
        */
    export interface AddTagsToResourceMessage {
            /**
                * <p>The Amazon DocumentDB resource that the tags are added to. This value is an
                *             Amazon Resource Name .</p>
                */
            ResourceName: string | undefined;
            /**
                * <p>The tags to be assigned to the Amazon DocumentDB resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace AddTagsToResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsToResourceMessage) => any;
    }
    /**
        * <p>
        *             <code>DBClusterIdentifier</code> doesn't refer to an existing cluster. </p>
        */
    export class DBClusterNotFoundFault extends __BaseException {
            readonly name: "DBClusterNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterNotFoundFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBInstanceIdentifier</code> doesn't refer to an existing instance. </p>
        */
    export class DBInstanceNotFoundFault extends __BaseException {
            readonly name: "DBInstanceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceNotFoundFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBSnapshotIdentifier</code> doesn't refer to an existing snapshot. </p>
        */
    export class DBSnapshotNotFoundFault extends __BaseException {
            readonly name: "DBSnapshotNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSnapshotNotFoundFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>ApplyPendingMaintenanceAction</a>.
        *         </p>
        */
    export interface ApplyPendingMaintenanceActionMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that the pending
                *             maintenance action applies to.</p>
                */
            ResourceIdentifier: string | undefined;
            /**
                * <p>The pending maintenance action to apply to this resource.</p>
                *         <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>
                *         </p>
                */
            ApplyAction: string | undefined;
            /**
                * <p>A value that specifies the type of opt-in request or undoes an
                *             opt-in request. An opt-in request of type <code>immediate</code>
                *             can't be undone.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>immediate</code> - Apply the maintenance action
                *                     immediately.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>next-maintenance</code> - Apply the maintenance
                *                     action during the next maintenance window for the resource.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>undo-opt-in</code> - Cancel any existing
                *                     <code>next-maintenance</code> opt-in requests.</p>
                *             </li>
                *          </ul>
                */
            OptInType: string | undefined;
    }
    export namespace ApplyPendingMaintenanceActionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyPendingMaintenanceActionMessage) => any;
    }
    /**
        * <p>Provides information about a pending maintenance action for a resource.</p>
        */
    export interface PendingMaintenanceAction {
            /**
                * <p>The type of pending maintenance action that is available for the resource.</p>
                */
            Action?: string;
            /**
                * <p>The date of the maintenance window when the action is applied. The maintenance action
                *             is applied to the resource during its first maintenance window after this date. If this
                *             date is specified, any <code>next-maintenance</code> opt-in requests are ignored.</p>
                */
            AutoAppliedAfterDate?: Date;
            /**
                * <p>The date when the maintenance action is automatically applied. The maintenance action
                *             is applied to the resource on this date regardless of the maintenance window for the
                *             resource. If this date is specified, any <code>immediate</code> opt-in requests are
                *             ignored.</p>
                */
            ForcedApplyDate?: Date;
            /**
                * <p>Indicates the type of opt-in request that has been received for the resource.</p>
                */
            OptInStatus?: string;
            /**
                * <p>The effective date when the pending maintenance action is applied to the
                *             resource.</p>
                */
            CurrentApplyDate?: Date;
            /**
                * <p>A description providing more detail about the maintenance action.</p>
                */
            Description?: string;
    }
    export namespace PendingMaintenanceAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingMaintenanceAction) => any;
    }
    /**
        * <p>Represents the output of <a>ApplyPendingMaintenanceAction</a>.
        *         </p>
        */
    export interface ResourcePendingMaintenanceActions {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that has pending
                *             maintenance actions.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>A list that provides details about the pending maintenance actions
                *             for the resource.</p>
                */
            PendingMaintenanceActionDetails?: PendingMaintenanceAction[];
    }
    export namespace ResourcePendingMaintenanceActions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourcePendingMaintenanceActions) => any;
    }
    export interface ApplyPendingMaintenanceActionResult {
            /**
                * <p>Represents the output of <a>ApplyPendingMaintenanceAction</a>.
                *         </p>
                */
            ResourcePendingMaintenanceActions?: ResourcePendingMaintenanceActions;
    }
    export namespace ApplyPendingMaintenanceActionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyPendingMaintenanceActionResult) => any;
    }
    /**
        * <p>The cluster isn't in a valid state.</p>
        */
    export class InvalidDBClusterStateFault extends __BaseException {
            readonly name: "InvalidDBClusterStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBClusterStateFault, __BaseException>);
    }
    /**
        * <p> The specified instance isn't in the <i>available</i> state.
        *         </p>
        */
    export class InvalidDBInstanceStateFault extends __BaseException {
            readonly name: "InvalidDBInstanceStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBInstanceStateFault, __BaseException>);
    }
    /**
        * <p>The specified resource ID was not found.</p>
        */
    export class ResourceNotFoundFault extends __BaseException {
            readonly name: "ResourceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>CopyDBClusterParameterGroup</a>.
        *         </p>
        */
    export interface CopyDBClusterParameterGroupMessage {
            /**
                * <p>The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid cluster parameter group.</p>
                *             </li>
                *             <li>
                *                 <p>If the source cluster parameter group is in the same Amazon Web Services Region as the copy, specify a valid parameter group identifier; for example, <code>my-db-cluster-param-group</code>, or a valid ARN.</p>
                *             </li>
                *             <li>
                *                 <p>If the source parameter group is in a different Amazon Web Services Region than the copy, specify a valid cluster parameter group ARN; for example, <code>arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group</code>.</p>
                *             </li>
                *          </ul>
                */
            SourceDBClusterParameterGroupIdentifier: string | undefined;
            /**
                * <p>The identifier for the copied cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Cannot be null, empty, or blank.</p>
                *             </li>
                *             <li>
                *                 <p>Must contain from 1 to 255 letters, numbers, or hyphens.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.
                *                     </p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-param-group1</code>
                *         </p>
                */
            TargetDBClusterParameterGroupIdentifier: string | undefined;
            /**
                * <p>A description for the copied cluster parameter group.</p>
                */
            TargetDBClusterParameterGroupDescription: string | undefined;
            /**
                * <p>The tags that are to be assigned to the parameter group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CopyDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p>Detailed information about a cluster parameter group. </p>
        */
    export interface DBClusterParameterGroup {
            /**
                * <p>Provides the name of the cluster parameter group.</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>Provides the name of the parameter group family that this cluster parameter
                *             group is compatible with.</p>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>Provides the customer-specified description for this cluster parameter
                *             group.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the cluster parameter group.</p>
                */
            DBClusterParameterGroupArn?: string;
    }
    export namespace DBClusterParameterGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroup) => any;
    }
    export interface CopyDBClusterParameterGroupResult {
            /**
                * <p>Detailed information about a cluster parameter group. </p>
                */
            DBClusterParameterGroup?: DBClusterParameterGroup;
    }
    export namespace CopyDBClusterParameterGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterParameterGroupResult) => any;
    }
    /**
        * <p>A parameter group with the same name already exists.</p>
        */
    export class DBParameterGroupAlreadyExistsFault extends __BaseException {
            readonly name: "DBParameterGroupAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBParameterGroupAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBParameterGroupName</code> doesn't refer to an existing parameter group. </p>
        */
    export class DBParameterGroupNotFoundFault extends __BaseException {
            readonly name: "DBParameterGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBParameterGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>This request would cause you to exceed the allowed number of parameter groups.</p>
        */
    export class DBParameterGroupQuotaExceededFault extends __BaseException {
            readonly name: "DBParameterGroupQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBParameterGroupQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>CopyDBClusterSnapshot</a>.
        *         </p>
        */
    export interface CopyDBClusterSnapshotMessage {
            /**
                * <p>The identifier of the cluster snapshot to copy. This parameter is
                *             not case sensitive.</p>
                *
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid system snapshot in the
                *                     <i>available</i> state.</p>
                *             </li>
                *             <li>
                *                 <p>If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid snapshot identifier.</p>
                *             </li>
                *             <li>
                *
                *                 <p>If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid cluster snapshot ARN.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-snapshot1</code>
                *         </p>
                */
            SourceDBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The identifier of the new cluster snapshot to create from the
                *             source cluster snapshot. This parameter is not case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.
                *                     </p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-snapshot2</code>
                *         </p>
                */
            TargetDBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The KMS key ID for an encrypted cluster snapshot. The KMS
                *             key ID is the Amazon Resource Name (ARN), KMS key identifier, or
                *             the KMS key alias for the KMS encryption key. </p>
                *
                *         <p>If you copy an encrypted cluster snapshot from your Amazon Web Services account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the cluster snapshot is encrypted with the same KMS key as the source cluster snapshot.</p>
                *
                *         <p>If you copy an encrypted cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for <code>KmsKeyId</code>.</p>
                *
                *         <p>To copy an encrypted cluster snapshot to another Amazon Web Services Region, set <code>KmsKeyId</code> to the KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. KMS encryption keys are specific to the Amazon Web Services Region that they are created in, and you can't use encryption keys from one Amazon Web Services Region in another Amazon Web Services Region.</p>
                *
                *         <p>If you copy an unencrypted cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The URL that contains a Signature Version 4 signed request for the<code>CopyDBClusterSnapshot</code> API action in the Amazon Web Services Region that contains the source cluster snapshot to copy. You must use the <code>PreSignedUrl</code> parameter when copying a cluster snapshot from another Amazon Web Services Region.</p>
                *
                *         <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify
                *             <code>SourceRegion</code> (or <code>--source-region</code> for the
                *             CLI) instead of specifying <code>PreSignedUrl</code> manually.
                *             Specifying <code>SourceRegion</code> autogenerates a pre-signed URL
                *             that is a valid request for the operation that can be executed in
                *             the source Amazon Web Services Region.</p>
                *
                *         <p>The presigned URL must be a valid request for the
                *             <code>CopyDBClusterSnapshot</code> API action that can be executed
                *             in the source Amazon Web Services Region that contains the cluster snapshot to be
                *             copied. The presigned URL request must contain the following
                *             parameter values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SourceRegion</code> - The ID of the region that
                *                     contains the snapshot to be copied.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SourceDBClusterSnapshotIdentifier</code> - The
                *                     identifier for the the encrypted cluster snapshot to be
                *                     copied. This identifier must be in the Amazon Resource Name
                *                     (ARN) format for the source Amazon Web Services Region. For example, if you
                *                     are copying an encrypted cluster snapshot from the us-east-1
                *                     Amazon Web Services Region, then your
                *                     <code>SourceDBClusterSnapshotIdentifier</code> looks
                *                     something like the following:
                *                     <code>arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TargetDBClusterSnapshotIdentifier</code> - The
                *                     identifier for the new cluster snapshot to be created. This
                *                     parameter isn't case sensitive.</p>
                *             </li>
                *          </ul>
                */
            PreSignedUrl?: string;
            /**
                * <p>Set to <code>true</code> to copy all tags from the source cluster
                *             snapshot to the target cluster snapshot, and otherwise
                *             <code>false</code>. The default is <code>false</code>.</p>
                */
            CopyTags?: boolean;
            /**
                * <p>The tags to be assigned to the cluster snapshot.</p>
                */
            Tags?: Tag[];
    }
    export namespace CopyDBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterSnapshotMessage) => any;
    }
    /**
        * <p>Detailed information about a cluster snapshot. </p>
        */
    export interface DBClusterSnapshot {
            /**
                * <p>Provides the list of Amazon EC2 Availability Zones that instances in the cluster
                *             snapshot can be restored in.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>Specifies the identifier for the cluster snapshot.</p>
                */
            DBClusterSnapshotIdentifier?: string;
            /**
                * <p>Specifies the cluster identifier of the cluster that this cluster snapshot
                *             was created from.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Provides the time when the snapshot was taken, in UTC.</p>
                */
            SnapshotCreateTime?: Date;
            /**
                * <p>Specifies the name of the database engine.</p>
                */
            Engine?: string;
            /**
                * <p>Specifies the status of this cluster snapshot.</p>
                */
            Status?: string;
            /**
                * <p>Specifies the port that the cluster was listening on at the time of the
                *             snapshot.</p>
                */
            Port?: number;
            /**
                * <p>Provides the virtual private cloud (VPC) ID that is associated with the cluster
                *             snapshot.</p>
                */
            VpcId?: string;
            /**
                * <p>Specifies the time when the cluster was created, in Universal Coordinated Time
                *             (UTC).</p>
                */
            ClusterCreateTime?: Date;
            /**
                * <p>Provides the master user name for the cluster snapshot.</p>
                */
            MasterUsername?: string;
            /**
                * <p>Provides the version of the database engine for this cluster snapshot.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Provides the type of the cluster snapshot.</p>
                */
            SnapshotType?: string;
            /**
                * <p>Specifies the percentage of the estimated data that has been transferred.</p>
                */
            PercentProgress?: number;
            /**
                * <p>Specifies whether the cluster snapshot is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>If <code>StorageEncrypted</code> is <code>true</code>, the KMS key identifier for the encrypted cluster snapshot.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the cluster snapshot.</p>
                */
            DBClusterSnapshotArn?: string;
            /**
                * <p>If the cluster snapshot was copied from a source cluster snapshot, the ARN for
                *             the source cluster snapshot; otherwise, a null value.</p>
                */
            SourceDBClusterSnapshotArn?: string;
    }
    export namespace DBClusterSnapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshot) => any;
    }
    export interface CopyDBClusterSnapshotResult {
            /**
                * <p>Detailed information about a cluster snapshot. </p>
                */
            DBClusterSnapshot?: DBClusterSnapshot;
    }
    export namespace CopyDBClusterSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterSnapshotResult) => any;
    }
    /**
        * <p>You already have a cluster snapshot with the given identifier.</p>
        */
    export class DBClusterSnapshotAlreadyExistsFault extends __BaseException {
            readonly name: "DBClusterSnapshotAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterSnapshotAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing cluster snapshot. </p>
        */
    export class DBClusterSnapshotNotFoundFault extends __BaseException {
            readonly name: "DBClusterSnapshotNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterSnapshotNotFoundFault, __BaseException>);
    }
    /**
        * <p>The provided value isn't a valid cluster snapshot state.</p>
        */
    export class InvalidDBClusterSnapshotStateFault extends __BaseException {
            readonly name: "InvalidDBClusterSnapshotStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBClusterSnapshotStateFault, __BaseException>);
    }
    /**
        * <p>An error occurred when accessing an KMS key.</p>
        */
    export class KMSKeyNotAccessibleFault extends __BaseException {
            readonly name: "KMSKeyNotAccessibleFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSKeyNotAccessibleFault, __BaseException>);
    }
    /**
        * <p>The request would cause you to exceed the allowed number of snapshots.</p>
        */
    export class SnapshotQuotaExceededFault extends __BaseException {
            readonly name: "SnapshotQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SnapshotQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>CreateDBCluster</a>.
        *         </p>
        */
    export interface CreateDBClusterMessage {
            /**
                * <p>A list of Amazon EC2 Availability Zones that instances in the
                *             cluster can be created in.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The number of days for which automated backups are retained. You
                *             must specify a minimum value of 1.</p>
                *         <p>Default: 1</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be a value from 1 to 35.</p>
                *             </li>
                *          </ul>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The cluster identifier. This parameter is stored as a lowercase
                *             string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.
                *                     </p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster</code>
                *         </p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The name of the cluster parameter group to associate with this
                *             cluster.</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>A list of EC2 VPC security groups to associate with this cluster.
                *             </p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>A subnet group to associate with this cluster.</p>
                *         <p>Constraints: Must match the name of an existing
                *             <code>DBSubnetGroup</code>. Must not be default.</p>
                *         <p>Example: <code>mySubnetgroup</code>
                *         </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>The name of the database engine to be used for this cluster.</p>
                *         <p>Valid values: <code>docdb</code>
                *         </p>
                */
            Engine: string | undefined;
            /**
                * <p>The version number of the database engine to use. The <code>--engine-version</code> will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The port number on which the instances in the cluster accept
                *             connections.</p>
                */
            Port?: number;
            /**
                * <p>The name of the master user for the cluster.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be from 1 to 63 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot be a reserved word for the chosen database engine.
                *                     </p>
                *             </li>
                *          </ul>
                */
            MasterUsername?: string;
            /**
                * <p>The password for the master database user. This password can
                *             contain any printable ASCII character except forward slash (/),
                *             double quote ("), or the "at" symbol (@).</p>
                *         <p>Constraints: Must contain from 8 to 100 characters.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>The daily time range during which automated backups are created if
                *             automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p>
                *         <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.
                *                     </p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur,
                *             in Universal Coordinated Time (UTC).</p>
                *         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *         </p>
                *         <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
                *         <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
                *         <p>Constraints: Minimum 30-minute window.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The tags to be assigned to the cluster.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies whether the cluster is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The KMS key identifier for an encrypted cluster.</p>
                *         <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
                *         <p>If an encryption key is not specified in <code>KmsKeyId</code>:
                *             </p>
                *         <ul>
                *             <li>
                *                 <p>If the <code>StorageEncrypted</code> parameter is
                *                     <code>true</code>, Amazon DocumentDB uses your default encryption key.
                *                     </p>
                *             </li>
                *          </ul>
                *         <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Not currently supported.
                *             </p>
                */
            PreSignedUrl?: string;
            /**
                * <p>A list of log types that need to be enabled for exporting to Amazon
                *             CloudWatch Logs. You can enable audit logs or profiler logs. For more
                *             information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html">
                *                 Auditing Amazon DocumentDB Events</a>
                *             and <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html">
                *                 Profiling Amazon DocumentDB Operations</a>.
                *         </p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>Specifies whether this cluster can be deleted. If
                *             <code>DeletionProtection</code> is enabled, the cluster cannot be
                *             deleted unless it is modified and <code>DeletionProtection</code> is
                *             disabled. <code>DeletionProtection</code> protects clusters from
                *             being accidentally deleted.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The cluster identifier of the new global cluster.</p>
                */
            GlobalClusterIdentifier?: string;
    }
    export namespace CreateDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterMessage) => any;
    }
    /**
        * <p>Describes an Identity and Access Management (IAM) role that is associated with a
        *             cluster.</p>
        */
    export interface DBClusterRole {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAMrole that is associated with the DB
                *             cluster.</p>
                */
            RoleArn?: string;
            /**
                * <p>Describes the state of association between the IAMrole and the cluster. The <code>Status</code> property returns one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ACTIVE</code> - The IAMrole ARN is associated with the cluster and can be used to access other Amazon Web Services services on your behalf.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> - The IAMrole ARN is being associated with the cluster.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>INVALID</code> - The IAMrole ARN is associated with the cluster, but the cluster cannot assume the IAMrole to access other Amazon Web Services services on your behalf.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
    }
    export namespace DBClusterRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterRole) => any;
    }
    /**
        * <p>Contains information about an instance that is part of a cluster.</p>
        */
    export interface DBClusterMember {
            /**
                * <p>Specifies the instance identifier for this member of the cluster.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>A value that is <code>true</code> if the cluster member is the primary instance for
                *             the cluster and <code>false</code> otherwise.</p>
                */
            IsClusterWriter?: boolean;
            /**
                * <p>Specifies the status of the cluster parameter group for this member of the DB
                *             cluster.</p>
                */
            DBClusterParameterGroupStatus?: string;
            /**
                * <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the
                *             primary instance after a failure of the existing primary instance. </p>
                */
            PromotionTier?: number;
    }
    export namespace DBClusterMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterMember) => any;
    }
    /**
        * <p>Used as a response element for queries on virtual private cloud (VPC) security group
        *             membership.</p>
        */
    export interface VpcSecurityGroupMembership {
            /**
                * <p>The name of the VPC security group.</p>
                */
            VpcSecurityGroupId?: string;
            /**
                * <p>The status of the VPC security group.</p>
                */
            Status?: string;
    }
    export namespace VpcSecurityGroupMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcSecurityGroupMembership) => any;
    }
    /**
        * <p>Detailed information about a cluster. </p>
        */
    export interface DBCluster {
            /**
                * <p>Provides the list of Amazon EC2 Availability Zones that instances in the cluster
                *             can be created in.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>Specifies the number of days for which automatic snapshots are retained.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>Contains a user-supplied cluster identifier. This identifier is the unique key that
                *             identifies a cluster.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Specifies the name of the cluster parameter group for the cluster.</p>
                */
            DBClusterParameterGroup?: string;
            /**
                * <p>Specifies information on the subnet group that is associated with the cluster, including the name, description, and subnets in the subnet group.</p>
                */
            DBSubnetGroup?: string;
            /**
                * <p>Specifies the current state of this cluster.</p>
                */
            Status?: string;
            /**
                * <p>Specifies the progress of the operation as a percentage.</p>
                */
            PercentProgress?: string;
            /**
                * <p>The earliest time to which a database can be restored with point-in-time
                *             restore.</p>
                */
            EarliestRestorableTime?: Date;
            /**
                * <p>Specifies the connection endpoint for the primary instance of the cluster.</p>
                */
            Endpoint?: string;
            /**
                * <p>The reader endpoint for the cluster. The reader endpoint for a cluster load balances connections across the Amazon DocumentDB replicas that are available in a cluster. As clients request new connections to the reader endpoint, Amazon DocumentDB distributes the connection requests among the Amazon DocumentDB replicas in the cluster. This functionality can help balance your read workload across multiple Amazon DocumentDB replicas in your cluster. </p>
                *         <p>If a failover occurs, and the Amazon DocumentDB replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Amazon DocumentDB replicas in the cluster, you can then reconnect to the reader endpoint.</p>
                */
            ReaderEndpoint?: string;
            /**
                * <p>Specifies whether the cluster has instances in multiple Availability Zones.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>Provides the name of the database engine to be used for this cluster.</p>
                */
            Engine?: string;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Specifies the latest time to which a database can be restored with point-in-time
                *             restore.</p>
                */
            LatestRestorableTime?: Date;
            /**
                * <p>Specifies the port that the database engine is listening on.</p>
                */
            Port?: number;
            /**
                * <p>Contains the master user name for the cluster.</p>
                */
            MasterUsername?: string;
            /**
                * <p>Specifies the daily time range during which automated backups are created if automated
                *             backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>Specifies the weekly time range during which system maintenance can occur, in
                *             Universal Coordinated Time (UTC).</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>Contains the identifier of the source cluster if this cluster is a secondary cluster.</p>
                */
            ReplicationSourceIdentifier?: string;
            /**
                * <p>Contains one or more identifiers of the secondary clusters that are associated with this cluster.</p>
                */
            ReadReplicaIdentifiers?: string[];
            /**
                * <p>Provides the list of instances that make up the cluster.</p>
                */
            DBClusterMembers?: DBClusterMember[];
            /**
                * <p>Provides a list of virtual private cloud (VPC) security groups that the cluster
                *             belongs to.</p>
                */
            VpcSecurityGroups?: VpcSecurityGroupMembership[];
            /**
                * <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
                */
            HostedZoneId?: string;
            /**
                * <p>Specifies whether the cluster is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>If <code>StorageEncrypted</code> is <code>true</code>, the KMS key identifier for
                *             the encrypted cluster.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Web Services Region-unique, immutable identifier for the cluster. This identifier is
                *             found in CloudTrail log entries whenever the KMS key for the cluster is accessed.</p>
                */
            DbClusterResourceId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the cluster.</p>
                */
            DBClusterArn?: string;
            /**
                * <p>Provides a list of the Identity and Access Management (IAM) roles that are associated with the cluster. (IAM) roles that are associated with a cluster grant permission for the cluster to access other Amazon Web Services services on your behalf.</p>
                */
            AssociatedRoles?: DBClusterRole[];
            /**
                * <p>Identifies the clone group to which the DB cluster is associated.</p>
                */
            CloneGroupId?: string;
            /**
                * <p>Specifies the time when the cluster was created, in Universal Coordinated Time
                *             (UTC).</p>
                */
            ClusterCreateTime?: Date;
            /**
                * <p>A list of log types that this cluster is configured to export to Amazon CloudWatch
                *             Logs.</p>
                */
            EnabledCloudwatchLogsExports?: string[];
            /**
                * <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is
                *             enabled, the cluster cannot be deleted unless it is modified and
                *                 <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code>
                *             protects clusters from being accidentally deleted.</p>
                */
            DeletionProtection?: boolean;
    }
    export namespace DBCluster {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBCluster) => any;
    }
    export interface CreateDBClusterResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace CreateDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterResult) => any;
    }
    /**
        * <p>You already have a cluster with the given identifier.</p>
        */
    export class DBClusterAlreadyExistsFault extends __BaseException {
            readonly name: "DBClusterAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBClusterParameterGroupName</code> doesn't refer to an existing cluster parameter group. </p>
        */
    export class DBClusterParameterGroupNotFoundFault extends __BaseException {
            readonly name: "DBClusterParameterGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterParameterGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>The cluster can't be created because you have reached the maximum allowed quota of clusters.</p>
        */
    export class DBClusterQuotaExceededFault extends __BaseException {
            readonly name: "DBClusterQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Subnets in the subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
        */
    export class DBSubnetGroupDoesNotCoverEnoughAZs extends __BaseException {
            readonly name: "DBSubnetGroupDoesNotCoverEnoughAZs";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupDoesNotCoverEnoughAZs, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBSubnetGroupName</code> doesn't refer to an existing subnet group. </p>
        */
    export class DBSubnetGroupNotFoundFault extends __BaseException {
            readonly name: "DBSubnetGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global cluster.</p>
        */
    export class GlobalClusterNotFoundFault extends __BaseException {
            readonly name: "GlobalClusterNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlobalClusterNotFoundFault, __BaseException>);
    }
    /**
        * <p>There is not enough storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available. </p>
        */
    export class InsufficientStorageClusterCapacityFault extends __BaseException {
            readonly name: "InsufficientStorageClusterCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientStorageClusterCapacityFault, __BaseException>);
    }
    /**
        * <p>The subnet group can't be deleted because it's in use.</p>
        */
    export class InvalidDBSubnetGroupStateFault extends __BaseException {
            readonly name: "InvalidDBSubnetGroupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSubnetGroupStateFault, __BaseException>);
    }
    /**
        * <p>The requested operation can't be performed while the cluster is in this state.</p>
        */
    export class InvalidGlobalClusterStateFault extends __BaseException {
            readonly name: "InvalidGlobalClusterStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidGlobalClusterStateFault, __BaseException>);
    }
    /**
        * <p>The requested subnet is not valid, or multiple subnets were requested that are not all
        *             in a common virtual private cloud (VPC).</p>
        */
    export class InvalidSubnet extends __BaseException {
            readonly name: "InvalidSubnet";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSubnet, __BaseException>);
    }
    /**
        * <p>The subnet group doesn't cover all Availability Zones after it is created
        *             because of changes that were made.</p>
        */
    export class InvalidVPCNetworkStateFault extends __BaseException {
            readonly name: "InvalidVPCNetworkStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidVPCNetworkStateFault, __BaseException>);
    }
    /**
        * <p>The request would cause you to exceed the allowed amount of storage available across
        *             all instances.</p>
        */
    export class StorageQuotaExceededFault extends __BaseException {
            readonly name: "StorageQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StorageQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Represents the input of <a>CreateDBClusterParameterGroup</a>.</p>
        */
    export interface CreateDBClusterParameterGroupMessage {
            /**
                * <p>The name of the cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must not match the name of an existing
                *                     <code>DBClusterParameterGroup</code>.</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>This value is stored as a lowercase string.</p>
                *         </note>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p>The cluster parameter group family name.</p>
                */
            DBParameterGroupFamily: string | undefined;
            /**
                * <p>The description for the cluster parameter group.</p>
                */
            Description: string | undefined;
            /**
                * <p>The tags to be assigned to the cluster parameter group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterParameterGroupMessage) => any;
    }
    export interface CreateDBClusterParameterGroupResult {
            /**
                * <p>Detailed information about a cluster parameter group. </p>
                */
            DBClusterParameterGroup?: DBClusterParameterGroup;
    }
    export namespace CreateDBClusterParameterGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterParameterGroupResult) => any;
    }
    /**
        * <p>Represents the input of <a>CreateDBClusterSnapshot</a>.</p>
        */
    export interface CreateDBClusterSnapshotMessage {
            /**
                * <p>The identifier of the cluster snapshot. This parameter is stored
                *             as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.
                *                     </p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-snapshot1</code>
                *         </p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The identifier of the cluster to create a snapshot for. This
                *             parameter is not case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing
                *                     <code>DBCluster</code>.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster</code>
                *         </p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The tags to be assigned to the cluster snapshot.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterSnapshotMessage) => any;
    }
    export interface CreateDBClusterSnapshotResult {
            /**
                * <p>Detailed information about a cluster snapshot. </p>
                */
            DBClusterSnapshot?: DBClusterSnapshot;
    }
    export namespace CreateDBClusterSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterSnapshotResult) => any;
    }
    /**
        * <p>The specified CIDR IP or Amazon EC2 security group isn't authorized for the specified security group.</p>
        *         <p>Amazon DocumentDB also might not be authorized to perform necessary actions on your behalf using IAM.</p>
        */
    export class AuthorizationNotFoundFault extends __BaseException {
            readonly name: "AuthorizationNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthorizationNotFoundFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>CreateDBInstance</a>.</p>
        */
    export interface CreateDBInstanceMessage {
            /**
                * <p>The instance identifier. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbinstance</code>
                *         </p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The compute and memory capacity of the instance; for example,
                *                 <code>db.r5.large</code>. </p>
                */
            DBInstanceClass: string | undefined;
            /**
                * <p>The name of the database engine to be used for this instance.</p>
                *         <p>Valid value: <code>docdb</code>
                *          </p>
                */
            Engine: string | undefined;
            /**
                * <p>The Amazon EC2 Availability Zone that the instance is created in. </p>
                *         <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p>
                *         <p>Example: <code>us-east-1d</code>
                *          </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The time range each week during which system maintenance can occur, in Universal
                *             Coordinated Time (UTC).</p>
                *         <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *         </p>
                *         <p>The default is a 30-minute window selected at random from an 8-hour block of time for
                *             each Amazon Web Services Region, occurring on a random day of the week. </p>
                *         <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
                *         <p>Constraints: Minimum 30-minute window.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.</p>
                *         <p>Default: <code>false</code>
                *         </p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The tags to be assigned to the instance. You can assign up to
                *            10 tags to an instance.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The identifier of the cluster that the instance will belong to.</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the
                *             primary instance after a failure of the existing primary instance.</p>
                *         <p>Default: 1</p>
                *         <p>Valid values: 0-15</p>
                */
            PromotionTier?: number;
            /**
                * <p>A value that indicates whether to enable Performance Insights for the DB Instance. For
                *             more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html">Using Amazon
                *                 Performance Insights</a>.</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The KMS key identifier for encryption of Performance Insights
                *             data.</p>
                *         <p>The KMS key identifier is the key ARN, key ID, alias ARN, or alias name
                *             for the KMS key.</p>
                *         <p>If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your
                *             default KMS key. There is a default KMS key for your
                *             Amazon Web Services account. Your Amazon Web Services account has a different
                *             default KMS key for each Amazon Web Services region.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
    }
    export namespace CreateDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBInstanceMessage) => any;
    }
    /**
        * <p>Information about an Availability Zone.</p>
        */
    export interface AvailabilityZone {
            /**
                * <p>The name of the Availability Zone.</p>
                */
            Name?: string;
    }
    export namespace AvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailabilityZone) => any;
    }
    /**
        * <p> Detailed information about a subnet. </p>
        */
    export interface Subnet {
            /**
                * <p>Specifies the identifier of the subnet.</p>
                */
            SubnetIdentifier?: string;
            /**
                * <p>Specifies the Availability Zone for the subnet.</p>
                */
            SubnetAvailabilityZone?: AvailabilityZone;
            /**
                * <p>Specifies the status of the subnet.</p>
                */
            SubnetStatus?: string;
    }
    export namespace Subnet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subnet) => any;
    }
    /**
        * <p>Detailed information about a subnet group. </p>
        */
    export interface DBSubnetGroup {
            /**
                * <p>The name of the subnet group.</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>Provides the description of the subnet group.</p>
                */
            DBSubnetGroupDescription?: string;
            /**
                * <p>Provides the virtual private cloud (VPC) ID of the subnet group.</p>
                */
            VpcId?: string;
            /**
                * <p>Provides the status of the subnet group.</p>
                */
            SubnetGroupStatus?: string;
            /**
                * <p>Detailed information about one or more subnets within a subnet group.</p>
                */
            Subnets?: Subnet[];
            /**
                * <p>The Amazon Resource Name (ARN) for the DB subnet group.</p>
                */
            DBSubnetGroupArn?: string;
    }
    export namespace DBSubnetGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSubnetGroup) => any;
    }
    /**
        * <p>Network information for accessing a cluster or instance. Client programs must
        *             specify a valid endpoint to access these Amazon DocumentDB resources.</p>
        */
    export interface Endpoint {
            /**
                * <p>Specifies the DNS address of the instance.</p>
                */
            Address?: string;
            /**
                * <p>Specifies the port that the database engine is listening on.</p>
                */
            Port?: number;
            /**
                * <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
                */
            HostedZoneId?: string;
    }
    export namespace Endpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Endpoint) => any;
    }
    /**
        * <p>A list of the log types whose configuration is still pending. These log types are in
        *             the process of being activated or deactivated.</p>
        */
    export interface PendingCloudwatchLogsExports {
            /**
                * <p>Log types that are in the process of being deactivated. After they are deactivated,
                *             these log types aren't exported to CloudWatch Logs.</p>
                */
            LogTypesToEnable?: string[];
            /**
                * <p>Log types that are in the process of being enabled. After they are enabled, these log
                *             types are exported to Amazon CloudWatch Logs.</p>
                */
            LogTypesToDisable?: string[];
    }
    export namespace PendingCloudwatchLogsExports {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingCloudwatchLogsExports) => any;
    }
    /**
        * <p> One or more modified settings for an instance. These modified settings have been
        *             requested, but haven't been applied yet.</p>
        */
    export interface PendingModifiedValues {
            /**
                * <p> Contains the new <code>DBInstanceClass</code> for the instance that will be
                *             applied or is currently being applied. </p>
                */
            DBInstanceClass?: string;
            /**
                * <p> Contains the new <code>AllocatedStorage</code> size for then instance that will be
                *             applied or is currently being applied. </p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Contains the pending or currently in-progress change of the master credentials for the
                *             instance.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>Specifies the pending port for the instance.</p>
                */
            Port?: number;
            /**
                * <p>Specifies the pending number of days for which automated backups are retained.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>Indicates that the Single-AZ instance is to change to a Multi-AZ deployment.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The license model for the instance.</p>
                *         <p>Valid values: <code>license-included</code>, <code>bring-your-own-license</code>,
                *                 <code>general-public-license</code>
                *          </p>
                */
            LicenseModel?: string;
            /**
                * <p>Specifies the new Provisioned IOPS value for the instance that will be applied or
                *             is currently being applied.</p>
                */
            Iops?: number;
            /**
                * <p> Contains the new <code>DBInstanceIdentifier</code> for the instance that will be
                *             applied or is currently being applied. </p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>Specifies the storage type to be associated with the instance.</p>
                */
            StorageType?: string;
            /**
                * <p>Specifies the identifier of the certificate authority (CA) certificate for the DB
                *             instance.</p>
                */
            CACertificateIdentifier?: string;
            /**
                * <p>The new subnet group for the instance. </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A list of the log types whose configuration is still pending. These log types are in
                *             the process of being activated or deactivated.</p>
                */
            PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
    }
    export namespace PendingModifiedValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingModifiedValues) => any;
    }
    /**
        * <p>Provides a list of status information for an instance.</p>
        */
    export interface DBInstanceStatusInfo {
            /**
                * <p>This value is currently "<code>read replication</code>."</p>
                */
            StatusType?: string;
            /**
                * <p>A Boolean value that is <code>true</code> if the instance is operating normally, or
                *                 <code>false</code> if the instance is in an error state.</p>
                */
            Normal?: boolean;
            /**
                * <p>Status of the instance. For a <code>StatusType</code> of read replica, the values
                *             can be <code>replicating</code>, error, <code>stopped</code>, or
                *             <code>terminated</code>.</p>
                */
            Status?: string;
            /**
                * <p>Details of the error if there is an error for the instance. If the instance is not in
                *             an error state, this value is blank.</p>
                */
            Message?: string;
    }
    export namespace DBInstanceStatusInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceStatusInfo) => any;
    }
    /**
        * <p>Detailed information about an instance. </p>
        */
    export interface DBInstance {
            /**
                * <p>Contains a user-provided database identifier. This identifier is the unique key that
                *             identifies an instance.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>Contains the name of the compute and memory capacity class of the instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>Provides the name of the database engine to be used for this instance.</p>
                */
            Engine?: string;
            /**
                * <p>Specifies the current state of this database.</p>
                */
            DBInstanceStatus?: string;
            /**
                * <p>Specifies the connection endpoint.</p>
                */
            Endpoint?: Endpoint;
            /**
                * <p>Provides the date and time that the instance was created.</p>
                */
            InstanceCreateTime?: Date;
            /**
                * <p> Specifies the daily time range during which automated backups are created if
                *             automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.
                *         </p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>Specifies the number of days for which automatic snapshots are retained.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>Provides a list of VPC security group elements that the instance belongs to.</p>
                */
            VpcSecurityGroups?: VpcSecurityGroupMembership[];
            /**
                * <p>Specifies the name of the Availability Zone that the instance is located in.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>Specifies information on the subnet group that is associated with the instance, including the name, description, and subnets in the subnet group.</p>
                */
            DBSubnetGroup?: DBSubnetGroup;
            /**
                * <p>Specifies the weekly time range during which system maintenance can occur, in
                *             Universal Coordinated Time (UTC).</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>Specifies that changes to the instance are pending. This element is included only when changes are pending. Specific changes are identified by subelements.</p>
                */
            PendingModifiedValues?: PendingModifiedValues;
            /**
                * <p>Specifies the latest time to which a database can be restored with point-in-time
                *             restore.</p>
                */
            LatestRestorableTime?: Date;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Does not apply. This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>Not supported. Amazon DocumentDB does not currently support public endpoints. The value
                *           of <code>PubliclyAccessible</code> is always <code>false</code>.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>The status of a read replica. If the instance is not a read replica, this is
                *             blank.</p>
                */
            StatusInfos?: DBInstanceStatusInfo[];
            /**
                * <p>Contains the name of the cluster that the instance is a member of if the
                *             instance is a member of a cluster.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Specifies whether or not the instance is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p> If <code>StorageEncrypted</code> is <code>true</code>, the KMS key identifier for
                *             the encrypted instance. </p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Web Services Region-unique, immutable identifier for the instance. This identifier is found in CloudTrail log entries whenever the KMS key for the instance is
                *             accessed.</p>
                */
            DbiResourceId?: string;
            /**
                * <p>The identifier of the CA certificate for this DB instance.</p>
                */
            CACertificateIdentifier?: string;
            /**
                * <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the
                *             primary instance after a failure of the existing primary instance.</p>
                */
            PromotionTier?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the instance.</p>
                */
            DBInstanceArn?: string;
            /**
                * <p>A list of log types that this instance is configured to export to CloudWatch Logs.</p>
                */
            EnabledCloudwatchLogsExports?: string[];
    }
    export namespace DBInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstance) => any;
    }
    export interface CreateDBInstanceResult {
            /**
                * <p>Detailed information about an instance. </p>
                */
            DBInstance?: DBInstance;
    }
    export namespace CreateDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBInstanceResult) => any;
    }
    /**
        * <p>You already have a instance with the given identifier.</p>
        */
    export class DBInstanceAlreadyExistsFault extends __BaseException {
            readonly name: "DBInstanceAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBSecurityGroupName</code> doesn't refer to an existing security group. </p>
        */
    export class DBSecurityGroupNotFoundFault extends __BaseException {
            readonly name: "DBSecurityGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSecurityGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>The request would cause you to exceed the allowed number of instances.</p>
        */
    export class InstanceQuotaExceededFault extends __BaseException {
            readonly name: "InstanceQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InstanceQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The specified instance class isn't available in the specified Availability Zone.</p>
        */
    export class InsufficientDBInstanceCapacityFault extends __BaseException {
            readonly name: "InsufficientDBInstanceCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientDBInstanceCapacityFault, __BaseException>);
    }
    /**
        * <p>Storage of the specified <code>StorageType</code> can't be associated with the DB
        *             instance. </p>
        */
    export class StorageTypeNotSupportedFault extends __BaseException {
            readonly name: "StorageTypeNotSupportedFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StorageTypeNotSupportedFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>CreateDBSubnetGroup</a>.</p>
        */
    export interface CreateDBSubnetGroupMessage {
            /**
                * <p>The name for the subnet group. This value is stored as a lowercase string.</p>
                *         <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores,
                *             spaces, or hyphens. Must not be default.</p>
                *         <p>Example: <code>mySubnetgroup</code>
                *         </p>
                */
            DBSubnetGroupName: string | undefined;
            /**
                * <p>The description for the subnet group.</p>
                */
            DBSubnetGroupDescription: string | undefined;
            /**
                * <p>The Amazon EC2 subnet IDs for the subnet group.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>The tags to be assigned to the subnet group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSubnetGroupMessage) => any;
    }
    export interface CreateDBSubnetGroupResult {
            /**
                * <p>Detailed information about a subnet group. </p>
                */
            DBSubnetGroup?: DBSubnetGroup;
    }
    export namespace CreateDBSubnetGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSubnetGroupResult) => any;
    }
    /**
        * <p>
        *             <code>DBSubnetGroupName</code> is already being used by an existing subnet group. </p>
        */
    export class DBSubnetGroupAlreadyExistsFault extends __BaseException {
            readonly name: "DBSubnetGroupAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The request would cause you to exceed the allowed number of subnet groups.</p>
        */
    export class DBSubnetGroupQuotaExceededFault extends __BaseException {
            readonly name: "DBSubnetGroupQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The request would cause you to exceed the allowed number of subnets in a subnet group.</p>
        */
    export class DBSubnetQuotaExceededFault extends __BaseException {
            readonly name: "DBSubnetQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>CreateEventSubscription</a>.</p>
        */
    export interface CreateEventSubscriptionMessage {
            /**
                * <p>The name of the subscription.</p>
                *         <p>Constraints: The name must be fewer than 255 characters.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it.</p>
                */
            SnsTopicArn: string | undefined;
            /**
                * <p>The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to <code>db-instance</code>. If this value is not specified, all events are returned.</p>
                *         <p>Valid values: <code>db-instance</code>, <code>db-cluster</code>,
                *                 <code>db-parameter-group</code>, <code>db-security-group</code>,
                *                 <code>db-cluster-snapshot</code>
                *         </p>
                */
            SourceType?: string;
            /**
                * <p> A list of event categories for a <code>SourceType</code> that you want to subscribe to. </p>
                */
            EventCategories?: string[];
            /**
                * <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a
                *             hyphen or contain two consecutive hyphens.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If <code>SourceIds</code> are provided, <code>SourceType</code> must also be
                *                     provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is an instance, a <code>DBInstanceIdentifier</code> must
                *                     be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a security group, a <code>DBSecurityGroupName</code>
                *                     must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a parameter group, a
                *                         <code>DBParameterGroupName</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a snapshot, a <code>DBSnapshotIdentifier</code> must
                *                     be provided.</p>
                *             </li>
                *          </ul>
                */
            SourceIds?: string[];
            /**
                * <p> A Boolean value; set to <code>true</code> to activate the subscription, set to <code>false</code> to create the subscription but not active it. </p>
                */
            Enabled?: boolean;
            /**
                * <p>The tags to be assigned to the event subscription.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventSubscriptionMessage) => any;
    }
    export interface CreateEventSubscriptionResult {
            /**
                * <p>Detailed information about an event to which you have subscribed.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace CreateEventSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventSubscriptionResult) => any;
    }
    /**
        * <p>You have reached the maximum number of event subscriptions. </p>
        */
    export class EventSubscriptionQuotaExceededFault extends __BaseException {
            readonly name: "EventSubscriptionQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventSubscriptionQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Amazon SNS has responded that there is a problem with the specified topic. </p>
        */
    export class SNSInvalidTopicFault extends __BaseException {
            readonly name: "SNSInvalidTopicFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSInvalidTopicFault, __BaseException>);
    }
    /**
        * <p>You do not have permission to publish to the SNS topic Amazon Resource Name (ARN). </p>
        */
    export class SNSNoAuthorizationFault extends __BaseException {
            readonly name: "SNSNoAuthorizationFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSNoAuthorizationFault, __BaseException>);
    }
    /**
        * <p>The SNS topic Amazon Resource Name (ARN) does not exist. </p>
        */
    export class SNSTopicArnNotFoundFault extends __BaseException {
            readonly name: "SNSTopicArnNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSTopicArnNotFoundFault, __BaseException>);
    }
    /**
        * <p>The provided subscription name already exists. </p>
        */
    export class SubscriptionAlreadyExistFault extends __BaseException {
            readonly name: "SubscriptionAlreadyExistFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubscriptionAlreadyExistFault, __BaseException>);
    }
    /**
        * <p>The provided category does not exist. </p>
        */
    export class SubscriptionCategoryNotFoundFault extends __BaseException {
            readonly name: "SubscriptionCategoryNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubscriptionCategoryNotFoundFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>CreateGlobalCluster</a>.</p>
        */
    export interface CreateGlobalClusterMessage {
            /**
                * <p>The cluster identifier of the new global cluster.</p>
                */
            GlobalClusterIdentifier: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) to use as the primary cluster of the global cluster. This parameter is optional.</p>
                */
            SourceDBClusterIdentifier?: string;
            /**
                * <p>The name of the database engine to be used for this cluster.</p>
                */
            Engine?: string;
            /**
                * <p>The engine version of the global cluster.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The deletion protection setting for the new global cluster. The global cluster can't be deleted when deletion protection is enabled. </p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon DocumentDB will not create a database in the global cluster you are creating.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The storage encryption setting for the new global cluster. </p>
                */
            StorageEncrypted?: boolean;
    }
    export namespace CreateGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGlobalClusterMessage) => any;
    }
    /**
        * <p>A data structure with information about any primary and secondary clusters associated with an Amazon DocumentDB global clusters. </p>
        */
    export interface GlobalClusterMember {
            /**
                * <p>The Amazon Resource Name (ARN) for each Amazon DocumentDB cluster.</p>
                */
            DBClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for each read-only secondary cluster associated with the Aurora global cluster.</p>
                */
            Readers?: string[];
            /**
                * <p> Specifies whether the Amazon DocumentDB cluster is the primary cluster (that is, has read-write capability) for the Amazon DocumentDB global cluster with which it is associated. </p>
                */
            IsWriter?: boolean;
    }
    export namespace GlobalClusterMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalClusterMember) => any;
    }
    /**
        * <p>A data type representing an Amazon DocumentDB global cluster.</p>
        */
    export interface GlobalCluster {
            /**
                * <p>Contains a user-supplied global  cluster identifier. This identifier is the unique key that identifies a global cluster. </p>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>The Amazon Web Services Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS customer master key (CMK) for the cluster is accessed. </p>
                */
            GlobalClusterResourceId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the global cluster.</p>
                */
            GlobalClusterArn?: string;
            /**
                * <p>Specifies the current state of this global cluster.</p>
                */
            Status?: string;
            /**
                * <p>The Amazon DocumentDB database engine used by the global cluster. </p>
                */
            Engine?: string;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The default database name within the new global cluster.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The storage encryption setting for the global cluster.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The deletion protection setting for the new global cluster.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The list of cluster IDs for secondary clusters within the global cluster. Currently limited to one item. </p>
                */
            GlobalClusterMembers?: GlobalClusterMember[];
    }
    export namespace GlobalCluster {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalCluster) => any;
    }
    export interface CreateGlobalClusterResult {
            /**
                * <p>A data type representing an Amazon DocumentDB global cluster.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace CreateGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGlobalClusterResult) => any;
    }
    /**
        * <p>The <code>GlobalClusterIdentifier</code> already exists. Choose a new global cluster identifier (unique name) to create a new global cluster. </p>
        */
    export class GlobalClusterAlreadyExistsFault extends __BaseException {
            readonly name: "GlobalClusterAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlobalClusterAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The number of global  clusters for this account is already at the maximum allowed.</p>
        */
    export class GlobalClusterQuotaExceededFault extends __BaseException {
            readonly name: "GlobalClusterQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlobalClusterQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>DeleteDBCluster</a>.</p>
        */
    export interface DeleteDBClusterMessage {
            /**
                * <p>The cluster identifier for the cluster to be deleted. This parameter isn't case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match an existing <code>DBClusterIdentifier</code>.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p> Determines whether a final cluster snapshot is created before the cluster is deleted. If <code>true</code> is specified, no cluster snapshot is created. If <code>false</code> is specified, a cluster snapshot is created before the DB cluster is deleted. </p>
                *         <note>
                *             <p>If <code>SkipFinalSnapshot</code> is <code>false</code>, you must specify a <code>FinalDBSnapshotIdentifier</code> parameter.</p>
                *         </note>
                *         <p>Default: <code>false</code>
                *         </p>
                */
            SkipFinalSnapshot?: boolean;
            /**
                * <p> The cluster snapshot identifier of the new cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>. </p>
                *         <note>
                *             <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to <code>true</code> results in an error. </p>
                *         </note>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be from 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            FinalDBSnapshotIdentifier?: string;
    }
    export namespace DeleteDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterMessage) => any;
    }
    export interface DeleteDBClusterResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace DeleteDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterResult) => any;
    }
    /**
        * <p>Represents the input to <a>DeleteDBClusterParameterGroup</a>.</p>
        */
    export interface DeleteDBClusterParameterGroupMessage {
            /**
                * <p>The name of the cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be the name of an existing cluster parameter group.</p>
                *             </li>
                *             <li>
                *                 <p>You can't delete a default cluster parameter group.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot be associated with any clusters.</p>
                *             </li>
                *          </ul>
                */
            DBClusterParameterGroupName: string | undefined;
    }
    export namespace DeleteDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p>The parameter group is in use, or it is in a state that is not valid. If you are trying to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
        */
    export class InvalidDBParameterGroupStateFault extends __BaseException {
            readonly name: "InvalidDBParameterGroupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBParameterGroupStateFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>DeleteDBClusterSnapshot</a>.</p>
        */
    export interface DeleteDBClusterSnapshotMessage {
            /**
                * <p>The identifier of the cluster snapshot to delete.</p>
                *         <p>Constraints: Must be the name of an existing cluster snapshot in the <code>available</code> state.</p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
    }
    export namespace DeleteDBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterSnapshotMessage) => any;
    }
    export interface DeleteDBClusterSnapshotResult {
            /**
                * <p>Detailed information about a cluster snapshot. </p>
                */
            DBClusterSnapshot?: DBClusterSnapshot;
    }
    export namespace DeleteDBClusterSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterSnapshotResult) => any;
    }
    /**
        * <p>
        *             <code>DBSnapshotIdentifier</code> is already being used by an existing snapshot. </p>
        */
    export class DBSnapshotAlreadyExistsFault extends __BaseException {
            readonly name: "DBSnapshotAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSnapshotAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>DeleteDBInstance</a>.</p>
        */
    export interface DeleteDBInstanceMessage {
            /**
                * <p>The instance identifier for the instance to be deleted. This parameter isn't
                *             case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the name of an existing instance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
    }
    export namespace DeleteDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBInstanceMessage) => any;
    }
    export interface DeleteDBInstanceResult {
            /**
                * <p>Detailed information about an instance. </p>
                */
            DBInstance?: DBInstance;
    }
    export namespace DeleteDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBInstanceResult) => any;
    }
    /**
        * <p>Represents the input to <a>DeleteDBSubnetGroup</a>.</p>
        */
    export interface DeleteDBSubnetGroupMessage {
            /**
                * <p>The name of the database subnet group to delete.</p>
                *         <note>
                *             <p>You can't delete the default subnet group.</p>
                *         </note>
                *         <p>Constraints:</p>
                *         <p>Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p>
                *         <p>Example: <code>mySubnetgroup</code>
                *         </p>
                */
            DBSubnetGroupName: string | undefined;
    }
    export namespace DeleteDBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBSubnetGroupMessage) => any;
    }
    /**
        * <p> The subnet isn't in the <i>available</i> state. </p>
        */
    export class InvalidDBSubnetStateFault extends __BaseException {
            readonly name: "InvalidDBSubnetStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSubnetStateFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>DeleteEventSubscription</a>.</p>
        */
    export interface DeleteEventSubscriptionMessage {
            /**
                * <p>The name of the Amazon DocumentDB event notification subscription that you want to delete.</p>
                */
            SubscriptionName: string | undefined;
    }
    export namespace DeleteEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventSubscriptionMessage) => any;
    }
    export interface DeleteEventSubscriptionResult {
            /**
                * <p>Detailed information about an event to which you have subscribed.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace DeleteEventSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventSubscriptionResult) => any;
    }
    /**
        * <p>Someone else might be modifying a subscription. Wait a few seconds, and try
        *             again.</p>
        */
    export class InvalidEventSubscriptionStateFault extends __BaseException {
            readonly name: "InvalidEventSubscriptionStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEventSubscriptionStateFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>DeleteGlobalCluster</a>.</p>
        */
    export interface DeleteGlobalClusterMessage {
            /**
                * <p>The cluster identifier of the global cluster being deleted.</p>
                */
            GlobalClusterIdentifier: string | undefined;
    }
    export namespace DeleteGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGlobalClusterMessage) => any;
    }
    export interface DeleteGlobalClusterResult {
            /**
                * <p>A data type representing an Amazon DocumentDB global cluster.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace DeleteGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGlobalClusterResult) => any;
    }
    /**
        * <p>A certificate authority (CA) certificate for an Amazon Web Services account.</p>
        */
    export interface Certificate {
            /**
                * <p>The unique key that identifies a certificate.</p>
                *          <p>Example: <code>rds-ca-2019</code>
                *          </p>
                */
            CertificateIdentifier?: string;
            /**
                * <p>The type of the certificate.</p>
                *          <p>Example: <code>CA</code>
                *          </p>
                */
            CertificateType?: string;
            /**
                * <p>The thumbprint of the certificate.</p>
                */
            Thumbprint?: string;
            /**
                * <p>The starting date-time from which the certificate is valid.</p>
                *          <p>Example: <code>2019-07-31T17:57:09Z</code>
                *          </p>
                */
            ValidFrom?: Date;
            /**
                * <p>The date-time after which the certificate is no longer valid.</p>
                *          <p>Example: <code>2024-07-31T17:57:09Z</code>
                *          </p>
                */
            ValidTill?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) for the certificate.</p>
                *          <p>Example: <code>arn:aws:rds:us-east-1::cert:rds-ca-2019</code>
                *          </p>
                */
            CertificateArn?: string;
    }
    export namespace Certificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Certificate) => any;
    }
    export interface CertificateMessage {
            /**
                * <p>A list of certificates for this Amazon Web Services account.</p>
                */
            Certificates?: Certificate[];
            /**
                * <p>An optional pagination token provided if the number of records retrieved is greater than <code>MaxRecords</code>. If this parameter is specified, the marker specifies the next record in the list. Including the value of <code>Marker</code> in the next call to <code>DescribeCertificates</code> results in the next page of certificates.</p>
                */
            Marker?: string;
    }
    export namespace CertificateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CertificateMessage) => any;
    }
    /**
        * <p>
        *             <code>CertificateIdentifier</code> doesn't refer to an existing certificate. </p>
        */
    export class CertificateNotFoundFault extends __BaseException {
            readonly name: "CertificateNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CertificateNotFoundFault, __BaseException>);
    }
    /**
        * <p>A named set of filter values, used to return a more specific list of results. You can
        *             use a filter to match a set of resources by specific criteria, such as IDs.</p>
        *         <p>Wildcards are not supported in filters.</p>
        */
    export interface Filter {
            /**
                * <p>The name of the filter. Filter names are case sensitive.</p>
                */
            Name: string | undefined;
            /**
                * <p>One or more filter values. Filter values are case sensitive.</p>
                */
            Values: string[] | undefined;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    export interface DescribeCertificatesMessage {
            /**
                * <p>The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to <code>MaxRecords</code> certificates is returned. This parameter is not case sensitive.</p>
                *          <p>Constraints</p>
                *          <ul>
                *             <li>
                *                <p>Must match an existing <code>CertificateIdentifier</code>.</p>
                *             </li>
                *          </ul>
                */
            CertificateIdentifier?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Minimum: 20</p>
                *             </li>
                *             <li>
                *                <p>Maximum: 100</p>
                *             </li>
                *          </ul>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeCertificatesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCertificatesMessage) => any;
    }
    /**
        * <p>Represents the output of <a>DBClusterParameterGroups</a>.</p>
        */
    export interface DBClusterParameterGroupsMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of cluster parameter groups.</p>
                */
            DBClusterParameterGroups?: DBClusterParameterGroup[];
    }
    export namespace DBClusterParameterGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroupsMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBClusterParameterGroups</a>.</p>
        */
    export interface DescribeDBClusterParameterGroupsMessage {
            /**
                * <p>The name of a specific cluster parameter group to return details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If provided, must match the name of an existing
                *                         <code>DBClusterParameterGroup</code>.</p>
                *             </li>
                *          </ul>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBClusterParameterGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterParameterGroupsMessage) => any;
    }
    export type ApplyMethod = "immediate" | "pending-reboot";
    /**
        * <p>Detailed information about an individual parameter.</p>
        */
    export interface Parameter {
            /**
                * <p>Specifies the name of the parameter.</p>
                */
            ParameterName?: string;
            /**
                * <p>Specifies the value of the parameter.</p>
                */
            ParameterValue?: string;
            /**
                * <p>Provides a description of the parameter.</p>
                */
            Description?: string;
            /**
                * <p>Indicates the source of the parameter value.</p>
                */
            Source?: string;
            /**
                * <p>Specifies the engine-specific parameters type.</p>
                */
            ApplyType?: string;
            /**
                * <p>Specifies the valid data type for the parameter.</p>
                */
            DataType?: string;
            /**
                * <p>Specifies the valid range of values for the parameter.</p>
                */
            AllowedValues?: string;
            /**
                * <p> Indicates whether (<code>true</code>) or not (<code>false</code>) the parameter can
                *             be modified. Some parameters have security or operational implications that prevent them
                *             from being changed. </p>
                */
            IsModifiable?: boolean;
            /**
                * <p>The earliest engine version to which the parameter can apply.</p>
                */
            MinimumEngineVersion?: string;
            /**
                * <p>Indicates when to apply parameter updates.</p>
                */
            ApplyMethod?: ApplyMethod | string;
    }
    export namespace Parameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Parameter) => any;
    }
    /**
        * <p>Represents the output of <a>DBClusterParameterGroup</a>.</p>
        */
    export interface DBClusterParameterGroupDetails {
            /**
                * <p>Provides a list of parameters for the cluster parameter group.</p>
                */
            Parameters?: Parameter[];
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DBClusterParameterGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroupDetails) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBClusterParameters</a>.</p>
        */
    export interface DescribeDBClusterParametersMessage {
            /**
                * <p>The name of a specific cluster parameter group to return parameter details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If provided, must match the name of an existing <code>DBClusterParameterGroup</code>.</p>
                *             </li>
                *          </ul>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p> A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
                *         </p>
                */
            Source?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBClusterParametersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterParametersMessage) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeDBClusters</a>.</p>
        */
    export interface DBClusterMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of clusters.</p>
                */
            DBClusters?: DBCluster[];
    }
    export namespace DBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBClusters</a>.</p>
        */
    export interface DescribeDBClustersMessage {
            /**
                * <p>The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If provided, must match an existing <code>DBClusterIdentifier</code>.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>A filter that specifies one or more clusters to describe.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBClustersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClustersMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBClusterSnapshotAttributes</a>.</p>
        */
    export interface DescribeDBClusterSnapshotAttributesMessage {
            /**
                * <p>The identifier for the cluster snapshot to describe the attributes for.</p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
    }
    export namespace DescribeDBClusterSnapshotAttributesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterSnapshotAttributesMessage) => any;
    }
    /**
        * <p>Contains the name and values of a manual cluster snapshot attribute.</p>
        *         <p>Manual cluster snapshot attributes are used to authorize other Amazon Web Services accounts to restore a manual cluster snapshot.</p>
        */
    export interface DBClusterSnapshotAttribute {
            /**
                * <p>The name of the manual cluster snapshot attribute.</p>
                *         <p>The attribute named <code>restore</code> refers to the list of Amazon Web Services accounts that have permission to copy or restore the manual cluster snapshot.</p>
                */
            AttributeName?: string;
            /**
                * <p>The values for the manual cluster snapshot attribute.</p>
                *         <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If a value of <code>all</code> is in the list, then the manual cluster snapshot is public and available for any Amazon Web Services account to copy or restore.</p>
                */
            AttributeValues?: string[];
    }
    export namespace DBClusterSnapshotAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshotAttribute) => any;
    }
    /**
        * <p>Detailed information about the attributes that are associated with a cluster
        *             snapshot.</p>
        */
    export interface DBClusterSnapshotAttributesResult {
            /**
                * <p>The identifier of the cluster snapshot that the attributes apply to.</p>
                */
            DBClusterSnapshotIdentifier?: string;
            /**
                * <p>The list of attributes and values for the cluster snapshot.</p>
                */
            DBClusterSnapshotAttributes?: DBClusterSnapshotAttribute[];
    }
    export namespace DBClusterSnapshotAttributesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshotAttributesResult) => any;
    }
    export interface DescribeDBClusterSnapshotAttributesResult {
            /**
                * <p>Detailed information about the attributes that are associated with a cluster
                *             snapshot.</p>
                */
            DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
    }
    export namespace DescribeDBClusterSnapshotAttributesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterSnapshotAttributesResult) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeDBClusterSnapshots</a>.</p>
        */
    export interface DBClusterSnapshotMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Provides a list of cluster snapshots.</p>
                */
            DBClusterSnapshots?: DBClusterSnapshot[];
    }
    export namespace DBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshotMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBClusterSnapshots</a>.</p>
        */
    export interface DescribeDBClusterSnapshotsMessage {
            /**
                * <p>The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can't be used with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case sensitive. </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If provided, must match the identifier of an existing
                *                     <code>DBCluster</code>.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>A specific cluster snapshot identifier to describe. This parameter can't be used with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If provided, must match the identifier of an existing
                *                         <code>DBClusterSnapshot</code>.</p>
                *             </li>
                *             <li>
                *                 <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code>
                *                     parameter must also be specified.</p>
                *             </li>
                *          </ul>
                */
            DBClusterSnapshotIdentifier?: string;
            /**
                * <p>The type of cluster snapshots to be returned. You can specify one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>automated</code> - Return all cluster snapshots that Amazon DocumentDB has automatically created for your Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>manual</code> - Return all cluster snapshots that you have manually created for your Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>shared</code> - Return all manual cluster snapshots that have been shared to your Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>public</code> - Return all cluster snapshots that have been marked as public.</p>
                *             </li>
                *          </ul>
                *         <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public cluster snapshots with these results by setting the<code>IncludePublic</code> parameter to <code>true</code>.</p>
                *         <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
                */
            SnapshotType?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Set to <code>true</code> to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise <code>false</code>. The default is <code>false</code>.</p>
                */
            IncludeShared?: boolean;
            /**
                * <p>Set to <code>true</code> to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise <code>false</code>. The default is <code>false</code>.</p>
                */
            IncludePublic?: boolean;
    }
    export namespace DescribeDBClusterSnapshotsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterSnapshotsMessage) => any;
    }
    /**
        * <p>The version of the database engine that an instance can be upgraded to.</p>
        */
    export interface UpgradeTarget {
            /**
                * <p>The name of the upgrade target database engine.</p>
                */
            Engine?: string;
            /**
                * <p>The version number of the upgrade target database engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The version of the database engine that an instance can be upgraded to.</p>
                */
            Description?: string;
            /**
                * <p>A value that indicates whether the target version is applied to any source DB instances that have <code>AutoMinorVersionUpgrade</code> set to <code>true</code>.</p>
                */
            AutoUpgrade?: boolean;
            /**
                * <p>A value that indicates whether a database engine is upgraded to a major
                *             version.</p>
                */
            IsMajorVersionUpgrade?: boolean;
    }
    export namespace UpgradeTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeTarget) => any;
    }
    /**
        * <p> Detailed information about an engine version. </p>
        */
    export interface DBEngineVersion {
            /**
                * <p>The name of the database engine.</p>
                */
            Engine?: string;
            /**
                * <p>The version number of the database engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The name of the parameter group family for the database engine.</p>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>The description of the database engine.</p>
                */
            DBEngineDescription?: string;
            /**
                * <p>The description of the database engine version.</p>
                */
            DBEngineVersionDescription?: string;
            /**
                * <p>A list of engine versions that this database engine version can be upgraded to.</p>
                */
            ValidUpgradeTarget?: UpgradeTarget[];
            /**
                * <p>The types of logs that the database engine has available for export to Amazon
                *             CloudWatch Logs.</p>
                */
            ExportableLogTypes?: string[];
            /**
                * <p>A value that indicates whether the engine version supports exporting the log types
                *             specified by <code>ExportableLogTypes</code> to CloudWatch Logs.</p>
                */
            SupportsLogExportsToCloudwatchLogs?: boolean;
    }
    export namespace DBEngineVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBEngineVersion) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeDBEngineVersions</a>.</p>
        */
    export interface DBEngineVersionMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Detailed information about one or more engine versions.</p>
                */
            DBEngineVersions?: DBEngineVersion[];
    }
    export namespace DBEngineVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBEngineVersionMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBEngineVersions</a>.</p>
        */
    export interface DescribeDBEngineVersionsMessage {
            /**
                * <p>The database engine to return.</p>
                */
            Engine?: string;
            /**
                * <p>The database engine version to return.</p>
                *         <p>Example: <code>3.6.0</code>
                *         </p>
                */
            EngineVersion?: string;
            /**
                * <p>The name of a specific parameter group family to return details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If provided, must match an existing
                *                     <code>DBParameterGroupFamily</code>.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Indicates that only the default version of the specified engine or engine and major
                *             version combination is returned.</p>
                */
            DefaultOnly?: boolean;
            /**
                * <p>If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
                */
            ListSupportedCharacterSets?: boolean;
            /**
                * <p>If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
                */
            ListSupportedTimezones?: boolean;
    }
    export namespace DescribeDBEngineVersionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBEngineVersionsMessage) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeDBInstances</a>.</p>
        */
    export interface DBInstanceMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Detailed information about one or more instances. </p>
                */
            DBInstances?: DBInstance[];
    }
    export namespace DBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBInstances</a>.</p>
        */
    export interface DescribeDBInstancesMessage {
            /**
                * <p>The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If provided, must match the identifier of an existing
                *                     <code>DBInstance</code>.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>A filter that specifies one or more instances to describe.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>db-instance-id</code> - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBInstancesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBInstancesMessage) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeDBSubnetGroups</a>.</p>
        */
    export interface DBSubnetGroupMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Detailed information about one or more subnet groups.</p>
                */
            DBSubnetGroups?: DBSubnetGroup[];
    }
    export namespace DBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSubnetGroupMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeDBSubnetGroups</a>.</p>
        */
    export interface DescribeDBSubnetGroupsMessage {
            /**
                * <p>The name of the subnet group to return details for.</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBSubnetGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBSubnetGroupsMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeEngineDefaultClusterParameters</a>.</p>
        */
    export interface DescribeEngineDefaultClusterParametersMessage {
            /**
                * <p>The name of the cluster parameter group family to return the engine parameter
                *             information for.</p>
                */
            DBParameterGroupFamily: string | undefined;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeEngineDefaultClusterParametersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEngineDefaultClusterParametersMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the
        *                 <code>DescribeEngineDefaultClusterParameters</code> operation. </p>
        */
    export interface EngineDefaults {
            /**
                * <p>The name of the cluster parameter group family to return the engine parameter information for.</p>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The parameters of a particular cluster parameter group family.</p>
                */
            Parameters?: Parameter[];
    }
    export namespace EngineDefaults {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EngineDefaults) => any;
    }
    export interface DescribeEngineDefaultClusterParametersResult {
            /**
                * <p>Contains the result of a successful invocation of the
                *                 <code>DescribeEngineDefaultClusterParameters</code> operation. </p>
                */
            EngineDefaults?: EngineDefaults;
    }
    export namespace DescribeEngineDefaultClusterParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEngineDefaultClusterParametersResult) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeEventCategories</a>.</p>
        */
    export interface DescribeEventCategoriesMessage {
            /**
                * <p>The type of source that is generating the events.</p>
                *         <p>Valid values: <code>db-instance</code>, <code>db-parameter-group</code>, <code>db-security-group</code>
                *          </p>
                */
            SourceType?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
    }
    export namespace DescribeEventCategoriesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventCategoriesMessage) => any;
    }
    /**
        * <p>An event source type, accompanied by one or more event category names.</p>
        */
    export interface EventCategoriesMap {
            /**
                * <p>The source type that the returned categories belong to.</p>
                */
            SourceType?: string;
            /**
                * <p>The event categories for the specified source type.</p>
                */
            EventCategories?: string[];
    }
    export namespace EventCategoriesMap {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventCategoriesMap) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeEventCategories</a>.</p>
        */
    export interface EventCategoriesMessage {
            /**
                * <p>A list of event category maps.</p>
                */
            EventCategoriesMapList?: EventCategoriesMap[];
    }
    export namespace EventCategoriesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventCategoriesMessage) => any;
    }
    export type SourceType = "db-cluster" | "db-cluster-snapshot" | "db-instance" | "db-parameter-group" | "db-security-group" | "db-snapshot";
    /**
        * <p>Represents the input to <a>DescribeEvents</a>.</p>
        */
    export interface DescribeEventsMessage {
            /**
                * <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If <code>SourceIdentifier</code> is provided, <code>SourceType</code> must also be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is <code>DBInstance</code>, a
                *                         <code>DBInstanceIdentifier</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is <code>DBSecurityGroup</code>, a
                *                         <code>DBSecurityGroupName</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is <code>DBParameterGroup</code>, a
                *                         <code>DBParameterGroupName</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is <code>DBSnapshot</code>, a
                *                         <code>DBSnapshotIdentifier</code> must be provided.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            SourceIdentifier?: string;
            /**
                * <p>The event source to retrieve events for. If no value is specified, all events are returned.</p>
                */
            SourceType?: SourceType | string;
            /**
                * <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. </p>
                *         <p>Example: 2009-07-08T18:00Z</p>
                */
            StartTime?: Date;
            /**
                * <p> The end of the time interval for which to retrieve events, specified in ISO 8601
                *             format. </p>
                *         <p>Example: 2009-07-08T18:00Z</p>
                */
            EndTime?: Date;
            /**
                * <p>The number of minutes to retrieve events for.</p>
                *         <p>Default: 60</p>
                */
            Duration?: number;
            /**
                * <p>A list of event categories that trigger notifications for an event notification
                *             subscription.</p>
                */
            EventCategories?: string[];
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeEventsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsMessage) => any;
    }
    /**
        * <p>Detailed information about an event.</p>
        */
    export interface Event {
            /**
                * <p>Provides the identifier for the source of the event.</p>
                */
            SourceIdentifier?: string;
            /**
                * <p>Specifies the source type for this event.</p>
                */
            SourceType?: SourceType | string;
            /**
                * <p>Provides the text of this event.</p>
                */
            Message?: string;
            /**
                * <p>Specifies the category for the event.</p>
                */
            EventCategories?: string[];
            /**
                * <p>Specifies the date and time of the event.</p>
                */
            Date?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) for the event.</p>
                */
            SourceArn?: string;
    }
    export namespace Event {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Event) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeEvents</a>.</p>
        */
    export interface EventsMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Detailed information about one or more events. </p>
                */
            Events?: Event[];
    }
    export namespace EventsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventsMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeEventSubscriptions</a>.</p>
        */
    export interface DescribeEventSubscriptionsMessage {
            /**
                * <p>The name of the Amazon DocumentDB event notification subscription that you want to
                *             describe.</p>
                */
            SubscriptionName?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeEventSubscriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventSubscriptionsMessage) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeEventSubscriptions</a>.</p>
        */
    export interface EventSubscriptionsMessage {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of event subscriptions.</p>
                */
            EventSubscriptionsList?: EventSubscription[];
    }
    export namespace EventSubscriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSubscriptionsMessage) => any;
    }
    export interface DescribeGlobalClustersMessage {
            /**
                * <p>The user-supplied  cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case-sensitive.</p>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>A filter that specifies one or more global DB clusters to describe.</p>
                *         <p>Supported filters: <code>db-cluster-id</code> accepts  cluster identifiers and  cluster Amazon Resource Names (ARNs). The results list will only include information about the clusters identified by these ARNs.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeGlobalClustersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGlobalClustersMessage) => any;
    }
    export interface GlobalClustersMessage {
            /**
                * <p></p>
                */
            Marker?: string;
            /**
                * <p></p>
                */
            GlobalClusters?: GlobalCluster[];
    }
    export namespace GlobalClustersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalClustersMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribeOrderableDBInstanceOptions</a>.</p>
        */
    export interface DescribeOrderableDBInstanceOptionsMessage {
            /**
                * <p>The name of the engine to retrieve instance options for.</p>
                */
            Engine: string | undefined;
            /**
                * <p>The engine version filter value. Specify this parameter to show only the available
                *             offerings that match the specified engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The instance class filter value. Specify this parameter to show only the available
                *             offerings that match the specified instance class.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The license model filter value. Specify this parameter to show only the available
                *             offerings that match the specified license model.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The virtual private cloud (VPC) filter value. Specify this parameter to show only the
                *             available VPC or non-VPC offerings.</p>
                */
            Vpc?: boolean;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeOrderableDBInstanceOptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrderableDBInstanceOptionsMessage) => any;
    }
    /**
        * <p>The options that are available for an instance.</p>
        */
    export interface OrderableDBInstanceOption {
            /**
                * <p>The engine type of an instance.</p>
                */
            Engine?: string;
            /**
                * <p>The engine version of an instance.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The instance class for an instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The license model for an instance.</p>
                */
            LicenseModel?: string;
            /**
                * <p>A list of Availability Zones for an instance.</p>
                */
            AvailabilityZones?: AvailabilityZone[];
            /**
                * <p>Indicates whether an instance is in a virtual private cloud (VPC).</p>
                */
            Vpc?: boolean;
    }
    export namespace OrderableDBInstanceOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrderableDBInstanceOption) => any;
    }
    /**
        * <p>Represents the output of <a>DescribeOrderableDBInstanceOptions</a>.</p>
        */
    export interface OrderableDBInstanceOptionsMessage {
            /**
                * <p>The options that are available for a particular orderable instance.</p>
                */
            OrderableDBInstanceOptions?: OrderableDBInstanceOption[];
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace OrderableDBInstanceOptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrderableDBInstanceOptionsMessage) => any;
    }
    /**
        * <p>Represents the input to <a>DescribePendingMaintenanceActions</a>.</p>
        */
    export interface DescribePendingMaintenanceActionsMessage {
            /**
                * <p>The ARN of a resource to return pending maintenance actions for.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>A filter that specifies one or more resources to return pending maintenance actions
                *             for.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>db-cluster-id</code> - Accepts cluster identifiers and cluster
                *                     Amazon Resource Names (ARNs). The results list includes only pending maintenance
                *                     actions for the clusters identified by these ARNs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>db-instance-id</code> - Accepts instance identifiers and instance
                *                     ARNs. The results list includes only pending maintenance actions for the DB
                *                     instances identified by these ARNs.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token (marker) is included
                *          in the response so that the remaining results can be retrieved.</p>
                *          <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribePendingMaintenanceActionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePendingMaintenanceActionsMessage) => any;
    }
    /**
        * <p>Represents the output of <a>DescribePendingMaintenanceActions</a>.</p>
        */
    export interface PendingMaintenanceActionsMessage {
            /**
                * <p>The maintenance actions to be applied.</p>
                */
            PendingMaintenanceActions?: ResourcePendingMaintenanceActions[];
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified, the response
                *          includes only records beyond the marker, up to the value specified by
                *          <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace PendingMaintenanceActionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingMaintenanceActionsMessage) => any;
    }
    /**
        * <p>Represents the input to <a>FailoverDBCluster</a>.</p>
        */
    export interface FailoverDBClusterMessage {
            /**
                * <p>A cluster identifier to force a failover for. This parameter is not case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing <code>DBCluster</code>.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>The name of the instance to promote to the primary instance.</p>
                *         <p>You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For
                *             example, <code>mydbcluster-replica1</code>.</p>
                */
            TargetDBInstanceIdentifier?: string;
    }
    export namespace FailoverDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailoverDBClusterMessage) => any;
    }
    export interface FailoverDBClusterResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace FailoverDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailoverDBClusterResult) => any;
    }
    /**
        * <p>Represents the input to <a>ListTagsForResource</a>.</p>
        */
    export interface ListTagsForResourceMessage {
            /**
                * <p>The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name
                *             (ARN).</p>
                */
            ResourceName: string | undefined;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
    }
    export namespace ListTagsForResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceMessage) => any;
    }
    /**
        * <p>Represents the output of <a>ListTagsForResource</a>.</p>
        */
    export interface TagListMessage {
            /**
                * <p>A list of one or more tags.</p>
                */
            TagList?: Tag[];
    }
    export namespace TagListMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagListMessage) => any;
    }
    /**
        * <p>The state of the security group doesn't allow deletion.</p>
        */
    export class InvalidDBSecurityGroupStateFault extends __BaseException {
            readonly name: "InvalidDBSecurityGroupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSecurityGroupStateFault, __BaseException>);
    }
    /**
        * <p>The configuration setting for the log types to be enabled for export to Amazon
        *             CloudWatch Logs for a specific instance or cluster.</p>
        *         <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine
        *             which logs are exported (or not exported) to CloudWatch Logs. The values within these
        *             arrays depend on the engine that is being used.</p>
        */
    export interface CloudwatchLogsExportConfiguration {
            /**
                * <p>The list of log types to enable.</p>
                */
            EnableLogTypes?: string[];
            /**
                * <p>The list of log types to disable.</p>
                */
            DisableLogTypes?: string[];
    }
    export namespace CloudwatchLogsExportConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudwatchLogsExportConfiguration) => any;
    }
    /**
        * <p>Represents the input to <a>ModifyDBCluster</a>.</p>
        */
    export interface ModifyDBClusterMessage {
            /**
                * <p>The cluster identifier for the cluster that is being modified. This parameter is
                *             not case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing <code>DBCluster</code>.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The new cluster identifier for the cluster when renaming a cluster. This
                *             value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster2</code>
                *         </p>
                */
            NewDBClusterIdentifier?: string;
            /**
                * <p>A value that specifies whether the changes in this request and any pending changes are
                *             asynchronously applied as soon as possible, regardless of the
                *                 <code>PreferredMaintenanceWindow</code> setting for the cluster. If this
                *             parameter is set to <code>false</code>, changes to the cluster are applied during the
                *             next maintenance window.</p>
                *         <p>The <code>ApplyImmediately</code> parameter affects only the
                *                 <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If
                *             you set this parameter value to <code>false</code>, the changes to the
                *                 <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are
                *             applied during the next maintenance window. All other changes are applied immediately,
                *             regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
                *         <p>Default: <code>false</code>
                *         </p>
                */
            ApplyImmediately?: boolean;
            /**
                * <p>The number of days for which automated backups are retained. You must specify a
                *             minimum value of 1.</p>
                *         <p>Default: 1</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be a value from 1 to 35.</p>
                *             </li>
                *          </ul>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The name of the cluster parameter group to use for the cluster.</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>A list of virtual private cloud (VPC) security groups that the cluster will belong
                *             to.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The port number on which the cluster accepts connections.</p>
                *         <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p>
                *         <p>Default: The same port as the original cluster.</p>
                */
            Port?: number;
            /**
                * <p>The password for the master database user. This password can contain any printable
                *             ASCII character except forward slash (/), double quote ("), or the "at" symbol
                *             (@).</p>
                *         <p>Constraints: Must contain from 8 to 100 characters.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>The daily time range during which automated backups are created if automated backups
                *             are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p>
                *         <p>The default is a 30-minute window selected at random from an 8-hour block of time for
                *             each Amazon Web Services Region. </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur, in Universal
                *             Coordinated Time (UTC).</p>
                *         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *         </p>
                *         <p>The default is a 30-minute window selected at random from an 8-hour block of time for
                *             each Amazon Web Services Region, occurring on a random day of the week. </p>
                *         <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
                *         <p>Constraints: Minimum 30-minute window.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The configuration setting for the log types to be enabled for export to Amazon
                *             CloudWatch Logs for a specific instance or cluster. The
                *                 <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which
                *             logs are exported (or not exported) to CloudWatch Logs.</p>
                */
            CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration;
            /**
                * <p>The version number of the database engine to which you want to upgrade. Modifying engine version is not supported on Amazon DocumentDB.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is
                *             enabled, the cluster cannot be deleted unless it is modified and
                *                 <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code>
                *             protects clusters from being accidentally deleted.</p>
                */
            DeletionProtection?: boolean;
    }
    export namespace ModifyDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterMessage) => any;
    }
    export interface ModifyDBClusterResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace ModifyDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterResult) => any;
    }
    /**
        * <p>Contains the name of a cluster parameter group.</p>
        */
    export interface DBClusterParameterGroupNameMessage {
            /**
                * <p>The name of a cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be from 1 to 255 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>This value is stored as a lowercase string.</p>
                *         </note>
                */
            DBClusterParameterGroupName?: string;
    }
    export namespace DBClusterParameterGroupNameMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroupNameMessage) => any;
    }
    /**
        * <p>Represents the input to <a>ModifyDBClusterParameterGroup</a>.</p>
        */
    export interface ModifyDBClusterParameterGroupMessage {
            /**
                * <p>The name of the cluster parameter group to modify.</p>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p>A list of parameters in the cluster parameter group to modify.</p>
                */
            Parameters: Parameter[] | undefined;
    }
    export namespace ModifyDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p>Represents the input to <a>ModifyDBClusterSnapshotAttribute</a>.</p>
        */
    export interface ModifyDBClusterSnapshotAttributeMessage {
            /**
                * <p>The identifier for the cluster snapshot to modify the attributes for.</p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The name of the cluster snapshot attribute to modify.</p>
                *         <p>To manage authorization for other Amazon Web Services accounts to copy or restore a manual cluster
                *             snapshot, set this value to <code>restore</code>.</p>
                */
            AttributeName: string | undefined;
            /**
                * <p>A list of cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p>
                *         <p>To authorize other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account IDs. To make the manual cluster snapshot restorable by any Amazon Web Services account, set it to <code>all</code>. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want to be available to all Amazon Web Services accounts.</p>
                */
            ValuesToAdd?: string[];
            /**
                * <p>A list of cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p>
                *         <p>To remove authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account identifiers. To remove authorization for any Amazon Web Services account to copy or restore the cluster snapshot, set it to <code>all</code> . If you specify <code>all</code>, an Amazon Web Services account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual cluster snapshot.</p>
                */
            ValuesToRemove?: string[];
    }
    export namespace ModifyDBClusterSnapshotAttributeMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterSnapshotAttributeMessage) => any;
    }
    export interface ModifyDBClusterSnapshotAttributeResult {
            /**
                * <p>Detailed information about the attributes that are associated with a cluster
                *             snapshot.</p>
                */
            DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
    }
    export namespace ModifyDBClusterSnapshotAttributeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterSnapshotAttributeResult) => any;
    }
    /**
        * <p>You have exceeded the maximum number of accounts that you can share a manual DB
        *             snapshot with. </p>
        */
    export class SharedSnapshotQuotaExceededFault extends __BaseException {
            readonly name: "SharedSnapshotQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SharedSnapshotQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The upgrade failed because a resource that the depends on can't be
        *             modified.</p>
        */
    export class DBUpgradeDependencyFailureFault extends __BaseException {
            readonly name: "DBUpgradeDependencyFailureFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBUpgradeDependencyFailureFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>ModifyDBInstance</a>.</p>
        */
    export interface ModifyDBInstanceMessage {
            /**
                * <p>The instance identifier. This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing <code>DBInstance</code>.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The new compute and memory capacity of the instance; for example, <code>db.r5.large</code>. Not all instance classes are available in all Amazon Web Services Regions. </p>
                *         <p>If you modify the instance class, an outage occurs during the change. The change is
                *             applied during the next maintenance window, unless <code>ApplyImmediately</code> is
                *             specified as <code>true</code> for this request. </p>
                *         <p>Default: Uses existing setting.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>Specifies whether the modifications in this request and any pending modifications are
                *             asynchronously applied as soon as possible, regardless of the
                *                 <code>PreferredMaintenanceWindow</code> setting for the instance. </p>
                *         <p> If this parameter is set to <code>false</code>, changes to the instance are
                *             applied during the next maintenance window. Some parameter changes can cause an outage
                *             and are applied on the next reboot.</p>
                *         <p>Default: <code>false</code>
                *         </p>
                */
            ApplyImmediately?: boolean;
            /**
                * <p>The weekly time range (in UTC) during which system maintenance can occur, which might
                *             result in an outage. Changing this parameter doesn't result in an outage except in the
                *             following situation, and the change is asynchronously applied as soon as possible. If
                *             there are pending actions that cause a reboot, and the maintenance window is changed to
                *             include the current time, changing this parameter causes a reboot of the instance. If
                *             you are moving this window to the current time, there must be at least 30 minutes
                *             between the current time and end of the window to ensure that pending changes are
                *             applied.</p>
                *         <p>Default: Uses existing setting.</p>
                *         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *          </p>
                *         <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
                *         <p>Constraints: Must be at least 30 minutes.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p> The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set <code>Apply Immediately</code> to <code>true</code>. It occurs during the next maintenance window if you set <code>Apply Immediately</code> to <code>false</code>. This value is stored as a lowercase string. </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbinstance</code>
                *         </p>
                */
            NewDBInstanceIdentifier?: string;
            /**
                * <p>Indicates the certificate that needs to be associated with the instance.</p>
                */
            CACertificateIdentifier?: string;
            /**
                * <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p>
                *         <p>Default: 1</p>
                *         <p>Valid values: 0-15</p>
                */
            PromotionTier?: number;
            /**
                * <p>A value that indicates whether to enable Performance Insights for the DB Instance. For
                *             more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html">Using Amazon
                *                 Performance Insights</a>.</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The KMS key identifier for encryption of Performance Insights
                *             data.</p>
                *         <p>The KMS key identifier is the key ARN, key ID, alias ARN, or alias name
                *             for the KMS key.</p>
                *         <p>If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your
                *             default KMS key. There is a default KMS key for your
                *             Amazon Web Services account. Your Amazon Web Services account has a different
                *             default KMS key for each Amazon Web Services region.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
    }
    export namespace ModifyDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBInstanceMessage) => any;
    }
    export interface ModifyDBInstanceResult {
            /**
                * <p>Detailed information about an instance. </p>
                */
            DBInstance?: DBInstance;
    }
    export namespace ModifyDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBInstanceResult) => any;
    }
    /**
        * <p>Represents the input to <a>ModifyDBSubnetGroup</a>.</p>
        */
    export interface ModifyDBSubnetGroupMessage {
            /**
                * <p>The name for the subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p>
                *         <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p>
                *         <p>Example: <code>mySubnetgroup</code>
                *         </p>
                */
            DBSubnetGroupName: string | undefined;
            /**
                * <p>The description for the subnet group.</p>
                */
            DBSubnetGroupDescription?: string;
            /**
                * <p>The Amazon EC2 subnet IDs for the subnet group.</p>
                */
            SubnetIds: string[] | undefined;
    }
    export namespace ModifyDBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSubnetGroupMessage) => any;
    }
    export interface ModifyDBSubnetGroupResult {
            /**
                * <p>Detailed information about a subnet group. </p>
                */
            DBSubnetGroup?: DBSubnetGroup;
    }
    export namespace ModifyDBSubnetGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSubnetGroupResult) => any;
    }
    /**
        * <p>The subnet is already in use in the Availability Zone.</p>
        */
    export class SubnetAlreadyInUse extends __BaseException {
            readonly name: "SubnetAlreadyInUse";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubnetAlreadyInUse, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>ModifyEventSubscription</a>.</p>
        */
    export interface ModifyEventSubscriptionMessage {
            /**
                * <p>The name of the Amazon DocumentDB event notification subscription.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The
                *             ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, set this parameter to <code>db-instance</code>. If this value is not specified, all events are returned.</p>
                *         <p>Valid values: <code>db-instance</code>, <code>db-parameter-group</code>, <code>db-security-group</code>
                *          </p>
                */
            SourceType?: string;
            /**
                * <p> A list of event categories for a <code>SourceType</code> that you want to subscribe
                *             to.</p>
                */
            EventCategories?: string[];
            /**
                * <p> A Boolean value; set to <code>true</code> to activate the subscription. </p>
                */
            Enabled?: boolean;
    }
    export namespace ModifyEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEventSubscriptionMessage) => any;
    }
    export interface ModifyEventSubscriptionResult {
            /**
                * <p>Detailed information about an event to which you have subscribed.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace ModifyEventSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEventSubscriptionResult) => any;
    }
    /**
        * <p>Represents the input to <a>ModifyGlobalCluster</a>.</p>
        */
    export interface ModifyGlobalClusterMessage {
            /**
                * <p>The identifier for the global cluster being modified. This parameter isn't case-sensitive.</p>
                * 		       <p>Constraints:</p>
                *         <ul>
                *             <li>
                * 				           <p>Must match the identifier of an existing global cluster.</p>
                * 			         </li>
                *          </ul>
                */
            GlobalClusterIdentifier: string | undefined;
            /**
                * <p>The new identifier for a global cluster when you modify a global cluster. This value is stored as a lowercase string.</p>
                *         <ul>
                *             <li>
                * 				           <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
                * 				           <p>The first character must be a letter</p>
                * 				           <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                * 			         </li>
                *          </ul>
                * 		       <p>Example: <code>my-cluster2</code>
                *          </p>
                */
            NewGlobalClusterIdentifier?: string;
            /**
                * <p>Indicates if the global cluster has deletion protection enabled. The global cluster can't be deleted when deletion protection is enabled. </p>
                */
            DeletionProtection?: boolean;
    }
    export namespace ModifyGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyGlobalClusterMessage) => any;
    }
    export interface ModifyGlobalClusterResult {
            /**
                * <p>A data type representing an Amazon DocumentDB global cluster.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace ModifyGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyGlobalClusterResult) => any;
    }
    /**
        * <p>Represents the input to <a>RebootDBInstance</a>.</p>
        */
    export interface RebootDBInstanceMessage {
            /**
                * <p>The instance identifier. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing <code>DBInstance</code>.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p>
                *         <p>Constraint: You can't specify <code>true</code> if the instance is not configured for
                *             Multi-AZ.</p>
                */
            ForceFailover?: boolean;
    }
    export namespace RebootDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootDBInstanceMessage) => any;
    }
    export interface RebootDBInstanceResult {
            /**
                * <p>Detailed information about an instance. </p>
                */
            DBInstance?: DBInstance;
    }
    export namespace RebootDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootDBInstanceResult) => any;
    }
    /**
        * <p>Represents the input to <a>RemoveFromGlobalCluster</a>.</p>
        */
    export interface RemoveFromGlobalClusterMessage {
            /**
                * <p>The cluster identifier to detach from the Amazon DocumentDB global cluster. </p>
                */
            GlobalClusterIdentifier: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) identifying the cluster that was detached from the Amazon DocumentDB global cluster. </p>
                */
            DbClusterIdentifier: string | undefined;
    }
    export namespace RemoveFromGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveFromGlobalClusterMessage) => any;
    }
    export interface RemoveFromGlobalClusterResult {
            /**
                * <p>A data type representing an Amazon DocumentDB global cluster.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace RemoveFromGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveFromGlobalClusterResult) => any;
    }
    /**
        * <p>Represents the input to <a>RemoveSourceIdentifierFromSubscription</a>.</p>
        */
    export interface RemoveSourceIdentifierFromSubscriptionMessage {
            /**
                * <p>The name of the Amazon DocumentDB event notification subscription that you want to remove a
                *             source identifier from.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p> The source identifier to be removed from the subscription, such as the instance
                *             identifier for an instance, or the name of a security group. </p>
                */
            SourceIdentifier: string | undefined;
    }
    export namespace RemoveSourceIdentifierFromSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveSourceIdentifierFromSubscriptionMessage) => any;
    }
    export interface RemoveSourceIdentifierFromSubscriptionResult {
            /**
                * <p>Detailed information about an event to which you have subscribed.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace RemoveSourceIdentifierFromSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveSourceIdentifierFromSubscriptionResult) => any;
    }
    /**
        * <p>Represents the input to <a>RemoveTagsFromResource</a>.</p>
        */
    export interface RemoveTagsFromResourceMessage {
            /**
                * <p>The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource
                *             Name (ARN).</p>
                */
            ResourceName: string | undefined;
            /**
                * <p>The tag key (name) of the tag to be removed.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace RemoveTagsFromResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsFromResourceMessage) => any;
    }
    /**
        * <p>Represents the input to <a>ResetDBClusterParameterGroup</a>.</p>
        */
    export interface ResetDBClusterParameterGroupMessage {
            /**
                * <p>The name of the cluster parameter group to reset.</p>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p>A value that is set to <code>true</code> to reset all parameters in the cluster
                *             parameter group to their default values, and <code>false</code> otherwise. You can't use
                *             this parameter if there is a list of parameter names specified for the
                *                 <code>Parameters</code> parameter.</p>
                */
            ResetAllParameters?: boolean;
            /**
                * <p>A list of parameter names in the cluster parameter group to reset to the default
                *             values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is
                *             set to <code>true</code>.</p>
                */
            Parameters?: Parameter[];
    }
    export namespace ResetDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p>The cluster doesn't have enough capacity for the current operation.</p>
        */
    export class InsufficientDBClusterCapacityFault extends __BaseException {
            readonly name: "InsufficientDBClusterCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientDBClusterCapacityFault, __BaseException>);
    }
    /**
        * <p>The state of the snapshot doesn't allow deletion.</p>
        */
    export class InvalidDBSnapshotStateFault extends __BaseException {
            readonly name: "InvalidDBSnapshotStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSnapshotStateFault, __BaseException>);
    }
    /**
        * <p>You cannot restore from a virtual private cloud (VPC) backup to a non-VPC DB
        *             instance.</p>
        */
    export class InvalidRestoreFault extends __BaseException {
            readonly name: "InvalidRestoreFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRestoreFault, __BaseException>);
    }
    /**
        * <p>Represents the input to <a>RestoreDBClusterFromSnapshot</a>.</p>
        */
    export interface RestoreDBClusterFromSnapshotMessage {
            /**
                * <p>Provides the list of Amazon EC2 Availability Zones that instances in the restored DB
                *             cluster can be created in.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The name of the cluster to create from the snapshot or cluster snapshot. This
                *             parameter isn't case sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-snapshot-id</code>
                *         </p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The identifier for the snapshot or cluster snapshot to restore from.</p>
                *         <p>You can use either the name or the Amazon Resource Name (ARN) to specify a cluster
                *             snapshot. However, you can use only the ARN to specify a snapshot.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing snapshot.</p>
                *             </li>
                *          </ul>
                */
            SnapshotIdentifier: string | undefined;
            /**
                * <p>The database engine to use for the new cluster.</p>
                *         <p>Default: The same as source.</p>
                *         <p>Constraint: Must be compatible with the engine of the source.</p>
                */
            Engine: string | undefined;
            /**
                * <p>The version of the database engine to use for the new cluster.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The port number on which the new cluster accepts connections.</p>
                *         <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>.</p>
                *         <p>Default: The same port as the original cluster.</p>
                */
            Port?: number;
            /**
                * <p>The name of the subnet group to use for the new cluster.</p>
                *         <p>Constraints: If provided, must match the name of an existing
                *                 <code>DBSubnetGroup</code>.</p>
                *         <p>Example: <code>mySubnetgroup</code>
                *         </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A list of virtual private cloud (VPC) security groups that the new cluster will
                *             belong to.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The tags to be assigned to the restored cluster.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.</p>
                *         <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
                *         <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the
                *             following occurs:</p>
                *         <ul>
                *             <li>
                *                 <p>If the snapshot or cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the snapshot or the cluster snapshot.</p>
                *             </li>
                *             <li>
                *                 <p>If the snapshot or the cluster snapshot in
                *                         <code>SnapshotIdentifier</code> is not encrypted, then the restored DB
                *                     cluster is not encrypted.</p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
            /**
                * <p>A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
                */
            DeletionProtection?: boolean;
    }
    export namespace RestoreDBClusterFromSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterFromSnapshotMessage) => any;
    }
    export interface RestoreDBClusterFromSnapshotResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace RestoreDBClusterFromSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterFromSnapshotResult) => any;
    }
    /**
        * <p>Represents the input to <a>RestoreDBClusterToPointInTime</a>.</p>
        */
    export interface RestoreDBClusterToPointInTimeMessage {
            /**
                * <p>The name of the new cluster to be created.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The type of restore to be performed. You can specify one of the following values:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>full-copy</code> - The new DB cluster is restored as a full copy of the
                *                 source DB cluster.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>copy-on-write</code> - The new DB cluster is restored as a clone of the
                *                 source DB cluster.</p>
                *             </li>
                *          </ul>
                *         <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p>
                *         <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is
                *             restored as a full copy of the source DB cluster.</p>
                */
            RestoreType?: string;
            /**
                * <p>The identifier of the source cluster from which to restore.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing <code>DBCluster</code>.</p>
                *             </li>
                *          </ul>
                */
            SourceDBClusterIdentifier: string | undefined;
            /**
                * <p>The date and time to restore the cluster to.</p>
                *         <p>Valid values: A time in Universal Coordinated Time (UTC) format.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be before the latest restorable time for the instance.</p>
                *             </li>
                *             <li>
                *                 <p>Must be specified if the <code>UseLatestRestorableTime</code> parameter is not provided.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot be specified if the <code>UseLatestRestorableTime</code> parameter is <code>true</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Cannot be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code>.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>2015-03-07T23:45:00Z</code>
                *         </p>
                */
            RestoreToTime?: Date;
            /**
                * <p>A value that is set to <code>true</code> to restore the cluster to the latest
                *             restorable backup time, and <code>false</code> otherwise. </p>
                *         <p>Default: <code>false</code>
                *         </p>
                *         <p>Constraints: Cannot be specified if the <code>RestoreToTime</code> parameter is
                *             provided.</p>
                */
            UseLatestRestorableTime?: boolean;
            /**
                * <p>The port number on which the new cluster accepts connections.</p>
                *         <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p>
                *         <p>Default: The default port for the engine.</p>
                */
            Port?: number;
            /**
                * <p>The subnet group name to use for the new cluster.</p>
                *         <p>Constraints: If provided, must match the name of an existing
                *                 <code>DBSubnetGroup</code>.</p>
                *         <p>Example: <code>mySubnetgroup</code>
                *         </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A list of VPC security groups that the new cluster belongs to.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The tags to be assigned to the restored cluster.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.</p>
                *         <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
                *         <p>You can restore to a new cluster and encrypt the new cluster with an KMS key that is different from the KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p>
                *         <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
                *         <ul>
                *             <li>
                *                 <p>If the cluster is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the source cluster.</p>
                *             </li>
                *             <li>
                *                 <p>If the cluster is not encrypted, then the restored cluster is not encrypted.</p>
                *             </li>
                *          </ul>
                *         <p>If <code>DBClusterIdentifier</code> refers to a cluster that is not encrypted, then
                *             the restore request is rejected.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A list of log types that must be enabled for exporting to Amazon CloudWatch
                *             Logs.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
                */
            DeletionProtection?: boolean;
    }
    export namespace RestoreDBClusterToPointInTimeMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterToPointInTimeMessage) => any;
    }
    export interface RestoreDBClusterToPointInTimeResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace RestoreDBClusterToPointInTimeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterToPointInTimeResult) => any;
    }
    export interface StartDBClusterMessage {
            /**
                * <p>The identifier of the cluster to restart. Example:
                *                 <code>docdb-2019-05-28-15-24-52</code>
                *          </p>
                */
            DBClusterIdentifier: string | undefined;
    }
    export namespace StartDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBClusterMessage) => any;
    }
    export interface StartDBClusterResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace StartDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBClusterResult) => any;
    }
    export interface StopDBClusterMessage {
            /**
                * <p>The identifier of the cluster to stop. Example:
                *             <code>docdb-2019-05-28-15-24-52</code>
                *          </p>
                */
            DBClusterIdentifier: string | undefined;
    }
    export namespace StopDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBClusterMessage) => any;
    }
    export interface StopDBClusterResult {
            /**
                * <p>Detailed information about a cluster. </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace StopDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBClusterResult) => any;
    }
}

declare module '@aws-sdk/client-docdb/node_modules/@aws-sdk/client-docdb/dist-types/models/DocDBServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from DocDB service.
        */
    export class DocDBServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

