// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-cognito-identity' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CognitoIdentityClient } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { CreateIdentityPoolCommandInput, CreateIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/CreateIdentityPoolCommand";
    import { DeleteIdentitiesCommandInput, DeleteIdentitiesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DeleteIdentitiesCommand";
    import { DeleteIdentityPoolCommandInput, DeleteIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DeleteIdentityPoolCommand";
    import { DescribeIdentityCommandInput, DescribeIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DescribeIdentityCommand";
    import { DescribeIdentityPoolCommandInput, DescribeIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DescribeIdentityPoolCommand";
    import { GetCredentialsForIdentityCommandInput, GetCredentialsForIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetCredentialsForIdentityCommand";
    import { GetIdCommandInput, GetIdCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetIdCommand";
    import { GetIdentityPoolRolesCommandInput, GetIdentityPoolRolesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetIdentityPoolRolesCommand";
    import { GetOpenIdTokenCommandInput, GetOpenIdTokenCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetOpenIdTokenCommand";
    import { GetOpenIdTokenForDeveloperIdentityCommandInput, GetOpenIdTokenForDeveloperIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetOpenIdTokenForDeveloperIdentityCommand";
    import { GetPrincipalTagAttributeMapCommandInput, GetPrincipalTagAttributeMapCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetPrincipalTagAttributeMapCommand";
    import { ListIdentitiesCommandInput, ListIdentitiesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListIdentitiesCommand";
    import { ListIdentityPoolsCommandInput, ListIdentityPoolsCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListIdentityPoolsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListTagsForResourceCommand";
    import { LookupDeveloperIdentityCommandInput, LookupDeveloperIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/LookupDeveloperIdentityCommand";
    import { MergeDeveloperIdentitiesCommandInput, MergeDeveloperIdentitiesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/MergeDeveloperIdentitiesCommand";
    import { SetIdentityPoolRolesCommandInput, SetIdentityPoolRolesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/SetIdentityPoolRolesCommand";
    import { SetPrincipalTagAttributeMapCommandInput, SetPrincipalTagAttributeMapCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/SetPrincipalTagAttributeMapCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/TagResourceCommand";
    import { UnlinkDeveloperIdentityCommandInput, UnlinkDeveloperIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UnlinkDeveloperIdentityCommand";
    import { UnlinkIdentityCommandInput, UnlinkIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UnlinkIdentityCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UntagResourceCommand";
    import { UpdateIdentityPoolCommandInput, UpdateIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UpdateIdentityPoolCommand";
    /**
        * <fullname>Amazon Cognito Federated Identities</fullname>
        *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary
        *          credentials to mobile devices and other untrusted environments. It uniquely identifies a
        *          device and supplies the user with a consistent identity over the lifetime of an
        *          application.</p>
        *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or
        *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon
        *          Cognito user pool, and you can also choose to support unauthenticated access from your app.
        *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider
        *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS
        *          credentials.</p>
        *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide
        *          see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication Flow</a>.</p>
        *          <p>For more information see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon Cognito Federated Identities</a>.</p>
        */
    export class CognitoIdentity extends CognitoIdentityClient {
            /**
                * <p>Creates a new identity pool. The identity pool is a store of user identity
                *          information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p>
                *
                *          <ul>
                *             <li>
                *                <p>Facebook: <code>graph.facebook.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Google: <code>accounts.google.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon: <code>www.amazon.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Twitter: <code>api.twitter.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Digits: <code>www.digits.com</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            createIdentityPool(args: CreateIdentityPoolCommandInput, options?: __HttpHandlerOptions): Promise<CreateIdentityPoolCommandOutput>;
            createIdentityPool(args: CreateIdentityPoolCommandInput, cb: (err: any, data?: CreateIdentityPoolCommandOutput) => void): void;
            createIdentityPool(args: CreateIdentityPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIdentityPoolCommandOutput) => void): void;
            /**
                * <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities
                *          that you want to delete.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            deleteIdentities(args: DeleteIdentitiesCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIdentitiesCommandOutput>;
            deleteIdentities(args: DeleteIdentitiesCommandInput, cb: (err: any, data?: DeleteIdentitiesCommandOutput) => void): void;
            deleteIdentities(args: DeleteIdentitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIdentitiesCommandOutput) => void): void;
            /**
                * <p>Deletes an identity pool. Once a pool is deleted, users will not be able to
                *          authenticate with the pool.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            deleteIdentityPool(args: DeleteIdentityPoolCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIdentityPoolCommandOutput>;
            deleteIdentityPool(args: DeleteIdentityPoolCommandInput, cb: (err: any, data?: DeleteIdentityPoolCommandOutput) => void): void;
            deleteIdentityPool(args: DeleteIdentityPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIdentityPoolCommandOutput) => void): void;
            /**
                * <p>Returns metadata related to the given identity, including when the identity was
                *          created and any associated linked logins.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            describeIdentity(args: DescribeIdentityCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIdentityCommandOutput>;
            describeIdentity(args: DescribeIdentityCommandInput, cb: (err: any, data?: DescribeIdentityCommandOutput) => void): void;
            describeIdentity(args: DescribeIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIdentityCommandOutput) => void): void;
            /**
                * <p>Gets details about a particular identity pool, including the pool name, ID
                *          description, creation date, and current number of users.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            describeIdentityPool(args: DescribeIdentityPoolCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIdentityPoolCommandOutput>;
            describeIdentityPool(args: DescribeIdentityPoolCommandInput, cb: (err: any, data?: DescribeIdentityPoolCommandOutput) => void): void;
            describeIdentityPool(args: DescribeIdentityPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIdentityPoolCommandOutput) => void): void;
            /**
                * <p>Returns credentials for the provided identity ID. Any provided logins will be
                *          validated against supported login providers. If the token is for
                *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service
                *          with the appropriate role for the token.</p>
                *          <p>This is a public API. You do not need any credentials to call this API.</p>
                */
            getCredentialsForIdentity(args: GetCredentialsForIdentityCommandInput, options?: __HttpHandlerOptions): Promise<GetCredentialsForIdentityCommandOutput>;
            getCredentialsForIdentity(args: GetCredentialsForIdentityCommandInput, cb: (err: any, data?: GetCredentialsForIdentityCommandOutput) => void): void;
            getCredentialsForIdentity(args: GetCredentialsForIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCredentialsForIdentityCommandOutput) => void): void;
            /**
                * <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an
                *          implicit linked account.</p>
                *          <p>This is a public API. You do not need any credentials to call this API.</p>
                */
            getId(args: GetIdCommandInput, options?: __HttpHandlerOptions): Promise<GetIdCommandOutput>;
            getId(args: GetIdCommandInput, cb: (err: any, data?: GetIdCommandOutput) => void): void;
            getId(args: GetIdCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdCommandOutput) => void): void;
            /**
                * <p>Gets the roles for an identity pool.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            getIdentityPoolRoles(args: GetIdentityPoolRolesCommandInput, options?: __HttpHandlerOptions): Promise<GetIdentityPoolRolesCommandOutput>;
            getIdentityPoolRoles(args: GetIdentityPoolRolesCommandInput, cb: (err: any, data?: GetIdentityPoolRolesCommandOutput) => void): void;
            getIdentityPoolRoles(args: GetIdentityPoolRolesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdentityPoolRolesCommandOutput) => void): void;
            /**
                * <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by
                *             <a>GetId</a>. You can optionally add additional logins for the identity.
                *          Supplying multiple logins creates an implicit link.</p>
                *          <p>The OpenID token is valid for 10 minutes.</p>
                *          <p>This is a public API. You do not need any credentials to call this API.</p>
                */
            getOpenIdToken(args: GetOpenIdTokenCommandInput, options?: __HttpHandlerOptions): Promise<GetOpenIdTokenCommandOutput>;
            getOpenIdToken(args: GetOpenIdTokenCommandInput, cb: (err: any, data?: GetOpenIdTokenCommandOutput) => void): void;
            getOpenIdToken(args: GetOpenIdTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOpenIdTokenCommandOutput) => void): void;
            /**
                * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect
                *          token for a user authenticated by your backend authentication process. Supplying multiple
                *          logins will create an implicit linked account. You can only specify one developer provider
                *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer
                *          provider is the "domain" by which Cognito will refer to your users.</p>
                *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity
                *          and to link new logins (that is, user credentials issued by a public provider or developer
                *          provider) to an existing identity. When you want to create a new identity, the
                *             <code>IdentityId</code> should be null. When you want to associate a new login with an
                *          existing authenticated/unauthenticated identity, you can do so by providing the existing
                *             <code>IdentityId</code>. This API will create the identity in the specified
                *             <code>IdentityPoolId</code>.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            getOpenIdTokenForDeveloperIdentity(args: GetOpenIdTokenForDeveloperIdentityCommandInput, options?: __HttpHandlerOptions): Promise<GetOpenIdTokenForDeveloperIdentityCommandOutput>;
            getOpenIdTokenForDeveloperIdentity(args: GetOpenIdTokenForDeveloperIdentityCommandInput, cb: (err: any, data?: GetOpenIdTokenForDeveloperIdentityCommandOutput) => void): void;
            getOpenIdTokenForDeveloperIdentity(args: GetOpenIdTokenForDeveloperIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOpenIdTokenForDeveloperIdentityCommandOutput) => void): void;
            /**
                * <p>Use <code>GetPrincipalTagAttributeMap</code> to list all mappings between <code>PrincipalTags</code> and user attributes.</p>
                */
            getPrincipalTagAttributeMap(args: GetPrincipalTagAttributeMapCommandInput, options?: __HttpHandlerOptions): Promise<GetPrincipalTagAttributeMapCommandOutput>;
            getPrincipalTagAttributeMap(args: GetPrincipalTagAttributeMapCommandInput, cb: (err: any, data?: GetPrincipalTagAttributeMapCommandOutput) => void): void;
            getPrincipalTagAttributeMap(args: GetPrincipalTagAttributeMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPrincipalTagAttributeMapCommandOutput) => void): void;
            /**
                * <p>Lists the identities in an identity pool.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            listIdentities(args: ListIdentitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListIdentitiesCommandOutput>;
            listIdentities(args: ListIdentitiesCommandInput, cb: (err: any, data?: ListIdentitiesCommandOutput) => void): void;
            listIdentities(args: ListIdentitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIdentitiesCommandOutput) => void): void;
            /**
                * <p>Lists all of the Cognito identity pools registered for your account.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            listIdentityPools(args: ListIdentityPoolsCommandInput, options?: __HttpHandlerOptions): Promise<ListIdentityPoolsCommandOutput>;
            listIdentityPools(args: ListIdentityPoolsCommandInput, cb: (err: any, data?: ListIdentityPoolsCommandOutput) => void): void;
            listIdentityPools(args: ListIdentityPoolsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIdentityPoolsCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p>
                *          <p>A tag is a label that you can apply to identity pools to categorize and manage them in
                *          different ways, such as by purpose, owner, environment, or other criteria.</p>
                *          <p>You can use this action up to 10 times per second, per account.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves the <code>IdentityID</code> associated with a
                *             <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>
                *          values associated with an <code>IdentityId</code> for an existing identity. Either
                *             <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you
                *          supply only one of these values, the other value will be searched in the database and
                *          returned as a part of the response. If you supply both,
                *             <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If
                *          the values are verified against the database, the response returns both values and is the
                *          same as the request. Otherwise a <code>ResourceConflictException</code> is
                *          thrown.</p>
                *          <p>
                *             <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane
                *          operations: for example, to enable customer service to locate an identity ID by username.
                *          If you are using it for higher-volume operations such as user authentication, your requests
                *          are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a
                *          better option for higher-volume operations for user authentication.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            lookupDeveloperIdentity(args: LookupDeveloperIdentityCommandInput, options?: __HttpHandlerOptions): Promise<LookupDeveloperIdentityCommandOutput>;
            lookupDeveloperIdentity(args: LookupDeveloperIdentityCommandInput, cb: (err: any, data?: LookupDeveloperIdentityCommandOutput) => void): void;
            lookupDeveloperIdentity(args: LookupDeveloperIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: LookupDeveloperIdentityCommandOutput) => void): void;
            /**
                * <p>Merges two users having different <code>IdentityId</code>s, existing in the same
                *          identity pool, and identified by the same developer provider. You can use this action to
                *          request that discrete users be merged and identified as a single user in the Cognito
                *          environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>)
                *          with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only
                *          developer-authenticated users can be merged. If the users to be merged are associated with
                *          the same public provider, but as two different users, an exception will be
                *          thrown.</p>
                *          <p>The number of linked logins is limited to 20. So, the number of linked logins for the
                *          source user, <code>SourceUserIdentifier</code>, and the destination user,
                *          <code>DestinationUserIdentifier</code>, together should not be larger than 20.
                *          Otherwise, an exception will be thrown.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            mergeDeveloperIdentities(args: MergeDeveloperIdentitiesCommandInput, options?: __HttpHandlerOptions): Promise<MergeDeveloperIdentitiesCommandOutput>;
            mergeDeveloperIdentities(args: MergeDeveloperIdentitiesCommandInput, cb: (err: any, data?: MergeDeveloperIdentitiesCommandOutput) => void): void;
            mergeDeveloperIdentities(args: MergeDeveloperIdentitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MergeDeveloperIdentitiesCommandOutput) => void): void;
            /**
                * <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            setIdentityPoolRoles(args: SetIdentityPoolRolesCommandInput, options?: __HttpHandlerOptions): Promise<SetIdentityPoolRolesCommandOutput>;
            setIdentityPoolRoles(args: SetIdentityPoolRolesCommandInput, cb: (err: any, data?: SetIdentityPoolRolesCommandOutput) => void): void;
            setIdentityPoolRoles(args: SetIdentityPoolRolesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIdentityPoolRolesCommandOutput) => void): void;
            /**
                * <p>You can use this operation to use default (username and clientID) attribute or custom attribute mappings.</p>
                */
            setPrincipalTagAttributeMap(args: SetPrincipalTagAttributeMapCommandInput, options?: __HttpHandlerOptions): Promise<SetPrincipalTagAttributeMapCommandOutput>;
            setPrincipalTagAttributeMap(args: SetPrincipalTagAttributeMapCommandInput, cb: (err: any, data?: SetPrincipalTagAttributeMapCommandOutput) => void): void;
            setPrincipalTagAttributeMap(args: SetPrincipalTagAttributeMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetPrincipalTagAttributeMapCommandOutput) => void): void;
            /**
                * <p>Assigns a set of tags to the specified Amazon Cognito identity pool. A tag is a label
                *          that you can use to categorize and manage identity pools in different ways, such as by
                *          purpose, owner, environment, or other criteria.</p>
                *          <p>Each tag consists of a key and value, both of which you define. A key is a general
                *          category for more specific values. For example, if you have two versions of an identity
                *          pool, one for testing and another for production, you might assign an
                *             <code>Environment</code> tag key to both identity pools. The value of this key might be
                *             <code>Test</code> for one identity pool and <code>Production</code> for the
                *          other.</p>
                *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that
                *          they appear on the Billing and Cost Management console, where you can track the costs
                *          associated with your identity pools. In an IAM policy, you can constrain permissions for
                *          identity pools based on specific tags or tag values.</p>
                *          <p>You can use this action up to 5 times per second, per account. An identity pool can have
                *          as many as 50 tags.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked
                *          developer users will be considered new identities next time they are seen. If, for a given
                *          Cognito identity, you remove all federated identities as well as the developer user
                *          identifier, the Cognito identity becomes inaccessible.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            unlinkDeveloperIdentity(args: UnlinkDeveloperIdentityCommandInput, options?: __HttpHandlerOptions): Promise<UnlinkDeveloperIdentityCommandOutput>;
            unlinkDeveloperIdentity(args: UnlinkDeveloperIdentityCommandInput, cb: (err: any, data?: UnlinkDeveloperIdentityCommandOutput) => void): void;
            unlinkDeveloperIdentity(args: UnlinkDeveloperIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UnlinkDeveloperIdentityCommandOutput) => void): void;
            /**
                * <p>Unlinks a federated identity from an existing account. Unlinked logins will be
                *          considered new identities next time they are seen. Removing the last linked login will make
                *          this identity inaccessible.</p>
                *          <p>This is a public API. You do not need any credentials to call this API.</p>
                */
            unlinkIdentity(args: UnlinkIdentityCommandInput, options?: __HttpHandlerOptions): Promise<UnlinkIdentityCommandOutput>;
            unlinkIdentity(args: UnlinkIdentityCommandInput, cb: (err: any, data?: UnlinkIdentityCommandOutput) => void): void;
            unlinkIdentity(args: UnlinkIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UnlinkIdentityCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified Amazon Cognito identity pool. You can use
                *          this action up to 5 times per second, per account</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an identity pool.</p>
                *          <p>You must use AWS Developer credentials to call this API.</p>
                */
            updateIdentityPool(args: UpdateIdentityPoolCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIdentityPoolCommandOutput>;
            updateIdentityPool(args: UpdateIdentityPoolCommandInput, cb: (err: any, data?: UpdateIdentityPoolCommandOutput) => void): void;
            updateIdentityPool(args: UpdateIdentityPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIdentityPoolCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateIdentityPoolCommandInput, CreateIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/CreateIdentityPoolCommand";
    import { DeleteIdentitiesCommandInput, DeleteIdentitiesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DeleteIdentitiesCommand";
    import { DeleteIdentityPoolCommandInput, DeleteIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DeleteIdentityPoolCommand";
    import { DescribeIdentityCommandInput, DescribeIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DescribeIdentityCommand";
    import { DescribeIdentityPoolCommandInput, DescribeIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DescribeIdentityPoolCommand";
    import { GetCredentialsForIdentityCommandInput, GetCredentialsForIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetCredentialsForIdentityCommand";
    import { GetIdCommandInput, GetIdCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetIdCommand";
    import { GetIdentityPoolRolesCommandInput, GetIdentityPoolRolesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetIdentityPoolRolesCommand";
    import { GetOpenIdTokenCommandInput, GetOpenIdTokenCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetOpenIdTokenCommand";
    import { GetOpenIdTokenForDeveloperIdentityCommandInput, GetOpenIdTokenForDeveloperIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetOpenIdTokenForDeveloperIdentityCommand";
    import { GetPrincipalTagAttributeMapCommandInput, GetPrincipalTagAttributeMapCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetPrincipalTagAttributeMapCommand";
    import { ListIdentitiesCommandInput, ListIdentitiesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListIdentitiesCommand";
    import { ListIdentityPoolsCommandInput, ListIdentityPoolsCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListIdentityPoolsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListTagsForResourceCommand";
    import { LookupDeveloperIdentityCommandInput, LookupDeveloperIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/LookupDeveloperIdentityCommand";
    import { MergeDeveloperIdentitiesCommandInput, MergeDeveloperIdentitiesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/MergeDeveloperIdentitiesCommand";
    import { SetIdentityPoolRolesCommandInput, SetIdentityPoolRolesCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/SetIdentityPoolRolesCommand";
    import { SetPrincipalTagAttributeMapCommandInput, SetPrincipalTagAttributeMapCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/SetPrincipalTagAttributeMapCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/TagResourceCommand";
    import { UnlinkDeveloperIdentityCommandInput, UnlinkDeveloperIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UnlinkDeveloperIdentityCommand";
    import { UnlinkIdentityCommandInput, UnlinkIdentityCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UnlinkIdentityCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UntagResourceCommand";
    import { UpdateIdentityPoolCommandInput, UpdateIdentityPoolCommandOutput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UpdateIdentityPoolCommand";
    export type ServiceInputTypes = CreateIdentityPoolCommandInput | DeleteIdentitiesCommandInput | DeleteIdentityPoolCommandInput | DescribeIdentityCommandInput | DescribeIdentityPoolCommandInput | GetCredentialsForIdentityCommandInput | GetIdCommandInput | GetIdentityPoolRolesCommandInput | GetOpenIdTokenCommandInput | GetOpenIdTokenForDeveloperIdentityCommandInput | GetPrincipalTagAttributeMapCommandInput | ListIdentitiesCommandInput | ListIdentityPoolsCommandInput | ListTagsForResourceCommandInput | LookupDeveloperIdentityCommandInput | MergeDeveloperIdentitiesCommandInput | SetIdentityPoolRolesCommandInput | SetPrincipalTagAttributeMapCommandInput | TagResourceCommandInput | UnlinkDeveloperIdentityCommandInput | UnlinkIdentityCommandInput | UntagResourceCommandInput | UpdateIdentityPoolCommandInput;
    export type ServiceOutputTypes = CreateIdentityPoolCommandOutput | DeleteIdentitiesCommandOutput | DeleteIdentityPoolCommandOutput | DescribeIdentityCommandOutput | DescribeIdentityPoolCommandOutput | GetCredentialsForIdentityCommandOutput | GetIdCommandOutput | GetIdentityPoolRolesCommandOutput | GetOpenIdTokenCommandOutput | GetOpenIdTokenForDeveloperIdentityCommandOutput | GetPrincipalTagAttributeMapCommandOutput | ListIdentitiesCommandOutput | ListIdentityPoolsCommandOutput | ListTagsForResourceCommandOutput | LookupDeveloperIdentityCommandOutput | MergeDeveloperIdentitiesCommandOutput | SetIdentityPoolRolesCommandOutput | SetPrincipalTagAttributeMapCommandOutput | TagResourceCommandOutput | UnlinkDeveloperIdentityCommandOutput | UnlinkIdentityCommandOutput | UntagResourceCommandOutput | UpdateIdentityPoolCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CognitoIdentityClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CognitoIdentityClient class constructor that set the region, credentials and other options.
        */
    export interface CognitoIdentityClientConfig extends CognitoIdentityClientConfigType {
    }
    type CognitoIdentityClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CognitoIdentityClient class. This is resolved and normalized from the {@link CognitoIdentityClientConfig | constructor configuration interface}.
        */
    export interface CognitoIdentityClientResolvedConfig extends CognitoIdentityClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Cognito Federated Identities</fullname>
        *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary
        *          credentials to mobile devices and other untrusted environments. It uniquely identifies a
        *          device and supplies the user with a consistent identity over the lifetime of an
        *          application.</p>
        *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or
        *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon
        *          Cognito user pool, and you can also choose to support unauthenticated access from your app.
        *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider
        *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS
        *          credentials.</p>
        *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide
        *          see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication Flow</a>.</p>
        *          <p>For more information see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon Cognito Federated Identities</a>.</p>
        */
    export class CognitoIdentityClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CognitoIdentityClientResolvedConfig> {
            /**
                * The resolved configuration of CognitoIdentityClient class. This is resolved and normalized from the {@link CognitoIdentityClientConfig | constructor configuration interface}.
                */
            readonly config: CognitoIdentityClientResolvedConfig;
            constructor(configuration: CognitoIdentityClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/CreateIdentityPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { CreateIdentityPoolInput, IdentityPool } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface CreateIdentityPoolCommandInput extends CreateIdentityPoolInput {
    }
    export interface CreateIdentityPoolCommandOutput extends IdentityPool, __MetadataBearer {
    }
    /**
        * <p>Creates a new identity pool. The identity pool is a store of user identity
        *          information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p>
        *
        *          <ul>
        *             <li>
        *                <p>Facebook: <code>graph.facebook.com</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Google: <code>accounts.google.com</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Amazon: <code>www.amazon.com</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Twitter: <code>api.twitter.com</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Digits: <code>www.digits.com</code>
        *                </p>
        *             </li>
        *          </ul>
        *
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, CreateIdentityPoolCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, CreateIdentityPoolCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new CreateIdentityPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIdentityPoolCommandInput} for command's `input` shape.
        * @see {@link CreateIdentityPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class CreateIdentityPoolCommand extends $Command<CreateIdentityPoolCommandInput, CreateIdentityPoolCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: CreateIdentityPoolCommandInput;
            constructor(input: CreateIdentityPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIdentityPoolCommandInput, CreateIdentityPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DeleteIdentitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { DeleteIdentitiesInput, DeleteIdentitiesResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface DeleteIdentitiesCommandInput extends DeleteIdentitiesInput {
    }
    export interface DeleteIdentitiesCommandOutput extends DeleteIdentitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities
        *          that you want to delete.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, DeleteIdentitiesCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, DeleteIdentitiesCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new DeleteIdentitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIdentitiesCommandInput} for command's `input` shape.
        * @see {@link DeleteIdentitiesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class DeleteIdentitiesCommand extends $Command<DeleteIdentitiesCommandInput, DeleteIdentitiesCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: DeleteIdentitiesCommandInput;
            constructor(input: DeleteIdentitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIdentitiesCommandInput, DeleteIdentitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DeleteIdentityPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { DeleteIdentityPoolInput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface DeleteIdentityPoolCommandInput extends DeleteIdentityPoolInput {
    }
    export interface DeleteIdentityPoolCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an identity pool. Once a pool is deleted, users will not be able to
        *          authenticate with the pool.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, DeleteIdentityPoolCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, DeleteIdentityPoolCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new DeleteIdentityPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIdentityPoolCommandInput} for command's `input` shape.
        * @see {@link DeleteIdentityPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class DeleteIdentityPoolCommand extends $Command<DeleteIdentityPoolCommandInput, DeleteIdentityPoolCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: DeleteIdentityPoolCommandInput;
            constructor(input: DeleteIdentityPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIdentityPoolCommandInput, DeleteIdentityPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DescribeIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { DescribeIdentityInput, IdentityDescription } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface DescribeIdentityCommandInput extends DescribeIdentityInput {
    }
    export interface DescribeIdentityCommandOutput extends IdentityDescription, __MetadataBearer {
    }
    /**
        * <p>Returns metadata related to the given identity, including when the identity was
        *          created and any associated linked logins.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, DescribeIdentityCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, DescribeIdentityCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new DescribeIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIdentityCommandInput} for command's `input` shape.
        * @see {@link DescribeIdentityCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class DescribeIdentityCommand extends $Command<DescribeIdentityCommandInput, DescribeIdentityCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: DescribeIdentityCommandInput;
            constructor(input: DescribeIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIdentityCommandInput, DescribeIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/DescribeIdentityPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { DescribeIdentityPoolInput, IdentityPool } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface DescribeIdentityPoolCommandInput extends DescribeIdentityPoolInput {
    }
    export interface DescribeIdentityPoolCommandOutput extends IdentityPool, __MetadataBearer {
    }
    /**
        * <p>Gets details about a particular identity pool, including the pool name, ID
        *          description, creation date, and current number of users.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, DescribeIdentityPoolCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, DescribeIdentityPoolCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new DescribeIdentityPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIdentityPoolCommandInput} for command's `input` shape.
        * @see {@link DescribeIdentityPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class DescribeIdentityPoolCommand extends $Command<DescribeIdentityPoolCommandInput, DescribeIdentityPoolCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: DescribeIdentityPoolCommandInput;
            constructor(input: DescribeIdentityPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIdentityPoolCommandInput, DescribeIdentityPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetCredentialsForIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { GetCredentialsForIdentityInput, GetCredentialsForIdentityResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface GetCredentialsForIdentityCommandInput extends GetCredentialsForIdentityInput {
    }
    export interface GetCredentialsForIdentityCommandOutput extends GetCredentialsForIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Returns credentials for the provided identity ID. Any provided logins will be
        *          validated against supported login providers. If the token is for
        *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service
        *          with the appropriate role for the token.</p>
        *          <p>This is a public API. You do not need any credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, GetCredentialsForIdentityCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, GetCredentialsForIdentityCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new GetCredentialsForIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCredentialsForIdentityCommandInput} for command's `input` shape.
        * @see {@link GetCredentialsForIdentityCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class GetCredentialsForIdentityCommand extends $Command<GetCredentialsForIdentityCommandInput, GetCredentialsForIdentityCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: GetCredentialsForIdentityCommandInput;
            constructor(input: GetCredentialsForIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCredentialsForIdentityCommandInput, GetCredentialsForIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetIdCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { GetIdInput, GetIdResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface GetIdCommandInput extends GetIdInput {
    }
    export interface GetIdCommandOutput extends GetIdResponse, __MetadataBearer {
    }
    /**
        * <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an
        *          implicit linked account.</p>
        *          <p>This is a public API. You do not need any credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, GetIdCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, GetIdCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new GetIdCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdCommandInput} for command's `input` shape.
        * @see {@link GetIdCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class GetIdCommand extends $Command<GetIdCommandInput, GetIdCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: GetIdCommandInput;
            constructor(input: GetIdCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdCommandInput, GetIdCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetIdentityPoolRolesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { GetIdentityPoolRolesInput, GetIdentityPoolRolesResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface GetIdentityPoolRolesCommandInput extends GetIdentityPoolRolesInput {
    }
    export interface GetIdentityPoolRolesCommandOutput extends GetIdentityPoolRolesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the roles for an identity pool.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, GetIdentityPoolRolesCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, GetIdentityPoolRolesCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new GetIdentityPoolRolesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdentityPoolRolesCommandInput} for command's `input` shape.
        * @see {@link GetIdentityPoolRolesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class GetIdentityPoolRolesCommand extends $Command<GetIdentityPoolRolesCommandInput, GetIdentityPoolRolesCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: GetIdentityPoolRolesCommandInput;
            constructor(input: GetIdentityPoolRolesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdentityPoolRolesCommandInput, GetIdentityPoolRolesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetOpenIdTokenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { GetOpenIdTokenInput, GetOpenIdTokenResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface GetOpenIdTokenCommandInput extends GetOpenIdTokenInput {
    }
    export interface GetOpenIdTokenCommandOutput extends GetOpenIdTokenResponse, __MetadataBearer {
    }
    /**
        * <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by
        *             <a>GetId</a>. You can optionally add additional logins for the identity.
        *          Supplying multiple logins creates an implicit link.</p>
        *          <p>The OpenID token is valid for 10 minutes.</p>
        *          <p>This is a public API. You do not need any credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, GetOpenIdTokenCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, GetOpenIdTokenCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new GetOpenIdTokenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOpenIdTokenCommandInput} for command's `input` shape.
        * @see {@link GetOpenIdTokenCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class GetOpenIdTokenCommand extends $Command<GetOpenIdTokenCommandInput, GetOpenIdTokenCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: GetOpenIdTokenCommandInput;
            constructor(input: GetOpenIdTokenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOpenIdTokenCommandInput, GetOpenIdTokenCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetOpenIdTokenForDeveloperIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface GetOpenIdTokenForDeveloperIdentityCommandInput extends GetOpenIdTokenForDeveloperIdentityInput {
    }
    export interface GetOpenIdTokenForDeveloperIdentityCommandOutput extends GetOpenIdTokenForDeveloperIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect
        *          token for a user authenticated by your backend authentication process. Supplying multiple
        *          logins will create an implicit linked account. You can only specify one developer provider
        *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer
        *          provider is the "domain" by which Cognito will refer to your users.</p>
        *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity
        *          and to link new logins (that is, user credentials issued by a public provider or developer
        *          provider) to an existing identity. When you want to create a new identity, the
        *             <code>IdentityId</code> should be null. When you want to associate a new login with an
        *          existing authenticated/unauthenticated identity, you can do so by providing the existing
        *             <code>IdentityId</code>. This API will create the identity in the specified
        *             <code>IdentityPoolId</code>.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, GetOpenIdTokenForDeveloperIdentityCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, GetOpenIdTokenForDeveloperIdentityCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new GetOpenIdTokenForDeveloperIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOpenIdTokenForDeveloperIdentityCommandInput} for command's `input` shape.
        * @see {@link GetOpenIdTokenForDeveloperIdentityCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class GetOpenIdTokenForDeveloperIdentityCommand extends $Command<GetOpenIdTokenForDeveloperIdentityCommandInput, GetOpenIdTokenForDeveloperIdentityCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: GetOpenIdTokenForDeveloperIdentityCommandInput;
            constructor(input: GetOpenIdTokenForDeveloperIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOpenIdTokenForDeveloperIdentityCommandInput, GetOpenIdTokenForDeveloperIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/GetPrincipalTagAttributeMapCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { GetPrincipalTagAttributeMapInput, GetPrincipalTagAttributeMapResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface GetPrincipalTagAttributeMapCommandInput extends GetPrincipalTagAttributeMapInput {
    }
    export interface GetPrincipalTagAttributeMapCommandOutput extends GetPrincipalTagAttributeMapResponse, __MetadataBearer {
    }
    /**
        * <p>Use <code>GetPrincipalTagAttributeMap</code> to list all mappings between <code>PrincipalTags</code> and user attributes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, GetPrincipalTagAttributeMapCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, GetPrincipalTagAttributeMapCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new GetPrincipalTagAttributeMapCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPrincipalTagAttributeMapCommandInput} for command's `input` shape.
        * @see {@link GetPrincipalTagAttributeMapCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class GetPrincipalTagAttributeMapCommand extends $Command<GetPrincipalTagAttributeMapCommandInput, GetPrincipalTagAttributeMapCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: GetPrincipalTagAttributeMapCommandInput;
            constructor(input: GetPrincipalTagAttributeMapCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPrincipalTagAttributeMapCommandInput, GetPrincipalTagAttributeMapCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListIdentitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { ListIdentitiesInput, ListIdentitiesResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface ListIdentitiesCommandInput extends ListIdentitiesInput {
    }
    export interface ListIdentitiesCommandOutput extends ListIdentitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the identities in an identity pool.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, ListIdentitiesCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, ListIdentitiesCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new ListIdentitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIdentitiesCommandInput} for command's `input` shape.
        * @see {@link ListIdentitiesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class ListIdentitiesCommand extends $Command<ListIdentitiesCommandInput, ListIdentitiesCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: ListIdentitiesCommandInput;
            constructor(input: ListIdentitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIdentitiesCommandInput, ListIdentitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListIdentityPoolsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { ListIdentityPoolsInput, ListIdentityPoolsResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface ListIdentityPoolsCommandInput extends ListIdentityPoolsInput {
    }
    export interface ListIdentityPoolsCommandOutput extends ListIdentityPoolsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the Cognito identity pools registered for your account.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, ListIdentityPoolsCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, ListIdentityPoolsCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new ListIdentityPoolsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIdentityPoolsCommandInput} for command's `input` shape.
        * @see {@link ListIdentityPoolsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class ListIdentityPoolsCommand extends $Command<ListIdentityPoolsCommandInput, ListIdentityPoolsCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: ListIdentityPoolsCommandInput;
            constructor(input: ListIdentityPoolsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIdentityPoolsCommandInput, ListIdentityPoolsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { ListTagsForResourceInput, ListTagsForResourceResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceInput {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p>
        *          <p>A tag is a label that you can apply to identity pools to categorize and manage them in
        *          different ways, such as by purpose, owner, environment, or other criteria.</p>
        *          <p>You can use this action up to 10 times per second, per account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, ListTagsForResourceCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, ListTagsForResourceCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/LookupDeveloperIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { LookupDeveloperIdentityInput, LookupDeveloperIdentityResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface LookupDeveloperIdentityCommandInput extends LookupDeveloperIdentityInput {
    }
    export interface LookupDeveloperIdentityCommandOutput extends LookupDeveloperIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the <code>IdentityID</code> associated with a
        *             <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>
        *          values associated with an <code>IdentityId</code> for an existing identity. Either
        *             <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you
        *          supply only one of these values, the other value will be searched in the database and
        *          returned as a part of the response. If you supply both,
        *             <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If
        *          the values are verified against the database, the response returns both values and is the
        *          same as the request. Otherwise a <code>ResourceConflictException</code> is
        *          thrown.</p>
        *          <p>
        *             <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane
        *          operations: for example, to enable customer service to locate an identity ID by username.
        *          If you are using it for higher-volume operations such as user authentication, your requests
        *          are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a
        *          better option for higher-volume operations for user authentication.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, LookupDeveloperIdentityCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, LookupDeveloperIdentityCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new LookupDeveloperIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link LookupDeveloperIdentityCommandInput} for command's `input` shape.
        * @see {@link LookupDeveloperIdentityCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class LookupDeveloperIdentityCommand extends $Command<LookupDeveloperIdentityCommandInput, LookupDeveloperIdentityCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: LookupDeveloperIdentityCommandInput;
            constructor(input: LookupDeveloperIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<LookupDeveloperIdentityCommandInput, LookupDeveloperIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/MergeDeveloperIdentitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { MergeDeveloperIdentitiesInput, MergeDeveloperIdentitiesResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface MergeDeveloperIdentitiesCommandInput extends MergeDeveloperIdentitiesInput {
    }
    export interface MergeDeveloperIdentitiesCommandOutput extends MergeDeveloperIdentitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Merges two users having different <code>IdentityId</code>s, existing in the same
        *          identity pool, and identified by the same developer provider. You can use this action to
        *          request that discrete users be merged and identified as a single user in the Cognito
        *          environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>)
        *          with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only
        *          developer-authenticated users can be merged. If the users to be merged are associated with
        *          the same public provider, but as two different users, an exception will be
        *          thrown.</p>
        *          <p>The number of linked logins is limited to 20. So, the number of linked logins for the
        *          source user, <code>SourceUserIdentifier</code>, and the destination user,
        *          <code>DestinationUserIdentifier</code>, together should not be larger than 20.
        *          Otherwise, an exception will be thrown.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, MergeDeveloperIdentitiesCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, MergeDeveloperIdentitiesCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new MergeDeveloperIdentitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MergeDeveloperIdentitiesCommandInput} for command's `input` shape.
        * @see {@link MergeDeveloperIdentitiesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class MergeDeveloperIdentitiesCommand extends $Command<MergeDeveloperIdentitiesCommandInput, MergeDeveloperIdentitiesCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: MergeDeveloperIdentitiesCommandInput;
            constructor(input: MergeDeveloperIdentitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MergeDeveloperIdentitiesCommandInput, MergeDeveloperIdentitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/SetIdentityPoolRolesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { SetIdentityPoolRolesInput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface SetIdentityPoolRolesCommandInput extends SetIdentityPoolRolesInput {
    }
    export interface SetIdentityPoolRolesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, SetIdentityPoolRolesCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, SetIdentityPoolRolesCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new SetIdentityPoolRolesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIdentityPoolRolesCommandInput} for command's `input` shape.
        * @see {@link SetIdentityPoolRolesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class SetIdentityPoolRolesCommand extends $Command<SetIdentityPoolRolesCommandInput, SetIdentityPoolRolesCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: SetIdentityPoolRolesCommandInput;
            constructor(input: SetIdentityPoolRolesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIdentityPoolRolesCommandInput, SetIdentityPoolRolesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/SetPrincipalTagAttributeMapCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { SetPrincipalTagAttributeMapInput, SetPrincipalTagAttributeMapResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface SetPrincipalTagAttributeMapCommandInput extends SetPrincipalTagAttributeMapInput {
    }
    export interface SetPrincipalTagAttributeMapCommandOutput extends SetPrincipalTagAttributeMapResponse, __MetadataBearer {
    }
    /**
        * <p>You can use this operation to use default (username and clientID) attribute or custom attribute mappings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, SetPrincipalTagAttributeMapCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, SetPrincipalTagAttributeMapCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new SetPrincipalTagAttributeMapCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetPrincipalTagAttributeMapCommandInput} for command's `input` shape.
        * @see {@link SetPrincipalTagAttributeMapCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class SetPrincipalTagAttributeMapCommand extends $Command<SetPrincipalTagAttributeMapCommandInput, SetPrincipalTagAttributeMapCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: SetPrincipalTagAttributeMapCommandInput;
            constructor(input: SetPrincipalTagAttributeMapCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetPrincipalTagAttributeMapCommandInput, SetPrincipalTagAttributeMapCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { TagResourceInput, TagResourceResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceInput {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns a set of tags to the specified Amazon Cognito identity pool. A tag is a label
        *          that you can use to categorize and manage identity pools in different ways, such as by
        *          purpose, owner, environment, or other criteria.</p>
        *          <p>Each tag consists of a key and value, both of which you define. A key is a general
        *          category for more specific values. For example, if you have two versions of an identity
        *          pool, one for testing and another for production, you might assign an
        *             <code>Environment</code> tag key to both identity pools. The value of this key might be
        *             <code>Test</code> for one identity pool and <code>Production</code> for the
        *          other.</p>
        *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that
        *          they appear on the Billing and Cost Management console, where you can track the costs
        *          associated with your identity pools. In an IAM policy, you can constrain permissions for
        *          identity pools based on specific tags or tag values.</p>
        *          <p>You can use this action up to 5 times per second, per account. An identity pool can have
        *          as many as 50 tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, TagResourceCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, TagResourceCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UnlinkDeveloperIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { UnlinkDeveloperIdentityInput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface UnlinkDeveloperIdentityCommandInput extends UnlinkDeveloperIdentityInput {
    }
    export interface UnlinkDeveloperIdentityCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked
        *          developer users will be considered new identities next time they are seen. If, for a given
        *          Cognito identity, you remove all federated identities as well as the developer user
        *          identifier, the Cognito identity becomes inaccessible.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, UnlinkDeveloperIdentityCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, UnlinkDeveloperIdentityCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new UnlinkDeveloperIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UnlinkDeveloperIdentityCommandInput} for command's `input` shape.
        * @see {@link UnlinkDeveloperIdentityCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class UnlinkDeveloperIdentityCommand extends $Command<UnlinkDeveloperIdentityCommandInput, UnlinkDeveloperIdentityCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: UnlinkDeveloperIdentityCommandInput;
            constructor(input: UnlinkDeveloperIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UnlinkDeveloperIdentityCommandInput, UnlinkDeveloperIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UnlinkIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { UnlinkIdentityInput } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface UnlinkIdentityCommandInput extends UnlinkIdentityInput {
    }
    export interface UnlinkIdentityCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Unlinks a federated identity from an existing account. Unlinked logins will be
        *          considered new identities next time they are seen. Removing the last linked login will make
        *          this identity inaccessible.</p>
        *          <p>This is a public API. You do not need any credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, UnlinkIdentityCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, UnlinkIdentityCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new UnlinkIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UnlinkIdentityCommandInput} for command's `input` shape.
        * @see {@link UnlinkIdentityCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class UnlinkIdentityCommand extends $Command<UnlinkIdentityCommandInput, UnlinkIdentityCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: UnlinkIdentityCommandInput;
            constructor(input: UnlinkIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UnlinkIdentityCommandInput, UnlinkIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { UntagResourceInput, UntagResourceResponse } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceInput {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified Amazon Cognito identity pool. You can use
        *          this action up to 5 times per second, per account</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, UntagResourceCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, UntagResourceCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/commands/UpdateIdentityPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/CognitoIdentityClient";
    import { IdentityPool } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0";
    export interface UpdateIdentityPoolCommandInput extends IdentityPool {
    }
    export interface UpdateIdentityPoolCommandOutput extends IdentityPool, __MetadataBearer {
    }
    /**
        * <p>Updates an identity pool.</p>
        *          <p>You must use AWS Developer credentials to call this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityClient, UpdateIdentityPoolCommand } from "@aws-sdk/client-cognito-identity"; // ES Modules import
        * // const { CognitoIdentityClient, UpdateIdentityPoolCommand } = require("@aws-sdk/client-cognito-identity"); // CommonJS import
        * const client = new CognitoIdentityClient(config);
        * const command = new UpdateIdentityPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIdentityPoolCommandInput} for command's `input` shape.
        * @see {@link UpdateIdentityPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityClientResolvedConfig | config} for CognitoIdentityClient's `config` shape.
        *
        */
    export class UpdateIdentityPoolCommand extends $Command<UpdateIdentityPoolCommandInput, UpdateIdentityPoolCommandOutput, CognitoIdentityClientResolvedConfig> {
            readonly input: UpdateIdentityPoolCommandInput;
            constructor(input: UpdateIdentityPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIdentityPoolCommandInput, UpdateIdentityPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CognitoIdentityServiceException as __BaseException } from "@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/CognitoIdentityServiceException";
    export enum AmbiguousRoleResolutionType {
            AUTHENTICATED_ROLE = "AuthenticatedRole",
            DENY = "Deny"
    }
    /**
        * <p>A provider representing an Amazon Cognito user pool and its client ID.</p>
        */
    export interface CognitoIdentityProvider {
            /**
                * <p>The provider name for an Amazon Cognito user pool. For example,
                *             <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.</p>
                */
            ProviderName?: string;
            /**
                * <p>The client ID for the Amazon Cognito user pool.</p>
                */
            ClientId?: string;
            /**
                * <p>TRUE if server-side token validation is enabled for the identity provider’s
                *          token.</p>
                *          <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that
                *          identity pool will check with the integrated user pools to make sure that the user has not
                *          been globally signed out or deleted before the identity pool provides an OIDC token or AWS
                *          credentials for the user.</p>
                *          <p>If the user is signed out or deleted, the identity pool will return a 400 Not
                *          Authorized error.</p>
                */
            ServerSideTokenCheck?: boolean;
    }
    export namespace CognitoIdentityProvider {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CognitoIdentityProvider) => any;
    }
    /**
        * <p>Input to the CreateIdentityPool action.</p>
        */
    export interface CreateIdentityPoolInput {
            /**
                * <p>A string that you provide.</p>
                */
            IdentityPoolName: string | undefined;
            /**
                * <p>TRUE if the identity pool supports unauthenticated logins.</p>
                */
            AllowUnauthenticatedIdentities: boolean | undefined;
            /**
                * <p>Enables or disables the Basic (Classic) authentication flow. For more information, see
                *       <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                */
            AllowClassicFlow?: boolean;
            /**
                * <p>Optional key:value pairs mapping provider names to provider app IDs.</p>
                */
            SupportedLoginProviders?: Record<string, string>;
            /**
                * <p>The "domain" by which Cognito will refer to your users. This name acts as a
                *          placeholder that allows your backend and the Cognito service to communicate about the
                *          developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well
                *          as period (<code>.</code>), underscore (<code>_</code>), and dash
                *          (<code>-</code>).</p>
                *          <p>Once you have set a developer provider name, you cannot change it. Please take care
                *          in setting this parameter.</p>
                */
            DeveloperProviderName?: string;
            /**
                * <p>The Amazon Resource Names (ARN) of the OpenID Connect providers.</p>
                */
            OpenIdConnectProviderARNs?: string[];
            /**
                * <p>An array of Amazon Cognito user pools and their client IDs.</p>
                */
            CognitoIdentityProviders?: CognitoIdentityProvider[];
            /**
                * <p>An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
                *          pool.</p>
                */
            SamlProviderARNs?: string[];
            /**
                * <p>Tags to assign to the identity pool. A tag is a label that you can apply to identity
                *          pools to categorize and manage them in different ways, such as by purpose, owner,
                *          environment, or other criteria.</p>
                */
            IdentityPoolTags?: Record<string, string>;
    }
    export namespace CreateIdentityPoolInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIdentityPoolInput) => any;
    }
    /**
        * <p>An object representing an Amazon Cognito identity pool.</p>
        */
    export interface IdentityPool {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>A string that you provide.</p>
                */
            IdentityPoolName: string | undefined;
            /**
                * <p>TRUE if the identity pool supports unauthenticated logins.</p>
                */
            AllowUnauthenticatedIdentities: boolean | undefined;
            /**
                * <p>Enables or disables the Basic (Classic) authentication flow. For more information, see
                *       <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                */
            AllowClassicFlow?: boolean;
            /**
                * <p>Optional key:value pairs mapping provider names to provider app IDs.</p>
                */
            SupportedLoginProviders?: Record<string, string>;
            /**
                * <p>The "domain" by which Cognito will refer to your users.</p>
                */
            DeveloperProviderName?: string;
            /**
                * <p>The ARNs of the OpenID Connect providers.</p>
                */
            OpenIdConnectProviderARNs?: string[];
            /**
                * <p>A list representing an Amazon Cognito user pool and its client ID.</p>
                */
            CognitoIdentityProviders?: CognitoIdentityProvider[];
            /**
                * <p>An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
                *          pool.</p>
                */
            SamlProviderARNs?: string[];
            /**
                * <p>The tags that are assigned to the identity pool. A tag is a label that you can apply to
                *          identity pools to categorize and manage them in different ways, such as by purpose, owner,
                *          environment, or other criteria.</p>
                */
            IdentityPoolTags?: Record<string, string>;
    }
    export namespace IdentityPool {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityPool) => any;
    }
    /**
        * <p>Thrown when the service encounters an error during processing the request.</p>
        */
    export class InternalErrorException extends __BaseException {
            readonly name: "InternalErrorException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
    }
    /**
        * <p>Thrown for missing or bad input parameter(s).</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>Thrown when the total number of user pools has exceeded a preset limit.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>Thrown when a user is not authorized to access the requested resource.</p>
        */
    export class NotAuthorizedException extends __BaseException {
            readonly name: "NotAuthorizedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>);
    }
    /**
        * <p>Thrown when a user tries to use a login which is already linked to another
        *          account.</p>
        */
    export class ResourceConflictException extends __BaseException {
            readonly name: "ResourceConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceConflictException, __BaseException>);
    }
    /**
        * <p>Thrown when a request is throttled.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>Input to the <code>DeleteIdentities</code> action.</p>
        */
    export interface DeleteIdentitiesInput {
            /**
                * <p>A list of 1-60 identities that you want to delete.</p>
                */
            IdentityIdsToDelete: string[] | undefined;
    }
    export namespace DeleteIdentitiesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentitiesInput) => any;
    }
    export enum ErrorCode {
            ACCESS_DENIED = "AccessDenied",
            INTERNAL_SERVER_ERROR = "InternalServerError"
    }
    /**
        * <p>An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and
        *          IdentityId.</p>
        */
    export interface UnprocessedIdentityId {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
            /**
                * <p>The error code indicating the type of error that occurred.</p>
                */
            ErrorCode?: ErrorCode | string;
    }
    export namespace UnprocessedIdentityId {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnprocessedIdentityId) => any;
    }
    /**
        * <p>Returned in response to a successful <code>DeleteIdentities</code>
        *          operation.</p>
        */
    export interface DeleteIdentitiesResponse {
            /**
                * <p>An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and
                *          IdentityId.</p>
                */
            UnprocessedIdentityIds?: UnprocessedIdentityId[];
    }
    export namespace DeleteIdentitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentitiesResponse) => any;
    }
    /**
        * <p>Input to the DeleteIdentityPool action.</p>
        */
    export interface DeleteIdentityPoolInput {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
    }
    export namespace DeleteIdentityPoolInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentityPoolInput) => any;
    }
    /**
        * <p>Thrown when the requested resource (for example, a dataset or record) does not
        *          exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Input to the <code>DescribeIdentity</code> action.</p>
        */
    export interface DescribeIdentityInput {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId: string | undefined;
    }
    export namespace DescribeIdentityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIdentityInput) => any;
    }
    /**
        * <p>A description of the identity.</p>
        */
    export interface IdentityDescription {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
            /**
                * <p>The provider names.</p>
                */
            Logins?: string[];
            /**
                * <p>Date on which the identity was created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>Date on which the identity was last modified.</p>
                */
            LastModifiedDate?: Date;
    }
    export namespace IdentityDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityDescription) => any;
    }
    /**
        * <p>Input to the DescribeIdentityPool action.</p>
        */
    export interface DescribeIdentityPoolInput {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
    }
    export namespace DescribeIdentityPoolInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIdentityPoolInput) => any;
    }
    /**
        * <p>An exception thrown when a dependent service such as Facebook or Twitter is not
        *          responding</p>
        */
    export class ExternalServiceException extends __BaseException {
            readonly name: "ExternalServiceException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExternalServiceException, __BaseException>);
    }
    /**
        * <p>Input to the <code>GetCredentialsForIdentity</code> action.</p>
        */
    export interface GetCredentialsForIdentityInput {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId: string | undefined;
            /**
                * <p>A set of optional name-value pairs that map provider names to provider tokens. The
                *          name-value pair will follow the syntax "provider_name":
                *          "provider_user_identifier".</p>
                *          <p>Logins should not be specified when trying to get credentials for an unauthenticated
                *          identity.</p>
                *          <p>The Logins parameter is required when using identities associated with external
                *          identity providers such as Facebook. For examples of <code>Logins</code> maps, see the code
                *          examples in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html">External Identity Providers</a> section of the Amazon Cognito Developer
                *          Guide.</p>
                */
            Logins?: Record<string, string>;
            /**
                * <p>The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were
                *          received in the token from the identity provider. For example, a SAML-based identity
                *          provider. This parameter is optional for identity providers that do not support role
                *          customization.</p>
                */
            CustomRoleArn?: string;
    }
    export namespace GetCredentialsForIdentityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCredentialsForIdentityInput) => any;
    }
    /**
        * <p>Credentials for the provided identity ID.</p>
        */
    export interface Credentials {
            /**
                * <p>The Access Key portion of the credentials.</p>
                */
            AccessKeyId?: string;
            /**
                * <p>The Secret Access Key portion of the credentials</p>
                */
            SecretKey?: string;
            /**
                * <p>The Session Token portion of the credentials</p>
                */
            SessionToken?: string;
            /**
                * <p>The date at which these credentials will expire.</p>
                */
            Expiration?: Date;
    }
    export namespace Credentials {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Credentials) => any;
    }
    /**
        * <p>Returned in response to a successful <code>GetCredentialsForIdentity</code>
        *          operation.</p>
        */
    export interface GetCredentialsForIdentityResponse {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
            /**
                * <p>Credentials for the provided identity ID.</p>
                */
            Credentials?: Credentials;
    }
    export namespace GetCredentialsForIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCredentialsForIdentityResponse) => any;
    }
    /**
        * <p>Thrown if the identity pool has no role associated for the given auth type
        *          (auth/unauth) or if the AssumeRole fails.</p>
        */
    export class InvalidIdentityPoolConfigurationException extends __BaseException {
            readonly name: "InvalidIdentityPoolConfigurationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidIdentityPoolConfigurationException, __BaseException>);
    }
    /**
        * <p>Input to the GetId action.</p>
        */
    export interface GetIdInput {
            /**
                * <p>A standard AWS account ID (9+ digits).</p>
                */
            AccountId?: string;
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>A set of optional name-value pairs that map provider names to provider tokens. The
                *          available provider names for <code>Logins</code> are as follows:</p>
                *          <ul>
                *             <li>
                *                <p>Facebook: <code>graph.facebook.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Cognito user pool:
                *                   <code>cognito-idp.<region>.amazonaws.com/<YOUR_USER_POOL_ID></code>,
                *                for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.
                *             </p>
                *             </li>
                *             <li>
                *                <p>Google: <code>accounts.google.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon: <code>www.amazon.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Twitter: <code>api.twitter.com</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Digits: <code>www.digits.com</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Logins?: Record<string, string>;
    }
    export namespace GetIdInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdInput) => any;
    }
    /**
        * <p>Returned in response to a GetId request.</p>
        */
    export interface GetIdResponse {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
    }
    export namespace GetIdResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdResponse) => any;
    }
    /**
        * <p>Input to the <code>GetIdentityPoolRoles</code> action.</p>
        */
    export interface GetIdentityPoolRolesInput {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
    }
    export namespace GetIdentityPoolRolesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityPoolRolesInput) => any;
    }
    export enum MappingRuleMatchType {
            CONTAINS = "Contains",
            EQUALS = "Equals",
            NOT_EQUAL = "NotEqual",
            STARTS_WITH = "StartsWith"
    }
    /**
        * <p>A rule that maps a claim name, a claim value, and a match type to a role
        *          ARN.</p>
        */
    export interface MappingRule {
            /**
                * <p>The claim name that must be present in the token, for example, "isAdmin" or
                *          "paid".</p>
                */
            Claim: string | undefined;
            /**
                * <p>The match condition that specifies how closely the claim value in the IdP token must
                *          match <code>Value</code>.</p>
                */
            MatchType: MappingRuleMatchType | string | undefined;
            /**
                * <p>A brief string that the claim must match, for example, "paid" or "yes".</p>
                */
            Value: string | undefined;
            /**
                * <p>The role ARN.</p>
                */
            RoleARN: string | undefined;
    }
    export namespace MappingRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MappingRule) => any;
    }
    /**
        * <p>A container for rules.</p>
        */
    export interface RulesConfigurationType {
            /**
                * <p>An array of rules. You can specify up to 25 rules per identity provider.</p>
                *          <p>Rules are evaluated in order. The first one to match specifies the role.</p>
                */
            Rules: MappingRule[] | undefined;
    }
    export namespace RulesConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RulesConfigurationType) => any;
    }
    export enum RoleMappingType {
            RULES = "Rules",
            TOKEN = "Token"
    }
    /**
        * <p>A role mapping.</p>
        */
    export interface RoleMapping {
            /**
                * <p>The role mapping type. Token will use <code>cognito:roles</code> and
                *             <code>cognito:preferred_role</code> claims from the Cognito identity provider token to
                *          map groups to roles. Rules will attempt to match claims from the token to map to a
                *          role.</p>
                */
            Type: RoleMappingType | string | undefined;
            /**
                * <p>If you specify Token or Rules as the <code>Type</code>,
                *             <code>AmbiguousRoleResolution</code> is required.</p>
                *          <p>Specifies the action to be taken if either no rules match the claim value for the
                *             <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and
                *          there are multiple <code>cognito:roles</code> matches for the <code>Token</code>
                *          type.</p>
                */
            AmbiguousRoleResolution?: AmbiguousRoleResolutionType | string;
            /**
                * <p>The rules to be used for mapping users to roles.</p>
                *          <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is
                *          required.</p>
                */
            RulesConfiguration?: RulesConfigurationType;
    }
    export namespace RoleMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RoleMapping) => any;
    }
    /**
        * <p>Returned in response to a successful <code>GetIdentityPoolRoles</code>
        *          operation.</p>
        */
    export interface GetIdentityPoolRolesResponse {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId?: string;
            /**
                * <p>The map of roles associated with this pool. Currently only authenticated and
                *          unauthenticated roles are supported.</p>
                */
            Roles?: Record<string, string>;
            /**
                * <p>How users for a specific identity provider are to mapped to roles. This is a
                *             String-to-<a>RoleMapping</a> object map. The string identifies the identity
                *          provider, for example, "graph.facebook.com" or
                *          "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
                */
            RoleMappings?: Record<string, RoleMapping>;
    }
    export namespace GetIdentityPoolRolesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityPoolRolesResponse) => any;
    }
    /**
        * <p>Input to the GetOpenIdToken action.</p>
        */
    export interface GetOpenIdTokenInput {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId: string | undefined;
            /**
                * <p>A set of optional name-value pairs that map provider names to provider tokens. When
                *          using graph.facebook.com and www.amazon.com, supply the access_token returned from the
                *          provider's authflow. For accounts.google.com, an Amazon Cognito user pool provider, or any
                *          other OpenID Connect provider, always include the <code>id_token</code>.</p>
                */
            Logins?: Record<string, string>;
    }
    export namespace GetOpenIdTokenInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpenIdTokenInput) => any;
    }
    /**
        * <p>Returned in response to a successful GetOpenIdToken request.</p>
        */
    export interface GetOpenIdTokenResponse {
            /**
                * <p>A unique identifier in the format REGION:GUID. Note that the IdentityId returned may
                *          not match the one passed on input.</p>
                */
            IdentityId?: string;
            /**
                * <p>An OpenID token, valid for 10 minutes.</p>
                */
            Token?: string;
    }
    export namespace GetOpenIdTokenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpenIdTokenResponse) => any;
    }
    /**
        * <p>The provided developer user identifier is already registered with Cognito under a
        *          different identity ID.</p>
        */
    export class DeveloperUserAlreadyRegisteredException extends __BaseException {
            readonly name: "DeveloperUserAlreadyRegisteredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DeveloperUserAlreadyRegisteredException, __BaseException>);
    }
    /**
        * <p>Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.</p>
        */
    export interface GetOpenIdTokenForDeveloperIdentityInput {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
            /**
                * <p>A set of optional name-value pairs that map provider names to provider tokens. Each
                *          name-value pair represents a user from a public provider or developer provider. If the user
                *          is from a developer provider, the name-value pair will follow the syntax
                *             <code>"developer_provider_name": "developer_user_identifier"</code>. The developer
                *          provider is the "domain" by which Cognito will refer to your users; you provided this
                *          domain while creating/updating the identity pool. The developer user identifier is an
                *          identifier from your backend that uniquely identifies a user. When you create an identity
                *          pool, you can specify the supported logins.</p>
                */
            Logins: Record<string, string> | undefined;
            /**
                * <p>Use this operation to configure attribute mappings for custom providers. </p>
                */
            PrincipalTags?: Record<string, string>;
            /**
                * <p>The expiration time of the token, in seconds. You can specify a custom expiration
                *          time for the token so that you can cache it. If you don't provide an expiration time, the
                *          token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS
                *          credentials, which are valid for a maximum of one hour. The maximum token duration you can
                *          set is 24 hours. You should take care in setting the expiration time for a token, as there
                *          are significant security implications: an attacker could use a leaked token to access your
                *          AWS resources for the token's duration.</p>
                *          <note>
                *             <p>Please provide for a small grace period, usually no more than 5 minutes, to account for clock skew.</p>
                *          </note>
                */
            TokenDuration?: number;
    }
    export namespace GetOpenIdTokenForDeveloperIdentityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpenIdTokenForDeveloperIdentityInput) => any;
    }
    /**
        * <p>Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code>
        *          request.</p>
        */
    export interface GetOpenIdTokenForDeveloperIdentityResponse {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
            /**
                * <p>An OpenID token.</p>
                */
            Token?: string;
    }
    export namespace GetOpenIdTokenForDeveloperIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpenIdTokenForDeveloperIdentityResponse) => any;
    }
    export interface GetPrincipalTagAttributeMapInput {
            /**
                * <p>You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>You can use this operation to get the provider name.</p>
                */
            IdentityProviderName: string | undefined;
    }
    export namespace GetPrincipalTagAttributeMapInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPrincipalTagAttributeMapInput) => any;
    }
    export interface GetPrincipalTagAttributeMapResponse {
            /**
                * <p>You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.</p>
                */
            IdentityPoolId?: string;
            /**
                * <p>You can use this operation to get the provider name.</p>
                */
            IdentityProviderName?: string;
            /**
                * <p>You can use this operation to list </p>
                */
            UseDefaults?: boolean;
            /**
                * <p>You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.</p>
                */
            PrincipalTags?: Record<string, string>;
    }
    export namespace GetPrincipalTagAttributeMapResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPrincipalTagAttributeMapResponse) => any;
    }
    /**
        * <p>Input to the ListIdentities action.</p>
        */
    export interface ListIdentitiesInput {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>The maximum number of identities to return.</p>
                */
            MaxResults: number | undefined;
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>An optional boolean parameter that allows you to hide disabled identities. If
                *          omitted, the ListIdentities API will include disabled identities in the response.</p>
                */
            HideDisabled?: boolean;
    }
    export namespace ListIdentitiesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentitiesInput) => any;
    }
    /**
        * <p>The response to a ListIdentities request.</p>
        */
    export interface ListIdentitiesResponse {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId?: string;
            /**
                * <p>An object containing a set of identities and associated mappings.</p>
                */
            Identities?: IdentityDescription[];
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListIdentitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentitiesResponse) => any;
    }
    /**
        * <p>Input to the ListIdentityPools action.</p>
        */
    export interface ListIdentityPoolsInput {
            /**
                * <p>The maximum number of identities to return.</p>
                */
            MaxResults: number | undefined;
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListIdentityPoolsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentityPoolsInput) => any;
    }
    /**
        * <p>A description of the identity pool.</p>
        */
    export interface IdentityPoolShortDescription {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId?: string;
            /**
                * <p>A string that you provide.</p>
                */
            IdentityPoolName?: string;
    }
    export namespace IdentityPoolShortDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityPoolShortDescription) => any;
    }
    /**
        * <p>The result of a successful ListIdentityPools action.</p>
        */
    export interface ListIdentityPoolsResponse {
            /**
                * <p>The identity pools returned by the ListIdentityPools action.</p>
                */
            IdentityPools?: IdentityPoolShortDescription[];
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListIdentityPoolsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentityPoolsResponse) => any;
    }
    export interface ListTagsForResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the identity pool that the tags are assigned
                *          to.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags that are assigned to the identity pool.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>Input to the <code>LookupDeveloperIdentityInput</code> action.</p>
        */
    export interface LookupDeveloperIdentityInput {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
            /**
                * <p>A unique ID used by your backend authentication process to identify a user.
                *          Typically, a developer identity provider would issue many developer user identifiers, in
                *          keeping with the number of users.</p>
                */
            DeveloperUserIdentifier?: string;
            /**
                * <p>The maximum number of identities to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token. The first call you make will have <code>NextToken</code> set to
                *          null. After that the service will return <code>NextToken</code> values as needed. For
                *          example, let's say you make a request with <code>MaxResults</code> set to 10, and there are
                *          20 matches in the database. The service will return a pagination token as a part of the
                *          response. This token can be used to call the API again and get results starting from the
                *          11th match.</p>
                */
            NextToken?: string;
    }
    export namespace LookupDeveloperIdentityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LookupDeveloperIdentityInput) => any;
    }
    /**
        * <p>Returned in response to a successful <code>LookupDeveloperIdentity</code>
        *          action.</p>
        */
    export interface LookupDeveloperIdentityResponse {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
            /**
                * <p>This is the list of developer user identifiers associated with an identity ID.
                *          Cognito supports the association of multiple developer user identifiers with an identity
                *          ID.</p>
                */
            DeveloperUserIdentifierList?: string[];
            /**
                * <p>A pagination token. The first call you make will have <code>NextToken</code> set to
                *          null. After that the service will return <code>NextToken</code> values as needed. For
                *          example, let's say you make a request with <code>MaxResults</code> set to 10, and there are
                *          20 matches in the database. The service will return a pagination token as a part of the
                *          response. This token can be used to call the API again and get results starting from the
                *          11th match.</p>
                */
            NextToken?: string;
    }
    export namespace LookupDeveloperIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LookupDeveloperIdentityResponse) => any;
    }
    /**
        * <p>Input to the <code>MergeDeveloperIdentities</code> action.</p>
        */
    export interface MergeDeveloperIdentitiesInput {
            /**
                * <p>User identifier for the source user. The value should be a
                *             <code>DeveloperUserIdentifier</code>.</p>
                */
            SourceUserIdentifier: string | undefined;
            /**
                * <p>User identifier for the destination user. The value should be a
                *             <code>DeveloperUserIdentifier</code>.</p>
                */
            DestinationUserIdentifier: string | undefined;
            /**
                * <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain
                *          name that you provide while creating an identity pool. This name acts as a placeholder that
                *          allows your backend and the Cognito service to communicate about the developer provider.
                *          For the <code>DeveloperProviderName</code>, you can use letters as well as period (.),
                *          underscore (_), and dash (-).</p>
                */
            DeveloperProviderName: string | undefined;
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
    }
    export namespace MergeDeveloperIdentitiesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeDeveloperIdentitiesInput) => any;
    }
    /**
        * <p>Returned in response to a successful <code>MergeDeveloperIdentities</code>
        *          action.</p>
        */
    export interface MergeDeveloperIdentitiesResponse {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId?: string;
    }
    export namespace MergeDeveloperIdentitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MergeDeveloperIdentitiesResponse) => any;
    }
    /**
        * <p>Thrown if there are parallel requests to modify a resource.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>Input to the <code>SetIdentityPoolRoles</code> action.</p>
        */
    export interface SetIdentityPoolRolesInput {
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>The map of roles associated with this pool. For a given role, the key will be either
                *          "authenticated" or "unauthenticated" and the value will be the Role ARN.</p>
                */
            Roles: Record<string, string> | undefined;
            /**
                * <p>How users for a specific identity provider are to mapped to roles. This is a string
                *          to <a>RoleMapping</a> object map. The string identifies the identity provider,
                *          for example, "graph.facebook.com" or
                *          "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
                *          <p>Up to 25 rules can be specified per identity provider.</p>
                */
            RoleMappings?: Record<string, RoleMapping>;
    }
    export namespace SetIdentityPoolRolesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityPoolRolesInput) => any;
    }
    export interface SetPrincipalTagAttributeMapInput {
            /**
                * <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>The provider name you want to use for attribute mappings.</p>
                */
            IdentityProviderName: string | undefined;
            /**
                * <p>You can use this operation to use default (username and clientID) attribute mappings.</p>
                */
            UseDefaults?: boolean;
            /**
                * <p>You can use this operation to add principal tags.</p>
                */
            PrincipalTags?: Record<string, string>;
    }
    export namespace SetPrincipalTagAttributeMapInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetPrincipalTagAttributeMapInput) => any;
    }
    export interface SetPrincipalTagAttributeMapResponse {
            /**
                * <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
                */
            IdentityPoolId?: string;
            /**
                * <p>The provider name you want to use for attribute mappings.</p>
                */
            IdentityProviderName?: string;
            /**
                * <p>You can use this operation to select default (username and clientID) attribute mappings.</p>
                */
            UseDefaults?: boolean;
            /**
                * <p>You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.</p>
                */
            PrincipalTags?: Record<string, string>;
    }
    export namespace SetPrincipalTagAttributeMapResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetPrincipalTagAttributeMapResponse) => any;
    }
    export interface TagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the identity pool.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to assign to the identity pool.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceInput) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    /**
        * <p>Input to the <code>UnlinkDeveloperIdentity</code> action.</p>
        */
    export interface UnlinkDeveloperIdentityInput {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId: string | undefined;
            /**
                * <p>An identity pool ID in the format REGION:GUID.</p>
                */
            IdentityPoolId: string | undefined;
            /**
                * <p>The "domain" by which Cognito will refer to your users.</p>
                */
            DeveloperProviderName: string | undefined;
            /**
                * <p>A unique ID used by your backend authentication process to identify a user.</p>
                */
            DeveloperUserIdentifier: string | undefined;
    }
    export namespace UnlinkDeveloperIdentityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnlinkDeveloperIdentityInput) => any;
    }
    /**
        * <p>Input to the UnlinkIdentity action.</p>
        */
    export interface UnlinkIdentityInput {
            /**
                * <p>A unique identifier in the format REGION:GUID.</p>
                */
            IdentityId: string | undefined;
            /**
                * <p>A set of optional name-value pairs that map provider names to provider
                *          tokens.</p>
                */
            Logins: Record<string, string> | undefined;
            /**
                * <p>Provider names to unlink from this identity.</p>
                */
            LoginsToRemove: string[] | undefined;
    }
    export namespace UnlinkIdentityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnlinkIdentityInput) => any;
    }
    export interface UntagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the identity pool.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The keys of the tags to remove from the user pool.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceInput) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/client-cognito-identity/dist-types/models/CognitoIdentityServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CognitoIdentity service.
        */
    export class CognitoIdentityServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

